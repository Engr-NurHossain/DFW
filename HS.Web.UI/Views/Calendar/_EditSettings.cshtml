@{
    Layout = null;
}
@model HS.Entities.GlobalSetting
@using AppConfig = HS.Framework.Utils.AppConfig;
@using Localize = HS.Web.UI.Helper.LanguageHelper
@using InpTyp = HS.Web.UI.Helper.LabelHelper.GlobalSettingInputType
@{
    var isvalue = false;
    if (Model.Value.ToLower() == "true")
    {
        isvalue = true;
    }
    var profileUrl = HS.Framework.Utils.AppConfig.DomainSitePath + "/Content/Icons/blank_thumb_file_without_border.png";
    if (Model.InputType.ToLower().IndexOf(InpTyp.Number) > -1)
    {
        if (Model.IsActive == true)
        {
            isvalue = true;
        }
    }
    if (Model.InputType.ToLower().IndexOf(InpTyp.DropDown) > -1 && Model.SearchKey == "CustomCalendarTopRowEmployee")
    {
        if (Model.IsActive == true)
        {
            isvalue = true;
        }
    }
    if (Model.InputType.ToLower().IndexOf(InpTyp.DropDown) > -1 && Model.SearchKey == "CalendarEventTicketResize")
    {
        if (Model.OptionalValue == "true")
        {
            isvalue = true;
        }
    }
}
<html>
<head>
    <script>
        var value, OptionalValue, IsActive, Description;
        var InputType = "@Model.InputType.ToLower()";
        var CheckBox = "@InpTyp.CheckBox";
        var NumberValue = "@InpTyp.Number";
        var TextBoxValue = "@InpTyp.TextBox";
        var searchkey = '@Model.SearchKey';
        var mintime = '@ViewBag.mintime';
        var maxtime = '@ViewBag.maxtime';
    </script>
    @Styles.Render("~/styles/EditCalendarSettings")
    @Scripts.Render("~/scripts/EditCalendarSettings")
</head>
<body>
    <div class="global_info_container">
        <div class="settings-info">
            <div class="header-txt-style">
                <span class="pagehead">@Localize.T("Settings Edit")</span><span class="pagehead saved-sign" id="savesign">@Localize.T(" (Saved)")</span>
            </div>
            @Html.HiddenFor(x => x.Id, new { id = "Id" })
            @Html.HiddenFor(x => x.CompanyId, new { id = "CompanyId" })
            <div class="row gi_popup_mergin">
                <div class="col-xs-12">
                    <label class="span-style">@Localize.T("Search Key")</label>
                    @Html.TextBoxFor(x => x.SearchKey, new { @class = "form-control", placeholder = "SearchKey", datarequired = "true", id = "SearchKey", @readonly = "readonly" })
                </div>
            </div>
            <div class="row gi_popup_mergin editsettings_checkbox">
                <div class="col-xs-12" style="position:fixed;">
                    <label class="span-style valuelabel">@Localize.T("Value")</label>
                    @if (Model.InputType.ToLower().IndexOf(InpTyp.Number) > -1)
                    {
                        <input class="form-control" placeholder="Value" required="required" id="Value" type="number" value="@Model.Value" /><br />
                        <label class="span-style valuelabel">@Localize.T("Enable")</label>
                        <label for="IsCheckVal" class="label-cbx">
                            <input id="IsCheckVal" type="checkbox" style="position:relative;" class="cus-checkBox invisible" @(isvalue ? "checked" : "") autocomplete="off">
                            <div class="checkbox">
                                <svg width="20px" height="20px" viewBox="0 0 20 20">
                                    <path d="M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z"></path>
                                    <polyline points="4 11 8 15 16 6"></polyline>
                                </svg>
                            </div>
                        </label>
                    }
                    else if (Model.InputType.ToLower().IndexOf(InpTyp.CheckBox) > -1)
                    {
                        <label for="IsCheckVal" class="label-cbx">
                            <input id="IsCheckVal" type="checkbox" style="position:relative;" class="cus-checkBox invisible" @(isvalue ? "checked" : "") autocomplete="off">
                            <div class="checkbox">
                                <svg width="20px" height="20px" viewBox="0 0 20 20">
                                    <path d="M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z"></path>
                                    <polyline points="4 11 8 15 16 6"></polyline>
                                </svg>
                            </div>
                        </label>
                    }
                    else if (Model.InputType.ToLower().IndexOf(InpTyp.TextBox) > -1)
                    {
                        <input class="form-control" id="ColorDisplay" type="color" value="@Model.Value" />
                    }
                    else if (Model.InputType.ToLower().IndexOf(InpTyp.DropDown) > -1)
                    {
                        if (Model.SearchKey == "ScheduleCalendarDefaultView")
                        {
                            @Html.DropDownListFor(x => x.Value, ViewBag.DefaultView as List<SelectListItem>, new { @class = "form-control", datarequired = "true" })
                        }
                        else if (Model.SearchKey == "ScheduleCalendarMinTimeRange")
                        {
                            @Html.DropDownListFor(x => x.Value, ViewBag.SchedularTime as List<SelectListItem>, new { @class = "form-control", datarequired = "true" })
                        }
                        else if (Model.SearchKey == "ScheduleCalendarMaxTimeRange")
                        {
                            @Html.DropDownListFor(x => x.Value, ViewBag.SchedularTime as List<SelectListItem>, new { @class = "form-control", datarequired = "true" })
                        }
                        else if (Model.SearchKey == "FirstDayOfWeek")
                        {
                            @Html.DropDownListFor(x => x.Value, ViewBag.FirstDayOfWeek as List<SelectListItem>, new { @class = "form-control", datarequired = "true" })
                        }
                        else if (Model.SearchKey == "CalendarEventIconResizer")
                        {
                            @Html.DropDownListFor(x => x.Value, ViewBag.ResizingNumber as List<SelectListItem>, new { @class = "form-control", datarequired = "true" })
                        }
                        else if (Model.SearchKey == "CalendarEventTicketResize")
                        {
                            @Html.DropDownListFor(x => x.Value, ViewBag.ResizingNumber as List<SelectListItem>, new { @class = "form-control", datarequired = "true" })
                            if (ViewBag.Calendarview == "vertical")
                            {
                                <br />
                                <label class="span-style valuelabel">@Localize.T("Enable")</label>
                                <label for="IsCheckVal" class="label-cbx">
                                    <input id="IsCheckVal" type="checkbox" style="position:relative;" class="cus-checkBox invisible" @(isvalue ? "checked" : "") autocomplete="off">
                                    <div class="checkbox">
                                        <svg width="20px" height="20px" viewBox="0 0 20 20">
                                            <path d="M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z"></path>
                                            <polyline points="4 11 8 15 16 6"></polyline>
                                        </svg>
                                    </div>
                                </label>
                            }
                        }
                        else if (Model.SearchKey == "CalendarViewShow" || Model.SearchKey == "CalendarTicketColor")
                        {
                            @Html.DropDownListFor(x => x.Value, ViewBag.CalendarPosition as List<SelectListItem>, new { @class = "form-control", datarequired = "true" })
                        }
                        else if (Model.SearchKey == "CustomCalendarTopRowEmployee")
                        {
                            @Html.DropDownListFor(x => x.Value, ViewBag.EmployeeList as List<SelectListItem>, new { @class = "form-control", datarequired = "true" })
                            <br />
                            <label class="span-style valuelabel">@Localize.T("Fixed Bottom")</label>
                            <label for="IsBottomVal" class="label-cbx">
                                <input id="IsBottomVal" type="checkbox" style="position:relative;" class="cus-checkBox invisible" @(Model.Description == "Yes" ? "checked" : "") autocomplete="off">
                                <div class="checkbox">
                                    <svg width="20px" height="20px" viewBox="0 0 20 20">
                                        <path d="M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z"></path>
                                        <polyline points="4 11 8 15 16 6"></polyline>
                                    </svg>
                                </div>
                            </label>
                            <br />
                            <label class="span-style valuelabel">@Localize.T("View Position")</label>
                            @Html.DropDownListFor(x => x.OptionalValue, ViewBag.SystemUserPosition as List<SelectListItem>, new { @class = "form-control", datarequired = "true" })
                            <br />
                            <label class="span-style valuelabel">@Localize.T("Enable")</label>
                            <label for="IsCheckVal" class="label-cbx">
                                <input id="IsCheckVal" type="checkbox" style="position:relative;" class="cus-checkBox invisible" @(isvalue ? "checked" : "") autocomplete="off">
                                <div class="checkbox">
                                    <svg width="20px" height="20px" viewBox="0 0 20 20">
                                        <path d="M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z"></path>
                                        <polyline points="4 11 8 15 16 6"></polyline>
                                    </svg>
                                </div>
                            </label>
                        }
                    }
                </div>
            </div>

        </div>
    </div>

    <section class="footer-section">
        <footer class="footer">
            <div class="SaveCancelDiv">
                <button class="btn" id="SaveSettings"><i class="fa fa-floppy-o" aria-hidden="true"></i>@Localize.T(" Save")</button>
            </div>
        </footer>
    </section>
</body>

</html>
