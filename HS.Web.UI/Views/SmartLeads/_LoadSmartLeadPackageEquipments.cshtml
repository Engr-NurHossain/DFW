@{
    Layout = null;
    string Currency = HS.Web.UI.Helper.LabelHelper.CurrentTransMakeCurrency.MakeCurrency();
}
<link href="~/Content/Css/LeadPackageEquipment/LeadPackageEquipment.css" rel="stylesheet" />
<link href="~/Content/Css/SmartLeads/LoadSmartLeadPackageEquipments.css" rel="stylesheet" />
@model HS.Entities.LeadSmartPackageModelEquipmentList
@using Localize = HS.Web.UI.Helper.LanguageHelper

<script>
    var ViewBagEquipmentList = '@ViewBag.PackageEuipmentDataList';
    var CurrentPackageLimit = '@Model.PackageMaxDeviceEquipmentLimit';

    var updateActivationFee = function (e) {
        var PackageId = e;
        var url = domainurl + "/SmartLeads/UpdateActivationFee/";
        var param = JSON.stringify({
            PackageId: e,
            ActivationFee: $("#ActivationFee").val()
        });
        $.ajax({
            type: "POST",
            ajaxStart: $(".loader-div").show(),
            url: url,
            data: param,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            cache: false,
            success: function (data) {
                console.log(data);
                if (data == false) {
                    OpenErrorMessageNew("Error!", "Something Wrong");
                }
                else {
                    OpenSuccessMessageNew("Success!", "", function () {
                        $("#edit-activatio-fee").addClass("hidden");
                        $("#activationFeelabel").removeClass("hidden");
                        $("#update-activation-fee").removeClass("hidden");
                        $("#activationFeelabel").html($("#ActivationFee").val())
                    });
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $(".loader-div").hide();
                console.log(errorThrown);
            }
        });
    }
    var CountSelectedEquipments = function (ServiceId) {
        var Count = 0;
        $(".service-equipments_" + ServiceId + ":checked").each(function () {
            var ServiceEqpId = $(this).attr('idint');
            if (!isNaN(parseInt($(".ServiceEqpQuantity_" + ServiceEqpId).val()))) {
                Count += parseInt($(".ServiceEqpQuantity_" + ServiceEqpId).val());
            }
        });
        return Count;
    }
    $(document).ready(function () {
        $(".device-equipments").click(function () {
            var totalCount = 0;
            $(".device-equipments").each(function () {
                if ($(this).prop('checked') == true) {
                    totalCount++;
                }
                if (totalCount > CurrentPackageLimit) {
                    $(this).attr('checked', false);
                }
            });
            if (totalCount <= CurrentPackageLimit) {
                $(".div-product-limit").css("color", "#2ca01c");
            }
            else {
                $(".div-product-limit").css("color", "red");
                OpenErrorMessageNew("Error!", "Package limit exceeded!");
            }
        });
        $(".service-equipments").click(function () {
            var ServiceId = $(this).attr('id-PackageEqpId');
            var Limit = $(this).attr('datalimit');
            //if ($(".service-equipments_"+ServiceId+":checked").length > Limit) {
            //    $(this).prop("checked", false);
            //    OpenErrorMessageNew("", "Limit Exceeded.");
            //}
            var EqCount = CountSelectedEquipments(ServiceId);
            if (EqCount > Limit) {
                $(this).prop("checked", false);
                OpenErrorMessageNew("", "Limit Exceeded.");
            }
        });
        $(".ServEqQuantity").blur(function () {
            var ServiceId = $(this).attr('id-PackageEqpId');
            var Limit = $(this).attr('datalimit');
            var IdInt = $(this).attr('idint');
            if ($(this).val() > 0) {
                $("#cbxdv" + IdInt).prop("checked", true);
            } else {
                $(this).val(0);
                $("#cbxdv" + IdInt).prop("checked", false);
            }
            var EqCount = CountSelectedEquipments(ServiceId);
            if (EqCount > Limit) {
                if ($("#cbxdv" + IdInt).is(":checked")) {
                    $("#cbxdv" + IdInt).prop("checked", false);
                    OpenErrorMessageNew("", "Limit Exceeded.");
                    $(this).val(0);
                }
            }
        });
    });
</script>


<div class="load_smart_lead_pack_equip_container">
    <div class="load_smart_lead_pack_equip_header">@Localize.T("Package Option Details")</div>
    <div class="load_smart_lead_pack_equip_info">
        <div class="left_info_for">@Localize.T("Included Services:")</div>
        <div class="right_info_for">
            @{
                if (Model.PackageServiceList != null && Model.PackageServiceList.Count > 0)
                {
                    <div class="pack_service_list">
                        @foreach (var item in Model.PackageServiceList)
                        {
                            <div class="package-service Package-Include-Service" idval-PackageId="@item.PackageId" id-val="@item.EquipmentId" id-PackageEqpId="@item.Id" id-EquipNum="@item.EptNo" service-price="@item.Price">
                                <span>@item.EquipmentName </span>
                                @if (item.ServiceEquipments.Count() > 0)
                                {
                                    <b><span class="ServiceEquipmentCount product_limit_italic" idval="@item.Id">@Localize.T("Select Up To") (@item.EptNo)</span></b>
                                    <div class="ServiceEquipmentList service_@item.Id">
                                        @foreach (var ServiceEqp in item.ServiceEquipments)
                                        {
                                            int count = 0;
                                            if (Model.SelectedServiceEqpList != null)
                                            {
                                                var Eqp = Model.SelectedServiceEqpList.Where(x => x.EquipmentId == ServiceEqp.EquipmentId).FirstOrDefault();
                                                if (Eqp != null)
                                                {
                                                    count = Eqp.Quantity > 0 ? Eqp.Quantity.Value : 0;
                                                    Model.SelectedServiceEqpList.Remove(Eqp);
                                                }
                                            }

                                            <div class="ServiceEquipmentItem" style="padding-left:50px;">
                                                <input datalimit="@item.EptNo" id-PackageEqpId="@item.Id" type="text" idint="@ServiceEqp.Id" value="@count" class="ServiceEqpQuantity_@ServiceEqp.Id ServEqQuantity form-control ServiceEquipmentQuantity" />
                                                <label for="cbxdv@(ServiceEqp.Id)" class="label-cbx checkboxheight hidden">
                                                    <input datalimit="@item.EptNo" id="cbxdv@(ServiceEqp.Id)" idint="@ServiceEqp.Id" idval="@(ServiceEqp.EquipmentId)" idval-PackageId="@item.PackageId" SmartPackageEquipmentServiceId="@ServiceEqp.SmartPackageEquipmentServiceId" id-PackageEqpId="@item.Id" type="checkbox" name="checkbox-@(item.EquipmentId)" @(count > 0 ? "checked" : "") class="invisible service-equipments service-equipments_@(item.Id)">

                                                    <div class="checkbox">
                                                        <svg width="20px" height="20px" viewBox="0 0 20 20">
                                                            <path d="M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z"></path>
                                                            <polyline points="4 11 8 15 16 6"></polyline>
                                                        </svg>
                                                    </div>
                                                </label>
                                                <span>
                                                    @ServiceEqp.EquipmentName
                                                    @if (ServiceEqp.EquipmentPrice > 0)
                                                    {
                                                        <b>[+@Currency@HS.Web.UI.Helper.LabelHelper.FormatAmount(ServiceEqp.EquipmentPrice)]</b>
                                                    }
                                                </span>
                                                <input type="hidden" value="@ServiceEqp.EquipmentPrice" class="EqpPrice_@ServiceEqp.Id" />
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="pack_service_list">
                        <div class="na_div">@Localize.T("N/A")</div>
                    </div>
                }
            }
        </div>
    </div>
    <div class="load_smart_lead_pack_equip_info">
        <div class="left_info_for">@Localize.T("Included Equipment:")</div>
        <div class="right_info_for">
            @{
                if (Model.PackageIncludeEquipmentList.Count > 0)
                {
                    <div class="pack_service_list">
                        @foreach (var item in Model.PackageIncludeEquipmentList)
                        {
                            <div class="package-equipments Package-Include-Equipments" idval-PackageId="@item.PackageId" id-val="@item.EquipmentId" id-PackageEqpId="@item.Id" id-EquipNum="@item.EptNo">@item.EquipmentName <b>@*[ @Localize.T("FREE") ]*@ [ @item.EptNo ]</b></div>
                        }
                    </div>
                }
                else
                { 
                    <div class="pack_service_list">
                        tyu
                        <div class="na_div">@Localize.T("N/A")</div>
                    </div>
                }
            }

        </div>
    </div>
    <div class="load_smart_lead_pack_equip_info">
        <div class="left_info_for">
            @Localize.T("Select Included Package Option:")
            @if (Model.PackageDeviceEquipmentList.Count > 0)
            {
                <div class="pack_service_list">
                    <div class="div-product-limit product_limit_italic">
                        @Localize.T("Select Up To") (@Model.PackageMaxDeviceEquipmentLimit)
                    </div>
                </div>
            }
        </div>
        <div class="right_info_for">
            @{
                if (Model.PackageDeviceEquipmentList.Count > 0)
                {
                    <div class="pack_service_list">
                        @foreach (var item in Model.PackageDeviceEquipmentList)
                        {
                            bool IsChecked = false;
                            if (Model.SelectedDeviceEqpList != null && Model.SelectedDeviceEqpList.Where(x => x.EquipmentId == item.EquipmentId).Count() > 0)
                            {
                                IsChecked = true;
                            }
                            <div>
                                <label for="cbxdv@(item.EquipmentId)" class="label-cbx checkboxheight">
                                    <input id="cbxdv@(item.EquipmentId)" idval="@(item.EquipmentId)" idval-PackageId="@item.PackageId" id-PackageEqpId="@item.Id" id-eqpPrice="@(item.Retail)" id-eqpIsFree="@(item.IsFree.ToString())" id-EptNo="@(item.EptNo)" type="checkbox" name="checkbox-@(item.EquipmentId)" @(IsChecked ? "checked" : "") class="invisible device-equipments">
                                    <div class="checkbox">
                                        <svg width="20px" height="20px" viewBox="0 0 20 20">
                                            <path d="M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z"></path>
                                            <polyline points="4 11 8 15 16 6"></polyline>
                                        </svg>
                                    </div>
                                </label>
                                <span class="check_item">@item.EquipmentName</span>
                                @if (item.IsFree == true)
                                {
                                    <span class="device-equipment-price" id-val="0"> @*[ @Localize.T("FREE") ]*@ [ @item.EptNo ]</span>
                                }
                                @if (item.IsFree == false)
                                {
                                    <span class="device-equipment-price" id-val="@item.Retail"> [+@Currency@HS.Web.UI.Helper.LabelHelper.FormatAmount(item.Retail) ]</span>
                                }

                            </div>

                        }
                    </div>
                }
                else
                {
                    <div class="pack_service_list">
                        <div class="na_div">@Localize.T("N/A")</div>
                    </div>
                }
                //Optional Equipment
                if (Model.PackageOptionalEquipmentList.Count > 0)
                {
                    <div class="pack_service_list">
                        @foreach (var item in Model.PackageOptionalEquipmentList)
                        {
                            bool IsChecked = false;
                            if (Model.SelectedOptionalEqpList != null && Model.SelectedOptionalEqpList.Where(x => x.EquipmentId == item.EquipmentId).Count() > 0)
                            {
                                IsChecked = true;
                            }
                            if (item.NumofOptional != 0 && item.IsSelected > 0)
                            {
                                <div>
                                    <label for="ebxdv@(item.EquipmentId)" class="label-cbx checkboxheight">
                                        <input id="ebxdv@(item.EquipmentId)" idval="@(item.EquipmentId)" idval-PackageId="@item.PackageId" id-PackageEqpId="@item.Id" id-eqpPrice="@(item.Retail)" id-eqpIsFree="@(item.IsFree.ToString())" type="checkbox" name="checkbox-@(item.EquipmentId)" @(IsChecked ? "checked" : "") class="invisible optional-equipments">
                                        <div class="checkbox">
                                            <svg width="20px" height="20px" viewBox="0 0 20 20">
                                                <path d="M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z"></path>
                                                <polyline points="4 11 8 15 16 6"></polyline>
                                            </svg>
                                        </div>
                                    </label>
                                    <span class="check_item">@item.EquipmentName</span>
                                    <span class="device-equipment-price" id-val="0"> [+@Currency@HS.Web.UI.Helper.LabelHelper.FormatAmount(item.Retail) ] </span>
                                    @if (item.NumofOptional != 0 && item.IsSelected != 0)
                                    {
                                        <span class="check_item">
                                            <input type="number" class="form-control text-numoptional ServiceEquipmentQuantity" idval="@(item.EquipmentId)" value="@(item.NumofOptional)" />
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="check_item">
                                            <input type="number" class="form-control text-numoptional ServiceEquipmentQuantity" idval="0" value="1" />
                                        </span>
                                    }
                                </div>
                            }
                            else if (item.NumofOptional == 0 && item.IsSelected == 0)
                            {
                                <div>
                                    <label for="ebxdv@(item.EquipmentId)" class="label-cbx checkboxheight">
                                        <input id="ebxdv@(item.EquipmentId)" idval="@(item.EquipmentId)" idval-PackageId="@item.PackageId" id-PackageEqpId="@item.Id" id-eqpPrice="@(item.Retail)" id-eqpIsFree="@(item.IsFree.ToString())" type="checkbox" name="checkbox-@(item.EquipmentId)" @(IsChecked ? "checked" : "") class="invisible optional-equipments">
                                        <div class="checkbox">
                                            <svg width="20px" height="20px" viewBox="0 0 20 20">
                                                <path d="M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z"></path>
                                                <polyline points="4 11 8 15 16 6"></polyline>
                                            </svg>
                                        </div>

                                    </label>
                                    <span class="check_item">@item.EquipmentName</span>
                                    <span class="device-equipment-price" id-val="0"> [+@Currency@HS.Web.UI.Helper.LabelHelper.FormatAmount(item.Retail) ] </span>
                                    @if (item.NumofOptional != 0 && item.IsSelected != 0)
                                    {
                                        <span class="check_item">
                                            <input type="number" class="form-control text-numoptional ServiceEquipmentQuantity" idval="@(item.EquipmentId)" value="@(item.NumofOptional)" />
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="check_item">
                                            <input type="number" class="form-control text-numoptional ServiceEquipmentQuantity" idval="0" value="1" />
                                        </span>
                                    }
                                </div>
                            }
                        }
                    </div>
                }
            }
        </div>
    </div>
    <div class="load_smart_lead_pack_equip_info">
        <div class="left_info_for">@Localize.T("Activation Fee:")</div>

        <div class="right_info_for">
            <div class="pack_service_list">
                <label>@HS.Web.UI.Helper.LabelHelper.CurrentTransMakeCurrency.MakeCurrency(null)@HS.Web.UI.Helper.LabelHelper.FormatAmount(Model.SmartPackageDetails.ActivationFee.HasValue ? Model.SmartPackageDetails.ActivationFee.Value : 0)</label>
                @*@if (Model.SmartPackageDetails.ActivationFee != null && Model.PackageCustomerDetails.ActivationFee != null && Model.SmartPackageDetails.ActivationFee == Model.PackageCustomerDetails.ActivationFee)
                    {
                        <label>@HS.Web.UI.Helper.LabelHelper.CurrentTransMakeCurrency.MakeCurrency(null)@HS.Web.UI.Helper.LabelHelper.FormatAmount(Model.SmartPackageDetails.ActivationFee.HasValue? Model.SmartPackageDetails.ActivationFee.Value:0)</label>
                    }
                    else
                    {
                        if (Model.PackageCustomerDetails.ActivationFee != 0)
                        {
                            <label>@HS.Web.UI.Helper.LabelHelper.CurrentTransMakeCurrency.MakeCurrency(null)@HS.Web.UI.Helper.LabelHelper.FormatAmount(Model.PackageCustomerDetails.ActivationFee.HasValue? Model.PackageCustomerDetails.ActivationFee.Value:0)</label>
                        }
                        else
                        {
                            <label>@HS.Web.UI.Helper.LabelHelper.CurrentTransMakeCurrency.MakeCurrency(null)@HS.Web.UI.Helper.LabelHelper.FormatAmount(Model.SmartPackageDetails.ActivationFee.HasValue? Model.SmartPackageDetails.ActivationFee.Value:0)</label>
                        }
                    }*@
            </div>
        </div>
    </div>
    @if (ViewBag.NonConfirmingfee == "true")
    {

    }
    else
    {
        <div class="load_smart_lead_pack_equip_info">
            <div class="left_info_for">@Localize.T("Non Conforming Fee:")</div>

            <div class="right_info_for">
                <div class="pack_service_list">
                    <label>@HS.Web.UI.Helper.LabelHelper.CurrentTransMakeCurrency.MakeCurrency(null)@HS.Web.UI.Helper.LabelHelper.FormatAmount(Model.SmartPackageDetails.ConformingFee.HasValue ? Model.SmartPackageDetails.ConformingFee.Value : 0)</label>
                    @*@if (Model.SmartPackageDetails.ConformingFee != null && Model.PackageCustomerDetails.NonConformingFee != null && Model.SmartPackageDetails.ConformingFee == Model.PackageCustomerDetails.NonConformingFee)
                        {
                                <label>@HS.Web.UI.Helper.LabelHelper.CurrentTransMakeCurrency.MakeCurrency(null)@HS.Web.UI.Helper.LabelHelper.FormatAmount(Model.SmartPackageDetails.ConformingFee.HasValue ? Model.SmartPackageDetails.ConformingFee.Value : 0)</label>
                            }
                            else
                            {
                                if (Model.PackageCustomerDetails.NonConformingFee != 0)
                                {
                                    <label>@HS.Web.UI.Helper.LabelHelper.CurrentTransMakeCurrency.MakeCurrency(null)@HS.Web.UI.Helper.LabelHelper.FormatAmount(Model.PackageCustomerDetails.NonConformingFee.HasValue ? Model.PackageCustomerDetails.NonConformingFee.Value : 0)</label>
                                }
                                else
                                {
                                    <label>@HS.Web.UI.Helper.LabelHelper.CurrentTransMakeCurrency.MakeCurrency(null)@HS.Web.UI.Helper.LabelHelper.FormatAmount(Model.SmartPackageDetails.ConformingFee.HasValue ? Model.SmartPackageDetails.ConformingFee.Value : 0)</label>
                                }
                            }*@
                </div>
            </div>
        </div>
    }

</div>
