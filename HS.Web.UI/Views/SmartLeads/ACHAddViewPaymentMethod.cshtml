@{
    Layout = null;
}
@model HS.Entities.PaymentInfo
@using Localize = HS.Web.UI.Helper.LanguageHelper
@using PermissionChekcer = HS.Web.UI.Helper.PermissionHelper
@using Permissions = HS.Framework.UserPermissions
<style>
    .alarm_head_text {
        font-size: 2rem;
        font-family: 'Play', sans-serif;
    }

    .alarm_head_container {
        width: 100%;
        background-color: #eceef1;
        padding: 10px 0px 10px 15px;
    }

    .footer-section {
        background: #eceef1;
        height: 50px;
        position: fixed;
        width: 100%;
        bottom: 0%;
    }

    .SaveCancelDiv {
        width: 95%;
        padding-top: 8px;
    }

    #btnsaveACH, #btnsaveACH:hover {
        margin-right: 10px;
        float: right;
        margin-top: 3px !important;
        color: white;
        background-color: #2ca01c;
        border-color: #867e7e;
    }
</style>
<script>
    var customerid = '@ViewBag.customerid';
    var PaymentMethodACH = '@HS.Web.UI.Helper.LabelHelper.PaymentMethod.ACH';
    var echeckType = '@Model.EcheckType';
    var TYPE = '@ViewBag.type';

    var IsForBrinks = '@Model.IsForBrinks';
    var IsPartialPayment = '@Model.IsPartialPayment';
    var IsInitialPayment = '@Model.IsInitialPayment';

    var ACHMethodFunction = function () {
        console.log("hlw");
        var url = domainurl + "/SmartLeads/SavePaymentMethod";
        var param = JSON.stringify({
            Id: $("#ACH_id").val(),
            RoutingNo: $("#RoutingNo").val(),
            AcountNo: $("#AcountNo").val(),
            BankAccountType: $("#BankAccountType").val(),
            EcheckType: $("#EcheckType").val(),
            AccountName: $("#AccountName").val(),
            BankName: $("#BankName").val(),
            MethodType: PaymentMethodACH,
            CustomerId: customerid,
            IsForBrinks: $("#IsForBrinks").is(":checked"),
            IsPartialPayment: $("#IsPartialPayment").is(":checked"),
            IsInitialPayment: $("#IsInitialPayment").is(":checked")

        })
        $.ajax({
            type: "POST",
            url: url,
            data: param,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            cache: false,
            success: function (data) {
                if (data.result) {
                    if (TYPE == "Customer") {
                        OpenSuccessMessageNew("Success", "Payment Method Saved Successfully", function () {
                            OpenRightToLeftModal(false);
                            $("#CustomerACHTab").load(domainurl + "/Customer/LoadCustomerACHPaymentInfo?customerid=" + data.customerid);
                            $("#CustomerACHQATab").load(domainurl + "/Customer/LoadCustomerACHPaymentInfo?customerid=" + data.customerid);
                            $("#ACHTab").load(domainurl + "/Customer/LoadCustomerACHPaymentInfo?customerid=" + data.customerid);
                            RMRTemplatePaymentDropdownLoad(data.paymentInfoId); 
                        });
                    }
                    else if (TYPE == "Lead") {
                        OpenSuccessMessageNew("Success", "Payment Method Saved Successfully", function () {
                            OpenRightToLeftModal(false);
                            $("#CustomerACHTab").load(domainurl + "/Customer/LoadCustomerACHPaymentInfo?customerid=" + data.customerid);
                            $("#CustomerACHQATab").load(domainurl + "/Customer/LoadCustomerACHPaymentInfo?customerid=" + data.customerid);
                            $("#ACHTab").load(domainurl + "/Customer/LoadCustomerACHPaymentInfo?customerid=" + data.customerid);
                        });
                    }
                    else {
                        OpenSuccessMessageNew("Success", "Payment Method Saved Successfully", function () {
                            OpenRightToLeftModal(false);
                            OpenFifthTab();
                        });
                    }
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $(".loader-div").hide();
                console.log(errorThrown);
            }
        });
    }
    var GetBankingInformationByRoutingNumber = function (number) {
        console.log(number);
        $.ajax({
            type: "GET",
            url: "/SmartLeads/GetBankingInformationByRoutingNumber",
            data: { routingnumber: number },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            cache: false,
            success: function (data) {
                if (data.result) {
                    //var resultparse = JSON.parse(data.dataObjects);
                    var resultparse = data.dataObjects;

                    if (resultparse.code == 200) {
                        console.log(resultparse.BankName);
                        $("#BankName").val(resultparse.BankName);
                        $("#RoutingNo").removeClass('required');
                        $(".routing_div label").addClass('hidden');

                    }
                    else {
                        $("#BankName").val("");
                        $("#RoutingNo").addClass('required');
                        $(".routing_div label").removeClass('hidden');
                    }
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $(".loader-div").hide();
                console.log(errorThrown);
            }
        });
    }

    function isEmptyOrSpaces(str) {
        return str === null || str.match(/^ *$/) !== null;
    }

    function validate_RoutingNo() {
        var RoutingNo = $("#RoutingNo").val();
        if (RoutingNo == undefined || RoutingNo == null || isEmptyOrSpaces(RoutingNo) || $(".routing_div label").hasClass('hidden') == false) {
            $("#RoutingNo").css("border-color", "red");
            return false;
        } else {
            $("#RoutingNo").css("border-color", "#ccc");
            return true;
        }
    }
    function validate_AcountNo() {
        var AcountNo = $("#AcountNo").val();
        if (AcountNo == undefined || AcountNo == null || isEmptyOrSpaces(AcountNo)) {
            $("#AcountNo").css("border-color", "red");
            return false;
        } else {
            $("#AcountNo").css("border-color", "#ccc");
            return true;
        }
    }
    function validate_BankAccountType() {
        var BankAccountType = $("#BankAccountType").val();
        if (BankAccountType == undefined || BankAccountType == null || isEmptyOrSpaces(BankAccountType) || BankAccountType == '-1') {
            $("#BankAccountType").css("border-color", "red");
            return false;
        } else {
            $("#BankAccountType").css("border-color", "#ccc");
            return true;
        }
    }
    function validate_EcheckType() {
        var EcheckType = $("#EcheckType").val();
        if (EcheckType == undefined || EcheckType == null || isEmptyOrSpaces(EcheckType) || EcheckType == '-1') {
            $("#EcheckType").css("border-color", "red");
            return false;
        } else {
            $("#EcheckType").css("border-color", "#ccc");
            return true;
        }
    }
    function validate_AccountName() {
        var AccountName = $("#AccountName").val();
        if (AccountName == undefined || AccountName == null || isEmptyOrSpaces(AccountName)) {
            $("#AccountName").css("border-color", "red");
            return false;
        } else {
            $("#AccountName").css("border-color", "#ccc");
            return true;
        }
    }
    function validate_BankName() {
        var BankName = $("#BankName").val();
        if (BankName == undefined || BankName == null || isEmptyOrSpaces(BankName)) {
            $("#BankName").css("border-color", "red");
            return false;
        } else {
            $("#BankName").css("border-color", "#ccc");
            return true;
        }
    }
    var RMRTemplatePaymentDropdownLoad = function (ev) {
        if ($('li.CustomerRecurringBillingTab').hasClass('active')) {
            $("#RecurringBillPaymentId").val(ev);
            PaymentDropdownLoad(ev);
        }
    }
    $(document).ready(function () {
        $("#btnsaveACH").click(function () {
            var validate_BankName1 = validate_BankName();
            var validate_AccountName1 = validate_AccountName();
            var validate_EcheckType1 = validate_EcheckType();
            var validate_BankAccountType1 = validate_BankAccountType();
            var validate_AcountNo1 = validate_AcountNo();
            var validate_RoutingNo1 = validate_RoutingNo();
            var validateaccno = false;
            if ($("#AcountNo").val().length >= 4) {
                validateaccno = true
            }

            if (validate_RoutingNo1 && validate_AcountNo1 && validate_BankAccountType1 && validate_EcheckType1 && validate_AccountName1 && validate_BankName1 && validateaccno == true) {
                //var number = $("#RoutingNo").val();
                //GetBankingInformationByRoutingNumber(number);
                ACHMethodFunction();
            }
        })
        if (echeckType != '-1' || echeckType != '' )
        {
            $("#EcheckType").val("WEB");
        }
        $("#RoutingNo").change(function () {
            var number = $("#RoutingNo").val();
            GetBankingInformationByRoutingNumber(number);
        })
        $("#AcountNo").keyup(function () {
            if ($("#AcountNo").val().length >= 4) {
                            $("#AcountNo").removeClass('required');
                            $(".account_no_div label").addClass('hidden');
                            setTimeout(function () {

                            }, 1000);
                        }
                        else {
                            $("#AcountNo").addClass('required');
                            $(".account_no_div label").removeClass('hidden');
                        }
        })

          if (IsForBrinks == 'True') {
            $("#IsForBrinks").prop('checked', true)
        }
        else {
            $("#IsForBrinks").prop('checked',false)
        }
       if (IsPartialPayment == 'True') {
            $("#IsPartialPayment").prop('checked', true)
        }
        else {
            $("#IsPartialPayment").prop('checked',false)
        }
       if (IsInitialPayment == 'True') {
            $("#IsInitialPayment").prop('checked', true)
        }
        else {
            $("#IsInitialPayment").prop('checked',false)
        }

         if ($("#IsForBrinks").is(":checked") == true) {
            $(".ForBrinks").removeClass("hidden");
        };
        $("#IsForBrinks").change(function () {

            if ($("#IsForBrinks").is(":checked") == true) {
                $(".ForBrinks").removeClass("hidden");
            }
            else {
                $(".ForBrinks").addClass("hidden");
            }
        })
    })
</script>

@Html.HiddenFor(x => x.Id, new { id = "ACH_id" })
<div class="alarm_head_container">
    <span class="alarm_head_text header_txt_style_ERP">@Localize.T("ACH Payment Method")</span>
</div>
<div class="container-fluid">
    <div class="form-group clearfix routing_div">
        <span class="text-custom">@Localize.T("Routing No")</span>
        @Html.TextBoxFor(x => x.RoutingNo, new { @class = "form-control", id = "RoutingNo", datarequired = "true", placeholder = "Routing No" })
        <label class="label hidden red absolute" rel="RoutingNo">*@Localize.T("Please enter valid routing number") </label>
    </div>
    <div class="form-group clearfix account_no_div">
        <span class="text-custom">@Localize.T("Account No")</span>
        @Html.TextBoxFor(x => x.AcountNo, new { @class = "form-control", id = "AcountNo", datarequired = "true", placeholder = "Account No" })
        <label class="label hidden red absolute" rel="AcountNo">*@Localize.T("Please enter valid account number") </label>
    </div>
    <div class="form-group clearfix">
        <span class="text-custom">@Localize.T("Bank Acc Type")</span>
        @Html.DropDownListFor(x => x.BankAccountType, (List<SelectListItem>)ViewBag.BankAccountTypeList, new { @class = "form-control ACH_PaymentInfo_BankAccountType", id = "BankAccountType", datarequired = "true" })
        <label class="label hidden red absolute" rel="BankAccountType">*@Localize.T("Please select bank account type") </label>
    </div>
    <div class="form-group clearfix">
        <span class="text-custom">@Localize.T("eCheck Type")</span>
        @Html.DropDownListFor(x => x.EcheckType, (List<SelectListItem>)ViewBag.ECheckType, new { @class = "form-control ach_e_check_type", id = "EcheckType", datarequired = "true" })
        <label class="label hidden red absolute" rel="EcheckType">*@Localize.T("Please select echeck type") </label>
    </div>
    <div class="form-group clearfix">
        <span class="text-custom">@Localize.T("Account Holder's Name")</span>
        @Html.TextBoxFor(x => x.AccountName, new { @class = "form-control", id = "AccountName", datarequired = "true", placeholder = "Account Name" })
        <label class="label hidden red absolute" rel="AccountName">*@Localize.T("Please enter account name") </label>
    </div>
    <div class="form-group clearfix">
        <span class="text-custom">@Localize.T("Bank Name")</span>
        @Html.TextBoxFor(x => x.BankName, new { @class = "form-control", id = "BankName", datarequired = "true", placeholder = "Bank Name" })
        <label class="label hidden red absolute" rel="BankName">*@Localize.T("Please enter bank name") </label>
    </div>
    @if (PermissionChekcer.IsPermitted(Permissions.CustomerPermissions.ShowBrinksPaymentInfo))
    {
        <div class="form-group clearfix">
            <input type="checkbox" id="IsForBrinks" />
            <span class="text-custom">Is For Brinks</span>

        </div>

        <div class="form-group  ForBrinks hidden  clearfix">
            <input type="checkbox" id="IsPartialPayment" />
            <span class="text-custom">Is Partial Payment</span>

        </div>

        <div class="form-group  ForBrinks hidden  clearfix">
            <input type="checkbox" id="IsInitialPayment" />
            <span class="text-custom">Is Initial Payment</span>

        </div>
    }

</div>
<section class="footer-section">
    <footer class="footer">
        <div class="SaveCancelDiv">
            <button type="button" class="btn" id="btnsaveACH"><i class="fa fa-floppy-o" aria-hidden="true"></i>&nbsp;@Localize.T("Save")</button>
        </div>
    </footer>
</section>