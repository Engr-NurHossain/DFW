@model List<HS.Entities.GridSetting>
    @using Localize = HS.Web.UI.Helper.LanguageHelper
@{ 
    List<HS.Entities.GridSetting> GroupGridSettings = (List<HS.Entities.GridSetting>)ViewBag.GroupGridSettings;
}
    <script>
        var UpdateLeadUi = function () {
            var url = domainurl + "/Setup/UpdateLeadUiSettings";

            var GridSettings = [];
            $(".InventoryGridSettings tbody tr").each(function () {
                GridSettings.push({
                    Id: $(this).attr('data-id'),
                    ListKeyName: "LeadGrid",
                    SelectedColumn: $(this).find('.KeyName').text(),
                    OrderBy: $(this).find(".orderby").text(),
                    InputType: $(this).find(".InputType").text(),
                    FormActive: $(this).find(".FormValue").is(':checked'),
                    GridActive: $(this).find(".GridValue").is(':checked'),
                    ColumnGroup: $("#ColumnGroup_" + $(this).attr('data-id')).val(),
                    IsActive: $(this).find(".IsActive").text()
                });
            });

            console.log(GridSettings)

            $.ajax({
                type: "POST",
                ajaxStart: function () { },
                url: url,
                data: JSON.stringify(GridSettings),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                cache: false,
                success: function (data) {
                    // LoadInventory(true);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log(errorThrown);
                }
            })
        }
        var UpdateLeadGroupUi = function () {
            var url = domainurl + "/Setup/UpdateLeadUiSettings";

            var GridSettings = [];
            $(".InventoryGroupGridSettings tbody tr").each(function () {
                GridSettings.push({
                    Id: $(this).attr('data-id'),
                    ListKeyName: "LeadGridGroup",
                    SelectedColumn: $(this).find('.GroupKeyName').text(),
                    OrderBy: $(this).find(".orderby").text(),
                    InputType: $(this).find(".InputType").text(),
                    FormActive: $(this).find(".LeadGroupFormValue").is(':checked'),
                    GridActive: $(this).find(".LeadGroupGridValue").is(':checked'),
                    ColumnGroup: $("#GroupColumnGroup" + $(this).attr('data-id')).val(),
                    IsActive: $(this).find(".IsActive").text()
                });
            });

            console.log(GridSettings)

            $.ajax({
                type: "POST",
                ajaxStart: function () { },
                url: url,
                data: JSON.stringify(GridSettings),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                cache: false,
                success: function (data) {
                    // LoadInventory(true);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log(errorThrown);
                }
            })
        }
        $(document).ready(function () {
            $(".LoaderWorkingDiv").hide();

            $(".FormValue").click(function () {
                UpdateLeadUi();
            });
            $(".GridValue").click(function () {
                UpdateLeadUi();
            });
            $(".ColumnGroup").children().change(function () {
                UpdateLeadUi();
            })
            $(".LeadGroupFormValue").click(function () {
                UpdateLeadGroupUi();
            });
            $(".LeadGroupGridValue").click(function () {
                UpdateLeadGroupUi();
            });
            $(".InventoryGridSettings tbody").sortable({
                update: function () {
                    var i = 1;
                    $(".InventoryGridSettings tbody tr td.orderby").each(function () {
                        $(this).text(i);
                        i += 1;
                    });
                    UpdateLeadUi();
                }
            }).disableSelection();

            $(".InventoryGroupGridSettings tbody").sortable({
                update: function () {
                    var i = 1;
                    $(".InventoryGroupGridSettings tbody tr td.orderby").each(function () {
                        $(this).text(i);
                        i += 1;
                    });
                    UpdateLeadGroupUi();
                }
            }).disableSelection();
        });
    </script>
    <style>
        .InventoryGridSettings tr td {
            text-align: center;
        }

        .InventoryGridSettings th {
            background-color: #e4e4e4;
            padding-left: 5px;
            padding-right: 5px;
            padding-top: 5px;
            padding-bottom: 5px;
            text-align: center;
        }

        .InventoryGridSettings tr {
            cursor: move;
        }

            .InventoryGridSettings tr:hover {
                background-color: #f4f5f8;
            }

        .InventoryGridSettings .KeyName {
            width: 35%;
        }
          .InventoryGridSettings .ColumnGroup {
            width: 15%;
        }
        .InventoryGridSettings .orderby {
            width: 10%;
        }

        .InventoryGridSettings .IsView {
            width: 15%;
        }

        .instructions {
            color: #5f5b5b;
            font-size: 14px;
            font-style: italic;
        }

        .InventoryGridSettings {
            width: 100%;
        }

        .instructions-container-div {
            padding-top: 30px;
        }

        /*//group*/
         .InventoryGroupGridSettings tr td {
            text-align: center;
        }

        .InventoryGroupGridSettings th {
            background-color: #e4e4e4;
            padding-left: 5px;
            padding-right: 5px;
            padding-top: 5px;
            padding-bottom: 5px;
            text-align: center;
        }

        .InventoryGroupGridSettings tr {
            cursor: move;
        }

            .InventoryGroupGridSettings tr:hover {
                background-color: #ccc;
            }

        .InventoryGroupGridSettings .KeyName {
            width: 35%;
        }
          .InventoryGroupGridSettings .ColumnGroup {
            width: 15%;
        }
        .InventoryGroupGridSettings .orderby {
            width: 10%;
        }

        .InventoryGroupGridSettings .IsView {
            width: 15%;
        }

    </style>

    <div class="ci_block setting_div">
        @*<div class="ci_header clearfix">
            <div style="float:left;">@Localize.T("Lead UI Settings")</div>
        </div>*@
        @*<div class="row">
            *@
            @*<div class="col-md-12">
                <h4>@Localize.T("Equipment Grid Settings") </h4>
            </div>*@
            <div class="ci_info">
                <table class="InventoryGridSettings">
                    <thead>
                        <tr>
                            <th>@Localize.T("Order")</th>
                            <th>@Localize.T("Name")</th>
                            <th>@Localize.T("Column Group")</th>
                            <th>@Localize.T("Grid List")</th>
                            <th>@Localize.T("Form Design")</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {      
                            var FormChecked = "";
                            if (item.FormActive != null && item.FormActive == true){
                                FormChecked = "checked";
                            }
                            var GridChecked = "";
                            if (item.GridActive != null && item.GridActive == true){
                                GridChecked = "checked";
                            }
                        <tr data-id="@item.Id">
                            <td class="hidden InputType">@item.InputType</td>
                            <td class="hidden IsActive">@item.IsActive</td>
                            <td class="orderby">@item.OrderBy</td>
                            <td class="KeyName">@item.SelectedColumn</td>
                            @*<td class="ColumnGroup">@item.ColumnGroup</td>*@
                            <td class="ColumnGroup">
                                <script>
                                    $("#ColumnGroup_@item.Id").val('@item.ColumnGroup');
                                </script>
                                @Html.DropDownListFor(m => item.ColumnGroup,(List<SelectListItem>)ViewBag.GroupList, new { @class="form-control", style="width:170px", id=$"ColumnGroup_{item.Id}"})
                            </td>
                            <td class="IsView">
                                @*<input class="IsActive" type="checkbox" @(item.IsActive ? "checked"
                                         "" ) />*@
                                <label for="cbx-Grid@(item.Id)" class="label-cbx">
                                    <input id="cbx-Grid@(item.Id)" idval="@(item.Id)" type="checkbox" name="checkbox-Grid-@(item.Id)" class="invisible GridValue" @GridChecked>
                                    <div class="checkbox">
                                        <svg width="20px" height="20px" viewBox="0 0 20 20">
                                            <path d="M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z"></path>
                                            <polyline points="4 11 8 15 16 6"></polyline>
                                        </svg>
                                    </div>
                                </label>
                            </td>
                            <td class="IsView">
                                @*<input class="IsActive" type="checkbox" @(item.IsActive ? "checked"
                                         "" ) />*@
                                <label for="cbx@(item.Id)" class="label-cbx">
                                    <input id="cbx@(item.Id)" idval="@(item.Id)" type="checkbox" name="checkbox-Form-@(item.Id)" class="invisible FormValue" @FormChecked>
                                    <div class="checkbox">
                                        <svg width="20px" height="20px" viewBox="0 0 20 20">
                                            <path d="M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z"></path>
                                            <polyline points="4 11 8 15 16 6"></polyline>
                                        </svg>
                                    </div>
                                </label>
                            </td>
                        </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="col-md-12">
                <div class="instructions-container-div">
                    <p class="instructions">@Localize.T("Drag rows to up and down for rearranging column order").</p>
                </div>
            </div>
            @*
        </div>*@
    </div>

<div class="col-md-12">
    <h4>@Localize.T("Lead Group Grid Settings") </h4>
</div>
<div class="ci_info">
    <table class="InventoryGroupGridSettings">
        <thead>
            <tr>
                <th>@Localize.T("Order")</th>
                <th>@Localize.T("Name")</th>
                <th>@Localize.T("Column Group")</th>
                @*<th>@Localize.T("Grid List")</th>
                    <th>@Localize.T("Form Design")</th>*@
            </tr>
        </thead>
        <tbody>
            @foreach (var item in GroupGridSettings)
            {
                var FormChecked = "";
                if (item.FormActive != null && item.FormActive == true)
                {
                    FormChecked = "checked";
                }
                var GridChecked = "";
                if (item.GridActive != null && item.GridActive == true)
                {
                    GridChecked = "checked";
                }
                <tr data-id="@item.Id">
                    <td class="hidden InputType">@item.InputType</td>
                    <td class="hidden IsActive">@item.IsActive</td>
                    <td class="orderby">@item.OrderBy</td>
                    <td class="GroupKeyName">@item.SelectedColumn</td>
                    <td class="hidden GroupColumnGroup">
                        <script>
                                    $("#GroupColumnGroup_@item.Id").val('@item.ColumnGroup');
                        </script>
                        @Html.DropDownListFor(m => item.ColumnGroup, (List<SelectListItem>)ViewBag.GroupList, new { @class = "form-control", style = "width:170px", id = $"GroupColumnGroup_{item.Id}" })
                    </td>
                    <td class="IsView">
                        @*<input class="IsActive" type="checkbox" @(item.IsActive ? "checked"
                            "" ) />*@
                        <label for="cbx-Grid@(item.Id)" class="label-cbx">
                            <input id="cbx-Grid@(item.Id)" idval="@(item.Id)" type="checkbox" name="checkbox-Grid-@(item.Id)" class="invisible LeadGroupGridValue" @GridChecked>
                            <div class="checkbox">
                                <svg width="20px" height="20px" viewBox="0 0 20 20">
                                    <path d="M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z"></path>
                                    <polyline points="4 11 8 15 16 6"></polyline>
                                </svg>
                            </div>
                        </label>
                    </td>
                    <td class="hidden IsView">
                        @*<input class="IsActive" type="checkbox" @(item.IsActive ? "checked"
                            "" ) />*@
                        <label for="cbx@(item.Id)" class="label-cbx">
                            <input id="cbx@(item.Id)" idval="@(item.Id)" type="checkbox" name="checkbox-Form-@(item.Id)" class="invisible LeadGroupFormValue" @FormChecked>
                            <div class="checkbox">
                                <svg width="20px" height="20px" viewBox="0 0 20 20">
                                    <path d="M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z"></path>
                                    <polyline points="4 11 8 15 16 6"></polyline>
                                </svg>
                            </div>
                        </label>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="col-md-12">
    <div class="instructions-container-div">
        <p class="instructions">@Localize.T("Drag rows to up and down for rearranging column order").</p>
    </div>
</div>


