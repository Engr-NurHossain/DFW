@{
    Layout = null;
    string Currency = HS.Web.UI.Helper.LabelHelper.CurrentTransMakeCurrency.MakeCurrency(null);
}
@using Localize = HS.Web.UI.Helper.LanguageHelper
<link href="~/Content/Css/Ticket/TicketListPartial.css" rel="stylesheet" />


<script>
    var pagenumber = '@ViewBag.PageNumber';
    var DateFrom = $(".min-date").val();
    var DateTo = $(".max-date").val();
    var TabsLoaderText = "<div class='invoice-loader'><div><div class='lds-css ng-scope'><div style='margin:auto; z-index:99;' class='lds-double-ring'><div></div><div></div></div></div></div></div>";
    var date = new Date();
    var todaysdate = date.getMonth() + 1 + "/" + date.getDate() + "/" + date.getFullYear();
    var splitdate = todaysdate.split('/');
    var yesday = parseInt(splitdate[1]) - 1;
    var yesterday = date.getMonth() + 1 + "/" + yesday + "/" + date.getFullYear();
    /*Last 30 days*/
    var priordate = new Date(new Date().setDate(date.getDate() - 30));
    var last30 = priordate.getMonth() + 1 + "/" + priordate.getDate() + "/" + priordate.getFullYear();
    /*Last 30 days*/
    /*Last 90 days*/
    var prior90date = new Date(new Date().setDate(date.getDate() - 90));
    var last90 = prior90date.getMonth() + 1 + "/" + prior90date.getDate() + "/" + prior90date.getFullYear();
    /*Last 90 days*/
    var alltimedate = new Date(new Date().setDate(date.getDate() - 730));
    var globalmindate = alltimedate.getMonth() + 1 + "/" + alltimedate.getDate() + "/" + alltimedate.getFullYear();
    /*This Week*/
    var first = date.getDate() - date.getDay();
    var last = first + 6;
    var firstday = new Date(date.setDate(first));
    var thisweek = firstday.getMonth() + 1 + "/" + firstday.getDate() + "/" + firstday.getFullYear();
    var lastday = new Date(date.setDate(last));
    var lastweek = lastday.getMonth() + 1 + "/" + lastday.getDate() + "/" + lastday.getFullYear();
    /*This Week*/
    /*Last Week*/
    var first1 = (date.getDate() - date.getDay()) - 1;
    var last1 = first1 - 6;
    var firstday1 = new Date(date.setDate(last1));
    var thisweek1 = firstday1.getMonth() + 1 + "/" + firstday1.getDate() + "/" + firstday1.getFullYear();
    var lastday1 = new Date(date.setDate(first1));
    var lastweek1 = lastday1.getMonth() + 1 + "/" + lastday1.getDate() + "/" + lastday1.getFullYear();
    /*Last Week*/
    /*This Month*/
    var firstDay = new Date(date.getFullYear(), date.getMonth() + 1, 1);
    var lastDay = new Date(date.getFullYear(), date.getMonth() + 2, -1);
    thisfirstmonthdate = firstDay.getMonth() + 1 + "/" + firstDay.getDate() + "/" + firstDay.getFullYear();
    thislastmonthdate = lastDay.getMonth() + 1 + "/" + lastDay.getDate() + "/" + lastDay.getFullYear();
    /*This Month*/
    /*Last Month*/
    var firstDay1 = new Date(date.getFullYear(), date.getMonth(), 1);
    var lastDay1 = new Date(date.getFullYear(), date.getMonth(), 0);
    thisfirstmonthdate1 = firstDay1.getMonth() + "/" + firstDay1.getDate() + "/" + firstDay1.getFullYear();
    thislastmonthdate1 = lastDay1.getMonth() + 1 + "/" + lastDay1.getDate() + "/" + lastDay1.getFullYear();
    /*Last Month*/
    /*This Year*/
    var firstyearday = new Date("1/1/" + date.getFullYear());
    var lastyearday = new Date("12/31/" + date.getFullYear());
    thisfirstyeardate = firstyearday.getMonth() + 1 + "/" + firstyearday.getDate() + "/" + firstyearday.getFullYear();
    thislastyeardate = lastyearday.getMonth() + 1 + "/" + lastyearday.getDate() + "/" + lastyearday.getFullYear();
    /*This Year*/
    /*Last Year*/
    var firstyearday1 = new Date("1/1/" + (date.getFullYear() - 1));
    var lastyearday1 = new Date("12/31/" + (date.getFullYear() - 1));
    thisfirstyeardate1 = firstyearday1.getMonth() + 1 + "/" + firstyearday1.getDate() + "/" + firstyearday1.getFullYear();
    thislastyeardate1 = lastyearday1.getMonth() + 1 + "/" + lastyearday1.getDate() + "/" + lastyearday1.getFullYear();
    /*Last Year*/
    var LoadUpsellList = function () {
        var mindate = $("#min_date_upsell").val();
        var maxdate = $("#max_date_upsell").val();
        var searchtxt = encodeURI($("#search_txt_upsell").val());
        if (typeof (mindate) != "undefined" && mindate != null && mindate != "" && typeof (maxdate) != "undefined" && maxdate != null && maxdate != "") {
            $(".LoadUpsellsList").html(TabsLoaderText);
        $(".LoadUpsellsList").load(domainurl + "/Reports/UpsellsReportList?mindate=" + mindate + "&maxdate=" + maxdate + "&searchtxt=" + searchtxt);
        }
        else {
            OpenErrorMessageNew("Error", "Date from and to should not be empty");
        }
    }
    $(document).ready(function () {
        var datefrom = new Pikaday({ format: 'MM/DD/YYYY', field: $('#min_date_upsell')[0] });
        var dateto = new Pikaday({format: 'MM/DD/YYYY', field: $('#max_date_upsell')[0]});
        setTimeout(function () {
            LoadUpsellList();
        }, 1000);
        $("#min_date_upsell").val(thisfirstmonthdate);
        $("#max_date_upsell").val(thislastmonthdate);
        $("#filter_option").val("ThisMonth");
        $("#filter_option").change(function (e) {
            if ($("#filter_option").val() == "Today") {
                $("#min_date_upsell").val(todaysdate);
                $("#max_date_upsell").val(todaysdate);
            }
            else if ($("#filter_option").val() == "Yesterday") {
                $("#min_date_upsell").val(yesterday);
                $("#max_date_upsell").val(yesterday);
            }
            else if ($("#filter_option").val() == "ThisWeek") {
                $("#min_date_upsell").val(thisweek);
                $("#max_date_upsell").val(lastweek);
            }
            else if ($("#filter_option").val() == "LastWeek") {
                $("#min_date_upsell").val(thisweek1);
                $("#max_date_upsell").val(lastweek1);
            }
            else if ($("#filter_option").val() == "ThisMonth") {
                $("#min_date_upsell").val(thisfirstmonthdate);
                $("#max_date_upsell").val(thislastmonthdate);
            }
            else if ($("#filter_option").val() == "LastMonth") {
                $("#min_date_upsell").val(thisfirstmonthdate1);
                $("#max_date_upsell").val(thislastmonthdate1);
            }
            else if ($("#filter_option").val() == "ThisYear") {
                $("#min_date_upsell").val(thisfirstyeardate);
                $("#max_date_upsell").val(thislastyeardate);
            }
            else if ($("#filter_option").val() == "LastYear") {
                $("#min_date_upsell").val(thisfirstyeardate1);
                $("#max_date_upsell").val(thislastyeardate1);
            }
            else if ($("#filter_option").val() == "Last30") {
                $("#min_date_upsell").val(last30);
                $("#max_date_upsell").val(todaysdate);
            }
            else if ($("#filter_option").val() == "AllTime") {
                $("#min_date_upsell").val(globalmindate);
                $("#max_date_upsell").val(todaysdate);
            }
            else if ($("#filter_option").val() == "Last90Days") {
                $("#min_date_upsell").val(last90);
                $("#max_date_upsell").val(todaysdate);
            }
            else if ($("#filter_option").val() == "Custom") {
                $("#min_date_upsell").val("");
                $("#max_date_upsell").val("");
            }
            else {
                $("#min_date_upsell").val(thisweek);
                $("#max_date_upsell").val(lastweek);
            }
        })
        $("#btn_download_upsells").click(function () {
            var mindate = $("#min_date_upsell").val();
            var maxdate = $("#max_date_upsell").val();
            var searchtxt = encodeURI($("#search_txt_upsell").val());
            if (typeof (mindate) != "undefined" && mindate != null && mindate != "" && typeof (maxdate) != "undefined" && maxdate != null && maxdate != "") {
                window.location.href = domainurl + "/Reports/UpsellsReportList?mindate=" + mindate + "&maxdate=" + maxdate + "&searchtxt=" + searchtxt + "&getreport=true";
            }
            else {
                OpenErrorMessageNew("Error", "Date from and to should not be empty");
            }
        })
    })
</script>

<div class="payroll_list_container payroll_container_main">
    <div class="left_content_div">
        <input class="form-control" placeholder="Search" id="search_txt_upsell" />
        <input class="form-control" placeholder="Min Date" id="min_date_upsell" />
        <input class="form-control" placeholder="Max Date" id="max_date_upsell" />
        <div class="input-group add-on">
            @Html.DropDownList("filter_option", ViewBag.PTOFilterOptions as List<SelectListItem>, new { @class = "form-control" })
            <div class="input-group-btn"> <button class="btn green_button" id="btn_search" onclick="LoadUpsellList()" title="Search"><i class="fa fa-search"></i></button></div>
        </div>
    </div>
    <div class="right_content_div">
        <button class="btn green_button" id="btn_download_upsells" title="Download"><i class="fa fa-download"></i></button>
    </div>
    <div class="LoadUpsellsList">

    </div>
</div>
