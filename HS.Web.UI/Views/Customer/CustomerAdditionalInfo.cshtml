
@{
    Layout = null;
}
@using Localize = HS.Web.UI.Helper.LanguageHelper;
@model HS.Entities.CustomerAdditionalContact
@using PermissionList = HS.Framework.UserPermissions;
@using PermissionChecker = HS.Web.UI.Helper.PermissionHelper;
<style>
    .add_customer_follow_up_header {
    width:100%;
    background-color:#f4f5f8;
    font-size: 2rem;
    font-weight: 400;
    color: #393a3d;
    padding: 12px 10px;
}
.add_followup_reminder_container_custom {
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;
    overflow-y:auto;
    }
#CustomerNoteNewNote {
    resize:none;
}
.item_margin {
    margin-top:10px !important;
}

.SaveCancelDiv {
    width: 95%;
    padding-top: 8px;
}

.footer-section {
    background: #eceef1;
    height: 50px;
    position: fixed;
    width: 100%;
    bottom: 0%;
}

#btn-AddFollowUpReminder {
    float: right;
    background-color: green;
    color: white;
}
  .followUp_SaveCancelDiv {
    width: 100%;
    padding-top: 8px;
    padding-right: 15px;
   
    }
  #saveAdditionalContact{
    float:right;
    padding-top: 8px;
  }
</style>
<link href="~/Content/Css/CityStateZipAutoFill.css" rel="stylesheet" />
<link href="~/Content/Bootstrap/MultipleSelect/bootstrap-select.css" rel="stylesheet" />
<script src="~/Content/Bootstrap/MultipleSelect/bootstrap-select.js"></script>
<script src="~/Content/Js/CityStateZipAutoFill.js"></script>
<script src="~/Content/Js/NumberFormet/NumberFormat.js"></script>
<script>
    var EmergencyContact = '@Model.IsEmergencyContact';
    var AlternateContact = '@Model.AlternateContact';
    var AuthorizedUser = '@Model.AuthorizedUser';
    var PointContact = '@Model.PointContact';

    var SaveContact = function () {
        console.log("hello");

            var Contact = {};
            Contact.CustomerId = '@ViewBag.CustomerId',
            Contact.CrossSteet = $("#cStreet").val(),
            Contact.FirstName = $("#fName").val(),
            Contact.LastName = $("#lName").val(),
            Contact.RelationShip = $("#RelationShip").val(),
            Contact.Email = $("#email").val(),
            Contact.Phone = $("#phoneNo").val().replace(/[-  ]/g, '').replace(/[()]/g, ''),
            Contact.PhoneType = $("#PhoneType").val(),

            Contact.AltFirstName = $("#lAltFirstName").val(),
            Contact.AltLastName = $("#lAltLastName").val(),
            Contact.DOB = $("#DOB").val(),
            Contact.SSN = $("#SSN").val(),
            Contact.ExternalID = $("#lExternalID").val(),
            Contact.BillingContact = $("#lBillingContact").val(),
            Contact.BillingPhone = $("#BillingPhoneNo").val(),

            Contact.BillingEmail = $("#BillingEmail").val(),
            Contact.BillingAddress = $("#lBillingAddress").val(),
            Contact.BillingZipCode = $("#BillingZipCode").val(),
            Contact.BillingCity = $("#lBillingCity").val(),
            Contact.BillingState = $("#lBillingState").val(),
            Contact.Phone2 = $("#phone2No").val().replace(/[-  ]/g, '').replace(/[()]/g, ''),
            Contact.Phone2Type = $("#Phone2Type").val(),

            Contact.Phone3 = $("#phone3No").val().replace(/[-  ]/g, '').replace(/[()]/g, ''),
            Contact.Phone3Type = $("#Phone3Type").val(),
            Contact.CorpLegalEntityName = $("#lCorpLegalEntityName").val(),
            Contact.CorpAddress = $("#lCorpAddress").val(),
            Contact.CorpZipCode = $("#CorpZipCode").val(),
            Contact.CorpCity = $("#lCorpCity").val(),
            Contact.CorpState = $("#lCorpState").val(),
            Contact.IsEmergencyContact = $('#IsEmergencyCntact').prop("checked"),
            Contact.Id = $("#contactId").val(),
            Contact.PointContact = $("#IsPointContact").prop("checked"),
            Contact.AlternateContact = $("#IsAlternateContact").prop("checked"),
            Contact.AuthorizedUser = $("#IsAuthorizedUser").prop("checked")
            $.ajax({

                type: "POST",
                url: domainurl + "/Customer/SaveAdditionalContact",
                data: '{Contact: ' + JSON.stringify(Contact) + '}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    if (response.result) {

                        OpenSuccessMessageNew("Success!", response.message, function () {
                            $("#Right-To-Left-Modal-Body .close").click();
                            $("#additionalInfo").load(domainurl + "/Leads/LeadAdditionalInfo/?CustomerId=" + '@ViewBag.CustomerId');
                        })


                    }
                    else {
                        OpenErrorMessageNew("Error!", response.message);
                    }
                    //window.location.reload();
                }
            });
        }

    $(document).ready(function () {

        var phoneNo = $("#phoneNo").val();
        if (phoneNo.length == 10) {
            $("#phoneNo").val(phoneNo.replace(/^(\d{3})(\d{3})(\d{4}).*/, '($1) $2-$3'));
        }
        var phone2No = $("#phone2No").val();
        if (phone2No.length == 10) {
            $("#phone2No").val(phone2No.replace(/^(\d{3})(\d{3})(\d{4}).*/, '($1) $2-$3'));
        }
        var phone3No = $("#phone3No").val();
        if (phone3No.length == 10) {
            $("#phone3No").val(phone3No.replace(/^(\d{3})(\d{3})(\d{4}).*/, '($1) $2-$3'));
        }

        if (EmergencyContact == "True")
        {
            $('#IsEmergencyCntact').prop("checked", true);

        }
        if (PointContact == "True") {
            $('#IsPointContact').prop("checked", true);

        }
        if (AuthorizedUser == "True") {
            $('#IsAuthorizedUser').prop("checked", true);

        }
        if (AlternateContact == "True") {
            $('#IsAlternateContact').prop("checked", true);

        }

        var windowsHeight = window.innerHeight - 102;
        $(".add_followup_reminder_container_custom").height(windowsHeight);
        $("#PhoneType option[value='@Model.PhoneType']").attr('selected', 'selected');
        $("#RelationShip option[value='@Model.RelationShip']").attr('selected', 'selected');
        $("#fName").blur(function () {
            if ($("#fName").val() == "") {
                $("#fnameError").removeClass("hidden");
            }
            if ($("#fName").val() != "") {
                $("#fnameError").addClass("hidden");
            }
        })
        $("#lName").blur(function () {
            if ($("#lName").val() == "") {
                $("#lastNameError").removeClass("hidden");
            }
            if ($("#lName").val() != "") {
                $("#lastNameError").addClass("hidden");
            }
        })
        $("#email").blur(function () {
            if ($("#email").val() == "") {
                $("#emailError").removeClass("hidden");
            }
            if ($("#email").val() != "") {
                $("#emailError").addClass("hidden");
            }
        })
        $("#phoneNo").blur(function () {
            console.log($("#phoneNo").val());
            if ($("#phoneNo").val() == "") {
                $("#phoneError").removeClass("hidden");
            }
            if ($("#phoneNo").val() != "") {
                $("#phoneError").addClass("hidden");
            }
            if ($("#phoneNo").val().length != 12) {
                $("#phoneError").removeClass("hidden");
            }
        })
        $("#phone2No").blur(function () {
            console.log($("#phone2No").val());
            if ($("#phone2No").val() == "") {
                $("#phone2Error").removeClass("hidden");
            }
            if ($("#phone2No").val() != "") {
                $("#phone2Error").addClass("hidden");
            }
            if ($("#phone2No").val().length != 12) {
                $("#phone2Error").removeClass("hidden");
            }
        })
        $("#phone3No").blur(function () {
            console.log($("#phone3No").val());
            if ($("#phone3No").val() == "") {
                $("#phone3Error").removeClass("hidden");
            }
            if ($("#phone3No").val() != "") {
                $("#phone3Error").addClass("hidden");
            }
            if ($("#phone3No").val().length != 12) {
                $("#phone3Error").removeClass("hidden");
            }
        })

        //var d = new Date();
        StartDate = new Pikaday({
            field: $('#DOB')[0],
            //minDate: d,
            maxDate: moment().toDate(),
            format: 'MM/DD/YYYY'
        });

        function CheckNumeric() {
            console.log("CheckPhoneIsNumeric");
            var result = false;
            var flag = 1;
            var PhoneNo = $("#phoneNo").val();
            var BillingPhoneNo = $("#BillingPhoneNo").val();
            var phone2No = $("#phone2No").val();
            var phone3No = $("#phone3No").val();
            if (PhoneNo != "undefined") {
                result = isNumeric(PhoneNo);
                if (result == false) {
                    flag = 0;
                    $("#phoneNo").addClass("required");
                }
            }
            if (BillingPhoneNo != "undefined") {
                result = isNumeric(BillingPhoneNo);
                if (result == false) {
                    flag = 0;
                    $("#BillingPhoneNo").addClass("required");
                }
            }
            if (phone2No != "undefined") {
                result = isNumeric(phone2No);
                if (result == false) {
                    flag = 0;
                    $("#phone2No").addClass("required");
                }
            }
            if (phone3No != "undefined") {
                result = isNumeric(phone3No);
                if (result == false) {
                    flag = 0;
                    $("#phone3No").addClass("required");
                }
            }
            if (flag == 0) {
                return false;
            }
            else {
                return true;
            }
        }
        $('#saveAdditionalContact').click(function () {
            console.log("Save Additional Contact");
            if (CommonUiValidation() && CheckNumeric()) {
                SaveContact();
            }


        });

    });
    $("#SSN").keyup(function () {
        var SSNNumber = $(this).val();
        if (SSNNumber != undefined && SSNNumber != null && SSNNumber != "") {
            var cleanSSNNumber = FormateSSNNumber(SSNNumber);
            $(this).val(cleanSSNNumber);
        }
    });

</script>
<div class="add_customer_follow_up_header">
   <span>Add Additional Contact</span>
    <input type="hidden" name="name" value="@Model.Id" id="contactId"/>
</div>
<div class="add_followup_reminder_container_custom">
    @*@if (PermissionChecker.IsPermitted(PermissionList.CustomerPermissions.EmergencyContactAddItem))*@
   
        <input type="checkbox" id="IsEmergencyCntact" />
        <span>Emergency contact</span>
        <br>
   
    
    <input type="checkbox" id="IsPointContact" @((Model.PointContact.HasValue && Model.PointContact.Value == true) ? "checked" : "") />
    <span>@Localize.T("Point of Contact")</span>
    <br>
    <input type="checkbox" id="IsAlternateContact" @((Model.AlternateContact.HasValue && Model.AlternateContact.Value == true) ? "checked" : "") />
    <span>@Localize.T("Alternate Contact")</span>
    <br>
    <input type="checkbox" id="IsAuthorizedUser" @((Model.AuthorizedUser.HasValue && Model.AuthorizedUser.Value == true) ? "checked" : "") />
    <span>@Localize.T("Authorized User")</span>

    <div class="row">
        <div class="col-md-12 add_followup_reminder_body">
            @*<div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Cross Street")</span>
                <input type="text" class="form-control" id="cStreet" />
            </div>*@
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("First Name")</span>
                <input type="text" class="form-control" id="fName"name="fName"  datarequired="true"  value="@Model.FirstName" placeholder="First Name"/>
                <label rel="fName" id="fnameError" class="label hidden red position-absolute">*@Localize.T("Enter your first name.")</label>
            </div>
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Last Name")</span>
                <input type="text" class="form-control" id="lName" name="lName" datarequired="true"  value="@Model.LastName" placeholder="Last Name"/>
                <label rel="lName" id="lastNameError" class="label hidden red position-absolute">*@Localize.T("Enter your last name.")</label>
            </div>
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Relationship")</span>
                @Html.DropDownListFor(x => x.RelationShip, ViewBag.Relationship as List<SelectListItem>, new { @class = "form-control" })
            </div>
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Email")</span>
                <input type="text" class="form-control" id="email" name="email" value="@Model.Email" placeholder="Email"/>
                @*<label rel="email" id="emailError" class="label hidden red position-absolute">@Localize.T("Enter your email.")</label>*@

            </div>
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Phone No")</span>
                @*<input type="text" class="form-control" id="phoneNo" name="phoneNo"  datarequired="true"  />*@
                <input class="style-textbox form-control input-phone-format" dataformat="phone" id="phoneNo" name="phoneNo" placeholder="xxx-xxx-xxxx"  type="text" value="@Model.Phone">
                <label rel="phoneNo" id="phoneError" class="label hidden red position-absolute">*@Localize.T("Enter valid phone number.")</label>
            </div>
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Phone Type")</span>
                @Html.DropDownListFor(x => x.PhoneType, ViewBag.PhoneType as List<SelectListItem>, new { @class = "form-control" })
            </div>
            
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Alter First Name")</span>
                <input type="text" class="form-control" id="lAltFirstName" name="lAltFirstName" value="@Model.AltFirstName" placeholder="Alt First Name" />
                <label rel="lAltFirstName" id="AltFirstNameError" class="label hidden red position-absolute">*@Localize.T("Enter your alter first name.")</label>
            </div>
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Alter Last Name")</span>
                <input type="text" class="form-control" id="lAltLastName" name="lAltLastName"  value="@Model.AltLastName" placeholder="Alter Last Name" />
                <label rel="lAltLastName" id="AltLastNameError" class="label hidden red position-absolute">*@Localize.T("Enter your alter last name.")</label>
            </div>
            <div class="form-group clearfix item_margin">
                <span class="span-style">@Localize.T("Date of Birth")</span>
                @Html.TextBoxFor(x => x.DOB, new { @class = "form-control", name = "DOB", autocomplete = "off", placeholder = "Date of Birth" })
                <label rel="DOB" class="label hidden red position-absolute" id="lblDOB"> @Localize.T("Date of Birth Required")</label>
            </div>
           
            <div class="form-group clearfix item_margin">
                    <span class="span-style">@Localize.T("Social Security Number")</span>
                    @Html.TextBoxFor(x => x.SSN, new { @class = "form-control", id = "SSN", style = "width:100%", placeholder = "xxx-xx-xxxx" })
              
            </div>
            
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("External ID")</span>
                <input type="text" class="form-control" id="lExternalID" name="lExternalID"  value="@Model.ExternalID" placeholder="External ID" />
                <label rel="lExternalID" id="ExternalIDError" class="label hidden red position-absolute">*@Localize.T("Enter your External ID.")</label>
            </div>
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Billing Contact")</span>
                <input type="text" class="form-control" id="lBillingContact" name="lName" value="@Model.BillingContact" placeholder="Billing Contact" />
                <label rel="lBillingContact" id="BillingContactError" class="label hidden red position-absolute">*@Localize.T("Enter Billing Contact.")</label>
            </div>
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Billing Phone")</span>
                <input class="style-textbox form-control input-Billingphone-format" dataformat="phone" id="BillingPhoneNo" name="BillingPhoneNo" placeholder="xxx-xxx-xxxx" tabindex="14" type="text" value="@Model.BillingPhone">
                <label rel="BillingPhoneNo" id="BillingPhoneError" class="label hidden red position-absolute">*@Localize.T("Enter valid phone number.")</label>
            </div>
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Billing Email")</span>
                <input type="text" class="form-control" id="BillingEmail" name="BillingEmail" value="@Model.BillingEmail" placeholder="BillingEmail" />
            </div>
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Billing Address")</span>
                <input type="text" class="form-control" id="lBillingAddress" name="lBillingAddress"  value="@Model.BillingAddress" placeholder="Billing Address" />
                <label rel="lBillingAddress" id="BillingAddressError" class="label hidden red position-absolute">*@Localize.T("Enter your billing address.")</label>
            </div>
            <div class="form-group clearfix item_margin CityState_insert_div">
                <span class="span-style">@Localize.T("Billing Zip Code")</span>
                <input type="text" class="form-control" onkeydown="CityStateSearchKeyDown(this,event)" onkeyup="CityStateSearchKeyUp(this,event)" value="@Model.BillingZipCode" id="BillingZipCode" placeholder="Billing Zip Code" />
                <div class='tt-menu'>
                    <div class='tt-dataset tt-dataset-autocomplete'> </div>
                </div>
            </div>

            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Billing City")</span>
                @Html.TextBoxFor(x => x.BillingCity, new { @class = "form-control", placeholder = "Billing City", id = "lBillingCity", style = "text-transform:capitalize" })
            </div>

            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Billing State")</span>
                @Html.TextBoxFor(x => x.BillingState, new { @class = "form-control", id = "lBillingState", style = "width:100%", placeholder = "Billing State" })
            </div>

           


            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Second Phone No")</span>
                <input class="style-textbox form-control input-phone2-format" dataformat="phone" id="phone2No" name="phone2No" placeholder="xxx-xxx-xxxx" tabindex="14" type="text" value="@Model.Phone2">
                <label rel="phone2No" id="phone2Error" class="label hidden red position-absolute">*@Localize.T("Enter valid second phone number.")</label>
            </div>
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Second Phone Type")</span>
                @Html.DropDownListFor(x => x.Phone2Type, ViewBag.Phone2Type as List<SelectListItem>, new { @class = "form-control" })
            </div>
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Third Phone No")</span>
                <input class="style-textbox form-control input-phone3-format" dataformat="phone" id="phone3No" name="phone3No" placeholder="xxx-xxx-xxxx" tabindex="14" type="text" value="@Model.Phone3">
                <label rel="phone3No" id="phone3Error" class="label hidden red position-absolute">*@Localize.T("Enter valid third phone number.")</label>
            </div>
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Third Phone Type")</span>
                @Html.DropDownListFor(x => x.Phone3Type, ViewBag.Phone3Type as List<SelectListItem>, new { @class = "form-control" })
            </div>
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Corporation Legal Entity Name")</span>
                <input type="text" class="form-control" id="lCorpLegalEntityName" name="lCorpLegalEntityName" value="@Model.CorpLegalEntityName" placeholder="Corporation Legal Entity Name" />
                <label rel="lCorpLegalEntityName" id="CorpLegalEntityNameError" class="label hidden red position-absolute">*@Localize.T("Enter your Corp Legal Entity Name.")</label>
            </div>
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Corporation Address")</span>
                <input type="text" class="form-control" id="lCorpAddress" name="lCorpAddress" value="@Model.CorpAddress" placeholder="Corporation Address" />
                <label rel="lCorpAddress" id="CorpAddressError" class="label hidden red position-absolute">*@Localize.T("Enter your Corporation Address.")</label>
            </div>
            <div class="form-group clearfix item_margin CityState_insert_div_previous">
                <span class="span-style">@Localize.T("Corporation Zip Code")</span>
                <input type="text" class="form-control" onkeydown="CityStateSearchKeyDown(this,event)" onkeyup="CityStateSearchKeyUp(this,event)" value="@Model.CorpZipCode" id="CorpZipCode" placeholder="Corporation Zip Code" />
                <div class='tt-menu'>
                    <div class='tt-dataset tt-dataset-autocomplete'> </div>
                </div>
            </div>
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Corporation City")</span>
                @Html.TextBoxFor(x => x.CorpCity, new { @class = "form-control", id = "lCorpCity", placeholder = "Corporation City", style = "text-transform:capitalize" })
                <label rel="lCorpCity" id="CorpCityError" class="label hidden red position-absolute">*@Localize.T("Enter your Corporation City.")</label>
            </div>
            <div class="form-group clearfix item_margin">
                <span class="text-custom">@Localize.T("Corporation State")</span>
                @Html.TextBoxFor(x => x.CorpState, new { @class = "form-control", id = "lCorpState", style = "width:100%", placeholder = "Corporation State" })
            </div>
        </div>
        </div>
</div>
<section class="footer-section">
    <footer class="footer">
        <div class="followUp_SaveCancelDiv"> 
                <button id="saveAdditionalContact"type="button" class="btn green_button">@Localize.T("Save")</button>

        </div>
    </footer>
</section>