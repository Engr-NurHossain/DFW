@{
    Layout = null;
    List<HS.Entities.UserContact> AssociateList = (List<HS.Entities.UserContact>)ViewBag.UserContactList;

}
@model HS.Entities.Contact
@using Localize = HS.Web.UI.Helper.LanguageHelper
<link href="~/Content/Select2/select2.css" rel="stylesheet" />
<link href="~/Content/Css/Contacts/AddContact.css" rel="stylesheet" />
<script src="~/Content/Select2/Select2.min.js"></script>
<script src="~/Content/Js/Contact/AddContact.js"></script>

<script>
    function phone_validate(phno) {
        var regexPattern = new RegExp(/^[0-9-+]+$/);    // regular expression pattern
        return regexPattern.test(phno);
    }
    var ChackPhoneNumberValidity = function (phone_number, phone_Type, CustomerId, FormatedPhoneNo) {
        console.log(phone_number);

        if (phone_validate(phone_number)) {
            //url = domainurl + "/Customer/VerifyPhone/";
            //var param = {

            //    PhoneNumber: phone_number,
            //    CustomerId: CustomerId,
            //    PhoneType: phone_Type,
            //    FormatedPhoneNo: FormatedPhoneNo
            //};
            //// verify phone number via AJAX call
            //$.ajax({
            //    type: "POST",
            //    url: url,
            //    data: JSON.stringify(param),
            //    contentType: "application/json; charset=utf-8",
            //    dataType: "json",
            //    cache: false,
            //    success: function (json) {
            //        console.log(json);
            //        // Access and use your preferred validation result objects

            //        if (json.result == "true") {
            //            if (phone_Type == "MobileNumber") {
            //                $("#IsMobileVerified").val("true");
            //                $(".notVerifiedSitePhoneNumber").addClass("hidden");
            //                $(".verifiedSitePhoneNumber").removeClass("hidden");
            //            }
            //            if (phone_Type == "WorkNumeber") {
            //                $("#IsWorkNoVerified").val("true");
            //                $(".notVerifiedCellPhoneNumber").addClass("hidden");
            //                $(".verifiedCellPhoneNumber").removeClass("hidden");
            //            }
            //            var VerifyInfo = "";
            //            if (json.country_code != "") {
            //                VerifyInfo += "<b>Country</b>: " + json.country_code + "<br/>";
            //            }
            //            if (json.carrier != "") {
            //                VerifyInfo += "<b>Carrier<b/>: " + json.carrier + "<br/>";
            //            }
            //            if (json.location != "") {
            //                VerifyInfo += "<b>Location<b/>: " + json.location + "<br/>";
            //            }
            //            if (json.line_type != "") {
            //                VerifyInfo += "<b>Line type<b/>: " + json.line_type + "<br/>";
            //            }
            //            OpenSuccessMessageNew("Validate", "Phone number is valid.<br/>" + VerifyInfo);
            //        }
            //        else {
            //            if (phone_Type == "MobileNumber") {
            //                $("#IsMobileVerified").val("false");
            //                $(".notVerifiedSitePhoneNumber").removeClass("hidden");
            //                $(".verifiedSitePhoneNumber").addClass("hidden");
            //            }
            //            if (phone_Type == "WorkNumeber") {
            //                $("#IsWorkNoVerified").val("false");
            //                $(".notVerifiedCellPhoneNumber").removeClass("hidden");
            //                $(".verifiedCellPhoneNumber").addClass("hidden");
            //            }

            //            OpenErrorMessageNew("", "Phone number not valid!");
            //        }
            //    }
            //});
        }
        else {
            if (phone_Type == "MobileNumber") {
                $("#IsMobileVerified").val("false");
                $(".notVerifiedSitePhoneNumber").removeClass("hidden");
                $(".verifiedSitePhoneNumber").addClass("hidden");
            }
            if (phone_Type == "WorkNumeber") {
                $("#IsWorkNoVerified").val("false");
                $(".notVerifiedCellPhoneNumber").removeClass("hidden");
                $(".verifiedCellPhoneNumber").addClass("hidden");
            }
            OpenErrorMessageNew("", "Phone number not valid!")
        }

    }

    var CheckMobilePhone = function (CustomerId) {
        var phonenumber = $("#MobileNumber").val().replace(/(\d{3})\-?(\d{3})\-?(\d{4})/, "$1$2$3");
        var FormatedPhoneNo = $("#MobileNumber").val();
        ChackPhoneNumberValidity(phonenumber, "MobileNumber", CustomerId, FormatedPhoneNo);
    }
    var CheckWorkPhone = function (CustomerId) {
        var phonenumber = $(".WorkNumeber").val().replace(/(\d{3})\-?(\d{3})\-?(\d{4})/, "$1$2$3");
        var FormatedPhoneNo = $(".WorkNumeber").val()
        ChackPhoneNumberValidity(phonenumber, "WorkNumeber", CustomerId, FormatedPhoneNo);
    }
    var ContactSaveMessage = "@Localize.T("Contact saved successfully.")";
    var ContactDeleteMessage = "@Localize.T("Do you want to delete this Contact?")";
    var ContactDeleteSuccessMessage = "@Localize.T("Contact Deleted successfully.")";
</script>

<div class="hidden">
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.ContactId)
    @Html.HiddenFor(x => x.ContactTab, new { id = "contactTab" })
</div>
<div class="add_contact_contaoner">
    <div class="add_contact_header">
        @Localize.T("Contact Details")
    </div>
    <div class="add_contact_inner">
        <div class="row">
            <div class="form-group clearfix">
                <span class="span_style">@Localize.T("First Name")</span>

                <input type="text" id="FirstName" name="Name" placeholder="First Name" value="@Model.FirstName" datarequired="true" class="form-control" />
                <label rel="Name" id="Cname" class="label hidden red position-absolute">*@Localize.T("First Name Required")</label>
            </div>
            <div class="form-group clearfix">
                <span class="span_style">@Localize.T("Last Name")</span>
                @Html.TextBoxFor(x => x.LastName, new { @class = "form-control", placeholder = "Last Name" })
            </div>
            @*<div class="form-group clearfix">
                <span class="span_style">@Localize.T("Work")</span>

                <input class="form-control input-phone-format" id="WorkNumeber" name="WorkNumeber" placeholder="xxx-xxx-xxxx" type="text" value="@Model.Work" datarequired = "true" >
                <label class="label hidden red absolute" rel="WorkNumeber">*@





            <div class="form-group clearfix">
                <span class="span_style">@Localize.T("Work")</span>

                @*<span title="Phone number is verified." class="verifiedCellPhoneNumber @((Model.IsWorkNoVerified == true) ? "" : "hidden")" id=""> <i class="fa fa-check-circle"></i></span>

                <span title="Please verify the phone number." class="notVerifiedCellPhoneNumber @((Model.IsWorkNoVerified == false)? "" : "hidden")" id="notverified"> <i class="fa fa-times-circle"></i></span>*@
                <div class="">
                    <input type="text" name="WorkNumeber" id="WorkNumeber" value="@Model.Work" @*tabindex="@Index"*@ placeholder="xxx-xxx-xxxx" class="form-control input-phone-format WorkNumeber"  />
                    @*<div class="input-group-btn"><button class="btn" title="Check Work Phone Number" id="checkWorkPhone" onclick="CheckWorkPhone('@Model.CustomerId')"><i class="fa fa-check" aria-hidden="true" style="cursor:pointer;"></i></button></div>*@
                </div>
                <label class="label hidden red absolute" id="WorkNumeberVN" rel="PrimaryPhone">*@Localize.T("Please enter Valid No."). </label>
            </div>

         


        </div>
        <div class="row">
            <div class="form-group clearfix">
                <span class="span_style">@Localize.T("Ext")</span>
                @Html.TextBoxFor(x => x.Ext, new { @class = "form-control", placeholder = "Ext" })
            </div>
            @*<div class="form-group clearfix">
                <span class="span_style">@Localize.T("Mobile")</span>

                <input class="form-control" id="MobileNumber" name="MobileNumber" placeholder="xxx-xxx-xxxx" type="text" value="@Model.Mobile">
            </div>*@

            <div class="form-group clearfix">

                <span class="span_style">@Localize.T("Mobile")</span>
                @*<span title="Phone number is verified." class="verifiedSitePhoneNumber @(( Model.IsMobileVerified == true) ? "" : "hidden")" id=""> <i class="fa fa-check-circle"></i></span>

                <span title="Please verify the phone number." class="notVerifiedSitePhoneNumber @(( Model.IsMobileVerified == false)? "" : "hidden")" id="notverified"> <i class="fa fa-times-circle"></i></span>*@
                <div class="">
                    @Html.TextBoxFor(x => x.Mobile, new { @class = "form-control input-phone-format", name = "MobileNumber", type = "text", id = "MobileNumber", placeholder = "xxx-xxx-xxxx"})
                    @*<div class="input-group-btn"><button class="btn" title="Check Site Mobile Number" id="checkMobilePhone" onclick="CheckMobilePhone('@Model.CustomerId')"><i class="fa fa-check" aria-hidden="true" style="cursor:pointer;"></i></button></div>*@
                </div>
                <label class="label hidden red absolute" id="MobileNumberVN" rel="PrimaryPhone">*@Localize.T("Please enter Valid No."). </label>
            </div>




            <div class="form-group clearfix">
                <span class="span_style">@Localize.T("Email")</span>
                @Html.TextBoxFor(x => x.Email, new { @class = "form-control", placeholder = "Email" })
            </div>
        </div>
        <div class="row">
            <div class="form-group clearfix">
                <span class="span_style">@Localize.T("Title")</span>
                @Html.TextBoxFor(x => x.Title, new { @class = "form-control", placeholder = "Title" })
            </div>
            <div class="form-group clearfix">
                <span class="span_style">@Localize.T("Role")</span>
                @Html.DropDownListFor(x => x.Role, ViewBag.ContactRole as List<SelectListItem>, new { @class = "form-control" })
            </div>
            <div class="form-group clearfix">
                <span class="span_style">@Localize.T("Facebook")</span>
                @Html.TextBoxFor(x => x.Facebook, new { @class = "form-control", placeholder = "Facebook" })
            </div>
        </div>
        <div class="row">
            <div class="form-group clearfix">
                <span class="span_style">@Localize.T("Twitter")</span>
                @Html.TextBoxFor(x => x.Twitter, new { @class = "form-control", placeholder = "Twitter" })
            </div>
            <div class="form-group clearfix">
                <span class="span_style">@Localize.T("Instagram")</span>
                @Html.TextBoxFor(x => x.Instagram, new { @class = "form-control", placeholder = "Instagram" })
            </div>
            <div class="form-group clearfix">
                <span class="span_style">@Localize.T("LinkedIN")</span>
                @Html.TextBoxFor(x => x.LinkedIN, new { @class = "form-control", placeholder = "LinkedIN" })
            </div>
        </div>
        <div class="row">
            @if (ViewBag.CustomerId == null)
            {
                <div class="form-group clearfix">
                    <span class="span_style">@Localize.T("Select Customer")</span>
                    @Html.DropDownList("CustomerId", (List<SelectListItem>)ViewBag.CustomerList, new { @class = "form-control dropdown_customar", multiple = "multiple" })
                </div>
                <div class="form-group clearfix">
                    <span class="span_style">@Localize.T("Select Lead")</span>
                    @Html.DropDownList("LeadId", (List<SelectListItem>)ViewBag.LeadList, new { @class = "form-control dropdown_lead", multiple = "multiple" })
                </div>
            }
            else
            {
                <input type="hidden" id="CustomerId" value="@ViewBag.CustomerId" />
            }
            <div class="form-group clearfix">
                <span class="span_style">@Localize.T("Select Opportunity")</span>
                @Html.DropDownList("OpportunityId", (List<SelectListItem>)ViewBag.OpportunityList, new { @class = "form-control dropdown_opportunity", multiple = "multiple" })
            </div>
        </div>

        <div class="row">
            <div class="form-group clearfix">
                <span class="span_style">@Localize.T("Contact Owner")</span>
                @Html.DropDownListFor(x => x.ContactOwner, ViewBag.SalesPersonsList as List<SelectListItem>, new { @class = "form-control" })
            </div>
            @if (ViewBag.ContactTag == "true")
            {
                <div class="form-group clearfix">
                    <span class="span_style">@Localize.T("Tags")</span>
                    @Html.DropDownList("Contact_tag", (List<SelectListItem>)ViewBag.taglist, new { @class = "form-control dropdown_contact", multiple = "multiple" })
                </div>
            }
           
        </div>
        
        <div class="row">
            @if (AssociateList != null)
            {
                <div class="form-group">
                    <div class="assocuate_block">
                        <div class="associate_header">@Localize.T("Associated With")</div>
                        <div class="Custom_associate_content">

                            @foreach (var item in AssociateList)
                            {
                                if (item.UserType == "Customer")
                                {
                                    if (string.IsNullOrWhiteSpace(item.UserBusinessName))
                                    {
                                        <span>Account: </span><a class="cus-anchor" onclick="CustomerDetails('@item.UserIntId')">@(item.UserFirstName + " " + item.UserLastName)</a><br>
                                    }
                                    else
                                    {
                                        <span>Account: </span><a class="cus-anchor" onclick="CustomerDetails('@item.UserIntId')">@(item.UserFirstName + " " + item.UserLastName)(@item.UserBusinessName)</a><br>
                                    }

                                }
                                if (item.UserType == "Lead")
                                {
                                    if (string.IsNullOrWhiteSpace(item.UserBusinessName))
                                    {
                                        <span>Lead: </span><a class="cus-anchor" onclick="Lead('@item.UserIntId')">@(item.UserFirstName + " " + item.UserLastName)</a><br>
                                    }
                                    else
                                    {
                                        <span>Lead: </span><a class="cus-anchor" onclick="Lead('@item.UserIntId')">@(item.UserFirstName + " " + item.UserLastName)(@item.UserBusinessName)</a><br>
                                    }
                                }
                                if (item.UserType == "Opportunity")
                                {
                                    <span>Opportunity: </span><a class="cus-anchor" onclick="Opportunity('@item.UserIntId')">@item.OpportunityName</a><br>
                                }


                            }

                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="row">
            <div class="form-group clearfix add_contact_notes">
                <span class="span_style">@Localize.T("Notes")</span>
                @Html.TextAreaFor(x => x.Notes, new { @class = "form-control", placeholder = "Notes" })
            </div>
        </div>
        
    </div>

    <div class="add_contact_footer">
        <div class="delete_footer">
            @if (Model.Id > 0)
            {
                <input type="button" value="Delete" id="btnSaveContact" onclick="DeleteContactConfirm('@Model.Id')" />
            }
        </div>
        <div class="save_footer">
            @if (ViewBag.CustomerId == null)
            {
                <input type="button" class="add_contact_save" value="Save" id="btnSaveContact" onclick="SaveContact('false')" />
            }
            else
            {
                <input type="button" class="add_contact_save" value="Save" id="btnSaveContact" onclick="SaveContact('true')" />
            }

        </div>


    </div>

</div>