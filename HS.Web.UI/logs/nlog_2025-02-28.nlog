2025-02-28 14:37:15.3214|ERROR|HS.Framework.DataAccess.BaseDataAccess|   
                    select En.*, 
                    emp.FirstName + ' ' +emp.LastName as AddedByText
                    from EstimatorNote En
                    left join Employee emp on emp.UserId = en.AddedBy
                    where En.CompanyId = 'c7e72006-6edf-4b5a-8589-bfd1b2dae7ba' and En.EstimatorId = '3315'|System.Data.SqlClient.SqlException (0x80131904): Invalid object name 'EstimatorNote'.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)
   at System.Data.Common.DbDataAdapter.FillInternal(DataSet dataset, DataTable[] datatables, Int32 startRecord, Int32 maxRecords, String srcTable, IDbCommand command, CommandBehavior behavior)
   at System.Data.Common.DbDataAdapter.Fill(DataSet dataSet, Int32 startRecord, Int32 maxRecords, String srcTable, IDbCommand command, CommandBehavior behavior)
   at System.Data.Common.DbDataAdapter.Fill(DataSet dataSet, String srcTable)
   at HS.Framework.DataAccess.BaseDataAccess.GetDataSet(SqlCommand command, String tablename) in D:\USA Project\DFW Security\HS.Framework\DataAccess\BaseDataAccess.cs:line 439
ClientConnectionId:a6119c17-2be9-4e71-960d-2f4a2d3c6090
Error Number:208,State:1,Class:16
2025-02-28 14:40:47.6613|ERROR|HS.Framework.DataAccess.BaseDataAccess|   
                    select En.*, 
                    emp.FirstName + ' ' +emp.LastName as AddedByText
                    from EstimatorNote En
                    left join Employee emp on emp.UserId = en.AddedBy
                    where En.CompanyId = 'c7e72006-6edf-4b5a-8589-bfd1b2dae7ba' and En.EstimatorId = '3316'|System.Data.SqlClient.SqlException (0x80131904): Invalid object name 'EstimatorNote'.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)
   at System.Data.Common.DbDataAdapter.FillInternal(DataSet dataset, DataTable[] datatables, Int32 startRecord, Int32 maxRecords, String srcTable, IDbCommand command, CommandBehavior behavior)
   at System.Data.Common.DbDataAdapter.Fill(DataSet dataSet, Int32 startRecord, Int32 maxRecords, String srcTable, IDbCommand command, CommandBehavior behavior)
   at System.Data.Common.DbDataAdapter.Fill(DataSet dataSet, String srcTable)
   at HS.Framework.DataAccess.BaseDataAccess.GetDataSet(SqlCommand command, String tablename) in D:\USA Project\DFW Security\HS.Framework\DataAccess\BaseDataAccess.cs:line 439
ClientConnectionId:a6119c17-2be9-4e71-960d-2f4a2d3c6090
Error Number:208,State:1,Class:16
2025-02-28 14:56:34.2571|ERROR|HS.Framework.DataAccess.BaseDataAccess| 
                                declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

                                SELECT Distinct 
                                cus.Id ,
                                CASE 
	WHEN (cus.DBA = '' or cus.DBA IS NULL) AND  (cus.BusinessName = '' or cus.BusinessName IS NULL) THEN cus.FirstName +' '+cus.LastName
	WHEN (cus.DBA = '' or cus.DBA IS NULL)  THEN cus.BusinessName
	ELSE  cus.DBA
END as DisplayName,
                                cus.CustomerId,
                                RBS.ScheduleId,RBSI.ProductName,RBSI.Amount as RMRAmount,RBSI.CycleStartDate as RMRCycleStartDate,
                                    SUBSTRING(
                                 RBS.BillingAddress,
									CHARINDEX('<br />', RBS.BillingAddress) + 6,
									CHARINDEX('<br />', RBS.BillingAddress, CHARINDEX('<br />', RBS.BillingAddress) + 1) 
									- CHARINDEX('<br />', RBS.BillingAddress) - 6
                                ) AS BillAdd1,
                                LTRIM(SUBSTRING(
                                RBS.BillingAddress,
                                CHARINDEX('<br />', RBS.BillingAddress, CHARINDEX('<br />', RBS.BillingAddress) + 1) + 6,
                                CHARINDEX(',', RBS.BillingAddress, CHARINDEX('<br />', RBS.BillingAddress, CHARINDEX('<br />', RBS.BillingAddress) + 1)) 
                                - CHARINDEX('<br />', RBS.BillingAddress, CHARINDEX('<br />', RBS.BillingAddress) + 1) - 6
                                )) AS BillCity,
                                LTRIM(SUBSTRING(
                                RBS.BillingAddress,
                                CHARINDEX(',', RBS.BillingAddress) + 2,
                                2
                                )) AS BillState,
                                LTRIM(SUBSTRING(
                                RBS.BillingAddress,
                                CHARINDEX(',', RBS.BillingAddress) + 5,
                                CHARINDEX('<', RBS.BillingAddress, CHARINDEX(',', RBS.BillingAddress)) 
                                - CHARINDEX(',', RBS.BillingAddress) - 5
                                )) AS BillZip,
                                pinfo.CardExpireDate,
                                pinfo.RoutingNo,
                                pinfo.AcountNo As AutoBank,
                                pinfo.CardNumber As AutoCC,
                                CASE 
                                WHEN pinfo.RoutingNo IS NOT NULL AND pinfo.RoutingNo <> '' THEN pinfo.AccountName
                                ELSE ''
                                END AS BankAccountName,
                                CASE 
                                WHEN pinfo.CardExpireDate IS NOT NULL AND pinfo.CardExpireDate <> '' THEN pinfo.AccountName
                                ELSE ''
                                END AS CardAccountName,
                               CASE 
                                WHEN LEFT(pinfoPro.Type, 3) = 'CC_' THEN 'CC'
                                WHEN LEFT(pinfoPro.Type, 4) = 'ACH_' THEN 'ACH'
                                WHEN pinfoPro.Type = 'Invoice' THEN 'Invoice'
                                ELSE pinfoPro.Type
                                END AS BillingMethodType,
                                 RBS.EmailAddress as BillEmailAddress,
                                RBS.StartDate as RMRStartDate,
                                RBS.PreviousDate as RMRLastBillDate,
                                RBS.NextDate as RMRNextBillDate,
                                RBSI.ProductName as RMRProductName,
                                RBSI.AddedDate as RMRAddedDate,
                                cus.IsActive,
                                CASE 
                                WHEN cus.Ownership = '-1' OR cus.Ownership IS NULL OR cus.Ownership = '' THEN ''
                                ELSE cus.Ownership
                                END AS Ownership,
                                  CASE 
                                        WHEN Busaccounttype.DisplayText = 'Please Select' THEN ''
                                        ELSE Busaccounttype.DisplayText
                                    END AS CSBankAccountType,
                                lkstatus.DisplayText as StatusVal,
								SP.FirstName SoldbyFirstName,
								SP.LastName SoldbyLastName,
								Q1.FirstName Q1FirstName, 
								Q1.LastName Q1LastName,
								Q2.FirstName Q2FirstName,
								Q2.LastName Q2LastName, 
                                cus.CutInDate ,
                                cus.MonthlyMonitoringFee ,
                                cus.State,
								cus.City,
                                cus.PlatformId,
                                Ccom.ConvertionDate,
                                --cf.FileFullName as NameFile,
                                '' as NameFile,
                                Ins.FirstName +' '+ Ins.LastName as TechnicianName,
                                SP.FirstName +' '+ SP.LastName as PersonSales,
                                (select SUM(_invoice.BalanceDue) from Invoice _invoice
								where cus.CustomerId = _invoice.CustomerId
								and (_invoice.Status = 'Open' or _invoice.Status = 'Partial')) as UnpaidInvoiceTotal,
								Created.FirstName +' '+ Created.LastName as CreatedByVal,
                                cus.DoNotCall,
                                cus.PreferredContactMethod
                                ,_AppoinmentSetBy.FirstName +' '+ _AppoinmentSetBy.LastName as AppoinmentSetByVal
                                --,(Select _emp.FirstName +' '+ _emp.LastName from Employee _emp where _emp.UserId=_extend.AppoinmentSetBy) as AppoinmentSetByVal
                                 
                                ,_extend.ContractStartDate
								,_extend.RemainingContractTerm
                                INTO #CustomerData
                                FROM Customer cus
                                LEFT JOIN CustomerCompany Ccom
                                  ON cus.CustomerId = Ccom.CustomerId

                                Left Join Employee Created on Created.UserId= cus.CreatedByUid
								Left JOin Employee Q1 on convert(nvarchar(50), Q1.UserId) = cus.QA1
								Left JOin Employee Q2 on convert(nvarchar(50), Q2.UserId )= cus.QA2
                                Left Join Employee SP on convert(nvarchar(50), SP.UserId )= cus.Soldby
                                Left Join Employee Ins on CONVERT(nvarchar(50), Ins.UserId )= cus.Installer
                                left join Lookup lkstatus on lkstatus.DataValue = cus.Status and lkstatus.DataKey = 'LeadStatus'
                                left join Lookup Busaccounttype on Busaccounttype.DataValue = cus.BusinessAccountType and Busaccounttype.DataKey = 'BussinessAccountType'
                                left join QaAnswer _QAns on cus.CustomerId = _QAns.CustomerId
                                left join [Lookup] lkinstalledstatus on lkinstalledstatus.DataValue = iif(cus.InstalledStatus != '-1', cus.InstalledStatus, '') and lkinstalledstatus.DataKey = 'InstalledStatus'
                                --left join CustomerFile cf on cf.CustomerId = cus.CustomerId
                                --and cf.FileFullName like '%Agreement.Pdf'
                                Left Join Employee emp
                                on cus.LastUpdatedBy = emp.UserName
                                left join Invoice inv on inv.CustomerId = cus.CustomerId
                                left join CustomerExtended _extend on _extend.CustomerId = cus.CustomerId
                                Left Join Employee _AppoinmentSetBy on _AppoinmentSetBy.UserId=_extend.AppoinmentSetBy
                                left JOIN RecurringBillingSchedule RBS ON RBS.CustomerId = cus.CustomerId 
								left JOIN RecurringBillingScheduleItems RBSI ON RBSI.ScheduleId = RBS.ScheduleId 
                                left JOIN PaymentInfo pinfo on RBS.CustomerPaymentProfileId = pinfo.Id
                                left JOIN PaymentProfileCustomer pinfoPro on pinfo.Id = pinfoPro.PaymentInfoId
                                WHERE Ccom.CompanyId = 'c7e72006-6edf-4b5a-8589-bfd1b2dae7ba' 
                                AND Ccom.IsLead = 0
                                and Ccom.IsActive = 1
                                and cus.JoinDate is not null
   	                            and RBSI.ProductName is not null
                             
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                --order by #cd.Id desc
            

                                --select * into #CustomerFilterData
								--FROM #CustomerData
                                

                                SELECT TOP (@pagesize)
                                  *  Into #CustomerResultData
                                FROM #CustomerData
                                where Id NOT IN(Select TOP (@pagestart)  Id from #CustomerData #cd order by #cd.RMRAddedDate  desc)
							    order by RMRAddedDate  desc      


								select cfd.*,cus.CustomerNo,
                                cus.Title,
                                cus.FirstName ,
                                cus.LastName ,
                                cus.MiddleName ,
                                cus.BusinessName ,
                                cus.SSN,
		                        cus.[Status],
		                        cus.Street,
		                        cus.ZipCode, 
		                        cus.[Address],
		                        cus.EmailAddress,
		                        cus.PrimaryPhone,
                                cus.SecondaryPhone,
								cus.DateofBirth,
								cus.LeadSource,
								cus.LastUpdatedDate,
								cus.LastUpdatedBy,
                                cus.StreetType,
								cus.Appartment,
                                cus.CellNo,
                                cus.Fax,
                                cus.CallingTime,
                                cus.Address2,
                                cus.Country,
                                cus.StreetPrevious,
                                cus.CityPrevious,
                                cus.StatePrevious,
                                cus.ZipCodePrevious,
                                cus.CountryPrevious,
                                cus.AccountNo,
                                cus.IsAlarmCom,
                                cus.CreditScore,
                                cus.CreditScoreValue,
                                cus.ContractTeam,
                                cus.RenewalTerm,
                                cus.FundingCompany,
                                cus.CellularBackup,
                                cus.CustomerFunded,
                                cus.PlatformId,
                                cus.Maintenance,
                                cus.Note,
                                cus.SalesDate,
                                cus.FollowUpDate,
                                cus.InstallDate,
                                cus.Installer,
                                cus.FundingDate,
                                cus.ReminderDate,
                                cus.QA1Date,
                                cus.QA2Date,
                                cus.BillAmount,
                                cus.PaymentMethod,
                                cus.BillCycle,
                                cus.LeadSourceType,
                                cus.BillDay,
                                cus.BillNotes,
                                cus.BillTax,
                                cus.BillOutStanding,
                                cus.ServiceDate,
                                cus.Area,
                                cus.Latlng,
                                cus.SecondCustomerNo,
                                cus.AdditionalCustomerNo,
                                cus.IsTechCallPassed,
                                cus.IsDirect,
                                cus.AuthorizeRefId,
                                cus.AuthorizeCusProfileId,
                                cus.AuthorizeCusPaymentProfileId,
                                cus.AuthorizeDescription,
                                cus.IsRequiredCsvSync,
                                cus.Passcode,
                                cus.ActivationFee,
                                cus.FirstBilling,
                                cus.ActivationFeePaymentMethod,
                                cus.LastGeneratedInvoice,
                                cus.Singature,
                                cus.CrossStreet,
                                cus.DBA,
                                cus.AlarmRefId,
                                cus.TransunionRefId,
                                cus.MonitronicsRefId,
                                cus.CentralStationRefId,
                                cus.CmsRefId,
                                cus.PreferedEmail,
                                cus.PreferedSms,
                                cus.IsAgreement,
                                cus.IsFireAccount,
                                cus.CreatedByUid,
                                cus.CreatedDate,
                                cus.LastUpdatedByUid,
                                cus.BusinessAccountType,
                                cus.PhoneType,
                                cus.Carrier,
                                cus.ReferringCustomer,
                                cus.EsistingPanel,
                                cus.[Ownership],
                                cus.PurchasePrice,
                                cus.ContractValue,
                                cus.ChildOf,
                                cus.EmailVerified,
                                cus.HomeVerified,
                                cus.County,
                                cus.CustomerToken,
                                cus.PaymentToken,
                                cus.ScheduleToken,
                                cus.EstCloseDate,
                                cus.ProjectWalkDate,
                                cus.BranchId,
                                cus.SubscriptionStatus,
                                cus.AnnualRevenue,
                                cus.Website,
                                cus.Market,
                                cus.Passengers,
                                cus.Budget,
                                cus.SmartSetUpStep,
                                cus.CustomerAccountType,
                                cus.IsPrimaryPhoneVerified,
                                cus.IsSecondaryPhoneVerified,
                                cus.IsCellNoVerified,
                                cus.JoinDate,
                                cus.[Type],
                                cus.MovingDate,
                                cus.ContactedPerviously,
                                cus.InstalledStatus,
                                cus.AcquiredFrom,
                                cus.FollowUpDate,
                                cus.BuyoutAmountByADS,
                                cus.BuyoutAmountBySalesRep,
                                cus.FinancedTerm,
                                cus.FinancedAmount,
                                cus.Levels,
                                cus.SoldAmount,
                                cus.AgreementEmail,
                                cus.AgreementPhoneNo,
                                cus.TaxExemption,
                                cus.AppoinmentSet,
								--SP.FirstName SoldbyFirstName,
								--SP.LastName SoldbyLastName,
								--Q1.FirstName Q1FirstName, 
								--Q1.LastName Q1LastName,
								--Q2.FirstName Q2FirstName,
								--Q2.LastName Q2LastName, 
                                ISNULL(cfd.SoldbyFirstName,'')+' '+ ISNULL(cfd.SoldbyLastName,'') Soldby,
                                ISNULL(cfd.Q1FirstName,'')+' '+ ISNULL(cfd.Q1LastName,'') QA1,
                                ISNULL(cfd.Q2FirstName,'')+' '+ ISNULL(cfd.Q2LastName,'') QA2,
                                cus.MapscoNo 
								 from #CustomerResultData cfd  
								Left Join Customer cus on cus.CustomerId = cfd.CustomerId
									order by  cfd.RMRAddedDate desc  
								
								drop table #CustomerResultData


                                select count(*) [TotalCount]
                                from #CustomerData
                                
                                -- select COUNT(*) [ActiveCounter]
								-- from #CustomerFilterData
								-- where IsActive = 1

                                -- select COUNT(*) [RMRCounter], sum(CONVERT(float, MonthlyMonitoringFee)) [RMRValue]
								-- from #CustomerFilterData
								-- where IsActive = 1
								-- and MonthlyMonitoringFee != ''
								-- and MonthlyMonitoringFee != '-1'
								-- and MonthlyMonitoringFee is not null

                                --select (select SUM(CONVERT(float, inv.TotalAmount))
								--from #CustomerFilterData cusfilter
								--left join Invoice inv on inv.CustomerId = cusfilter.CustomerId
								--where cusfilter.IsActive = 1
								--and inv.IsEstimate = 0
                               -- and (inv.Status = 'Open' or inv.Status = 'Partial')) [OpenInvoiceAmount],

								--(select SUM(CONVERT(float, inv.TotalAmount))
								--from #CustomerFilterData cusfilter
								--left join Invoice inv on inv.CustomerId = cusfilter.CustomerId
								--where cusfilter.IsActive = 1
								--and inv.Status = 'Open'
                                --and inv.DueDate < GETDATE()) [InvoiceDueAmount]


                                DROP TABLE #CustomerData
                                --DROP TABLE #CustomerFilterData|System.Data.SqlClient.SqlException (0x80131904): Invalid length parameter passed to the LEFT or SUBSTRING function.
The statement has been terminated.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlDataReader.TrySetMetaData(_SqlMetaDataSet metaData, Boolean moreInfo)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)
   at System.Data.Common.DbDataAdapter.FillInternal(DataSet dataset, DataTable[] datatables, Int32 startRecord, Int32 maxRecords, String srcTable, IDbCommand command, CommandBehavior behavior)
   at System.Data.Common.DbDataAdapter.Fill(DataSet dataSet, Int32 startRecord, Int32 maxRecords, String srcTable, IDbCommand command, CommandBehavior behavior)
   at System.Data.Common.DbDataAdapter.Fill(DataSet dataSet, String srcTable)
   at HS.Framework.DataAccess.BaseDataAccess.GetDataSet(SqlCommand command, String tablename) in D:\USA Project\DFW Security\HS.Framework\DataAccess\BaseDataAccess.cs:line 439
ClientConnectionId:a6119c17-2be9-4e71-960d-2f4a2d3c6090
Error Number:537,State:3,Class:16
2025-02-28 16:50:14.7467|ERROR|HS.Framework.DataAccess.BaseDataAccess|   
                    select En.*, 
                    emp.FirstName + ' ' +emp.LastName as AddedByText
                    from EstimatorNote En
                    left join Employee emp on emp.UserId = en.AddedBy
                    where En.CompanyId = 'c7e72006-6edf-4b5a-8589-bfd1b2dae7ba' and En.EstimatorId = '645'|System.Data.SqlClient.SqlException (0x80131904): Invalid object name 'EstimatorNote'.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)
   at System.Data.Common.DbDataAdapter.FillInternal(DataSet dataset, DataTable[] datatables, Int32 startRecord, Int32 maxRecords, String srcTable, IDbCommand command, CommandBehavior behavior)
   at System.Data.Common.DbDataAdapter.Fill(DataSet dataSet, Int32 startRecord, Int32 maxRecords, String srcTable, IDbCommand command, CommandBehavior behavior)
   at System.Data.Common.DbDataAdapter.Fill(DataSet dataSet, String srcTable)
   at HS.Framework.DataAccess.BaseDataAccess.GetDataSet(SqlCommand command, String tablename) in D:\USA Project\DFW Security\HS.Framework\DataAccess\BaseDataAccess.cs:line 439
ClientConnectionId:dbcff8c8-ee25-4dc4-8c4b-f9de679bb18c
Error Number:208,State:1,Class:16
2025-02-28 17:56:20.6283|ERROR|HS.Framework.DataAccess.BaseDataAccess|   
                    select En.*, 
                    emp.FirstName + ' ' +emp.LastName as AddedByText
                    from EstimatorNote En
                    left join Employee emp on emp.UserId = en.AddedBy
                    where En.CompanyId = 'c7e72006-6edf-4b5a-8589-bfd1b2dae7ba' and En.EstimatorId = '648'|System.Data.SqlClient.SqlException (0x80131904): Invalid object name 'EstimatorNote'.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)
   at System.Data.Common.DbDataAdapter.FillInternal(DataSet dataset, DataTable[] datatables, Int32 startRecord, Int32 maxRecords, String srcTable, IDbCommand command, CommandBehavior behavior)
   at System.Data.Common.DbDataAdapter.Fill(DataSet dataSet, Int32 startRecord, Int32 maxRecords, String srcTable, IDbCommand command, CommandBehavior behavior)
   at System.Data.Common.DbDataAdapter.Fill(DataSet dataSet, String srcTable)
   at HS.Framework.DataAccess.BaseDataAccess.GetDataSet(SqlCommand command, String tablename) in D:\USA Project\DFW Security\HS.Framework\DataAccess\BaseDataAccess.cs:line 439
ClientConnectionId:dbcff8c8-ee25-4dc4-8c4b-f9de679bb18c
Error Number:208,State:1,Class:16
2025-02-28 18:05:54.4424|ERROR|HS.Framework.DataAccess.BaseDataAccess|   
                    select En.*, 
                    emp.FirstName + ' ' +emp.LastName as AddedByText
                    from EstimatorNote En
                    left join Employee emp on emp.UserId = en.AddedBy
                    where En.CompanyId = 'c7e72006-6edf-4b5a-8589-bfd1b2dae7ba' and En.EstimatorId = '649'|System.Data.SqlClient.SqlException (0x80131904): Invalid object name 'EstimatorNote'.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)
   at System.Data.Common.DbDataAdapter.FillInternal(DataSet dataset, DataTable[] datatables, Int32 startRecord, Int32 maxRecords, String srcTable, IDbCommand command, CommandBehavior behavior)
   at System.Data.Common.DbDataAdapter.Fill(DataSet dataSet, Int32 startRecord, Int32 maxRecords, String srcTable, IDbCommand command, CommandBehavior behavior)
   at System.Data.Common.DbDataAdapter.Fill(DataSet dataSet, String srcTable)
   at HS.Framework.DataAccess.BaseDataAccess.GetDataSet(SqlCommand command, String tablename) in D:\USA Project\DFW Security\HS.Framework\DataAccess\BaseDataAccess.cs:line 439
ClientConnectionId:dbcff8c8-ee25-4dc4-8c4b-f9de679bb18c
Error Number:208,State:1,Class:16
