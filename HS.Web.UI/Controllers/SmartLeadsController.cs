using HS.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using HS.Framework;
using HS.Web.UI.Helper;
using System.Configuration;
using System.IO;
using Rotativa;
using Rotativa.Options;
using System.Drawing;
using System.Net.Mime;
using System.Net.Mail;
using Newtonsoft.Json;
using System.Globalization;
using HS.Framework.Utils;
using HS.SMS;
using System.Drawing.Imaging;
using System.Collections;
using System.Net;
using System.Net.Http;
using RestSharp;
using System.Xml;
using HS.Entities.Custom;
using PermissionList = HS.Framework.UserPermissions;
using PermissionChecker = HS.Web.UI.Helper.PermissionHelper;
using HS.Econtract.eContractApi;
using System.ServiceModel;
using System.Text;
using System.Net.Http.Headers;
using EO.Internal;
using System.Text.RegularExpressions;
using System.Xml.Serialization;
using NLog;
using Plivo.Resource.Account;
using System.Threading;
using OS.AWS.S3;
using OS.AWS.S3.Services;
using System.Threading.Tasks;

namespace HS.Web.UI.Controllers
{
    public class SmartLeadsController : BaseController
    {
        public SmartLeadsController()
        {
            logger = LogManager.GetCurrentClassLogger();
        }

        public ActionResult SmartLeadSetupIndex(int? id)
        {
            if (!base.SetLayoutCommons())
            {
                return RedirectToAction("Logout", "Login");
            }
            if (id.HasValue)
            {
                ViewBag.id = id.Value;
            }
            return View();
        }
        [Authorize]
        [HttpPost]
        public JsonResult BINResult(string BIN)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool result = true;
            string text = "";
            string Message = "";
            try
            {

                GlobalSetting BINAPIKey = _Util.Facade.GlobalSettingsFacade.GetBINAPIKey(CurrentUser.CompanyId.Value);
                if (BINAPIKey == null || string.IsNullOrWhiteSpace(BINAPIKey.Value))
                {
                    result = false;
                    Message = "API key not found. Please contact system admin";
                }
                else
                {
                    if (!string.IsNullOrWhiteSpace(BIN) && BIN.Length == 6)
                    {
                        HttpWebRequest myReq = (HttpWebRequest)WebRequest.Create(string.Format("https://api.bincodes.com/bin/json/{0}/{1}/", BINAPIKey.Value, BIN));
                        myReq.ContentType = "application/json";
                        // here's how to set response content type:
                        Response.ContentType = "application/json"; // that's all 
                        var response = (HttpWebResponse)myReq.GetResponse();
                        using (var sr = new StreamReader(response.GetResponseStream()))
                        {
                            text = sr.ReadToEnd();
                        }
                    }
                }
            }
            catch (Exception e)
            {
                logger.Error(e);
                result = false;
                Message = "Internal error, please contact system admin.";
            }
            return Json(new { result = result, data = text, message = Message });
        }
        [Authorize]
        public ActionResult SmartLeadSetupPartial(int? id, string setup)
        {
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            Customer CustomerInfo = new Customer();
            string LeadCity = "";
            string LeadState = "";
            string TypeStreet = "";
            string Lappartment = "";
            if (id.HasValue)
            {
                ViewBag.LeadTitle = "";
                CustomerInfo = _Util.Facade.CustomerFacade.GetCustomersById(id.Value);
                CustomerExtended cusExt = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(CustomerInfo.CustomerId);
                CustomerCompany CCom = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerIdAndCompanyId(CustomerInfo.CustomerId, CurrentLoggedInUser.CompanyId.Value);
                if (!base.IsPermitted(UserPermissions.CustomerTicketPermission.DisableActionBtnatSmartSetup))
                {
                    ViewBag.DisableBtnCheck = "false";
                }
                else
                {
                    ViewBag.DisableBtnCheck = "true";
                }
                if (cusExt != null)
                {
                    ViewBag.IsPcAppId = cusExt.IsPcApplicationId;
                }
                if (CCom.IsLead)
                {
                    ViewBag.IsLead = 1;
                }
                else
                {
                    ViewBag.IsLead = 0;
                }
                if (CustomerInfo != null)
                {
                    if (CustomerInfo.Type == "Commercial")
                    {
                        ViewBag.LeadTitle = CustomerInfo.BusinessName + "(" + CustomerInfo.FirstName + " " + CustomerInfo.LastName + ")";
                    }
                    else
                    {
                        var FormattedName = CustomerInfo.FirstName + " " + CustomerInfo.LastName;
                        if (CustomerInfo.MiddleName != "")
                        {
                            FormattedName = CustomerInfo.FirstName + " " + CustomerInfo.MiddleName + " " + CustomerInfo.LastName;
                        }
                        ViewBag.LeadTitle = FormattedName;
                    }
                    if (CustomerInfo.City != "")
                    {
                        LeadCity = CustomerInfo.City + ", ";
                    }
                    if (CustomerInfo.State != "")
                    {
                        LeadState = CustomerInfo.State + " ";
                    }
                    if (CustomerInfo.StreetType != "-1")
                    {
                        TypeStreet = CustomerInfo.StreetType + " ";
                    }
                    if (!string.IsNullOrWhiteSpace(CustomerInfo.Appartment))
                    {
                        Lappartment = "#" + CustomerInfo.Appartment;
                    }
                    ViewBag.LeadAddress = AddressHelper.MakeAddress(CustomerInfo);
                    ViewBag.LeadGuid = CustomerInfo.CustomerId;
                }
                ViewBag.LeadSetupId = id.Value;
                ViewBag.setupClick = setup;
                ViewBag.LeadPackageDetail = _Util.Facade.PackageFacade.GetAllSmartLeadPackageDetailByLeadIdandCompanyId(CurrentLoggedInUser.CompanyId.Value, id.Value);
                ViewBag.LeadServiceDetail = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(CustomerInfo.CustomerId, CurrentLoggedInUser.CompanyId.Value);
                ViewBag.LeadEquipmentDetail = _Util.Facade.CustomerFacade.IsLeadAppointmentEquipmentExistCheckCustomerPackageEqp(CustomerInfo.CustomerId, CurrentLoggedInUser.CompanyId.Value);
                ViewBag.LeadEmergencyDetail = _Util.Facade.EmergencyContactFacade.GetAllLeadEmergencyDetailByLeadIdandCompanyId(CurrentLoggedInUser.CompanyId.Value, id.Value);
                ViewBag.Is_LeadEmergencyDetail_Summary = true;

                if (CustomerInfo.SmartSetUpStep == 5)
                {
                    ViewBag.FifthSetup = "FifthSetup";
                }
                else if (CustomerInfo.SmartSetUpStep == 4)
                {
                    ViewBag.FourthSetup = "FourthSetup";
                }
                else if (CustomerInfo.SmartSetUpStep == 3)
                {
                    ViewBag.ThirdSetup = "ThirdSetup";
                }
                else if (CustomerInfo.SmartSetUpStep == 2)
                {
                    ViewBag.SecondSetup = "SecondSetup";
                }
                else
                {
                    ViewBag.FirstSetup = "FirstSetup";
                }
                //if (((List<LeadPackageDetail>)ViewBag.LeadPackageDetail).Count > 0
                //    && ((List<CustomerPackageService>)ViewBag.LeadServiceDetail).Count > 0
                //    && ((List<CustomerPackageEqp>)ViewBag.LeadEquipmentDetail).Count > 0
                //    && ((List<LeadEmergencyDetail>)ViewBag.LeadEmergencyDetail).Count == 2
                //    && (!string.IsNullOrWhiteSpace(CustomerInfo.ContractTeam)))
                //{
                //    ViewBag.FifthSetup = "FifthSetup";
                //}
                //if (((List<LeadPackageDetail>)ViewBag.LeadPackageDetail).Count > 0
                //    && ((List<CustomerPackageService>)ViewBag.LeadServiceDetail).Count > 0
                //    && ((List<CustomerPackageEqp>)ViewBag.LeadEquipmentDetail).Count > 0
                //    && ((List<LeadEmergencyDetail>)ViewBag.LeadEmergencyDetail).Count > 0
                //    && (!string.IsNullOrWhiteSpace(CustomerInfo.ContractTeam)))
                //{
                //    ViewBag.FourthSetup = "FourthSetup";
                //}
                //else if (((List<LeadPackageDetail>)ViewBag.LeadPackageDetail).Count > 0 && ((List<CustomerPackageService>)ViewBag.LeadServiceDetail).Count > 0 && ((List<CustomerPackageEqp>)ViewBag.LeadEquipmentDetail).Count > 0)
                //{
                //    ViewBag.ThirdSetup = "ThirdSetup";
                //}
                //else if (((List<LeadPackageDetail>)ViewBag.LeadPackageDetail).Count > 0 && ((List<CustomerPackageService>)ViewBag.LeadServiceDetail).Count > 0)
                //{
                //    ViewBag.SecondSetup = "SecondSetup";
                //}
                //else
                //{
                //    ViewBag.FirstSetup = "FirstSetup";
                //}
                ViewBag.leademail = CustomerInfo.EmailAddress;
                if (CustomerInfo.TransferCustomerId != null && CustomerInfo.TransferCustomerId.HasValue && CustomerInfo.TransferCustomerId.Value > 0)
                {
                    //[Shariful-31-10-19]
                    //var objtransfercus = _Util.Facade.CustomerFacade.GetCustomerById(CustomerInfo.TransferCustomerId.Value);
                    //[~Shariful-31-10-19]
                    //[Shariful2-31-10-19]
                    var objtransfercus = _Util.Facade.CustomerFacade.GetCustomersById(CustomerInfo.TransferCustomerId.Value);
                    //[~Shariful2-31-10-19]
                    if (objtransfercus != null)
                    {
                        CustomerInfo.TransferCustomerName = objtransfercus.DisplayName;
                    }
                }
            }
            var refcusobj = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(CustomerInfo.MoveCustomerId);
            if (refcusobj != null)
            {
                CustomerInfo.MovedCustomerName = !string.IsNullOrWhiteSpace(refcusobj.DBA) ? refcusobj.DBA : !string.IsNullOrWhiteSpace(refcusobj.BusinessName) ? refcusobj.BusinessName : refcusobj.FirstName + " " + refcusobj.LastName;
                CustomerInfo.MovedCustomerId = refcusobj.Id;
            }
            else
            {
                CustomerInfo.MovedCustomerId = 0;
            }
            bool ConvertToSaleGlobal = false;
            var ConvertToSaleGlobalObj = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByOnlyKey("ConvertToSaleButtonCondition");
            if (ConvertToSaleGlobalObj != null)
            {
                ConvertToSaleGlobal = Convert.ToBoolean(ConvertToSaleGlobalObj.Value);
            }
            ViewBag.ConvertToSaleGlobal = ConvertToSaleGlobal;
            ViewBag.ContractType = _Util.Facade.LookupFacade.GetDropdownsByKey("ContractTypeSummary");

            #region Contrcat Type
            CustomerExtended cusEx = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(CustomerInfo.CustomerId);
            if (cusEx != null)
            {

                ViewBag.ContractType_customer = cusEx.ContractType;
            }
            #endregion

            

            return PartialView("SmartLeadSetupPartial", CustomerInfo);
        }
        public ActionResult AggrementQstn()
        {
            return PartialView("AggrementQstn");
        }
        public ActionResult LoadAggrementQstn()
        {
            List<AgreementQuestion> agreementQuestions = new List<AgreementQuestion>();
            agreementQuestions = _Util.Facade.CustomerFacade.GetAllAgreementQstn();
            return PartialView("LoadAggrementQstn", agreementQuestions);
        }
        public ActionResult AddAggrementQstn(int? Id)
        {
            AgreementQuestion AgreQstn = new AgreementQuestion();
            if (Id > 0)
            {
                AgreQstn = _Util.Facade.CustomerFacade.GetAgreementQuestionById(Id.Value);
            }

            return View(AgreQstn);
        }

        public JsonResult SaveAggrementQstn(AgreementQuestion agreementQuestion)
        {
            var result = false;

            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;

            AgreementQuestion agreement = new AgreementQuestion();
            if (CurrentUser == null)
            {
                return Json(result);
            }
            if (agreementQuestion.Id > 0)
            {
                agreement = _Util.Facade.CustomerFacade.GetAgreementQuestionById(agreementQuestion.Id);
                agreement.Title = agreementQuestion.Title;
                agreement.SiteType = agreementQuestion.SiteType;
                //agreement.Grade = agreement.Grade;


                try
                {

                    _Util.Facade.CustomerFacade.UpdateAgreementQstn(agreement);
                    result = true;
                }
                catch (Exception ex)
                {
                    logger.Error(ex);
                    result = false;
                }
            }
            else
            {
                agreement.Title = agreementQuestion.Title;
                agreement.SiteType = agreementQuestion.SiteType;


                try
                {
                    _Util.Facade.CustomerFacade.InsertAgreementQstn(agreement);
                    result = true;
                }
                catch (Exception ex)
                {
                    logger.Error(ex);
                    result = false;
                }
            }
            return Json(result);
        }

        [Authorize]
        [HttpPost]
        public JsonResult DeleteAgreementQstn(int Id)
        {
            var res = _Util.Facade.CustomerFacade.DeleteAgreementQstn(Id);
            if (res > 0)
            {
                return Json(new { result = res, message = "Credit Grade deleted successfully." });
            }
            else
            {
                return Json(new { result = res, message = "An error occured." });
            }

        }
        [Authorize]
        public ActionResult SmartPackagePartial(int? id)
        {
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            List<SelectListItem> EmptyList = new List<SelectListItem>();
            EmptyList.Add(new SelectListItem()
            {
                Text = "Please Select One",
                Value = "-1"
            });
            ViewBag.InstallTypeList = EmptyList;
            ViewBag.ManufacturerList = EmptyList;
            List<SmartPackageDropdownList> dropdownList = new List<SmartPackageDropdownList>();
            dropdownList.Add(new SmartPackageDropdownList()
            {
                Text = "Please Select One",
                Value = "-1",
                MinCredit = -1
            });

            #region SystemType
            List<SelectListItem> SystemTypeList = new List<SelectListItem>();
            SystemTypeList.Add(new SelectListItem()
            {
                Text = "Please Select One",
                Value = "-1"
            });
            SystemTypeList.AddRange(_Util.Facade.PackageFacade.GetAllSmartSystemType(CurrentLoggedInUser.CompanyId.Value).OrderBy(s => s.Name).Select(x =>
                             new SelectListItem()
                             {
                                 Text = x.Name.ToString(),
                                 Value = x.Id.ToString()
                             }).ToList());
            ViewBag.SystemTypeList = SystemTypeList.OrderBy(x => x.Text != "Please Select One").ThenBy(x => x.Text).ToList();
            #endregion


            ViewBag.CreditScore = "0";
            PackageCustomer PackageCustomermodel = new PackageCustomer();
            if (id.HasValue)
            {
                Customer Customer = _Util.Facade.CustomerFacade.GetCustomersById(id.Value);
                ViewBag.CustomerId = Customer.CustomerId;

                #region validations
                if (Customer == null)
                {
                    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
                }
                //CustomerCompany cc = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(Customer.Id);
                //if (cc == null || cc.IsLead == false)
                //{
                //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
                //}
                #endregion
                #region GetBounceStatus
                CustomerExtended cusExtended = new CustomerExtended();
                cusExtended = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(Customer.CustomerId);
                ViewBag.BounceStatus = "";
                if (cusExtended != null)
                {
                    ViewBag.BounceStatus = cusExtended.BounceStatus;
                }
                #endregion
                ViewBag.CustomerIDForPackageInstall = id.Value;
                var LeadGuidId = Customer.CustomerId;
                ViewBag.CreditScore = Customer.CreditScoreValue;

                PackageCustomermodel = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(LeadGuidId, CurrentLoggedInUser.CompanyId.Value);
                ViewBag.PackageId = "";
                if (PackageCustomermodel != null)
                {
                    ViewBag.PackageId = PackageCustomermodel.PackageId;
                }
                if (PackageCustomermodel != null && PackageCustomermodel.SmartSystemTypeId != null)
                {
                    #region InstallType
                    List<SelectListItem> InstallTypeList = new List<SelectListItem>();
                    InstallTypeList.Add(new SelectListItem()
                    {
                        Text = "Please Select One",
                        Value = "-1"
                    });
                    InstallTypeList.AddRange(_Util.Facade.PackageFacade.GetInstallTypeByCompanyIdAndSystemId(CurrentLoggedInUser.CompanyId.Value, Convert.ToInt32(PackageCustomermodel.SmartSystemTypeId)).Select(x =>
                        new SelectListItem()
                        {
                            Text = x.Name.ToString(),
                            Value = x.Id.ToString()
                        }).ToList());
                    ViewBag.InstallTypeList = InstallTypeList.OrderBy(x => x.Text != "Please Select One").ThenBy(x => x.Text).ToList();
                    #endregion

                    #region Manufacturers
                    List<SelectListItem> ManufacturerList = new List<SelectListItem>();
                    ManufacturerList.Add(new SelectListItem()
                    {
                        Text = "Please Select",
                        Value = "-1"
                    });
                    ManufacturerList.AddRange(_Util.Facade.PackageFacade.GetManufacturerBySystemId(Convert.ToInt32(PackageCustomermodel.SmartSystemTypeId)).Select(x =>
                        new SelectListItem()
                        {
                            Text = x.Name.ToString(),
                            Value = x.ManufacturerId.ToString()
                        }).ToList());
                    ViewBag.ManufacturerList = ManufacturerList.OrderBy(x => x.Text != "Please Select").ThenBy(x => x.Text).ToList();
                    #endregion
                }
                if (PackageCustomermodel != null && PackageCustomermodel.SmartSystemTypeId != null && PackageCustomermodel.SmartInstallTypeId != null)
                {
                    var CurrentCurrency = _Util.Facade.GlobalSettingsFacade.GetCurrentCurrencyByCompanyId(CurrentLoggedInUser.CompanyId.Value);
                    List<SmartPackageEquipmentService> PackageServiceList = _Util.Facade.SmartPackageFacade.GetAllSmartPackageEquipmentService(CurrentLoggedInUser.CompanyId.Value, "Service");

                    List<SmartPackage> PackageListItem = _Util.Facade.PackageFacade.GetAllPackageListByCompanyIdSystemIdAndInstallTypeId(CurrentLoggedInUser.CompanyId.Value, Convert.ToInt32(PackageCustomermodel.SmartSystemTypeId), Convert.ToInt32(PackageCustomermodel.SmartInstallTypeId), PackageCustomermodel.ManufacturerId).ToList();
                    if (Customer.Type == "Residential")
                    {
                        PackageListItem = PackageListItem.Where(m => m.UserType == "Residential").ToList();
                    }
                    else if (Customer != null && Customer.Type == "Commercial")
                    {
                        PackageListItem = PackageListItem.Where(m => m.UserType == "Commercial").ToList();
                    }
                    List<SelectListItem> PackageList = new List<SelectListItem>();
                    PackageList.Add(new SelectListItem()
                    {
                        Text = "Please Select One",
                        Value = "-1"
                    });

                    foreach (var item in PackageListItem)
                    {
                        SmartPackageDropdownList smartDropdown = new SmartPackageDropdownList()
                        {
                            Text = ((string.IsNullOrWhiteSpace(item.PackageCode) || item.PackageCode == "-1") ? "" : string.Format("{0} -> ", item.PackageCode)) + item.PackageName.ToString() +
                            (PackageServiceList.Where(y => y.PackageId == item.PackageId).Sum(y => y.Price) == 0 ? "" : string.Format(" [{0}{1}]", CurrentCurrency, LabelHelper.FormatAmount(PackageServiceList.Where(y => y.PackageId == item.PackageId).Sum(y => y.Price)))),
                            Value = item.PackageId.ToString(),
                            MinCredit = item.MinCredit
                        };
                        dropdownList.Add(smartDropdown);
                    }
                    PackageCustomermodel.PackageDropdownList = dropdownList.OrderBy(x => x.Text != "Please Select One").ThenBy(x => x.Text).ToList();
                    //PackageList.AddRange(PackageListItem.Select(x =>
                    //    new SelectListItem()
                    //    {
                    //        Text = ((string.IsNullOrWhiteSpace(x.UserType) || x.UserType == "-1") ? "" : string.Format("{0} -> ", x.UserType)) + x.PackageName.ToString() +
                    //        (PackageServiceList.Where(y => y.PackageId == x.PackageId).Sum(y => y.Price) == 0 ? "" : string.Format(" [{0}{1}]", CurrentCurrency, LabelHelper.FormatAmount(PackageServiceList.Where(y => y.PackageId == x.PackageId).Sum(y => y.Price)))),
                    //        //(x.ActivationFee == 0 ? "" : string.Format(" [{0}{1}]", CurrentCurrency, LabelHelper.FormatAmount(x.ActivationFee))),
                    //        Value = x.PackageId.ToString()
                    //    }).ToList());
                    //ViewBag.PackageList = PackageList;
                }
                else
                {
                    PackageCustomermodel = new PackageCustomer();
                    PackageCustomermodel.PackageDropdownList = dropdownList.OrderBy(x => x.Text != "Please Select One").ThenBy(x => x.Text).ToList();
                }

                #region Credit Check Info
                CustomerCreditCheck creditCheck = new CustomerCreditCheck();
                List<CustomerCreditCheck> CreditCheckList = _Util.Facade.CustomerFacade.GetAllCustomerCreditCheckByCustomerId(Customer.CustomerId);
                if (CreditCheckList != null)
                {
                    creditCheck = CreditCheckList.FirstOrDefault();
                }
                if (creditCheck != null)
                {
                    ViewBag.HasCreditCheck = "true";
                }
                else
                {
                    ViewBag.HasCreditCheck = "false";
                }
                var BrinksCreditCheck = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentLoggedInUser.CompanyId.Value, "BrinksCreditCheck");
                if (BrinksCreditCheck != null)
                {
                    ViewBag.BrinksCreditCheck = BrinksCreditCheck.Value;
                }

                #endregion

                #region HasDifferentCreditContact
                bool HasDiffrentCreditContact = _Util.Facade.AdditionalContactFacade.HasUsedSecondaryCreditCheck(Customer.CustomerId);
                ViewBag.HasDiffrentCreditContact = HasDiffrentCreditContact;
                #endregion
            }
            return PartialView("SmartPackagePartial", PackageCustomermodel);
        }

        public ActionResult UpdateActivationFee(PackageCustomer packageCustomer)
        {
            bool result = false;
            var oldPackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(packageCustomer.CustomerId);
            if (oldPackageCustomer != null)
            {
                oldPackageCustomer.ActivationFee = packageCustomer.ActivationFee;
                result = _Util.Facade.PackageFacade.UpdatePackageCustomer(oldPackageCustomer);
            }
            return Json(result);
        }

        public ActionResult UpdateLabourFee(PackageCustomer packageCustomer)
        {
            bool result = false;
            var oldPackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(packageCustomer.CustomerId);
            if (oldPackageCustomer != null)
            {
                oldPackageCustomer.LabourFee = packageCustomer.LabourFee;
                result = _Util.Facade.PackageFacade.UpdatePackageCustomer(oldPackageCustomer);
            }
            return Json(result);
        }
        public ActionResult UpdateNonConformingFee(PackageCustomer packageCustomer)
        {
            bool result = false;
            var oldPackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(packageCustomer.CustomerId);
            if (oldPackageCustomer != null)
            {
                oldPackageCustomer.NonConformingFee = packageCustomer.NonConformingFee;
                result = _Util.Facade.PackageFacade.UpdatePackageCustomer(oldPackageCustomer);
            }
            return Json(result);
        }
        public ActionResult LoadSmartLeadPackageEquipments(Guid PackageId, int LeadId)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (currentLoggedIn == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            double? MinCredit = 0;
            string NonConfirmingFee = "false";
            LeadSmartPackageModelEquipmentList model = new LeadSmartPackageModelEquipmentList();
            if (currentLoggedIn != null)
            {
                if (PackageId != Guid.Empty && LeadId > 0)
                {
                    SmartPackage package = _Util.Facade.SmartPackageFacade.GetPackageByPackageIdAndCompanyId(PackageId, currentLoggedIn.CompanyId.Value);

                    Guid LeadCustomerId = new Guid();
                    Customer LeadInformations = _Util.Facade.CustomerFacade.GetCustomersById(LeadId);

                    
                    if (LeadInformations != null)
                    {
                        LeadCustomerId = LeadInformations.CustomerId;
                        model.PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(LeadInformations.CustomerId);
                    }
                    List<SmartPackageEquipmentService> PackageIncludeEquipmentServiceList = _Util.Facade.PackageFacade.GetAllSmartPackageEquipmentServiceByPackageIdAndCompanyId(PackageId, currentLoggedIn.CompanyId.Value);

                    List<CustomerPackageEqp> SelectedPackageEquipments = _Util.Facade.PackageFacade.GetCustomerPackageEqpListbyCustomerId(currentLoggedIn.CompanyId.Value, LeadCustomerId);


                    model.PackageDeviceEquipmentList = PackageIncludeEquipmentServiceList.Where(m => m.Type == "Device").ToList();
                    model.PackageIncludeEquipmentList = PackageIncludeEquipmentServiceList.Where(m => m.Type == "Include").ToList();
                    model.PackageOptionalEquipmentList = PackageIncludeEquipmentServiceList.Where(m => m.Type == "Optional").ToList();
                    model.PackageServiceList = PackageIncludeEquipmentServiceList.Where(m => m.Type == "Service").ToList();
                    model.PackageMaxDeviceEquipmentLimit = _Util.Facade.PackageFacade.GetPackageOptionEqpMaxLimitBySmartPackageIdAndCompanyId(PackageId, currentLoggedIn.CompanyId.Value);
                    model.SmartPackageDetails = _Util.Facade.SmartPackageFacade.GetPackageByPackageIdAndCompanyId(PackageId, currentLoggedIn.CompanyId.Value);
                    if (model.SmartPackageDetails != null && model.SmartPackageDetails.ActivationFee == null)
                    {
                        model.SmartPackageDetails.ActivationFee = 0;
                    }
                    if (SelectedPackageEquipments != null && SelectedPackageEquipments.Count() > 0)
                    {
                        model.SelectedDeviceEqpList = SelectedPackageEquipments.Where(x => x.IsDevice).ToList();
                        model.SelectedOptionalEqpList = SelectedPackageEquipments.Where(x => x.IsOptionalEqp).ToList();
                        model.SelectedServiceEqpList = SelectedPackageEquipments.Where(x => x.IsServiceEquipment == true).ToList();
                    }

                    foreach (var item in model.PackageServiceList)
                    {
                        item.ServiceEquipments = _Util.Facade.SmartPackageFacade.GetSmartPackageEquipmentServiceEquipmentBySmartPackageEquipmentServiceId(item.SmartPackageEquipmentServiceId);
                    }
                    if (model.PackageCustomerDetails == null)
                    {
                        model.PackageCustomerDetails = new PackageCustomer();
                        model.PackageCustomerDetails.ActivationFee = 0;
                        model.PackageCustomerDetails.NonConformingFee = 0;
                    }

                    #region NonConfirming fee


                    var GradeMaxValue = 0;
                    if (!string.IsNullOrEmpty(LeadInformations.CreditScore) && LeadInformations.CreditScore != "-1")
                    {
                        int GradeId = 0;
                        int.TryParse(LeadInformations.CreditScore, out GradeId);
                        CreditScoreGrade creditGrade = _Util.Facade.CustomerFacade.GetCreditScoreGradeById(GradeId);
                        if (creditGrade != null)
                        {
                            if (creditGrade.MaxScore.HasValue)
                            {
                                GradeMaxValue = creditGrade.MaxScore.Value;
                            }


                        }
                    }
                    else
                    {
                        if (LeadInformations.CreditScoreValue.HasValue)
                        {
                            GradeMaxValue = LeadInformations.CreditScoreValue.Value;
                        }

                    }
                    if (package != null && package.MinCredit.HasValue)
                    {
                        MinCredit = package.MinCredit;
                    }
                    if (GradeMaxValue >= MinCredit && MinCredit != 0)
                    {
                        NonConfirmingFee = "true";
                        model.PackageCustomerDetails.NonConformingFee = 0;
                    }
                    #endregion
                }
                else
                {
                    model.PackageDeviceEquipmentList = new List<SmartPackageEquipmentService>();
                    model.PackageIncludeEquipmentList = new List<SmartPackageEquipmentService>();
                    model.PackageOptionalEquipmentList = new List<SmartPackageEquipmentService>();
                    model.PackageServiceList = new List<SmartPackageEquipmentService>();
                    model.SelectedDeviceEqpList = new List<CustomerPackageEqp>();
                    model.SelectedOptionalEqpList = new List<CustomerPackageEqp>();
                    model.SelectedServiceEqpList = new List<CustomerPackageEqp>();
                    model.PackageMaxDeviceEquipmentLimit = 0;
                    model.PackageMMRRange = new MMRRange();
                    model.SmartPackageDetails = new SmartPackage();
                    model.PackageCustomerDetails = new PackageCustomer();
                }
            }
            ViewBag.NonConfirmingfee = NonConfirmingFee;
            return PartialView("_LoadSmartLeadPackageEquipments", model);
        }

        [Authorize]
        [HttpPost]
        public JsonResult DeleteCustomerAppointmentEquipment(int id)
        {
            var message = "Removed successfully.";
            CustomerPackageEqp cusEqp = _Util.Facade.PackageFacade.GetCustomerPackageEqpById(id);

            Customer cus = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(cusEqp.CustomerId);
            var result = _Util.Facade.PackageFacade.DeleteCustomerPackageEqpById(id);
            if (!result)
            {
                message = "Equipment Not Found.";
            }
            TotalCalculatePayAmount totalpay = CalculateTotalPayAmmount(cus.Id);
            return Json(new { result = true, message = message, strTotalAmt = totalpay.TotalAmount, strCollectedAmt = totalpay.CollectToday, strCreditCardPayment = LabelHelper.FormatAmount(totalpay.CollectCC), strAchPayment = LabelHelper.FormatAmount(totalpay.CollectAch), strCashPayment = LabelHelper.FormatAmount(totalpay.CollectCash), strCheckPayment = LabelHelper.FormatAmount(totalpay.CollectCheck), Currency = totalpay.CurrentCurrency });

        }

        public ActionResult SmartServicePartial(int? LeadId, Guid? Appointmentid)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            bool islead = false;
            if (currentLoggedIn == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }

            List<SystemTypeServiceMap> ServiceList = new List<SystemTypeServiceMap>();
            List<PackageInclude> packagelist = new List<PackageInclude>();
            List<CustomerPackageService> LeadEquipmentExist = new List<CustomerPackageService>();
            AddSmartLeadEquipment model = new AddSmartLeadEquipment();
            if (LeadId.HasValue)
            {
                var CustomerInfo = _Util.Facade.CustomerFacade.GetCustomersById(LeadId.Value);

                ViewBag.EquipmentPartialLeadId = LeadId;
                ViewBag.EquipmentPartialLeadGuId = CustomerInfo.CustomerId;
                LeadEquipmentExist = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(CustomerInfo.CustomerId, currentLoggedIn.CompanyId.Value);
                model.PackageServiceList = LeadEquipmentExist;
                var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(CustomerInfo.CustomerId);

                if (PackageCustomerDetails != null && !string.IsNullOrEmpty(PackageCustomerDetails.SmartSystemTypeVal) && !PermissionChecker.IsPermitted(PermissionList.LeadPermissions.ShowAllServiceInSmartSetup))
                {
                    ServiceList = _Util.Facade.SmartPackageFacade.GetAllSystemTypeServiceMap().Where(m => m.SystemType == PackageCustomerDetails.SmartSystemTypeVal && m.PackageId == PackageCustomerDetails.PackageId).ToList();

                    //if (!string.IsNullOrEmpty(PackageCustomerDetails.PackageCode) && PackageCustomerDetails.PackageCode.IndexOf('-') > 0)
                    //{
                    //    var PackageCodeExtension = PackageCustomerDetails.PackageCode.Split('-')[1];
                    //    if (PackageCodeExtension == "WSF" || PackageCodeExtension == "AO")
                    //    {
                    //        ServiceList = ServiceList.Where(m => m.Tag != null && m.Tag.Contains(PackageCodeExtension)).ToList();
                    //    }
                    //}
                }
                else
                {
                    ServiceList = _Util.Facade.SmartPackageFacade.GetAllServiceForSmartSetUp();
                }
            }
            else
            {
                ViewBag.EquipmentPartialLeadId = 0;
            }
            ViewBag.ServiceList = ServiceList;
            return PartialView("SmartServicePartialNew", model);
        }
        [Authorize]
        [HttpPost]
        public JsonResult AddCustomerPackageService(CustomerPackageService Service)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            CustomerPackageService customerPackageService = new CustomerPackageService();
            bool islead = false;
            var LeadDetails = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(Service.CustomerId);
            var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(LeadDetails.CustomerId, CurrentUser.CompanyId.Value);
            CustomerCompany CustomerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerIdAndCompanyId(LeadDetails.CustomerId, CurrentUser.CompanyId.Value);
            if (CustomerCompany != null)
            {
                islead = CustomerCompany.IsLead;
            }
            #region validations
            if (Service.EquipmentId == Guid.Empty)
            {
                return Json(new { result = false, message = "Service not found." });
            }
            #endregion

            if (LeadDetails != null && PackageCustomerDetails != null)
            {
                Equipment ServiceToAdd = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentId(Service.EquipmentId);

                #region Validations
                if (ServiceToAdd == null)
                {
                    return Json(new { result = false, message = "Service not found." });
                }
                #endregion

                //List<CustomerPackageService> CustomerPackageServiceList = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(LeadDetails.CustomerId, CurrentUser.CompanyId.Value);
                //if (CustomerPackageServiceList.Where(x => x.EquipmentId == Service.EquipmentId).Count() > 0)
                //{
                //    return Json(new { result = false, message = "Service already added." });
                //}
                #region Add Customer Package Service
                customerPackageService = new CustomerPackageService()
                {
                    CompanyId = CurrentUser.CompanyId.Value,
                    CustomerId = Service.CustomerId,
                    PackageId = PackageCustomerDetails.PackageId,
                    EquipmentId = Service.EquipmentId,
                    MonthlyRate = Service.MonthlyRate,
                    DiscountRate = Service.DiscountRate,
                    Total = Service.Total,
                    ManufacturerId = Service.ManufacturerId,
                    LocationId = Service.LocationId,
                    TypeId = Service.TypeId,
                    ModelId = Service.ModelId,
                    FinishId = Service.FinishId,
                    CapacityId = Service.CapacityId,
                };
                customerPackageService.Id = _Util.Facade.PackageFacade.InsertCustomerPackageService(customerPackageService);
                #endregion

                if (customerPackageService.Id > 0)
                {

                    #region Add Added equipments for service

                    List<ServiceEquipment> ServiceEquipmentList = _Util.Facade.EquipmentFacade.GetServiceEquipmentByServiceIdAndCompanyId(CurrentUser.CompanyId.Value, Service.EquipmentId);
                    foreach (var item in ServiceEquipmentList)
                    {
                        CustomerPackageEqp customerPackage = new CustomerPackageEqp()
                        {
                            CompanyId = CurrentUser.CompanyId.Value,
                            CustomerId = Service.CustomerId,
                            PackageId = PackageCustomerDetails.PackageId,
                            EquipmentId = item.EquipmentId,
                            IsIncluded = false,
                            IsDevice = false,
                            IsOptionalEqp = false,
                            IsServiceEquipment = true,
                            Quantity = item.Quantity,
                            DiscountUnitPricce = 0,
                            DiscountPckage = 0,
                            UnitPrice = (item.RetailPrice.HasValue && item.RetailPrice / item.Quantity > 0) ? (item.RetailPrice / item.Quantity) : 0,
                            Total = item.RetailPrice.HasValue ? item.RetailPrice : 0,
                            ServiceId = Service.EquipmentId,
                        };
                        _Util.Facade.PackageFacade.InsertCustomerPackageEqp(customerPackage);
                    }
                    #endregion

                    #region Check match in equipment, if match found add to CustomerPackageEqp
                    CustomerPackageService CPS = _Util.Facade.PackageFacade.GetCustomerPackageServiceById(customerPackageService.Id);
                    if (CPS != null)
                    {
                        //Location]//Type]//Model]//Finish]//Capacity]

                        if (!string.IsNullOrWhiteSpace(CPS.Location)
                            || !string.IsNullOrWhiteSpace(CPS.Type)
                            || !string.IsNullOrWhiteSpace(CPS.Model)
                            || !string.IsNullOrWhiteSpace(CPS.Finish)
                            || !string.IsNullOrWhiteSpace(CPS.Capacity)
                            || CPS.ManufacturerId != Guid.Empty)
                        {

                            List<Equipment> eqpList = _Util.Facade.EquipmentFacade.GetEquipmentByOptions(CPS.Location, CPS.Type, CPS.Model, CPS.Finish, CPS.Capacity, CPS.ManufacturerId);
                            if (eqpList != null && eqpList.Count() > 0)
                            {
                                foreach (var eqp in eqpList)
                                {
                                    if (Service.ChargeForFirstEquipment.HasValue && Service.ChargeForFirstEquipment.Value == false)
                                    {
                                        CustomerPackageEqp customerPackage = new CustomerPackageEqp()
                                        {
                                            CompanyId = CurrentUser.CompanyId.Value,
                                            CustomerId = Service.CustomerId,
                                            PackageId = PackageCustomerDetails.PackageId,
                                            EquipmentId = eqp.EquipmentId,
                                            IsIncluded = false,
                                            IsDevice = false,
                                            IsOptionalEqp = false,
                                            IsServiceEquipment = true,
                                            Quantity = 1,
                                            UnitPrice = eqp.Retail,
                                            DiscountUnitPricce = eqp.Retail,
                                            DiscountPckage = eqp.Retail,
                                            Total = 0,
                                            ServiceId = Service.EquipmentId,
                                            IsNonCommissionable = true
                                        };
                                        _Util.Facade.PackageFacade.InsertCustomerPackageEqp(customerPackage);
                                    }
                                    else
                                    {
                                        CustomerPackageEqp customerPackage = new CustomerPackageEqp()
                                        {
                                            CompanyId = CurrentUser.CompanyId.Value,
                                            CustomerId = Service.CustomerId,
                                            PackageId = PackageCustomerDetails.PackageId,
                                            EquipmentId = eqp.EquipmentId,
                                            IsIncluded = false,
                                            IsDevice = false,
                                            IsOptionalEqp = false,
                                            IsServiceEquipment = true,
                                            Quantity = 1,
                                            UnitPrice = eqp.Retail,
                                            DiscountUnitPricce = 0,
                                            DiscountPckage = 0,
                                            Total = eqp.Retail,
                                            ServiceId = Service.EquipmentId,
                                        };
                                        _Util.Facade.PackageFacade.InsertCustomerPackageEqp(customerPackage);
                                    }
                                }

                            }
                        }
                    }
                    #endregion

                }

            }
            Customer cus = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(Service.CustomerId);
            TotalCalculatePayAmount totalpay = CalculateTotalPayAmmount(cus.Id);
            return Json(new { result = true, message = "Service added successfully.", strTotalAmt = totalpay.TotalAmount, strCollectedAmt = totalpay.CollectToday, strCreditCardPayment = totalpay.CollectCC, strAchPayment = totalpay.CollectAch, strCashPayment = totalpay.CollectCash, strCheckPayment = totalpay.CollectCheck, Currency = totalpay.CurrentCurrency });

        }
        [Authorize]
        public ActionResult ShowServiceOptions(Guid ServiceId)
        {
            ServiceDetailInfoView ServiceView = _Util.Facade.InventoryFacade.GetServiceDetailInfoViewByServiceId(ServiceId);
            if (ServiceView == null)
            {
                return null;
            }
            return PartialView(ServiceView);
        }
        [Authorize]
        [HttpPost]
        public JsonResult GetOptionsListForService(ServiceMap ServiceMap)
        {

            List<ServiceMap> MapList = _Util.Facade.InventoryFacade.GetServiceMapListByServiceMap(ServiceMap);
            List<SelectListItem> MapSelect = new List<SelectListItem>();

            if (MapList != null && MapList.Count() > 0)
            {
                if (ServiceMap.SelectedTypeName == "Manufacturer")
                {
                    MapSelect = MapList.GroupBy(x => new { x.ManufacturerId, x.Manufacturer }, (key, group) =>
                    new SelectListItem { Value = key.ManufacturerId.ToString(), Text = key.Manufacturer }).ToList();
                    //MapSelect = group x by new { x.Column1, x.Column2 }

                    MapSelect.Insert(0, new SelectListItem()
                    {
                        Text = "Select Manufacturer",
                        Value = "00000000-0000-0000-0000-000000000000"
                    });
                }
                else if (ServiceMap.SelectedTypeName == "Location")
                {
                    MapSelect = MapList.GroupBy(x => new { x.LocationId, x.Location }, (key, group) =>
                   new SelectListItem { Value = key.LocationId.ToString(), Text = key.Location }).ToList();
                    MapSelect.Insert(0, new SelectListItem()
                    {
                        Text = "Select Location",
                        Value = "00000000-0000-0000-0000-000000000000"
                    });
                }
                else if (ServiceMap.SelectedTypeName == "Type")
                {
                    MapSelect = MapList.GroupBy(x => new { x.TypeId, x.Type }, (key, group) =>
                  new SelectListItem { Value = key.TypeId.ToString(), Text = key.Type }).ToList();
                    MapSelect.Insert(0, new SelectListItem()
                    {
                        Text = "Select Type",
                        Value = "00000000-0000-0000-0000-000000000000"
                    });
                }
                else if (ServiceMap.SelectedTypeName == "Model")
                {
                    MapSelect = MapList.GroupBy(x => new { x.ModelId, x.Model }, (key, group) =>
                  new SelectListItem { Value = key.ModelId.ToString(), Text = key.Model }).ToList();
                    MapSelect.Insert(0, new SelectListItem()
                    {
                        Text = "Select Model",
                        Value = "00000000-0000-0000-0000-000000000000"
                    });
                }
                else if (ServiceMap.SelectedTypeName == "Finish")
                {
                    MapSelect = MapList.GroupBy(x => new { x.FinishId, x.Finish }, (key, group) =>
                   new SelectListItem { Value = key.FinishId.ToString(), Text = key.Finish }).ToList();
                    MapSelect.Insert(0, new SelectListItem()
                    {
                        Text = "Select Finish",
                        Value = "00000000-0000-0000-0000-000000000000"
                    });
                }
                else if (ServiceMap.SelectedTypeName == "Capacity")
                {
                    MapSelect = MapList.GroupBy(x => new { x.CapacityId, x.Capacity }, (key, group) =>
                   new SelectListItem { Value = key.CapacityId.ToString(), Text = key.Capacity }).ToList();

                    MapSelect.Insert(0, new SelectListItem()
                    {
                        Text = "Select Capacity",
                        Value = "00000000-0000-0000-0000-000000000000"
                    });
                }

                //List<Equipment> eqpList = _Util.Facade.EquipmentFacade.GetEquipmentByOptions(ServiceMap.Location, ServiceMap.Type, ServiceMap.Model, ServiceMap.Finish, ServiceMap.Capacity, ServiceMap.ManufacturerId);


                return Json(new { result = true, message = "Successful.", SelectData = MapSelect, /*MatchedEquipmentCount = eqpList.Count()*/ });
            }
            return Json(new { result = false, message = "Combination Setup Required." });
        }
        [Authorize]
        [HttpPost]
        public JsonResult GetMatchedEquipmentCountForService(ServiceMap ServiceMap)
        {

            if (ServiceMap.ManufacturerId == Guid.Empty && ServiceMap.LocationId == Guid.Empty
            && ServiceMap.TypeId == Guid.Empty && ServiceMap.ModelId == Guid.Empty && ServiceMap.FinishId == Guid.Empty
            && ServiceMap.CapacityId == Guid.Empty
            //&&!string.IsNullOrWhiteSpace(ServiceMap.Location )
            //&& !string.IsNullOrWhiteSpace(ServiceMap.Type) && !string.IsNullOrWhiteSpace(ServiceMap.Model)
            //&& !string.IsNullOrWhiteSpace(ServiceMap.Finish)&& !string.IsNullOrWhiteSpace(ServiceMap.Capacity)
            )
            {
                return Json(new { result = true, message = "Successful.", MatchedEquipmentCount = 0 });
            }

            List<Equipment> eqpList = _Util.Facade.EquipmentFacade.GetEquipmentByOptions(ServiceMap.Location, ServiceMap.Type, ServiceMap.Model, ServiceMap.Finish, ServiceMap.Capacity, ServiceMap.ManufacturerId);
            return Json(new { result = true, message = "Successful.", MatchedEquipmentCount = eqpList.Count() });
        }

        [Authorize]
        [HttpPost]
        public JsonResult DeleteCustomerAppointmentService(int id)
        {
            CustomerPackageService cusService = _Util.Facade.PackageFacade.GetCustomerPackageServiceById(id);

            Customer cus = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(cusService.CustomerId);


            var message = "Deleted successfully.";
            var result = _Util.Facade.PackageFacade.DeleteCustomerPackageServiceById(id);
            if (!result)
            {
                message = "Not Found..";
            }
            else
            {
                _Util.Facade.PackageFacade.DeleteCustomerPackageEqpByCustomerIdServiceIdAndPackageId(cusService.CustomerId, cusService.EquipmentId, cusService.PackageId);
            }

            TotalCalculatePayAmount totalpay = CalculateTotalPayAmmount(cus.Id);
            return Json(new { result = true, message = message, strTotalAmt = totalpay.TotalAmount, strCollectedAmt = totalpay.CollectToday, strCreditCardPayment = totalpay.CollectCC, strAchPayment = totalpay.CollectAch, strCashPayment = totalpay.CollectCash, strCheckPayment = totalpay.CollectCheck, Currency = totalpay.CurrentCurrency });

        }

        [Authorize]
        public ActionResult SmartEquipmentPartial(int? LeadId)
        {

            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            bool islead = false;
            bool isFinanced = false;
            if (currentLoggedIn == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            List<PackageInclude> packagelist = new List<PackageInclude>();

            AddSmartLeadEquipment model = new AddSmartLeadEquipment();
            if (LeadId.HasValue)
            {
                var CustomerInfo = _Util.Facade.CustomerFacade.GetCustomersById(LeadId.Value);
                var CustomerExtendtedInfo = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(CustomerInfo.CustomerId);
                if (CustomerExtendtedInfo != null && CustomerExtendtedInfo.IsFinanced.HasValue)
                {
                    isFinanced = CustomerExtendtedInfo.IsFinanced.Value;
                }
                ViewBag.EquipmentPartialLeadId = LeadId;
                ViewBag.EquipmentPartialLeadGuId = CustomerInfo.CustomerId;

                List<CustomerPackageEqp> LeadEquipmentExist = _Util.Facade.CustomerFacade.IsLeadAppointmentEquipmentExistCheckCustomerPackageEqp(CustomerInfo.CustomerId, currentLoggedIn.CompanyId.Value);
                model.PackageEquipmentsList = LeadEquipmentExist;
            }
            else
            {
                ViewBag.EquipmentPartialLeadId = 0;
            }
            ViewBag.IsFinanced = isFinanced;
            return PartialView("SmartEquipmentPartial", model);
            // return PartialView("SmartEquipmentPartialNew", model);
        }

        public ActionResult PaymentPartial(int? PaymentLeadId)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (currentLoggedIn == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            PaymentInfo model = new PaymentInfo();
            if (PaymentLeadId.HasValue)
            {
                var objPaymentInfo = _Util.Facade.PaymentInfoFacade.GetPaymentInfoByCompanyIdandLeadId(currentLoggedIn.CompanyId.Value, PaymentLeadId.Value);
                var objPaymentInfo1 = _Util.Facade.PaymentInfoFacade.GetPaymentInfo1ByCompanyIdandLeadId(currentLoggedIn.CompanyId.Value, PaymentLeadId.Value);
                var objPaymentInfoEFT = _Util.Facade.PaymentInfoFacade.GetPaymentInfoEFTByCompanyIdandLeadId(currentLoggedIn.CompanyId.Value, PaymentLeadId.Value);
                var objPaymentInfoCredit = _Util.Facade.PaymentInfoFacade.GetPaymentInfoCreditTByCompanyIdandLeadId(currentLoggedIn.CompanyId.Value, PaymentLeadId.Value);
                var objPaymentInfoCheck = _Util.Facade.PaymentInfoFacade.GetPaymentInfoCheckByCompanyIdAndLeadId(currentLoggedIn.CompanyId.Value, PaymentLeadId.Value);
                var objPaymentInfoCash = _Util.Facade.PaymentInfoFacade.GetPaymentInfoCashByCompanyIdAndLeadId(currentLoggedIn.CompanyId.Value, PaymentLeadId.Value);

                if (objPaymentInfo != null && objPaymentInfo.BillMethod == "ACH")
                {
                    model = objPaymentInfo;
                }
                else if (objPaymentInfo1 != null && objPaymentInfo1.BillMethod == "Debit Card")
                {
                    model = objPaymentInfo1;
                }
                else if (objPaymentInfoEFT != null && objPaymentInfoEFT.BillMethod == "EFT")
                {
                    model = objPaymentInfoEFT;
                }
                else if (objPaymentInfoCredit != null && objPaymentInfoCredit.BillMethod == "Credit Card")
                {
                    model = objPaymentInfoCredit;
                }
                else if (objPaymentInfoCheck != null && objPaymentInfoCheck.BillMethod == "Check")
                {
                    model = objPaymentInfoCheck;
                }
                else if (objPaymentInfoCash != null && objPaymentInfoCash.BillMethod == "Cash")
                {
                    model = objPaymentInfoCash;
                }
            }
            ViewBag.BillingMethod = _Util.Facade.LookupFacade.GetLookupByKey("PaymentMethod").Select(x =>
                            new SelectListItem()
                            {
                                Text = x.DisplayText.ToString(),
                                Value = x.DataValue.ToString()
                            }).ToList();
            model.PaymentCustomerId = _Util.Facade.CustomerFacade.GetLeadIdByCompanyIdAndCustomerId(currentLoggedIn.CompanyId.Value, PaymentLeadId.Value).CustomerId;
            return PartialView("PaymentPartial", model);
        }

        public ActionResult SmartAgreementDetails(int? id)
        {
            int max = 0;
            int min = 0;
            var NonConforming = false;
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (currentLoggedIn == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            var objcus = _Util.Facade.CustomerFacade.GetById(id.Value);
            var packid = new PackageCustomer();
            if (objcus != null)
            {
                packid = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(objcus.CustomerId, currentLoggedIn.CompanyId.Value);
                if (packid != null)
                {
                    var objmmrRange = _Util.Facade.PackageFacade.GetMMrRangeByPackageId(packid.PackageId);
                    if (objmmrRange != null)
                    {
                        max = Convert.ToInt32(objmmrRange.MaxMMR);
                        min = Convert.ToInt32(objmmrRange.MinMMR);
                    }
                }
            }
            LeadServiceSetupCustomModel model = new LeadServiceSetupCustomModel();
            model.CustomerModel = new Customer();
            if (id.HasValue)
            {
                var CustomerDetails = _Util.Facade.CustomerFacade.GetCustomersById(id.Value);
                if (CustomerDetails != null)
                {
                    if (CustomerDetails.RenewalTerm == null || CustomerDetails.RenewalTerm == 0)
                    {
                        var DefaultRenewalTerm = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(currentLoggedIn.CompanyId.Value, "RenewalTermValue");
                        if (DefaultRenewalTerm != null)
                        {
                            int DefRenewalTerm = 0;
                            if (int.TryParse(DefaultRenewalTerm.Value, out DefRenewalTerm))
                            {
                                CustomerDetails.RenewalTerm = DefRenewalTerm;
                            }

                            _Util.Facade.CustomerFacade.UpdateCustomer(CustomerDetails);
                        }
                    }
                }
                model.CustomerModel = _Util.Facade.CustomerFacade.GetCustomersById(id.Value);
            }
            Customer objLead = _Util.Facade.CustomerFacade.GetLeadIdByCompanyIdAndCustomerId(currentLoggedIn.CompanyId.Value, id.Value);
            if (objLead != null)
            {
                ViewBag.leadcontractid = objLead.Id;
                ViewBag.leadcontractcustomerid = objLead.CustomerId;
                ViewBag.leadcontractfirstname = objLead.FirstName;
                ViewBag.leadcontractlastname = objLead.LastName;
                ViewBag.leadcontractstreet = objLead.Street;
                ViewBag.leadcontractZipCode = objLead.ZipCode;
                ViewBag.LeadCustomerID = objLead.CustomerId;
            }
            #region viewbag contract terms
            List<SelectListItem> ContactTerms = new List<SelectListItem>();
            ContactTerms = _Util.Facade.LookupFacade.GetDropdownsByKey("ContractTerm");
            var selectedTerm = ContactTerms.Where(x => x.Selected).FirstOrDefault();
            if (selectedTerm != null && string.IsNullOrWhiteSpace(model.CustomerModel.ContractTeam))
            {
                model.CustomerModel.ContractTeam = selectedTerm.Value;
            }

            //if (packid != null)
            //{
            //    var PackageDetails = _Util.Facade.SmartPackageFacade.GetSmartPackageByPackageId(packid.PackageId);
            //    if (PermissionChecker.IsPermitted(PermissionList.LeadPermissions.AllowCustomContractTerm))
            //    {
            //        if (PackageDetails != null)
            //        {
            //            if (PackageDetails.NonConforming == true)
            //            {
            //                NonConforming = true;
            //                ContactTerms.Add(new SelectListItem() { Value = "Custom", Text = "Custom" });
            //            }
            //        }
            //    }
            //}
            ViewBag.ContactTerms = ContactTerms;
            #endregion
            #region viewbag Monitoring List
            List<SelectListItem> MonitoringList = new List<SelectListItem>();
            MonitoringList.Add(new SelectListItem()
            {
                Text = "Please Select",
                Value = "-1"
            });
            MonitoringList.AddRange(_Util.Facade.CustomerFacade.GetLeadMMRValueListByCompanyId(currentLoggedIn.CompanyId.Value, max, min).Select(x =>
                            new SelectListItem()
                            {
                                Text = x.Name.ToString(),
                                Value = x.Value.ToString()
                            }).ToList());
            ViewBag.MonthlyMonitoringFee = MonitoringList.OrderBy(x => x.Text != "Please Select").ThenBy(x => x.Text).ToList();
            #endregion
            #region viewbag Activation Fee List
            List<SelectListItem> ActivationFeeList = new List<SelectListItem>();
            ActivationFeeList.Add(new SelectListItem()
            {
                Text = "Please Select One",
                Value = "-1"
            });
            ActivationFeeList.AddRange(_Util.Facade.CustomerFacade.GetAllActivationFeeValueByCompanyId(currentLoggedIn.CompanyId.Value).Select(x =>
                            new SelectListItem()
                            {
                                Text = x.Name.ToString(),
                                Value = x.Fee.ToString()
                            }).ToList());
            ViewBag.ActivationFee = ActivationFeeList.OrderBy(x => x.Text != "Please Select One").ThenBy(x => x.Text).ToList();
            #endregion
            #region viewbag MMR Paying

            List<SelectListItem> MMRPaying = new List<SelectListItem>();
            MMRPaying.Add(new SelectListItem() { Value = "-1", Text = "Select One" });
            MMRPaying.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("PaymentMethod").Where(x => x.DataValue == "ACH" || x.DataValue == "Credit Card").Select(x =>
                              new SelectListItem()
                              {
                                  Text = x.DisplayText.ToString(),
                                  Value = x.DataValue.ToString()
                              }).ToList());
            ViewBag.MMRPaying = MMRPaying.OrderBy(x => x.Text != "Please Select").ThenBy(x => x.Text).ToList();
            #endregion
            #region Billing Day
            ViewBag.BillingDay = _Util.Facade.LookupFacade.GetLookupByKey("BillingDay").Select(x =>
                             new SelectListItem()
                             {
                                 Text = x.DisplayText.ToString(),
                                 Value = x.DataValue.ToString()
                             }).ToList();
            #endregion

            GlobalSetting GlobalSettingDetails = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(currentLoggedIn.CompanyId.Value, "SmartSetUpVerbalPasswordIsRequired");
            ViewBag.SmartSetUpVerbalPasswordIsRequired = "false";
            if (GlobalSettingDetails != null)
            {
                ViewBag.SmartSetUpVerbalPasswordIsRequired = GlobalSettingDetails.Value.ToString().ToLower();
            }


            //ViewBag.LeadCustomerID = _Util.Facade.CustomerFacade.GetLeadIdByCompanyIdAndCustomerId(currentLoggedIn.CompanyId.Value, id.Value).CustomerId;
            ViewBag.NonConforming = NonConforming;
            return PartialView("SmartAgreementDetails", model);
        }
        public TotalCalculatePayAmount CalculateTotalPayAmmount(int Id)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;

            #region CalculateTotal
            SmartSetupSummary Model = new SmartSetupSummary();
            Model.Customer = _Util.Facade.CustomerFacade.GetCustomerById(Id);
            Model.PackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(Model.Customer.CustomerId);
            Model.CustomerPackageServiceList = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(Model.Customer.CustomerId, CurrentUser.CompanyId.Value);
            Model.CustomerPackageEqpList = _Util.Facade.CustomerFacade.IsLeadAppointmentEquipmentExistCheckCustomerPackageEqp(Model.Customer.CustomerId, CurrentUser.CompanyId.Value);
            if (Model.CustomerPackageServiceList != null && Model.CustomerPackageServiceList.Count > 0)
            {
                Model.CustomerPackageOneTimeServiceList = Model.CustomerPackageServiceList.Where(x => x.IsARBEnabled == false).ToList();
                Model.CustomerPackageServiceList = Model.CustomerPackageServiceList.Where(x => x.IsARBEnabled == true).ToList();
            }
            else
            {
                Model.CustomerPackageOneTimeServiceList = new List<CustomerPackageService>();
            }
            GlobalSetting glbsFee = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "HasLabourFee");
            if (glbsFee != null && glbsFee.Value != "true")
            {
                if (Model.PackageCustomer != null)
                {
                    Model.PackageCustomer.LabourFee = 0.0;
                }
            }
            else
            {
                Model.PackageCustomer.LabourFee = Model.PackageCustomer.LabourFee != null ? Model.PackageCustomer.LabourFee : 0.0;
            }
            List<PaymentInfoCustomer> PICList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(Model.Customer.CustomerId);

            if (Model.PackageCustomer.NonConforming && Model.PackageCustomer.NonConformingFee > 0 && (Model.Customer.CreditScoreValue < Model.PackageCustomer.MinCredit || Model.Customer.CreditScoreValue > Model.PackageCustomer.MaxCredit))
            {
                Model.IsNonConfirming = true;
            }
            else
            {
                Model.IsNonConfirming = false;
            }
            if (PICList != null && PICList.Count() > 0)
            {
                PaymentInfoCustomer PIC = PICList.Where(x => x.Payfor == "Equipment").FirstOrDefault();
                if (PIC != null)
                {
                    Model.EquipmentPaymentInfoId = PIC.PaymentInfoId;
                    Model.EquipmentIsPaid = (PIC.IsPaid.HasValue && PIC.IsPaid.Value) ? true : false;
                    Model.EquipmentInvoice = PIC.InvoiceId;
                }
                PIC = PICList.Where(x => x.Payfor == "Service" || x.Payfor == "MMR").FirstOrDefault();
                if (PIC != null)
                {
                    Model.ServicePaymentInfoId = PIC.PaymentInfoId;
                    Model.ServiceIsPaid = (PIC.IsPaid.HasValue && PIC.IsPaid.Value) ? true : false;
                    Model.ServiceForMonths = PIC.ForMonths.HasValue ? PIC.ForMonths.Value : 1;
                    Model.ServiceInvoice = PIC.InvoiceId;
                }
                PIC = PICList.Where(x => x.Payfor == "MMR").FirstOrDefault();
                if (PIC != null)
                {
                    Model.MMRPaymentInfoId = PIC.PaymentInfoId;
                }
                PIC = PICList.Where(x => x.Payfor == "Onetime").FirstOrDefault();
                if (PIC != null)
                {
                    Model.OneTimePaymentInfoId = PIC.PaymentInfoId;
                }
                PIC = PICList.Where(x => x.Payfor == "Activation Fee").FirstOrDefault();
                if (PIC != null)
                {
                    Model.PackagePaymentInfoId = PIC.PaymentInfoId;
                    Model.PackageIsPaid = (PIC.IsPaid.HasValue && PIC.IsPaid.Value) ? true : false;
                    Model.PackageInvoice = PIC.InvoiceId;
                }
                PIC = PICList.Where(x => x.Payfor == "NonConfirming Fee").FirstOrDefault();
                if (PIC != null)
                {
                    Model.NonConfirmingPaymentInfoId = PIC.PaymentInfoId;
                    Model.NonConfirmingIsPaid = (PIC.IsPaid.HasValue && PIC.IsPaid.Value) ? true : false;
                    Model.NonConfirmingInvoice = PIC.InvoiceId;
                }
            }


            #region NonConfirming fee
            var CreditScoreValue = Model.Customer.CreditScoreValue;
            double MinCredit = 0;
            MinCredit = Model.PackageCustomer.MinCredit;

            if (CreditScoreValue >= MinCredit && MinCredit != 0)
            {
                Model.PackageCustomer.NonConformingFee = 0;
                Model.IsNonConfirming = false;
            }
            #endregion
            #region Tax
            Guid CustomerId = new Guid();
            if (Model.Customer != null)
            {
                CustomerId = Model.Customer.CustomerId;
            }
            var GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(CurrentUser.CompanyId.Value, CustomerId);
            ViewBag.SaleTax = 0.00;
            ViewBag.Tax = 0.00;
            if (GetSalesTax != null)
            {
                var TaxGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByOnlyKey("IsServiceTaxable");
                ViewBag.SaleTax = Math.Round(Convert.ToDouble(GetSalesTax.Value), 2, MidpointRounding.AwayFromZero);
                double ServiceTaxAmount = 0.0;
                double ServiceTax = 0.0;
                if (TaxGlobal != null && TaxGlobal.Value.ToLower() == "true")
                {
                    ServiceTaxAmount = (Convert.ToDouble(Model.CustomerPackageServiceList.Sum(x => x.Total)) * Convert.ToDouble(GetSalesTax.Value)) / 100;
                    ServiceTax = Math.Round(ServiceTaxAmount, 2, MidpointRounding.AwayFromZero);
                }


                ViewBag.ServiceTax = ServiceTax;

                double OneTimeServiceTaxAmount = (Convert.ToDouble(Model.CustomerPackageOneTimeServiceList.Sum(x => x.Total)) * Convert.ToDouble(GetSalesTax.Value)) / 100;
                double OneTimeServiceTax = Math.Round(OneTimeServiceTaxAmount, 2, MidpointRounding.AwayFromZero);
                ViewBag.OneTimeServiceTax = OneTimeServiceTax;

                double PackageEquipTaxAmount = (Convert.ToDouble(Model.CustomerPackageEqpList.Sum(x => x.Total)) * Convert.ToDouble(GetSalesTax.Value)) / 100;
                double PackageEquipTax = Math.Round(PackageEquipTaxAmount, 2, MidpointRounding.AwayFromZero);
                ViewBag.TaxEquip = PackageEquipTax;

                var SumActivationNon = Model.PackageCustomer.ActivationFee + Model.PackageCustomer.NonConformingFee;
                var TaxActivationNoncorming = (Convert.ToDouble(SumActivationNon) * Convert.ToDouble(GetSalesTax.Value)) / 100;
                ViewBag.TaxActivationNoncorming = Math.Round(TaxActivationNoncorming, 2, MidpointRounding.AwayFromZero);
            }
            #endregion

            var packageTotal = Model.PackageCustomer.ActivationFee + Model.PackageCustomer.NonConformingFee + ViewBag.TaxActivationNoncorming + Model.PackageCustomer.LabourFee;
            var serviceTotal = (Model.CustomerPackageServiceList.Sum(x => x.Total) + ViewBag.ServiceTax) * Model.ServiceForMonths;
            var EquepmentTotal = Model.CustomerPackageEqpList.Sum(x => x.Total) + ViewBag.TaxEquip;
            var OnetimeTotal = Model.CustomerPackageOneTimeServiceList.Sum(x => x.Total);
            double Total = packageTotal + serviceTotal + EquepmentTotal + OnetimeTotal;

            double CollectedTotal = 0.0;
            double AchPayment = 0.0;
            double CreditCardPayment = 0.0;
            double CashPayment = 0.0;
            double CheckPayment = 0.0;
            double InvoicePayment = 0.0;
            double FinancedPayment = 0.0;
            foreach (var item in PICList)
            {
                PaymentInfo payInfo = _Util.Facade.PaymentInfoFacade.GetPaymentInfoById(item.PaymentInfoId);
                if (payInfo == null)
                {
                    payInfo = new PaymentInfo();
                }

                if (item.Payfor == "Activation Fee" && payInfo.BankAccountType != "Invoice")
                {
                    if (payInfo != null && payInfo.AccountName != "Cash" && payInfo.AccountName != "Check" && payInfo.BankAccountType != "Invoice" && payInfo.BankAccountType != "Financed" && payInfo.BankAccountType != "Promo")
                    {
                        CollectedTotal = CollectedTotal + packageTotal;
                    }
                    if (payInfo.BankAccountType == "Promo")
                    {
                        Total = Total - packageTotal;
                    }

                    if (payInfo != null && payInfo.RoutingNo != "")
                    {
                        AchPayment = Convert.ToDouble(LabelHelper.FormatAmount(AchPayment + packageTotal));
                    }
                    else if (payInfo != null && payInfo.AccountName == "Cash")
                    {
                        //CashPayment = Convert.ToDouble(LabelHelper.FormatAmount(CashPayment + packageTotal));
                    }
                    else if (payInfo != null && payInfo.AccountName == "Check")
                    {
                        //CheckPayment = Convert.ToDouble(LabelHelper.FormatAmount(CheckPayment + packageTotal));
                    }
                    else if (payInfo != null && payInfo.BankAccountType == "Invoice")
                    {
                        //InvoicePayment = Convert.ToDouble(LabelHelper.FormatAmount(InvoicePayment + serviceTotal));
                    }
                    else if (payInfo.BankAccountType == "Financed")
                    {
                        //FinancedPayment = Convert.ToDouble(LabelHelper.FormatAmount(FinancedPayment + serviceTotal));
                    }
                    else
                    {
                        CreditCardPayment = Convert.ToDouble(LabelHelper.FormatAmount(CreditCardPayment + packageTotal));
                    }
                }
                else if (item.Payfor == "Service")
                {
                    if (payInfo != null && payInfo.AccountName != "Cash" && payInfo.AccountName != "Check" && payInfo.BankAccountType != "Invoice" && payInfo.BankAccountType != "Financed" && payInfo.BankAccountType != "Promo")
                    {
                        CollectedTotal = CollectedTotal + serviceTotal;
                    }
                    //if (payInfo.BankAccountType == "Promo")
                    //{
                    //    Total = Total - serviceTotal;
                    //}
                    if (payInfo != null && payInfo.RoutingNo != "")
                    {
                        AchPayment = Convert.ToDouble(LabelHelper.FormatAmount(AchPayment + serviceTotal));
                    }
                    else if (payInfo != null && payInfo.AccountName == "Cash")
                    {
                        //CashPayment = Convert.ToDouble(LabelHelper.FormatAmount(CashPayment + serviceTotal));
                    }
                    else if (payInfo != null && payInfo.AccountName == "Check")
                    {
                        //CheckPayment = Convert.ToDouble(LabelHelper.FormatAmount(CheckPayment + serviceTotal));
                    }
                    else if (payInfo != null && payInfo.BankAccountType == "Invoice")
                    {
                        //InvoicePayment = Convert.ToDouble(LabelHelper.FormatAmount(InvoicePayment + serviceTotal));
                    }
                    else if (payInfo.BankAccountType == "Financed")
                    {
                        //FinancedPayment = Convert.ToDouble(LabelHelper.FormatAmount(FinancedPayment + serviceTotal));
                    }
                    else
                    {
                        CreditCardPayment = Convert.ToDouble(LabelHelper.FormatAmount(CreditCardPayment + serviceTotal));
                    }
                }
                else if (item.Payfor == "Onetime")
                {
                    if (payInfo != null && payInfo.AccountName != "Cash" && payInfo.AccountName != "Check" && payInfo.BankAccountType != "Invoice" && payInfo.BankAccountType != "Financed" && payInfo.BankAccountType != "Promo")
                    {
                        CollectedTotal = CollectedTotal + serviceTotal;
                    }
                    //if (payInfo.BankAccountType == "Promo")
                    //{
                    //    Total = Total - serviceTotal;
                    //}
                    if (payInfo != null && payInfo.RoutingNo != "")
                    {
                        AchPayment = Convert.ToDouble(LabelHelper.FormatAmount(AchPayment + serviceTotal));
                    }
                    else if (payInfo != null && payInfo.AccountName == "Cash")
                    {
                        //CashPayment = Convert.ToDouble(LabelHelper.FormatAmount(CashPayment + serviceTotal));
                    }
                    else if (payInfo != null && payInfo.AccountName == "Check")
                    {
                        //CheckPayment = Convert.ToDouble(LabelHelper.FormatAmount(CheckPayment + serviceTotal));
                    }
                    else if (payInfo != null && payInfo.BankAccountType == "Invoice")
                    {
                        //InvoicePayment = Convert.ToDouble(LabelHelper.FormatAmount(InvoicePayment + serviceTotal));
                    }
                    else if (payInfo.BankAccountType == "Financed")
                    {
                        //FinancedPayment = Convert.ToDouble(LabelHelper.FormatAmount(FinancedPayment + serviceTotal));
                    }
                    else
                    {
                        CreditCardPayment = Convert.ToDouble(LabelHelper.FormatAmount(CreditCardPayment + serviceTotal));
                    }
                }
                else if (item.Payfor == "Equipment" && payInfo.BankAccountType != "Invoice")
                {
                    if (payInfo != null && payInfo.AccountName != "Cash" && payInfo.AccountName != "Check" && payInfo.BankAccountType != "Invoice" && payInfo.BankAccountType != "Financed" && payInfo.BankAccountType != "Promo")
                    {
                        CollectedTotal = CollectedTotal + EquepmentTotal;
                    }
                    //if (payInfo.BankAccountType == "Promo")
                    //{
                    //    Total = Total - EquepmentTotal;
                    //}
                    if (payInfo != null && payInfo.RoutingNo != "")
                    {
                        AchPayment = Convert.ToDouble(LabelHelper.FormatAmount(AchPayment + EquepmentTotal));
                    }
                    else if (payInfo != null && payInfo.AccountName == "Cash")
                    {
                        //CashPayment = Convert.ToDouble(LabelHelper.FormatAmount(CashPayment + EquepmentTotal));

                    }
                    else if (payInfo != null && payInfo.AccountName == "Check")
                    {
                        //CheckPayment = Convert.ToDouble(LabelHelper.FormatAmount(CheckPayment + EquepmentTotal));

                    }
                    else if (payInfo != null && payInfo.BankAccountType == "Invoice")
                    {
                        //InvoicePayment = Convert.ToDouble(LabelHelper.FormatAmount(InvoicePayment + serviceTotal));
                    }
                    else if (payInfo.BankAccountType == "Financed")
                    {
                        //FinancedPayment = Convert.ToDouble(LabelHelper.FormatAmount(FinancedPayment + serviceTotal));
                    }
                    else
                    {
                        CreditCardPayment = Convert.ToDouble(LabelHelper.FormatAmount(CreditCardPayment + EquepmentTotal));
                    }
                }


            }

            TotalCalculatePayAmount totalPay = new TotalCalculatePayAmount();
            totalPay.CurrentCurrency = _Util.Facade.GlobalSettingsFacade.GetCurrentCurrencyByCompanyId(CurrentUser.CompanyId.Value);
            totalPay.TotalAmount = Total;
            totalPay.CollectToday = CollectedTotal;
            totalPay.CollectAch = AchPayment;
            totalPay.CollectCC = CreditCardPayment;
            totalPay.CollectCash = CashPayment;
            totalPay.CollectCheck = CheckPayment;
            #endregion

            return totalPay;
        }


        [Authorize]
        public ActionResult SmartAgreementSummary(int Id)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            var TaxGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByOnlyKey("IsServiceTaxable");
            if (Id == 0)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            SmartSetupSummary Model = new SmartSetupSummary();
           
            Model.Customer = _Util.Facade.CustomerFacade.GetCustomerById(Id);
            bool IsLead = _Util.Facade.CustomerFacade.CheckLeadOrCustomerByCustomerId(CurrentUser.CompanyId.Value, Model.Customer.CustomerId);
            ViewBag.IsLead = IsLead;
            if (!base.IsPermitted(UserPermissions.CustomerTicketPermission.DisableActionBtnatSmartSetup))
            {
                ViewBag.DisableBtnCheck = "false";
            }
            else
            {
                ViewBag.DisableBtnCheck = "true";
            }
            #region IsPc AppId
            CustomerExtended cusEx = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(Model.Customer.CustomerId);
            if (cusEx != null)
            {
                ViewBag.IsPcAppId = cusEx.IsPcApplicationId;
            }
            else
            {
                ViewBag.IsPcAppId = "";
            }
            #endregion
            if (Model.Customer == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            Model.PackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(Model.Customer.CustomerId);
            Model.CustomerPackageServiceList = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(Model.Customer.CustomerId, CurrentUser.CompanyId.Value);
            Model.CustomerPackageEqpList = _Util.Facade.CustomerFacade.IsLeadAppointmentEquipmentExistCheckCustomerPackageEqp(Model.Customer.CustomerId, CurrentUser.CompanyId.Value);
            Model.EmergencyContact = _Util.Facade.EmergencyContactFacade.GetAllEmergencyContactByCustomerIdAndCompanyId(Model.Customer.CustomerId,CurrentUser.CompanyId.Value);
            Model.PackagePaymentInfoId = -1;
            Model.ServicePaymentInfoId = -1;
            Model.EquipmentPaymentInfoId = -1;
            GlobalSetting glbsFee = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "HasLabourFee");
            if (glbsFee != null && glbsFee.Value != "true")
            {
                if (Model.PackageCustomer != null)
                {
                    Model.PackageCustomer.LabourFee = 0.0;
                }
            }
            else
            {
                Model.PackageCustomer.LabourFee = Model.PackageCustomer.LabourFee != null ? Model.PackageCustomer.LabourFee : 0.0;
                ViewBag.HasLabourFee = "true";
            }
            if (Model.CustomerPackageServiceList != null && Model.CustomerPackageServiceList.Count > 0)
            {
                Model.CustomerPackageOneTimeServiceList = Model.CustomerPackageServiceList.Where(x => x.IsARBEnabled == false).ToList();
                Model.CustomerPackageServiceList = Model.CustomerPackageServiceList.Where(x => x.IsARBEnabled == true).ToList();
            }
            else
            {
                Model.CustomerPackageOneTimeServiceList = new List<CustomerPackageService>();
            }
            #region NonConfirming fee
            var GradeMaxValue = 0;
            double? MinCredit = 0.0;
            if (!string.IsNullOrEmpty(Model.Customer.CreditScore) && Model.Customer.CreditScore != "-1")
            {
                int GradeId = 0;
                int.TryParse(Model.Customer.CreditScore, out GradeId);
                CreditScoreGrade creditGrade = _Util.Facade.CustomerFacade.GetCreditScoreGradeById(GradeId);
                if (creditGrade != null)
                {
                    if (creditGrade.MaxScore.HasValue)
                    {
                        GradeMaxValue = creditGrade.MaxScore.Value;
                    }
                }
            }
            else
            {
                if (Model.Customer.CreditScoreValue.HasValue)
                {
                    GradeMaxValue = Model.Customer.CreditScoreValue.Value;
                }
            }
            SmartPackage package = _Util.Facade.SmartPackageFacade.GetPackageByPackageIdAndCompanyId(Model.PackageCustomer.PackageId, CurrentUser.CompanyId.Value);
            if (package != null && package.MinCredit.HasValue)
            {
                MinCredit = package.MinCredit;
            }
            if (GradeMaxValue >= MinCredit && MinCredit != 0)
            {
                Model.PackageCustomer.NonConformingFee = 0;
            }
            #endregion

            if (Model.PackageCustomer.NonConforming && Model.PackageCustomer.NonConformingFee > 0)
            {
                Model.IsNonConfirming = true;
            }
            else
            {
                Model.IsNonConfirming = false;
            }
            #region By Default Invoice Insert
            var PaymentProfileExistCustomer = _Util.Facade.CustomerFacade.GetAllPaymentProfileByCustomerId(Model.Customer.CustomerId, CurrentUser.CompanyId.Value);
            if (PaymentProfileExistCustomer != null && PaymentProfileExistCustomer.Where(x => x.Type == "Invoice").Count() == 0)
            {
                PaymentInfo paymentInfo = new PaymentInfo()
                {
                    CompanyId = CurrentUser.CompanyId.Value,
                    AccountName = LabelHelper.PaymentMethod.Invoice,
                    BankAccountType = LabelHelper.PaymentMethod.Invoice,
                    CardType = LabelHelper.PaymentMethod.Invoice
                };
                var paymentInfoId = _Util.Facade.PaymentInfoFacade.InsertPaymentInfo(paymentInfo);
                if (paymentInfoId != 0)
                {
                    PaymentProfileCustomer PaymentProfileCustomer = new PaymentProfileCustomer()
                    {
                        CompanyId = CurrentUser.CompanyId.Value,
                        CustomerId = Model.Customer.CustomerId,
                        PaymentInfoId = Convert.ToInt32(paymentInfoId),
                        Type = LabelHelper.PaymentMethod.Invoice
                    };
                    bool res = _Util.Facade.CustomerFacade.InsertPaymentProfileCustomer(PaymentProfileCustomer) > 0;
                }
            }
            #endregion
            Model.PaymentProfileCustomer = _Util.Facade.CustomerFacade.GetAllPaymentProfileByCustomerId(Model.Customer.CustomerId, CurrentUser.CompanyId.Value);
            if (Model.PaymentProfileCustomer == null)
            {
                Model.PaymentProfileCustomer = new List<PaymentProfileCustomer>();
            }

            #region Payment Info Customer Related
            List<PaymentInfoCustomer> PICList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(Model.Customer.CustomerId);

            if (PICList != null && PICList.Count() > 0)
            {
                PaymentInfoCustomer PIC = PICList.Where(x => x.Payfor == "Equipment").FirstOrDefault();
                if (PIC != null)
                {
                    Model.EquipmentPaymentInfoId = PIC.PaymentInfoId;
                    Model.EquipmentIsPaid = (PIC.IsPaid.HasValue && PIC.IsPaid.Value) ? true : false;
                    Model.EquipmentInvoice = PIC.InvoiceId;
                    Model.EquipmentComment = PIC.Comment;
                }
                PIC = PICList.Where(x => x.Payfor == "Service").FirstOrDefault();
                if (PIC != null)
                {
                    Model.ServicePaymentInfoId = PIC.PaymentInfoId;
                    Model.ServiceIsPaid = (PIC.IsPaid.HasValue && PIC.IsPaid.Value) ? true : false;
                    Model.ServiceForMonths = PIC.ForMonths.HasValue ? PIC.ForMonths.Value : 1;
                    Model.ServiceInvoice = PIC.InvoiceId;
                    Model.ServiceComment = PIC.Comment;
                }
                PIC = PICList.Where(x => x.Payfor == "MMR").FirstOrDefault();
                if (PIC != null)
                {
                    Model.MMRPaymentInfoId = PIC.PaymentInfoId;
                }
                PIC = PICList.Where(x => x.Payfor == "Onetime").FirstOrDefault();
                if (PIC != null)
                {
                    Model.OneTimePaymentInfoId = PIC.PaymentInfoId;
                }
                PIC = PICList.Where(x => x.Payfor == "Activation Fee").FirstOrDefault();
                if (PIC != null)
                {
                    Model.PackagePaymentInfoId = PIC.PaymentInfoId;
                    Model.PackageIsPaid = (PIC.IsPaid.HasValue && PIC.IsPaid.Value) ? true : false;
                    Model.PackageInvoice = PIC.InvoiceId;
                    Model.PackageComment = PIC.Comment;
                }
                PIC = PICList.Where(x => x.Payfor == "NonConfirming Fee").FirstOrDefault();
                if (PIC != null)
                {
                    Model.NonConfirmingPaymentInfoId = PIC.PaymentInfoId;
                    Model.NonConfirmingIsPaid = (PIC.IsPaid.HasValue && PIC.IsPaid.Value) ? true : false;
                    Model.NonConfirmingInvoice = PIC.InvoiceId;
                }
            }
            #endregion

            #region PaymentProfileList
            ViewBag.HasAdminPermission = PermissionChecker.IsPermitted(PermissionList.LeadPermissions.SmartSetUpSaveReview);
            bool HasAdminPermission = ViewBag.HasAdminPermission;

            List<SelectListItem> ProfilePackage = new List<SelectListItem>();
            ProfilePackage.Add(new SelectListItem()
            {
                Text = "Please Select",
                Value = "-1"
            });
            if (HasAdminPermission)
            {
                ProfilePackage.AddRange(_Util.Facade.CustomerFacade.GetAllPaymentProfileByType(Model.Customer.CustomerId, CurrentUser.CompanyId.Value, "PaymentMethodPackage").Select(x =>
             new SelectListItem()
             {
                 Text = x.Type.ToString(),
                 Value = x.PaymentInfoId.ToString()
             }).ToList());
            }
            else
            {
                ProfilePackage.AddRange(_Util.Facade.CustomerFacade.GetAllPaymentProfileByType(Model.Customer.CustomerId, CurrentUser.CompanyId.Value, "PaymentMethodPackage", true).Select(x =>
             new SelectListItem()
             {
                 Text = x.Type.ToString(),
                 Value = x.PaymentInfoId.ToString()
             }).ToList());
            }
            ViewBag.ProfilePackage = ProfilePackage.Where(x => x.Text != "OnFile").OrderBy(x => x.Text != "Please Select").ThenBy(x => x.Text).ToList();

            List<SelectListItem> profilefortoday = new List<SelectListItem>();
            profilefortoday.Add(new SelectListItem()
            {
                Text = "Please Select",
                Value = "-1"
            });
            if (HasAdminPermission)
            {
                profilefortoday.AddRange(_Util.Facade.CustomerFacade.GetAllPaymentProfileByType(Model.Customer.CustomerId, CurrentUser.CompanyId.Value, "PaymentMethodForToday").Select(x =>
                new SelectListItem()
                {
                    Text = x.Type.ToString(),
                    Value = x.PaymentInfoId.ToString()
                }).ToList());
            }
            else
            {
                profilefortoday.AddRange(_Util.Facade.CustomerFacade.GetAllPaymentProfileByType(Model.Customer.CustomerId, CurrentUser.CompanyId.Value, "PaymentMethodForToday", true).Select(x =>
                new SelectListItem()
                {
                    Text = x.Type.ToString(),
                    Value = x.PaymentInfoId.ToString()
                }).ToList());
            }
            ViewBag.profilefortoday = profilefortoday.OrderBy(x => x.Text != "Please Select").ThenBy(x => x.Text).ToList();

            List<SelectListItem> profileMMR = new List<SelectListItem>();
            profileMMR.Add(new SelectListItem()
            {
                Text = "Please Select",
                Value = "-1"
            });
            profileMMR.AddRange(_Util.Facade.CustomerFacade.GetAllPaymentProfileByType(Model.Customer.CustomerId, CurrentUser.CompanyId.Value, "PaymentMethodRMR").Select(x =>
                   new SelectListItem()
                   {
                       Text = x.Type.ToString(),
                       Value = x.PaymentInfoId.ToString()
                   }).ToList());
            ViewBag.profileMMR = profileMMR.Where(x => x.Text != "OnFile" && x.Text != "Financed" && x.Text != "Promo").OrderBy(x => x.Text != "Please Select").ThenBy(x => x.Text).ToList();
            List<SelectListItem> profileOnetime = new List<SelectListItem>();
            profileOnetime.Add(new SelectListItem()
            {
                Text = "Please Select",
                Value = "-1"
            });
            profileOnetime.AddRange(_Util.Facade.CustomerFacade.GetAllPaymentProfileByType(Model.Customer.CustomerId, CurrentUser.CompanyId.Value, "PaymentMethodRMR").Select(x =>
                   new SelectListItem()
                   {
                       Text = x.Type.ToString(),
                       Value = x.PaymentInfoId.ToString()
                   }).ToList());
            ViewBag.profileOnetime = profileMMR.Where(x => x.Text != "OnFile").OrderBy(x => x.Text != "Please Select").ThenBy(x => x.Text).ToList();
            List<SelectListItem> profileEquipmet = new List<SelectListItem>();
            profileEquipmet.Add(new SelectListItem()
            {
                Text = "Please Select",
                Value = "-1"
            });
            if (HasAdminPermission)
            {
                profileEquipmet.AddRange(_Util.Facade.CustomerFacade.GetAllPaymentProfileByType(Model.Customer.CustomerId, CurrentUser.CompanyId.Value, "PaymentMethodEquipment").Select(x =>
           new SelectListItem()
           {
               Text = x.Type.ToString(),
               Value = x.PaymentInfoId.ToString()
           }).ToList());
            }
            else
            {
                profileEquipmet.AddRange(_Util.Facade.CustomerFacade.GetAllPaymentProfileByType(Model.Customer.CustomerId, CurrentUser.CompanyId.Value, "PaymentMethodEquipment", true).Select(x =>
             new SelectListItem()
             {
                 Text = x.Type.ToString(),
                 Value = x.PaymentInfoId.ToString()
             }).ToList());
            }
            ViewBag.profileEquipmet = profileEquipmet.Where(x => x.Text != "OnFile").OrderBy(x => x.Text != "Please Select").ThenBy(x => x.Text).ToList();
            #endregion

            #region Tax
            Guid CustomerId = new Guid();
            if (Model.Customer != null)
            {
                CustomerId = Model.Customer.CustomerId;
            }
            var GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(CurrentUser.CompanyId.Value, CustomerId);



            ViewBag.SaleTax = 0.00;
            ViewBag.ServiceSaleTax = 0.00;
            ViewBag.Tax = 0.00;

            if (GetSalesTax != null)
            {
                ViewBag.SaleTax = Math.Round(Convert.ToDouble(GetSalesTax.Value), 2, MidpointRounding.AwayFromZero);

                ViewBag.ServiceTax = 0.00;
                ViewBag.OneTimeServiceTax = 0.00;
                ViewBag.ServiceSaleTax = 0.00;
                if (TaxGlobal != null && TaxGlobal.Value.ToLower() == "true")
                {
                    ViewBag.ServiceSaleTax = Math.Round(Convert.ToDouble(GetSalesTax.Value), 2, MidpointRounding.AwayFromZero);
                    double ServiceTaxAmount = (Convert.ToDouble(Model.CustomerPackageServiceList.Sum(x => x.Total)) * Convert.ToDouble(GetSalesTax.Value)) / 100;
                    double ServiceTax = Math.Round(ServiceTaxAmount, 2);
                    ViewBag.ServiceTax = ServiceTax;

                    double OneTimeServiceTaxAmount = (Convert.ToDouble(Model.CustomerPackageOneTimeServiceList.Sum(x => x.Total)) * Convert.ToDouble(GetSalesTax.Value)) / 100;
                    double OneTimeServiceTax = Math.Round(OneTimeServiceTaxAmount, 2, MidpointRounding.AwayFromZero);
                    ViewBag.OneTimeServiceTax = OneTimeServiceTax;
                }


                double PackageEquipTaxAmount = (Convert.ToDouble(Model.CustomerPackageEqpList.Sum(x => x.Total)) * Convert.ToDouble(GetSalesTax.Value)) / 100;
                double PackageEquipTax = Math.Round(PackageEquipTaxAmount, 2, MidpointRounding.AwayFromZero);
                ViewBag.TaxEquip = PackageEquipTax;

                var SumActivationNon = Model.PackageCustomer.ActivationFee + Model.PackageCustomer.NonConformingFee;
                var TaxActivationNoncorming = (Convert.ToDouble(SumActivationNon) * Convert.ToDouble(GetSalesTax.Value)) / 100;
                ViewBag.TaxActivationNoncorming = Math.Round(TaxActivationNoncorming, 2, MidpointRounding.AwayFromZero);
            }
            #endregion

            #region CalculateTotal
            double discountAmount = 0;
            double serviceTotal = 0;
            double Taxsale = 0;
            var packageTotal = Model.PackageCustomer.ActivationFee + Model.PackageCustomer.NonConformingFee + ViewBag.TaxActivationNoncorming + Model.PackageCustomer.LabourFee;
            var objpayinfocus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayFor(Model.Customer.CustomerId);
            if (objpayinfocus != null)
            {
                var objpayprofile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(objpayinfocus.PaymentInfoId);
                if (objpayprofile != null && objpayprofile.Type.ToLower().IndexOf("ach") > -1)
                {
                    var objglobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ACHDiscount");
                    if (objglobal != null)
                    {
                        discountAmount = Convert.ToDouble(objglobal.Value);
                    }
                    var objglobal1 = _Util.Facade.GlobalSettingsFacade.GetSalesTax(CurrentUser.CompanyId.Value, CustomerId);
                    if (objglobal1 != null)
                    {
                        Taxsale = Convert.ToDouble(objglobal1.Value);
                    }
                }
            }
            if (discountAmount > 0)
            {
                if (TaxGlobal != null && TaxGlobal.Value.ToLower() == "true")
                {
                    var totalTax = (Model.CustomerPackageServiceList.Sum(x => x.Total) - 2) * (Taxsale / 100);
                    serviceTotal = (((Model.CustomerPackageServiceList.Sum(x => x.Total) - 2).HasValue ? (Model.CustomerPackageServiceList.Sum(x => x.Total) - 2).Value : 0) + (totalTax.HasValue ? totalTax.Value : 0)) * Model.ServiceForMonths;
                }
                else
                {

                    serviceTotal = (((Model.CustomerPackageServiceList.Sum(x => x.Total) - 2).HasValue ? (Model.CustomerPackageServiceList.Sum(x => x.Total) - 2).Value : 0) + (0)) * Model.ServiceForMonths;
                }

            }
            else
            {
                serviceTotal = (Model.CustomerPackageServiceList.Sum(x => x.Total) + ViewBag.ServiceTax) * Model.ServiceForMonths;
            }

            var EquepmentTotal = Model.CustomerPackageEqpList.Sum(x => x.Total) + ViewBag.TaxEquip;
            var OnetimeTotal = Model.CustomerPackageOneTimeServiceList.Sum(x => x.Total) + ViewBag.OneTimeServiceTax;

            double Total = packageTotal + serviceTotal + EquepmentTotal + OnetimeTotal;

            #endregion
            
            double CollectedTotal = 0.0;
            double AchPayment = 0.0;
            double CreditCardPayment = 0.0;
            double CashPayment = 0.0;
            double CheckPayment = 0.0;
            double InvoicePayment = 0.0;
            double FinancedPayment = 0.0;
            double? AdditionalDiscount = 0.00;

            foreach (var item in PICList)
            {
                PaymentInfo payInfo = _Util.Facade.PaymentInfoFacade.GetPaymentInfoById(item.PaymentInfoId);
                if (payInfo == null)
                {
                    payInfo = new PaymentInfo();
                }

                if (item.Payfor == "Activation Fee" && payInfo.BankAccountType != "Invoice")
                {
                    if (payInfo.AccountName != "Cash" && payInfo.AccountName != "Check" && payInfo.BankAccountType != "Invoice" && payInfo.BankAccountType != "Financed" && payInfo.BankAccountType != "Promo")
                    {
                        CollectedTotal = CollectedTotal + packageTotal;
                    }
                    if (payInfo.BankAccountType == "Promo")
                    {
                        Total = Total - packageTotal;
                    }
                    if (payInfo.RoutingNo != "")
                    {
                        AchPayment = Convert.ToDouble(LabelHelper.FormatAmount(AchPayment + packageTotal));
                    }
                    else if (payInfo.AccountName == "Cash")
                    {
                        //CashPayment = Convert.ToDouble(LabelHelper.FormatAmount(CashPayment + packageTotal));
                    }
                    else if (payInfo.AccountName == "Check")
                    {
                        //CheckPayment = Convert.ToDouble(LabelHelper.FormatAmount(CheckPayment + packageTotal));
                    }
                    else if (payInfo.BankAccountType == "Invoice")
                    {
                        //InvoicePayment = Convert.ToDouble(LabelHelper.FormatAmount(InvoicePayment + serviceTotal));
                    }
                    else if (payInfo.BankAccountType == "Financed")
                    {
                        //FinancedPayment = Convert.ToDouble(LabelHelper.FormatAmount(FinancedPayment + serviceTotal));
                    }
                    else if (payInfo.CardType == "Visa")
                    {
                        CreditCardPayment = Convert.ToDouble(LabelHelper.FormatAmount(CreditCardPayment + packageTotal));
                    }
                }
                else if (item.Payfor == "Service")
                {
                    if (payInfo.AccountName != "Cash" && payInfo.AccountName != "Check" && payInfo.BankAccountType != "Invoice" && payInfo.BankAccountType != "Financed" && payInfo.BankAccountType != "Promo")
                    {
                        CollectedTotal = CollectedTotal + serviceTotal;
                    }
                    if (payInfo.BankAccountType == "Promo")
                    {
                        Total = Total - serviceTotal;
                    }

                    if (payInfo.RoutingNo != "")
                    {
                        AchPayment = Convert.ToDouble(LabelHelper.FormatAmount(AchPayment + serviceTotal));
                    }
                    else if (payInfo.AccountName == "Cash")
                    {
                        //CashPayment = Convert.ToDouble(LabelHelper.FormatAmount(CashPayment + serviceTotal));
                    }
                    else if (payInfo.AccountName == "Check")
                    {
                        //CheckPayment = Convert.ToDouble(LabelHelper.FormatAmount(CheckPayment + serviceTotal));
                    }
                    else if (payInfo.BankAccountType == "Invoice")
                    {
                        //InvoicePayment = Convert.ToDouble(LabelHelper.FormatAmount(InvoicePayment + serviceTotal));
                    }
                    else if (payInfo.BankAccountType == "Financed")
                    {
                        //FinancedPayment = Convert.ToDouble(LabelHelper.FormatAmount(FinancedPayment + serviceTotal));
                    }
                    else if (payInfo.CardType == "Visa")
                    {
                        CreditCardPayment = Convert.ToDouble(LabelHelper.FormatAmount(CreditCardPayment + serviceTotal));
                    }

                }
                else if (item.Payfor == "Onetime")
                {
                    if (payInfo.AccountName != "Cash" && payInfo.AccountName != "Check" && payInfo.BankAccountType != "Invoice" && payInfo.BankAccountType != "Financed" && payInfo.BankAccountType != "Promo")
                    {
                        CollectedTotal = CollectedTotal + OnetimeTotal;
                    }


                    if (payInfo.RoutingNo != "")
                    {
                        AchPayment = Convert.ToDouble(LabelHelper.FormatAmount(AchPayment + OnetimeTotal));
                    }
                    else if (payInfo.AccountName == "Cash")
                    {
                        //CashPayment = Convert.ToDouble(LabelHelper.FormatAmount(CashPayment + serviceTotal));
                    }
                    else if (payInfo.AccountName == "Check")
                    {
                        //CheckPayment = Convert.ToDouble(LabelHelper.FormatAmount(CheckPayment + serviceTotal));
                    }
                    else if (payInfo.BankAccountType == "Invoice")
                    {
                        //InvoicePayment = Convert.ToDouble(LabelHelper.FormatAmount(InvoicePayment + serviceTotal));
                    }
                    else if (payInfo.BankAccountType == "Financed")
                    {
                        //FinancedPayment = Convert.ToDouble(LabelHelper.FormatAmount(FinancedPayment + serviceTotal));
                    }
                    else if (payInfo.CardType == "Visa")
                    {
                        CreditCardPayment = Convert.ToDouble(LabelHelper.FormatAmount(CreditCardPayment + OnetimeTotal));
                    }

                }
                else if (item.Payfor == "Equipment" && payInfo.BankAccountType != "Invoice")
                {
                    if (payInfo.AccountName != "Cash" && payInfo.AccountName != "Check" && payInfo.BankAccountType != "Invoice" && payInfo.BankAccountType != "Financed" && payInfo.BankAccountType != "Promo")
                    {
                        CollectedTotal = CollectedTotal + EquepmentTotal;
                    }
                    if (payInfo.BankAccountType == "Promo")
                    {
                        Total = Total - EquepmentTotal;
                    }
                    if (payInfo.RoutingNo != "")
                    {
                        AchPayment = Convert.ToDouble(LabelHelper.FormatAmount(AchPayment + EquepmentTotal));
                    }
                    else if (payInfo.AccountName == "Cash")
                    {
                        //CashPayment = Convert.ToDouble(LabelHelper.FormatAmount(CashPayment + EquepmentTotal));

                    }
                    else if (payInfo.AccountName == "Check")
                    {
                        //CheckPayment = Convert.ToDouble(LabelHelper.FormatAmount(CheckPayment + EquepmentTotal));

                    }
                    else if (payInfo.BankAccountType == "Invoice")
                    {
                        //InvoicePayment = Convert.ToDouble(LabelHelper.FormatAmount(InvoicePayment + serviceTotal));
                    }
                    else if (payInfo.BankAccountType == "Financed")
                    {
                        //FinancedPayment = Convert.ToDouble(LabelHelper.FormatAmount(FinancedPayment + serviceTotal));
                    }
                    else if (payInfo.CardType == "Visa")
                    {
                        CreditCardPayment = Convert.ToDouble(LabelHelper.FormatAmount(CreditCardPayment + EquepmentTotal));
                    }

                }
            }
            ViewBag.UserDiscount = 0.00;
            ViewBag.Total = Total;
            ViewBag.CollectedTotal = CollectedTotal;
            ViewBag.AchPayment = AchPayment;
            ViewBag.CreditCardPayment = CreditCardPayment;
            ViewBag.CashPayment = CashPayment;
            ViewBag.CheckPayment = CheckPayment;
            ViewBag.InvoicePayment = InvoicePayment;
            ViewBag.FinancedPayment = FinancedPayment;
            ViewBag.DiscountMethod = _Util.Facade.LookupFacade.GetLookupByKey("DiscountMethod").Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();

            foreach( CustomerPackageEqp item in Model.CustomerPackageEqpList)
            {
                AdditionalDiscount = item.DiscountInAmount;
                
                if(item.DiscountPercent!=0.0)
                {
                    Model.DiscountType = "percent";
                    ViewBag.AdditionalDiscount = item.DiscountPercent;
                }
                else
                {
                    Model.DiscountType = "amount";
                    ViewBag.AdditionalDiscount = AdditionalDiscount;
                }
                break;
                 
            }
            


            #region PaymentMethods
            /*
             ViewBag.paymentmethodpackage = _Util.Facade.LookupFacade.GetLookupByKey("PaymentMethodPackage").Select(x =>
             new SelectListItem()
             {
                 Text = x.DisplayText.ToString(),
                 Value = x.DataValue.ToString()
             }).ToList();
             ViewBag.paymentmethodfortoday = _Util.Facade.LookupFacade.GetLookupByKey("PaymentMethodForToday").Select(x =>
             new SelectListItem()
             {
                 Text = x.DisplayText.ToString(),
                 Value = x.DataValue.ToString()
             }).ToList();
             ViewBag.paymentmethodrmr = _Util.Facade.LookupFacade.GetLookupByKey("PaymentMethodRMR").Select(x =>
             new SelectListItem()
             {
                 Text = x.DisplayText.ToString(),
                 Value = x.DataValue.ToString()
             }).ToList();
             ViewBag.paymentmethodequipment = _Util.Facade.LookupFacade.GetLookupByKey("PaymentMethodEquipment").Select(x =>
             new SelectListItem()
             {
                 Text = x.DisplayText.ToString(),
                 Value = x.DataValue.ToString()
             }).ToList(); */
            #endregion


            var objsettings = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ACHDiscount");
            if (objsettings != null)
            {
                Model.ACHDiscountVal = objsettings.Value;
            }
            return View(Model);
        }
        [Authorize]
        [HttpPost]
        public JsonResult ReceivePayment(SmartSummaryPayments smartModel)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            if (smartModel.CustomerId == Guid.Empty)
            {
                return Json(new { result = false, message = "Customer not found." });
            }
            Customer Customer = _Util.Facade.CustomerFacade.GetCustomerById(smartModel.CustomerId);
            if (Customer == null)
            {
                return Json(new { result = false, message = "Customer not found." });
            }
            // "MAYUR" : for updatting discount in invoice while capture payment ::start:: added addtional 6 parameters(optional))
            SmartSetupRcvPaymentResponse CapturingResponse = CapturePayment(Customer, CurrentUser.CompanyId.Value, CurrentUser.UserId, CurrentUser.GetFullName(),true,null,smartModel.PaymentInfoDiscountType, smartModel.PaymentInfoDiscountAmount,smartModel.PaymentInfoDiscountPercentage,smartModel.PaymentInfoDiscountQty,smartModel.PaymentInfoTax,smartModel.PaymentInfoFinalAmount);

            if (CapturingResponse.PaymentReceived)
            {
                #region Not required anymore 
                //After you capture payment it shouldn't automatically to customer. Let the user convert the lead to customer from Lead Overview. 
                //CustomerCompany cc = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(Customer.Id);
                //if (cc != null && cc.IsLead == true)
                //{
                //    cc.IsLead = false;
                //    _Util.Facade.CustomerFacade.UpdateCustomerCompany(cc);
                //    FinalMesage += "<br/> Lead converted to customer successfully.";
                //}
                #endregion

                base.AddUserActivityForCustomer("Payment Is Captured For Lead#" + Customer.Id + "</br>" + CapturingResponse.FinalMesage, LabelHelper.ActivityAction.CapturePayment, Customer.CustomerId, null, null);

                return Json(new { result = true, caution = CapturingResponse.Caution, message = CapturingResponse.FinalMesage, customerconvert = false });
            }
            else if (CapturingResponse.Result == false)
            {
                return Json(new { result = CapturingResponse.Result, caution = CapturingResponse.Caution, message = CapturingResponse.FinalMesage });
            }
            return Json(new { result = false, caution = CapturingResponse.Caution, message = "No payment received. " + CapturingResponse.FinalMesage });
        }

        #region CapturePayment
        // "MAYUR" : for updatting discount in invoice while capture payment ::start ::: added 6 parameters
        private SmartSetupRcvPaymentResponse CapturePayment(Customer Customer, Guid CompanyId, Guid UserId, string UserFullName, bool ChargeCC = true, string from = null, string EqpDiscounttype="", double EqpDiscountAmount=0.00, double EqpDiscountPercentage = 0.00, double EqpDiscountQty = 0.00, double EqpTax=0.00, double Eqpfinalamount=0.00)
        {

            Customer.FirstName = Customer.FirstName.Contains("\"") || Customer.FirstName.Contains("'") || Customer.FirstName.Contains("(") || Customer.FirstName.Contains(")")
                ? Customer.FirstName.Replace("\"", "").Replace("'", "").Replace("(", "").Replace(")", "")
                : Customer.FirstName;

            Customer.LastName = Customer.LastName.Contains("\"") || Customer.LastName.Contains("'") || Customer.LastName.Contains("(") || Customer.LastName.Contains(")")
                ? Customer.LastName.Replace("\"", "").Replace("'", "").Replace("(", "").Replace(")", "")
                : Customer.LastName;
            //var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            Company com = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CompanyId);

            SmartSetupRcvPaymentResponse CapturingResponse = new SmartSetupRcvPaymentResponse();

            #region Insert Into Transaction Queue
            string Starttime = DateTime.Now.AddSeconds(-40).ToString("yyyy-MM-dd HH:mm:ss");
            string Endtime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            List<TransactionQueue> transqueList = new List<TransactionQueue>();
            transqueList = _Util.Facade.TransactionFacade.GetTransactionQueueCustomerId(Customer.CustomerId, Starttime, Endtime, 999);
            if (transqueList.Count > 0)
            {
                CapturingResponse = new SmartSetupRcvPaymentResponse()
                {
                    Result = false,
                    PaymentReceived = false,
                    Caution = false,
                    FinalMesage = "A transaction is already processing. Please wait and try again after sometime."
                };
                return CapturingResponse;
            }
            else
            {
                TransactionQueue transque = new TransactionQueue();
                transque.CustomerId = Customer.CustomerId;
                transque.Amount = 999;
                transque.InvoiceId = "Smart setup - Capture payment";
                transque.CreatedBy = UserId;
                transque.CreatedDate = DateTime.Now;
                _Util.Facade.TransactionFacade.InsertTransactionQueue(transque);
            }

            #endregion

            List<PaymentInfoCustomer> PICList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(Customer.CustomerId);
            var IsRMRCreditAdd = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CompanyId, "IsCapturePaymentAmountAddToRMRCredit");
            var IsRMRActice = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CompanyId, "IsRMRActive");
            if (PICList != null && PICList.Count() > 0)
            {
                CapturingResponse.FinalMesage = "<div>";
                Guid CustomerId = new Guid();
                if (Customer != null)
                {
                    CustomerId = Customer.CustomerId;
                }
                var TaxGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByOnlyKey("IsServiceTaxable");
                GlobalSetting GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(CompanyId, CustomerId);
                PaymentInfoCustomer PICService = PICList.Where(x => x.Payfor == "Service").FirstOrDefault();
                PaymentInfoCustomer PICServiceMMR = PICList.Where(x => x.Payfor == "MMR").FirstOrDefault();
                PaymentInfoCustomer PICOnetime = PICList.Where(x => x.Payfor == "Onetime").FirstOrDefault();
                PaymentInfoCustomer PICActivation = PICList.Where(x => x.Payfor == "Activation Fee").FirstOrDefault();
                PaymentInfoCustomer PICEquipment = PICList.Where(x => x.Payfor == "Equipment").FirstOrDefault();
                bool PaymentAttemptService = false;
                bool PaymentAttemptEquipment = false;
                bool PaymentAttemptActivation = false;

                ReceivePaymentResponse response = new ReceivePaymentResponse();
                ReceivePaymentResponse responseForActivation = new ReceivePaymentResponse();
                ReceivePaymentResponse responseForService = new ReceivePaymentResponse();
                ReceivePaymentResponse responseForEquipment = new ReceivePaymentResponse();
                PackageCustomer PackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(Customer.CustomerId);
                string Description = "Payment for package activation & service";
                string PaymentMethod = "";
                string CapturePaymentLogMessage = "";

                #region Makedecision For Same Account Charges
                bool ServiceActivationSame = false;//If the Service And Activation Fee has same payment info
                bool ServiceEquipmentSame = false;//If the Service And Equipment Fee has same payment info
                bool EquipmentActivationSame = false;//If the Equipment And Activation Fee has same payment info

                if (PICService != null && PICActivation != null && PICService.PaymentInfoId == PICActivation.PaymentInfoId)
                {
                    ServiceActivationSame = true;
                }
                if (PICService != null && PICEquipment != null && PICService.PaymentInfoId == PICEquipment.PaymentInfoId)
                {
                    ServiceEquipmentSame = true;
                }
                if (PICActivation != null && PICEquipment != null && PICActivation.PaymentInfoId == PICEquipment.PaymentInfoId)
                {
                    EquipmentActivationSame = true;
                }
                #endregion


                //if the payment info is same we are charging the amounts in a single invoice.
                #region Charge ACH/CC if matches
                if (ServiceActivationSame || ServiceEquipmentSame || EquipmentActivationSame)
                {
                    PaymentInfo Pinfo = new PaymentInfo();

                    if (EquipmentActivationSame)
                    {
                        Pinfo = _Util.Facade.PaymentInfoFacade.GetPaymentInfoById(PICActivation.PaymentInfoId);
                    }
                    else
                    {
                        //if EquipmentActivationSame is not same than ServiceEquipmentSame must be same.
                        Pinfo = _Util.Facade.PaymentInfoFacade.GetPaymentInfoById(PICService.PaymentInfoId);
                    }

                    if (Pinfo != null && (Pinfo.IsACH() || Pinfo.IsCC()) && ChargeCC)
                    {
                        double TotalActivationfee = 0;
                        double TotalServiceCost = 0;
                        double TotalEquipmentFee = 0;

                        #region Calculate Activation Amount
                        if (ServiceActivationSame || EquipmentActivationSame)
                        {
                            PaymentAttemptActivation = true;

                            //Checking if the activation fee is already collected or not
                            if (PICActivation.IsPaid == null || PICActivation.IsPaid == false)
                            {
                                #region Activation fee calculation 
                                double Activationfee = PackageCustomer.ActivationFee.HasValue ? PackageCustomer.ActivationFee.Value : 0.0;
                                double NonConformingFee = PackageCustomer.NonConformingFee.HasValue ? PackageCustomer.NonConformingFee.Value : 0.0;
                                #region Tax Calculations
                                double PackageTax = 0;
                                if (GetSalesTax != null)
                                {
                                    double PackageEquipTaxAmount = Math.Round(((Activationfee + NonConformingFee) * Convert.ToDouble(GetSalesTax.Value)) / 100, 2, MidpointRounding.AwayFromZero);
                                    PackageTax = PackageEquipTaxAmount;
                                }
                                #endregion
                                TotalActivationfee = (Activationfee + NonConformingFee) + PackageTax;
                                #endregion
                            }
                        }
                        #endregion

                        #region Calculate Service Amount
                        if (ServiceActivationSame || ServiceEquipmentSame)
                        {
                            PaymentAttemptService = true;

                            //Checking if the activation fee is already collected or not
                            if (PICService.IsPaid == null || PICService.IsPaid == false)
                            {
                                #region Service Fee Calculation
                                List<CustomerPackageService> CustomerPackageServiceList = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(Customer.CustomerId, CompanyId);
                                double? ServiceCost = CustomerPackageServiceList.Where(x => x.IsARBEnabled).Sum(x => x.Total);

                                GlobalSetting AchDiscount = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CompanyId, "ACHDiscount");
                                double DiscountAmount = 0;
                                if (ServiceCost.HasValue && ServiceCost.Value > 0 && Pinfo.IsACH() && AchDiscount != null && double.TryParse(AchDiscount.Value, out DiscountAmount) && DiscountAmount > 0)
                                {
                                    ServiceCost = ServiceCost.Value - DiscountAmount;
                                }

                                double ServiceCostTax = 0;

                                if (ServiceCost.HasValue && ServiceCost.Value > 0)
                                {
                                    #region Tax Calculations

                                    if (GetSalesTax != null)
                                    {
                                        ServiceCostTax = (ServiceCost.Value * Convert.ToDouble(GetSalesTax.Value)) / 100;
                                    }
                                    #endregion
                                }
                                TotalServiceCost = (ServiceCost.Value + ServiceCostTax) * (PICService.ForMonths.HasValue ? PICService.ForMonths.Value : 1);

                                #endregion
                            }
                        }
                        #endregion

                        #region Calculate Equipment Amount
                        if (EquipmentActivationSame || ServiceEquipmentSame)
                        {
                            PaymentAttemptEquipment = true;

                            if (PICEquipment.IsPaid == null || PICEquipment.IsPaid == false)
                            {
                                #region Equipment Feee Calculation

                                List<CustomerPackageEqp> CustomerPackageEqpList = _Util.Facade.CustomerFacade.IsLeadAppointmentEquipmentExistCheckCustomerPackageEqp(Customer.CustomerId, CompanyId);
                                double? EqpCost = CustomerPackageEqpList.Sum(x => x.Total);
                                double EqpCostTax = 0;

                                #region Equipemnt Tax Calculations 
                                if (GetSalesTax != null)
                                {
                                    double PackageEquipTaxAmount = Math.Round((EqpCost.Value * Convert.ToDouble(GetSalesTax.Value)) / 100, 2, MidpointRounding.AwayFromZero);
                                    EqpCostTax = PackageEquipTaxAmount;
                                }
                                #endregion

                                TotalEquipmentFee = EqpCost.Value + EqpCostTax;

                                #endregion
                            }

                        }
                        #endregion

                        #region One Time Service Fee Calculation
                        Double TotalCollectableAmount = TotalActivationfee + TotalServiceCost + TotalEquipmentFee;
                        #endregion

                        if (TotalCollectableAmount > 0)
                        {
                            #region Ach
                            ACHInfo ach = new ACHInfo()
                            {
                                RoutingNo = Pinfo.RoutingNo,
                                AccountNo = Pinfo.AcountNo,
                                AccountType = Pinfo.BankAccountType,
                                ECheckType = Pinfo.EcheckType,
                                BankName = Pinfo.BankName,
                                AccountName = Pinfo.AccountName,

                                Amount = TotalCollectableAmount,
                                FirstName = Customer.FirstName,
                                Lastname = Customer.LastName,
                                //InvoiceNo = inv.InvoiceId,
                                Description = Description,
                                CustomerId = Customer.Id.ToString(),
                                EmailAddress = Customer.EmailAddress

                            };
                            #endregion

                            #region Card
                            CardInfo card = new CardInfo()
                            {
                                CardNumber = DESEncryptionDecryption.DecryptCipherTextToPlainText(Pinfo.CardNumber),
                                ExpiredDate = Pinfo.CardExpireDate,
                                NameOnCard = Pinfo.AccountName,
                                SecurityCode = DESEncryptionDecryption.DecryptCipherTextToPlainText(Pinfo.CardSecurityCode),
                                CardType = Pinfo.CardType,
                                Amount = TotalCollectableAmount,
                                FirstName = Customer.FirstName,
                                Lastname = Customer.LastName,
                                //InvoiceNo = inv.InvoiceId,
                                Description = Description,
                                CustomerId = Customer.Id.ToString(),
                                EmailAddress = Customer.EmailAddress
                            };
                            #endregion

                            #region Payment Method 
                            //string PaymentMethod = "";
                            if (!string.IsNullOrWhiteSpace(card.CardNumber) && !string.IsNullOrWhiteSpace(card.ExpiredDate) && !string.IsNullOrWhiteSpace(card.SecurityCode))
                            {
                                PaymentMethod = LabelHelper.PaymentMethod.CreditCard;
                            }
                            else if (!string.IsNullOrWhiteSpace(ach.AccountNo) && !string.IsNullOrWhiteSpace(ach.RoutingNo) && !string.IsNullOrWhiteSpace(ach.AccountName))
                            {
                                PaymentMethod = LabelHelper.PaymentMethod.ACH;
                            }
                            #endregion

                            #region Payment For Commons (Payment for package activation & service)
                            ReceivePaymentModel ReceivePayment = new ReceivePaymentModel()
                            {
                                ACHInfo = ach,
                                CardInfo = card,
                                CompanyId = CompanyId,
                                CompanyName = com.CompanyName,
                                CustomerGId = Customer.CustomerId,
                                CustomerId = Customer.Id,
                                PaymentMethod = PaymentMethod,
                                //InvoiceList = inv.InvoiceId,
                                Description = Description,
                            };

                            response = _Util.Facade.ReceivePaymentFacade.ReceivePayment(ReceivePayment);

                            if (EquipmentActivationSame && ServiceActivationSame)
                            {
                                responseForActivation = response;
                                responseForService = response;
                                responseForEquipment = response;
                            }
                            else if (EquipmentActivationSame)
                            {
                                responseForEquipment = response;
                                responseForActivation = response;
                            }
                            else if (ServiceActivationSame)
                            {
                                responseForService = response;
                                responseForActivation = response;
                            }
                            else if (ServiceEquipmentSame)
                            {
                                responseForService = response;
                                responseForEquipment = response;
                            }

                            #endregion
                        }

                    }
                }
                #endregion

                #region Activation Fee Capture

                //PaymentInfoCustomer PIC = PICList.Where(x => x.Payfor == "Activation Fee").FirstOrDefault();

                if (PICActivation != null && (PICActivation.IsPaid == null || PICActivation.IsPaid == false))
                {

                    double Activationfee = PackageCustomer.ActivationFee.HasValue ? PackageCustomer.ActivationFee.Value : 0.0;
                    double NonConformingFee = PackageCustomer.NonConformingFee.HasValue ? PackageCustomer.NonConformingFee.Value : 0.0;
                    if ((Activationfee + NonConformingFee) > 0)
                    {
                        #region Package Payments

                        #region Tax Calculations
                        double PackageTax = 0;
                        if (GetSalesTax != null)
                        {
                            double PackageEquipTaxAmount = Math.Round(((Activationfee + NonConformingFee) * Convert.ToDouble(GetSalesTax.Value)) / 100, 2, MidpointRounding.AwayFromZero);
                            PackageTax = PackageEquipTaxAmount;
                        }
                        #endregion

                        PaymentInfo Pinfo = _Util.Facade.PaymentInfoFacade.GetPaymentInfoById(PICActivation.PaymentInfoId);
                        if (Pinfo != null)
                        {
                            PaymentProfileCustomer objpayprofile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(Pinfo.Id);
                            if (objpayprofile != null)
                            {
                                Description = "Payment for package activation";

                                #region Invoice
                                Invoice inv = new Invoice()
                                {
                                    Amount = (Activationfee + NonConformingFee),
                                    BalanceDue = 0,
                                    Tax = PackageTax,
                                    TotalAmount = (Activationfee + NonConformingFee) + PackageTax,
                                    InvoiceFor = LabelHelper.InvoiceFor.ActivationNonConforming,
                                    CompanyId = CompanyId,
                                    CustomerId = Customer.CustomerId,
                                    CreatedBy = User.Identity.Name,
                                    CreatedByUid = UserId,
                                    DueDate = DateTime.Now.AddDays(7).UTCCurrentTime(),
                                    InvoiceDate = DateTime.Now.UTCCurrentTime(),
                                    Balance = 0,
                                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                                    Description = Description,
                                    IsEstimate = false,
                                    LastUpdatedByUid = UserId,
                                    LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                                    Status = LabelHelper.InvoiceStatus.Init,
                                    PaymentType = objpayprofile.Type,


                                };
                                inv.Id = _Util.Facade.InvoiceFacade.InsertInvoice(inv);
                                inv.InvoiceId = inv.Id.GenerateInvoiceNo();
                                _Util.Facade.InvoiceFacade.UpdateInvoice(inv);


                                InvoiceDetail invdet = new InvoiceDetail()
                                {
                                    CompanyId = CompanyId,
                                    CreatedBy = User.Identity.Name,
                                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                                    InvoiceId = inv.InvoiceId,
                                    Quantity = 1,
                                    EquipName = "Activation fee",
                                    EquipDetail = "",
                                    EquipmentId = Guid.Empty,
                                    UnitPrice = (Activationfee),
                                    TotalPrice = (Activationfee),
                                    Taxable = true,
                                };
                                _Util.Facade.InvoiceFacade.InsertInvoiceDetails(invdet);

                                invdet = new InvoiceDetail()
                                {
                                    CompanyId = CompanyId,
                                    CreatedBy = User.Identity.Name,
                                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                                    InvoiceId = inv.InvoiceId,
                                    Quantity = 1,
                                    EquipName = "Non Conforming Fee",
                                    EquipDetail = "",
                                    EquipmentId = Guid.Empty,
                                    UnitPrice = (NonConformingFee),
                                    TotalPrice = (NonConformingFee),
                                    Taxable = true,
                                };
                                _Util.Facade.InvoiceFacade.InsertInvoiceDetails(invdet);
                                #endregion

                                if (!string.IsNullOrEmpty(from) && from == "menual")
                                {
                                    inv.Status = LabelHelper.InvoiceStatus.Open;
                                    inv.BalanceDue = inv.TotalAmount;
                                    _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                }
                                else
                                {
                                    #region Payments
                                    //For charge CC 
                                    if (Pinfo.AccountName == LabelHelper.PaymentMethod.Check || Pinfo.AccountName == LabelHelper.PaymentMethod.Cash || Pinfo.AccountName == LabelHelper.PaymentMethod.Promo)
                                    {
                                        #region Updating Data
                                        CapturingResponse.FinalMesage += "<br/><span class='successIcon'><i class='fa fa-check'></i></span> <b>Package:</b> Activation payment received successfully. ";
                                        CapturingResponse.PaymentReceived = true;
                                        string TempStatus = inv.Status;
                                        inv.Status = LabelHelper.InvoiceStatus.Paid;
                                        _Util.Facade.InvoiceFacade.UpdateInvoice(inv);

                                        if (inv != null && TempStatus != inv.Status)
                                        {
                                            bool newBool = inv.IsARBInvoice ?? false;

                                            #region log
                                            UserActivity ua = new UserActivity()
                                            {
                                                ActivityId = Guid.NewGuid(),
                                                PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                                ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                                // new paramiter
                                                Action = "2522,CapturePayment,SmartLeads",
                                                StatsDate = DateTime.UtcNow,
                                                UserId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                UserName = Customer.FirstName + " " + Customer.LastName,
                                                ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + inv.Status + " #InvoiceId: " + inv.InvoiceId,
                                                IsARB = newBool,

                                                UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                                UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                            };
                                            Guid ActivityID = ua.ActivityId;
                                            _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                            UserActivityCustomer uac = new UserActivityCustomer()
                                            {
                                                ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                                CustomerId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                RefId = inv.InvoiceId,

                                            };
                                            _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                            #endregion
                                        }

                                        PICActivation.IsPaid = true;
                                        PICActivation.InvoiceId = inv.InvoiceId;
                                        _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PICActivation);
                                        #endregion

                                        #region Insert Transaction
                                        Transaction tr = new Transaction()
                                        {
                                            CompanyId = CompanyId,
                                            CustomerId = Customer.CustomerId,
                                            Type = "Payment",
                                            Amount = (Activationfee + NonConformingFee) + PackageTax,
                                            Status = "Closed",
                                            AddedBy = User.Identity.Name,
                                            AddedDate = DateTime.Now.UTCCurrentTime(),
                                            CreatedBy = UserId,
                                            PaymentMethod = Pinfo.AccountName,
                                            CheckNo = Pinfo.CheckNo,
                                            ReferenceNo = inv.InvoiceId,
                                            TransacationDate = DateTime.Now.UTCCurrentTime()

                                        };
                                        tr.Id = _Util.Facade.TransactionFacade.InsertTransaction(tr);
                                        TransactionHistory trh = new TransactionHistory()
                                        {
                                            Amout = (Activationfee + NonConformingFee) + PackageTax,
                                            Balance = (Activationfee + NonConformingFee) + PackageTax,
                                            CustomerName = Customer.FirstName + " " + Customer.LastName,
                                            InvoiceId = inv.Id,
                                            TransactionId = tr.Id,
                                            ReceivedBy = UserId,
                                            TransacationDate = DateTime.Now.UTCCurrentTime(),
                                            InvoiceNumber = inv.InvoiceId,
                                            InvoiceBalanceDue = inv.BalanceDue.Value,
                                            InvoiceTotal = inv.TotalAmount.Value,
                                        };
                                        trh.Id = _Util.Facade.TransactionFacade.InsertTransactionHistory(trh);
                                        #endregion
                                    }
                                    else if (Pinfo.AccountName == LabelHelper.PaymentMethod.Invoice || Pinfo.AccountName == LabelHelper.PaymentMethod.Financed || ChargeCC == false)
                                    {
                                        #region Payment Method Invoice
                                        CapturingResponse.PaymentReceived = true;
                                        string TempStatus = inv.Status;
                                        inv.Status = LabelHelper.InvoiceStatus.Open;
                                        inv.BalanceDue = inv.TotalAmount;
                                        _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                        if (inv != null && TempStatus != inv.Status)
                                        {
                                            bool newBool = inv.IsARBInvoice ?? false;

                                            #region log
                                            UserActivity ua = new UserActivity()
                                            {
                                                ActivityId = Guid.NewGuid(),
                                                PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                                ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                                // new paramiter
                                                Action = "2604,CapturePayment,SmartLeads",
                                                StatsDate = DateTime.UtcNow,
                                                UserId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                UserName = Customer.FirstName + " " + Customer.LastName,
                                                ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + inv.Status + " #InvoiceId: " + inv.InvoiceId,
                                                IsARB = newBool,

                                                UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                                UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                            };
                                            Guid ActivityID = ua.ActivityId;
                                            _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                            UserActivityCustomer uac = new UserActivityCustomer()
                                            {
                                                ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                                CustomerId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                RefId = inv.InvoiceId,

                                            };
                                            _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                            #endregion
                                        }
                                        CapturingResponse.FinalMesage += string.Format("<br/><span class='successIcon'><i class='fa fa-check'></i></span> <b>Package:</b> Invoice {0} has been created.", inv.InvoiceId);
                                        PICActivation.IsPaid = true;
                                        PICActivation.InvoiceId = inv.InvoiceId;
                                        PICActivation.Comment = "<span class='inv_created'>Invoice Created</span>";
                                        _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PICActivation);

                                        #endregion
                                    }
                                    else if (ChargeCC)
                                    {
                                        if (!PaymentAttemptActivation)
                                        {
                                            #region Ach
                                            ACHInfo ach = new ACHInfo()
                                            {
                                                RoutingNo = Pinfo.RoutingNo,
                                                AccountNo = Pinfo.AcountNo,
                                                AccountType = Pinfo.BankAccountType,
                                                ECheckType = Pinfo.EcheckType,
                                                BankName = Pinfo.BankName,
                                                AccountName = Pinfo.AccountName,

                                                Amount = (Activationfee + NonConformingFee) + PackageTax,
                                                FirstName = Customer.FirstName,
                                                Lastname = Customer.LastName,
                                                InvoiceNo = inv.InvoiceId,
                                                Description = Description,
                                                CustomerId = Customer.Id.ToString(),
                                                EmailAddress = Customer.EmailAddress

                                            };
                                            #endregion

                                            #region Card
                                            CardInfo card = new CardInfo()
                                            {
                                                CardNumber = DESEncryptionDecryption.DecryptCipherTextToPlainText(Pinfo.CardNumber),
                                                ExpiredDate = Pinfo.CardExpireDate,
                                                NameOnCard = Pinfo.AccountName,
                                                SecurityCode = DESEncryptionDecryption.DecryptCipherTextToPlainText(Pinfo.CardSecurityCode),
                                                CardType = Pinfo.CardType,
                                                Amount = (Activationfee + NonConformingFee) + PackageTax,
                                                FirstName = Customer.FirstName,
                                                Lastname = Customer.LastName,
                                                InvoiceNo = inv.InvoiceId,
                                                Description = Description,
                                                CustomerId = Customer.Id.ToString(),
                                                EmailAddress = Customer.EmailAddress
                                            };
                                            #endregion

                                            #region Payment Method 
                                            //string PaymentMethod = "";
                                            if (!string.IsNullOrWhiteSpace(card.CardNumber) && !string.IsNullOrWhiteSpace(card.ExpiredDate) && !string.IsNullOrWhiteSpace(card.SecurityCode))
                                            {
                                                PaymentMethod = LabelHelper.PaymentMethod.CreditCard;
                                            }
                                            else if (!string.IsNullOrWhiteSpace(ach.AccountNo) && !string.IsNullOrWhiteSpace(ach.RoutingNo) && !string.IsNullOrWhiteSpace(ach.AccountName))
                                            {
                                                PaymentMethod = LabelHelper.PaymentMethod.ACH;
                                            }

                                            #endregion

                                            #region Payment For Activation
                                            ReceivePaymentModel ReceivePayment = new ReceivePaymentModel()
                                            {
                                                ACHInfo = ach,
                                                CardInfo = card,
                                                CompanyId = CompanyId,
                                                CompanyName = com.CompanyName,
                                                CustomerGId = Customer.CustomerId,
                                                CustomerId = Customer.Id,
                                                PaymentMethod = PaymentMethod,
                                                InvoiceList = inv.InvoiceId,
                                                Description = Description,
                                            };
                                            responseForActivation = _Util.Facade.ReceivePaymentFacade.ReceivePayment(ReceivePayment);
                                            #endregion


                                        }
                                        #region after Payments
                                        if (responseForActivation.TransactionSuccess)
                                        {
                                            #region If Package Payment Successful
                                            CapturingResponse.FinalMesage += "<br/><span class='successIcon'><i class='fa fa-check'></i></span> <b>Package:</b> Activation payment received successfully. ";
                                            CapturingResponse.PaymentReceived = true;
                                            string TempStatus = inv.Status;
                                            inv.Status = LabelHelper.InvoiceStatus.Paid;
                                            _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                            if (inv != null && TempStatus != inv.Status)
                                            {
                                                bool newBool = inv.IsARBInvoice ?? false;

                                                #region log
                                                UserActivity ua = new UserActivity()
                                                {
                                                    ActivityId = Guid.NewGuid(),
                                                    PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                                    ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                                    // new paramiter
                                                    Action = "2729,CapturePayment,SmartLeads",
                                                    StatsDate = DateTime.UtcNow,
                                                    UserId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                    UserName = Customer.FirstName + " " + Customer.LastName,
                                                    ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + inv.Status + " #InvoiceId: " + inv.InvoiceId,
                                                    IsARB = newBool,

                                                    UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                                    UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                                };
                                                Guid ActivityID = ua.ActivityId;
                                                _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                                UserActivityCustomer uac = new UserActivityCustomer()
                                                {
                                                    ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                                    CustomerId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                    RefId = inv.InvoiceId,

                                                };
                                                _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                                #endregion
                                            }
                                            PICActivation.IsPaid = true;
                                            PICActivation.InvoiceId = inv.InvoiceId;
                                            PICActivation.Comment = "<span class='received'>Payment Received.</span>";
                                            _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PICActivation);

                                            Transaction tr = new Transaction()
                                            {
                                                CompanyId = CompanyId,
                                                CustomerId = Customer.CustomerId,
                                                Type = "Payment",
                                                Amount = (Activationfee + NonConformingFee) + PackageTax,
                                                Status = "Closed",
                                                AddedBy = User.Identity.Name,
                                                AddedDate = DateTime.Now.UTCCurrentTime(),
                                                CreatedBy = UserId,
                                                CardTransactionId = responseForActivation.TransactionId,
                                                PaymentMethod = PaymentMethod,
                                                ReferenceNo = inv.InvoiceId,
                                                TransacationDate = DateTime.Now.UTCCurrentTime()

                                            };
                                            tr.Id = _Util.Facade.TransactionFacade.InsertTransaction(tr);
                                            #region Log for Payment received for package
                                            CapturePaymentLogMessage = "Capture payment received for packages by " + PaymentMethod;
                                            base.AddUserActivityForCustomer(CapturePaymentLogMessage, LabelHelper.ActivityAction.CapturePayment, Customer.CustomerId, null, null);
                                            #endregion
                                            TransactionHistory trh = new TransactionHistory()
                                            {
                                                Amout = (Activationfee + NonConformingFee) + PackageTax,
                                                Balance = (Activationfee + NonConformingFee) + PackageTax,
                                                CustomerName = Customer.FirstName + " " + Customer.LastName,
                                                InvoiceId = inv.Id,
                                                TransactionId = tr.Id,
                                                ReceivedBy = UserId,
                                                TransacationDate = DateTime.Now.UTCCurrentTime(),
                                                InvoiceNumber = inv.InvoiceId,
                                                InvoiceBalanceDue = inv.BalanceDue.Value,
                                                InvoiceTotal = inv.TotalAmount.Value,
                                            };
                                            trh.Id = _Util.Facade.TransactionFacade.InsertTransactionHistory(trh);
                                            #endregion
                                        }
                                        else
                                        {
                                            PICActivation.Comment = "<span class='decline'>Payment Declined.</span>";
                                            _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PICActivation);
                                            CapturingResponse.Caution = true;
                                            string TempStatus = inv.Status;
                                            inv.Status = LabelHelper.InvoiceStatus.Init;
                                            inv.BalanceDue = inv.TotalAmount;
                                            _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                            if (inv != null && TempStatus != inv.Status)
                                            {
                                                bool newBool = inv.IsARBInvoice ?? false;

                                                #region log
                                                UserActivity ua = new UserActivity()
                                                {
                                                    ActivityId = Guid.NewGuid(),
                                                    PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                                    ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                                    // new paramiter
                                                    Action = "2814,CapturePayment,SmartLeads",
                                                    StatsDate = DateTime.UtcNow,
                                                    UserId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                    UserName = Customer.FirstName + " " + Customer.LastName,
                                                    ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + inv.Status + " #InvoiceId: " + inv.InvoiceId,
                                                    IsARB = newBool,

                                                    UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                                    UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                                };
                                                Guid ActivityID = ua.ActivityId;
                                                _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                                UserActivityCustomer uac = new UserActivityCustomer()
                                                {
                                                    ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                                    CustomerId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                    RefId = inv.InvoiceId,

                                                };
                                                _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                                #endregion
                                            }
                                            CapturingResponse.FinalMesage += "<br/><span class='errorIcon'><i class='fa fa-times'></i></span> <b>Package:</b> " + responseForActivation.Message;
                                        }
                                        #endregion
                                    }
                                    if (inv.Status != LabelHelper.InvoiceStatus.Init)
                                    {
                                        #region CustomerSnapShot
                                        CustomerSnapshot objCustomerSnapshot = new CustomerSnapshot
                                        {
                                            CustomerId = Customer.CustomerId,
                                            CompanyId = CompanyId,
                                            Description = "Invoice " + string.Format("<a onclick=OpenTopToBottomModal('{2}/Invoice/AddInvoice?id={0}&CustomerId={1}') style='cursor: pointer;'>", inv.Id, Customer.Id, Customer.CustomerId, AppConfig.DomainSitePath) + "<b>" + inv.InvoiceId + "</b>" + "</a>",
                                            Logdate = DateTime.Now.UTCCurrentTime(),
                                            Updatedby = UserFullName,
                                            Type = "InvoiceCreated"
                                        };
                                        _Util.Facade.CustomerSnapshotFacade.InsertSnapshot(objCustomerSnapshot);
                                        #endregion
                                    }

                                    #endregion
                                }
                            }
                        }
                        #endregion
                    }



                }
                #endregion

                #region Labour Fee
                List<Invoice> invoiceList = _Util.Facade.InvoiceFacade.GetAllInvoiceByCustomerIdandInvoiceFor(CustomerId, "LaborFee");
                if (invoiceList != null && invoiceList.Count > 0)
                {

                }
                else
                {
                    GlobalSetting glbsFee = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CompanyId, "HasLabourFee");
                    if (glbsFee != null && glbsFee.Value == "true" && PackageCustomer.LabourFee > 0)
                    {
                        PackageCustomer.LabourFee = PackageCustomer.LabourFee != null ? PackageCustomer.LabourFee : 0.0;
                        Description = "Payment for Labour Fee";
                        #region Invoice
                        Invoice invLabour = new Invoice()
                        {
                            Amount = (PackageCustomer.LabourFee.Value),
                            BalanceDue = PackageCustomer.LabourFee,
                            Tax = 0.0,
                            TotalAmount = PackageCustomer.LabourFee,
                            InvoiceFor = LabelHelper.InvoiceFor.LaborFee,
                            CompanyId = CompanyId,
                            CustomerId = Customer.CustomerId,
                            CreatedBy = User.Identity.Name,
                            CreatedByUid = UserId,
                            DueDate = DateTime.Now.AddDays(7).UTCCurrentTime(),
                            InvoiceDate = DateTime.Now.UTCCurrentTime(),
                            Balance = 0,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            Description = Description,
                            IsEstimate = false,
                            LastUpdatedByUid = UserId,
                            LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                            Status = LabelHelper.InvoiceStatus.Open,


                        };
                        invLabour.Id = _Util.Facade.InvoiceFacade.InsertInvoice(invLabour);
                        invLabour.InvoiceId = invLabour.Id.GenerateInvoiceNo();
                        _Util.Facade.InvoiceFacade.UpdateInvoice(invLabour);


                        InvoiceDetail invLabourdet = new InvoiceDetail()
                        {
                            CompanyId = CompanyId,
                            CreatedBy = User.Identity.Name,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            InvoiceId = invLabour.InvoiceId,
                            Quantity = 1,
                            EquipName = "Labour fee",
                            EquipDetail = "",
                            EquipmentId = Guid.Empty,
                            UnitPrice = (PackageCustomer.LabourFee),
                            TotalPrice = (PackageCustomer.LabourFee),
                            Taxable = false,
                        };
                        _Util.Facade.InvoiceFacade.InsertInvoiceDetails(invLabourdet);
                        CapturingResponse.FinalMesage += string.Format("<br/><span class='successIcon'><i class='fa fa-check'></i></span> <b>Labor Fee:</b> Invoice {0} has been created.", invLabour.InvoiceId);
                        #endregion


                    }
                }


                #endregion

                //From 5-14-2019 Decision - Check and Cash will be also treated as Invoice 
                #region Service Charge Capture
                bool IsPromoPayMethod = false;
                //PIC = PICList.Where(x => x.Payfor == "Service").FirstOrDefault();
                if (PICService != null && (PICService.IsPaid == null || PICService.IsPaid == false) && PICService.ForMonths > 0)
                {
                    List<CustomerPackageService> CustomerPackageServiceList = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(Customer.CustomerId, CompanyId);
                    double? ServiceCost = CustomerPackageServiceList.Where(x => x.IsARBEnabled).Sum(x => x.Total);

                    double ServiceCostTax = 0;
                    if (ServiceCost.HasValue && ServiceCost.Value > 0)
                    {
                        #region Service Payments

                        PaymentInfo Pinfo = _Util.Facade.PaymentInfoFacade.GetPaymentInfoById(PICService.PaymentInfoId);
                        if (Pinfo != null)
                        {
                            GlobalSetting AchDiscount = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CompanyId, "ACHDiscount");
                            double DiscountAmount = 0;
                            if (Pinfo.IsACH() && AchDiscount != null && double.TryParse(AchDiscount.Value, out DiscountAmount) && DiscountAmount > 0)
                            {
                                ServiceCost = ServiceCost.Value - DiscountAmount;
                            }
                            #region Tax Calculations
                            if (TaxGlobal != null && TaxGlobal.Value.ToLower() == "true")
                            {
                                if (GetSalesTax != null)
                                {
                                    ServiceCostTax = (ServiceCost.Value * Convert.ToDouble(GetSalesTax.Value)) / 100;
                                }
                            }
                            else
                            {
                                ServiceCostTax = 0.00;
                            }
                            #endregion

                            PaymentProfileCustomer objpayprofile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(Pinfo.Id);
                            if (objpayprofile != null)
                            {
                                Description = string.Format("Payment for services ({0}) months", PICService.ForMonths);

                                #region Invoice
                                Invoice inv = new Invoice()
                                {
                                    Amount = ServiceCost.Value,
                                    BalanceDue = 0,
                                    Tax = ServiceCostTax * PICService.ForMonths,
                                    TotalAmount = (ServiceCost + ServiceCostTax) * PICService.ForMonths,
                                    InvoiceFor = LabelHelper.InvoiceFor.Service,
                                    CompanyId = CompanyId,
                                    CustomerId = Customer.CustomerId,
                                    CreatedBy = User.Identity.Name,
                                    CreatedByUid = UserId,
                                    DueDate = DateTime.Now.AddDays(7).UTCCurrentTime(),
                                    InvoiceDate = DateTime.Now.UTCCurrentTime(),
                                    Balance = 0,
                                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                                    Description = Description,
                                    IsEstimate = false,
                                    LastUpdatedByUid = UserId,
                                    LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                                    Status = LabelHelper.InvoiceStatus.Init,
                                    PaymentType = objpayprofile.Type,
                                    DiscountType = "amount",
                                    Discountpercent = 0,
                                    DiscountAmount = DiscountAmount * PICService.ForMonths,
                                    InstallationType = PICService.Payfor
                                };
                                inv.Id = _Util.Facade.InvoiceFacade.InsertInvoice(inv);
                                inv.InvoiceId = inv.Id.GenerateInvoiceNo();
                                //if (IsRMRActice != null && IsRMRActice.Value.ToLower() == "true")
                                //{
                                //    string paymentType = objpayprofile.Type.Substring(0, 3);
                                //    if (paymentType.ToLower() == "cc_") { inv.InvoiceFor = LabelHelper.InvoiceFor.CreditCard; }
                                //    else if (paymentType.ToLower() == "ach") { inv.InvoiceFor = LabelHelper.InvoiceFor.ACH; }
                                //    inv.IsARBInvoice = true;
                                //}
                                _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                foreach (var item in CustomerPackageServiceList.Where(x => x.IsARBEnabled).ToList())
                                {
                                    InvoiceDetail invdet = new InvoiceDetail()
                                    {
                                        CompanyId = CompanyId,
                                        CreatedBy = User.Identity.Name,
                                        CreatedDate = DateTime.Now.UTCCurrentTime(),

                                        InvoiceId = inv.InvoiceId,
                                        Quantity = PICService.ForMonths,
                                        EquipName = item.EquipmentServiceName,
                                        EquipDetail = "",
                                        EquipmentId = item.EquipmentId,
                                        UnitPrice = item.Total,
                                        TotalPrice = (item.Total * PICService.ForMonths),
                                        DiscountAmount = item.DiscountRate
                                    };




                                    if (TaxGlobal != null && TaxGlobal.Value.ToLower() == "true")
                                    {
                                        invdet.Taxable = true;
                                    }
                                    else
                                    {
                                        invdet.Taxable = false;
                                    }
                                    _Util.Facade.InvoiceFacade.InsertInvoiceDetails(invdet);
                                }
                                #endregion

                                if (!string.IsNullOrEmpty(from) && from == "menual")
                                {
                                    inv.Status = LabelHelper.InvoiceStatus.Open;
                                    inv.BalanceDue = inv.TotalAmount;
                                    _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                }
                                else
                                {
                                    #region Payments
                                    //for capture payment check and cash will be paid
                                    if (Pinfo.AccountName == LabelHelper.PaymentMethod.Check || Pinfo.AccountName == LabelHelper.PaymentMethod.Cash || Pinfo.AccountName == LabelHelper.PaymentMethod.Promo)
                                    {
                                        #region Updating Data
                                        CapturingResponse.FinalMesage += "<br/><span class='successIcon'><i class='fa fa-check'></i></span> <b>Service:</b> Payment received successfully. ";
                                        CapturingResponse.PaymentReceived = true;
                                        string TempStatus = inv.Status;
                                        if (IsRMRCreditAdd != null && IsRMRCreditAdd.Value.ToLower() == "true")
                                        {
                                            if (inv.IsARBInvoice.HasValue && inv.IsARBInvoice.Value)
                                            {
                                                inv.Status = LabelHelper.InvoiceStatus.Open;
                                                inv.BalanceDue += Math.Round(ServiceCost.Value + ServiceCostTax, 2);
                                                _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                            }
                                            else
                                            {
                                                inv.Status = LabelHelper.InvoiceStatus.Paid;
                                                _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                            }
                                        }
                                        else
                                        {
                                            inv.Status = LabelHelper.InvoiceStatus.Paid;
                                            _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                        }
                                        if (inv != null && TempStatus != inv.Status)
                                        {
                                            bool newBool = inv.IsARBInvoice ?? false;

                                            #region log
                                            UserActivity ua = new UserActivity()
                                            {
                                                ActivityId = Guid.NewGuid(),
                                                PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                                ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                                // new paramiter
                                                Action = "3067,CapturePayment,SmartLeads",
                                                StatsDate = DateTime.UtcNow,
                                                UserId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                UserName = Customer.FirstName + " " + Customer.LastName,
                                                ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + inv.Status + " #InvoiceId: " + inv.InvoiceId,
                                                IsARB = newBool,

                                                UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                                UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                            };
                                            Guid ActivityID = ua.ActivityId;
                                            _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                            UserActivityCustomer uac = new UserActivityCustomer()
                                            {
                                                ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                                CustomerId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                RefId = inv.InvoiceId,

                                            };
                                            _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                            #endregion
                                        }
                                        PICService.IsPaid = true;
                                        PICService.InvoiceId = inv.InvoiceId;
                                        _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PICService);
                                        #endregion


                                        #region Insert Transaction
                                        Transaction tr = new Transaction()
                                        {
                                            CompanyId = CompanyId,
                                            CustomerId = Customer.CustomerId,
                                            Type = "Payment",
                                            Amount = (ServiceCost.Value + ServiceCostTax) * PICService.ForMonths.Value,
                                            Status = "Closed",
                                            AddedBy = User.Identity.Name,
                                            AddedDate = DateTime.Now.UTCCurrentTime(),
                                            CreatedBy = UserId,
                                            PaymentMethod = Pinfo.AccountName,
                                            CheckNo = Pinfo.CheckNo,
                                            ReferenceNo = inv.InvoiceId,
                                            TransacationDate = DateTime.Now.UTCCurrentTime()

                                        };
                                        tr.Id = _Util.Facade.TransactionFacade.InsertTransaction(tr);
                                        TransactionHistory trh = new TransactionHistory()
                                        {
                                            Amout = (ServiceCost.Value + ServiceCostTax) * PICService.ForMonths.Value,
                                            Balance = (ServiceCost.Value + ServiceCostTax) * PICService.ForMonths.Value,
                                            CustomerName = Customer.FirstName + " " + Customer.LastName,
                                            InvoiceId = inv.Id,
                                            TransactionId = tr.Id,
                                            ReceivedBy = UserId,
                                            TransacationDate = DateTime.Now.UTCCurrentTime(),
                                            InvoiceNumber = inv.InvoiceId,
                                            InvoiceBalanceDue = inv.BalanceDue.Value,
                                            InvoiceTotal = inv.TotalAmount.Value,
                                        };
                                        trh.Id = _Util.Facade.TransactionFacade.InsertTransactionHistory(trh);
                                        #endregion

                                        #region Customer Credit
                                        if (IsRMRCreditAdd != null && IsRMRCreditAdd.Value.ToLower() == "true")
                                        {
                                            string CustomerCreditNote = string.Format(@"Invoice# <a class=""cus-anchor"" href=""javascript:void(0)"" onclick=""OpenInvById('{0}')"">{1}</a>", inv.Id, inv.InvoiceId);
                                            CustomerCredit cc = new CustomerCredit()
                                            {
                                                Amount = Math.Round(ServiceCost.Value + ServiceCostTax, 2),
                                                CompanyId = CompanyId,
                                                CreatedBy = UserId,
                                                CreatedDate = DateTime.Now.UTCCurrentTime(),
                                                CustomerId = Customer.CustomerId,
                                                TransactionId = tr.Id,
                                                Type = LabelHelper.CustomerCreditType.Credit,
                                                IsRefund = false,
                                                IsRMRCredit = true,
                                                Note = CustomerCreditNote
                                            };
                                            _Util.Facade.TransactionFacade.InsertCustomerCredit(cc);
                                        }
                                        #endregion

                                        #region Customer Payment info updated
                                        /***
                                            * Moved to Ticket
                                        Customer tempCustomer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(Customer.CustomerId);
                                        tempCustomer.BillCycle = LabelHelper.BillCycle.Monthly;
                                        tempCustomer.BillDay = DateTime.Now.UTCCurrentTime().Day;
                                        if (tempCustomer.BillDay > 28)
                                        {
                                            tempCustomer.BillDay = 28;
                                            tempCustomer.FirstBilling = new DateTime(tempCustomer.FirstBilling.Value.Year, tempCustomer.FirstBilling.Value.Month, 28);
                                        }

                                        tempCustomer.FirstBilling = DateTime.Now.UTCCurrentTime().AddMonths(PIC.ForMonths.Value);
                                        tempCustomer.MonthlyMonitoringFee = ServiceCost.Value.ToString();
                                        tempCustomer.BillAmount = (ServiceCost.Value + ServiceCostTax);
                                        tempCustomer.TotalTax = ServiceCostTax;
                                        tempCustomer.BillTax = true;
                                        _Util.Facade.CustomerFacade.UpdateCustomer(tempCustomer);
                                        */
                                        #endregion

                                    }
                                    else if (Pinfo.AccountName == LabelHelper.PaymentMethod.Invoice || Pinfo.AccountName == LabelHelper.PaymentMethod.Financed || ChargeCC == false)
                                    {
                                        #region Payment Method Invoice
                                        CapturingResponse.PaymentReceived = true;
                                        string TempStatus = inv.Status;

                                        inv.Status = LabelHelper.InvoiceStatus.Open;
                                        inv.BalanceDue = inv.TotalAmount;
                                        _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                        if (inv != null && TempStatus != inv.Status)
                                        {
                                            bool newBool = inv.IsARBInvoice ?? false;

                                            #region log
                                            UserActivity ua = new UserActivity()
                                            {
                                                ActivityId = Guid.NewGuid(),
                                                PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                                ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                                // new paramiter
                                                Action = "3185,CapturePayment,SmartLeads",
                                                StatsDate = DateTime.UtcNow,
                                                UserId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                UserName = Customer.FirstName + " " + Customer.LastName,
                                                ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + inv.Status + " #InvoiceId: " + inv.InvoiceId,
                                                IsARB = newBool,

                                                UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                                UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                            };
                                            Guid ActivityID = ua.ActivityId;
                                            _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                            UserActivityCustomer uac = new UserActivityCustomer()
                                            {
                                                ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                                CustomerId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                RefId = inv.InvoiceId,

                                            };
                                            _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                            #endregion
                                        }
                                        CapturingResponse.FinalMesage += string.Format("<br/><span class='successIcon'><i class='fa fa-check'></i></span> <b>Service:</b> Invoice {0} has been created.", inv.InvoiceId);
                                        PICService.IsPaid = true;
                                        PICService.InvoiceId = inv.InvoiceId;
                                        PICService.Comment = "<span class='inv_created'>Invoice Created</span>";
                                        _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PICService);

                                        #endregion

                                    }
                                    else if (ChargeCC)
                                    {
                                        #region Payment Method ACH/CC
                                        if (!PaymentAttemptService)
                                        {
                                            #region Ach
                                            ACHInfo ach = new ACHInfo()
                                            {
                                                RoutingNo = Pinfo.RoutingNo,
                                                AccountNo = Pinfo.AcountNo,
                                                AccountType = Pinfo.BankAccountType,
                                                ECheckType = Pinfo.EcheckType,
                                                BankName = Pinfo.BankName,
                                                AccountName = Pinfo.AccountName,

                                                Amount = (ServiceCost.Value + ServiceCostTax) * PICService.ForMonths.Value,
                                                FirstName = Customer.FirstName,
                                                Lastname = Customer.LastName,
                                                InvoiceNo = inv.InvoiceId,
                                                Description = Description,
                                                CustomerId = Customer.Id.ToString(),
                                                EmailAddress = Customer.EmailAddress

                                            };
                                            #endregion

                                            #region Card
                                            CardInfo card = new CardInfo()
                                            {
                                                CardNumber = DESEncryptionDecryption.DecryptCipherTextToPlainText(Pinfo.CardNumber),
                                                ExpiredDate = Pinfo.CardExpireDate,
                                                NameOnCard = Pinfo.AccountName,
                                                SecurityCode = DESEncryptionDecryption.DecryptCipherTextToPlainText(Pinfo.CardSecurityCode),
                                                CardType = Pinfo.CardType,
                                                Amount = (ServiceCost.Value + ServiceCostTax) * PICService.ForMonths.Value,
                                                FirstName = Customer.FirstName,
                                                Lastname = Customer.LastName,
                                                InvoiceNo = inv.InvoiceId,
                                                Description = Description,
                                                CustomerId = Customer.Id.ToString(),
                                                EmailAddress = Customer.EmailAddress
                                            };
                                            #endregion

                                            #region Payment Method 
                                            //string PaymentMethod = "";
                                            if (!string.IsNullOrWhiteSpace(card.CardNumber) && !string.IsNullOrWhiteSpace(card.ExpiredDate) && !string.IsNullOrWhiteSpace(card.SecurityCode))
                                            {
                                                PaymentMethod = LabelHelper.PaymentMethod.CreditCard;
                                            }
                                            else if (!string.IsNullOrWhiteSpace(ach.AccountNo) && !string.IsNullOrWhiteSpace(ach.RoutingNo) && !string.IsNullOrWhiteSpace(ach.AccountName))
                                            {
                                                PaymentMethod = LabelHelper.PaymentMethod.ACH;
                                            }

                                            #endregion

                                            #region Payment For Service

                                            ReceivePaymentModel ReceivePayment = new ReceivePaymentModel()
                                            {
                                                ACHInfo = ach,
                                                CardInfo = card,
                                                CompanyId = CompanyId,
                                                CompanyName = com.CompanyName,
                                                CustomerGId = Customer.CustomerId,
                                                CustomerId = Customer.Id,
                                                PaymentMethod = PaymentMethod,
                                                InvoiceList = inv.InvoiceId,
                                                Description = Description
                                            };
                                            responseForService = _Util.Facade.ReceivePaymentFacade.ReceivePayment(ReceivePayment);


                                            #endregion

                                        }

                                        #region If Payment Received successfully.
                                        if (responseForService.TransactionSuccess || PaymentMethod == LabelHelper.PaymentMethod.Promo)
                                        {
                                            string TempStatus = inv.Status;
                                            CapturingResponse.FinalMesage += "<br/><span class='successIcon'><i class='fa fa-check'></i></span> <b>Service:</b> Payment received successfully. ";
                                            CapturingResponse.PaymentReceived = true;
                                            if (IsRMRCreditAdd != null && IsRMRCreditAdd.Value.ToLower() == "true")
                                            {
                                                if (inv.IsARBInvoice != null && inv.IsARBInvoice.Value)
                                                {
                                                    inv.Status = LabelHelper.InvoiceStatus.Open;
                                                    inv.BalanceDue += ServiceCost.Value + ServiceCostTax;
                                                    _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                                }
                                                else
                                                {
                                                    inv.Status = LabelHelper.InvoiceStatus.Paid;
                                                    _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                                }
                                            }
                                            else
                                            {
                                                inv.Status = LabelHelper.InvoiceStatus.Paid;
                                                _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                            }
                                            PICService.IsPaid = true;
                                            PICService.InvoiceId = inv.InvoiceId;
                                            PICService.Comment = "<span class='received'>Payment Received.</span>";
                                            _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PICService);

                                            Transaction tr = new Transaction()
                                            {
                                                CompanyId = CompanyId,
                                                CustomerId = Customer.CustomerId,
                                                Type = "Payment",
                                                Amount = (ServiceCost.Value + ServiceCostTax) * PICService.ForMonths.Value,
                                                Status = "Closed",
                                                AddedBy = User.Identity.Name,
                                                AddedDate = DateTime.Now.UTCCurrentTime(),
                                                CreatedBy = UserId,
                                                CardTransactionId = responseForService.TransactionId,
                                                PaymentMethod = PaymentMethod,
                                                ReferenceNo = inv.InvoiceId,
                                                TransacationDate = DateTime.Now.UTCCurrentTime()

                                            };
                                            tr.Id = _Util.Facade.TransactionFacade.InsertTransaction(tr);
                                            #region Log for Payment received for services
                                            CapturePaymentLogMessage = "Capture payment received for services by " + PaymentMethod;
                                            base.AddUserActivityForCustomer(CapturePaymentLogMessage, LabelHelper.ActivityAction.CapturePayment, Customer.CustomerId, null, null);
                                            #endregion
                                            TransactionHistory trh = new TransactionHistory()
                                            {
                                                Amout = (ServiceCost.Value + ServiceCostTax) * PICService.ForMonths.Value,
                                                Balance = (ServiceCost.Value + ServiceCostTax) * PICService.ForMonths.Value,
                                                CustomerName = Customer.FirstName + " " + Customer.LastName,
                                                InvoiceId = inv.Id,
                                                TransactionId = tr.Id,
                                                ReceivedBy = UserId,
                                                TransacationDate = DateTime.Now.UTCCurrentTime(),
                                                InvoiceNumber = inv.InvoiceId,
                                                InvoiceBalanceDue = inv.BalanceDue.Value,
                                                InvoiceTotal = inv.TotalAmount.Value,
                                            };
                                            trh.Id = _Util.Facade.TransactionFacade.InsertTransactionHistory(trh);

                                            #region Customer Credit
                                            if (IsRMRCreditAdd != null && IsRMRCreditAdd.Value.ToLower() == "true")
                                            {
                                                string CustomerCreditNote = string.Format(@"Invoice# <a class=""cus-anchor"" href=""javascript:void(0)"" onclick=""OpenInvById('{0}')"">{1}</a>", inv.Id, inv.InvoiceId);
                                                CustomerCredit cc = new CustomerCredit()
                                                {
                                                    Amount = Math.Round(ServiceCost.Value + ServiceCostTax, 2),
                                                    CompanyId = CompanyId,
                                                    CreatedBy = UserId,
                                                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                                                    CustomerId = Customer.CustomerId,
                                                    TransactionId = tr.Id,
                                                    Type = LabelHelper.CustomerCreditType.Credit,
                                                    IsRefund = false,
                                                    IsRMRCredit = true,
                                                    Note = "Invoice# " + inv.InvoiceId
                                                };
                                                _Util.Facade.TransactionFacade.InsertCustomerCredit(cc);
                                            }
                                            #endregion


                                            #region Customer Payment info updated
                                            Customer tempCustomer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(Customer.CustomerId);
                                            tempCustomer.BillCycle = LabelHelper.BillCycle.Monthly;
                                            tempCustomer.BillDay = DateTime.Now.UTCCurrentTime().Day;
                                            tempCustomer.FirstBilling = DateTime.Now.UTCCurrentTime().AddMonths(PICService.ForMonths.Value);
                                            if (tempCustomer.BillDay > 28)
                                            {
                                                tempCustomer.BillDay = 28;
                                                tempCustomer.FirstBilling = new DateTime(tempCustomer.FirstBilling.Value.Year, tempCustomer.FirstBilling.Value.Month, 28);
                                            }


                                            tempCustomer.MonthlyMonitoringFee = ServiceCost.Value.ToString();
                                            tempCustomer.BillAmount = (ServiceCost.Value + ServiceCostTax);
                                            tempCustomer.TotalTax = ServiceCostTax;
                                            tempCustomer.BillTax = true;
                                            _Util.Facade.CustomerFacade.UpdateCustomer(tempCustomer);
                                            #endregion

                                            if (inv != null && TempStatus != inv.Status)
                                            {
                                                bool newBool = inv.IsARBInvoice ?? false;

                                                #region log
                                                UserActivity ua = new UserActivity()
                                                {
                                                    ActivityId = Guid.NewGuid(),
                                                    PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                                    ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                                    // new paramiter
                                                    Action = "3412,CapturePayment,SmartLeads",
                                                    StatsDate = DateTime.UtcNow,
                                                    UserId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                    UserName = Customer.FirstName + " " + Customer.LastName,
                                                    ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + inv.Status + " #InvoiceId: " + inv.InvoiceId,
                                                    IsARB = newBool,

                                                    UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                                    UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                                };
                                                Guid ActivityID = ua.ActivityId;
                                                _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                                UserActivityCustomer uac = new UserActivityCustomer()
                                                {
                                                    ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                                    CustomerId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                    RefId = inv.InvoiceId,

                                                };
                                                _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                                #endregion
                                            }
                                        }
                                        else
                                        {
                                            string TempStatus = inv.Status;
                                            PICService.Comment = "<span class='decline'>Payment Declined.</span>";
                                            _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PICService);
                                            CapturingResponse.Caution = true;
                                            inv.Status = LabelHelper.InvoiceStatus.Init;
                                            inv.BalanceDue = inv.TotalAmount;
                                            _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                            if (inv != null && TempStatus != inv.Status)
                                            {
                                                bool newBool = inv.IsARBInvoice ?? false;

                                                #region log
                                                UserActivity ua = new UserActivity()
                                                {
                                                    ActivityId = Guid.NewGuid(),
                                                    PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                                    ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                                    // new paramiter
                                                    Action = "3456,CapturePayment,SmartLeads",
                                                    StatsDate = DateTime.UtcNow,
                                                    UserId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                    UserName = Customer.FirstName + " " + Customer.LastName,
                                                    ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + inv.Status + " #InvoiceId: " + inv.InvoiceId,
                                                    IsARB = newBool,

                                                    UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                                    UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                                };
                                                Guid ActivityID = ua.ActivityId;
                                                _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                                UserActivityCustomer uac = new UserActivityCustomer()
                                                {
                                                    ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                                    CustomerId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                    RefId = inv.InvoiceId,

                                                };
                                                _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                                #endregion
                                            }
                                            CapturingResponse.FinalMesage += "<br/><span class='errorIcon'><i class='fa fa-times'></i></span> <b>Service:</b> " + responseForService.Message;
                                        }
                                        #endregion

                                        #endregion
                                    }
                                    if (inv.Status != LabelHelper.InvoiceStatus.Init)
                                    {
                                        #region CustomerSnapShot
                                        CustomerSnapshot objCustomerSnapshot = new CustomerSnapshot
                                        {
                                            CustomerId = Customer.CustomerId,
                                            CompanyId = CompanyId,
                                            Description = "Invoice " + string.Format("<a onclick=OpenTopToBottomModal('{2}/Invoice/AddInvoice?id={0}&CustomerId={1}') style='cursor: pointer;'>", inv.Id, Customer.Id, Customer.CustomerId, AppConfig.DomainSitePath) + "<b>" + inv.InvoiceId + "</b>" + "</a>",
                                            Logdate = DateTime.Now.UTCCurrentTime(),
                                            Updatedby = UserFullName,
                                            Type = "InvoiceCreated"
                                        };
                                        _Util.Facade.CustomerSnapshotFacade.InsertSnapshot(objCustomerSnapshot);
                                        #endregion
                                    }
                                    #endregion
                                }


                            }
                            else
                            {
                                IsPromoPayMethod = true;
                            }

                        }
                        #endregion
                    }
                    if (IsPromoPayMethod == false && PICOnetime != null)
                    {

                        PaymentInfo Pinfo = _Util.Facade.PaymentInfoFacade.GetPaymentInfoById(PICOnetime.PaymentInfoId);
                        if (Pinfo != null)
                        {
                            #region Onetime Service Invoice
                            //List<Invoice> invList = _Util.Facade.InvoiceFacade.GetAllInvoiceByCustomerIdandInvoiceFor(Customer.CustomerId, LabelHelper.InvoiceFor.OnetimeService);
                            //if (invList != null && invList.Count > 0)
                            //{
                            //    foreach (var item in invList)
                            //    {
                            //        _Util.Facade.InvoiceFacade.DeleteInvoiceById(item.Id);
                            //    }
                            //}


                            List<CustomerPackageService> CustomerPackageOnetimeServiceList = CustomerPackageServiceList.Where(x => x.IsARBEnabled != true).ToList();
                            if (CustomerPackageOnetimeServiceList != null && CustomerPackageOnetimeServiceList.Count > 0)
                            {
                                double? OnetimeServiceCost = CustomerPackageOnetimeServiceList.Sum(x => x.Total);
                                double OnetimeServiceCostTax = 0;
                                #region Tax Calculations
                                if (TaxGlobal != null && TaxGlobal.Value.ToLower() == "true")
                                {
                                    if (GetSalesTax != null)
                                    {
                                        OnetimeServiceCostTax = (OnetimeServiceCost.Value * Convert.ToDouble(GetSalesTax.Value)) / 100;
                                    }
                                }
                                else
                                {
                                    OnetimeServiceCostTax = 0.00;
                                }
                                #endregion

                                #region Invoice
                                PaymentProfileCustomer objpayprofile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(Pinfo.Id);
                                Description = "Invoice for one time service";
                                if (objpayprofile != null)
                                {
                                    Invoice invonetime = new Invoice()
                                    {
                                        Amount = OnetimeServiceCost.HasValue ? OnetimeServiceCost.Value : 0.0,
                                        BalanceDue = 0,
                                        Tax = OnetimeServiceCostTax,
                                        TotalAmount = (OnetimeServiceCost + OnetimeServiceCostTax),
                                        InvoiceFor = LabelHelper.InvoiceFor.OnetimeService,
                                        CompanyId = CompanyId,
                                        CustomerId = Customer.CustomerId,
                                        CreatedBy = User.Identity.Name,
                                        CreatedByUid = UserId,
                                        DueDate = DateTime.Now.AddDays(7).UTCCurrentTime(),
                                        InvoiceDate = DateTime.Now.UTCCurrentTime(),
                                        Balance = 0,
                                        CreatedDate = DateTime.Now.UTCCurrentTime(),
                                        Description = Description,
                                        IsEstimate = false,
                                        LastUpdatedByUid = UserId,
                                        LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                                        Status = LabelHelper.InvoiceStatus.Init,
                                        PaymentType = objpayprofile.Type,

                                    };
                                    invonetime.Id = _Util.Facade.InvoiceFacade.InsertInvoice(invonetime);
                                    invonetime.InvoiceId = invonetime.Id.GenerateInvoiceNo();

                                    _Util.Facade.InvoiceFacade.UpdateInvoice(invonetime);
                                    foreach (var item in CustomerPackageOnetimeServiceList)
                                    {
                                        InvoiceDetail invonetimedet = new InvoiceDetail()
                                        {
                                            CompanyId = CompanyId,
                                            CreatedBy = User.Identity.Name,
                                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                                            InvoiceId = invonetime.InvoiceId,

                                            EquipName = item.EquipmentServiceName,
                                            EquipDetail = "",
                                            EquipmentId = item.EquipmentId,
                                            UnitPrice = item.Total,
                                            TotalPrice = (item.Total),

                                        };




                                        if (TaxGlobal != null && TaxGlobal.Value.ToLower() == "true")
                                        {
                                            invonetimedet.Taxable = true;
                                        }
                                        else
                                        {
                                            invonetimedet.Taxable = false;
                                        }
                                        _Util.Facade.InvoiceFacade.InsertInvoiceDetails(invonetimedet);
                                    }


                                    if (!string.IsNullOrEmpty(from) && from == "menual")
                                    {
                                        invonetime.Status = LabelHelper.InvoiceStatus.Open;
                                        invonetime.BalanceDue = invonetime.TotalAmount;
                                        _Util.Facade.InvoiceFacade.UpdateInvoice(invonetime);
                                    }
                                    else
                                    {
                                        #region Payments
                                        //for capture payment check and cash will be paid
                                        if (Pinfo.AccountName == LabelHelper.PaymentMethod.Check || Pinfo.AccountName == LabelHelper.PaymentMethod.Cash || Pinfo.AccountName == LabelHelper.PaymentMethod.Promo)
                                        {
                                            #region Updating Data
                                            CapturingResponse.FinalMesage += "<br/><span class='successIcon'><i class='fa fa-check'></i></span> <b>Service:</b> Payment received successfully. ";
                                            CapturingResponse.PaymentReceived = true;
                                            string TempStatus = invonetime.Status;
                                            invonetime.Status = LabelHelper.InvoiceStatus.Paid;
                                            _Util.Facade.InvoiceFacade.UpdateInvoice(invonetime);
                                            if (invonetime != null && TempStatus != invonetime.Status)
                                            {
                                                bool newBool = invonetime.IsARBInvoice ?? false;

                                                #region log
                                                UserActivity ua = new UserActivity()
                                                {
                                                    ActivityId = Guid.NewGuid(),
                                                    PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                                    ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                                    // new paramiter
                                                    Action = "3628,CapturePayment,SmartLeads",
                                                    StatsDate = DateTime.UtcNow,
                                                    UserId = invonetime.CustomerId != null ? invonetime.CustomerId : Guid.NewGuid(),
                                                    UserName = Customer.FirstName + " " + Customer.LastName,
                                                    ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + invonetime.Status + " #InvoiceId: " + invonetime.InvoiceId,
                                                    IsARB = newBool,

                                                    UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                                    UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                                };
                                                Guid ActivityID = ua.ActivityId;
                                                _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                                UserActivityCustomer uac = new UserActivityCustomer()
                                                {
                                                    ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                                    CustomerId = invonetime.CustomerId != null ? invonetime.CustomerId : Guid.NewGuid(),
                                                    RefId = invonetime.InvoiceId,

                                                };
                                                _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                                #endregion
                                            }
                                            PICOnetime.IsPaid = true;
                                            PICOnetime.InvoiceId = invonetime.InvoiceId;
                                            _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PICOnetime);
                                            #endregion


                                            #region Insert Transaction
                                            Transaction tr = new Transaction()
                                            {
                                                CompanyId = CompanyId,
                                                CustomerId = Customer.CustomerId,
                                                Type = "Payment",
                                                Amount = (OnetimeServiceCost.Value + OnetimeServiceCostTax),
                                                Status = "Closed",
                                                AddedBy = User.Identity.Name,
                                                AddedDate = DateTime.Now.UTCCurrentTime(),
                                                CreatedBy = UserId,
                                                PaymentMethod = Pinfo.AccountName,
                                                CheckNo = Pinfo.CheckNo,
                                                ReferenceNo = invonetime.InvoiceId,
                                                TransacationDate = DateTime.Now.UTCCurrentTime()

                                            };
                                            tr.Id = _Util.Facade.TransactionFacade.InsertTransaction(tr);
                                            TransactionHistory trh = new TransactionHistory()
                                            {
                                                Amout = (OnetimeServiceCost.Value + OnetimeServiceCostTax),
                                                Balance = (OnetimeServiceCost.Value + OnetimeServiceCostTax),
                                                CustomerName = Customer.FirstName + " " + Customer.LastName,
                                                InvoiceId = invonetime.Id,
                                                TransactionId = tr.Id,
                                                ReceivedBy = UserId,
                                                TransacationDate = DateTime.Now.UTCCurrentTime(),
                                                InvoiceNumber = invonetime.InvoiceId,
                                                InvoiceBalanceDue = invonetime.BalanceDue.Value,
                                                InvoiceTotal = invonetime.TotalAmount.Value,
                                            };
                                            trh.Id = _Util.Facade.TransactionFacade.InsertTransactionHistory(trh);
                                            #endregion

                                            #region Customer Credit
                                            //CustomerCredit cc = new CustomerCredit()
                                            //{
                                            //    Amount = OnetimeServiceCost.Value + OnetimeServiceCostTax,
                                            //    CompanyId = CompanyId,
                                            //    CreatedBy = UserId,
                                            //    CreatedDate = DateTime.Now.UTCCurrentTime(),
                                            //    CustomerId = Customer.CustomerId,
                                            //    TransactionId = tr.Id,
                                            //    Type = LabelHelper.CustomerCreditType.Credit
                                            //};
                                            //_Util.Facade.TransactionFacade.InsertCustomerCredit(cc);
                                            #endregion

                                            #region Customer Payment info updated
                                            /***
                                                * Moved to Ticket
                                            Customer tempCustomer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(Customer.CustomerId);
                                            tempCustomer.BillCycle = LabelHelper.BillCycle.Monthly;
                                            tempCustomer.BillDay = DateTime.Now.UTCCurrentTime().Day;
                                            if (tempCustomer.BillDay > 28)
                                            {
                                                tempCustomer.BillDay = 28;
                                                tempCustomer.FirstBilling = new DateTime(tempCustomer.FirstBilling.Value.Year, tempCustomer.FirstBilling.Value.Month, 28);
                                            }

                                            tempCustomer.FirstBilling = DateTime.Now.UTCCurrentTime().AddMonths(PIC.ForMonths.Value);
                                            tempCustomer.MonthlyMonitoringFee = OnetimeServiceCost.Value.ToString();
                                            tempCustomer.BillAmount = (OnetimeServiceCost.Value + OnetimeServiceCostTax);
                                            tempCustomer.TotalTax = OnetimeServiceCostTax;
                                            tempCustomer.BillTax = true;
                                            _Util.Facade.CustomerFacade.UpdateCustomer(tempCustomer);
                                            */
                                            #endregion

                                        }
                                        else if (Pinfo.AccountName == LabelHelper.PaymentMethod.Invoice || Pinfo.AccountName == LabelHelper.PaymentMethod.Financed || ChargeCC == false)
                                        {
                                            #region Payment Method Invoice
                                            CapturingResponse.PaymentReceived = true;
                                            string TempStatus = invonetime.Status;

                                            invonetime.Status = LabelHelper.InvoiceStatus.Open;
                                            invonetime.BalanceDue = invonetime.TotalAmount;
                                            _Util.Facade.InvoiceFacade.UpdateInvoice(invonetime);
                                            if (invonetime != null && TempStatus != invonetime.Status)
                                            {
                                                bool newBool = invonetime.IsARBInvoice ?? false;

                                                #region log
                                                UserActivity ua = new UserActivity()
                                                {
                                                    ActivityId = Guid.NewGuid(),
                                                    PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                                    ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                                    // new paramiter
                                                    Action = "3748,CapturePayment,SmartLeads",
                                                    StatsDate = DateTime.UtcNow,
                                                    UserId = invonetime.CustomerId != null ? invonetime.CustomerId : Guid.NewGuid(),
                                                    UserName = Customer.FirstName + " " + Customer.LastName,
                                                    ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + invonetime.Status + " #InvoiceId: " + invonetime.InvoiceId,
                                                    IsARB = newBool,

                                                    UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                                    UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                                };
                                                Guid ActivityID = ua.ActivityId;
                                                _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                                UserActivityCustomer uac = new UserActivityCustomer()
                                                {
                                                    ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                                    CustomerId = invonetime.CustomerId != null ? invonetime.CustomerId : Guid.NewGuid(),
                                                    RefId = invonetime.InvoiceId,

                                                };
                                                _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                                #endregion
                                            }
                                            CapturingResponse.FinalMesage += string.Format("<br/><span class='successIcon'><i class='fa fa-check'></i></span> <b>Onetime:</b> Invoice {0} has been created.", invonetime.InvoiceId);
                                            PICOnetime.IsPaid = true;
                                            PICOnetime.InvoiceId = invonetime.InvoiceId;
                                            PICOnetime.Comment = "<span class='inv_created'>Invoice Created</span>";
                                            _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PICOnetime);

                                            #endregion

                                        }
                                        else if (ChargeCC)
                                        {
                                            #region Payment Method ACH/CC
                                            double? OneTimeTotalAmount = OnetimeServiceCost + OnetimeServiceCostTax;

                                            #region Ach
                                            ACHInfo ach = new ACHInfo()
                                            {
                                                RoutingNo = Pinfo.RoutingNo,
                                                AccountNo = Pinfo.AcountNo,
                                                AccountType = Pinfo.BankAccountType,
                                                ECheckType = Pinfo.EcheckType,
                                                BankName = Pinfo.BankName,
                                                AccountName = Pinfo.AccountName,

                                                Amount = OneTimeTotalAmount.HasValue ? OneTimeTotalAmount.Value : 0.0,
                                                FirstName = Customer.FirstName,
                                                Lastname = Customer.LastName,
                                                InvoiceNo = invonetime.InvoiceId,
                                                Description = Description,
                                                CustomerId = Customer.Id.ToString(),
                                                EmailAddress = Customer.EmailAddress

                                            };
                                            #endregion

                                            #region Card
                                            CardInfo card = new CardInfo()
                                            {
                                                CardNumber = DESEncryptionDecryption.DecryptCipherTextToPlainText(Pinfo.CardNumber),
                                                ExpiredDate = Pinfo.CardExpireDate,
                                                NameOnCard = Pinfo.AccountName,
                                                SecurityCode = DESEncryptionDecryption.DecryptCipherTextToPlainText(Pinfo.CardSecurityCode),
                                                CardType = Pinfo.CardType,
                                                Amount = OneTimeTotalAmount.HasValue ? OneTimeTotalAmount.Value : 0.0,
                                                FirstName = Customer.FirstName,
                                                Lastname = Customer.LastName,
                                                InvoiceNo = invonetime.InvoiceId,
                                                Description = Description,
                                                CustomerId = Customer.Id.ToString(),
                                                EmailAddress = Customer.EmailAddress
                                            };
                                            #endregion

                                            #region Payment Method 
                                            //string PaymentMethod = "";
                                            if (!string.IsNullOrWhiteSpace(card.CardNumber) && !string.IsNullOrWhiteSpace(card.ExpiredDate) && !string.IsNullOrWhiteSpace(card.SecurityCode))
                                            {
                                                PaymentMethod = LabelHelper.PaymentMethod.CreditCard;
                                            }
                                            else if (!string.IsNullOrWhiteSpace(ach.AccountNo) && !string.IsNullOrWhiteSpace(ach.RoutingNo) && !string.IsNullOrWhiteSpace(ach.AccountName))
                                            {
                                                PaymentMethod = LabelHelper.PaymentMethod.ACH;
                                            }

                                            #endregion

                                            #region Payment For One time Service

                                            ReceivePaymentModel ReceivePayment = new ReceivePaymentModel()
                                            {
                                                ACHInfo = ach,
                                                CardInfo = card,
                                                CompanyId = CompanyId,
                                                CompanyName = com.CompanyName,
                                                CustomerGId = Customer.CustomerId,
                                                CustomerId = Customer.Id,
                                                PaymentMethod = PaymentMethod,
                                                InvoiceList = invonetime.InvoiceId,
                                                Description = Description
                                            };
                                            responseForService = _Util.Facade.ReceivePaymentFacade.ReceivePayment(ReceivePayment);


                                            #endregion



                                            #region If Payment Received successfully.
                                            if (responseForService.TransactionSuccess)
                                            {
                                                CapturingResponse.FinalMesage += "<br/><span class='successIcon'><i class='fa fa-check'></i></span> <b>Onetime:</b> Payment received successfully. ";
                                                CapturingResponse.PaymentReceived = true;
                                                string TempStatus = invonetime.Status;
                                                invonetime.Status = LabelHelper.InvoiceStatus.Paid;
                                                _Util.Facade.InvoiceFacade.UpdateInvoice(invonetime);
                                                if (invonetime != null && TempStatus != invonetime.Status)
                                                {
                                                    bool newBool = invonetime.IsARBInvoice ?? false;

                                                    #region log
                                                    UserActivity ua = new UserActivity()
                                                    {
                                                        ActivityId = Guid.NewGuid(),
                                                        PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                                        ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                                        // new paramiter
                                                        Action = "3876,CapturePayment,SmartLeads",
                                                        StatsDate = DateTime.UtcNow,
                                                        UserId = invonetime.CustomerId != null ? invonetime.CustomerId : Guid.NewGuid(),
                                                        UserName = Customer.FirstName + " " + Customer.LastName,
                                                        ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + invonetime.Status + " #InvoiceId: " + invonetime.InvoiceId,
                                                        IsARB = newBool,

                                                        UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                                        UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                                    };
                                                    Guid ActivityID = ua.ActivityId;
                                                    _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                                    UserActivityCustomer uac = new UserActivityCustomer()
                                                    {
                                                        ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                                        CustomerId = invonetime.CustomerId != null ? invonetime.CustomerId : Guid.NewGuid(),
                                                        RefId = invonetime.InvoiceId,

                                                    };
                                                    _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                                    #endregion
                                                }
                                                PICOnetime.IsPaid = true;
                                                PICOnetime.InvoiceId = invonetime.InvoiceId;
                                                PICOnetime.Comment = "<span class='received'>Payment Received.</span>";
                                                _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PICOnetime);

                                                Transaction tr = new Transaction()
                                                {
                                                    CompanyId = CompanyId,
                                                    CustomerId = Customer.CustomerId,
                                                    Type = "Payment",
                                                    Amount = (OnetimeServiceCost.Value + OnetimeServiceCostTax),
                                                    Status = "Closed",
                                                    AddedBy = User.Identity.Name,
                                                    AddedDate = DateTime.Now.UTCCurrentTime(),
                                                    CreatedBy = UserId,
                                                    CardTransactionId = responseForService.TransactionId,
                                                    PaymentMethod = PaymentMethod,
                                                    ReferenceNo = invonetime.InvoiceId,
                                                    TransacationDate = DateTime.Now.UTCCurrentTime()

                                                };
                                                tr.Id = _Util.Facade.TransactionFacade.InsertTransaction(tr);
                                                #region Log for Payment received for services
                                                CapturePaymentLogMessage = "Capture payment received for services by " + PaymentMethod;
                                                base.AddUserActivityForCustomer(CapturePaymentLogMessage, LabelHelper.ActivityAction.CapturePayment, Customer.CustomerId, null, null);
                                                #endregion
                                                TransactionHistory trh = new TransactionHistory()
                                                {
                                                    Amout = (OnetimeServiceCost.Value + OnetimeServiceCostTax),
                                                    Balance = (OnetimeServiceCost.Value + OnetimeServiceCostTax),
                                                    CustomerName = Customer.FirstName + " " + Customer.LastName,
                                                    InvoiceId = invonetime.Id,
                                                    TransactionId = tr.Id,
                                                    ReceivedBy = UserId,
                                                    TransacationDate = DateTime.Now.UTCCurrentTime(),
                                                    InvoiceNumber = invonetime.InvoiceId,
                                                    InvoiceBalanceDue = invonetime.BalanceDue.Value,
                                                    InvoiceTotal = invonetime.TotalAmount.Value,
                                                };
                                                trh.Id = _Util.Facade.TransactionFacade.InsertTransactionHistory(trh);

                                                #region Customer Credit
                                                //CustomerCredit cc = new CustomerCredit()
                                                //{
                                                //    Amount = OnetimeServiceCost.Value + OnetimeServiceCostTax,
                                                //    CompanyId = CompanyId,
                                                //    CreatedBy = UserId,
                                                //    CreatedDate = DateTime.Now.UTCCurrentTime(),
                                                //    CustomerId = Customer.CustomerId,
                                                //    TransactionId = tr.Id,
                                                //    Type = LabelHelper.CustomerCreditType.Credit
                                                //};
                                                //_Util.Facade.TransactionFacade.InsertCustomerCredit(cc);
                                                #endregion


                                                #region Customer Payment info updated
                                                Customer tempCustomer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(Customer.CustomerId);
                                                tempCustomer.BillCycle = LabelHelper.BillCycle.Monthly;
                                                tempCustomer.BillDay = DateTime.Now.UTCCurrentTime().Day;
                                                tempCustomer.FirstBilling = DateTime.Now.UTCCurrentTime().AddMonths(PICService.ForMonths.Value);
                                                if (tempCustomer.BillDay > 28)
                                                {
                                                    tempCustomer.BillDay = 28;
                                                    tempCustomer.FirstBilling = new DateTime(tempCustomer.FirstBilling.Value.Year, tempCustomer.FirstBilling.Value.Month, 28);
                                                }


                                                tempCustomer.MonthlyMonitoringFee = ServiceCost.Value.ToString();
                                                tempCustomer.BillAmount = (ServiceCost.Value + ServiceCostTax);
                                                tempCustomer.TotalTax = ServiceCostTax;
                                                tempCustomer.BillTax = true;
                                                _Util.Facade.CustomerFacade.UpdateCustomer(tempCustomer);
                                                #endregion

                                            }
                                            else
                                            {
                                                PICOnetime.Comment = "<span class='decline'>Payment Declined.</span>";
                                                _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PICOnetime);
                                                CapturingResponse.Caution = true;
                                                string TempStatus = invonetime.Status;
                                                invonetime.Status = LabelHelper.InvoiceStatus.Init;
                                                invonetime.BalanceDue = invonetime.TotalAmount;
                                                _Util.Facade.InvoiceFacade.UpdateInvoice(invonetime);
                                                if (invonetime != null && TempStatus != invonetime.Status)
                                                {
                                                    bool newBool = invonetime.IsARBInvoice ?? false;

                                                    #region log
                                                    UserActivity ua = new UserActivity()
                                                    {
                                                        ActivityId = Guid.NewGuid(),
                                                        PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                                        ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                                        // new paramiter
                                                        Action = "3995,CapturePayment,SmartLeads",
                                                        StatsDate = DateTime.UtcNow,
                                                        UserId = invonetime.CustomerId != null ? invonetime.CustomerId : Guid.NewGuid(),
                                                        UserName = Customer.FirstName + " " + Customer.LastName,
                                                        ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + invonetime.Status + " #InvoiceId: " + invonetime.InvoiceId,
                                                        IsARB = newBool,

                                                        UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                                        UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                                    };
                                                    Guid ActivityID = ua.ActivityId;
                                                    _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                                    UserActivityCustomer uac = new UserActivityCustomer()
                                                    {
                                                        ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                                        CustomerId = invonetime.CustomerId != null ? invonetime.CustomerId : Guid.NewGuid(),
                                                        RefId = invonetime.InvoiceId,

                                                    };
                                                    _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                                    #endregion
                                                }
                                                CapturingResponse.FinalMesage += "<br/><span class='errorIcon'><i class='fa fa-times'></i></span> <b>Service:</b> " + responseForService.Message;
                                            }
                                            #endregion

                                            #endregion
                                        }
                                        if (invonetime.Status != LabelHelper.InvoiceStatus.Init)
                                        {
                                            #region CustomerSnapShot
                                            CustomerSnapshot objCustomerSnapshot = new CustomerSnapshot
                                            {
                                                CustomerId = Customer.CustomerId,
                                                CompanyId = CompanyId,
                                                Description = "Invoice " + string.Format("<a onclick=OpenTopToBottomModal('{2}/Invoice/AddInvoice?id={0}&CustomerId={1}') style='cursor: pointer;'>", invonetime.Id, Customer.Id, Customer.CustomerId, AppConfig.DomainSitePath) + "<b>" + invonetime.InvoiceId + "</b>" + "</a>",
                                                Logdate = DateTime.Now.UTCCurrentTime(),
                                                Updatedby = UserFullName,
                                                Type = "InvoiceCreated"
                                            };
                                            _Util.Facade.CustomerSnapshotFacade.InsertSnapshot(objCustomerSnapshot);
                                            #endregion
                                        }
                                        #endregion
                                    }


                                }

                            }
                            #endregion
                            #endregion
                        }

                    }

                }
                #endregion

                #region Equipment Fee Capture
                //From 5-14-2019 Decision - For equipment we are not going to capture any payment for equipment
                //PaymentInfoCustomer PIC = PICList.Where(x => x.Payfor == "Equipment").FirstOrDefault();
                if (PICEquipment != null && (PICEquipment.IsPaid == null || PICEquipment.IsPaid == false))
                {
                    List<CustomerPackageEqp> CustomerPackageEqpList = _Util.Facade.CustomerFacade.IsLeadAppointmentEquipmentExistCheckCustomerPackageEqp(Customer.CustomerId, CompanyId);
                    double? EqpCost = CustomerPackageEqpList.Sum(x => x.Total);
                    double EqpCostTax = 0;
                    double? EqpDiscountPercent = EqpDiscountPercentage;


                    if (EqpCost.HasValue && EqpCost.Value > 0)
                    {
                        #region Equipment Payments

                        #region Tax Calculations 
                        if (GetSalesTax != null)
                        {
                            double PackageEquipTaxAmount = (EqpCost.Value * Convert.ToDouble(GetSalesTax.Value)) / 100;
                            EqpCostTax = PackageEquipTaxAmount;
                        }
                        #endregion



                        PaymentInfo Pinfo = _Util.Facade.PaymentInfoFacade.GetPaymentInfoById(PICEquipment.PaymentInfoId);
                        if (Pinfo != null)
                        {
                            PaymentProfileCustomer objpayprofile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(Pinfo.Id);
                            if (objpayprofile != null)
                            {
                                Description = "Payment for equipment";
                                
                                #region Invoice

                                if (EqpDiscountPercent.HasValue && EqpDiscountPercent.Value > 0)
                                {
                                    EqpDiscountPercentage = EqpDiscountPercentage;
                                    EqpDiscountAmount = EqpDiscountQty;

                                }
                                else
                                {
                                    EqpDiscountPercentage = 0.00;
                                    EqpDiscountAmount = EqpDiscountAmount;
                                }

                              //  equipment final total adding sales tax
                                Eqpfinalamount = EqpCost.Value + EqpCostTax;

                                Invoice inv = new Invoice()
                                {

                                    Amount = EqpCost.Value,

                                    
                                    InvoiceFor = LabelHelper.InvoiceFor.Equipment,
                                    CompanyId = CompanyId,
                                    CustomerId = Customer.CustomerId,
                                    CreatedBy = User.Identity.Name,
                                    CreatedByUid = UserId,
                                    DueDate = DateTime.Now.AddDays(7).UTCCurrentTime(),
                                    InvoiceDate = DateTime.Now.UTCCurrentTime(),
                                    Balance = 0,
                                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                                    Description = Description,
                                    IsEstimate = false,
                                    LastUpdatedByUid = UserId,
                                    LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                                    Status = LabelHelper.InvoiceStatus.Init,
                                    PaymentType = objpayprofile.Type,
                                    ItemType = LabelHelper.InvoiceFor.Equipment,

                                    // "MAYUR" : for updatting discount in invoice while capture payment ::start :: new parameters for discount
                                    Tax = (EqpTax == 0) ? EqpCostTax : EqpTax,
                                    DiscountAmount = EqpDiscountAmount,
                                    Discountpercent = EqpDiscountPercentage,
                                    TaxPercentage = EqpDiscountQty, 
                                    DiscountType= EqpDiscounttype,
                                    BalanceDue = Eqpfinalamount,
                                    TotalAmount = Eqpfinalamount,
                                    
                                    // "MAYUR" : for updatting discount in invoice while capture payment ::start

                                };
                                inv.Id = _Util.Facade.InvoiceFacade.InsertInvoice(inv);
                                inv.InvoiceId = inv.Id.GenerateInvoiceNo();
                                _Util.Facade.InvoiceFacade.UpdateInvoice(inv);

                                foreach (var item in CustomerPackageEqpList)
                                {
                                    InvoiceDetail invdet = new InvoiceDetail()
                                    {
                                        CompanyId = CompanyId,
                                        CreatedBy = User.Identity.Name,
                                        CreatedDate = DateTime.Now.UTCCurrentTime(),
                                        InvoiceId = inv.InvoiceId,
                                        Quantity = item.Quantity,
                                        EquipName = item.EquipmentServiceName,
                                        EquipDetail = "",
                                        EquipmentId = item.EquipmentId,
                                        UnitPrice = item.UnitPrice,
                                        TotalPrice = item.Total,
                                        Taxable = true,
                                        DiscountAmount = item.DiscountUnitPricce
                                    };
                                    _Util.Facade.InvoiceFacade.InsertInvoiceDetails(invdet);
                                }

                                #endregion
                                if (!string.IsNullOrEmpty(from) && from == "menual")
                                {
                                    inv.Status = LabelHelper.InvoiceStatus.Open;
                                    inv.BalanceDue = inv.TotalAmount;
                                    _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                }
                                else
                                {
                                    #region Payments

                                    if (Pinfo.AccountName == LabelHelper.PaymentMethod.Check || Pinfo.AccountName == LabelHelper.PaymentMethod.Cash || Pinfo.AccountName == LabelHelper.PaymentMethod.Promo)
                                    {
                                        #region Updating Data
                                        CapturingResponse.FinalMesage += "<br/>Payment for equipment received successfully. ";
                                        CapturingResponse.PaymentReceived = true;
                                        string TempStatus = inv.Status;
                                        inv.Status = LabelHelper.InvoiceStatus.Paid;
                                        _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                        if (inv != null && TempStatus != inv.Status)
                                        {
                                            bool newBool = inv.IsARBInvoice ?? false;

                                            #region log
                                            UserActivity ua = new UserActivity()
                                            {
                                                ActivityId = Guid.NewGuid(),
                                                PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                                ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                                // new paramiter
                                                Action = "4151,CapturePayment,SmartLeads",
                                                StatsDate = DateTime.UtcNow,
                                                UserId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                UserName = Customer.FirstName + " " + Customer.LastName,
                                                ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + inv.Status + " #InvoiceId: " + inv.InvoiceId,
                                                IsARB = newBool,

                                                UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                                UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                            };
                                            Guid ActivityID = ua.ActivityId;
                                            _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                            UserActivityCustomer uac = new UserActivityCustomer()
                                            {
                                                ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                                CustomerId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                RefId = inv.InvoiceId,

                                            };
                                            _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                            #endregion
                                        }
                                        PICEquipment.IsPaid = true;
                                        PICEquipment.InvoiceId = inv.InvoiceId;
                                        PICEquipment.Comment += "<span class='received'>Payment Received.</span>";
                                        _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PICEquipment);
                                        #endregion

                                        #region Insert Transaction And Transaction History
                                        Transaction tr = new Transaction()
                                        {
                                            CompanyId = CompanyId,
                                            CustomerId = Customer.CustomerId,
                                            Type = "Payment",
                                            Amount = EqpCost.Value + EqpCostTax,
                                            Status = "Closed",
                                            AddedBy = User.Identity.Name,
                                            AddedDate = DateTime.Now.UTCCurrentTime(),
                                            CreatedBy = UserId,
                                            //CardTransactionId = response.TransactionId,
                                            PaymentMethod = Pinfo.AccountName,
                                            CheckNo = Pinfo.CheckNo,
                                            ReferenceNo = inv.InvoiceId,
                                            TransacationDate = DateTime.Now.UTCCurrentTime()

                                        };
                                        tr.Id = _Util.Facade.TransactionFacade.InsertTransaction(tr);
                                        TransactionHistory trh = new TransactionHistory()
                                        {
                                            Amout = EqpCost.Value + EqpCostTax,
                                            Balance = EqpCost.Value + EqpCostTax,
                                            CustomerName = Customer.FirstName + " " + Customer.LastName,
                                            InvoiceId = inv.Id,
                                            TransactionId = tr.Id,
                                            ReceivedBy = UserId,
                                            TransacationDate = DateTime.Now.UTCCurrentTime(),
                                            InvoiceNumber = inv.InvoiceId,
                                            InvoiceBalanceDue = inv.BalanceDue.Value,
                                            InvoiceTotal = inv.TotalAmount.Value,
                                        };
                                        trh.Id = _Util.Facade.TransactionFacade.InsertTransactionHistory(trh);
                                        #endregion
                                    }
                                    else if (Pinfo.AccountName == LabelHelper.PaymentMethod.Invoice || Pinfo.AccountName == LabelHelper.PaymentMethod.Financed || ChargeCC == false)
                                    {
                                        #region Payment Method Invoice
                                        CapturingResponse.PaymentReceived = true;
                                        string TempStatus = inv.Status;
                                        inv.Status = LabelHelper.InvoiceStatus.Open;
                                        inv.BalanceDue = inv.TotalAmount;
                                        _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                        if (inv != null && TempStatus != inv.Status)
                                        {
                                            bool newBool = inv.IsARBInvoice ?? false;

                                            #region log
                                            UserActivity ua = new UserActivity()
                                            {
                                                ActivityId = Guid.NewGuid(),
                                                PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                                ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                                // new paramiter
                                                Action = "4234,CapturePayment,SmartLeads",
                                                StatsDate = DateTime.UtcNow,
                                                UserId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                UserName = Customer.FirstName + " " + Customer.LastName,
                                                ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + inv.Status + " #InvoiceId: " + inv.InvoiceId,
                                                IsARB = newBool,

                                                UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                                UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                            };
                                            Guid ActivityID = ua.ActivityId;
                                            _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                            UserActivityCustomer uac = new UserActivityCustomer()
                                            {
                                                ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                                CustomerId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                RefId = inv.InvoiceId,

                                            };
                                            _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                            #endregion
                                        }
                                        CapturingResponse.FinalMesage += string.Format("<br/><span class='successIcon'><i class='fa fa-check'></i></span> <b>Equipment:</b> Invoice {0} has been created.", inv.InvoiceId);
                                        PICEquipment.IsPaid = true;
                                        PICEquipment.InvoiceId = inv.InvoiceId;
                                        PICEquipment.Comment = "<span class='inv_created'>Invoice Created</span>";
                                        _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PICEquipment);
                                        #endregion
                                    }
                                    else if (ChargeCC)
                                    {
                                        #region Payment Method ACH/CC
                                        if (!PaymentAttemptEquipment)
                                        {
                                            #region Ach
                                            ACHInfo ach = new ACHInfo()
                                            {
                                                RoutingNo = Pinfo.RoutingNo,
                                                AccountNo = Pinfo.AcountNo,
                                                AccountType = Pinfo.BankAccountType,
                                                ECheckType = Pinfo.EcheckType,
                                                BankName = Pinfo.BankName,
                                                AccountName = Pinfo.AccountName,

                                                Amount = EqpCost.Value + EqpCostTax,
                                                FirstName = Customer.FirstName,
                                                Lastname = Customer.LastName,
                                                InvoiceNo = inv.InvoiceId,
                                                Description = Description,
                                                CustomerId = Customer.Id.ToString(),
                                                EmailAddress = Customer.EmailAddress

                                            };
                                            #endregion

                                            #region Card
                                            CardInfo card = new CardInfo()
                                            {
                                                CardNumber = DESEncryptionDecryption.DecryptCipherTextToPlainText(Pinfo.CardNumber),
                                                ExpiredDate = Pinfo.CardExpireDate,
                                                NameOnCard = Pinfo.AccountName,
                                                SecurityCode = DESEncryptionDecryption.DecryptCipherTextToPlainText(Pinfo.CardSecurityCode),
                                                CardType = Pinfo.CardType,
                                                Amount = EqpCost.Value + EqpCostTax,
                                                FirstName = Customer.FirstName,
                                                Lastname = Customer.LastName,
                                                InvoiceNo = inv.InvoiceId,
                                                Description = Description,
                                                CustomerId = Customer.Id.ToString(),
                                                EmailAddress = Customer.EmailAddress
                                            };
                                            #endregion

                                            #region Payment Method  
                                            if (!string.IsNullOrWhiteSpace(card.CardNumber) && !string.IsNullOrWhiteSpace(card.ExpiredDate) && !string.IsNullOrWhiteSpace(card.SecurityCode))
                                            {
                                                PaymentMethod = LabelHelper.PaymentMethod.CreditCard;
                                            }
                                            else if (!string.IsNullOrWhiteSpace(ach.AccountNo) && !string.IsNullOrWhiteSpace(ach.RoutingNo) && !string.IsNullOrWhiteSpace(ach.AccountName))
                                            {
                                                PaymentMethod = LabelHelper.PaymentMethod.ACH;
                                            }
                                            #endregion

                                            #region Payment For Equipment
                                            ReceivePaymentModel ReceivePayment = new ReceivePaymentModel()
                                            {
                                                ACHInfo = ach,
                                                CardInfo = card,
                                                CompanyId = CompanyId,
                                                CustomerGId = Customer.CustomerId,
                                                CustomerId = Customer.Id,
                                                CompanyName = com.CompanyName,
                                                PaymentMethod = PaymentMethod,
                                                InvoiceList = inv.InvoiceId,
                                                Description = Description
                                            };
                                            responseForEquipment = _Util.Facade.ReceivePaymentFacade.ReceivePayment(ReceivePayment);
                                            #endregion
                                        }

                                        #region after Payments
                                        if (responseForEquipment.TransactionSuccess)
                                        {
                                            #region Updating Data
                                            //CapturingResponse.FinalMesage += "<br/>Payment for equipment received successfully. ";
                                            CapturingResponse.FinalMesage += "<br/><span class='successIcon'><i class='fa fa-check'></i></span> <b>Equipment:</b> Payment received successfully. ";
                                            CapturingResponse.PaymentReceived = true;
                                            string TempStatus = inv.Status;
                                            inv.Status = LabelHelper.InvoiceStatus.Paid;
                                            _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                            if (inv != null && TempStatus != inv.Status)
                                            {
                                                bool newBool = inv.IsARBInvoice ?? false;

                                                #region log
                                                UserActivity ua = new UserActivity()
                                                {
                                                    ActivityId = Guid.NewGuid(),
                                                    PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                                    ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                                    // new paramiter
                                                    Action = "4357,CapturePayment,SmartLeads",
                                                    StatsDate = DateTime.UtcNow,
                                                    UserId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                    UserName = Customer.FirstName + " " + Customer.LastName,
                                                    ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + inv.Status + " #InvoiceId: " + inv.InvoiceId,
                                                    IsARB = newBool,

                                                    UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                                    UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                                };
                                                Guid ActivityID = ua.ActivityId;
                                                _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                                UserActivityCustomer uac = new UserActivityCustomer()
                                                {
                                                    ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                                    CustomerId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                    RefId = inv.InvoiceId,

                                                };
                                                _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                                #endregion
                                            }
                                            PICEquipment.IsPaid = true;
                                            PICEquipment.InvoiceId = inv.InvoiceId;
                                            PICEquipment.Comment = "<span class='received'>Payment Received.</span>";
                                            _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PICEquipment);
                                            #endregion

                                            #region Insert Transaction And Transaction History
                                            Transaction tr = new Transaction()
                                            {
                                                CompanyId = CompanyId,
                                                CustomerId = Customer.CustomerId,
                                                Type = "Payment",
                                                Amount = EqpCost.Value + EqpCostTax,
                                                Status = "Closed",
                                                AddedBy = User.Identity.Name,
                                                AddedDate = DateTime.Now.UTCCurrentTime(),
                                                CreatedBy = UserId,
                                                CardTransactionId = responseForEquipment.TransactionId,
                                                PaymentMethod = PaymentMethod,
                                                ReferenceNo = inv.InvoiceId,
                                                TransacationDate = DateTime.Now.UTCCurrentTime()

                                            };
                                            tr.Id = _Util.Facade.TransactionFacade.InsertTransaction(tr);
                                            #region Log for Payment received for equipments
                                            CapturePaymentLogMessage = "Capture payment received for equipments by " + PaymentMethod;
                                            base.AddUserActivityForCustomer(CapturePaymentLogMessage, LabelHelper.ActivityAction.CapturePayment, Customer.CustomerId, null, null);
                                            #endregion
                                            TransactionHistory trh = new TransactionHistory()
                                            {
                                                Amout = EqpCost.Value + EqpCostTax,
                                                Balance = EqpCost.Value + EqpCostTax,
                                                CustomerName = Customer.FirstName + " " + Customer.LastName,
                                                InvoiceId = inv.Id,
                                                TransactionId = tr.Id,
                                                ReceivedBy = UserId,
                                                TransacationDate = DateTime.Now.UTCCurrentTime(),
                                                InvoiceNumber = inv.InvoiceId,
                                                InvoiceBalanceDue = inv.BalanceDue.Value,
                                                InvoiceTotal = inv.TotalAmount.Value,
                                            };
                                            trh.Id = _Util.Facade.TransactionFacade.InsertTransactionHistory(trh);
                                            #endregion
                                        }
                                        else
                                        {
                                            PICEquipment.Comment = "<span class='decline'>Payment Declined.</span>";
                                            _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PICEquipment);

                                            CapturingResponse.Caution = true;
                                            string TempStatus = inv.Status;
                                            inv.Status = LabelHelper.InvoiceStatus.Init;
                                            inv.BalanceDue = inv.TotalAmount;
                                            _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                            if (inv != null && TempStatus != inv.Status)
                                            {
                                                bool newBool = inv.IsARBInvoice ?? false;

                                                #region log
                                                UserActivity ua = new UserActivity()
                                                {
                                                    ActivityId = Guid.NewGuid(),
                                                    PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                                    ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                                    // new paramiter
                                                    Action = "4443,CapturePayment,SmartLeads",
                                                    StatsDate = DateTime.UtcNow,
                                                    UserId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                    UserName = Customer.FirstName + " " + Customer.LastName,
                                                    ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + inv.Status + " #InvoiceId: " + inv.InvoiceId,
                                                    IsARB = newBool,

                                                    UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                                    UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                                };
                                                Guid ActivityID = ua.ActivityId;
                                                _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                                UserActivityCustomer uac = new UserActivityCustomer()
                                                {
                                                    ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                                    CustomerId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                                    RefId = inv.InvoiceId,

                                                };
                                                _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                                #endregion
                                            }
                                            //CapturingResponse.FinalMesage += "<br/> <b>Equipment:</b> " + response.Message;
                                            CapturingResponse.FinalMesage += "<br/><span class='errorIcon'><i class='fa fa-times'></i></span> <b>Equipment:</b> " + responseForEquipment.Message;
                                        }
                                        #endregion

                                        #endregion
                                    }
                                    if (inv.Status != LabelHelper.InvoiceStatus.Init)
                                    {
                                        #region CustomerSnapShot
                                        CustomerSnapshot objCustomerSnapshot = new CustomerSnapshot
                                        {
                                            CustomerId = Customer.CustomerId,
                                            CompanyId = CompanyId,
                                            Description = "Invoice " + string.Format("<a onclick=OpenTopToBottomModal('{2}/Invoice/AddInvoice?id={0}&CustomerId={1}') style='cursor: pointer;'>", inv.Id, Customer.Id, Customer.CustomerId, AppConfig.DomainSitePath) + "<b>" + inv.InvoiceId + "</b>" + "</a>",
                                            Logdate = DateTime.Now.UTCCurrentTime(),
                                            Updatedby = UserFullName,
                                            Type = "InvoiceCreated"
                                        };
                                        _Util.Facade.CustomerSnapshotFacade.InsertSnapshot(objCustomerSnapshot);
                                        #endregion
                                    }
                                    #endregion
                                }

                            }

                        }
                        #endregion
                    }
                }

                #endregion

                CapturingResponse.FinalMesage += "</div>";

            }
            else
            {
                CapturingResponse.Result = false;
                CapturingResponse.FinalMesage = "No payment info found. Please save each payment methods before proceeding.";
            }
            return CapturingResponse;
        }

        #endregion

        #region This Method Will no longer in use
        [Authorize]
        public ActionResult SmartAgreementFinalize(int? id)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (currentLoggedIn == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            LeadServiceSetupCustomModel model = new LeadServiceSetupCustomModel();
            model.CustomerModel = new Customer();
            model.PaymentInfo = new PaymentInfo();
            if (id.HasValue)
            {
                #region If CustomerId Exists
                model.CustomerModel = _Util.Facade.CustomerFacade.GetCustomersById(id.Value);
                var CustomerPackageEqpModel = _Util.Facade.CustomerFacade.IsLeadAppointmentEquipmentExistCheckCustomerPackageEqp(model.CustomerModel.CustomerId, currentLoggedIn.CompanyId.Value);
                var CustomerPackageServiceModel = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(model.CustomerModel.CustomerId, currentLoggedIn.CompanyId.Value);
                var GetCityTaxList = _Util.Facade.CompanyBranchFacade.GetCityTaxRate(model.CustomerModel.CustomerId, currentLoggedIn.CompanyId.Value);
                var ActivationFee = 0.0;
                var ServiceFee = 0.0;
                var EquipmentFee = 0.0;
                var Tax = 0.0;
                if (GetCityTaxList.Count > 0)
                {
                    foreach (var item1 in GetCityTaxList)
                    {
                        Tax = item1.Rate;
                    }
                }
                else
                {
                    Guid CustomerId = new Guid();

                    if (model.CustomerModel != null)
                    {
                        CustomerId = model.CustomerModel.CustomerId;
                    }
                    var GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(currentLoggedIn.CompanyId.Value, CustomerId);
                    if (GetSalesTax != null)
                    {
                        Tax = Convert.ToDouble(GetSalesTax.Value);
                    }
                }
                if (model.CustomerModel != null && model.CustomerModel.ActivationFee.HasValue)
                {
                    ActivationFee = model.CustomerModel.ActivationFee.Value;
                }
                if (CustomerPackageServiceModel != null && CustomerPackageServiceModel.Sum(x => x.Total).HasValue)
                {
                    ServiceFee = CustomerPackageServiceModel.Sum(x => x.Total).Value;
                }
                if (CustomerPackageEqpModel != null && CustomerPackageEqpModel.Sum(x => x.Total).HasValue)
                {
                    EquipmentFee = CustomerPackageEqpModel.Sum(x => x.Total).Value;
                }
                model.ActivationFee = ActivationFee;
                model.ServiceFee = ServiceFee;
                model.EquipmentFee = EquipmentFee;
                model.SubTotalFee = ActivationFee + ServiceFee + EquipmentFee;
                model.Tax = (model.SubTotalFee / 100) * Tax;
                model.TotalFee = model.SubTotalFee + model.Tax;
                if (model.CustomerModel.CustomerId != new Guid())
                {
                    model.PaymentInfoList = _Util.Facade.PaymentInfoFacade.GetPaymentInfoListByCompanyIdAndCustomerId(currentLoggedIn.CompanyId.Value, model.CustomerModel.CustomerId);
                    if (model.PaymentInfoList == null)
                    {
                        model.PaymentInfoList = new List<PaymentInfo>();
                    }
                }
                #endregion
            }
            Customer objLead = _Util.Facade.CustomerFacade.GetLeadIdByCompanyIdAndCustomerId(currentLoggedIn.CompanyId.Value, id.Value);
            if (objLead != null)
            {
                ViewBag.leadcontractid = objLead.Id;
                ViewBag.leadcontractcustomerid = objLead.CustomerId;
                ViewBag.leadcontractfirstname = objLead.FirstName;
                ViewBag.leadcontractlastname = objLead.LastName;
                ViewBag.leadcontractstreet = objLead.Street;
                ViewBag.leadcontractZipCode = objLead.ZipCode;
            }
            #region viewbag MMR Paying
            List<SelectListItem> MMRPaying = new List<SelectListItem>();
            MMRPaying.Add(new SelectListItem() { Value = "-1", Text = "Select One" });
            MMRPaying.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("PaymentMethod").Where(x => x.DataValue == "ACH" || x.DataValue == "Credit Card").Select(x =>
                              new SelectListItem()
                              {
                                  Text = x.DisplayText.ToString(),
                                  Value = x.DataValue.ToString()
                              }).ToList());
            ViewBag.MMRPaying = MMRPaying;
            ViewBag.PaymentMethodList = _Util.Facade.LookupFacade.GetLookupByKey("PaymentMethod").Where(x => x.DataValue == "ACH" || x.DataValue == "Credit Card").ToList();
            #endregion
            #region viewbag activation fee payment method list
            ViewBag.PaymentMethodActivationFee = _Util.Facade.LookupFacade.GetLookupByKey("PaymentMethodActivationFee").Select(x =>
                              new SelectListItem()
                              {
                                  Text = x.DisplayText.ToString(),
                                  Value = x.DataValue.ToString()
                              }).ToList();
            #endregion
            #region Billing Day
            ViewBag.BillingDay = _Util.Facade.LookupFacade.GetLookupByKey("BillingDay").Select(x =>
                             new SelectListItem()
                             {
                                 Text = x.DisplayText.ToString(),
                                 Value = x.DataValue.ToString()
                             }).ToList();
            #endregion
            ViewBag.ECheckType = _Util.Facade.LookupFacade.GetLookupByKey("ECheckType").Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.BankAccountType = _Util.Facade.LookupFacade.GetLookupByKey("BankAccountType").Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.LeadCustomerID = _Util.Facade.CustomerFacade.GetLeadIdByCompanyIdAndCustomerId(currentLoggedIn.CompanyId.Value, id.Value).CustomerId;
            return PartialView("SmartAgreementFinalize", model);
        }
        #endregion

        [Authorize]
        [HttpPost]
        public JsonResult AddSmartLeadSetupPackageOption(AddSmartLeadPackage ModelAddleadPackage)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            List<CustomerPackageEqp> PackageEqpList = new List<CustomerPackageEqp>();

            //bool result1 = false;
            bool result = false;
            if (currentLoggedIn == null)
            {
                return Json(result);
            }
            #region Insert and Update Package settings and Equipment Settings
            if (ModelAddleadPackage.LeadId > 0)
            {
                #region PackageSetup
                Customer LeadInfo = _Util.Facade.CustomerFacade.GetCustomersById(ModelAddleadPackage.LeadId);


                if (LeadInfo != null)
                {
                    CustomerExtended extended = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(LeadInfo.CustomerId);
                    //from now on all products will also be deleted.
                    //bool DeleteSuccessOldPackageData = _Util.Facade.PackageFacade.DeleteCustomerPackageEqpByCompanyIdCustomerId(currentLoggedIn.CompanyId.Value, LeadInfo.CustomerId);
                    bool DeleteSuccessOldPackageData = _Util.Facade.PackageFacade.DeleteOnlyCustomerPackageEqpByCompanyIdCustomerId(currentLoggedIn.CompanyId.Value, LeadInfo.CustomerId);
                    #region Service ADDED EQUIPMENT s
                    var DeleteSuccessOldServiceData = _Util.Facade.PackageFacade.DeleteOnlyCustomerPackageServiceByCompanyIdCustomerId(currentLoggedIn.CompanyId.Value, LeadInfo.CustomerId);

                    if (ModelAddleadPackage.ServiceList != null)
                    {
                        #region Service ADDED EQUIPMENT s
                        foreach (var item in ModelAddleadPackage.ServiceList)
                        {
                            if (item.EquipmentId != new Guid())
                            {
                                Equipment ServiceInfo = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentIdAndCompanyId(item.EquipmentId, currentLoggedIn.CompanyId.Value);
                                if (ServiceInfo != null)
                                {
                                    CustomerPackageService customerPackageService = new CustomerPackageService()
                                    {
                                        CompanyId = currentLoggedIn.CompanyId.Value,
                                        CustomerId = LeadInfo.CustomerId,
                                        PackageId = item.PackageId,
                                        EquipmentId = ServiceInfo.EquipmentId,
                                        MonthlyRate = item.MonthlyRate,
                                        DiscountRate = 0,
                                        Total = item.Total,
                                        IsPackageService = true
                                    };
                                    result = _Util.Facade.PackageFacade.InsertCustomerPackageService(customerPackageService) > 0;

                                    #region Included equipment will not add from 1.Package Setup Page anymore
                                    //if (result)
                                    //{
                                    //    double EquipmentPrice = 0;
                                    //    bool HasPrice = false;
                                    //    if (ServiceInfo.EquipmentPriceIsCharged.HasValue && ServiceInfo.EquipmentPriceIsCharged.Value && ServiceInfo.EquipmentPrice > 0)
                                    //    {
                                    //        EquipmentPrice = ServiceInfo.EquipmentPrice.Value;
                                    //        HasPrice = true;
                                    //    }


                                    //List<ServiceEquipment> IncludeEquipmentList = _Util.Facade.EquipmentFacade.GetServiceEquipmentByServiceIdAndCompanyId(currentLoggedIn.CompanyId.Value, ServiceInfo.EquipmentId);
                                    //#region Include Equipment List
                                    //foreach (var itemEqp in IncludeEquipmentList)
                                    //{
                                    //    CustomerPackageEqp customerPackage = new CustomerPackageEqp()
                                    //    {
                                    //        CompanyId = currentLoggedIn.CompanyId.Value,
                                    //        CustomerId = LeadInfo.CustomerId,
                                    //        PackageId = ModelAddleadPackage.PackageId,
                                    //        EquipmentId = itemEqp.EquipmentId,
                                    //        IsIncluded = false,
                                    //        IsDevice = false,
                                    //        IsOptionalEqp = false,
                                    //        IsServiceEquipment = false,
                                    //        Quantity = itemEqp.Quantity,
                                    //        //UnitPrice = itemEqp.RetailPrice,
                                    //        DiscountUnitPricce = 0,
                                    //        DiscountPckage = 0,
                                    //        //Total = itemEqp.RetailPrice
                                    //        UnitPrice = HasPrice ? (EquipmentPrice / itemEqp.Quantity) : 0,
                                    //        Total = HasPrice ? EquipmentPrice : 0,

                                    //    };
                                    //    if (PackageEqpList.Where(x => x.EquipmentId == customerPackage.EquipmentId).Count() == 0)
                                    //    {
                                    //        PackageEqpList.Add(customerPackage);
                                    //    }
                                    //    //_Util.Facade.PackageFacade.InsertCustomerPackageEqp(customerPackage);
                                    //    EquipmentPrice = 0;
                                    //    HasPrice = false;
                                    //}
                                    //#endregion

                                    //}
                                    #endregion
                                }
                            }
                        }
                        #endregion

                    }
                    #endregion

                    #region EquipmentList
                    if (ModelAddleadPackage.EquipmentList != null)
                    {
                        foreach (var item in ModelAddleadPackage.EquipmentList)
                        {
                            if (item.SelectedEquipmentId != new Guid())
                            {
                                Equipment ProductInfo = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentIdAndCompanyId(item.SelectedEquipmentId, currentLoggedIn.CompanyId.Value);
                                if (ProductInfo != null)
                                {
                                    double DiscountUnitPricce = 0;
                                    double Total = ProductInfo.Retail.Value;
                                    if ((item.SelectedEquipmentIsFree == true || ProductInfo.Retail == null) && extended != null && extended.IsFinanced != true)
                                    {
                                        DiscountUnitPricce = ProductInfo.Retail.Value;
                                        Total = 0;
                                    }
                                    CustomerPackageEqp customerPackage = new CustomerPackageEqp()
                                    {
                                        CompanyId = currentLoggedIn.CompanyId.Value,
                                        CustomerId = LeadInfo.CustomerId,
                                        PackageId = ModelAddleadPackage.PackageId,
                                        EquipmentId = ProductInfo.EquipmentId,
                                        IsIncluded = item.IsIncluded,
                                        IsDevice = item.IsDevice,
                                        IsOptionalEqp = item.IsOptionalEqp,
                                        IsServiceEquipment = false,
                                        Quantity = item.NumOfEquipments,
                                        UnitPrice = ProductInfo.Retail.Value,
                                        DiscountUnitPricce = DiscountUnitPricce,
                                        DiscountPckage = DiscountUnitPricce,
                                        Total = Total,
                                        IsPackageEqp = true
                                    };
                                    //if(PackageEqpList.Where(x=>x.EquipmentId == customerPackage.EquipmentId).Count() == 0)
                                    //{
                                    //    PackageEqpList.Add(customerPackage);
                                    //}

                                    result = _Util.Facade.PackageFacade.InsertCustomerPackageEqp(customerPackage) > 0;
                                }
                            }
                        }
                    }
                    #endregion

                    #region ServiceEquipmentList
                    if (ModelAddleadPackage.SmartPackageEquipmentServiceEquipmentList != null)
                    {
                        foreach (var item in ModelAddleadPackage.SmartPackageEquipmentServiceEquipmentList)
                        {
                            if (item.EquipmentId != new Guid())
                            {
                                var ProductInfo = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentIdAndCompanyId(item.EquipmentId, currentLoggedIn.CompanyId.Value);
                                if (ProductInfo != null)
                                {
                                    CustomerPackageEqp customerPackage = new CustomerPackageEqp()
                                    {
                                        CompanyId = currentLoggedIn.CompanyId.Value,
                                        CustomerId = LeadInfo.CustomerId,
                                        PackageId = ModelAddleadPackage.PackageId,
                                        EquipmentId = ProductInfo.EquipmentId,
                                        IsIncluded = false,
                                        IsDevice = false,
                                        IsOptionalEqp = false,
                                        IsServiceEquipment = true,
                                        Quantity = item.Quantity,
                                        UnitPrice = item.EquipmentPrice,
                                        DiscountUnitPricce = 0,
                                        DiscountPckage = 0,
                                        Total = item.EquipmentPrice * item.Quantity,
                                        IsPackageEqp = true
                                    };
                                    //if (PackageEqpList.Where(x => x.EquipmentId == customerPackage.EquipmentId).Count() == 0)
                                    //{
                                    //    PackageEqpList.Add(customerPackage);
                                    //}
                                    result = _Util.Facade.PackageFacade.InsertCustomerPackageEqp(customerPackage) > 0;
                                }
                            }
                        }
                    }
                    #endregion


                    #region Insert CustomerPackageEqp
                    //foreach(var item in PackageEqpList)
                    //{
                    //    _Util.Facade.PackageFacade.InsertCustomerPackageEqp(item);
                    //}
                    #endregion

                    #region Package Related
                    CustomerCompany CC = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(LeadInfo.Id);
                    if (CC == null)
                    {
                        return Json(new { result = false, message = "Customer not found." });
                    }
                    var PackageCustomerDeails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(LeadInfo.CustomerId, currentLoggedIn.CompanyId.Value);
                    if (PackageCustomerDeails != null)
                    {
                        PackageCustomerDeails.PackageId = ModelAddleadPackage.PackageId;
                        PackageCustomerDeails.SmartSystemTypeId = ModelAddleadPackage.SmartSystemTypeId;
                        PackageCustomerDeails.SmartInstallTypeId = ModelAddleadPackage.SmartInstallTypeId;
                        PackageCustomerDeails.ManufacturerId = ModelAddleadPackage.ManufacturerId;
                        if (CC.IsLead == true)
                        {
                            var SystemTypeDetails = _Util.Facade.SmartPackageFacade.GetSmartSystemTypeById(ModelAddleadPackage.SmartSystemTypeId);
                            if (SystemTypeDetails != null)
                            {
                                PackageCustomerDeails.SmartSystemType = SystemTypeDetails.Name;
                            }
                        }
                        result = _Util.Facade.PackageFacade.UpdatePackageCustomer(PackageCustomerDeails);
                    }
                    else
                    {
                        PackageCustomer model = new PackageCustomer()
                        {
                            CompanyId = currentLoggedIn.CompanyId.Value,
                            CustomerId = LeadInfo.CustomerId,
                            PackageId = ModelAddleadPackage.PackageId,
                            SmartSystemTypeId = ModelAddleadPackage.SmartSystemTypeId,
                            SmartInstallTypeId = ModelAddleadPackage.SmartInstallTypeId,
                            ManufacturerId = ModelAddleadPackage.ManufacturerId
                        };
                        var SystemTypeDetails = _Util.Facade.SmartPackageFacade.GetSmartSystemTypeById(ModelAddleadPackage.SmartSystemTypeId);
                        if (SystemTypeDetails != null)
                        {
                            model.SmartSystemType = SystemTypeDetails.Name;
                        }
                        result = _Util.Facade.PackageFacade.InsertPackageCustomer(model) > 0;
                    }
                    if (ModelAddleadPackage.PackageId != Guid.Empty)
                    {
                        var SmartPackageDetail = _Util.Facade.SmartPackageFacade.GetSmartPackageByPackageId(ModelAddleadPackage.PackageId);
                        var PackageCustomerUpdate = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(LeadInfo.CustomerId, currentLoggedIn.CompanyId.Value);
                        if (SmartPackageDetail != null && PackageCustomerUpdate != null)
                        {
                            PackageCustomerUpdate.ActivationFee = SmartPackageDetail.ActivationFee;
                        }
                        if (SmartPackageDetail != null && PackageCustomerUpdate != null)
                        {
                            PackageCustomerUpdate.NonConformingFee = SmartPackageDetail.ConformingFee;
                        }

                        #region NonConfirming fee
                        if (PackageCustomerUpdate != null)
                        {
                            SmartPackage package = _Util.Facade.SmartPackageFacade.GetPackageByPackageIdAndCompanyId(PackageCustomerUpdate.PackageId, PackageCustomerUpdate.CompanyId);
                            var CreditScoreValue = LeadInfo.CreditScoreValue;
                            double MinCredit = 0;
                            if (package.MinCredit.HasValue)
                            {
                                MinCredit = package.MinCredit.Value;
                            }


                            if (CreditScoreValue >= MinCredit && MinCredit != 0)
                            {
                                PackageCustomerUpdate.NonConformingFee = 0;
                            }
                        }

                        #endregion

                        _Util.Facade.PackageFacade.UpdatePackageCustomer(PackageCustomerUpdate);
                    }
                    #endregion



                    Customer StepInfo = _Util.Facade.CustomerFacade.GetCustomersById(ModelAddleadPackage.LeadId);
                    if (StepInfo != null && (StepInfo.SmartSetUpStep < 2 || StepInfo.SmartSetUpStep == null))
                    {
                        StepInfo.SmartSetUpStep = 2;
                        _Util.Facade.CustomerFacade.UpdateCustomer(StepInfo);
                    }
                }

                return Json(new { result = result });
                #endregion
            }
            #endregion
            else
            {
                return Json(false);
            }

        }

        [Authorize]
        [HttpPost]
        public JsonResult AddSmartLeadSetupService(AddSmartLeadAddedEquipments AddedEquipmentsList, List<string> NonCommissionableServiceList)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            //bool result1 = false;
            bool result = false;
            if (currentLoggedIn == null || AddedEquipmentsList.EquipmentLeadId == 0)
            {
                return Json(result);
            }

            Customer LeadDetails = _Util.Facade.CustomerFacade.GetCustomersById(AddedEquipmentsList.EquipmentLeadId);
            if (LeadDetails == null)
            {
                return Json(result);
            }
            #region Save Setep
            if (LeadDetails != null && LeadDetails.SmartSetUpStep < 3)
            {
                LeadDetails.SmartSetUpStep = 3;
                _Util.Facade.CustomerFacade.UpdateCustomer(LeadDetails);
            }
            #endregion

            #region Insert and Update Package settings and Equipment Settings 

            if (AddedEquipmentsList.EquipmentLeadId > 0 && AddedEquipmentsList.AddedEquipmetList != null)
            {
                #region Equipment Setup 
                PackageCustomer PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(LeadDetails.CustomerId, currentLoggedIn.CompanyId.Value);
                if (LeadDetails != null && PackageCustomerDetails != null)
                {
                    foreach (var item in AddedEquipmentsList.AddedEquipmetList)
                    {
                        if (item.EquipmentId != new Guid())
                        {
                            CustomerPackageService customerPackage = new CustomerPackageService()
                            {
                                CompanyId = currentLoggedIn.CompanyId.Value,
                                CustomerId = LeadDetails.CustomerId,
                                PackageId = PackageCustomerDetails.PackageId,
                                EquipmentId = item.EquipmentId,
                                MonthlyRate = item.UnitPrice,
                                DiscountRate = item.DiscountUnitPricce,
                                Total = item.Total
                            };
                            result = _Util.Facade.PackageFacade.InsertCustomerPackageService(customerPackage) > 0;

                            if (result)
                            {
                                var IncludeEquipmentList = _Util.Facade.EquipmentFacade.GetServiceEquipmentByServiceIdAndCompanyId(currentLoggedIn.CompanyId.Value, item.EquipmentId);
                                foreach (var itemEqp in IncludeEquipmentList)
                                {
                                    CustomerPackageEqp customerPackageEqp = new CustomerPackageEqp()
                                    {
                                        CompanyId = currentLoggedIn.CompanyId.Value,
                                        CustomerId = LeadDetails.CustomerId,
                                        PackageId = PackageCustomerDetails.PackageId,
                                        EquipmentId = itemEqp.EquipmentId,
                                        IsIncluded = false,
                                        IsDevice = false,
                                        IsOptionalEqp = false,
                                        IsServiceEquipment = false,
                                        Quantity = itemEqp.Quantity,
                                        UnitPrice = itemEqp.RetailPrice,
                                        DiscountUnitPricce = 0,
                                        DiscountPckage = 0,
                                        Total = itemEqp.RetailPrice
                                    };
                                    _Util.Facade.PackageFacade.InsertCustomerPackageEqp(customerPackageEqp);
                                }
                            }
                        }
                    }
                }
                #endregion
            }
            #endregion

            #region update customerappointment
            if (AddedEquipmentsList.EquipmentLeadId > 0)
            {
                Guid SoldBy = currentLoggedIn.UserId;
                Guid.TryParse(LeadDetails.Soldby, out SoldBy);

                CustomerCompany CustomerCompanyInfo = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(AddedEquipmentsList.EquipmentLeadId);
                if (CustomerCompanyInfo != null && CustomerCompanyInfo.IsLead == false)
                {
                    var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(LeadDetails.CustomerId, currentLoggedIn.CompanyId.Value);
                    var PackageBaseItem = _Util.Facade.PackageFacade.GetAllSmartPackageEquipmentServiceByPackageIdAndCompanyId(PackageCustomerDetails.PackageId, currentLoggedIn.CompanyId.Value).Where(m => m.Type == "Service" || m.Type == "Include" || m.Type == "Device" || m.Type == "Optional");
                    Ticket TicketInfo = _Util.Facade.TicketFacade.GetAgreementTicketByCustomerId(CustomerCompanyInfo.CustomerId);

                    bool DeleteCustomerAppointmentEquipment = _Util.Facade.CustomerAppoinmentFacade.DeleteCustomerAppoinmentEquipmentByTicketIdService(TicketInfo != null && TicketInfo.TicketId != new Guid() ? TicketInfo.TicketId : new Guid());
                    List<CustomerPackageService> CustomerPackageServiceList = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(CustomerCompanyInfo.CustomerId, currentLoggedIn.CompanyId.Value);
                    if (CustomerPackageServiceList != null)
                    {
                        foreach (var eqp in CustomerPackageServiceList)
                        {
                            var smartPackageEquipmentService = _Util.Facade.SmartPackageFacade.GetSmartPackageEquipmentServiceByPackageIdEquipmentId(PackageCustomerDetails.PackageId, eqp.EquipmentId);
                            bool IsBaseItem = PackageBaseItem.Where(m => m.EquipmentId == eqp.EquipmentId).Count() > 0;
                            Equipment EquipmentDetails = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentId(eqp.EquipmentId);
                            CustomerAppointmentEquipment caEquipment = new CustomerAppointmentEquipment()
                            {
                                AppointmentId = (TicketInfo != null && TicketInfo.TicketId != new Guid() ? TicketInfo.TicketId : new Guid()),
                                EquipmentId = eqp.EquipmentId,
                                Quantity = 1,
                                UnitPrice = eqp.UnitPrice,
                                TotalPrice = eqp.Total != null ? eqp.Total.Value : 0,
                                CreatedDate = DateTime.Now.UTCCurrentTime(),
                                CreatedBy = User.Identity.Name,
                                EquipName = EquipmentDetails.Name,
                                EquipDetail = EquipmentDetails.Description,
                                IsEquipmentRelease = false,
                                IsService = true,
                                CreatedByUid = SoldBy,
                                InstalledByUid = new Guid(LabelHelper.SystemUser.ID),
                                IsAgreementItem = true,
                                IsBaseItem = IsBaseItem,
                                OriginalUnitPrice = smartPackageEquipmentService != null ? smartPackageEquipmentService.OriginalPrice : eqp.UnitPrice,
                                IsNonCommissionable = eqp.IsNonCommissionable
                            };
                            _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(caEquipment);
                        }
                    }
                }
            }
            #endregion

            //#region Non Commissionable Service Update
            //if (NonCommissionableServiceList != null && NonCommissionableServiceList.Count > 0)
            //{

            //}
            //#endregion
            return Json(new { result = result });
        }

        [Authorize]
        [HttpPost]
        public JsonResult AddSmartLeadSetupEquipment(AddSmartLeadAddedEquipments AddedEquipmentsList, List<string> NonCommissionableEqpList)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            //bool result1 = false;
            bool result = false;
            var LeadAppointmentId = new Guid();
            bool islead = false;
            if (currentLoggedIn == null || AddedEquipmentsList.EquipmentLeadId == 0)
            {
                return Json(result);
            }

            Customer LeadDetails = _Util.Facade.CustomerFacade.GetCustomersById(AddedEquipmentsList.EquipmentLeadId);
            if (LeadDetails == null)
            {
                return Json(result);
            }
            #region Save Setep
            if (LeadDetails != null && LeadDetails.SmartSetUpStep < 4)
            {
                LeadDetails.SmartSetUpStep = 4;
                _Util.Facade.CustomerFacade.UpdateCustomer(LeadDetails);
            }

            #endregion

            #region Insert and Update Package settings and Equipment Settings

            if (AddedEquipmentsList.EquipmentLeadId > 0 && AddedEquipmentsList.AddedEquipmetList != null)
            {
                #region Equipment Setup
                var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(LeadDetails.CustomerId, currentLoggedIn.CompanyId.Value);
                if (LeadDetails != null && PackageCustomerDetails != null)
                {
                    foreach (var item in AddedEquipmentsList.AddedEquipmetList)
                    {
                        if (item.Id > 0)
                        {
                            _Util.Facade.PackageFacade.DeleteCustomerPackageEqpById(item.Id);
                        }
                        if (item.EquipmentId != new Guid())
                        {
                            if (LeadDetails.TransferCustomerId != null && LeadDetails.TransferCustomerId.HasValue && LeadDetails.TransferCustomerId.Value > 0)
                            {
                                CustomerPackageEqp customerPackage = new CustomerPackageEqp()
                                {
                                    CompanyId = currentLoggedIn.CompanyId.Value,
                                    CustomerId = LeadDetails.CustomerId,
                                    PackageId = PackageCustomerDetails.PackageId,
                                    EquipmentId = item.EquipmentId,
                                    IsIncluded = false,
                                    IsDevice = false,
                                    IsOptionalEqp = false,
                                    IsServiceEquipment = false,
                                    Quantity = item.Quantity,
                                    UnitPrice = item.UnitPrice,
                                    DiscountUnitPricce = item.DiscountUnitPricce,
                                    DiscountPckage = item.DiscountPckage,
                                    Total = item.Total,
                                    ServiceId = item.ServiceId,
                                    IsTransfered = false,
                                    IsEqpExist = false,
                                };
                                result = _Util.Facade.PackageFacade.InsertCustomerPackageEqp(customerPackage) > 0;
                            }
                            else
                            {
                                CustomerPackageEqp customerPackage = new CustomerPackageEqp()
                                {
                                    CompanyId = currentLoggedIn.CompanyId.Value,
                                    CustomerId = LeadDetails.CustomerId,
                                    PackageId = PackageCustomerDetails.PackageId,
                                    IsPackageEqp = item.IsPackageEqp,
                                    EquipmentId = item.EquipmentId,
                                    IsIncluded = item.IsIncluded,
                                    IsDevice = item.IsDevice,
                                    IsOptionalEqp = item.IsOptionalEqp,
                                    IsServiceEquipment = false,
                                    Quantity = item.Quantity,
                                    UnitPrice = item.UnitPrice,
                                    DiscountUnitPricce = item.DiscountUnitPricce,
                                    DiscountPckage = item.DiscountPckage,
                                    Total = item.Total,
                                    ServiceId = item.ServiceId,
                                };
                                result = _Util.Facade.PackageFacade.InsertCustomerPackageEqp(customerPackage) > 0;
                            }
                        }
                    }
                }
                #endregion
            }
            #endregion
            //if (NonCommissionableEqpList != null && NonCommissionableEqpList.Count > 0)
            //{
            //    foreach (var item in NonCommissionableEqpList)
            //    {
            //        var objpackeqp = _Util.Facade.SmartPackageFacade.GetCustomerPackageEqpById(Convert.ToInt32(item));
            //        if (objpackeqp != null)
            //        {
            //            objpackeqp.IsNonCommissionable = true;
            //            _Util.Facade.SmartPackageFacade.UpdateCustomerPackageEqp(objpackeqp);
            //        }
            //    }
            //}
            TotalCalculatePayAmount totalpay = CalculateTotalPayAmmount(LeadDetails.Id);
            return Json(new { result = true, message = "Service added successfully.", strTotalAmt = totalpay.TotalAmount, strCollectedAmt = totalpay.CollectToday, strCreditCardPayment = LabelHelper.FormatAmount(totalpay.CollectCC), strAchPayment = LabelHelper.FormatAmount(totalpay.CollectAch), strCashPayment = LabelHelper.FormatAmount(totalpay.CollectCash), strCheckPayment = LabelHelper.FormatAmount(totalpay.CollectCheck), Currency = totalpay.CurrentCurrency });

        }

        [Authorize]
        [HttpPost]
        public JsonResult AddSmartLeadSetupAggremant(EmergencyContact ec, PaymentInfo pi4, LeadServiceSetupCustomModel CUS, PaymentInfo pi, PaymentInfo pi2, PaymentInfo pi1, PaymentInfo PaymentCash, PaymentInfo PaymentCheck)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            //bool result1 = false;
            bool result = false;

            if (currentLoggedIn == null)
            {
                return Json(result);
            }
            #region Service Setups
            if (CUS.CustomerModel != null)
            {
                #region update customer informations
                if (CUS.CustomerModel.ContractTeam != null)// && CUS.CustomerModel.PaymentMethod != null)
                {
                    var LeadID = CUS.CustomerModel.Id;
                    if (LeadID > 0)
                    {
                        var LeadInfo = _Util.Facade.CustomerFacade.GetCustomersById(LeadID);
                        if (LeadInfo != null)
                        {
                            LeadInfo.ContractTeam = CUS.CustomerModel.ContractTeam;
                            LeadInfo.Passcode = CUS.CustomerModel.Passcode;
                            LeadInfo.LastUpdatedDate = DateTime.Now.UTCCurrentTime();
                            LeadInfo.LastUpdatedBy = User.Identity.Name;
                            LeadInfo.FirstBilling = CUS.CustomerModel.FirstBilling;
                            result = _Util.Facade.CustomerFacade.UpdateCustomer(LeadInfo);
                        }
                    }
                }
                #endregion
            }
            #endregion

            #region Payment Method Setup

            #region Payment Method Type ACH

            if (pi4.BillMethod == "ACH")
            {
                if (pi4.AccountName != null || pi4.AcountNo != null || pi4.BankAccountType != null || pi4.CardExpireDate != null || pi4.CardNumber != null || pi4.CardSecurityCode != null || pi4.CardType != null || pi4.RoutingNo != null)
                {
                    if (pi4.Id > 0)
                    {
                        pi4.CompanyId = currentLoggedIn.CompanyId.Value;
                        pi4.BillMethod = MethodBilling.ACH;
                        _Util.Facade.PaymentInfoFacade.UpdatePaymentInfo(pi4);
                        PaymentInfoCustomer objpayment = new PaymentInfoCustomer()
                        {
                            CompanyId = currentLoggedIn.CompanyId.Value,
                            CustomerId = pi4.PaymentCustomerId,
                            PaymentInfoId = pi4.Id
                        };
                        _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(objpayment);
                        var objRelationCustomerandPaymentinfo = _Util.Facade.CustomerFacade.GetLeadByPaymentinfoID(pi4.Id);
                        if (objRelationCustomerandPaymentinfo != null)
                        {
                            objRelationCustomerandPaymentinfo.PaymentMethod = pi4.BillMethod;
                            objRelationCustomerandPaymentinfo.LastUpdatedDate = DateTime.Now.UTCCurrentTime();
                            objRelationCustomerandPaymentinfo.LastUpdatedBy = User.Identity.Name;

                            _Util.Facade.CustomerFacade.UpdateCustomer(objRelationCustomerandPaymentinfo);
                        }
                        return Json(new { result = true, LeadMethodBill = objRelationCustomerandPaymentinfo.PaymentMethod });
                    }
                    else
                    {
                        pi4.CompanyId = currentLoggedIn.CompanyId.Value;
                        pi4.BillMethod = MethodBilling.ACH;
                        _Util.Facade.PaymentInfoFacade.InsertPaymentInfo(pi4);
                        PaymentInfoCustomer objpayment = new PaymentInfoCustomer()
                        {
                            CompanyId = currentLoggedIn.CompanyId.Value,
                            CustomerId = pi4.PaymentCustomerId,
                            PaymentInfoId = pi4.Id
                        };
                        _Util.Facade.PaymentInfoCustomerFacade.InsertPaymentInfoCustomer(objpayment);
                        var objRelationCustomerandPaymentinfo = _Util.Facade.CustomerFacade.GetLeadByPaymentinfoID(pi4.Id);
                        if (objRelationCustomerandPaymentinfo != null)
                        {
                            objRelationCustomerandPaymentinfo.PaymentMethod = pi4.BillMethod;
                            objRelationCustomerandPaymentinfo.LastUpdatedBy = User.Identity.Name;
                            objRelationCustomerandPaymentinfo.LastUpdatedDate = DateTime.Now.UTCCurrentTime();

                            _Util.Facade.CustomerFacade.UpdateCustomer(objRelationCustomerandPaymentinfo);
                        }

                        return Json(new { result = true, LeadMethodBill = objRelationCustomerandPaymentinfo.PaymentMethod });
                    }
                }
            }

            #endregion

            #region Payment Method Type EFT
            if (pi.BillMethod == "EFT")
            {
                if (pi.AccountName != null || pi.AcountNo != null || pi.BankAccountType != null || pi.CardExpireDate != null || pi.CardNumber != null || pi.CardSecurityCode != null || pi.CardType != null || pi.RoutingNo != null)
                {
                    if (pi.Id > 0)
                    {
                        pi.CompanyId = currentLoggedIn.CompanyId.Value;
                        pi.BillMethod = MethodBilling.EFT;
                        _Util.Facade.PaymentInfoFacade.UpdatePaymentInfo(pi);
                        PaymentInfoCustomer objpayment = new PaymentInfoCustomer()
                        {
                            CompanyId = currentLoggedIn.CompanyId.Value,
                            CustomerId = pi.PaymentCustomerId,
                            PaymentInfoId = pi.Id
                        };
                        _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(objpayment);
                        var objRelationCustomerandPaymentinfo = _Util.Facade.CustomerFacade.GetLeadByPaymentinfoID(pi.Id);
                        if (objRelationCustomerandPaymentinfo != null)
                        {
                            objRelationCustomerandPaymentinfo.PaymentMethod = pi.BillMethod;
                            objRelationCustomerandPaymentinfo.LastUpdatedBy = User.Identity.Name;
                            objRelationCustomerandPaymentinfo.LastUpdatedDate = DateTime.Now.UTCCurrentTime();
                            _Util.Facade.CustomerFacade.UpdateCustomer(objRelationCustomerandPaymentinfo);
                        }

                        return Json(new { result = true, LeadMethodBill = objRelationCustomerandPaymentinfo.PaymentMethod });
                    }
                    else
                    {
                        pi.CompanyId = currentLoggedIn.CompanyId.Value;
                        pi.BillMethod = MethodBilling.EFT;
                        _Util.Facade.PaymentInfoFacade.InsertPaymentInfo(pi);
                        PaymentInfoCustomer objpayment = new PaymentInfoCustomer()
                        {
                            CompanyId = currentLoggedIn.CompanyId.Value,
                            CustomerId = pi.PaymentCustomerId,
                            PaymentInfoId = pi.Id
                        };
                        _Util.Facade.PaymentInfoCustomerFacade.InsertPaymentInfoCustomer(objpayment);
                        var objRelationCustomerandPaymentinfo = _Util.Facade.CustomerFacade.GetLeadByPaymentinfoID(pi.Id);
                        if (objRelationCustomerandPaymentinfo != null)
                        {
                            objRelationCustomerandPaymentinfo.PaymentMethod = pi.BillMethod;
                            objRelationCustomerandPaymentinfo.LastUpdatedBy = User.Identity.Name;
                            objRelationCustomerandPaymentinfo.LastUpdatedDate = DateTime.Now.UTCCurrentTime();
                            _Util.Facade.CustomerFacade.UpdateCustomer(objRelationCustomerandPaymentinfo);
                        }

                        return Json(new { result = true, LeadMethodBill = objRelationCustomerandPaymentinfo.PaymentMethod });
                    }
                }
            }
            #endregion

            #region Payment Method Type Credit Card
            if (pi2.BillMethod == "Credit Card")
            {
                if (pi2.AccountName != null || pi2.AcountNo != null || pi2.BankAccountType != null || pi2.CardExpireDate != null || pi2.CardNumber != null || pi2.CardSecurityCode != null || pi2.CardType != null || pi2.RoutingNo != null)
                {
                    if (pi2.Id > 0)
                    {
                        pi2.CompanyId = currentLoggedIn.CompanyId.Value;

                        pi2.BillMethod = MethodBilling.CreditCard;
                        _Util.Facade.PaymentInfoFacade.UpdatePaymentInfo(pi2);
                        PaymentInfoCustomer objpayment = new PaymentInfoCustomer()
                        {
                            CompanyId = currentLoggedIn.CompanyId.Value,
                            CustomerId = pi2.PaymentCustomerId,
                            PaymentInfoId = pi2.Id
                        };
                        _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(objpayment);
                        var objRelationCustomerandPaymentinfo = _Util.Facade.CustomerFacade.GetLeadByPaymentinfoID(pi2.Id);
                        if (objRelationCustomerandPaymentinfo != null)
                        {
                            objRelationCustomerandPaymentinfo.PaymentMethod = pi2.BillMethod;
                            objRelationCustomerandPaymentinfo.LastUpdatedBy = User.Identity.Name;
                            objRelationCustomerandPaymentinfo.LastUpdatedDate = DateTime.Now.UTCCurrentTime();
                            _Util.Facade.CustomerFacade.UpdateCustomer(objRelationCustomerandPaymentinfo);
                        }

                        return Json(new { result = true, LeadMethodBill = objRelationCustomerandPaymentinfo.PaymentMethod });
                    }
                    else
                    {
                        pi2.CompanyId = currentLoggedIn.CompanyId.Value;
                        pi2.BillMethod = MethodBilling.CreditCard;
                        _Util.Facade.PaymentInfoFacade.InsertPaymentInfo(pi2);
                        PaymentInfoCustomer objpayment = new PaymentInfoCustomer()
                        {
                            CompanyId = currentLoggedIn.CompanyId.Value,
                            CustomerId = pi2.PaymentCustomerId,
                            PaymentInfoId = pi2.Id
                        };
                        _Util.Facade.PaymentInfoCustomerFacade.InsertPaymentInfoCustomer(objpayment);
                        var objRelationCustomerandPaymentinfo = _Util.Facade.CustomerFacade.GetLeadByPaymentinfoID(pi2.Id);
                        if (objRelationCustomerandPaymentinfo != null)
                        {
                            objRelationCustomerandPaymentinfo.PaymentMethod = pi2.BillMethod;
                            objRelationCustomerandPaymentinfo.LastUpdatedDate = DateTime.Now.UTCCurrentTime();
                            objRelationCustomerandPaymentinfo.LastUpdatedBy = User.Identity.Name;
                            _Util.Facade.CustomerFacade.UpdateCustomer(objRelationCustomerandPaymentinfo);
                        }

                        return Json(new { result = true, LeadMethodBill = objRelationCustomerandPaymentinfo.PaymentMethod });
                    }
                }
            }
            #endregion

            #region Payment Method Type Debit Card

            if (pi1.BillMethod == "Debit Card")
            {
                if (pi1.AccountName != null || pi1.AcountNo != null || pi1.BankAccountType != null || pi1.CardExpireDate != null || pi1.CardSecurityCode != null || pi1.CardType != null || pi1.RoutingNo != null)
                {
                    if (pi1.Id > 0)
                    {
                        pi1.CompanyId = currentLoggedIn.CompanyId.Value;
                        pi1.BillMethod = MethodBilling.DebitCard;
                        _Util.Facade.PaymentInfoFacade.UpdatePaymentInfo(pi1);
                        PaymentInfoCustomer objpayment = new PaymentInfoCustomer()
                        {
                            CompanyId = currentLoggedIn.CompanyId.Value,
                            CustomerId = pi1.PaymentCustomerId,
                            PaymentInfoId = pi1.Id
                        };
                        _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(objpayment);
                        var objRelationCustomerandPaymentinfo = _Util.Facade.CustomerFacade.GetLeadByPaymentinfoID(pi1.Id);
                        if (objRelationCustomerandPaymentinfo != null)
                        {
                            objRelationCustomerandPaymentinfo.PaymentMethod = pi1.BillMethod;
                            objRelationCustomerandPaymentinfo.LastUpdatedBy = User.Identity.Name;
                            objRelationCustomerandPaymentinfo.LastUpdatedDate = DateTime.Now.UTCCurrentTime();
                            _Util.Facade.CustomerFacade.UpdateCustomer(objRelationCustomerandPaymentinfo);
                        }

                        return Json(new { result = true, LeadMethodBill = objRelationCustomerandPaymentinfo.PaymentMethod });
                    }
                    else
                    {
                        pi1.CompanyId = currentLoggedIn.CompanyId.Value;
                        pi1.BillMethod = MethodBilling.DebitCard;
                        _Util.Facade.PaymentInfoFacade.InsertPaymentInfo(pi1); //insert into paymentInfo
                        PaymentInfoCustomer objpayment = new PaymentInfoCustomer()
                        {
                            CompanyId = currentLoggedIn.CompanyId.Value,
                            CustomerId = pi1.PaymentCustomerId,
                            PaymentInfoId = pi1.Id
                        };
                        _Util.Facade.PaymentInfoCustomerFacade.InsertPaymentInfoCustomer(objpayment); //insert into PaymentInfoCustomer
                        var objRelationCustomerandPaymentinfo = _Util.Facade.CustomerFacade.GetLeadByPaymentinfoID(pi1.Id);
                        if (objRelationCustomerandPaymentinfo != null)
                        {
                            objRelationCustomerandPaymentinfo.PaymentMethod = pi1.BillMethod;
                            objRelationCustomerandPaymentinfo.LastUpdatedBy = User.Identity.Name;
                            objRelationCustomerandPaymentinfo.LastUpdatedDate = DateTime.Now.UTCCurrentTime();
                            _Util.Facade.CustomerFacade.UpdateCustomer(objRelationCustomerandPaymentinfo);
                        }

                        return Json(new { result = true, LeadMethodBill = objRelationCustomerandPaymentinfo.PaymentMethod });
                    }
                }
            }

            #endregion

            #region Payment Method Type Cash
            if (PaymentCash.BillMethod != null)
            {
                if (PaymentCash.BillMethod.ToLower() == "cash")
                {
                    if (PaymentCash.PaymentCustomerId != new Guid())
                    {
                        #region Edit cash payment method
                        if (PaymentCash.Id > 0)
                        {
                            var PaymentInfoDb = _Util.Facade.PaymentInfoFacade.GetPaymentInfoByIdAndCompanyId(PaymentCash.Id, currentLoggedIn.CompanyId.Value);
                            if (PaymentInfoDb != null)
                            {
                                PaymentInfoDb.AccountName = "";
                                PaymentInfoDb.BankAccountType = "";
                                PaymentInfoDb.RoutingNo = "";
                                PaymentInfoDb.AcountNo = "";
                                PaymentInfoDb.CardType = "";
                                PaymentInfoDb.CardNumber = "";
                                PaymentInfoDb.CardExpireDate = "";
                                PaymentInfoDb.CardSecurityCode = "";
                                PaymentInfoDb.CheckNo = "";
                                PaymentInfoDb.IsCash = true;

                                result = _Util.Facade.PaymentInfoFacade.UpdatePaymentInfo(PaymentInfoDb);

                                if (result)
                                {
                                    var CustomerDbvalue = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(PaymentCash.PaymentCustomerId);
                                    if (CustomerDbvalue != null)
                                    {
                                        CustomerDbvalue.PaymentMethod = PaymentCash.BillMethod;
                                        CustomerDbvalue.LastUpdatedBy = User.Identity.Name;
                                        CustomerDbvalue.LastUpdatedDate = DateTime.Now.UTCCurrentTime();
                                        CustomerDbvalue.IsActive = true;
                                        result = _Util.Facade.CustomerFacade.UpdateCustomer(CustomerDbvalue);
                                    }
                                }
                            }
                        }
                        #endregion
                        #region Insert cash payment method
                        else
                        {
                            PaymentCash.CompanyId = currentLoggedIn.CompanyId.Value;
                            PaymentCash.IsCash = true;
                            result = _Util.Facade.PaymentInfoFacade.InsertPaymentInfo(PaymentCash) > 0;
                            if (result)
                            {
                                PaymentInfoCustomer DBPaymentInfoCustomer = new PaymentInfoCustomer()
                                {
                                    CompanyId = currentLoggedIn.CompanyId.Value,
                                    CustomerId = PaymentCash.PaymentCustomerId,
                                    PaymentInfoId = PaymentCash.Id
                                };
                                result = _Util.Facade.PaymentInfoCustomerFacade.InsertPaymentInfoCustomer(DBPaymentInfoCustomer) > 0;

                                var CustomerInfo = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(PaymentCash.PaymentCustomerId);
                                if (CustomerInfo != null)
                                {
                                    CustomerInfo.PaymentMethod = PaymentCash.BillMethod;
                                    CustomerInfo.LastUpdatedBy = User.Identity.Name;
                                    CustomerInfo.LastUpdatedDate = DateTime.Now.UTCCurrentTime();
                                    CustomerInfo.IsActive = true;
                                    result = _Util.Facade.CustomerFacade.UpdateCustomer(CustomerInfo);
                                }
                            }
                        }
                        #endregion
                    }
                }
            }
            #endregion

            #region Payment Method Type Check
            if (PaymentCheck.BillMethod != null)
            {
                if (PaymentCheck.BillMethod.ToLower() == "check")
                {
                    if (PaymentCheck.CheckNo != "" && PaymentCheck.PaymentCustomerId != new Guid())
                    {
                        #region Edit Check Payment Method
                        if (PaymentCheck.Id > 0)
                        {
                            var PaymentInfoDBData = _Util.Facade.PaymentInfoFacade.GetPaymentInfoByIdAndCompanyId(PaymentCheck.Id, currentLoggedIn.CompanyId.Value);
                            if (PaymentInfoDBData != null)
                            {

                                PaymentInfoDBData.AccountName = "";
                                PaymentInfoDBData.BankAccountType = "";
                                PaymentInfoDBData.RoutingNo = "";
                                PaymentInfoDBData.AcountNo = "";
                                PaymentInfoDBData.CardType = "";
                                PaymentInfoDBData.CardNumber = "";
                                PaymentInfoDBData.CardExpireDate = "";
                                PaymentInfoDBData.CardSecurityCode = "";
                                PaymentInfoDBData.CheckNo = PaymentCheck.CheckNo;
                                PaymentInfoDBData.IsCash = false;
                                result = _Util.Facade.PaymentInfoFacade.UpdatePaymentInfo(PaymentInfoDBData);
                                if (result)
                                {
                                    var CustomerInfo = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(PaymentCheck.PaymentCustomerId);
                                    if (CustomerInfo != null)
                                    {
                                        CustomerInfo.PaymentMethod = PaymentCheck.BillMethod;
                                        CustomerInfo.LastUpdatedBy = User.Identity.Name;
                                        CustomerInfo.LastUpdatedDate = DateTime.Now.UTCCurrentTime();
                                        result = _Util.Facade.CustomerFacade.UpdateCustomer(CustomerInfo);
                                    }
                                }
                            }
                        }
                        #endregion
                        #region Insert Check Payment Method
                        else
                        {
                            PaymentCheck.CompanyId = currentLoggedIn.CompanyId.Value;
                            result = _Util.Facade.PaymentInfoFacade.InsertPaymentInfo(PaymentCheck) > 0;
                            if (result)
                            {
                                PaymentInfoCustomer DBPaymentInfoCustomer = new PaymentInfoCustomer()
                                {
                                    CompanyId = currentLoggedIn.CompanyId.Value,
                                    CustomerId = PaymentCheck.PaymentCustomerId,
                                    PaymentInfoId = PaymentCheck.Id
                                };
                                result = _Util.Facade.PaymentInfoCustomerFacade.InsertPaymentInfoCustomer(DBPaymentInfoCustomer) > 0;

                                var CustomerInfo = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(PaymentCheck.PaymentCustomerId);
                                if (CustomerInfo != null)
                                {
                                    CustomerInfo.PaymentMethod = PaymentCheck.BillMethod;
                                    CustomerInfo.LastUpdatedBy = User.Identity.Name;
                                    CustomerInfo.LastUpdatedDate = DateTime.Now.UTCCurrentTime();
                                    result = _Util.Facade.CustomerFacade.UpdateCustomer(CustomerInfo);
                                }
                            }
                        }
                        #endregion
                    }
                }
            }
            #endregion

            #endregion
            else
            {
                return Json(false);
            }
            return Json(true);
        }

        [Authorize]
        [HttpPost]
        public JsonResult SaveLeadSetupContactVerbal(Customer CUS)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            //bool result1 = false;
            bool result = false;

            if (currentLoggedIn == null)
            {
                return Json(result);
            }
            #region Service Setups
            if (CUS != null)
            {
                #region update customer informations
                if (CUS.ContractTeam != null)// && CUS.CustomerModel.PaymentMethod != null)
                {
                    var LeadID = CUS.Id;
                    if (LeadID > 0)
                    {
                        var LeadInfo = _Util.Facade.CustomerFacade.GetCustomersById(LeadID);

                        if (LeadInfo != null)
                        {
                            LeadInfo.ContractTeam = CUS.ContractTeam;
                            LeadInfo.Passcode = CUS.Passcode;
                            LeadInfo.RenewalTerm = CUS.RenewalTerm;
                            LeadInfo.OriginalContactDate = CUS.OriginalContactDate;
                            LeadInfo.SSN = CUS.SSN;
                            result = _Util.Facade.CustomerFacade.UpdateCustomer(LeadInfo);
                        }
                        CustomerExtended extended = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(LeadInfo.CustomerId);
                        if (extended != null)
                        {
                            extended.ContractStartDate = CUS.OriginalContactDate;
                            _Util.Facade.CustomerFacade.UpdateCustomerExtended(extended);
                        }
                        else
                        {
                            extended = new CustomerExtended();
                            extended.CustomerId = LeadInfo.CustomerId;
                            extended.ContractStartDate = LeadInfo.OriginalContactDate;
                            _Util.Facade.CustomerFacade.InsertCustomerExtended(extended);
                        }
                        Customer StepInfo = _Util.Facade.CustomerFacade.GetCustomersById(LeadID);
                        if (StepInfo != null && StepInfo.SmartSetUpStep < 5)
                        {
                            StepInfo.SmartSetUpStep = 5;
                            _Util.Facade.CustomerFacade.UpdateCustomer(StepInfo);
                        }
                    }
                }
                #endregion
            }
            #endregion
            else
            {
                return Json(false);
            }
            return Json(true);
        }

        [Authorize]
        [HttpPost]
        public JsonResult FinalSmartCustomerSetupData(int setupid, string contrcatType,string discountAmount,string DiscountType)
        {
            bool result = false;
            List<string> message = new List<string>();
            FinalCustomerSetupData Model = new FinalCustomerSetupData();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            var objCustomerdata = _Util.Facade.CustomerFacade.GetCustomerById(setupid);

            if (objCustomerdata != null)
            {
                #region Contrcat Type
                CustomerExtended cusEx = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(objCustomerdata.CustomerId);
                if (cusEx != null)
                {
                    cusEx.ContractCreatedDate = DateTime.UtcNow;
                    cusEx.ContractType = contrcatType;
                    _Util.Facade.CustomerFacade.UpdateCustomerExtended(cusEx);
                }
                #endregion

                Model = _Util.Facade.CustomerFacade.GetAllFinalSmartCustomerSetupDataByCompanyIdAndCustomerId(CurrentUser.CompanyId.Value, objCustomerdata.CustomerId);
            }
            if (string.IsNullOrWhiteSpace(objCustomerdata.FirstName) || string.IsNullOrWhiteSpace(objCustomerdata.LastName))
            {
                message.Add("For signing agreement first name and last name required. ");
            }
            if (Model.ListPackageCustomer.Count == 0)
            {
                message.Add("You have not selected any package. ");
            }
            if (Model.ListCustomerAppointmentEquipment.Count == 0)
            {
                message.Add("You have not selected any Equipment. ");
            }
            if (Model.ListPaymentInfoCustomer.Count == 0)
            {
                message.Add("You have not selected any payment method. ");
            }
            if (string.IsNullOrWhiteSpace(objCustomerdata.Passcode))
            {
                message.Add("You have not selected any verbal password. ");
            }
            if (Model.ListPaymentInfoCustomer.Count > 0)
            {
                result = true;
            }

            Customer LeadDetails = _Util.Facade.CustomerFacade.GetCustomersById(setupid);
            if (LeadDetails == null)
            {
                return Json(result);
            }

            List<CustomerPackageEqp> CustomerPackageEqpList = _Util.Facade.CustomerFacade.IsLeadAppointmentEquipmentExistCheckCustomerPackageEqp(objCustomerdata.CustomerId, CurrentUser.CompanyId.Value);
            #region Save Setep
            if (LeadDetails != null && LeadDetails.SmartSetUpStep < 4)
            {
                LeadDetails.SmartSetUpStep = 4;
                _Util.Facade.CustomerFacade.UpdateCustomer(LeadDetails);
            }

            #endregion

              
            #region Insert and Update Package settings and Equipment Settings


            #region Equipment Setup
            var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(LeadDetails.CustomerId, CurrentUser.CompanyId.Value);


            double? discountPercentage;
            double? discountNumber;
            double? eqptotal=0;
            double? eqpFinaltotal = 0;

            foreach (var item in CustomerPackageEqpList)
            {
                eqptotal = item.Total;
                eqpFinaltotal = eqpFinaltotal + eqptotal;
            }


            if (DiscountType.Trim() == "percent")
            {
                discountPercentage = Convert.ToDouble(discountAmount);
                discountNumber = (eqpFinaltotal * discountPercentage)/100;

            }
            else
            {
                discountPercentage = 0.00;
                discountNumber = Convert.ToDouble(discountAmount);
            }

            if (LeadDetails != null && PackageCustomerDetails != null)
            {
                foreach (var item in CustomerPackageEqpList)
                {
                    if (item.Id > 0)
                    {
                        _Util.Facade.PackageFacade.DeleteCustomerPackageEqpById(item.Id);
                    }
                    if (item.EquipmentId != new Guid())
                    {
                        if (LeadDetails.TransferCustomerId != null && LeadDetails.TransferCustomerId.HasValue && LeadDetails.TransferCustomerId.Value > 0)
                        {
                            CustomerPackageEqp customerPackage = new CustomerPackageEqp()
                            {
                                CompanyId = CurrentUser.CompanyId.Value,
                                CustomerId = LeadDetails.CustomerId,
                                PackageId = PackageCustomerDetails.PackageId,
                                EquipmentId = item.EquipmentId,
                                IsIncluded = false,
                                IsDevice = false,
                                IsOptionalEqp = false,
                                IsServiceEquipment = false,
                                Quantity = item.Quantity,
                                UnitPrice = item.UnitPrice,
                                DiscountUnitPricce = item.DiscountUnitPricce,
                                DiscountPckage = item.DiscountPckage,
                                Total = item.Total,
                                ServiceId = item.ServiceId,
                                IsTransfered = false,
                                IsEqpExist = false,
                                DiscountInAmount = discountNumber,
                                DiscountPercent = discountPercentage
                            };
                            result = _Util.Facade.PackageFacade.InsertCustomerPackageEqp(customerPackage) > 0;
                        }
                        else
                        {
                            CustomerPackageEqp customerPackage = new CustomerPackageEqp()
                            {
                                CompanyId = CurrentUser.CompanyId.Value,
                                CustomerId = LeadDetails.CustomerId,
                                PackageId = PackageCustomerDetails.PackageId,
                                IsPackageEqp = item.IsPackageEqp,
                                EquipmentId = item.EquipmentId,
                                IsIncluded = item.IsIncluded,
                                IsDevice = item.IsDevice,
                                IsOptionalEqp = item.IsOptionalEqp,
                                IsServiceEquipment = false,
                                Quantity = item.Quantity,
                                UnitPrice = item.UnitPrice,
                                DiscountUnitPricce = item.DiscountUnitPricce,
                                DiscountPckage = item.DiscountPckage,
                                Total = item.Total,
                                ServiceId = item.ServiceId,
                                DiscountInAmount = discountNumber,
                                DiscountPercent = discountPercentage
                            };
                            result = _Util.Facade.PackageFacade.InsertCustomerPackageEqp(customerPackage) > 0;
                        }
                    }
                }
            }


            #endregion

            #endregion

            TotalCalculatePayAmount totalpay = CalculateTotalPayAmmount(LeadDetails.Id);

            return Json(new { result = result, message = message });
        }

        //public ActionResult GetSmartLeadsForPopUp(int? LeadId, bool? grant, int? templateid, bool? firstpage, int? ticketid, bool? recreate, bool? isinvoice, string invoiceid, bool? isestimator, int? estid, bool? commercial,string EstimatorId)
        public ActionResult GetSmartLeadsForPopUp(int? LeadId, bool? grant, int? templateid, bool? firstpage, int? ticketid, bool? recreate, bool? isinvoice, string invoiceid, bool? isestimator, int? estid, bool? commercial,string EstimatorId)
        {
            
            estid = 0;
            //string EstimatorId = "EST00001072";
            DateTime ContractDate = new DateTime();
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            GlobalSetting SingleContractAgreement = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentLoggedInUser.CompanyId.Value, "ShowSingleContractAgreement"); 
            if (invoiceid == "0")
            {
                invoiceid = "";
            }
            #region invoice contract
            if (!string.IsNullOrWhiteSpace(invoiceid) && invoiceid != null && isinvoice == true && grant == false)
            {
                List<SelectListItem> estimatedoc = new List<SelectListItem>();
                estimatedoc.Add(new SelectListItem()
                {
                    Text = "Select Document",
                    Value = ""
                });
                estimatedoc.AddRange(_Util.Facade.FileFacade.GetAllContractAgreeemntTemplate().Select(x => new SelectListItem()
                {
                    Text = x.Name.ToString(),
                    Value = x.Id.ToString()
                }));
                ViewBag.multipledoc = estimatedoc;
                ViewBag.LeadId = LeadId;
                ViewBag.InvoiceId = invoiceid;
                return View("~/Views/SmartLeads/EstimateAgreementDocument.cshtml");
            }
            #endregion 

            else if (SingleContractAgreement != null && SingleContractAgreement.Value.ToLower() == "false" && grant == false)
            {
                List<SelectListItem> multipledoc = new List<SelectListItem>();
                multipledoc.Add(new SelectListItem()
                {
                    Text = "Select Document",
                    Value = ""
                });
                multipledoc.AddRange(_Util.Facade.FileFacade.GetAllContractAgreeemntTemplate().Select(x => new SelectListItem()
                {
                    Text = x.Name.ToString(),
                    Value = x.Id.ToString()
                }));
                ViewBag.multipledoc = multipledoc;
                ViewBag.LeadId = LeadId;
                return View("~/Views/SmartLeads/MultipleAgreementDocument.cshtml");
            }
            Customer cus = new Customer();
            CustomerCompany _cuscom = new CustomerCompany();

            if (LeadId.HasValue)
            {
                cus = _Util.Facade.CustomerFacade.GetCustomerById(LeadId.Value);
                cus.CustomerExtended = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(cus.CustomerId);
                cus.PhoneNumberVal = !string.IsNullOrWhiteSpace(cus.PrimaryPhone) ? cus.PrimaryPhone : !string.IsNullOrWhiteSpace(cus.CellNo) ? cus.CellNo : !string.IsNullOrWhiteSpace(cus.SecondaryPhone) ? cus.SecondaryPhone : "";
                ViewBag.LeadId = LeadId;
                _cuscom = _Util.Facade.CustomerFacade.GetCustomerCompanyByCompanyIdAndCustomerId(CurrentLoggedInUser.CompanyId.Value, cus.CustomerId);
                if (_cuscom != null && _cuscom.IsLead == false)
                {
                    ViewBag.IsRecreate = true;
                }
            }
            if (!string.IsNullOrWhiteSpace(EstimatorId))
            {

            }
            ViewBag.AgreementDocumentHeight = _Util.Facade.GlobalSettingsFacade.GetAgreementDocumentHeightByCompanyId(CurrentLoggedInUser.CompanyId.Value);
            ViewBag.StringHeight = ViewBag.AgreementDocumentHeight + "px";
            ViewBag.agreementtempid = templateid;
            ViewBag.firstpage = firstpage.HasValue ? firstpage.Value : false;
            ViewBag.commercial = commercial.HasValue ? commercial.Value : false;
            ViewBag.ticketid = ticketid.HasValue ? ticketid.Value : 0;
            ViewBag.recreate = recreate.HasValue ? recreate.Value : false;
            ViewBag.isinvoice = isinvoice.HasValue ? isinvoice.Value : false;
            ViewBag.invoiceid = invoiceid;
            ViewBag.isestimator = isestimator.HasValue ? isestimator.Value : false;
            ViewBag.estid = estid.HasValue ? estid.Value : 0;
            ViewBag.userid = CurrentLoggedInUser.UserId;
            ViewBag.ContractDate = ContractDate;
            ViewBag.EstimatorId = EstimatorId;
            if ((firstpage.HasValue && firstpage.Value == true) || (recreate.HasValue && recreate.Value == true))
            {
                var CustomerDetails = _Util.Facade.CustomerFacade.GetCustomerById(LeadId.HasValue ? LeadId.Value : 0);
                if (CustomerDetails != null)
                {
                    CustomerDetails.AgreementEmail = CustomerDetails.EmailAddress;
                    CustomerDetails.AgreementPhoneNo = !string.IsNullOrWhiteSpace(CustomerDetails.PrimaryPhone) ? CustomerDetails.PrimaryPhone : !string.IsNullOrWhiteSpace(CustomerDetails.CellNo) ? CustomerDetails.CellNo : !string.IsNullOrWhiteSpace(CustomerDetails.SecondaryPhone) ? CustomerDetails.SecondaryPhone : "";
                    CustomerDetails.Singature = "";
                    CustomerDetails.IsContractSigned = false;

                    #region Recreate
                    _Util.Facade.CustomerSignatureFacade.DeleteAllSignatureByType(CustomerDetails.CustomerId, "Recreate");

                    //var objrecreate = _Util.Facade.CustomerSignatureFacade.GetRecreateCustomerSignatureByCustomerId(CustomerDetails.CustomerId);
                    //if (objrecreate != null)
                    //{
                    //    objrecreate.Signature = "";
                    //    _Util.Facade.CustomerSignatureFacade.UpdateCustomerSignature(objrecreate);
                    //}
                    #endregion 
                    var objfirstpage = _Util.Facade.CustomerSignatureFacade.GetFirstPageCustomerSignatureByCustomerId(CustomerDetails.CustomerId);
                    if (objfirstpage != null)
                    {
                        objfirstpage.Signature = "";
                        _Util.Facade.CustomerSignatureFacade.UpdateCustomerSignature(objfirstpage);
                    }
                    _Util.Facade.CustomerFacade.UpdateCustomer(CustomerDetails);
                    if (commercial == true)
                    {
                        var objcommercial = _Util.Facade.CustomerSignatureFacade.GetCommercialCustomerSignatureByCustomerId(CustomerDetails.CustomerId);
                        if (objcommercial != null)
                        {
                            objcommercial.Signature = "";
                            _Util.Facade.CustomerSignatureFacade.UpdateCustomerSignature(objcommercial);
                        }
                    }
                }
            }
            //if(isestimator.Value && estid > 0)
            //{
            //    return View("~/Views/Estimator/GetEstimatorReviewContractForPopUp",cus);
            //}
            return View(cus);
        }

        public ActionResult SmartLeadsAgreementPopUp(int? LeadId)
        {
            Customer cus = new Customer();
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (LeadId.HasValue)
            {
                cus = _Util.Facade.CustomerFacade.GetCustomerById(LeadId.Value);
                ViewBag.LeadId = LeadId;
            }

            return View(cus);
        }

        public ActionResult PrintBlankAgreement()
        {
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            ViewBag.AgreementDocumentHeight = _Util.Facade.GlobalSettingsFacade.GetAgreementDocumentHeightByCompanyId(CurrentLoggedInUser.CompanyId.Value);
            ViewBag.StringHeight = ViewBag.AgreementDocumentHeight + "px";
            return View();
        }

        public ActionResult PreviewBalnkAgreement()
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            var CompanyId = CurrentUser.CompanyId.Value;
            var Com = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CompanyId);
            InstallationAgreementModel Model = new InstallationAgreementModel()
            {
                CompanyName = Com.CompanyName,
                CompanySate = string.Format("{0}, {1} {2}", Com.City, Com.State, Com.ZipCode),
                CompanyStreet = Com.Street,
                CompanyWebsite = Com.Website,
                CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyLogoForPDFByCompanyId(CompanyId),
            };
            //  return View(Model);
            ViewBag.CompanyId = CompanyId.ToString();
            Model.CompanyId = CompanyId.ToString();
            Model.CurrentCurrency = _Util.Facade.GlobalSettingsFacade.GetCurrentCurrencyByCompanyId(CompanyId);
            string body = _Util.Facade.AgreementFacade.MakeBlankAgreementPdf(Model);
            ViewBag.Body = body;
            return new ViewAsPdf()
            {
                // FileName = flightPlan.ListingItemDetailsModel.FlightDetails + ".pdf",
                PageSize = Rotativa.Options.Size.A4,
                PageOrientation = Orientation.Portrait,
                //PageMargins = new Margins(10, 0, 0, 0),
                PageMargins = new Margins(10, 2, 10, 3)
            };
        }

        #region Number to Words for contract term
        private static string NumberToWords(int number)
        {
            if (number == 0)
                return "zero";

            if (number < 0)
                return "minus " + NumberToWords(Math.Abs(number));

            string words = "";

            if ((number / 1000000000) > 0)
            {
                words += NumberToWords(number / 1000000000) + " billion ";
                number %= 1000000000;
            }

            if ((number / 1000000) > 0)
            {
                words += NumberToWords(number / 1000000) + " million ";
                number %= 1000000;
            }

            if ((number / 1000) > 0)
            {
                words += NumberToWords(number / 1000) + " thousand ";
                number %= 1000;
            }

            if ((number / 100) > 0)
            {
                words += NumberToWords(number / 100) + " hundred ";
                number %= 100;
            }

            if (number > 0)
            {
                if (words != "")
                    words += "and ";

                var unitsMap = new[] { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen" };
                var tensMap = new[] { "zero", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety" };

                if (number < 20)
                    words += unitsMap[number];
                else
                {
                    words += tensMap[number / 10];
                    if ((number % 10) > 0)
                        words += " " + unitsMap[number % 10];
                }
            }
            TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
            words = textInfo.ToTitleCase(words);
            return words;
        }
        #endregion
        #region Estimator Model
        private CreateEstimator GetEstimatorModelById(Estimator Invoice, List<EstimatorDetail> InvoiceDetialList, List<EstimatorService> EstimatorServiceList, Company tempCom, Customer tempCUstomer, EstimatorPDFFilter EstimatorPDFFilters, Guid comid)
        {
            //var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            CreateEstimator Model = new CreateEstimator();
            Model.Estimator = Invoice;
            Model.estimatorDetails = InvoiceDetialList;
            Model.estimatorServices = EstimatorServiceList;
            Model.Estimator.CustomerName = tempCUstomer.Title + " " + tempCUstomer.FirstName + " " + tempCUstomer.LastName;

            //  Model.Invoice.IsEstimate = false;


            //Model.Invoice.InvoiceDate = Invoice.InvoiceDate.HasValue ? Invoice.InvoiceDate.Value : Model.Invoice.InvoiceDate.Value.ClientToUTCTime();
            //if (!string.IsNullOrWhiteSpace(Model.Invoice.EstimateTerm) && Model.Invoice.EstimateTerm != "-1")
            //    Model.Invoice.EstimateTerm = _Util.Facade.LookupFacade.GetDisplayTextByDataValueFromLLookup(Model.Invoice.EstimateTerm);
            //Model.Invoice.DueDate = Invoice.DueDate.HasValue ? Invoice.DueDate.Value : Model.Invoice.DueDate.Value.ClientToUTCTime();
            #region Discount Calculation 
            //if (!string.IsNullOrWhiteSpace(Model.Invoice.DiscountType))
            //{
            //    if (Model.Invoice.DiscountType == "amount")
            //    {
            //        if (Invoice.Discountpercent != null)
            //        {
            //            Model.Discount = Invoice.Discountpercent.Value;
            //        }
            //    }
            //    else
            //    {
            //        if (Invoice.Discountpercent != null)
            //        {
            //            Model.Discount = ((Invoice.Discountpercent / 100) * Model.SubTotal).Value;
            //        }
            //    }
            //}
            #endregion

            #region making Name of Address Bold
            //if (!string.IsNullOrWhiteSpace(Model.Invoice.BillingAddress))
            //{
            //    var split = Model.Invoice.BillingAddress.Split(new string[] { "\n" }, StringSplitOptions.None);

            //    if (split.Count() > 0)
            //    {
            //        string NewAddress = "";
            //        split[0] = "<b>" + split[0] + "</b>";

            //        foreach (var item in split)
            //        {
            //            NewAddress += item + Environment.NewLine;
            //        }
            //        Model.Invoice.BillingAddress = NewAddress;
            //    }
            //}
            //if (!string.IsNullOrWhiteSpace(Model.Invoice.ShippingAddress))
            //{
            //    var split = Model.Invoice.ShippingAddress.Split(new string[] { "\n" }, StringSplitOptions.None);

            //    if (split.Count() > 0)
            //    {
            //        string NewAddress = "";
            //        split[0] = "<b>" + split[0] + "</b>";

            //        foreach (var item in split)
            //        {
            //            NewAddress += item + Environment.NewLine;
            //        }
            //        Model.Invoice.ShippingAddress = NewAddress;
            //    }
            //}
            //if (!string.IsNullOrWhiteSpace(Model.InvoiceShipping))
            //{
            //    var split = Model.InvoiceShipping.Split(new string[] { "\n" }, StringSplitOptions.None);

            //    if (split.Count() > 0)
            //    {
            //        string NewAddress = "";
            //        split[0] = "<b>" + split[0] + "</b>";

            //        foreach (var item in split)
            //        {
            //            NewAddress += item + Environment.NewLine;
            //        }
            //        Model.InvoiceShipping = NewAddress;
            //    }
            //}
            #endregion

            //customer name is customer business name here 
            if (tempCUstomer.BusinessName != "")
            {
                Model.CustomerName = tempCUstomer.BusinessName;
            }
            else
            {
                Model.CustomerName = Model.Estimator.CustomerName;
            }
            Model.CusBussinessName = tempCUstomer.BusinessName;

            Model.SubTotal = 0;
            if (Model.estimatorDetails != null)
            {
                foreach (var item in Model.estimatorDetails)
                {
                    //   item.CreatedBy = User.Identity.Name;
                    item.CreatedDate = DateTime.Now.UTCCurrentTime();
                    //   item.CompanyId = CurrentUser.CompanyId.Value;
                    Model.SubTotal = Model.SubTotal + item.TotalPrice.Value;
                }
            }

            //if (string.IsNullOrWhiteSpace(Model.Invoice.InvoiceMessage))
            //{
            //    Model.Invoice.InvoiceMessage = _Util.Facade.GlobalSettingsFacade.GetInvoiceMessageByCompanyId(CurrentUser.CompanyId.Value);
            //}
            Model.CompanyAddress = tempCom.Address;
            Model.CompanyStreet = tempCom.Street;
            string ComCity = "";
            string ComState = "";
            if (!string.IsNullOrWhiteSpace(tempCom.City))
            {
                ComCity = tempCom.City.UppercaseFirst() + ", ";
            }
            if (!string.IsNullOrWhiteSpace(tempCom.State))
            {
                ComState = tempCom.State + " ";
            }
            #region Company Info
            Model.companyStreetInfo = ComCity + ComState + tempCom.ZipCode;
            Model.CompanyCity = tempCom.City.UppercaseFirst();
            Model.CompanyState = tempCom.State;
            Model.CompanyZip = tempCom.ZipCode;
            Model.CompanyPhone = tempCom.Phone;
            Model.CompanyEmail = tempCom.EmailAdress;
            Model.CompanyName = tempCom.CompanyName;
            Model.PhoneNo = tempCom.Phone;
            Model.CompanyWebsite = tempCom.Website;
            #endregion
            #region Customer Info
            Model.CustomerInfo = _Util.Facade.GlobalSettingsFacade.GetCustomerAddressFormat(comid);
            Model.CustomerCity = tempCUstomer.City.UppercaseFirst();
            Model.CustomerState = tempCUstomer.State;
            Model.CustomerZipCode = tempCUstomer.ZipCode;
            Model.CustomerNo = tempCUstomer.CustomerNo;
            Model.CustomerStreet = tempCUstomer.Street;
            Model.CompanyInfo = _Util.Facade.GlobalSettingsFacade.GetCompanyAddressFormat(comid);
            //ViewBag.ShippingValue = _Util.Facade.GlobalSettingsFacade.GetShippingSettingCompanyId(tempCom.CompanyId);
            #endregion
            Model._EstimatorPDFFilter = EstimatorPDFFilters;

            Model.ShowEstimatorShippingAddress = _Util.Facade.GlobalSettingsFacade.GetShippingSettingCompanyId(comid).ToLower() == "true" ? true : false;

            if (string.IsNullOrWhiteSpace(tempCom.CompanyLogo))
            {
                tempCom.CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyLogoForPDFByCompanyId(comid);
            }
            Model.CompanyLogo = tempCom.CompanyLogo;
            //if (!string.IsNullOrWhiteSpace(Model.Invoice.DiscountType))
            //{
            //    if (Model.Invoice.DiscountType != "amount")
            //    {
            //        if (Model.Invoice.Discountpercent.HasValue && Model.Invoice.Discountpercent.Value > 0)
            //        {
            //            Model.Discount = ((Model.Invoice.Discountpercent / 100) * Model.SubTotal).Value;
            //        }
            //    }
            //}
            //if (Model.Invoice.BalanceDue > 0)
            //{
            //    Model.AmountInWord = NumberToWords(Model.Invoice.BalanceDue.Value); //NumberToWords(Model.Invoice.TotalAmount.Value);
            //}
            return Model;
        }
        #endregion
        public ActionResult SmartInstallationAgreement_v2(string url)
        {
            int leadid = 0;
            int agreementtempid = 0;
            bool firstpage = false;
            bool commercial = false;
            int ticketid = 0;
            bool recreate = false;
            string invoiceid = "";
            bool isinvoice = false;
            bool isestimator = false;
            int estid = 0;
            Guid userid = Guid.Empty;
            bool isPublic = false;
            if (!string.IsNullOrWhiteSpace(url))
            {
                string[] spurl = DESEncryptionDecryption.DecryptCipherTextToPlainText(url).Split('#');
                if (spurl.Length == 8)
                {
                    leadid = Convert.ToInt32(spurl[0]);
                    if (!string.IsNullOrWhiteSpace(spurl[1]))
                    {
                        agreementtempid = Convert.ToInt32(spurl[1]);
                    }
                    firstpage = Convert.ToBoolean(spurl[2]);
                    ticketid = Convert.ToInt32(spurl[3]);
                    recreate = Convert.ToBoolean(spurl[4]);
                    invoiceid = Convert.ToString(spurl[6]);
                    isinvoice = Convert.ToBoolean(spurl[5]);
                    isPublic = Convert.ToBoolean(spurl[7]);
                }
                else if (spurl.Length == 12)
                {
                    leadid = Convert.ToInt32(spurl[0]);
                    if (!string.IsNullOrWhiteSpace(spurl[1]))
                    {
                        agreementtempid = Convert.ToInt32(spurl[1]);
                    }
                    firstpage = Convert.ToBoolean(spurl[2]);
                    ticketid = Convert.ToInt32(spurl[3]);
                    recreate = Convert.ToBoolean(spurl[4]);
                    invoiceid = Convert.ToString(spurl[6]);
                    isinvoice = Convert.ToBoolean(spurl[5]);
                    isPublic = Convert.ToBoolean(spurl[7]);
                    isestimator = Convert.ToBoolean(spurl[8]);
                    estid = Convert.ToInt32(spurl[9]);
                    userid = new Guid(spurl[10]);
                    commercial = Convert.ToBoolean(spurl[11]);
                }
                else if (spurl.Length == 11)
                {
                    leadid = Convert.ToInt32(spurl[0]);
                    if (!string.IsNullOrWhiteSpace(spurl[1]))
                    {
                        agreementtempid = Convert.ToInt32(spurl[1]);
                    }
                    firstpage = Convert.ToBoolean(spurl[2]);
                    ticketid = Convert.ToInt32(spurl[3]);
                    recreate = Convert.ToBoolean(spurl[4]);
                    invoiceid = Convert.ToString(spurl[6]);
                    isinvoice = Convert.ToBoolean(spurl[5]);
                    isestimator = Convert.ToBoolean(spurl[7]);
                    estid = Convert.ToInt32(spurl[8]);
                    userid = new Guid(spurl[9]);
                    commercial = Convert.ToBoolean(spurl[10]);
                }
                else
                {
                    leadid = Convert.ToInt32(spurl[0]);
                    if (!string.IsNullOrWhiteSpace(spurl[1]))
                    {
                        agreementtempid = Convert.ToInt32(spurl[1]);
                    }
                    firstpage = Convert.ToBoolean(spurl[2]);
                    ticketid = Convert.ToInt32(spurl[3]);
                    recreate = Convert.ToBoolean(spurl[4]);
                    invoiceid = Convert.ToString(spurl[6]);
                    isinvoice = Convert.ToBoolean(spurl[5]);
                    commercial = Convert.ToBoolean(spurl[6]);
                }
            }
            DateTime FixDate = DateTime.Now.UTCCurrentTime();
            InstallationAgreementModel Model = new InstallationAgreementModel();
            Model.EmergencyContactList = new List<EmergencyContact>();
            Model.ListAgreementAnswer = new List<AgreementAnswer>();
            Model.EquipmentList = new List<Equipment>();
            Model.InvoiceList = new List<InvoiceDetail>();
            Model.CustomerAgreement = new List<CustomerAgreement>();
            Model.SingleCustomerAgreement = new CustomerAgreement();
            var taxtotal = 0.0;
            Guid CompanyId = new Guid();
            if (User.Identity.IsAuthenticated)
            {
                var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
                CompanyId = CurrentUser.CompanyId.Value;
            }
            else
            {
                CustomerCompany custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(leadid);
                CompanyId = custommerCompany.CompanyId;
            }
            Customer Cus = new Customer();
            CustomerExtended CusExd = new CustomerExtended();
            Company Com = new Company();
            if (leadid != 0)
            {
                if (!_Util.Facade.CustomerFacade.CustomerIsInCompany(leadid, CompanyId))
                {
                    return null;
                }

                Cus = _Util.Facade.CustomerFacade.GetCustomersById(leadid);
                if (Cus != null)
                {
                    CusExd = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(Cus.CustomerId);
                }
                Com = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CompanyId);

                string ContractTerm = "";
                string ContractTermInWord = "";
                if (!string.IsNullOrWhiteSpace(Cus.ContractTeam) && Cus.ContractTeam != "-1")
                {
                    if (Cus.ContractTeam.ToLower() == "month to month")
                    {
                        ContractTerm = Cus.ContractTeam;
                        ContractTermInWord = Cus.ContractTeam;
                    }
                    else
                    {
                        ContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))).ToString();
                        ContractTermInWord = NumberToWords((Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))));
                    }

                }
                #region Agreement History
                var cusAgrHistory = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementHistory(Cus.CustomerId, "AgreementCreate");
                if (cusAgrHistory == null)
                {
                    CustomerAgreement cusAgrModel = new CustomerAgreement()
                    {
                        CompanyId = Com.CompanyId,
                        CustomerId = Cus.CustomerId,
                        IP = AppConfig.GetIP,
                        UserAgent = AppConfig.GetUserAgent,
                        Type = LabelHelper.CustomerAgreementHistory.AgreementCreate,
                        AddedDate = DateTime.UtcNow
                    };
                    _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(cusAgrModel);
                }
                #endregion
                var objCusAgree = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByComIdAndCusIsAndLoadAgreement(Com.CompanyId, Cus.CustomerId);
                if (objCusAgree == null)
                {
                    CustomerAgreement objCustomerAgreement = new CustomerAgreement()
                    {
                        CompanyId = Com.CompanyId,
                        CustomerId = Cus.CustomerId,
                        IP = AppConfig.GetIP,
                        UserAgent = AppConfig.GetUserAgent,
                        Type = LabelHelper.CustomerAgreementLog.LoadAgreement,
                        AddedDate = DateTime.UtcNow
                    };
                    _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(objCustomerAgreement);
                }
                var UpfrontAddOnTotal = 0.0;
                var UpfrontAddOnTotalPromo = 0.0;
                bool IsUpfrontPromo = false;
                bool IsServicePromo = false;
                var MonthlyServiceFeeTotal = 0.0;
                var TotalMonthlyMonitoring = 0.0;
                var NewSubTotal = 0.0;
                var TotalDueAtSigning = 0.0;
                var EquipmentTotalPrice = 0.0;
                double ServiceTotalPrice = 0.0;
                var AgreementSubtotal = 0.0;
                var AgreementTotal = 0.0;
                var ServiceTax = 0.0;
                var AgreementTax = 0.0;
                var NotARBEnabledTotalPrice = 0.0;
                string InstallTypeName = "";
                bool IsNonConfirming = false;
                var NonConfirmingFee = 0.0;
                var AdvanceServiceFeeTotal = 0.0;
                string contractCreatedDateVal = "";
                double discountamount = 0.00;
                if (CusExd.ContractCreatedDate != null)
                {
                    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.ToString("M/d/yy");
                }
                else
                {
                    CusExd.ContractCreatedDate = DateTime.UtcNow;
                    _Util.Facade.CustomerFacade.UpdateCustomerExtended(CusExd);
                    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.ToString("M/d/yy");
                }
                if (Cus.CreditScoreValue == null)
                {
                    Cus.CreditScoreValue = 0;
                }
                var PackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(Cus.CustomerId);
                if (PackageCustomer != null && PackageCustomer.NonConforming && PackageCustomer.NonConformingFee > 0 && (Cus.CreditScoreValue < PackageCustomer.MinCredit || Cus.CreditScoreValue > PackageCustomer.MaxCredit))
                {

                    IsNonConfirming = true;
                    NonConfirmingFee = PackageCustomer.NonConformingFee.Value;
                }
                else if (PackageCustomer != null && PackageCustomer.PackageId == Guid.Empty)
                {
                    IsNonConfirming = true;
                    NonConfirmingFee = PackageCustomer.NonConformingFee.Value;
                }

                var SmartPackageEquipmentServiceList = new List<SmartPackageEquipmentService>();
                var GetCityTaxList = _Util.Facade.CompanyBranchFacade.GetCityTaxRate(Cus.CustomerId, Com.CompanyId);
                if (GetCityTaxList.Count > 0)
                {
                    foreach (var item1 in GetCityTaxList)
                    {
                        AgreementTax = item1.Rate;
                        ServiceTax = item1.Rate;
                    }
                }
                else
                {
                    Guid CustomerId = new Guid();
                    if (Cus != null)
                    {
                        CustomerId = Cus.CustomerId;
                    }
                    var GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(Com.CompanyId, CustomerId);
                    if (GetSalesTax != null)
                    {
                        AgreementTax = Convert.ToDouble(GetSalesTax.Value);
                        ServiceTax = Convert.ToDouble(GetSalesTax.Value);
                    }
                }
                #region Invoice
                Invoice invoice = new Invoice();
                CustomerProratedBill cpb = new CustomerProratedBill();
                cpb = _Util.Facade.InvoiceFacade.GetCusProratedBillByCustomerId(Cus.CustomerId);
                List<InvoiceDetail> invoiceList = new List<InvoiceDetail>();
                string invDiagram = "";
                if (!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true)
                {
                    invoice = _Util.Facade.InvoiceFacade.GetByInvoiceId(invoiceid);
                    if (invoice != null)
                    {
                        invDiagram = invoice.InvoiceContractDiagram;
                        invoiceList = _Util.Facade.InvoiceFacade.GetInvoiceDetialsListByInvoiceId(invoice.InvoiceId);
                    }
                }
                #endregion
                #region Estimator
                Employee userInfo = new Employee();
                if (userid != Guid.Empty)
                {
                    userInfo = _Util.Facade.EmployeeFacade.GetEmployeeByEmployeeId(userid);
                }
                CreateEstimator createest = new CreateEstimator();
                if (isestimator && estid > 0)
                {
                    CreateEstimator ca = new CreateEstimator();
                    ca.EstimatorSetting = new EstimatorSetting();
                    ca.Company = Com;

                    ca.Estimator = _Util.Facade.EstimatorFacade.GetById(estid);
                    ca._EstimatorPDFFilter = _Util.Facade.EstimatorFacade.GetEstimatorPdfFilterByComIdCusIdUserId(Com.CompanyId, userid, ca.Estimator.CustomerId);
                    ca.estimatorDetails = _Util.Facade.EstimatorFacade.GetEstimatorDetailListByEstimatorId(ca.Estimator.EstimatorId);
                    ca.estimatorServices = _Util.Facade.EstimatorFacade.GetEstimatorServicesByEstimatorId(ca.Estimator.EstimatorId);
                    if (ca.Estimator == null || ca.Estimator.CompanyId != CompanyId)
                    {
                        return null;
                    }
                    if ((ca.estimatorDetails == null || ca.estimatorDetails.Count() == 0) && (ca.estimatorServices == null || ca.estimatorServices.Count() == 0))
                    {
                        return null;
                    }
                    Customer tempCUstomer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(ca.Estimator.CustomerId);
                    if (tempCUstomer == null)
                    {
                        return null;
                    }

                    CreateEstimator processedModel = GetEstimatorModelById(ca.Estimator, ca.estimatorDetails, ca.estimatorServices, Com, tempCUstomer, ca._EstimatorPDFFilter, CompanyId);
                    Estimator estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(ca.Estimator.EstimatorId);
                    if (estimator != null)
                    {
                        ViewBag.CoverLetter = estimator.CoverLetter;
                        processedModel.Estimator.CoverLetter = estimator.CoverLetter;
                        processedModel.Estimator.CoverLetterFile = estimator.CoverLetterFile;
                        processedModel.Estimator.ServicePlanType = estimator.ServicePlanType;
                        processedModel.Estimator.ServicePlanRate = estimator.ServicePlanRate;
                        processedModel.Estimator.ServicePlanAmount = estimator.ServicePlanAmount;
                        processedModel.Estimator.ServiceTaxAmount = estimator.ServiceTaxAmount;
                        processedModel.Estimator.ServiceTotalAmount = estimator.ServiceTotalAmount;
                        processedModel.Estimator.ShowServicePlan = estimator.ShowServicePlan;
                        processedModel.Estimator.ShowService = estimator.ShowService;
                        processedModel.Estimator.ServicePlanTypeName = "Service Plan";

                        SelectListItem selectListItem = _Util.Facade.LookupFacade.GetDropdownsByKey("ServicePlans").Where(x => x.Value == estimator.ServicePlanType).FirstOrDefault();
                        if (selectListItem != null)
                        {
                            processedModel.Estimator.ServicePlanTypeName = selectListItem.Text;
                        }

                    }
                    if (ca.estimatorDetails != null)
                    {
                        foreach (var item in ca.estimatorDetails)
                        {
                            Manufacturer Manufacturer = _Util.Facade.EquipmentFacade.GetManufacturerByManufacturerId(item.ManufacturerId);
                            if (Manufacturer != null)
                            {
                                item.Manufacturer = Manufacturer.Name;
                            }
                            item.CreatedDate = DateTime.Now.UTCCurrentTime();
                            ca.SubTotal = ca.SubTotal + (item.TotalPrice.HasValue ? item.TotalPrice.Value : 0);
                            item.EquipmentFile = _Util.Facade.EquipmentFileFacade.GetEquipmentFilesByEquipmentIdAndFileType(item.EquipmentId, LabelHelper.EquipmentFileType.ProfilePicture).FirstOrDefault();
                            if (item.EquipmentFile == null)
                            {
                                item.EquipmentFile = new EquipmentFile();
                            }
                        }
                    }
                    if (ca.estimatorServices != null)
                    {
                        foreach (var item in ca.estimatorServices)
                        {
                            processedModel.ServiceSubTotal += ca.ServiceSubTotal + item.Amount;
                        }
                        processedModel.TotalServiceAmount = processedModel.ServiceSubTotal + ca.ServiceTax;
                    }

                    //pdfname = processedModel.Estimator.EstimatorId;
                    createest = processedModel;
                    createest.eSecurityLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/eSecurity_logo.png");
                    createest.specializedLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/specialized_property_management_logo.png");
                    string EstimatorContractTerm = "";
                    if (!string.IsNullOrWhiteSpace(createest.Estimator.ContractTerm) && createest.Estimator.ContractTerm != "-1")
                    {
                        if (createest.Estimator.ContractTerm.ToLower() == "month to month")
                        {
                            EstimatorContractTerm = createest.Estimator.ContractTerm;
                        }
                        else
                        {
                            EstimatorContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(createest.Estimator.ContractTerm) * 12))).ToString() + " month";
                        }

                    }
                    createest.EstimatorContractTerm = EstimatorContractTerm;
                }
                #endregion
                var CustomEquipmentList = new List<Equipment>();
                if (firstpage == true || recreate == true)
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }
                else
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }
                var CustomServiceList = new List<Equipment>();
                if (firstpage == true || recreate == true)
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (CustomServiceList.Count > 0)
                    {
                        foreach (var item in CustomServiceList)
                        {
                            EquipmentTotalPrice += item.Total;
                            ServiceTotalPrice += item.Total;
                            MonthlyServiceFeeTotal += item.Total;
                        }
                    }
                }
                else
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (CustomServiceList.Count > 0)
                    {
                        foreach (var item in CustomServiceList)
                        {
                            EquipmentTotalPrice += item.Total;
                            ServiceTotalPrice += item.Total;
                            MonthlyServiceFeeTotal += item.Total;
                        }
                    }
                }
                var NotARBEnabledServiceList = new List<Equipment>();
                if (firstpage == true || recreate == true || commercial == true)
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (NotARBEnabledServiceList.Count > 0)
                    {
                        foreach (var item in NotARBEnabledServiceList)
                        {
                            NotARBEnabledTotalPrice += item.Total;
                        }
                    }
                }
                else
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListFromService(Cus.CustomerId, CompanyId);
                    if (NotARBEnabledServiceList.Count > 0)
                    {
                        foreach (var item in NotARBEnabledServiceList)
                        {
                            NotARBEnabledTotalPrice += item.Total;
                        }
                    }
                }
                #region Advance Monitoring Service Month

                PaymentInfoCustomer paycus = new PaymentInfoCustomer();
                paycus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayForService(Cus.CustomerId);


                int ForMonth = 1;
                if (paycus != null && paycus.ForMonths.HasValue)
                {
                    ForMonth = paycus.ForMonths.Value;
                }
                if (ForMonth > 1)
                {
                    AdvanceServiceFeeTotal = MonthlyServiceFeeTotal * (ForMonth - 1);

                }
                #endregion
                Cus.MonthlyMonitoringFee = Convert.ToString(ServiceTotalPrice);
                TotalMonthlyMonitoring = MonthlyServiceFeeTotal;
                NewSubTotal = TotalMonthlyMonitoring + UpfrontAddOnTotal;
                GlobalSetting glbsFee = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CompanyId, "HasLabourFee");
                if (CustomServiceList.Count > 0 || CustomEquipmentList.Count > 0)
                {
                    if (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue && PackageCustomer.LabourFee.HasValue)
                    {
                        if (glbsFee != null && glbsFee.Value != "true")
                        {
                            PackageCustomer.LabourFee = 0;
                        }
                        else
                        {
                            PackageCustomer.LabourFee = PackageCustomer.LabourFee != null ? PackageCustomer.LabourFee : 0.0;
                        }
                        AgreementSubtotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice + PackageCustomer.LabourFee.Value;
                        NewSubTotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice + PackageCustomer.LabourFee.Value;
                    }
                    else if (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue)
                    {
                        AgreementSubtotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                        NewSubTotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                    }
                    else
                    {
                        AgreementSubtotal = EquipmentTotalPrice;
                        NewSubTotal = EquipmentTotalPrice;
                    }
                }
                if (IsNonConfirming && NonConfirmingFee > 0)
                {
                    AgreementSubtotal = AgreementSubtotal + NonConfirmingFee;
                    NewSubTotal = NewSubTotal + NonConfirmingFee;
                }
                if (AgreementTax != 0.0)
                {
                    double SubtotalForTax = 0.0;
                    if (glbsFee != null && glbsFee.Value == "true" && PackageCustomer.LabourFee.HasValue)
                    {
                        SubtotalForTax = AgreementSubtotal - PackageCustomer.LabourFee.Value;
                    }
                    else
                    {
                        SubtotalForTax = AgreementSubtotal;
                    }

                    taxtotal = (SubtotalForTax / 100) * AgreementTax;
                    Model.TaxTotal = taxtotal;
                    AgreementTotal = AgreementSubtotal + taxtotal;
                    TotalDueAtSigning = NewSubTotal + taxtotal;
                }
                else
                {
                    Model.TaxTotal = 0.0;
                    AgreementTotal = AgreementSubtotal;
                    TotalDueAtSigning = NewSubTotal;
                }
                /// "Mayur" Activation total with tax calculation :Start
                if (ServiceTax != 0.0)
                {
                    taxtotal = (ServiceTotalPrice / 100) * ServiceTax;
                    // MonthlyServiceFeeTotal = ServiceTotalPrice + taxtotal;
                }
                else
                {
                }

                /// "Mayur" Activation total with tax calculation :End

                var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(Cus.CustomerId, CompanyId);
                if (PackageCustomerDetails != null)
                {
                    InstallTypeName = _Util.Facade.PackageFacade.SmartInstallTypeNameByInstallTypeId(Convert.ToInt32(PackageCustomerDetails.SmartInstallTypeId));
                    if (string.IsNullOrWhiteSpace(InstallTypeName))
                    {
                        InstallTypeName = "New Install";
                    }
                    SmartPackageEquipmentServiceList = _Util.Facade.PackageFacade.GetAllSmartPackageIncludeEquipmentByPackageIdAndCompanyId(PackageCustomerDetails.PackageId, CompanyId);
                }
                var PaymentDetails = _Util.Facade.PaymentInfoFacade.GetAllPaymentInfoByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId).Where(m => m.PayFor == "First Month").FirstOrDefault();
                var emercontact = _Util.Facade.EmergencyContactFacade.GetAllEmergencyContactByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId);
                string overviewheader = "";
                string overviewdata = "";
                if (emercontact != null && emercontact.Count > 0)
                {
                    overviewheader = @"<table style='border-collapse:collapse; width:100%;font-family:Arial;table-layout:fixed;font-size:13px;margin-top:20px;'>
                                                          <thread>
                                            <tr style='height:30px;'>
                                  <th style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>Name</th>
   
                                   <th style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'> RelationShip </th>
    
                                    <th style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'> Phone </th>
     
                                     <th style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'> Type </th>
      
                                  </tr>
                                            </thread>
                                            <tbody>
                                            {0}
                                            </tbody>
                                        </table>";
                    foreach (var item in emercontact)
                    {
                        overviewdata += @"<tr style='height: 30px;'>
                                  <td style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>" + item.FirstName + " " + item.LastName + @"</td>
   
                                   <td style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>" + item.RelationShip + @"</td>
    
                                    <td style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>" + item.Phone + @"</td>
     
                                     <td style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>" + item.PhoneType + @"</td>
      
                                  </tr> ";
                    }
                }
                var agreementPayment = _Util.Facade.PaymentInfoFacade.GetLeadAgreementPaymentInfoByCustomerId(Cus.CustomerId);
                string paymentoverviewheader = "";
                string paymentoverviewdata = "";
                if (agreementPayment != null && agreementPayment.Count > 0)
                {
                    paymentoverviewheader = "<table style='border-collapse:collapse; width:100%; font-family:Arial; table-layout:fixed; font-size:13px;'>{0}</table>";
                    foreach (var pay in agreementPayment)
                    {
                        var sppay = pay.Type.Split('_');
                        if (sppay.Length > 0)
                        {
                            if (sppay[0] == "CC")
                            {
                                var cardNumber = pay.CardNumber.Replace('-', ' ').Replace(" ", "");
                                if (cardNumber.Length == 16)
                                {
                                    paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(12, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                                }
                                else
                                {
                                    paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(11, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                                }
                            }
                            else if (sppay[0] == "ACH" && pay.AcountNo.Length > 4)
                            {
                                paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Type: " + pay.BankAccountType + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Routing No: " + pay.RoutingNo + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account No: " + string.Concat("".PadLeft(pay.AcountNo.Length - 4, '*'), pay.AcountNo.Substring(pay.AcountNo.Length - 4)) + @"</td>
                                                        </tr>";
                            }
                        }
                    }
                }

                var CustomerAddress = AddressHelper.MakeAddress(Cus);
                var CustomerInstallAddress = AddressHelper.MakeInstallAddress(Cus);
                CustomerSignature cs = new CustomerSignature();
                GlobalSetting glbs = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CompanyId, "CompanySignature");
                string cusSignature = "";
                string cussignDate = "";
                DateTime cussignDateVal = new DateTime();
                if (firstpage == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "First Page");
                    if (cs != null && isPublic == false)
                    {
                        cs.Signature = "";
                    }
                }
                else if (commercial == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Commercial");
                    if (cs != null && isPublic == false)
                    {
                        cs.Signature = "";
                    }
                }
                else if (isinvoice == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimate");
                    if (cs != null && isPublic == false)
                    {
                        cs.Signature = "";
                    }
                }
                else if (isestimator == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimator");
                    if (cs != null && isPublic == false)
                    {
                        cs.Signature = "";
                    }
                }
                else if (recreate == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Recreate");
                    if (cs != null && isPublic == false)
                    {
                        cs.Signature = "";
                    }
                }
                else if (Cus != null && agreementtempid != 0)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Agreement File");
                    if (cs != null && isPublic == false)
                    {
                        cs.Signature = "";
                    }
                }
                else
                {
                    cusSignature = Cus.Singature;
                    if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                    {
                        cussignDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                        cussignDateVal = Cus.CustomerSignatureDate.Value.UTCToClientTime();
                    }

                }
                if (cs != null && (agreementtempid != 0 || firstpage == true || recreate == true || commercial == true))
                {
                    cusSignature = cs.Signature;
                    if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                    {
                        cussignDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                        cussignDateVal = cs.CreatedDate.UTCToClientTime();
                    }

                }

                Double MMR = 1;
                Double CTerm = 0;

                double.TryParse(Cus.MonthlyMonitoringFee, out MMR);
                double.TryParse(ContractTerm, out CTerm);
                //(!string.IsNullOrWhiteSpace() ? Convert.ToDouble(Cus.MonthlyMonitoringFee) : 1) * Convert.ToDouble(ContractTerm);
                Double TotalPayments = MMR * CTerm;
                #region Labour fee
                //GlobalSetting glbsFee = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CompanyId, "HasLabourFee");
                if (glbsFee != null && glbsFee.Value != "true")
                {
                    if (PackageCustomer != null)
                    {
                        PackageCustomer.LabourFee = 0.0;
                    }
                }
                else
                {
                    PackageCustomer.LabourFee = PackageCustomer.LabourFee != null ? PackageCustomer.LabourFee : 0.0;
                }
                #endregion


                #region For Promo Pyment Method
                List<PaymentInfoCustomer> paycusList = new List<PaymentInfoCustomer>();
                PaymentProfileCustomer paymentProfile = new PaymentProfileCustomer();
                paycusList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(Cus.CustomerId);
                if (paycusList != null && paycusList.Count > 0)
                {
                    foreach (var item in paycusList)
                    {
                        paymentProfile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(item.PaymentInfoId);
                        if (paymentProfile != null && paymentProfile.Type == LabelHelper.PaymentMethod.Promo)
                        {
                            if (item.Payfor == "Activation Fee")
                            {
                                NonConfirmingFee = 0.0;

                                if (PackageCustomer != null)
                                {
                                    PackageCustomer.ActivationFee = 0.0;
                                }
                                NewSubTotal = NewSubTotal - (PackageCustomer.AdditionFee + NonConfirmingFee);
                            }
                            else if (item.Payfor == "Equipment")
                            {
                                IsUpfrontPromo = true;
                                NewSubTotal = NewSubTotal - UpfrontAddOnTotal;
                            }
                            else if (item.Payfor == "Service")
                            {
                                NewSubTotal = NewSubTotal - TotalMonthlyMonitoring;
                                IsServicePromo = true;


                            }


                        }

                    }

                }
                #endregion

                #region LeadSource
                string LeadSource = "";
                Lookup leadsource = _Util.Facade.LookupFacade.GetLookupByKeyAndValueAndCompanyId("LeadSource", Cus.LeadSource, Com.CompanyId);
                LeadSource = leadsource != null && !string.IsNullOrWhiteSpace(leadsource.DisplayText) && leadsource.DataValue != "-1" ? leadsource.DisplayText : "";
                #endregion

                Model = new InstallationAgreementModel()
                {
                    CSIDNumber = Cus.Id,
                    LeadSource = LeadSource,
                    IsNonConfirming = IsNonConfirming,
                    NonConfirmingFee = NonConfirmingFee,
                    //InstallDate = Cus.InstallDate != null ? Convert.ToDateTime(Cus.InstallDate).ToShortDateString() : "",
                    //OriginalContactDate = Convert.ToDateTime(contractCreatedDateVal), //(Cus.OriginalContactDate != null && Cus.OriginalContactDate.HasValue) ? Cus.OriginalContactDate.Value : new DateTime(),
                    //InstallDate = (Cus.OriginalContactDate != null && Cus.OriginalContactDate.HasValue) ? Cus.OriginalContactDate.Value.ToShortDateString() : DateTime.Now.ToShortDateString(),
                    //OriginalContactDate = Cus.InstallDate != null ? Convert.ToDateTime(Cus.InstallDate) : DateTime.Now,
                    InstallDate = (Cus.OriginalContactDate != null && Cus.OriginalContactDate.HasValue) ? Cus.OriginalContactDate.Value.ToShortDateString() : "",
                    //OriginalContactDate = Convert.ToDateTime(contractCreatedDateVal),
                    OriginalContactDate= (Cus.OriginalContactDate != null && Cus.OriginalContactDate.HasValue) ? Cus.OriginalContactDate.Value : new DateTime(),
                    AccountType = Cus.Type,
                    ContractType = CusExd != null && !string.IsNullOrWhiteSpace(CusExd.ContractType) ? CusExd.ContractType : "",
                    Referredby = Cus.ReferringCustomer != Guid.Empty ? _Util.Facade.CustomerFacade.GetCustomerNameById(Cus.ReferringCustomer) : "",
                    SocialSecurityNumber = Cus.SSN,
                    //Owner2ndPhone = Cus.SecondaryPhone,
                    Owner2ndPhone = Cus.PrimaryPhone,
                    InitialStreet = Cus.Street,
                    InitialCity = Cus.City,
                    InitialCountry = Cus.County,
                    InitialState = Cus.State,
                    InitialZip = Cus.ZipCode,
                    InitialApt = Cus.Appartment,
                    BillingCity = Cus.CityPrevious,
                    BillingState = Cus.StatePrevious,
                    BillingZip = Cus.ZipCodePrevious,
                    BillingCountry = Cus.CountryPrevious,
                    BillingStreet = Cus.StreetPrevious,
                    InstallTypeName = InstallTypeName,
                    SmartPackageEquipmentServiceList = SmartPackageEquipmentServiceList,
                    UpfrontAddOnTotal = UpfrontAddOnTotal,
                    UpfrontAddOnTotalPromo = UpfrontAddOnTotalPromo,
                    IsUpfrontPromo = IsUpfrontPromo,
                    IsServicePromo = IsServicePromo,
                    MonthlyServiceFeeTotal = MonthlyServiceFeeTotal,
                    TotalMonthlyMonitoring = TotalMonthlyMonitoring,
                    NewSubTotal = NewSubTotal,
                    TotalDueAtSigning = TotalDueAtSigning,
                    PaymentDetails = PaymentDetails != null ? PaymentDetails : new PaymentInfo(),
                    DisplayName = Cus.DisplayName,
                    BillingAddress = CustomerAddress,
                    OwnerAddress = CustomerAddress,
                    InstallAddress = CustomerInstallAddress,
                    OwnerEmail = Cus.EmailAddress,
                    //OwnerPhone = Cus.PrimaryPhone,
                    OwnerPhone = Cus.CellNo,
                    OwnerName = Cus.FirstName + " " + Cus.LastName,
                    FirstName = Cus.FirstName,
                    LastName = Cus.LastName,
                    MiddleName = Cus.MiddleName,
                    EmergencyContactList = _Util.Facade.EmergencyContactFacade.GetAllEmergencyContactByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId),
                    CompanyName = Com.CompanyName,
                    CompanySate = string.Format("{0}, {1} {2}", Com.City, Com.State, Com.ZipCode),
                    CompanyStreet = Com.Street,
                    CompanyWebsite = Com.Website,
                    SubscribedMonths = ContractTerm,
                    SubscribedMonthsInWord = ContractTermInWord,
                    RenewalMonths = Cus.RenewalTerm.HasValue ? Cus.RenewalTerm.Value : 0,
                    Password = Cus.Passcode,
                    DateOfTransaction = FixDate.UTCToClientTime(),
                    CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyEmailLogoByCompanyId(CompanyId),
                    EquipmentList = CustomEquipmentList.ToList(),
                    ServiceList = CustomServiceList.ToList(),
                    ActivationFee = (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue) ? PackageCustomer.ActivationFee.Value : 0,
                    LabourFee = (PackageCustomer != null && PackageCustomer.LabourFee.HasValue) ? PackageCustomer.LabourFee.Value : 0,
                    BusinessName = Cus.BusinessName,
                    MonthlyMonitoringFee = Cus.MonthlyMonitoringFee,
                    EffectiveDate = FixDate.UTCToClientTime(),
                    CustomerSignature = cusSignature,
                    CustomerSignatureStringDate = cussignDate,
                    CustomerSignatureStringDateVal = cussignDateVal,
                    //ContractCreatedDateVal = contractCreatedDateVal,
                    //ContractCreatedDateVal = Cus.InstallDate != null ? Convert.ToDateTime(Cus.InstallDate).ToShortDateString() : "",
                    ContractCreatedDateVal = (CusExd.ContractStartDate != null && CusExd.ContractStartDate.HasValue) ? CusExd.ContractStartDate.Value.ToShortDateString() : DateTime.Now.ToShortDateString(),
                    CustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByCompanyIdAndCustomerId1(CompanyId, Cus.CustomerId),
                    Subtotal = AgreementSubtotal,
                    Tax = AgreementTax,
                    TaxTotal = taxtotal,
                    Total = AgreementTotal,
                    EContractId = Cus.Id,
                    ListAgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(Cus.CustomerId),
                    SalesRepresentative = !string.IsNullOrEmpty(Cus.Soldby) ? _Util.Facade.EmployeeFacade.GetEmployeeNumByEmployeeId(new Guid(Cus.Soldby)).ToString() : "",
                    TotalPayments = TotalPayments,
                    SingleCustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetIpAndUserAgentByCustomerIdAndCompanyId(CompanyId, Cus.CustomerId),
                    ListContactEmergency = string.Format(overviewheader, overviewdata),
                    ListPaymentInfo = string.Format(paymentoverviewheader, paymentoverviewdata),
                    DoingBusinessAs = Cus.DBA,
                    DispalyName = Cus.DisplayName,
                    CompanyPhone = Com.Phone,
                    FirstPage = firstpage,
                    Commercial = commercial,
                    Recreate = recreate,
                    IsInvoice = isinvoice,
                    InvoiceId = invoiceid,
                    InvoiceDiagram = invDiagram,
                    InvoiceList = invoiceList,
                    IsEstimator = isestimator,
                    createEst = createest,
                    userInfo = userInfo,
                    inv = invoice,
                    NotARBEnabledServiceList = NotARBEnabledServiceList.ToList(),
                    NotARBEnabledTotalPrice = NotARBEnabledTotalPrice,
                    ProratedAmout = cpb != null ? Math.Round(cpb.Amount, 2, MidpointRounding.AwayFromZero) : 0.0,
                    FinancedAmout = Cus != null && Cus.FinancedAmount != null ? Math.Round(Cus.FinancedAmount.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                    MonthlyFinanceRate = CusExd != null && CusExd.MonthlyFinanceRate != null ? Math.Round(CusExd.MonthlyFinanceRate.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                    AdvanceServiceFeeTotal = AdvanceServiceFeeTotal
                };
                //Work from here get Monitoring Ammount and Contract Term
                if (agreementtempid != 0)
                {
                    if (cs != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(cs.Signature))
                    {
                        Model.CompanySignature = glbs.Value;
                        if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                        {
                            Model.CompanySignatureDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                        }
                    }
                }
                else if (firstpage == true || recreate == true || commercial == true)
                {
                    if (glbs != null && !string.IsNullOrWhiteSpace(glbs.Value))
                    {
                        Model.CompanySignature = glbs.Value;
                        Model.CompanySignatureDate = cussignDate;
                    }
                }
                else
                {
                    if (Cus != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(Cus.Singature))
                    {
                        Model.CompanySignature = glbs.Value;
                        if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                        {
                            Model.CompanySignatureDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                        }
                    }
                }

            }
            else
            {
                Model.CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyLogoForPDFByCompanyId(CompanyId);
            }

            //  return View(Model);
            Model.KazarLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/kazar_logo.PNG");
            ViewBag.CompanyId = Com.CompanyId.ToString();
            Model.CompanyId = Com.CompanyId.ToString();
            Model.CurrentCurrency = _Util.Facade.GlobalSettingsFacade.GetCurrentCurrencyByCompanyId(Com.CompanyId);
            string body = _Util.Facade.AgreementFacade.MakeSmartAgreementPdf(Model, agreementtempid);
            ViewBag.Body = body;
            if (Request.Browser.IsMobileDevice)
            {
                ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("SmartInstallationAgreement")
                {
                    //FileName = "TestView.pdf",
                    PageSize = Rotativa.Options.Size.A4,
                    PageOrientation = Rotativa.Options.Orientation.Portrait,
                    PageMargins = { Left = 1, Right = 1 },

                };
                byte[] applicationPDFData = actionPDF.BuildPdf(ControllerContext);
                Random rand = new Random();
                string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
                var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(Com.CompanyId).CompanyName.ReplaceSpecialChar();


                //// "mayur" Old File Storage //// Start

                var pdftempFolderName = string.Format(filename, comname) + rand.Next().ToString() + leadid + "AgreementMail.Pdf";
                string Serverfilename = FileHelper.GetFileFullPath(pdftempFolderName);
                FileHelper.SaveFile(applicationPDFData, Serverfilename);
                var returnurl = AppConfig.SiteDomain + "/" + pdftempFolderName;
                return Redirect(returnurl);
            }
            else
            {
                return new ViewAsPdf(Model)
                {
                    // FileName = flightPlan.ListingItemDetailsModel.FlightDetails + ".pdf",
                    PageSize = Rotativa.Options.Size.A4,
                    PageOrientation = Orientation.Portrait,
                    //PageMargins = new Margins(10, 0, 0, 0),
                    PageMargins = new Margins(10, 2, 10, 3)
                };
            }

        }

        public ActionResult SmartInstallationAgreement(string url)
        {
            int leadid = 0;
            int agreementtempid = 0;
            bool firstpage = false;
            bool commercial = false;
            int ticketid = 0;
            bool recreate = false;
            string invoiceid = "";
            string EstimatorId = "";
            bool isinvoice = false;
            bool isestimator = false;
            int estid = 0;
            Guid userid = Guid.Empty;
            bool isPublic = false;
            if (!string.IsNullOrWhiteSpace(url))
            {
                string[] spurl = DESEncryptionDecryption.DecryptCipherTextToPlainText(url).Split('#');
                if (spurl.Length == 8)
                {
                    leadid = Convert.ToInt32(spurl[0]);
                    if (!string.IsNullOrWhiteSpace(spurl[1]))
                    {
                        agreementtempid = Convert.ToInt32(spurl[1]);
                    }
                    firstpage = Convert.ToBoolean(spurl[2]);
                    ticketid = Convert.ToInt32(spurl[3]);
                    recreate = Convert.ToBoolean(spurl[4]);
                    invoiceid = Convert.ToString(spurl[6]);
                    isinvoice = Convert.ToBoolean(spurl[5]);
                    isPublic = Convert.ToBoolean(spurl[7]);
                }
                //else if (spurl.Length == 13)
                //{
                //    leadid = Convert.ToInt32(spurl[0]);
                //    if (!string.IsNullOrWhiteSpace(spurl[1]))
                //    {
                //        agreementtempid = Convert.ToInt32(spurl[1]);
                //    }
                //    firstpage = Convert.ToBoolean(spurl[2]);
                //    ticketid = Convert.ToInt32(spurl[3]);
                //    recreate = Convert.ToBoolean(spurl[4]);
                //    invoiceid = Convert.ToString(spurl[6]);
                //    isinvoice = Convert.ToBoolean(spurl[5]);
                //    isPublic = Convert.ToBoolean(spurl[7]);
                //    isestimator = Convert.ToBoolean(spurl[8]);
                //    estid = Convert.ToInt32(spurl[9]);
                //    userid = new Guid(spurl[10]);
                //    commercial = Convert.ToBoolean(spurl[11]);
                //    ContractDate = Convert.ToDateTime(spurl[12]);
                //}
                else if (spurl.Length == 13)
                {
                    leadid = Convert.ToInt32(spurl[0]);
                    if (!string.IsNullOrWhiteSpace(spurl[1]))
                    {
                        agreementtempid = Convert.ToInt32(spurl[1]);
                    }
                    firstpage = Convert.ToBoolean(spurl[2]);
                    ticketid = Convert.ToInt32(spurl[3]);
                    recreate = Convert.ToBoolean(spurl[4]);
                    invoiceid = Convert.ToString(spurl[6]);
                    isinvoice = Convert.ToBoolean(spurl[5]);
                    isPublic = Convert.ToBoolean(spurl[7]);
                    isestimator = Convert.ToBoolean(spurl[8]);
                    estid = Convert.ToInt32(spurl[9]);
                    userid = new Guid(spurl[10]);
                    commercial = Convert.ToBoolean(spurl[11]);
                    EstimatorId = Convert.ToString(spurl[12]);
                }
                else if (spurl.Length == 12)
                {
                    leadid = Convert.ToInt32(spurl[0]);
                    if (!string.IsNullOrWhiteSpace(spurl[1]))
                    {
                        agreementtempid = Convert.ToInt32(spurl[1]);
                    }
                    firstpage = Convert.ToBoolean(spurl[2]);
                    ticketid = Convert.ToInt32(spurl[3]);
                    recreate = Convert.ToBoolean(spurl[4]);
                    invoiceid = Convert.ToString(spurl[6]);
                    isinvoice = Convert.ToBoolean(spurl[5]);
                    isestimator = Convert.ToBoolean(spurl[7]);
                    estid = Convert.ToInt32(spurl[8]);
                    userid = new Guid(spurl[9]);
                    commercial = Convert.ToBoolean(spurl[10]);
                    EstimatorId = Convert.ToString(spurl[11]);
                }
                else
                {
                    leadid = Convert.ToInt32(spurl[0]);
                    if (!string.IsNullOrWhiteSpace(spurl[1]))
                    {
                        agreementtempid = Convert.ToInt32(spurl[1]);
                    }
                    firstpage = Convert.ToBoolean(spurl[2]);
                    ticketid = Convert.ToInt32(spurl[3]);
                    recreate = Convert.ToBoolean(spurl[4]);
                    invoiceid = Convert.ToString(spurl[6]);
                    isinvoice = Convert.ToBoolean(spurl[5]);
                    commercial = Convert.ToBoolean(spurl[6]);
                }
            }
            DateTime FixDate = DateTime.Now.UTCCurrentTime();
            InstallationAgreementModel Model = new InstallationAgreementModel();
            Model.EmergencyContactList = new List<EmergencyContact>();
            Model.ListAgreementAnswer = new List<AgreementAnswer>();
            Model.EquipmentList = new List<Equipment>();
            Model.InvoiceList = new List<InvoiceDetail>();
            Model.CustomerAgreement = new List<CustomerAgreement>();
            Model.SingleCustomerAgreement = new CustomerAgreement();
            var taxtotal = 0.0;
            Guid CompanyId = new Guid();
            if (User.Identity.IsAuthenticated)
            {
                var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
                CompanyId = CurrentUser.CompanyId.Value;
            }
            else
            {
                CustomerCompany custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(leadid);
                CompanyId = custommerCompany.CompanyId;
            }
            Customer Cus = new Customer();
            CustomerExtended CusExd = new CustomerExtended();
            Company Com = new Company();
            if (leadid != 0)
            {
                if (!_Util.Facade.CustomerFacade.CustomerIsInCompany(leadid, CompanyId))
                {
                    return null;
                }

                Cus = _Util.Facade.CustomerFacade.GetCustomersById(leadid);
                if (Cus != null)
                {
                    CusExd = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(Cus.CustomerId);
                }
                Com = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CompanyId);

                string ContractTerm = "";
                string ContractTermInWord = "";
                if (!string.IsNullOrWhiteSpace(Cus.ContractTeam) && Cus.ContractTeam != "-1")
                {
                    if (Cus.ContractTeam.ToLower() == "month to month")
                    {
                        ContractTerm = Cus.ContractTeam;
                        ContractTermInWord = Cus.ContractTeam;
                    }
                    else
                    {
                        ContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))).ToString();
                        ContractTermInWord = NumberToWords((Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))));
                    }

                }
                #region Agreement History
                var cusAgrHistory = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementHistory(Cus.CustomerId, "AgreementCreate");
                if (cusAgrHistory == null)
                {
                    CustomerAgreement cusAgrModel = new CustomerAgreement()
                    {
                        CompanyId = Com.CompanyId,
                        CustomerId = Cus.CustomerId,
                        IP = AppConfig.GetIP,
                        UserAgent = AppConfig.GetUserAgent,
                        Type = LabelHelper.CustomerAgreementHistory.AgreementCreate,
                        AddedDate = DateTime.UtcNow
                    };
                    _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(cusAgrModel);
                }
                #endregion
                var objCusAgree = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByComIdAndCusIsAndLoadAgreement(Com.CompanyId, Cus.CustomerId);
                if (objCusAgree == null)
                {
                    CustomerAgreement objCustomerAgreement = new CustomerAgreement()
                    {
                        CompanyId = Com.CompanyId,
                        CustomerId = Cus.CustomerId,
                        IP = AppConfig.GetIP,
                        UserAgent = AppConfig.GetUserAgent,
                        Type = LabelHelper.CustomerAgreementLog.LoadAgreement,
                        AddedDate = DateTime.UtcNow
                    };
                    _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(objCustomerAgreement);
                }
                var UpfrontAddOnTotal = 0.0;
                var UpfrontAddOnTotalPromo = 0.0;
                bool IsUpfrontPromo = false;
                bool IsServicePromo = false;
                var MonthlyServiceFeeTotal = 0.0;
                var TotalMonthlyMonitoring = 0.0;
                var NewSubTotal = 0.0;
                var TotalDueAtSigning = 0.0;
                var EquipmentTotalPrice = 0.0;
                double ServiceTotalPrice = 0.0;
                var AgreementSubtotal = 0.0;
                var AgreementTotal = 0.0;
                double ServiceTax = 0.0;
                var AgreementTax = 0.0;
                var NotARBEnabledTotalPrice = 0.0;
                string InstallTypeName = "";
                bool IsNonConfirming = false;
                var NonConfirmingFee = 0.0;
                var AdvanceServiceFeeTotal = 0.0;
                string contractCreatedDateVal = "";
                double discountamount = 0.00;
                if (CusExd.ContractCreatedDate != null)
                {
                    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.ToString("M/d/yy");
                }
                else
                {
                    CusExd.ContractCreatedDate = DateTime.UtcNow;
                    _Util.Facade.CustomerFacade.UpdateCustomerExtended(CusExd);
                    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.ToString("M/d/yy");
                }
                //if (CusExd.ContractCreatedDate != null)
                //{
                //    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.UTCToClientTime().ToString("M/d/yy");
                //}
                //else
                //{
                //    CusExd.ContractCreatedDate = DateTime.UtcNow;
                //    _Util.Facade.CustomerFacade.UpdateCustomerExtended(CusExd);
                //    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.UTCToClientTime().ToString("M/d/yy");
                //}
                //contractCreatedDateVal = DateTime.Now.ToString("MM/dd/yyyy");
                if (Cus.CreditScoreValue == null)
                {
                    Cus.CreditScoreValue = 0;
                }
                var CustomEquipmentList = new List<Equipment>();
                var PackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(Cus.CustomerId);
                 
                //if (PackageCustomer != null && PackageCustomer.NonConforming && PackageCustomer.NonConformingFee > 0 && (Cus.CreditScoreValue < PackageCustomer.MinCredit || Cus.CreditScoreValue > PackageCustomer.MaxCredit))
                if (PackageCustomer != null && PackageCustomer.NonConformingFee > 0 && (Cus.CreditScoreValue <= PackageCustomer.MinCredit || Cus.CreditScoreValue >= PackageCustomer.MaxCredit))
                {

                    IsNonConfirming = true;
                    NonConfirmingFee = PackageCustomer.NonConformingFee.Value;
                }
                else if (PackageCustomer != null && PackageCustomer.PackageId == Guid.Empty)
                {
                    IsNonConfirming = true;
                    NonConfirmingFee = PackageCustomer.NonConformingFee.Value;
                } 

                var SmartPackageEquipmentServiceList = new List<SmartPackageEquipmentService>();
                var GetCityTaxList = _Util.Facade.CompanyBranchFacade.GetCityTaxRate(Cus.CustomerId, Com.CompanyId);
                if (GetCityTaxList.Count > 0)
                {
                    foreach (var item1 in GetCityTaxList)
                    {
                        AgreementTax = item1.Rate;
                        ServiceTax = item1.Rate;
                    }
                }
                else
                {
                    Guid CustomerId = new Guid();
                    if (Cus != null)
                    {
                        CustomerId = Cus.CustomerId;
                    }
                    var GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(Com.CompanyId, CustomerId);
                    if (GetSalesTax != null)
                    {
                        AgreementTax = Convert.ToDouble(GetSalesTax.Value);
                        ServiceTax = Convert.ToDouble(GetSalesTax.Value);
                    }
                }
                #region Invoice
                Invoice invoice = new Invoice();
                CustomerProratedBill cpb = new CustomerProratedBill();
                cpb = _Util.Facade.InvoiceFacade.GetCusProratedBillByCustomerId(Cus.CustomerId);
                List<InvoiceDetail> invoiceList = new List<InvoiceDetail>();
                string invDiagram = "";
                if (!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true)
                {
                    invoice = _Util.Facade.InvoiceFacade.GetByInvoiceId(invoiceid);
                    if (invoice != null)
                    {
                        invDiagram = invoice.InvoiceContractDiagram;
                        invoiceList = _Util.Facade.InvoiceFacade.GetInvoiceDetialsListByInvoiceId(invoice.InvoiceId);
                    }
                }
                #endregion
                #region Estimator
                Employee userInfo = new Employee();
                if (userid != Guid.Empty)
                {
                    userInfo = _Util.Facade.EmployeeFacade.GetEmployeeByEmployeeId(userid);
                }
                CreateEstimator createest = new CreateEstimator();
                if (isestimator && estid > 0)
                {
                    CreateEstimator ca = new CreateEstimator();
                    ca.EstimatorSetting = new EstimatorSetting();
                    ca.Company = Com;

                    ca.Estimator = _Util.Facade.EstimatorFacade.GetById(estid);
                    ca._EstimatorPDFFilter = _Util.Facade.EstimatorFacade.GetEstimatorPdfFilterByComIdCusIdUserId(Com.CompanyId, userid, ca.Estimator.CustomerId);
                    ca.estimatorDetails = _Util.Facade.EstimatorFacade.GetEstimatorDetailListByEstimatorId(ca.Estimator.EstimatorId);
                    ca.estimatorServices = _Util.Facade.EstimatorFacade.GetEstimatorServicesByEstimatorId(ca.Estimator.EstimatorId);
                    if (ca.Estimator == null || ca.Estimator.CompanyId != CompanyId)
                    {
                        return null;
                    }
                    if ((ca.estimatorDetails == null || ca.estimatorDetails.Count() == 0) && (ca.estimatorServices == null || ca.estimatorServices.Count() == 0))
                    {
                        return null;
                    }
                    Customer tempCUstomer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(ca.Estimator.CustomerId);
                    if (tempCUstomer == null)
                    {
                        return null;
                    }

                    CreateEstimator processedModel = GetEstimatorModelById(ca.Estimator, ca.estimatorDetails, ca.estimatorServices, Com, tempCUstomer, ca._EstimatorPDFFilter, CompanyId);
                    Estimator estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(ca.Estimator.EstimatorId);
                    if (estimator != null)
                    {
                        ViewBag.CoverLetter = estimator.CoverLetter;
                        processedModel.Estimator.CoverLetter = estimator.CoverLetter;
                        processedModel.Estimator.CoverLetterFile = estimator.CoverLetterFile;
                        processedModel.Estimator.ServicePlanType = estimator.ServicePlanType;
                        processedModel.Estimator.ServicePlanRate = estimator.ServicePlanRate;
                        processedModel.Estimator.ServicePlanAmount = estimator.ServicePlanAmount;
                        processedModel.Estimator.ServiceTaxAmount = estimator.ServiceTaxAmount;
                        processedModel.Estimator.ServiceTotalAmount = estimator.ServiceTotalAmount;
                        processedModel.Estimator.ShowServicePlan = estimator.ShowServicePlan;
                        processedModel.Estimator.ShowService = estimator.ShowService;
                        processedModel.Estimator.ServicePlanTypeName = "Service Plan";

                        SelectListItem selectListItem = _Util.Facade.LookupFacade.GetDropdownsByKey("ServicePlans").Where(x => x.Value == estimator.ServicePlanType).FirstOrDefault();
                        if (selectListItem != null)
                        {
                            processedModel.Estimator.ServicePlanTypeName = selectListItem.Text;
                        }

                    }
                    if (ca.estimatorDetails != null)
                    {
                        foreach (var item in ca.estimatorDetails)
                        {
                            Manufacturer Manufacturer = _Util.Facade.EquipmentFacade.GetManufacturerByManufacturerId(item.ManufacturerId);
                            if (Manufacturer != null)
                            {
                                item.Manufacturer = Manufacturer.Name;
                            }
                            item.CreatedDate = DateTime.Now.UTCCurrentTime();
                            ca.SubTotal = ca.SubTotal + (item.TotalPrice.HasValue ? item.TotalPrice.Value : 0);
                            item.EquipmentFile = _Util.Facade.EquipmentFileFacade.GetEquipmentFilesByEquipmentIdAndFileType(item.EquipmentId, LabelHelper.EquipmentFileType.ProfilePicture).FirstOrDefault();
                            if (item.EquipmentFile == null)
                            {
                                item.EquipmentFile = new EquipmentFile();
                            }
                        }
                    }
                    if (ca.estimatorServices != null)
                    {
                        foreach (var item in ca.estimatorServices)
                        {
                            processedModel.ServiceSubTotal += ca.ServiceSubTotal + item.Amount;
                        }
                        processedModel.TotalServiceAmount = processedModel.ServiceSubTotal + ca.ServiceTax;
                    }

                    //pdfname = processedModel.Estimator.EstimatorId;
                    createest = processedModel;
                    createest.eSecurityLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/eSecurity_logo.png");
                    createest.specializedLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/specialized_property_management_logo.png");
                    string EstimatorContractTerm = "";
                    if (!string.IsNullOrWhiteSpace(createest.Estimator.ContractTerm) && createest.Estimator.ContractTerm != "-1")
                    {
                        if (createest.Estimator.ContractTerm.ToLower() == "month to month")
                        {
                            EstimatorContractTerm = createest.Estimator.ContractTerm;
                        }
                        else
                        {
                            EstimatorContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(createest.Estimator.ContractTerm) * 12))).ToString() + " month";
                        }

                    }
                    createest.EstimatorContractTerm = EstimatorContractTerm;
                }
                #endregion
                
                if (firstpage == true || recreate == true)
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }
                else if(!string.IsNullOrWhiteSpace(EstimatorId))
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentEstimatorListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid,EstimatorId);
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }
                else
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }
                var CustomEstimatorServiceList = new List<Estimator>();
                var CustomServiceList = new List<Equipment>();
                if (firstpage == true || recreate == true)
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (CustomServiceList.Count > 0)
                    {
                        foreach (var item in CustomServiceList)
                        {
                            EquipmentTotalPrice += item.Total;
                            ServiceTotalPrice += item.Total;
                            MonthlyServiceFeeTotal += item.Total;
                        }
                    }
                    //CustomEstimatorServiceList = _Util.Facade.EquipmentFacade.GetEstimatorSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid, estid);
                    //if (CustomEstimatorServiceList.Count > 0)
                    //{
                    //    foreach (var item in CustomEstimatorServiceList)
                    //    {
                    //        if (item.TotalPrice.HasValue && item.ServiceTotalAmount.HasValue && item.ServiceTaxAmount.HasValue)
                    //        {
                    //            //EquipmentTotalPrice += item.Total;
                    //            ServiceTotalPrice +=  item.TotalPrice.Value;
                    //            MonthlyServiceFeeTotal += item.ServiceTaxAmount.Value + item.ServiceTotalAmount.Value;
                    //        }
                    //    }
                    //}
                }
                else if(!string.IsNullOrWhiteSpace(EstimatorId))
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartEstimatorServiceListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid,EstimatorId);
                    if(CustomServiceList != null)
                    {
                        var IsRecurringList = CustomServiceList.Where(x => x.IsARBEnabled == true).ToList();
                        if (IsRecurringList != null &&IsRecurringList.Count > 0)
                        {
                            foreach (var item in IsRecurringList)
                            {
                                EquipmentTotalPrice += item.Total;
                                ServiceTotalPrice += item.Total;
                                MonthlyServiceFeeTotal += item.Total;
                            }
                        }
                    } 
                }
                else
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (CustomServiceList.Count > 0)
                    {
                        foreach (var item in CustomServiceList)
                        {
                            EquipmentTotalPrice += item.Total;
                            ServiceTotalPrice += item.Total;
                            MonthlyServiceFeeTotal += item.Total;
                        }
                    }
                }
                var NotARBEnabledServiceList = new List<Equipment>();
                if (firstpage == true || recreate == true || commercial == true)
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (NotARBEnabledServiceList.Count > 0)
                    {
                        foreach (var item in NotARBEnabledServiceList)
                        {
                            NotARBEnabledTotalPrice += item.Total;
                        }
                    }
                }
                else if (!string.IsNullOrWhiteSpace(EstimatorId))
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetSmartEstimatorServiceListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid, EstimatorId);
                    var onetimeserviceList = NotARBEnabledServiceList.Where(x => x.IsARBEnabled == false).ToList();
                    if(onetimeserviceList != null)
                    {
                        if (onetimeserviceList.Count > 0)
                        {
                            foreach (var item in onetimeserviceList)
                            {
                                NotARBEnabledTotalPrice += item.Total;
                            }
                        }
                    }
                    
                }
                else
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListFromService(Cus.CustomerId, CompanyId);
                    if (NotARBEnabledServiceList.Count > 0)
                    {
                        foreach (var item in NotARBEnabledServiceList)
                        {
                            NotARBEnabledTotalPrice += item.Total;
                        }
                    }
                }
                #region Advance Monitoring Service Month

                PaymentInfoCustomer paycus = new PaymentInfoCustomer();
                paycus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayForService(Cus.CustomerId);


                int ForMonth = 1;
                if (paycus != null && paycus.ForMonths.HasValue)
                {
                    ForMonth = paycus.ForMonths.Value;
                }
                if (ForMonth > 1)
                {
                    AdvanceServiceFeeTotal = MonthlyServiceFeeTotal * (ForMonth - 1);

                }
                #endregion
                Cus.MonthlyMonitoringFee = Convert.ToString(ServiceTotalPrice);
                TotalMonthlyMonitoring = MonthlyServiceFeeTotal;
                NewSubTotal = TotalMonthlyMonitoring + UpfrontAddOnTotal;
                GlobalSetting glbsFee = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CompanyId, "HasLabourFee");
                if (CustomServiceList.Count > 0 || CustomEquipmentList.Count > 0)
                {
                    if (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue && PackageCustomer.LabourFee.HasValue)
                    {
                        if (glbsFee != null && glbsFee.Value != "true")
                        {
                            PackageCustomer.LabourFee = 0;
                        }
                        else
                        {
                            PackageCustomer.LabourFee = PackageCustomer.LabourFee != null ? PackageCustomer.LabourFee : 0.0;
                        }
                        AgreementSubtotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice + PackageCustomer.LabourFee.Value;
                        NewSubTotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice + PackageCustomer.LabourFee.Value;
                    }
                    else if (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue)
                    {
                        AgreementSubtotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                        NewSubTotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                    }
                    else
                    {
                        AgreementSubtotal = EquipmentTotalPrice;
                        NewSubTotal = EquipmentTotalPrice;
                    }
                }
                if (IsNonConfirming && NonConfirmingFee > 0)
                {
                    AgreementSubtotal = AgreementSubtotal + NonConfirmingFee;
                    NewSubTotal = NewSubTotal + NonConfirmingFee;
                }
                if(!string.IsNullOrWhiteSpace(EstimatorId))
                {
                    var data = _Util.Facade.EquipmentFacade.GetSmartEstimatorServiceListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid, EstimatorId);
                    if (data != null)
                    {
                        var totalestimatortax = data.Select(x => x.TotalestimatorTaxAmount).FirstOrDefault();
                        taxtotal = totalestimatortax; 
                    }
                }
                else
                {
                    if (AgreementTax != 0.0)
                    {
                        double SubtotalForTax = 0.0;
                        if (glbsFee != null && glbsFee.Value == "true" && PackageCustomer.LabourFee.HasValue)
                        {
                            SubtotalForTax = AgreementSubtotal - PackageCustomer.LabourFee.Value;
                        }
                        else
                        {
                            SubtotalForTax = AgreementSubtotal;
                        }

                        taxtotal = (SubtotalForTax / 100) * AgreementTax;
                        Model.TaxTotal = taxtotal;
                        AgreementTotal = AgreementSubtotal + taxtotal;
                        TotalDueAtSigning = NewSubTotal + taxtotal;
                    }
                    else
                    {
                        Model.TaxTotal = 0.0;
                        AgreementTotal = AgreementSubtotal;
                        TotalDueAtSigning = NewSubTotal;
                    }
                    /// "Mayur" Activation total with tax calculation :Start
                    if (ServiceTax != 0.0)
                    {
                        taxtotal = (ServiceTotalPrice / 100) * ServiceTax;
                        // MonthlyServiceFeeTotal = ServiceTotalPrice + taxtotal;
                    }
                    else
                    {
                    }
                }
                

                /// "Mayur" Activation total with tax calculation :End

                var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(Cus.CustomerId, CompanyId);
                if (PackageCustomerDetails != null)
                {
                    InstallTypeName = _Util.Facade.PackageFacade.SmartInstallTypeNameByInstallTypeId(Convert.ToInt32(PackageCustomerDetails.SmartInstallTypeId));
                    if (string.IsNullOrWhiteSpace(InstallTypeName))
                    {
                        InstallTypeName = "New Install";
                    }
                    SmartPackageEquipmentServiceList = _Util.Facade.PackageFacade.GetAllSmartPackageIncludeEquipmentByPackageIdAndCompanyId(PackageCustomerDetails.PackageId, CompanyId);
                }
                var PaymentDetails = _Util.Facade.PaymentInfoFacade.GetAllPaymentInfoByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId).Where(m => m.PayFor == "First Month").FirstOrDefault();
                var emercontact = _Util.Facade.EmergencyContactFacade.GetAllEmergencyContactByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId);
                string overviewheader = "";
                string overviewdata = "";
                if (emercontact != null && emercontact.Count > 0)
                {
                    overviewheader = @"<table style='border-collapse:collapse; width:100%;font-family:Arial;table-layout:fixed;font-size:13px;margin-top:20px;'>
                                                          <thread>
                                            <tr style='height:30px;'>
                                  <th style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>Name</th>
   
                                   <th style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'> RelationShip </th>
    
                                    <th style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'> Phone </th>
     
                                     <th style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'> Type </th>
      
                                  </tr>
                                            </thread>
                                            <tbody>
                                            {0}
                                            </tbody>
                                        </table>";
                    foreach (var item in emercontact)
                    {
                        overviewdata += @"<tr style='height: 30px;'>
                                  <td style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>" + item.FirstName + " " + item.LastName + @"</td>
   
                                   <td style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>" + item.RelationShip + @"</td>
    
                                    <td style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>" + item.Phone + @"</td>
     
                                     <td style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>" + item.PhoneType + @"</td>
      
                                  </tr> ";
                    }
                }
                var agreementPayment = _Util.Facade.PaymentInfoFacade.GetLeadAgreementPaymentInfoByCustomerId(Cus.CustomerId);
                string paymentoverviewheader = "";
                string paymentoverviewdata = "";
                if (agreementPayment != null && agreementPayment.Count > 0)
                {
                    paymentoverviewheader = "<table style='border-collapse:collapse; width:100%; font-family:Arial; table-layout:fixed; font-size:13px;'>{0}</table>";
                    foreach (var pay in agreementPayment)
                    {
                        var sppay = pay.Type.Split('_');
                        if (sppay.Length > 0)
                        {
                            if (sppay[0] == "CC")
                            {
                                var cardNumber = pay.CardNumber.Replace('-', ' ').Replace(" ", "");
                                if (cardNumber.Length == 16)
                                {
                                    paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(12, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                                }
                                else
                                {
                                    paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(11, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                                }
                            }
                            else if (sppay[0] == "ACH" && pay.AcountNo.Length > 4)
                            {
                                paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Type: " + pay.BankAccountType + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Routing No: " + pay.RoutingNo + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account No: " + string.Concat("".PadLeft(pay.AcountNo.Length - 4, '*'), pay.AcountNo.Substring(pay.AcountNo.Length - 4)) + @"</td>
                                                        </tr>";
                            }
                        }
                    }
                }

                var CustomerAddress = AddressHelper.MakeAddress(Cus);
                var CustomerInstallAddress = AddressHelper.MakeInstallAddress(Cus);
                CustomerSignature cs = new CustomerSignature();
                GlobalSetting glbs = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CompanyId, "CompanySignature");
                string cusSignature = "";
                string cussignDate = "";
                DateTime cussignDateVal = new DateTime();
                if (firstpage == true || recreate == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "First Page");
                    if (cs != null && isPublic == false)
                    {
                        cs.Signature = "";
                    }
                }
                else if (commercial == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Commercial");
                    if (cs != null && isPublic == false)
                    {
                        cs.Signature = "";
                    }
                }
                else if (isinvoice == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimate");
                    if (cs != null && isPublic == false)
                    {
                        cs.Signature = "";
                    }
                }
                else if (isestimator == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimator");
                    if (cs != null && isPublic == false)
                    {
                        cs.Signature = "";
                    }
                }
                else if (recreate == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Recreate");
                    if (cs != null && isPublic == false)
                    {
                        cs.Signature = "";
                    }
                }
                else if (Cus != null && agreementtempid != 0)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Agreement File");
                    if (cs != null && isPublic == false)
                    {
                        cs.Signature = "";
                    }
                }
                else
                {
                    cusSignature = Cus.Singature;
                    if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                    {
                        cussignDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                        cussignDateVal = Cus.CustomerSignatureDate.Value.UTCToClientTime();
                    }

                }
                if (cs != null && (agreementtempid != 0 || firstpage == true || recreate == true || commercial == true))
                {
                    cusSignature = cs.Signature;
                    if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                    {
                        cussignDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                        cussignDateVal = cs.CreatedDate.UTCToClientTime();
                    }

                }
                
                Double MMR = 1;
                Double CTerm = 0;

                double.TryParse(Cus.MonthlyMonitoringFee, out MMR);
                double.TryParse(ContractTerm, out CTerm);
                //(!string.IsNullOrWhiteSpace() ? Convert.ToDouble(Cus.MonthlyMonitoringFee) : 1) * Convert.ToDouble(ContractTerm);
                Double TotalPayments = MMR * CTerm;
                #region Labour fee
                //GlobalSetting glbsFee = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CompanyId, "HasLabourFee");
                if (glbsFee != null && glbsFee.Value != "true")
                {
                    if (PackageCustomer != null)
                    {
                        PackageCustomer.LabourFee = 0.0;
                    }
                }
                else
                {
                    PackageCustomer.LabourFee = PackageCustomer.LabourFee != null ? PackageCustomer.LabourFee : 0.0;
                }
                #endregion


                #region For Promo Pyment Method
                List<PaymentInfoCustomer> paycusList = new List<PaymentInfoCustomer>();
                PaymentProfileCustomer paymentProfile = new PaymentProfileCustomer();
                paycusList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(Cus.CustomerId);
                if (paycusList != null && paycusList.Count > 0)
                {
                    foreach (var item in paycusList)
                    {
                        paymentProfile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(item.PaymentInfoId);
                        if (paymentProfile != null && paymentProfile.Type == LabelHelper.PaymentMethod.Promo)
                        {
                            if (item.Payfor == "Activation Fee")
                            {
                                NonConfirmingFee = 0.0;

                                if (PackageCustomer != null)
                                {
                                    PackageCustomer.ActivationFee = 0.0;
                                }
                                NewSubTotal = NewSubTotal - (PackageCustomer.AdditionFee + NonConfirmingFee);
                            }
                            else if (item.Payfor == "Equipment")
                            {
                                IsUpfrontPromo = true;
                                NewSubTotal = NewSubTotal - UpfrontAddOnTotal;
                            }
                            else if (item.Payfor == "Service")
                            {
                                NewSubTotal = NewSubTotal - TotalMonthlyMonitoring;
                                IsServicePromo = true;


                            }


                        }

                    }

                }
                #endregion

                #region LeadSource
                string LeadSource = "";
                Lookup leadsource = _Util.Facade.LookupFacade.GetLookupByKeyAndValueAndCompanyId("LeadSource", Cus.LeadSource, Com.CompanyId);
                LeadSource = leadsource != null && !string.IsNullOrWhiteSpace(leadsource.DisplayText) && leadsource.DataValue != "-1" ? leadsource.DisplayText : "";
                #endregion
                if (!string.IsNullOrWhiteSpace(EstimatorId))
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentEstimatorListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid, EstimatorId);
                    if (CustomEquipmentList != null && CustomEquipmentList.Count()>0)
                    {
                        var ActivationData = CustomEquipmentList.FirstOrDefault();
                        PackageCustomer.ActivationFee = ActivationData.ActivationFee;
                    }
                }
                if (!string.IsNullOrWhiteSpace(EstimatorId))
                {
                    Estimator estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(EstimatorId);
                    if(estimator != null)
                    {
                        cusSignature = estimator.EstimatorSignature;
                    }
                }
                //OriginalContactDate = (Cus.OriginalContactDate != null && Cus.OriginalContactDate.HasValue) ? Cus.OriginalContactDate.Value : new DateTime(),
                //OriginalContactDate = DateTime.Parse(contractCreatedDateVal),

                Model = new InstallationAgreementModel()
                {
                    EstimatorId = EstimatorId,
                    CSIDNumber = Cus.Id,
                    LeadSource = LeadSource,
                    IsNonConfirming = IsNonConfirming,
                    NonConfirmingFee = NonConfirmingFee,
                    //InstallDate = Cus.InstallDate != null ? Convert.ToDateTime(Cus.InstallDate).ToShortDateString() : "",
                    //OriginalContactDate = Convert.ToDateTime(contractCreatedDateVal), //(Cus.OriginalContactDate != null && Cus.OriginalContactDate.HasValue) ? Cus.OriginalContactDate.Value : new DateTime(),
                    //InstallDate = (Cus.OriginalContactDate != null && Cus.OriginalContactDate.HasValue) ? Cus.OriginalContactDate.Value.ToShortDateString() : DateTime.Now.ToShortDateString(),
                    //OriginalContactDate = Cus.InstallDate != null ? Convert.ToDateTime(Cus.InstallDate) : DateTime.Now,
                    InstallDate = (Cus.OriginalContactDate != null && Cus.OriginalContactDate.HasValue) ? Cus.OriginalContactDate.Value.ToShortDateString() : "",
                    //OriginalContactDate = Convert.ToDateTime(contractCreatedDateVal),
                    OriginalContactDate = (Cus.OriginalContactDate != null && Cus.OriginalContactDate.HasValue) ? Cus.OriginalContactDate.Value : new DateTime(),
                    AccountType = Cus.Type,
                    ContractType = CusExd != null && !string.IsNullOrWhiteSpace(CusExd.ContractType) ? CusExd.ContractType : "",
                    Referredby = Cus.ReferringCustomer != Guid.Empty ? _Util.Facade.CustomerFacade.GetCustomerNameById(Cus.ReferringCustomer) : "",
                    SocialSecurityNumber = Cus.SSN,
                    //Owner2ndPhone = Cus.SecondaryPhone,
                    Owner2ndPhone = Cus.PrimaryPhone,
                    InitialStreet = Cus.Street,
                    InitialCity = Cus.City,
                    InitialCountry = Cus.County,
                    InitialState = Cus.State,
                    InitialZip = Cus.ZipCode,
                    InitialApt = Cus.Appartment,
                    BillingCity = Cus.CityPrevious,
                    BillingState = Cus.StatePrevious,
                    BillingZip = Cus.ZipCodePrevious,
                    BillingCountry = Cus.CountryPrevious,
                    BillingStreet = Cus.StreetPrevious,
                    InstallTypeName = InstallTypeName,
                    SmartPackageEquipmentServiceList = SmartPackageEquipmentServiceList,
                    UpfrontAddOnTotal = UpfrontAddOnTotal,
                    UpfrontAddOnTotalPromo = UpfrontAddOnTotalPromo,
                    IsUpfrontPromo = IsUpfrontPromo,
                    IsServicePromo = IsServicePromo,
                    MonthlyServiceFeeTotal = MonthlyServiceFeeTotal,
                    TotalMonthlyMonitoring = TotalMonthlyMonitoring,
                    NewSubTotal = NewSubTotal,
                    TotalDueAtSigning = TotalDueAtSigning,
                    PaymentDetails = PaymentDetails != null ? PaymentDetails : new PaymentInfo(),
                    DisplayName = Cus.DisplayName,
                    BillingAddress = CustomerAddress,
                    OwnerAddress = CustomerAddress,
                    InstallAddress = CustomerInstallAddress,
                    OwnerEmail = Cus.EmailAddress,
                    //OwnerPhone = Cus.PrimaryPhone,
                    OwnerPhone = Cus.CellNo,
                    OwnerName = Cus.FirstName + " " + Cus.LastName,
                    FirstName = Cus.FirstName,
                    LastName = Cus.LastName,
                    MiddleName = Cus.MiddleName,
                    EmergencyContactList = _Util.Facade.EmergencyContactFacade.GetAllEmergencyContactByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId),
                    CompanyName = Com.CompanyName,
                    CompanySate = string.Format("{0}, {1} {2}", Com.City, Com.State, Com.ZipCode),
                    CompanyStreet = Com.Street,
                    CompanyWebsite = Com.Website,
                    SubscribedMonths = ContractTerm,
                    SubscribedMonthsInWord = ContractTermInWord,
                    RenewalMonths = Cus.RenewalTerm.HasValue ? Cus.RenewalTerm.Value : 0,
                    Password = Cus.Passcode,
                    DateOfTransaction = FixDate.UTCToClientTime(),
                    CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyEmailLogoByCompanyId(CompanyId),
                    EquipmentList = CustomEquipmentList.ToList(),
                    ServiceList = CustomServiceList.ToList(),
                    ActivationFee = (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue) ? PackageCustomer.ActivationFee.Value : 0,
                    LabourFee = (PackageCustomer != null && PackageCustomer.LabourFee.HasValue) ? PackageCustomer.LabourFee.Value : 0,
                    BusinessName = Cus.BusinessName,
                    MonthlyMonitoringFee = Cus.MonthlyMonitoringFee,
                    EffectiveDate = FixDate.UTCToClientTime(),
                    CustomerSignature = cusSignature,
                    CustomerSignatureStringDate = cussignDate,
                    CustomerSignatureStringDateVal = cussignDateVal,
                    //ContractCreatedDateVal = contractCreatedDateVal,
                    //ContractCreatedDateVal = Cus.InstallDate != null ? Convert.ToDateTime(Cus.InstallDate).ToShortDateString() : "",
                    ContractCreatedDateVal = (CusExd.ContractStartDate != null && CusExd.ContractStartDate.HasValue) ? CusExd.ContractStartDate.Value.ToShortDateString() : DateTime.Now.ToShortDateString(),
                    CustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByCompanyIdAndCustomerId1(CompanyId, Cus.CustomerId),
                    Subtotal = AgreementSubtotal,
                    Tax = AgreementTax,
                    TaxTotal = taxtotal,
                    Total = AgreementTotal,
                    EContractId = Cus.Id,
                    ListAgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(Cus.CustomerId),
                    SalesRepresentative = !string.IsNullOrEmpty(Cus.Soldby) ? _Util.Facade.EmployeeFacade.GetEmployeeNumByEmployeeId(new Guid(Cus.Soldby)).ToString() : "",
                    //TotalPayments = (!string.IsNullOrWhiteSpace(Cus.MonthlyMonitoringFee) ? Convert.ToDouble(Cus.MonthlyMonitoringFee) : 1) * Convert.ToDouble(ContractTerm),
                    TotalPayments = TotalPayments,
                    SingleCustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetIpAndUserAgentByCustomerIdAndCompanyId(CompanyId, Cus.CustomerId),
                    ListContactEmergency = string.Format(overviewheader, overviewdata),
                    ListPaymentInfo = string.Format(paymentoverviewheader, paymentoverviewdata),
                    DoingBusinessAs = Cus.DBA,
                    DispalyName = Cus.DisplayName,
                    CompanyPhone = Com.Phone,
                    FirstPage = firstpage,
                    Commercial = commercial,
                    Recreate = recreate,
                    IsInvoice = isinvoice,
                    InvoiceId = invoiceid,
                    InvoiceDiagram = invDiagram,
                    InvoiceList = invoiceList,
                    IsEstimator = isestimator,
                    createEst = createest,
                    userInfo = userInfo,
                    inv = invoice,
                    NotARBEnabledServiceList = NotARBEnabledServiceList.ToList(),
                    NotARBEnabledTotalPrice = NotARBEnabledTotalPrice,
                    ProratedAmout = cpb != null ? Math.Round(cpb.Amount, 2, MidpointRounding.AwayFromZero) : 0.0,
                    FinancedAmout = Cus != null && Cus.FinancedAmount != null ? Math.Round(Cus.FinancedAmount.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                    MonthlyFinanceRate = CusExd != null && CusExd.MonthlyFinanceRate != null ? Math.Round(CusExd.MonthlyFinanceRate.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                    AdvanceServiceFeeTotal = AdvanceServiceFeeTotal
                };
                //Work from here get Monitoring Ammount and Contract Term
                if (agreementtempid != 0)
                {
                    if (cs != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(cs.Signature))
                    {
                        Model.CompanySignature = glbs.Value;
                        if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                        {
                            Model.CompanySignatureDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                        }
                    }
                }
                else if (firstpage == true || recreate == true || commercial == true)
                {
                    if (glbs != null && !string.IsNullOrWhiteSpace(glbs.Value))
                    {
                        Model.CompanySignature = glbs.Value;
                        Model.CompanySignatureDate = cussignDate;
                    }
                }
                else
                {
                    if (Cus != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(Cus.Singature))
                    {
                        Model.CompanySignature = glbs.Value;
                        if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                        {
                            Model.CompanySignatureDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                        }
                    }
                }

            }
            else
            {
                Model.CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyLogoForPDFByCompanyId(CompanyId);
            }

            //  return View(Model);
            Model.KazarLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/kazar_logo.PNG");
            ViewBag.CompanyId = Com.CompanyId.ToString();
            Model.CompanyId = Com.CompanyId.ToString();
            Model.CurrentCurrency = _Util.Facade.GlobalSettingsFacade.GetCurrentCurrencyByCompanyId(Com.CompanyId);
            string body = _Util.Facade.AgreementFacade.MakeSmartAgreementPdf(Model, agreementtempid);
            ViewBag.Body = body;
            if (Request.Browser.IsMobileDevice)
            {
                ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("SmartInstallationAgreement")
                {
                    //FileName = "TestView.pdf",
                    PageSize = Rotativa.Options.Size.A4,
                    PageOrientation = Rotativa.Options.Orientation.Portrait,
                    PageMargins = { Left = 1, Right = 1 },

                };
                byte[] applicationPDFData = actionPDF.BuildPdf(ControllerContext);

                #region file save
                //Random rand = new Random();
                //string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
                //var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(Com.CompanyId).CompanyName.ReplaceSpecialChar();
                //var pdftempFolderName = string.Format(filename, comname) + rand.Next().ToString() + leadid + "AgreementMail.pdf";
                //string Serverfilename = FileHelper.GetFileFullPath(pdftempFolderName);
                //FileHelper.SaveFile(applicationPDFData, Serverfilename);
                //var returnurl = AppConfig.SiteDomain + "/" + pdftempFolderName;
                #endregion


                //// "mayur" AWS S3 Changes //// Start

                #region File Save on AWS S3
                Random rand = new Random();
                string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
                filename = filename.TrimEnd('/');

                var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(Com.CompanyId).CompanyName.ReplaceSpecialChar();

                string FilePath = string.Format(filename, comname);
                string FileName = rand.Next().ToString() + leadid + "AgreementMail.pdf";


                string FileKey = string.Format($"{FilePath}/{FileName}");
                var returnurl = "";

                var task = Task.Run(async () => {
                    AWSS3ObjectService AWSobject = new AWSS3ObjectService();

                    await AWSobject.UploadFile(FileKey, applicationPDFData);
                    await AWSobject.MakePublic(FileName, FilePath);
                });

                task.Wait();

                /// "mayur" used thread for async s3 methods : start

                //Thread thread = new Thread(async () => {

                //    AWSS3ObjectService AWSobject = new AWSS3ObjectService();

                //    await AWSobject.UploadFile(FileKey, applicationPDFData);
                //    await AWSobject.MakePublic(FileName, FilePath);

                //});
                //thread.Start();

                /// "mayur" used thread for async s3 methods : End



                returnurl = String.Format(AppConfig.AWSS3Url, AppConfig.AWSS3BucketName);
                returnurl = returnurl + FileKey;


                ViewBag.ReturnUrl = returnurl;
                ViewBag.FileName = FileName;
                ViewBag.FileKey = FileKey;

                #endregion

                //// "mayur" AWS S3 Changes //// End


                return Redirect(ViewBag.ReturnUrl);
            }
            else
            {
                return new ViewAsPdf(Model)
                {
                    // FileName = flightPlan.ListingItemDetailsModel.FlightDetails + ".pdf",
                    PageSize = Rotativa.Options.Size.A4,
                    PageOrientation = Orientation.Portrait,
                    //PageMargins = new Margins(10, 0, 0, 0),
                    PageMargins = new Margins(10, 2, 10, 3)
                };
            }

        }

        public ActionResult DownloadSmartAgreement_v2(string url)
        {
            int leadid = 0;
            int agreementtempid = 0;
            bool firstpage = false;
            bool commercial = false;
            int ticketid = 0;
            bool recreate = false;
            string invoiceid = "";
            bool isinvoice = false;
            bool isestimator = false;
            int estid = 0;
            Guid userid = Guid.Empty;
            if (!string.IsNullOrWhiteSpace(url))
            {
                string[] spurl = DESEncryptionDecryption.DecryptCipherTextToPlainText(url).Split('#');
                if (spurl.Length == 11)
                {
                    leadid = Convert.ToInt32(spurl[0]);
                    if (!string.IsNullOrWhiteSpace(spurl[1]))
                    {
                        agreementtempid = Convert.ToInt32(spurl[1]);
                    }
                    firstpage = Convert.ToBoolean(spurl[2]);
                    ticketid = Convert.ToInt32(spurl[3]);
                    recreate = Convert.ToBoolean(spurl[4]);
                    invoiceid = Convert.ToString(spurl[6]);
                    isinvoice = Convert.ToBoolean(spurl[5]);
                    isestimator = Convert.ToBoolean(spurl[7]);
                    estid = Convert.ToInt32(spurl[8]);
                    userid = new Guid(spurl[9]);
                    commercial = Convert.ToBoolean(spurl[10]);
                }
                else
                {
                    leadid = Convert.ToInt32(spurl[0]);
                    if (!string.IsNullOrWhiteSpace(spurl[1]))
                    {
                        agreementtempid = Convert.ToInt32(spurl[1]);
                    }
                    firstpage = Convert.ToBoolean(spurl[2]);
                    ticketid = Convert.ToInt32(spurl[3]);
                    recreate = Convert.ToBoolean(spurl[4]);
                    invoiceid = Convert.ToString(spurl[6]);
                    isinvoice = Convert.ToBoolean(spurl[5]);
                    commercial = Convert.ToBoolean(spurl[6]);
                }

            }
            DateTime FixDate = DateTime.Now.UTCCurrentTime();
            InstallationAgreementModel Model = new InstallationAgreementModel();
            Model.EmergencyContactList = new List<EmergencyContact>();
            Model.ListAgreementAnswer = new List<AgreementAnswer>();
            Model.EquipmentList = new List<Equipment>();
            Model.CustomerAgreement = new List<CustomerAgreement>();
            Model.SingleCustomerAgreement = new CustomerAgreement();
            var taxtotal = 0.0;
            Guid CompanyId = new Guid();
            if (User.Identity.IsAuthenticated)
            {
                var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
                CompanyId = CurrentUser.CompanyId.Value;
            }
            else
            {
                CustomerCompany custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(leadid);
                CompanyId = custommerCompany.CompanyId;
            }
            Customer Cus = new Customer();
            CustomerExtended CusExd = new CustomerExtended();
            Company Com = new Company();
            if (leadid != 0)
            {
                if (!_Util.Facade.CustomerFacade.CustomerIsInCompany(leadid, CompanyId))
                {
                    return null;
                }

                Cus = _Util.Facade.CustomerFacade.GetCustomersById(leadid);
                if (Cus != null)
                {
                    CusExd = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(Cus.CustomerId);
                }
                Com = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CompanyId);

                string ContractTerm = "";
                string ContractTermInWord = "";
                if (!string.IsNullOrWhiteSpace(Cus.ContractTeam) && Cus.ContractTeam != "-1")
                {
                    if (Cus.ContractTeam.ToLower() == "month to month")
                    {
                        ContractTerm = Cus.ContractTeam;
                        ContractTermInWord = Cus.ContractTeam;
                    }
                    else
                    {
                        ContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))).ToString();
                        ContractTermInWord = NumberToWords((Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))));
                    }

                }
                var objCusAgree = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByComIdAndCusIsAndLoadAgreement(Com.CompanyId, Cus.CustomerId);
                if (objCusAgree == null)
                {
                    CustomerAgreement objCustomerAgreement = new CustomerAgreement()
                    {
                        CompanyId = Com.CompanyId,
                        CustomerId = Cus.CustomerId,
                        IP = AppConfig.GetIP,
                        UserAgent = AppConfig.GetUserAgent,
                        Type = LabelHelper.CustomerAgreementLog.LoadAgreement,
                        AddedDate = DateTime.UtcNow
                    };
                    _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(objCustomerAgreement);
                }
                var UpfrontAddOnTotal = 0.0;
                var UpfrontAddOnTotalPromo = 0.0;
                bool IsUpfrontPromo = false;
                bool IsServicePromo = false;
                var MonthlyServiceFeeTotal = 0.0;
                var TotalMonthlyMonitoring = 0.0;
                var NewSubTotal = 0.0;
                var TotalDueAtSigning = 0.0;
                var EquipmentTotalPrice = 0.0;
                var ServiceTotalPrice = 0.0;
                var AgreementSubtotal = 0.0;
                var AgreementTotal = 0.0;
                double ServiceTax = 0.0;
                var AgreementTax = 0.0;
                var NotARBEnabledTotalPrice = 0.0;
                var AdvanceServiceFeeTotal = 0.0;
                string InstallTypeName = "";
                bool IsNonConfirming = false;
                var NonConfirmingFee = 0.0;
                string contractCreatedDateVal = "";
                if (CusExd.ContractCreatedDate != null)
                {
                    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.UTCToClientTime().ToString("M/d/yy");
                }
                else
                {
                    CusExd.ContractCreatedDate = DateTime.UtcNow;
                    _Util.Facade.CustomerFacade.UpdateCustomerExtended(CusExd);
                    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.UTCToClientTime().ToString("M/d/yy");
                }
                if (Cus.CreditScoreValue == null)
                {
                    Cus.CreditScoreValue = 0;
                }
                var PackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(Cus.CustomerId);
                if (PackageCustomer != null && PackageCustomer.NonConforming && PackageCustomer.NonConformingFee > 0 && (Cus.CreditScoreValue < PackageCustomer.MinCredit || Cus.CreditScoreValue > PackageCustomer.MaxCredit))
                {
                    IsNonConfirming = true;
                    NonConfirmingFee = PackageCustomer.NonConformingFee.Value;
                }

                var SmartPackageEquipmentServiceList = new List<SmartPackageEquipmentService>();
                var GetCityTaxList = _Util.Facade.CompanyBranchFacade.GetCityTaxRate(Cus.CustomerId, Com.CompanyId);
                if (GetCityTaxList.Count > 0)
                {
                    foreach (var item1 in GetCityTaxList)
                    {
                        AgreementTax = item1.Rate;
                        ServiceTax = item1.Rate;
                    }
                }
                else
                {
                    Guid CustomerId = new Guid();
                    if (Cus != null)
                    {
                        CustomerId = Cus.CustomerId;
                    }
                    var GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(Com.CompanyId, CustomerId);
                    if (GetSalesTax != null)
                    {
                        AgreementTax = Convert.ToDouble(GetSalesTax.Value);
                        ServiceTax = Convert.ToDouble(GetSalesTax.Value);
                    }
                }
                #region Invoice
                Invoice invoice = new Invoice();
                CustomerProratedBill cpb = new CustomerProratedBill();
                cpb = _Util.Facade.InvoiceFacade.GetCusProratedBillByCustomerId(Cus.CustomerId);
                List<InvoiceDetail> invoiceList = new List<InvoiceDetail>();
                string invDiagram = "";
                if (!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true)
                {
                    invoice = _Util.Facade.InvoiceFacade.GetByInvoiceId(invoiceid);
                    if (invoice != null)
                    {
                        invDiagram = invoice.InvoiceContractDiagram;
                        invoiceList = _Util.Facade.InvoiceFacade.GetInvoiceDetialsListByInvoiceId(invoice.InvoiceId);
                    }
                }
                #endregion
                #region Estimator
                Employee userInfo = new Employee();
                if (userid != Guid.Empty)
                {
                    userInfo = _Util.Facade.EmployeeFacade.GetEmployeeByEmployeeId(userid);
                }
                CreateEstimator createest = new CreateEstimator();
                if (isestimator && estid > 0)
                {
                    CreateEstimator ca = new CreateEstimator();
                    ca.EstimatorSetting = new EstimatorSetting();
                    ca.Company = Com;

                    ca.Estimator = _Util.Facade.EstimatorFacade.GetById(estid);
                    ca._EstimatorPDFFilter = _Util.Facade.EstimatorFacade.GetEstimatorPdfFilterByComIdCusIdUserId(Com.CompanyId, userid, ca.Estimator.CustomerId);
                    ca.estimatorDetails = _Util.Facade.EstimatorFacade.GetEstimatorDetailListByEstimatorId(ca.Estimator.EstimatorId);
                    ca.estimatorServices = _Util.Facade.EstimatorFacade.GetEstimatorServicesByEstimatorId(ca.Estimator.EstimatorId);
                    if (ca.Estimator == null || ca.Estimator.CompanyId != CompanyId)
                    {
                        return null;
                    }
                    if ((ca.estimatorDetails == null || ca.estimatorDetails.Count() == 0) && (ca.estimatorServices == null || ca.estimatorServices.Count() == 0))
                    {
                        return null;
                    }
                    Customer tempCUstomer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(ca.Estimator.CustomerId);
                    if (tempCUstomer == null)
                    {
                        return null;
                    }

                    CreateEstimator processedModel = GetEstimatorModelById(ca.Estimator, ca.estimatorDetails, ca.estimatorServices, Com, tempCUstomer, ca._EstimatorPDFFilter, CompanyId);
                    Estimator estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(ca.Estimator.EstimatorId);
                    if (estimator != null)
                    {
                        ViewBag.CoverLetter = estimator.CoverLetter;
                        processedModel.Estimator.CoverLetter = estimator.CoverLetter;
                        processedModel.Estimator.CoverLetterFile = estimator.CoverLetterFile;
                        processedModel.Estimator.ServicePlanType = estimator.ServicePlanType;
                        processedModel.Estimator.ServicePlanRate = estimator.ServicePlanRate;
                        processedModel.Estimator.ServicePlanAmount = estimator.ServicePlanAmount;
                        processedModel.Estimator.ServiceTaxAmount = estimator.ServiceTaxAmount;
                        processedModel.Estimator.ServiceTotalAmount = estimator.ServiceTotalAmount;
                        processedModel.Estimator.ShowServicePlan = estimator.ShowServicePlan;
                        processedModel.Estimator.ShowService = estimator.ShowService;
                        processedModel.Estimator.ServicePlanTypeName = "Service Plan";

                        SelectListItem selectListItem = _Util.Facade.LookupFacade.GetDropdownsByKey("ServicePlans").Where(x => x.Value == estimator.ServicePlanType).FirstOrDefault();
                        if (selectListItem != null)
                        {
                            processedModel.Estimator.ServicePlanTypeName = selectListItem.Text;
                        }

                    }
                    if (ca.estimatorDetails != null)
                    {
                        foreach (var item in ca.estimatorDetails)
                        {
                            Manufacturer Manufacturer = _Util.Facade.EquipmentFacade.GetManufacturerByManufacturerId(item.ManufacturerId);
                            if (Manufacturer != null)
                            {
                                item.Manufacturer = Manufacturer.Name;
                            }
                            item.CreatedDate = DateTime.Now.UTCCurrentTime();
                            ca.SubTotal = ca.SubTotal + (item.TotalPrice.HasValue ? item.TotalPrice.Value : 0);
                            item.EquipmentFile = _Util.Facade.EquipmentFileFacade.GetEquipmentFilesByEquipmentIdAndFileType(item.EquipmentId, LabelHelper.EquipmentFileType.ProfilePicture).FirstOrDefault();
                            if (item.EquipmentFile == null)
                            {
                                item.EquipmentFile = new EquipmentFile();
                            }
                        }
                    }
                    if (ca.estimatorServices != null)
                    {
                        foreach (var item in ca.estimatorServices)
                        {
                            processedModel.ServiceSubTotal += ca.ServiceSubTotal + item.Amount;
                        }
                        processedModel.TotalServiceAmount = processedModel.ServiceSubTotal + ca.ServiceTax;
                    }
                    createest = processedModel;
                    createest.eSecurityLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/eSecurity_logo.png");
                    createest.specializedLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/specialized_property_management_logo.png");
                    string EstimatorContractTerm = "";
                    if (!string.IsNullOrWhiteSpace(createest.Estimator.ContractTerm) && createest.Estimator.ContractTerm != "-1")
                    {
                        if (createest.Estimator.ContractTerm.ToLower() == "month to month")
                        {
                            EstimatorContractTerm = createest.Estimator.ContractTerm;
                        }
                        else
                        {
                            EstimatorContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(createest.Estimator.ContractTerm) * 12))).ToString() + " month";
                        }

                    }
                    createest.EstimatorContractTerm = EstimatorContractTerm;
                }
                #endregion
                var CustomEquipmentList = new List<Equipment>();
                if (firstpage == true || recreate == true)
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }
                else
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }

                var CustomServiceList = new List<Equipment>();
                if (firstpage == true || recreate == true)
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (CustomServiceList.Count > 0)
                    {
                        foreach (var item in CustomServiceList)
                        {
                            EquipmentTotalPrice += item.Total;
                            ServiceTotalPrice += item.Total;
                            MonthlyServiceFeeTotal += item.Total;
                        }
                    }
                }
                else
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (CustomServiceList.Count > 0)
                    {
                        foreach (var item in CustomServiceList)
                        {
                            EquipmentTotalPrice += item.Total;
                            ServiceTotalPrice += item.Total;
                            MonthlyServiceFeeTotal += item.Total;
                        }
                    }
                }
                var NotARBEnabledServiceList = new List<Equipment>();
                if (firstpage == true || recreate == true || commercial == true)
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (NotARBEnabledServiceList.Count > 0)
                    {
                        foreach (var item in NotARBEnabledServiceList)
                        {
                            NotARBEnabledTotalPrice += item.Total;
                        }
                    }
                }
                //else if (!string.IsNullOrWhiteSpace(EstimatorId))
                //{
                //    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetSmartEstimatorServiceListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid, EstimatorId);
                //    var onetimeserviceList = NotARBEnabledServiceList.Where(x => x.IsARBEnabled == false).ToList();
                //    if (onetimeserviceList != null)
                //    {
                //        if (onetimeserviceList.Count > 0)
                //        {
                //            foreach (var item in onetimeserviceList)
                //            {
                //                NotARBEnabledTotalPrice += item.Total;
                //            }
                //        }
                //    }

                //}
                else
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListFromService(Cus.CustomerId, CompanyId);
                    if (NotARBEnabledServiceList.Count > 0)
                    {
                        foreach (var item in NotARBEnabledServiceList)
                        {
                            NotARBEnabledTotalPrice += item.Total;
                        }
                    }
                }
                #region Advance Monitoring Service Month

                PaymentInfoCustomer paycus = new PaymentInfoCustomer();
                paycus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayForService(Cus.CustomerId);
                int ForMonth = 1;
                if (paycus != null && paycus.ForMonths.HasValue)
                {
                    ForMonth = paycus.ForMonths.Value;
                }
                if (ForMonth > 1)
                {
                    AdvanceServiceFeeTotal = MonthlyServiceFeeTotal * (ForMonth - 1);

                }
                #endregion
                Cus.MonthlyMonitoringFee = Convert.ToString(ServiceTotalPrice);
                TotalMonthlyMonitoring = MonthlyServiceFeeTotal;
                NewSubTotal = TotalMonthlyMonitoring + UpfrontAddOnTotal;

                if (CustomServiceList.Count > 0 || CustomEquipmentList.Count > 0)
                {
                    if (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue)
                    {
                        AgreementSubtotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                        NewSubTotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                    }
                    else
                    {
                        AgreementSubtotal = EquipmentTotalPrice;
                        NewSubTotal = EquipmentTotalPrice;
                    }
                }
                if (IsNonConfirming && NonConfirmingFee > 0)
                {
                    AgreementSubtotal = AgreementSubtotal + NonConfirmingFee;
                    NewSubTotal = NewSubTotal + NonConfirmingFee;
                }

                if (AgreementTax != 0.0)
                {
                    taxtotal = (AgreementSubtotal / 100) * AgreementTax;
                    Model.TaxTotal = taxtotal;
                    AgreementTotal = AgreementSubtotal + taxtotal;
                    TotalDueAtSigning = NewSubTotal + taxtotal;
                }
                else
                {
                    Model.TaxTotal = 0.0;
                    AgreementTotal = AgreementSubtotal;
                    TotalDueAtSigning = NewSubTotal;
                }


                /// "mayur" activation feet total change 
                if (ServiceTax != 0.0)
                {
                    taxtotal = (ServiceTotalPrice / 100) * ServiceTax;
                    // MonthlyServiceFeeTotal = ServiceTotalPrice + taxtotal;
                }
                else
                {
                }
                /////////////////////////////////
                ///
                var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(Cus.CustomerId, CompanyId);
                if (PackageCustomerDetails != null)
                {
                    InstallTypeName = _Util.Facade.PackageFacade.SmartInstallTypeNameByInstallTypeId(Convert.ToInt32(PackageCustomerDetails.SmartInstallTypeId));
                    if(string.IsNullOrWhiteSpace(InstallTypeName))
                    {
                        InstallTypeName = "New Install";
                    }
                    SmartPackageEquipmentServiceList = _Util.Facade.PackageFacade.GetAllSmartPackageIncludeEquipmentByPackageIdAndCompanyId(PackageCustomerDetails.PackageId, CompanyId);
                }
                var PaymentDetails = _Util.Facade.PaymentInfoFacade.GetAllPaymentInfoByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId).Where(m => m.PayFor == "First Month").FirstOrDefault();
                var emercontact = _Util.Facade.EmergencyContactFacade.GetAllEmergencyContactByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId);
                string overviewheader = "";
                string overviewdata = "";
                if (emercontact != null && emercontact.Count > 0)
                {
                    overviewheader = @"<table style='border-collapse:collapse; width:100%;font-family:Arial;table-layout:fixed;font-size:13px;margin-top:20px;'>
                                                          <thread>
                                            <tr style='height:30px;'>
                                  <th style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>Name</th>
   
                                   <th style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'> RelationShip </th>
    
                                    <th style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'> Phone </th>
     
                                     <th style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'> Type </th>
      
                                  </tr>
                                            </thread>
                                            <tbody>
                                            {0}
                                            </tbody>
                                        </table>";
                    foreach (var item in emercontact)
                    {
                        overviewdata += @"<tr style='height: 30px;'>
                                  <td style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>" + item.FirstName + " " + item.LastName + @"</td>
   
                                   <td style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>" + item.RelationShip + @"</td>
    
                                    <td style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>" + item.Phone + @"</td>
     
                                     <td style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>" + item.PhoneType + @"</td>
      
                                  </tr> ";
                    }
                }
                var agreementPayment = _Util.Facade.PaymentInfoFacade.GetLeadAgreementPaymentInfoByCustomerId(Cus.CustomerId);
                string paymentoverviewheader = "";
                string paymentoverviewdata = "";
                if (agreementPayment != null && agreementPayment.Count > 0)
                {
                    paymentoverviewheader = "<table style='border-collapse:collapse; width:100%; font-family:Arial; table-layout:fixed; font-size:13px;'>{0}</table>";
                    foreach (var pay in agreementPayment)
                    {
                        var sppay = pay.Type.Split('_');
                        if (sppay.Length > 0)
                        {
                            if (sppay[0] == "CC")
                            {
                                var cardNumber = pay.CardNumber.Replace('-', ' ').Replace(" ", "");
                                if (cardNumber.Length == 16)
                                {
                                    paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(12, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                                }
                                else
                                {
                                    paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(11, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                                }
                            }
                            else if (sppay[0] == "ACH" && pay.AcountNo.Length > 4)
                            {
                                paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Type: " + pay.BankAccountType + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Routing No: " + pay.RoutingNo + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account No: " + string.Concat("".PadLeft(pay.AcountNo.Length - 4, '*'), pay.AcountNo.Substring(pay.AcountNo.Length - 4)) + @"</td>
                                                        </tr>";
                            }
                        }
                    }
                }

                var CustomerAddress = AddressHelper.MakeAddress(Cus);
                var CustomerInstallAddress = AddressHelper.MakeInstallAddress(Cus);
                CustomerSignature cs = new CustomerSignature();
                GlobalSetting glbs = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CompanyId, "CompanySignature");
                string cusSignature = "";
                string cussignDate = "";
                DateTime cussignDateVal = new DateTime();
                if (firstpage == true || recreate == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "First Page");
                }
                else if (commercial == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Commercial");
                }
                else if (isinvoice == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimate");
                }
                else if (isestimator == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimator");
                }
                else if (recreate == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Recreate");
                }
                else if (Cus != null && agreementtempid != 0)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Agreement File");
                }
                else
                {
                    cusSignature = Cus.Singature;
                    if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                    {
                        cussignDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                        cussignDateVal = Cus.CustomerSignatureDate.Value.UTCToClientTime();
                    }

                }
                if (cs != null && (agreementtempid != 0 || firstpage == true || recreate == true || commercial == true))
                {
                    cusSignature = cs.Signature;
                    if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                    {
                        cussignDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                        cussignDateVal = cs.CreatedDate.UTCToClientTime();
                    }

                }
                #region For Promo Pyment Method
                List<PaymentInfoCustomer> paycusList = new List<PaymentInfoCustomer>();
                PaymentProfileCustomer paymentProfile = new PaymentProfileCustomer();
                paycusList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(Cus.CustomerId);
                if (paycusList != null && paycusList.Count > 0)
                {
                    foreach (var item in paycusList)
                    {
                        paymentProfile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(item.PaymentInfoId);
                        if (paymentProfile != null && paymentProfile.Type == LabelHelper.PaymentMethod.Promo)
                        {
                            if (item.Payfor == "Activation Fee")
                            {
                                NonConfirmingFee = 0.0;

                                if (PackageCustomer != null)
                                {
                                    PackageCustomer.ActivationFee = 0.0;
                                }
                                NewSubTotal = NewSubTotal - (PackageCustomer.AdditionFee + NonConfirmingFee);
                            }
                            else if (item.Payfor == "Equipment")
                            {
                                IsUpfrontPromo = true;
                                NewSubTotal = NewSubTotal - UpfrontAddOnTotal;
                            }
                            else if (item.Payfor == "Service")
                            {
                                NewSubTotal = NewSubTotal - TotalMonthlyMonitoring;
                                IsServicePromo = true;

                            }


                        }

                    }

                }
                #endregion

                #region LeadSource
                string LeadSource = "";
                Lookup leadsource = _Util.Facade.LookupFacade.GetLookupByKeyAndValueAndCompanyId("LeadSource", Cus.LeadSource, Com.CompanyId);
                LeadSource = leadsource != null && !string.IsNullOrWhiteSpace(leadsource.DisplayText) && leadsource.DataValue != "-1" ? leadsource.DisplayText : "";
                #endregion

                Model = new InstallationAgreementModel()
                {
                    CSIDNumber = Cus.Id,
                    LeadSource = LeadSource,
                    IsNonConfirming = IsNonConfirming,
                    NonConfirmingFee = NonConfirmingFee,
                    InstallDate = Cus.InstallDate != null ? Convert.ToDateTime(Cus.InstallDate).ToShortDateString() : "",
                    OriginalContactDate = (Cus.OriginalContactDate != null && Cus.OriginalContactDate.HasValue) ? Cus.OriginalContactDate.Value : new DateTime(),
                    AccountType = Cus.Type,
                    ContractType = CusExd != null && !string.IsNullOrWhiteSpace(CusExd.ContractType) ? CusExd.ContractType : "",
                    Referredby = Cus.ReferringCustomer != Guid.Empty ? _Util.Facade.CustomerFacade.GetCustomerNameById(Cus.ReferringCustomer) : "",
                    SocialSecurityNumber = Cus.SSN,
                    //Owner2ndPhone = Cus.SecondaryPhone,
                    Owner2ndPhone = Cus.PrimaryPhone,
                    InitialStreet = Cus.Street,
                    InitialCity = Cus.City,
                    InitialCountry = Cus.County,
                    InitialState = Cus.State,
                    InitialZip = Cus.ZipCode,
                    InitialApt = Cus.Appartment,
                    BillingCity = Cus.CityPrevious,
                    BillingState = Cus.StatePrevious,
                    BillingZip = Cus.ZipCodePrevious,
                    BillingCountry = Cus.CountryPrevious,
                    BillingStreet = Cus.StreetPrevious,
                    InstallTypeName = InstallTypeName,
                    SmartPackageEquipmentServiceList = SmartPackageEquipmentServiceList,
                    UpfrontAddOnTotal = UpfrontAddOnTotal,
                    UpfrontAddOnTotalPromo = UpfrontAddOnTotalPromo,
                    IsUpfrontPromo = IsUpfrontPromo,
                    IsServicePromo = IsServicePromo,
                    MonthlyServiceFeeTotal = MonthlyServiceFeeTotal,
                    TotalMonthlyMonitoring = TotalMonthlyMonitoring,
                    NewSubTotal = NewSubTotal,
                    TotalDueAtSigning = TotalDueAtSigning,
                    PaymentDetails = PaymentDetails != null ? PaymentDetails : new PaymentInfo(),
                    DisplayName = Cus.DisplayName,
                    BillingAddress = CustomerAddress,
                    OwnerAddress = CustomerAddress,
                    InstallAddress = CustomerInstallAddress,
                    OwnerEmail = Cus.EmailAddress,
                    //OwnerPhone = Cus.PrimaryPhone,
                    OwnerPhone = Cus.CellNo,
                    OwnerName = Cus.FirstName + " " + Cus.LastName,
                    FirstName = Cus.FirstName,
                    LastName = Cus.LastName,
                    EmergencyContactList = _Util.Facade.EmergencyContactFacade.GetAllEmergencyContactByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId),
                    CompanyName = Com.CompanyName,
                    CompanySate = string.Format("{0}, {1} {2}", Com.City, Com.State, Com.ZipCode),
                    CompanyStreet = Com.Street,
                    CompanyWebsite = Com.Website,
                    SubscribedMonths = ContractTerm,
                    SubscribedMonthsInWord = ContractTermInWord,
                    RenewalMonths = Cus.RenewalTerm.HasValue ? Cus.RenewalTerm.Value : 0,
                    Password = Cus.Passcode,
                    DateOfTransaction = FixDate.UTCToClientTime(),
                    CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyEmailLogoByCompanyId(CompanyId),
                    EquipmentList = CustomEquipmentList.ToList(),
                    ServiceList = CustomServiceList.ToList(),
                    ActivationFee = (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue) ? PackageCustomer.ActivationFee.Value : 0,
                    BusinessName = Cus.BusinessName,
                    MonthlyMonitoringFee = Cus.MonthlyMonitoringFee,
                    EffectiveDate = FixDate.UTCToClientTime(),
                    CustomerSignature = cusSignature,
                    CustomerSignatureStringDate = cussignDate,
                    CustomerSignatureStringDateVal = cussignDateVal,
                    //ContractCreatedDateVal = contractCreatedDateVal,
                    ContractCreatedDateVal = (CusExd.ContractStartDate != null && CusExd.ContractStartDate.HasValue) ? CusExd.ContractStartDate.Value.ToShortDateString() : DateTime.Now.ToShortDateString(),
                    CustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByCompanyIdAndCustomerId1(CompanyId, Cus.CustomerId),
                    Subtotal = AgreementSubtotal,
                    Tax = AgreementTax,
                    TaxTotal = taxtotal,
                    Total = AgreementTotal,
                    EContractId = Cus.Id,
                    ListAgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(Cus.CustomerId),
                    SalesRepresentative = !string.IsNullOrEmpty(Cus.Soldby) ? _Util.Facade.EmployeeFacade.GetEmployeeNumByEmployeeId(new Guid(Cus.Soldby)).ToString() : "",
                    TotalPayments = (!string.IsNullOrWhiteSpace(Cus.MonthlyMonitoringFee) ? Convert.ToDouble(Cus.MonthlyMonitoringFee) : 1) * Convert.ToDouble(ContractTerm),
                    SingleCustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetIpAndUserAgentByCustomerIdAndCompanyId(CompanyId, Cus.CustomerId),
                    ListContactEmergency = string.Format(overviewheader, overviewdata),
                    ListPaymentInfo = string.Format(paymentoverviewheader, paymentoverviewdata),
                    DoingBusinessAs = Cus.DBA,
                    DispalyName = Cus.DisplayName,
                    CompanyPhone = Com.Phone,
                    FirstPage = firstpage,
                    Commercial = commercial,
                    IsInvoice = isinvoice,
                    InvoiceId = invoiceid,
                    InvoiceDiagram = invDiagram,
                    InvoiceList = invoiceList,
                    IsEstimator = isestimator,
                    createEst = createest,
                    userInfo = userInfo,
                    inv = invoice,
                    NotARBEnabledServiceList = NotARBEnabledServiceList.ToList(),
                    NotARBEnabledTotalPrice = NotARBEnabledTotalPrice,
                    ProratedAmout = cpb != null ? Math.Round(cpb.Amount, 2, MidpointRounding.AwayFromZero) : 0.0,
                    FinancedAmout = Cus != null && Cus.FinancedAmount != null ? Math.Round(Cus.FinancedAmount.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                    MonthlyFinanceRate = CusExd != null && CusExd.MonthlyFinanceRate != null ? Math.Round(CusExd.MonthlyFinanceRate.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                    AdvanceServiceFeeTotal = AdvanceServiceFeeTotal
                };
                if (agreementtempid != 0)
                {
                    if (cs != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(cs.Signature))
                    {
                        Model.CompanySignature = glbs.Value;
                        if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                        {
                            Model.CompanySignatureDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                        }
                    }
                }
                else if (firstpage == true || recreate == true || commercial == true)
                {
                    if (glbs != null && !string.IsNullOrWhiteSpace(glbs.Value))
                    {
                        Model.CompanySignature = glbs.Value;
                        Model.CompanySignatureDate = cussignDate;
                    }
                }
                else
                {
                    if (Cus != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(Cus.Singature))
                    {
                        Model.CompanySignature = glbs.Value;
                        if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                        {
                            Model.CompanySignatureDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                        }
                    }
                }

            }
            else
            {
                Model.CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyLogoForPDFByCompanyId(CompanyId);
            }

            //  return View(Model);
            Model.KazarLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/kazar_logo.PNG");
            ViewBag.CompanyId = Com.CompanyId.ToString();
            Model.CompanyId = Com.CompanyId.ToString();
            Model.CurrentCurrency = _Util.Facade.GlobalSettingsFacade.GetCurrentCurrencyByCompanyId(Com.CompanyId);
            string body = _Util.Facade.AgreementFacade.MakeSmartAgreementPdf(Model, agreementtempid);
            ViewBag.Body = body;
            ViewAsPdf actionpdf = new Rotativa.ViewAsPdf("SmartInstallationAgreement")
            {
                PageSize = Rotativa.Options.Size.A4,
                PageOrientation = Orientation.Portrait,
                PageMargins = new Margins(10, 2, 10, 3)
            };
            byte[] applicationPDFData = actionpdf.BuildPdf(ControllerContext);
            return File(applicationPDFData, System.Net.Mime.MediaTypeNames.Application.Octet, leadid + "__AgreementDocument.pdf");
        }

        public ActionResult DownloadSmartAgreement(string url)
        {

            WebClient webClient;
            byte[] fileBytes1;
            string Temp_FileName;

            int leadid = 0;
            int agreementtempid = 0;
            bool firstpage = false;
            bool commercial = false;
            int ticketid = 0;
            bool recreate = false;
            string invoiceid = "";
            bool isinvoice = false;
            bool isestimator = false;
            int estid = 0;
            Guid userid = Guid.Empty;
            if (!string.IsNullOrWhiteSpace(url))
            {
                string[] spurl = DESEncryptionDecryption.DecryptCipherTextToPlainText(url).Split('#');
                if (spurl.Length == 11)
                {
                    leadid = Convert.ToInt32(spurl[0]);
                    if (!string.IsNullOrWhiteSpace(spurl[1]))
                    {
                        agreementtempid = Convert.ToInt32(spurl[1]);
                    }
                    firstpage = Convert.ToBoolean(spurl[2]);
                    ticketid = Convert.ToInt32(spurl[3]);
                    recreate = Convert.ToBoolean(spurl[4]);
                    invoiceid = Convert.ToString(spurl[6]);
                    isinvoice = Convert.ToBoolean(spurl[5]);
                    isestimator = Convert.ToBoolean(spurl[7]);
                    estid = Convert.ToInt32(spurl[8]);
                    userid = new Guid(spurl[9]);
                    commercial = Convert.ToBoolean(spurl[10]);
                }
                else
                {
                    leadid = Convert.ToInt32(spurl[0]);
                    if (!string.IsNullOrWhiteSpace(spurl[1]))
                    {
                        agreementtempid = Convert.ToInt32(spurl[1]);
                    }
                    firstpage = Convert.ToBoolean(spurl[2]);
                    ticketid = Convert.ToInt32(spurl[3]);
                    recreate = Convert.ToBoolean(spurl[4]);
                    invoiceid = Convert.ToString(spurl[6]);
                    isinvoice = Convert.ToBoolean(spurl[5]);
                    commercial = Convert.ToBoolean(spurl[6]);
                }

            }
            DateTime FixDate = DateTime.Now.UTCCurrentTime();
            InstallationAgreementModel Model = new InstallationAgreementModel();
            Model.EmergencyContactList = new List<EmergencyContact>();
            Model.ListAgreementAnswer = new List<AgreementAnswer>();
            Model.EquipmentList = new List<Equipment>();
            Model.CustomerAgreement = new List<CustomerAgreement>();
            Model.SingleCustomerAgreement = new CustomerAgreement();
            var taxtotal = 0.0;
            Guid CompanyId = new Guid();
            if (User.Identity.IsAuthenticated)
            {
                var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
                CompanyId = CurrentUser.CompanyId.Value;
            }
            else
            {
                CustomerCompany custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(leadid);
                CompanyId = custommerCompany.CompanyId;
            }
            Customer Cus = new Customer();
            CustomerExtended CusExd = new CustomerExtended();
            Company Com = new Company();
            if (leadid != 0)
            {
                if (!_Util.Facade.CustomerFacade.CustomerIsInCompany(leadid, CompanyId))
                {
                    return null;
                }

                Cus = _Util.Facade.CustomerFacade.GetCustomersById(leadid);
                if (Cus != null)
                {
                    CusExd = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(Cus.CustomerId);
                }
                Com = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CompanyId);

                string ContractTerm = "";
                string ContractTermInWord = "";
                if (!string.IsNullOrWhiteSpace(Cus.ContractTeam) && Cus.ContractTeam != "-1")
                {
                    if (Cus.ContractTeam.ToLower() == "month to month")
                    {
                        ContractTerm = Cus.ContractTeam;
                        ContractTermInWord = Cus.ContractTeam;
                    }
                    else
                    {
                        ContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))).ToString();
                        ContractTermInWord = NumberToWords((Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))));
                    }

                }
                var objCusAgree = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByComIdAndCusIsAndLoadAgreement(Com.CompanyId, Cus.CustomerId);
                if (objCusAgree == null)
                {
                    CustomerAgreement objCustomerAgreement = new CustomerAgreement()
                    {
                        CompanyId = Com.CompanyId,
                        CustomerId = Cus.CustomerId,
                        IP = AppConfig.GetIP,
                        UserAgent = AppConfig.GetUserAgent,
                        Type = LabelHelper.CustomerAgreementLog.LoadAgreement,
                        AddedDate = DateTime.UtcNow
                    };
                    _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(objCustomerAgreement);
                }
                var UpfrontAddOnTotal = 0.0;
                var UpfrontAddOnTotalPromo = 0.0;
                bool IsUpfrontPromo = false;
                bool IsServicePromo = false;
                var MonthlyServiceFeeTotal = 0.0;
                var TotalMonthlyMonitoring = 0.0;
                var NewSubTotal = 0.0;
                var TotalDueAtSigning = 0.0;
                var EquipmentTotalPrice = 0.0;
                var ServiceTotalPrice = 0.0;
                var AgreementSubtotal = 0.0;
                var AgreementTotal = 0.0;
                double ServiceTax = 0.0;
                var AgreementTax = 0.0;
                var NotARBEnabledTotalPrice = 0.0;
                var AdvanceServiceFeeTotal = 0.0;
                string InstallTypeName = "";
                bool IsNonConfirming = false;
                var NonConfirmingFee = 0.0;
                string contractCreatedDateVal = "";
                if (CusExd.ContractCreatedDate != null)
                {
                    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.UTCToClientTime().ToString("M/d/yy");
                }
                else
                {
                    CusExd.ContractCreatedDate = DateTime.UtcNow;
                    _Util.Facade.CustomerFacade.UpdateCustomerExtended(CusExd);
                    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.UTCToClientTime().ToString("M/d/yy");
                }
                if (Cus.CreditScoreValue == null)
                {
                    Cus.CreditScoreValue = 0;
                }
                var PackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(Cus.CustomerId);
                //if (PackageCustomer != null && PackageCustomer.NonConforming && PackageCustomer.NonConformingFee > 0 && (Cus.CreditScoreValue < PackageCustomer.MinCredit || Cus.CreditScoreValue > PackageCustomer.MaxCredit))
                if (PackageCustomer != null && PackageCustomer.NonConformingFee > 0 && (Cus.CreditScoreValue <= PackageCustomer.MinCredit || Cus.CreditScoreValue >= PackageCustomer.MaxCredit))
                {
                    IsNonConfirming = true;
                    NonConfirmingFee = PackageCustomer.NonConformingFee.Value;
                }

                var SmartPackageEquipmentServiceList = new List<SmartPackageEquipmentService>();
                var GetCityTaxList = _Util.Facade.CompanyBranchFacade.GetCityTaxRate(Cus.CustomerId, Com.CompanyId);
                if (GetCityTaxList.Count > 0)
                {
                    foreach (var item1 in GetCityTaxList)
                    {
                        AgreementTax = item1.Rate;
                        ServiceTax = item1.Rate;
                    }
                }
                else
                {
                    Guid CustomerId = new Guid();
                    if (Cus != null)
                    {
                        CustomerId = Cus.CustomerId;
                    }
                    var GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(Com.CompanyId, CustomerId);
                    if (GetSalesTax != null)
                    {
                        AgreementTax = Convert.ToDouble(GetSalesTax.Value);
                        ServiceTax = Convert.ToDouble(GetSalesTax.Value);
                    }
                }
                #region Invoice
                Invoice invoice = new Invoice();
                CustomerProratedBill cpb = new CustomerProratedBill();
                cpb = _Util.Facade.InvoiceFacade.GetCusProratedBillByCustomerId(Cus.CustomerId);
                List<InvoiceDetail> invoiceList = new List<InvoiceDetail>();
                string invDiagram = "";
                if (!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true)
                {
                    invoice = _Util.Facade.InvoiceFacade.GetByInvoiceId(invoiceid);
                    if (invoice != null)
                    {
                        invDiagram = invoice.InvoiceContractDiagram;
                        invoiceList = _Util.Facade.InvoiceFacade.GetInvoiceDetialsListByInvoiceId(invoice.InvoiceId);
                    }
                }
                #endregion
                #region Estimator
                Employee userInfo = new Employee();
                if (userid != Guid.Empty)
                {
                    userInfo = _Util.Facade.EmployeeFacade.GetEmployeeByEmployeeId(userid);
                }
                CreateEstimator createest = new CreateEstimator();
                if (isestimator && estid > 0)
                {
                    CreateEstimator ca = new CreateEstimator();
                    ca.EstimatorSetting = new EstimatorSetting();
                    ca.Company = Com;

                    ca.Estimator = _Util.Facade.EstimatorFacade.GetById(estid);
                    ca._EstimatorPDFFilter = _Util.Facade.EstimatorFacade.GetEstimatorPdfFilterByComIdCusIdUserId(Com.CompanyId, userid, ca.Estimator.CustomerId);
                    ca.estimatorDetails = _Util.Facade.EstimatorFacade.GetEstimatorDetailListByEstimatorId(ca.Estimator.EstimatorId);
                    ca.estimatorServices = _Util.Facade.EstimatorFacade.GetEstimatorServicesByEstimatorId(ca.Estimator.EstimatorId);
                    if (ca.Estimator == null || ca.Estimator.CompanyId != CompanyId)
                    {
                        return null;
                    }
                    if ((ca.estimatorDetails == null || ca.estimatorDetails.Count() == 0) && (ca.estimatorServices == null || ca.estimatorServices.Count() == 0))
                    {
                        return null;
                    }
                    Customer tempCUstomer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(ca.Estimator.CustomerId);
                    if (tempCUstomer == null)
                    {
                        return null;
                    }

                    CreateEstimator processedModel = GetEstimatorModelById(ca.Estimator, ca.estimatorDetails, ca.estimatorServices, Com, tempCUstomer, ca._EstimatorPDFFilter, CompanyId);
                    Estimator estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(ca.Estimator.EstimatorId);
                    if (estimator != null)
                    {
                        ViewBag.CoverLetter = estimator.CoverLetter;
                        processedModel.Estimator.CoverLetter = estimator.CoverLetter;
                        processedModel.Estimator.CoverLetterFile = estimator.CoverLetterFile;
                        processedModel.Estimator.ServicePlanType = estimator.ServicePlanType;
                        processedModel.Estimator.ServicePlanRate = estimator.ServicePlanRate;
                        processedModel.Estimator.ServicePlanAmount = estimator.ServicePlanAmount;
                        processedModel.Estimator.ServiceTaxAmount = estimator.ServiceTaxAmount;
                        processedModel.Estimator.ServiceTotalAmount = estimator.ServiceTotalAmount;
                        processedModel.Estimator.ShowServicePlan = estimator.ShowServicePlan;
                        processedModel.Estimator.ShowService = estimator.ShowService;
                        processedModel.Estimator.ServicePlanTypeName = "Service Plan";

                        SelectListItem selectListItem = _Util.Facade.LookupFacade.GetDropdownsByKey("ServicePlans").Where(x => x.Value == estimator.ServicePlanType).FirstOrDefault();
                        if (selectListItem != null)
                        {
                            processedModel.Estimator.ServicePlanTypeName = selectListItem.Text;
                        }

                    }
                    if (ca.estimatorDetails != null)
                    {
                        foreach (var item in ca.estimatorDetails)
                        {
                            Manufacturer Manufacturer = _Util.Facade.EquipmentFacade.GetManufacturerByManufacturerId(item.ManufacturerId);
                            if (Manufacturer != null)
                            {
                                item.Manufacturer = Manufacturer.Name;
                            }
                            item.CreatedDate = DateTime.Now.UTCCurrentTime();
                            ca.SubTotal = ca.SubTotal + (item.TotalPrice.HasValue ? item.TotalPrice.Value : 0);
                            item.EquipmentFile = _Util.Facade.EquipmentFileFacade.GetEquipmentFilesByEquipmentIdAndFileType(item.EquipmentId, LabelHelper.EquipmentFileType.ProfilePicture).FirstOrDefault();
                            if (item.EquipmentFile == null)
                            {
                                item.EquipmentFile = new EquipmentFile();
                            }
                        }
                    }
                    if (ca.estimatorServices != null)
                    {
                        foreach (var item in ca.estimatorServices)
                        {
                            processedModel.ServiceSubTotal += ca.ServiceSubTotal + item.Amount;
                        }
                        processedModel.TotalServiceAmount = processedModel.ServiceSubTotal + ca.ServiceTax;
                    }
                    createest = processedModel;
                    createest.eSecurityLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/eSecurity_logo.png");
                    createest.specializedLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/specialized_property_management_logo.png");
                    string EstimatorContractTerm = "";
                    if (!string.IsNullOrWhiteSpace(createest.Estimator.ContractTerm) && createest.Estimator.ContractTerm != "-1")
                    {
                        if (createest.Estimator.ContractTerm.ToLower() == "month to month")
                        {
                            EstimatorContractTerm = createest.Estimator.ContractTerm;
                        }
                        else
                        {
                            EstimatorContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(createest.Estimator.ContractTerm) * 12))).ToString() + " month";
                        }

                    }
                    createest.EstimatorContractTerm = EstimatorContractTerm;
                }
                #endregion
                var CustomEquipmentList = new List<Equipment>();
                if (firstpage == true || recreate == true)
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }
                else
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }

                var CustomServiceList = new List<Equipment>();
                if (firstpage == true || recreate == true)
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (CustomServiceList.Count > 0)
                    {
                        foreach (var item in CustomServiceList)
                        {
                            EquipmentTotalPrice += item.Total;
                            ServiceTotalPrice += item.Total;
                            MonthlyServiceFeeTotal += item.Total;
                        }
                    }
                }
                else
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (CustomServiceList.Count > 0)
                    {
                        foreach (var item in CustomServiceList)
                        {
                            EquipmentTotalPrice += item.Total;
                            ServiceTotalPrice += item.Total;
                            MonthlyServiceFeeTotal += item.Total;
                        }
                    }
                }
                var NotARBEnabledServiceList = new List<Equipment>();
                if (firstpage == true || recreate == true || commercial == true)
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId, firstpage, ticketid);
                    if (NotARBEnabledServiceList.Count > 0)
                    {
                        foreach (var item in NotARBEnabledServiceList)
                        {
                            NotARBEnabledTotalPrice += item.Total;
                        }
                    }
                }
                else
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListFromService(Cus.CustomerId, CompanyId);
                    if (NotARBEnabledServiceList.Count > 0)
                    {
                        foreach (var item in NotARBEnabledServiceList)
                        {
                            NotARBEnabledTotalPrice += item.Total;
                        }
                    }
                }
                #region Advance Monitoring Service Month

                PaymentInfoCustomer paycus = new PaymentInfoCustomer();
                paycus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayForService(Cus.CustomerId);
                int ForMonth = 1;
                if (paycus != null && paycus.ForMonths.HasValue)
                {
                    ForMonth = paycus.ForMonths.Value;
                }
                if (ForMonth > 1)
                {
                    AdvanceServiceFeeTotal = MonthlyServiceFeeTotal * (ForMonth - 1);

                }
                #endregion
                Cus.MonthlyMonitoringFee = Convert.ToString(ServiceTotalPrice);
                TotalMonthlyMonitoring = MonthlyServiceFeeTotal;
                NewSubTotal = TotalMonthlyMonitoring + UpfrontAddOnTotal;

                if (CustomServiceList.Count > 0 || CustomEquipmentList.Count > 0)
                {
                    if (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue)
                    {
                        AgreementSubtotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                        NewSubTotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                    }
                    else
                    {
                        AgreementSubtotal = EquipmentTotalPrice;
                        NewSubTotal = EquipmentTotalPrice;
                    }
                }
                if (IsNonConfirming && NonConfirmingFee > 0)
                {
                    AgreementSubtotal = AgreementSubtotal + NonConfirmingFee;
                    NewSubTotal = NewSubTotal + NonConfirmingFee;
                }

                if (AgreementTax != 0.0)
                {
                    taxtotal = (AgreementSubtotal / 100) * AgreementTax;
                    Model.TaxTotal = taxtotal;
                    AgreementTotal = AgreementSubtotal + taxtotal;
                    TotalDueAtSigning = NewSubTotal + taxtotal;
                }
                else
                {
                    Model.TaxTotal = 0.0;
                    AgreementTotal = AgreementSubtotal;
                    TotalDueAtSigning = NewSubTotal;
                }


                /// "mayur" activation fee total change 
                if (ServiceTax != 0.0)
                {
                    taxtotal = (ServiceTotalPrice / 100) * ServiceTax;
                    // MonthlyServiceFeeTotal = ServiceTotalPrice + taxtotal;
                }
                else
                {
                }
                /////////////////////////////////
                
                var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(Cus.CustomerId, CompanyId);
                if (PackageCustomerDetails != null)
                {
                    
                    InstallTypeName = _Util.Facade.PackageFacade.SmartInstallTypeNameByInstallTypeId(Convert.ToInt32(PackageCustomerDetails.SmartInstallTypeId));
                    if (string.IsNullOrWhiteSpace(InstallTypeName))
                    {
                        InstallTypeName = "New Install";
                    }
                    SmartPackageEquipmentServiceList = _Util.Facade.PackageFacade.GetAllSmartPackageIncludeEquipmentByPackageIdAndCompanyId(PackageCustomerDetails.PackageId, CompanyId);
                }
                var PaymentDetails = _Util.Facade.PaymentInfoFacade.GetAllPaymentInfoByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId).Where(m => m.PayFor == "First Month").FirstOrDefault();
                var emercontact = _Util.Facade.EmergencyContactFacade.GetAllEmergencyContactByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId);
                string overviewheader = "";
                string overviewdata = "";
                if (emercontact != null && emercontact.Count > 0)
                {
                    overviewheader = @"<table style='border-collapse:collapse; width:100%;font-family:Arial;table-layout:fixed;font-size:13px;margin-top:20px;'>
                                                          <thread>
                                            <tr style='height:30px;'>
                                  <th style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>Name</th>
   
                                   <th style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'> RelationShip </th>
    
                                    <th style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'> Phone </th>
     
                                     <th style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'> Type </th>
      
                                  </tr>
                                            </thread>
                                            <tbody>
                                            {0}
                                            </tbody>
                                        </table>";
                    foreach (var item in emercontact)
                    {
                        overviewdata += @"<tr style='height: 30px;'>
                                  <td style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>" + item.FirstName + " " + item.LastName + @"</td>
   
                                   <td style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>" + item.RelationShip + @"</td>
    
                                    <td style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>" + item.Phone + @"</td>
     
                                     <td style ='border: 2px solid #000; font-weight:bold; width:45%; padding-left:10px;'>" + item.PhoneType + @"</td>
      
                                  </tr> ";
                    }
                }
                var agreementPayment = _Util.Facade.PaymentInfoFacade.GetLeadAgreementPaymentInfoByCustomerId(Cus.CustomerId);
                string paymentoverviewheader = "";
                string paymentoverviewdata = "";
                if (agreementPayment != null && agreementPayment.Count > 0)
                {
                    paymentoverviewheader = "<table style='border-collapse:collapse; width:100%; font-family:Arial; table-layout:fixed; font-size:13px;'>{0}</table>";
                    foreach (var pay in agreementPayment)
                    {
                        var sppay = pay.Type.Split('_');
                        if (sppay.Length > 0)
                        {
                            if (sppay[0] == "CC")
                            {
                                var cardNumber = pay.CardNumber.Replace('-', ' ').Replace(" ", "");
                                if (cardNumber.Length == 16)
                                {
                                    paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(12, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                                }
                                else
                                {
                                    paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(11, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                                }
                            }
                            else if (sppay[0] == "ACH" && pay.AcountNo.Length > 4)
                            {
                                paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Type: " + pay.BankAccountType + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Routing No: " + pay.RoutingNo + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account No: " + string.Concat("".PadLeft(pay.AcountNo.Length - 4, '*'), pay.AcountNo.Substring(pay.AcountNo.Length - 4)) + @"</td>
                                                        </tr>";
                            }
                        }
                    }
                }

                var CustomerAddress = AddressHelper.MakeAddress(Cus);
                var CustomerInstallAddress = AddressHelper.MakeInstallAddress(Cus);
                CustomerSignature cs = new CustomerSignature();
                GlobalSetting glbs = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CompanyId, "CompanySignature");
                string cusSignature = "";
                string cussignDate = "";
                DateTime cussignDateVal = new DateTime();
                if (firstpage == true || recreate == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "First Page");
                }
                else if (commercial == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Commercial");
                }
                else if (isinvoice == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimate");
                }
                else if (isestimator == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimator");
                }
                else if (recreate == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Recreate");
                }
                else if (Cus != null && agreementtempid != 0)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Agreement File");
                }
                else
                {
                    cusSignature = Cus.Singature;
                    if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                    {
                        cussignDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                        cussignDateVal = Cus.CustomerSignatureDate.Value.UTCToClientTime();
                    }

                }
                if (cs != null && (agreementtempid != 0 || firstpage == true || recreate == true || commercial == true))
                {
                    cusSignature = cs.Signature;
                    if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                    {
                        cussignDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                        cussignDateVal = cs.CreatedDate.UTCToClientTime();
                    }

                }
                #region For Promo Pyment Method
                List<PaymentInfoCustomer> paycusList = new List<PaymentInfoCustomer>();
                PaymentProfileCustomer paymentProfile = new PaymentProfileCustomer();
                paycusList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(Cus.CustomerId);
                if (paycusList != null && paycusList.Count > 0)
                {
                    foreach (var item in paycusList)
                    {
                        paymentProfile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(item.PaymentInfoId);
                        if (paymentProfile != null && paymentProfile.Type == LabelHelper.PaymentMethod.Promo)
                        {
                            if (item.Payfor == "Activation Fee")
                            {
                                NonConfirmingFee = 0.0;

                                if (PackageCustomer != null)
                                {
                                    PackageCustomer.ActivationFee = 0.0;
                                }
                                NewSubTotal = NewSubTotal - (PackageCustomer.AdditionFee + NonConfirmingFee);
                            }
                            else if (item.Payfor == "Equipment")
                            {
                                IsUpfrontPromo = true;
                                NewSubTotal = NewSubTotal - UpfrontAddOnTotal;
                            }
                            else if (item.Payfor == "Service")
                            {
                                NewSubTotal = NewSubTotal - TotalMonthlyMonitoring;
                                IsServicePromo = true;

                            }


                        }

                    }

                }
                #endregion

                #region LeadSource
                string LeadSource = "";
                Lookup leadsource = _Util.Facade.LookupFacade.GetLookupByKeyAndValueAndCompanyId("LeadSource", Cus.LeadSource, Com.CompanyId);
                LeadSource = leadsource != null && !string.IsNullOrWhiteSpace(leadsource.DisplayText) && leadsource.DataValue != "-1" ? leadsource.DisplayText : "";
                #endregion

                Model = new InstallationAgreementModel()
                {
                    CSIDNumber = Cus.Id,
                    LeadSource = LeadSource,
                    IsNonConfirming = IsNonConfirming,
                    NonConfirmingFee = NonConfirmingFee,
                    InstallDate = Cus.InstallDate != null ? Convert.ToDateTime(Cus.InstallDate).ToShortDateString() : "",
                    OriginalContactDate = (Cus.OriginalContactDate != null && Cus.OriginalContactDate.HasValue) ? Cus.OriginalContactDate.Value : new DateTime(),
                    AccountType = Cus.Type,
                    ContractType = CusExd != null && !string.IsNullOrWhiteSpace(CusExd.ContractType) ? CusExd.ContractType : "",
                    Referredby = Cus.ReferringCustomer != Guid.Empty ? _Util.Facade.CustomerFacade.GetCustomerNameById(Cus.ReferringCustomer) : "",
                    SocialSecurityNumber = Cus.SSN,
                    //Owner2ndPhone = Cus.SecondaryPhone,
                    Owner2ndPhone = Cus.PrimaryPhone,
                    InitialStreet = Cus.Street,
                    InitialCity = Cus.City,
                    InitialCountry = Cus.County,
                    InitialState = Cus.State,
                    InitialZip = Cus.ZipCode,
                    InitialApt = Cus.Appartment,
                    BillingCity = Cus.CityPrevious,
                    BillingState = Cus.StatePrevious,
                    BillingZip = Cus.ZipCodePrevious,
                    BillingCountry = Cus.CountryPrevious,
                    BillingStreet = Cus.StreetPrevious,
                    InstallTypeName = InstallTypeName,
                    SmartPackageEquipmentServiceList = SmartPackageEquipmentServiceList,
                    UpfrontAddOnTotal = UpfrontAddOnTotal,
                    UpfrontAddOnTotalPromo = UpfrontAddOnTotalPromo,
                    IsUpfrontPromo = IsUpfrontPromo,
                    IsServicePromo = IsServicePromo,
                    MonthlyServiceFeeTotal = MonthlyServiceFeeTotal,
                    TotalMonthlyMonitoring = TotalMonthlyMonitoring,
                    NewSubTotal = NewSubTotal,
                    TotalDueAtSigning = TotalDueAtSigning,
                    PaymentDetails = PaymentDetails != null ? PaymentDetails : new PaymentInfo(),
                    DisplayName = Cus.DisplayName,
                    BillingAddress = CustomerAddress,
                    OwnerAddress = CustomerAddress,
                    InstallAddress = CustomerInstallAddress,
                    OwnerEmail = Cus.EmailAddress,
                    //OwnerPhone = Cus.PrimaryPhone,
                    OwnerPhone = Cus.CellNo,
                    OwnerName = Cus.FirstName + " " + Cus.LastName,
                    FirstName = Cus.FirstName,
                    LastName = Cus.LastName,
                    EmergencyContactList = _Util.Facade.EmergencyContactFacade.GetAllEmergencyContactByCustomerIdAndCompanyId(Cus.CustomerId, CompanyId),
                    CompanyName = Com.CompanyName,
                    CompanySate = string.Format("{0}, {1} {2}", Com.City, Com.State, Com.ZipCode),
                    CompanyStreet = Com.Street,
                    CompanyWebsite = Com.Website,
                    SubscribedMonths = ContractTerm,
                    SubscribedMonthsInWord = ContractTermInWord,
                    RenewalMonths = Cus.RenewalTerm.HasValue ? Cus.RenewalTerm.Value : 0,
                    Password = Cus.Passcode,
                    DateOfTransaction = FixDate.UTCToClientTime(),
                    CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyEmailLogoByCompanyId(CompanyId),
                    EquipmentList = CustomEquipmentList.ToList(),
                    ServiceList = CustomServiceList.ToList(),
                    ActivationFee = (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue) ? PackageCustomer.ActivationFee.Value : 0,
                    BusinessName = Cus.BusinessName,
                    MonthlyMonitoringFee = Cus.MonthlyMonitoringFee,
                    EffectiveDate = FixDate.UTCToClientTime(),
                    CustomerSignature = cusSignature,
                    CustomerSignatureStringDate = cussignDate,
                    CustomerSignatureStringDateVal = cussignDateVal,
                    //ContractCreatedDateVal = contractCreatedDateVal,
                    ContractCreatedDateVal = (CusExd.ContractStartDate != null && CusExd.ContractStartDate.HasValue) ? CusExd.ContractStartDate.Value.ToShortDateString() : DateTime.Now.ToShortDateString(),
                    CustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByCompanyIdAndCustomerId1(CompanyId, Cus.CustomerId),
                    Subtotal = AgreementSubtotal,
                    Tax = AgreementTax,
                    TaxTotal = taxtotal,
                    Total = AgreementTotal,
                    EContractId = Cus.Id,
                    ListAgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(Cus.CustomerId),
                    SalesRepresentative = !string.IsNullOrEmpty(Cus.Soldby) ? _Util.Facade.EmployeeFacade.GetEmployeeNumByEmployeeId(new Guid(Cus.Soldby)).ToString() : "",
                    TotalPayments = (!string.IsNullOrWhiteSpace(Cus.MonthlyMonitoringFee) ? Convert.ToDouble(Cus.MonthlyMonitoringFee) : 1) * Convert.ToDouble(ContractTerm),
                    SingleCustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetIpAndUserAgentByCustomerIdAndCompanyId(CompanyId, Cus.CustomerId),
                    ListContactEmergency = string.Format(overviewheader, overviewdata),
                    ListPaymentInfo = string.Format(paymentoverviewheader, paymentoverviewdata),
                    DoingBusinessAs = Cus.DBA,
                    DispalyName = Cus.DisplayName,
                    CompanyPhone = Com.Phone,
                    FirstPage = firstpage,
                    Commercial = commercial,
                    IsInvoice = isinvoice,
                    InvoiceId = invoiceid,
                    InvoiceDiagram = invDiagram,
                    InvoiceList = invoiceList,
                    IsEstimator = isestimator,
                    createEst = createest,
                    userInfo = userInfo,
                    inv = invoice,
                    NotARBEnabledServiceList = NotARBEnabledServiceList.ToList(),
                    NotARBEnabledTotalPrice = NotARBEnabledTotalPrice,
                    ProratedAmout = cpb != null ? Math.Round(cpb.Amount, 2, MidpointRounding.AwayFromZero) : 0.0,
                    FinancedAmout = Cus != null && Cus.FinancedAmount != null ? Math.Round(Cus.FinancedAmount.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                    MonthlyFinanceRate = CusExd != null && CusExd.MonthlyFinanceRate != null ? Math.Round(CusExd.MonthlyFinanceRate.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                    AdvanceServiceFeeTotal = AdvanceServiceFeeTotal
                };
                if (agreementtempid != 0)
                {
                    if (cs != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(cs.Signature))
                    {
                        Model.CompanySignature = glbs.Value;
                        if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                        {
                            Model.CompanySignatureDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                        }
                    }
                }
                else if (firstpage == true || recreate == true || commercial == true)
                {
                    if (glbs != null && !string.IsNullOrWhiteSpace(glbs.Value))
                    {
                        Model.CompanySignature = glbs.Value;
                        Model.CompanySignatureDate = cussignDate;
                    }
                }
                else
                {
                    if (Cus != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(Cus.Singature))
                    {
                        Model.CompanySignature = glbs.Value;
                        if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                        {
                            Model.CompanySignatureDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                        }
                    }
                }

            }
            else
            {
                Model.CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyLogoForPDFByCompanyId(CompanyId);
            }

            //  return View(Model);
            Model.KazarLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/kazar_logo.PNG");
            ViewBag.CompanyId = Com.CompanyId.ToString();
            Model.CompanyId = Com.CompanyId.ToString();
            Model.CurrentCurrency = _Util.Facade.GlobalSettingsFacade.GetCurrentCurrencyByCompanyId(Com.CompanyId);
            string body = _Util.Facade.AgreementFacade.MakeSmartAgreementPdf(Model, agreementtempid);
            ViewBag.Body = body;
            ViewAsPdf actionpdf = new Rotativa.ViewAsPdf("SmartInstallationAgreement")
            {
                PageSize = Rotativa.Options.Size.A4,
                PageOrientation = Orientation.Portrait,
                PageMargins = new Margins(10, 2, 10, 3)
            };
            byte[] applicationPDFData = actionpdf.BuildPdf(ControllerContext);
            return File(applicationPDFData, System.Net.Mime.MediaTypeNames.Application.Octet, leadid + "__AgreementDocument.pdf");
        }

        [Authorize]
        [HttpPost]
        public JsonResult SmartLeadConvertedToCustomerPDFMail_v2(int? leadid, string PrefferedEmail, bool? IsRecreate, int? agreementtempid, bool? firstpage, int? ticketid, bool? recreate, bool? isinvoice, string invoiceid, bool? isestimator, int? estid, Guid? userid, bool? commercial)
        {
            List<string> ValidPrefferedEmail = new List<string>();
            if (!string.IsNullOrWhiteSpace(PrefferedEmail))
            {
                string[] Emailadd = PrefferedEmail.Split(';');
                if (Emailadd != null)
                {
                    foreach (var item in Emailadd)
                    {
                        if (item.IsValidEmailAddress())
                        {
                            ValidPrefferedEmail.Add(item);
                        }
                    }
                }
                if (ValidPrefferedEmail.Count == 0)
                {
                    return Json(new { result = false, message = "Invalid email address." });
                }

            }
            string from = "";
            string file = "";
            DateTime FixDate = DateTime.Now.UTCCurrentTime();
            //int idlead = Convert.ToInt32(Lid);
            InstallationAgreementModel Model = new InstallationAgreementModel();
            Model.EmergencyContactList = new List<EmergencyContact>();
            Model.ListAgreementAnswer = new List<AgreementAnswer>();
            Model.EquipmentList = new List<Equipment>();
            Model.CustomerAgreement = new List<CustomerAgreement>();
            Model.SingleCustomerAgreement = new CustomerAgreement();
            var taxtotal = 0.0;
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool AgreementResult = false;
            //var ActivationfeeValue = 0.0;
            //var IsActivationFee = _Util.Facade.ActivationFeeFacade.GetActivationFeeByCompanyId(CurrentUser.CompanyId.Value);
            //if (IsActivationFee != null)
            //{
            //    ActivationfeeValue = IsActivationFee.Fee;
            //}
            Customer Cus = new Customer();
            CustomerExtended CusExd = new CustomerExtended();
            Company Com = new Company();
            if (leadid.HasValue)
            {
                if (!_Util.Facade.CustomerFacade.CustomerIsInCompany(leadid.Value, CurrentUser.CompanyId.Value))
                {
                    return null;
                }
                Cus = _Util.Facade.CustomerFacade.GetCustomersById(leadid.Value);
                if (Cus != null)
                {
                    CusExd = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(Cus.CustomerId);
                }
                Com = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CurrentUser.CompanyId.Value);

                string ContractTerm = "";
                string ContractTermInWord = "";
                if (!string.IsNullOrWhiteSpace(Cus.ContractTeam) && Cus.ContractTeam != "-1")
                {
                    if (Cus.ContractTeam.ToLower() == "month to month")
                    {
                        ContractTerm = Cus.ContractTeam;
                        ContractTermInWord = Cus.ContractTeam;
                    }
                    else
                    {
                        ContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))).ToString();
                        ContractTermInWord = NumberToWords((Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))));
                    }

                }

                #region Sold by change
                //Person who sends the mail to Customer will be counted as sold by
                //Cus.Soldby = CurrentUser.UserId.ToString();
                _Util.Facade.CustomerFacade.UpdateCustomer(Cus);
                #endregion

                var UpfrontAddOnTotal = 0.0;
                var UpfrontAddOnTotalPromo = 0.0;
                bool IsUpfrontPromo = false;
                bool IsServicePromo = false;
                var MonthlyServiceFeeTotal = 0.0;
                var TotalMonthlyMonitoring = 0.0;
                var NewSubTotal = 0.0;
                var TotalDueAtSigning = 0.0;
                var EquipmentTotalPrice = 0.0;
                var ServiceTotalPrice = 0.0;
                var AgreementSubtotal = 0.0;
                var AgreementTotal = 0.0;
                double ServiceTax = 0.0;
                var AgreementTax = 0.0;
                var NotARBEnabledTotalPrice = 0.0;
                string InstallTypeName = "";
                bool IsNonConfirming = false;
                var NonConfirmingFee = 0.0;
                var AdvanceServiceFeeTotal = 0.0;
                string contractCreatedDateVal = "";
                if (CusExd.ContractCreatedDate != null)
                {
                    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.UTCToClientTime().ToString("M/d/yy");
                }
                else
                {
                    CusExd.ContractCreatedDate = DateTime.UtcNow;
                    _Util.Facade.CustomerFacade.UpdateCustomerExtended(CusExd);
                    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.UTCToClientTime().ToString("M/d/yy");
                }
                if (Cus.CreditScoreValue == null)
                {
                    Cus.CreditScoreValue = 0;
                }
                var PackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(Cus.CustomerId);
                if (PackageCustomer != null && PackageCustomer.NonConforming && PackageCustomer.NonConformingFee > 0 && (Cus.CreditScoreValue < PackageCustomer.MinCredit || Cus.CreditScoreValue > PackageCustomer.MaxCredit))
                {
                    IsNonConfirming = true;
                    NonConfirmingFee = PackageCustomer.NonConformingFee.Value;
                }
                var SmartPackageEquipmentServiceList = new List<SmartPackageEquipmentService>();
                var GetCityTaxList = _Util.Facade.CompanyBranchFacade.GetCityTaxRate(Cus.CustomerId, Com.CompanyId);
                if (GetCityTaxList.Count > 0)
                {
                    foreach (var item1 in GetCityTaxList)
                    {
                        AgreementTax = item1.Rate;
                        ServiceTax = item1.Rate;
                    }
                }
                else
                {
                    Guid CustomerId = new Guid();
                    if (Cus != null)
                    {
                        CustomerId = Cus.CustomerId;
                    }
                    var GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(Com.CompanyId, CustomerId);
                    if (GetSalesTax != null)
                    {
                        AgreementTax = Convert.ToDouble(GetSalesTax.Value);
                        ServiceTax = Convert.ToDouble(GetSalesTax.Value);
                    }
                }
                #region Invoice
                Invoice invoice = new Invoice();
                CustomerProratedBill cpb = new CustomerProratedBill();
                cpb = _Util.Facade.InvoiceFacade.GetCusProratedBillByCustomerId(Cus.CustomerId);
                List<InvoiceDetail> invoiceList = new List<InvoiceDetail>();
                string invDiagram = "";
                if (!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true)
                {
                    invoice = _Util.Facade.InvoiceFacade.GetByInvoiceId(invoiceid);
                    if (invoice != null)
                    {
                        invDiagram = invoice.InvoiceContractDiagram;
                        invoiceList = _Util.Facade.InvoiceFacade.GetInvoiceDetialsListByInvoiceId(invoice.InvoiceId);
                    }
                }
                #endregion
                #region Estimator
                Employee userInfo = new Employee();
                if (userid != Guid.Empty)
                {
                    userInfo = _Util.Facade.EmployeeFacade.GetEmployeeByEmployeeId(userid.Value);
                }
                CreateEstimator createest = new CreateEstimator();
                if (isestimator.Value && estid > 0)
                {
                    CreateEstimator ca = new CreateEstimator();
                    ca.EstimatorSetting = new EstimatorSetting();
                    ca.Company = Com;

                    ca.Estimator = _Util.Facade.EstimatorFacade.GetById(estid.Value);
                    ca._EstimatorPDFFilter = _Util.Facade.EstimatorFacade.GetEstimatorPdfFilterByComIdCusIdUserId(Com.CompanyId, userid.Value, ca.Estimator.CustomerId);
                    ca.estimatorDetails = _Util.Facade.EstimatorFacade.GetEstimatorDetailListByEstimatorId(ca.Estimator.EstimatorId);
                    ca.estimatorServices = _Util.Facade.EstimatorFacade.GetEstimatorServicesByEstimatorId(ca.Estimator.EstimatorId);
                    if (ca.Estimator == null || ca.Estimator.CompanyId != Com.CompanyId)
                    {
                        return null;
                    }
                    if ((ca.estimatorDetails == null || ca.estimatorDetails.Count() == 0) && (ca.estimatorServices == null || ca.estimatorServices.Count() == 0))
                    {
                        return null;
                    }
                    Customer tempCUstomer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(ca.Estimator.CustomerId);
                    if (tempCUstomer == null)
                    {
                        return null;
                    }

                    CreateEstimator processedModel = GetEstimatorModelById(ca.Estimator, ca.estimatorDetails, ca.estimatorServices, Com, tempCUstomer, ca._EstimatorPDFFilter, Com.CompanyId);
                    Estimator estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(ca.Estimator.EstimatorId);
                    if (estimator != null)
                    {
                        ViewBag.CoverLetter = estimator.CoverLetter;
                        processedModel.Estimator.CoverLetter = estimator.CoverLetter;
                        processedModel.Estimator.CoverLetterFile = estimator.CoverLetterFile;
                        processedModel.Estimator.ServicePlanType = estimator.ServicePlanType;
                        processedModel.Estimator.ServicePlanRate = estimator.ServicePlanRate;
                        processedModel.Estimator.ServicePlanAmount = estimator.ServicePlanAmount;
                        processedModel.Estimator.ServiceTaxAmount = estimator.ServiceTaxAmount;
                        processedModel.Estimator.ServiceTotalAmount = estimator.ServiceTotalAmount;
                        processedModel.Estimator.ShowServicePlan = estimator.ShowServicePlan;
                        processedModel.Estimator.ShowService = estimator.ShowService;
                        processedModel.Estimator.ServicePlanTypeName = "Service Plan";

                        SelectListItem selectListItem = _Util.Facade.LookupFacade.GetDropdownsByKey("ServicePlans").Where(x => x.Value == estimator.ServicePlanType).FirstOrDefault();
                        if (selectListItem != null)
                        {
                            processedModel.Estimator.ServicePlanTypeName = selectListItem.Text;
                        }

                    }
                    if (ca.estimatorDetails != null)
                    {
                        foreach (var item in ca.estimatorDetails)
                        {
                            Manufacturer Manufacturer = _Util.Facade.EquipmentFacade.GetManufacturerByManufacturerId(item.ManufacturerId);
                            if (Manufacturer != null)
                            {
                                item.Manufacturer = Manufacturer.Name;
                            }
                            item.CreatedDate = DateTime.Now.UTCCurrentTime();
                            ca.SubTotal = ca.SubTotal + (item.TotalPrice.HasValue ? item.TotalPrice.Value : 0);
                            item.EquipmentFile = _Util.Facade.EquipmentFileFacade.GetEquipmentFilesByEquipmentIdAndFileType(item.EquipmentId, LabelHelper.EquipmentFileType.ProfilePicture).FirstOrDefault();
                            if (item.EquipmentFile == null)
                            {
                                item.EquipmentFile = new EquipmentFile();
                            }
                        }
                    }
                    if (ca.estimatorServices != null)
                    {
                        foreach (var item in ca.estimatorServices)
                        {
                            processedModel.ServiceSubTotal += ca.ServiceSubTotal + item.Amount;
                        }
                        processedModel.TotalServiceAmount = processedModel.ServiceSubTotal + ca.ServiceTax;
                    }
                    createest = processedModel;
                    createest.eSecurityLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/eSecurity_logo.png");
                    createest.specializedLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/specialized_property_management_logo.png");
                    string EstimatorContractTerm = "";
                    if (!string.IsNullOrWhiteSpace(createest.Estimator.ContractTerm) && createest.Estimator.ContractTerm != "-1")
                    {
                        if (createest.Estimator.ContractTerm.ToLower() == "month to month")
                        {
                            EstimatorContractTerm = createest.Estimator.ContractTerm;
                        }
                        else
                        {
                            EstimatorContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(createest.Estimator.ContractTerm) * 12))).ToString() + " month";
                        }

                    }
                    createest.EstimatorContractTerm = EstimatorContractTerm;
                }
                #endregion
                var CustomEquipmentList = new List<Equipment>();
                if (firstpage == true || recreate == true)
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }
                else
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }
                var CustomServiceList = new List<Equipment>();
                if (firstpage == true || recreate == true)
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (CustomServiceList.Count > 0)
                    {
                        foreach (var item in CustomServiceList)
                        {
                            EquipmentTotalPrice += item.Total;
                            ServiceTotalPrice += item.Total;
                            MonthlyServiceFeeTotal += item.Total;
                        }
                    }
                }
                else
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (CustomServiceList.Count > 0)
                    {
                        foreach (var item in CustomServiceList)
                        {
                            EquipmentTotalPrice += item.Total;
                            ServiceTotalPrice += item.Total;
                            MonthlyServiceFeeTotal += item.Total;
                        }
                    }
                }
                var NotARBEnabledServiceList = new List<Equipment>();
                if (firstpage == true || recreate == true || commercial == true)
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (NotARBEnabledServiceList.Count > 0)
                    {
                        foreach (var item in NotARBEnabledServiceList)
                        {
                            NotARBEnabledTotalPrice += item.Total;
                        }
                    }
                }
                else
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListFromService(Cus.CustomerId, Com.CompanyId);
                    if (NotARBEnabledServiceList.Count > 0)
                    {
                        foreach (var item in NotARBEnabledServiceList)
                        {
                            NotARBEnabledTotalPrice += item.Total;
                        }
                    }
                }
                #region Advance Monitoring Service Month

                PaymentInfoCustomer paycus = new PaymentInfoCustomer();
                paycus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayForService(Cus.CustomerId);
                int ForMonth = 1;
                if (paycus != null && paycus.ForMonths.HasValue)
                {
                    ForMonth = paycus.ForMonths.Value;
                }
                if (ForMonth > 1)
                {
                    AdvanceServiceFeeTotal = MonthlyServiceFeeTotal * (ForMonth - 1);

                }
                #endregion
                Cus.MonthlyMonitoringFee = Convert.ToString(ServiceTotalPrice);
                TotalMonthlyMonitoring = MonthlyServiceFeeTotal;
                NewSubTotal = TotalMonthlyMonitoring + UpfrontAddOnTotal;
                if (CustomServiceList.Count > 0 || CustomEquipmentList.Count > 0)
                {
                    if (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue)
                    {
                        AgreementSubtotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                        NewSubTotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                    }
                    else
                    {
                        AgreementSubtotal = EquipmentTotalPrice;
                        NewSubTotal = EquipmentTotalPrice;
                    }
                }
                if (IsNonConfirming && NonConfirmingFee > 0)
                {
                    AgreementSubtotal = AgreementSubtotal + NonConfirmingFee;
                    NewSubTotal = NewSubTotal + NonConfirmingFee;
                }
                if (AgreementTax != 0.0)
                {
                    taxtotal = (AgreementSubtotal / 100) * AgreementTax;
                    Model.TaxTotal = taxtotal;
                    AgreementTotal = AgreementSubtotal + taxtotal;
                    TotalDueAtSigning = NewSubTotal + taxtotal;
                }
                else
                {
                    Model.TaxTotal = 0.0;
                    AgreementTotal = AgreementSubtotal;
                    TotalDueAtSigning = NewSubTotal;
                }
                /// "mayur" Discount change in activation
                if (ServiceTax != 0.0)
                {
                    taxtotal = (ServiceTotalPrice / 100) * ServiceTax;
                    //MonthlyServiceFeeTotal = ServiceTotalPrice + taxtotal;
                }
                else
                {
                }

                var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(Cus.CustomerId, CurrentUser.CompanyId.Value);
                if (PackageCustomerDetails != null)
                {
                    InstallTypeName = _Util.Facade.PackageFacade.SmartInstallTypeNameByInstallTypeId(Convert.ToInt32(PackageCustomerDetails.SmartInstallTypeId));
                    if (string.IsNullOrWhiteSpace(InstallTypeName))
                    {
                        InstallTypeName = "New Install";
                    }
                    SmartPackageEquipmentServiceList = _Util.Facade.PackageFacade.GetAllSmartPackageIncludeEquipmentByPackageIdAndCompanyId(PackageCustomerDetails.PackageId, CurrentUser.CompanyId.Value);
                }
                var PaymentDetails = _Util.Facade.PaymentInfoFacade.GetAllPaymentInfoByCustomerIdAndCompanyId(Cus.CustomerId, CurrentUser.CompanyId.Value).Where(m => m.PayFor == "First Month").FirstOrDefault();
                var agreementPayment = _Util.Facade.PaymentInfoFacade.GetLeadAgreementPaymentInfoByCustomerId(Cus.CustomerId);
                string paymentoverviewheader = "";
                string paymentoverviewdata = "";
                if (agreementPayment != null && agreementPayment.Count > 0)
                {
                    paymentoverviewheader = "<table style='border-collapse:collapse; width:100%; font-family:Arial; table-layout:fixed; font-size:13px;'>{0}</table>";
                    foreach (var pay in agreementPayment)
                    {
                        var sppay = pay.Type.Split('_');
                        if (sppay.Length > 0)
                        {
                            if (sppay[0] == "CC")
                            {
                                var cardNumber = pay.CardNumber.Replace('-', ' ').Replace(" ", "");
                                if (cardNumber.Length == 16)
                                {
                                    paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(12, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                                }
                                else
                                {
                                    paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(11, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                                }
                            }
                            else if (sppay[0] == "ACH")
                            {
                                paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Type: " + pay.BankAccountType + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Routing No: " + pay.RoutingNo + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account No: " + string.Concat("".PadLeft(pay.AcountNo.Length - 4, '*'), pay.AcountNo.Substring(pay.AcountNo.Length - 4)) + @"</td>
                                                        </tr>";
                            }
                        }
                    }
                }
                var CustomerAddress = AddressHelper.MakeAddress(Cus);
                var CustomerInstallAddress = AddressHelper.MakeInstallAddress(Cus);
                CustomerSignature cs = new CustomerSignature();
                GlobalSetting glbs = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CompanySignature");
                string cusSignature = "";
                string cussignDate = "";
                DateTime cussignDateVal = new DateTime();
                if (firstpage.HasValue && firstpage.Value == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "First Page");
                }
                else if (commercial.HasValue && commercial.Value == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Commercial");
                }
                else if (isinvoice.HasValue && isinvoice.Value == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimate");
                }
                else if (isestimator.HasValue && isestimator.Value == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimator");
                }
                else if (recreate.HasValue && recreate.Value == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Recreate");
                }
                else if (Cus != null && agreementtempid.HasValue && agreementtempid.Value > 0)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Agreement File");
                }
                else
                {
                    cusSignature = Cus.Singature;
                    if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                    {
                        cussignDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                        cussignDateVal = Cus.CustomerSignatureDate.Value.UTCToClientTime();
                    }

                }
                if (cs != null && (agreementtempid != 0 || (firstpage.HasValue && firstpage.Value == true) || (recreate.HasValue && recreate.Value == true) || (commercial.HasValue && commercial.Value == true)))
                {
                    cusSignature = cs.Signature;
                    if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                    {
                        cussignDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                        cussignDateVal = cs.CreatedDate.UTCToClientTime();
                    }

                }
                //(!string.IsNullOrWhiteSpace(Cus.MonthlyMonitoringFee) ? Convert.ToDouble(Cus.MonthlyMonitoringFee) : 1) * Convert.ToDouble(ContractTerm),

                Double MMR = 1;
                Double CTerm = 0;

                double.TryParse(Cus.MonthlyMonitoringFee, out MMR);
                double.TryParse(ContractTerm, out CTerm);
                //(!string.IsNullOrWhiteSpace() ? Convert.ToDouble(Cus.MonthlyMonitoringFee) : 1) * Convert.ToDouble(ContractTerm);
                Double TotalPayments = MMR * CTerm;
                #region For Promo Pyment Method
                List<PaymentInfoCustomer> paycusList = new List<PaymentInfoCustomer>();
                PaymentProfileCustomer paymentProfile = new PaymentProfileCustomer();
                paycusList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(Cus.CustomerId);
                if (paycusList != null && paycusList.Count > 0)
                {
                    foreach (var item in paycusList)
                    {
                        paymentProfile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(item.PaymentInfoId);
                        if (paymentProfile != null && paymentProfile.Type == LabelHelper.PaymentMethod.Promo)
                        {
                            if (item.Payfor == "Activation Fee")
                            {
                                NonConfirmingFee = 0.0;

                                if (PackageCustomer != null)
                                {
                                    PackageCustomer.ActivationFee = 0.0;
                                }
                                NewSubTotal = NewSubTotal - (PackageCustomer.AdditionFee + NonConfirmingFee);
                            }
                            else if (item.Payfor == "Equipment")
                            {
                                IsUpfrontPromo = true;
                                NewSubTotal = NewSubTotal - UpfrontAddOnTotal;
                            }
                            else if (item.Payfor == "Service")
                            {
                                NewSubTotal = NewSubTotal - TotalMonthlyMonitoring;
                                IsServicePromo = true;

                            }


                        }

                    }

                }
                #endregion

                #region LeadSource
                string LeadSource = "";
                Lookup leadsource = _Util.Facade.LookupFacade.GetLookupByKeyAndValueAndCompanyId("LeadSource", Cus.LeadSource, Com.CompanyId);
                LeadSource = leadsource != null && !string.IsNullOrWhiteSpace(leadsource.DisplayText) && leadsource.DataValue != "-1" ? leadsource.DisplayText : "";
                #endregion
                #region Insert Customer Agreement
                CustomerAgreement objCustomerAgreement = new CustomerAgreement()
                {
                    CompanyId = Com.CompanyId,
                    CustomerId = Cus.CustomerId,
                    IP = AppConfig.GetIP,
                    UserAgent = AppConfig.GetUserAgent,
                    Type = LabelHelper.CustomerAgreementLog.LoadAgreement,
                    AddedDate = DateTime.UtcNow
                };
                _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(objCustomerAgreement);
                #endregion
                Model = new InstallationAgreementModel()
                {
                    CSIDNumber = Cus.Id,
                    LeadSource = LeadSource,
                    IsNonConfirming = IsNonConfirming,
                    NonConfirmingFee = NonConfirmingFee,
                    InstallDate = Cus.InstallDate != null ? Convert.ToDateTime(Cus.InstallDate).ToShortDateString() : "",
                    OriginalContactDate = (Cus.OriginalContactDate != null && Cus.OriginalContactDate.HasValue) ? Cus.OriginalContactDate.Value : new DateTime(),
                    AccountType = Cus.Type,
                    ContractType = CusExd != null && !string.IsNullOrWhiteSpace(CusExd.ContractType) ? CusExd.ContractType : "",
                    Referredby = Cus.ReferringCustomer != Guid.Empty ? _Util.Facade.CustomerFacade.GetCustomerNameById(Cus.ReferringCustomer) : "",
                    SocialSecurityNumber = Cus.SSN,
                    //Owner2ndPhone = Cus.SecondaryPhone,
                    Owner2ndPhone = Cus.PrimaryPhone,
                    InitialStreet = Cus.Street,
                    InitialCity = Cus.City,
                    InitialCountry = Cus.County,
                    InitialState = Cus.State,
                    InitialZip = Cus.ZipCode,
                    InitialApt = Cus.Appartment,
                    BillingCity = Cus.CityPrevious,
                    BillingState = Cus.StatePrevious,
                    BillingZip = Cus.ZipCodePrevious,
                    BillingCountry = Cus.CountryPrevious,
                    BillingStreet = Cus.StreetPrevious,
                    InstallTypeName = InstallTypeName,
                    SmartPackageEquipmentServiceList = SmartPackageEquipmentServiceList,
                    UpfrontAddOnTotal = UpfrontAddOnTotal,
                    UpfrontAddOnTotalPromo = UpfrontAddOnTotalPromo,
                    IsUpfrontPromo = IsUpfrontPromo,
                    IsServicePromo = IsServicePromo,
                    MonthlyServiceFeeTotal = MonthlyServiceFeeTotal,
                    TotalMonthlyMonitoring = TotalMonthlyMonitoring,
                    NewSubTotal = NewSubTotal,
                    TotalDueAtSigning = TotalDueAtSigning,
                    PaymentDetails = PaymentDetails != null ? PaymentDetails : new PaymentInfo(),
                    DisplayName = Cus.DisplayName,
                    BillingAddress = CustomerAddress,
                    OwnerAddress = CustomerAddress,
                    InstallAddress = CustomerInstallAddress,
                    OwnerEmail = Cus.EmailAddress,
                    //OwnerPhone = Cus.PrimaryPhone,
                    OwnerPhone = Cus.CellNo,
                    OwnerName = Cus.FirstName + " " + Cus.LastName,
                    FirstName = Cus.FirstName,
                    LastName = Cus.LastName,
                    EmergencyContactList = _Util.Facade.EmergencyContactFacade.GetAllEmergencyContactByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId),
                    CompanyName = Com.CompanyName,
                    CompanySate = string.Format("{0}, {1} {2}", Com.City, Com.State, Com.ZipCode),
                    CompanyStreet = Com.Street,
                    CompanyWebsite = Com.Website,
                    SubscribedMonths = ContractTerm,
                    SubscribedMonthsInWord = ContractTermInWord,
                    RenewalMonths = Cus.RenewalTerm.HasValue ? Cus.RenewalTerm.Value : 0,
                    Password = Cus.Passcode,
                    DateOfTransaction = FixDate.UTCToClientTime(),
                    CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyEmailLogoByCompanyId(Com.CompanyId),
                    EquipmentList = CustomEquipmentList.ToList(),
                    ServiceList = CustomServiceList.ToList(),
                    ActivationFee = (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue) ? PackageCustomer.ActivationFee.Value : 0,
                    BusinessName = Cus.BusinessName,
                    MonthlyMonitoringFee = Cus.MonthlyMonitoringFee,
                    EffectiveDate = FixDate.UTCToClientTime(),
                    CustomerSignature = cusSignature,
                    CustomerSignatureStringDate = cussignDate,
                    CustomerSignatureStringDateVal = cussignDateVal,
                    //ContractCreatedDateVal = contractCreatedDateVal,
                    ContractCreatedDateVal = (CusExd.ContractStartDate != null && CusExd.ContractStartDate.HasValue) ? CusExd.ContractStartDate.Value.ToShortDateString() : DateTime.Now.ToShortDateString(),
                    CustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByCompanyIdAndCustomerId1(Com.CompanyId, Cus.CustomerId),
                    Subtotal = AgreementSubtotal,
                    Tax = AgreementTax,
                    TaxTotal = taxtotal,
                    Total = AgreementTotal,
                    EContractId = Cus.Id,
                    ListAgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(Cus.CustomerId),
                    SalesRepresentative = !string.IsNullOrEmpty(Cus.Soldby) ? _Util.Facade.EmployeeFacade.GetEmployeeNumByEmployeeId(new Guid(Cus.Soldby)).ToString() : "",
                    TotalPayments = TotalPayments,
                    SingleCustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetIpAndUserAgentByCustomerIdAndCompanyId(Com.CompanyId, Cus.CustomerId),
                    ListContactEmergency = string.Format(paymentoverviewheader, paymentoverviewdata),
                    ListPaymentInfo = string.Format(paymentoverviewheader, paymentoverviewdata),
                    DoingBusinessAs = Cus.DBA,
                    DispalyName = Cus.DisplayName,
                    CompanyPhone = Com.Phone,
                    FirstPage = firstpage.HasValue ? firstpage.Value : false,
                    Commercial = commercial.HasValue ? commercial.Value : false,
                    IsInvoice = isinvoice.Value,
                    InvoiceId = invoiceid,
                    InvoiceDiagram = invDiagram,
                    InvoiceList = invoiceList,
                    IsEstimator = isestimator.HasValue ? isestimator.Value : false,
                    createEst = createest,
                    userInfo = userInfo,
                    inv = invoice,
                    NotARBEnabledServiceList = NotARBEnabledServiceList.ToList(),
                    NotARBEnabledTotalPrice = NotARBEnabledTotalPrice,
                    ProratedAmout = cpb != null ? Math.Round(cpb.Amount, 2, MidpointRounding.AwayFromZero) : 0.0,
                    FinancedAmout = Cus != null && Cus.FinancedAmount != null ? Math.Round(Cus.FinancedAmount.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                    MonthlyFinanceRate = CusExd != null && CusExd.MonthlyFinanceRate != null ? Math.Round(CusExd.MonthlyFinanceRate.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                    AdvanceServiceFeeTotal = AdvanceServiceFeeTotal
                };
                if (agreementtempid != 0)
                {
                    if (cs != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(cs.Signature))
                    {
                        Model.CompanySignature = glbs.Value;
                        if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                        {
                            Model.CompanySignatureDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                        }
                    }
                }
                else if (firstpage == true || recreate == true || commercial == true)
                {
                    if (glbs != null && !string.IsNullOrWhiteSpace(glbs.Value))
                    {
                        Model.CompanySignature = glbs.Value;
                        Model.CompanySignatureDate = cussignDate;
                    }
                }
                else
                {
                    if (Cus != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(Cus.Singature))
                    {
                        Model.CompanySignature = glbs.Value;
                        if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                        {
                            Model.CompanySignatureDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                        }
                    }
                }

                if (Model.EmergencyContactList == null)
                {
                    Model.EmergencyContactList = new List<EmergencyContact>();
                }
            }
            else
            {
                Model.CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyLogoForPDFByCompanyId(CurrentUser.CompanyId.Value);
            }

            //  return View(Model);
            Model.KazarLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/kazar_logo.PNG");
            ViewBag.CompanyId = Com.CompanyId.ToString();
            Model.CompanyId = Com.CompanyId.ToString();
            Model.CurrentCurrency = _Util.Facade.GlobalSettingsFacade.GetCurrentCurrencyByCompanyId(Com.CompanyId);

            string body = _Util.Facade.AgreementFacade.MakeSmartAgreementPdf(Model, agreementtempid.HasValue ? agreementtempid.Value : 0);
            ViewBag.Body = body;
            ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("SmartInstallationAgreement")
            {
                //FileName = "TestView.pdf",
                PageSize = Rotativa.Options.Size.A4,
                PageOrientation = Rotativa.Options.Orientation.Portrait,
                PageMargins = { Left = 1, Right = 1 },

            };
            byte[] applicationPDFData = actionPDF.BuildPdf(ControllerContext);
            Random rand = new Random();
            string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
            var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CurrentUser.CompanyId.Value).CompanyName.ReplaceSpecialChar();
            var pdftempFolderName = string.Format(filename, comname) + rand.Next().ToString() + leadid + "AgreementMail.pdf";
            string Serverfilename = FileHelper.GetFileFullPath(pdftempFolderName);
            FileHelper.SaveFile(applicationPDFData, Serverfilename);
            //var cusinfo = _Util.Facade.CustomerFacade.GetById(leadid.Value);
            bool result = false;
            string encryptedurl = DESEncryptionDecryption.EncryptPlainTextToCipherText(leadid + "#" + Cus.EmailAddress + "#" + CurrentUser.CompanyId.Value.ToString() + "#" + (IsRecreate.HasValue ? IsRecreate.Value : false) + "#" + (agreementtempid.HasValue ? agreementtempid.Value : 0) + "#" + (firstpage.HasValue ? firstpage.Value : false) + "#" + (ticketid.HasValue ? ticketid.Value : 0) + "#" + (isinvoice.HasValue ? isinvoice.Value : false) + "#" + (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : "") + "#" + (isestimator.HasValue ? isestimator.Value : false) + "#" + (estid.HasValue ? estid.Value : 0) + "#" + (userid != Guid.Empty ? userid : new Guid()) + "#" + (commercial.HasValue ? commercial.Value : false));
            //string fullurl = string.Concat(AppConfig.SiteDomain, "/Leads-Agreement/", encryptedurl);
            string fullurl = string.Concat(AppConfig.SiteDomain, "/Public/LeadsAgreementDocument/?code=", encryptedurl);

            ShortUrl ShortUrl = _Util.Facade.ShortUrlFacade.GetSortUrlByUrl(fullurl, Cus.CustomerId);
            string shortUrl = string.Concat(AppConfig.ShortSiteDomain, "/shrt/", ShortUrl.Code);
            string message = "";

            if (Cus != null)
            {
                string EmailAddress = PrefferedEmail;
                if (ValidPrefferedEmail.Count == 0)
                {
                    EmailAddress = Cus.EmailAddress;
                }
                else
                {
                    EmailAddress = string.Join(";", ValidPrefferedEmail);
                }
                if (ValidPrefferedEmail.Count > 0 || (!string.IsNullOrWhiteSpace(Cus.EmailAddress) && Cus.EmailAddress.IsValidEmailAddress()))
                {
                    result = true;
                    LeadsAggrement la = new LeadsAggrement
                    {
                        CustomerNum = Cus.DisplayName,
                        ToEmail = EmailAddress,
                        //LeadsAggrementpdf = new Attachment(Serverfilename, MediaTypeNames.Application.Octet),
                        BodyLink = shortUrl,
                        CustomerId = Cus.CustomerId.ToString(),
                        EmployeeId = CurrentUser.UserId.ToString()
                    };
                    if (IsRecreate == true)
                    {
                        from = "Recreate Agreement";
                        file = "Recreate_Agreement";
                        AgreementResult = _Util.Facade.MailFacade.EmailOnlyLeadsAggrement(la, CurrentUser.CompanyId.Value, from);
                        #region file save to customer file
                        if (result)
                        {
                            CustomerFile cfs = new CustomerFile()
                            {
                                FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                                Filename = "/" + pdftempFolderName,
                                FileId = Guid.NewGuid(),
                                FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                                Uploadeddate = DateTime.Now.UTCCurrentTime(),
                                CustomerId = Cus.CustomerId,
                                CompanyId = CurrentUser.CompanyId.Value,
                                IsActive = true,
                                CreatedBy = CurrentUser.UserId,
                                CreatedDate = DateTime.Now.UTCCurrentTime(),
                                UpdatedBy = CurrentUser.UserId,
                                UpdatedDate = DateTime.Now.UTCCurrentTime(),
                                WMStatus = LabelHelper.WatermarkStatus.Pending,
                                AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                            };
                            _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                            string logMessage = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                            base.AddUserActivityForCustomer(logMessage, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                        }
                        #endregion
                    }
                    else if (firstpage == true)
                    {
                        from = "First Page Agreement";
                        file = "FirstPage_Agreement";

                        AgreementResult = _Util.Facade.MailFacade.EmailOnlyLeadsAggrement(la, CurrentUser.CompanyId.Value, from);
                        #region file save to customer file
                        if (result)
                        {
                            CustomerFile cfs = new CustomerFile()
                            {
                                FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                                Filename = "/" + pdftempFolderName,
                                FileId = Guid.NewGuid(),
                                FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                                Uploadeddate = DateTime.Now.UTCCurrentTime(),
                                CustomerId = Cus.CustomerId,
                                CompanyId = CurrentUser.CompanyId.Value,
                                IsActive = true,
                                CreatedBy = CurrentUser.UserId,
                                CreatedDate = DateTime.Now.UTCCurrentTime(),
                                UpdatedBy = CurrentUser.UserId,
                                UpdatedDate = DateTime.Now.UTCCurrentTime(),
                                WMStatus = LabelHelper.WatermarkStatus.Pending,
                                AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                            };
                            _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                            string logMessage = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                            base.AddUserActivityForCustomer(logMessage, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                        }
                        #endregion
                    }
                    else if (CusExd.ContractType == "Commercial")
                    {
                        from = "Commercial Agreement";
                        file = "Commercial_Agreement";

                        AgreementResult = _Util.Facade.MailFacade.EmailOnlyLeadsAggrement(la, CurrentUser.CompanyId.Value, from);
                        #region file save to customer file
                        if (result)
                        {
                            CustomerFile cfs = new CustomerFile()
                            {
                                FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                                Filename = "/" + pdftempFolderName,
                                FileId = Guid.NewGuid(),
                                FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                                Uploadeddate = DateTime.Now.UTCCurrentTime(),
                                CustomerId = Cus.CustomerId,
                                CompanyId = CurrentUser.CompanyId.Value,
                                IsActive = true,
                                CreatedBy = CurrentUser.UserId,
                                CreatedDate = DateTime.Now.UTCCurrentTime(),
                                UpdatedBy = CurrentUser.UserId,
                                UpdatedDate = DateTime.Now.UTCCurrentTime(),
                                WMStatus = LabelHelper.WatermarkStatus.Pending,
                                AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                            };
                            _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                            string logMessage = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                            base.AddUserActivityForCustomer(logMessage, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                        }
                        #endregion
                    }
                    else if (CusExd.ContractType == "CommercialFire")
                    {
                        from = "Commercial Fire Agreement";
                        file = "Commercial_Fire_Agreement";

                        AgreementResult = _Util.Facade.MailFacade.EmailOnlyLeadsAggrement(la, CurrentUser.CompanyId.Value, from);
                        #region file save to customer file
                        if (result)
                        {
                            CustomerFile cfs = new CustomerFile()
                            {
                                FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                                Filename = "/" + pdftempFolderName,
                                FileId = Guid.NewGuid(),
                                FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                                Uploadeddate = DateTime.Now.UTCCurrentTime(),
                                CustomerId = Cus.CustomerId,
                                CompanyId = CurrentUser.CompanyId.Value,
                                IsActive = true,
                                CreatedBy = CurrentUser.UserId,
                                CreatedDate = DateTime.Now.UTCCurrentTime(),
                                UpdatedBy = CurrentUser.UserId,
                                UpdatedDate = DateTime.Now.UTCCurrentTime(),
                                WMStatus = LabelHelper.WatermarkStatus.Pending,
                                AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                            };
                            _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                            string logMessage = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                            base.AddUserActivityForCustomer(logMessage, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                        }
                        #endregion
                    }
                    else
                    {
                        from = "Smart Lead Agreement";
                        AgreementResult = _Util.Facade.MailFacade.EmailOnlyLeadsAggrement(la, CurrentUser.CompanyId.Value, from);
                        file = "Smart_Lead_Agreement";
                        #region file save to customer file
                        if (result)
                        {
                            CustomerFile cfs = new CustomerFile()
                            {
                                FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                                Filename = "/" + pdftempFolderName,
                                FileId = Guid.NewGuid(),
                                FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                                Uploadeddate = DateTime.Now.UTCCurrentTime(),
                                CustomerId = Cus.CustomerId,
                                CompanyId = CurrentUser.CompanyId.Value,
                                IsActive = true,
                                CreatedBy = CurrentUser.UserId,
                                CreatedDate = DateTime.Now.UTCCurrentTime(),
                                UpdatedBy = CurrentUser.UserId,
                                UpdatedDate = DateTime.Now.UTCCurrentTime(),
                                WMStatus = LabelHelper.WatermarkStatus.Pending,
                                AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                            };
                            _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                            string logMessage = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                            base.AddUserActivityForCustomer(logMessage, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                        }
                        #endregion
                    }
                    message = "Agreement sent to " + EmailAddress;
                    Customer cus2 = _Util.Facade.CustomerFacade.GetCustomerById(Cus.Id);
                    cus2.IsAgreementSend = true;
                    cus2.AgreementEmail = PrefferedEmail;
                    if (firstpage == true || recreate == true)
                    {
                        cus2.Singature = "";
                        cus2.IsContractSigned = false;
                        var objrecreate = _Util.Facade.CustomerSignatureFacade.GetRecreateCustomerSignatureByCustomerId(cus2.CustomerId);
                        if (objrecreate != null)
                        {
                            objrecreate.Signature = "";
                            _Util.Facade.CustomerSignatureFacade.UpdateCustomerSignature(objrecreate);
                        }
                        var objfirstpage = _Util.Facade.CustomerSignatureFacade.GetFirstPageCustomerSignatureByCustomerId(cus2.CustomerId);
                        if (objfirstpage != null)
                        {
                            objfirstpage.Signature = "";
                            _Util.Facade.CustomerSignatureFacade.UpdateCustomerSignature(objfirstpage);
                        }
                    }
                    _Util.Facade.CustomerFacade.UpdateCustomer(cus2);
                    if (commercial == true)
                    {
                        var objcommercial = _Util.Facade.CustomerSignatureFacade.GetCommercialCustomerSignatureByCustomerId(cus2.CustomerId);
                        if (objcommercial != null)
                        {
                            objcommercial.Signature = "";
                            _Util.Facade.CustomerSignatureFacade.UpdateCustomerSignature(objcommercial);
                        }
                    }
                    #region Agreement History
                    var cusAgrHistory = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementHistory(Cus.CustomerId, LabelHelper.CustomerAgreementHistory.AgreementSend);
                    if (cusAgrHistory == null)
                    {
                        CustomerAgreement cusAgrModel = new CustomerAgreement()
                        {
                            CompanyId = Com.CompanyId,
                            CustomerId = Cus.CustomerId,
                            IP = AppConfig.GetIP,
                            UserAgent = AppConfig.GetUserAgent,
                            Type = LabelHelper.CustomerAgreementHistory.AgreementSend,
                            AddedDate = DateTime.UtcNow
                        };
                        _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(cusAgrModel);
                    }
                    #endregion
                }
                else
                {
                    result = false;
                    message = "Invalid email address.";
                }
            }

            return Json(new { result = result, message = message });
        }


        public JsonResult SmartLeadConvertedToCustomerPDFMail(int? leadid, string PrefferedEmail, bool? IsRecreate, int? agreementtempid, bool? firstpage, int? ticketid, bool? recreate, bool? isinvoice, string invoiceid, bool? isestimator, int? estid, Guid? userid, bool? commercial, string EstimatorId)
        {
            //string EstimatorId = "";
            estid = 0;
            decimal _fileSize = 1.00m;
            WebClient webClient;
            byte[] fileBytes1;
            string Temp_FileName;

            List<string> ValidPrefferedEmail = new List<string>();
            if (!string.IsNullOrWhiteSpace(PrefferedEmail))
            {
                string[] Emailadd = PrefferedEmail.Split(';');
                if (Emailadd != null)
                {
                    foreach (var item in Emailadd)
                    {
                        if (item.IsValidEmailAddress())
                        {
                            ValidPrefferedEmail.Add(item);
                        }
                    }
                }
                if (ValidPrefferedEmail.Count == 0)
                {
                    return Json(new { result = false, message = "Invalid email address." });
                }

            }
            string from = "";
            string file = "";
            DateTime FixDate = DateTime.Now.UTCCurrentTime();
            //int idlead = Convert.ToInt32(Lid);
            InstallationAgreementModel Model = new InstallationAgreementModel();
            Model.EmergencyContactList = new List<EmergencyContact>();
            Model.ListAgreementAnswer = new List<AgreementAnswer>();
            Model.EquipmentList = new List<Equipment>();
            Model.CustomerAgreement = new List<CustomerAgreement>();
            Model.SingleCustomerAgreement = new CustomerAgreement();
            var taxtotal = 0.0;
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool AgreementResult = false;
            //var ActivationfeeValue = 0.0;
            //var IsActivationFee = _Util.Facade.ActivationFeeFacade.GetActivationFeeByCompanyId(CurrentUser.CompanyId.Value);
            //if (IsActivationFee != null)
            //{
            //    ActivationfeeValue = IsActivationFee.Fee;
            //}
            Customer Cus = new Customer();
            CustomerExtended CusExd = new CustomerExtended();
            Company Com = new Company();
            if (leadid.HasValue)
            {
                if (!_Util.Facade.CustomerFacade.CustomerIsInCompany(leadid.Value, CurrentUser.CompanyId.Value))
                {
                    return null;
                }
                Cus = _Util.Facade.CustomerFacade.GetCustomersById(leadid.Value);
                if (Cus != null)
                {
                    CusExd = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(Cus.CustomerId);
                }
                Com = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CurrentUser.CompanyId.Value);

                string ContractTerm = "";
                string ContractTermInWord = "";
                if (!string.IsNullOrWhiteSpace(Cus.ContractTeam) && Cus.ContractTeam != "-1")
                {
                    if (Cus.ContractTeam.ToLower() == "month to month")
                    {
                        ContractTerm = Cus.ContractTeam;
                        ContractTermInWord = Cus.ContractTeam;
                    }
                    else
                    {
                        ContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))).ToString();
                        ContractTermInWord = NumberToWords((Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))));
                    }

                }

                #region Sold by change
                //Person who sends the mail to Customer will be counted as sold by
                //Cus.Soldby = CurrentUser.UserId.ToString();
                if (!string.IsNullOrWhiteSpace(EstimatorId))
                {
                    Estimator estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(EstimatorId);
                    if(estimator != null)
                    {
                        #region StatusChange 

                        if (estimator.Status == LabelHelper.EstimateStatus.SentToCustomer)
                        {
                            estimator.Status = LabelHelper.EstimateStatus.ResendToCustomer;
                        }
                        else if(estimator.Status == LabelHelper.EstimatorStatus.Signed)
                        {
                            estimator.Status = LabelHelper.EstimatorStatus.Signed;
                        }
                        else if (estimator.Status == LabelHelper.EstimatorStatus.ContractSingned)
                        {
                            estimator.Status = LabelHelper.EstimateStatus.ContractSingned; 
                        }
                        else
                        {
                            estimator.Status = LabelHelper.EstimateStatus.SentToCustomer;
                        }
                        estimator.CreatedDate = DateTime.Now.UTCCurrentTime();
                        estimator.StartDate = DateTime.Now.UTCCurrentTime();
                        estimator.CompletionDate = DateTime.Now.UTCCurrentTime(); 
                        estimator.LastUpdatedDate = DateTime.Now.UTCCurrentTime();
                        _Util.Facade.EstimatorFacade.UpdateEstimator(estimator);

                        #endregion StatusChange 

                        if ( estimator.Status != LabelHelper.EstimateStatus.ContractSingned )
                        {
                            Cus.IsAgreement = false;
                            _Util.Facade.CustomerFacade.UpdateCustomer(Cus);
                        }  
                        //else if(estimator.IsApproved == true && estimator.Status == LabelHelper.EstimateStatus.ContractSingned)
                        //{
                        //    Cus.IsAgreement = true;
                        //    _Util.Facade.CustomerFacade.UpdateCustomer(Cus);
                        //}
                    } 
                }
                else
                {
                    _Util.Facade.CustomerFacade.UpdateCustomer(Cus);
                }
                
                #endregion

                var UpfrontAddOnTotal = 0.0;
                var UpfrontAddOnTotalPromo = 0.0;
                bool IsUpfrontPromo = false;
                bool IsServicePromo = false;
                var MonthlyServiceFeeTotal = 0.0;
                var TotalMonthlyMonitoring = 0.0;
                var NewSubTotal = 0.0;
                var TotalDueAtSigning = 0.0;
                var EquipmentTotalPrice = 0.0;
                var ServiceTotalPrice = 0.0;
                var AgreementSubtotal = 0.0;
                var AgreementTotal = 0.0;
                double ServiceTax = 0.0;
                var AgreementTax = 0.0;
                var NotARBEnabledTotalPrice = 0.0;
                string InstallTypeName = "";
                bool IsNonConfirming = false;
                var NonConfirmingFee = 0.0;
                var AdvanceServiceFeeTotal = 0.0;
                string contractCreatedDateVal = "";
                if (CusExd.ContractCreatedDate != null)
                {
                    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.UTCToClientTime().ToString("M/d/yy");
                }
                else
                {
                    CusExd.ContractCreatedDate = DateTime.UtcNow;
                    _Util.Facade.CustomerFacade.UpdateCustomerExtended(CusExd);
                    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.UTCToClientTime().ToString("M/d/yy");
                }
                if (Cus.CreditScoreValue == null)
                {
                    Cus.CreditScoreValue = 0;
                }
                var PackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(Cus.CustomerId);
                //if (PackageCustomer != null && PackageCustomer.NonConforming && PackageCustomer.NonConformingFee > 0 && (Cus.CreditScoreValue < PackageCustomer.MinCredit || Cus.CreditScoreValue > PackageCustomer.MaxCredit))
                if (PackageCustomer != null && PackageCustomer.NonConformingFee > 0 && (Cus.CreditScoreValue <= PackageCustomer.MinCredit || Cus.CreditScoreValue >= PackageCustomer.MaxCredit))
                {
                    IsNonConfirming = true;
                    NonConfirmingFee = PackageCustomer.NonConformingFee.Value;
                }
                var SmartPackageEquipmentServiceList = new List<SmartPackageEquipmentService>();
                var GetCityTaxList = _Util.Facade.CompanyBranchFacade.GetCityTaxRate(Cus.CustomerId, Com.CompanyId);
                if (GetCityTaxList.Count > 0)
                {
                    foreach (var item1 in GetCityTaxList)
                    {
                        AgreementTax = item1.Rate;
                        ServiceTax = item1.Rate;
                    }
                }
                else
                {
                    Guid CustomerId = new Guid();
                    if (Cus != null)
                    {
                        CustomerId = Cus.CustomerId;
                    }
                    var GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(Com.CompanyId, CustomerId);
                    if (GetSalesTax != null)
                    {
                        AgreementTax = Convert.ToDouble(GetSalesTax.Value);
                        ServiceTax = Convert.ToDouble(GetSalesTax.Value);
                    }
                }
                #region Invoice
                Invoice invoice = new Invoice();
                CustomerProratedBill cpb = new CustomerProratedBill();
                cpb = _Util.Facade.InvoiceFacade.GetCusProratedBillByCustomerId(Cus.CustomerId);
                List<InvoiceDetail> invoiceList = new List<InvoiceDetail>();
                string invDiagram = "";
                if (!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true)
                {
                    invoice = _Util.Facade.InvoiceFacade.GetByInvoiceId(invoiceid);
                    if (invoice != null)
                    {
                        invDiagram = invoice.InvoiceContractDiagram;
                        invoiceList = _Util.Facade.InvoiceFacade.GetInvoiceDetialsListByInvoiceId(invoice.InvoiceId);
                    }
                }
                #endregion
                #region Estimator
                Employee userInfo = new Employee();
                if (userid != Guid.Empty)
                {
                    userInfo = _Util.Facade.EmployeeFacade.GetEmployeeByEmployeeId(userid.Value);
                }
                CreateEstimator createest = new CreateEstimator();
                if (isestimator.Value && estid > 0)
                {
                    CreateEstimator ca = new CreateEstimator();
                    ca.EstimatorSetting = new EstimatorSetting();
                    ca.Company = Com;

                    ca.Estimator = _Util.Facade.EstimatorFacade.GetById(estid.Value);
                    ca._EstimatorPDFFilter = _Util.Facade.EstimatorFacade.GetEstimatorPdfFilterByComIdCusIdUserId(Com.CompanyId, userid.Value, ca.Estimator.CustomerId);
                    ca.estimatorDetails = _Util.Facade.EstimatorFacade.GetEstimatorDetailListByEstimatorId(ca.Estimator.EstimatorId);
                    ca.estimatorServices = _Util.Facade.EstimatorFacade.GetEstimatorServicesByEstimatorId(ca.Estimator.EstimatorId);
                    if (ca.Estimator == null || ca.Estimator.CompanyId != Com.CompanyId)
                    {
                        return null;
                    }
                    if ((ca.estimatorDetails == null || ca.estimatorDetails.Count() == 0) && (ca.estimatorServices == null || ca.estimatorServices.Count() == 0))
                    {
                        return null;
                    }
                    Customer tempCUstomer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(ca.Estimator.CustomerId);
                    if (tempCUstomer == null)
                    {
                        return null;
                    }

                    CreateEstimator processedModel = GetEstimatorModelById(ca.Estimator, ca.estimatorDetails, ca.estimatorServices, Com, tempCUstomer, ca._EstimatorPDFFilter, Com.CompanyId);
                    Estimator estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(ca.Estimator.EstimatorId);
                    if (estimator != null)
                    {
                        ViewBag.CoverLetter = estimator.CoverLetter;
                        processedModel.Estimator.CoverLetter = estimator.CoverLetter;
                        processedModel.Estimator.CoverLetterFile = estimator.CoverLetterFile;
                        processedModel.Estimator.ServicePlanType = estimator.ServicePlanType;
                        processedModel.Estimator.ServicePlanRate = estimator.ServicePlanRate;
                        processedModel.Estimator.ServicePlanAmount = estimator.ServicePlanAmount;
                        processedModel.Estimator.ServiceTaxAmount = estimator.ServiceTaxAmount;
                        processedModel.Estimator.ServiceTotalAmount = estimator.ServiceTotalAmount;
                        processedModel.Estimator.ShowServicePlan = estimator.ShowServicePlan;
                        processedModel.Estimator.ShowService = estimator.ShowService;
                        processedModel.Estimator.ServicePlanTypeName = "Service Plan";

                        SelectListItem selectListItem = _Util.Facade.LookupFacade.GetDropdownsByKey("ServicePlans").Where(x => x.Value == estimator.ServicePlanType).FirstOrDefault();
                        if (selectListItem != null)
                        {
                            processedModel.Estimator.ServicePlanTypeName = selectListItem.Text;
                        }

                    }
                    if (ca.estimatorDetails != null)
                    {
                        foreach (var item in ca.estimatorDetails)
                        {
                            Manufacturer Manufacturer = _Util.Facade.EquipmentFacade.GetManufacturerByManufacturerId(item.ManufacturerId);
                            if (Manufacturer != null)
                            {
                                item.Manufacturer = Manufacturer.Name;
                            }
                            item.CreatedDate = DateTime.Now.UTCCurrentTime();
                            ca.SubTotal = ca.SubTotal + (item.TotalPrice.HasValue ? item.TotalPrice.Value : 0);
                            item.EquipmentFile = _Util.Facade.EquipmentFileFacade.GetEquipmentFilesByEquipmentIdAndFileType(item.EquipmentId, LabelHelper.EquipmentFileType.ProfilePicture).FirstOrDefault();
                            if (item.EquipmentFile == null)
                            {
                                item.EquipmentFile = new EquipmentFile();
                            }
                        }
                    }
                    if (ca.estimatorServices != null)
                    {
                        foreach (var item in ca.estimatorServices)
                        {
                            processedModel.ServiceSubTotal += ca.ServiceSubTotal + item.Amount;
                        }
                        processedModel.TotalServiceAmount = processedModel.ServiceSubTotal + ca.ServiceTax;
                    }
                    createest = processedModel;
                    createest.eSecurityLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/eSecurity_logo.png");
                    createest.specializedLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/specialized_property_management_logo.png");
                    string EstimatorContractTerm = "";
                    if (!string.IsNullOrWhiteSpace(createest.Estimator.ContractTerm) && createest.Estimator.ContractTerm != "-1")
                    {
                        if (createest.Estimator.ContractTerm.ToLower() == "month to month")
                        {
                            EstimatorContractTerm = createest.Estimator.ContractTerm;
                        }
                        else
                        {
                            EstimatorContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(createest.Estimator.ContractTerm) * 12))).ToString() + " month";
                        }

                    }
                    createest.EstimatorContractTerm = EstimatorContractTerm;
                }
                #endregion
                var CustomEquipmentList = new List<Equipment>();
                if (firstpage == true || recreate == true)
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }
                else if (!string.IsNullOrWhiteSpace(EstimatorId))
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentEstimatorListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, firstpage.Value, ticketid.Value, EstimatorId);
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }
                else
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }
                var CustomServiceList = new List<Equipment>();
                if (firstpage == true || recreate == true)
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (CustomServiceList.Count > 0)
                    {
                        foreach (var item in CustomServiceList)
                        {
                            EquipmentTotalPrice += item.Total;
                            ServiceTotalPrice += item.Total;
                            MonthlyServiceFeeTotal += item.Total;
                        }
                    }
                }
                else if (!string.IsNullOrWhiteSpace(EstimatorId))
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartEstimatorServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, firstpage.HasValue ? firstpage.Value: false, ticketid.HasValue ? ticketid.Value:0, EstimatorId);
                    if (CustomServiceList != null)
                    {
                        var IsRecurringList = CustomServiceList.Where(x => x.IsARBEnabled == true).ToList();
                        if (IsRecurringList != null && IsRecurringList.Count > 0)
                        {
                            foreach (var item in IsRecurringList)
                            {
                                EquipmentTotalPrice += item.Total;
                                ServiceTotalPrice += item.Total;
                                MonthlyServiceFeeTotal += item.Total;
                            }
                        }
                    }
                }
                else
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (CustomServiceList.Count > 0)
                    {
                        foreach (var item in CustomServiceList)
                        {
                            EquipmentTotalPrice += item.Total;
                            ServiceTotalPrice += item.Total;
                            MonthlyServiceFeeTotal += item.Total;
                        }
                    }
                }
                var NotARBEnabledServiceList = new List<Equipment>();
                if (firstpage == true || recreate == true || commercial == true)
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (NotARBEnabledServiceList.Count > 0)
                    {
                        foreach (var item in NotARBEnabledServiceList)
                        {
                            NotARBEnabledTotalPrice += item.Total;
                        }
                    }
                }
                else if (!string.IsNullOrWhiteSpace(EstimatorId))
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetSmartEstimatorServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0), EstimatorId);
                    var onetimeserviceList = NotARBEnabledServiceList.Where(x => x.IsARBEnabled == false).ToList();
                    if (onetimeserviceList != null)
                    {
                        if (onetimeserviceList.Count > 0)
                        {
                            foreach (var item in onetimeserviceList)
                            {
                                NotARBEnabledTotalPrice += item.Total;
                            }
                        }
                    }

                }
                else
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListFromService(Cus.CustomerId, Com.CompanyId);
                    if (NotARBEnabledServiceList.Count > 0)
                    {
                        foreach (var item in NotARBEnabledServiceList)
                        {
                            NotARBEnabledTotalPrice += item.Total;
                        }
                    }
                }
                #region Advance Monitoring Service Month

                PaymentInfoCustomer paycus = new PaymentInfoCustomer();
                paycus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayForService(Cus.CustomerId);
                int ForMonth = 1;
                if (paycus != null && paycus.ForMonths.HasValue)
                {
                    ForMonth = paycus.ForMonths.Value;
                }
                if (ForMonth > 1)
                {
                    AdvanceServiceFeeTotal = MonthlyServiceFeeTotal * (ForMonth - 1);

                }
                #endregion
                Cus.MonthlyMonitoringFee = Convert.ToString(ServiceTotalPrice);
                TotalMonthlyMonitoring = MonthlyServiceFeeTotal;
                NewSubTotal = TotalMonthlyMonitoring + UpfrontAddOnTotal;
                if (CustomServiceList.Count > 0 || CustomEquipmentList.Count > 0)
                {
                    if (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue)
                    {
                        AgreementSubtotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                        NewSubTotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                    }
                    else
                    {
                        AgreementSubtotal = EquipmentTotalPrice;
                        NewSubTotal = EquipmentTotalPrice;
                    }
                }
                if (IsNonConfirming && NonConfirmingFee > 0)
                {
                    AgreementSubtotal = AgreementSubtotal + NonConfirmingFee;
                    NewSubTotal = NewSubTotal + NonConfirmingFee;
                }
                if (AgreementTax != 0.0)
                {
                    taxtotal = (AgreementSubtotal / 100) * AgreementTax;
                    Model.TaxTotal = taxtotal;
                    AgreementTotal = AgreementSubtotal + taxtotal;
                    TotalDueAtSigning = NewSubTotal + taxtotal;
                }
                else
                {
                    Model.TaxTotal = 0.0;
                    AgreementTotal = AgreementSubtotal;
                    TotalDueAtSigning = NewSubTotal;
                }
                /// "mayur" Discount change in activation
                if (ServiceTax != 0.0)
                {
                    taxtotal = (ServiceTotalPrice / 100) * ServiceTax;
                    //MonthlyServiceFeeTotal = ServiceTotalPrice + taxtotal;
                }
                else
                {
                }

                var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(Cus.CustomerId, CurrentUser.CompanyId.Value);
                if (PackageCustomerDetails != null)
                {
                    InstallTypeName = _Util.Facade.PackageFacade.SmartInstallTypeNameByInstallTypeId(Convert.ToInt32(PackageCustomerDetails.SmartInstallTypeId));
                    if (string.IsNullOrWhiteSpace(InstallTypeName))
                    {
                        InstallTypeName = "New Install";
                    }
                    SmartPackageEquipmentServiceList = _Util.Facade.PackageFacade.GetAllSmartPackageIncludeEquipmentByPackageIdAndCompanyId(PackageCustomerDetails.PackageId, CurrentUser.CompanyId.Value);
                }
                var PaymentDetails = _Util.Facade.PaymentInfoFacade.GetAllPaymentInfoByCustomerIdAndCompanyId(Cus.CustomerId, CurrentUser.CompanyId.Value).Where(m => m.PayFor == "First Month").FirstOrDefault();
                var agreementPayment = _Util.Facade.PaymentInfoFacade.GetLeadAgreementPaymentInfoByCustomerId(Cus.CustomerId);
                string paymentoverviewheader = "";
                string paymentoverviewdata = "";
                if (agreementPayment != null && agreementPayment.Count > 0)
                {
                    paymentoverviewheader = "<table style='border-collapse:collapse; width:100%; font-family:Arial; table-layout:fixed; font-size:13px;'>{0}</table>";
                    foreach (var pay in agreementPayment)
                    {
                        var sppay = pay.Type.Split('_');
                        if (sppay.Length > 0)
                        {
                            if (sppay[0] == "CC")
                            {
                                var cardNumber = pay.CardNumber.Replace('-', ' ').Replace(" ", "");
                                if (cardNumber.Length == 16)
                                {
                                    paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(12, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                                }
                                else
                                {
                                    paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(11, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                                }
                            }
                            else if (sppay[0] == "ACH")
                            {
                                paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Type: " + pay.BankAccountType + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Routing No: " + pay.RoutingNo + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account No: " + string.Concat("".PadLeft(pay.AcountNo.Length - 4, '*'), pay.AcountNo.Substring(pay.AcountNo.Length - 4)) + @"</td>
                                                        </tr>";
                            }
                        }
                    }
                }
                var CustomerAddress = AddressHelper.MakeAddress(Cus);
                var CustomerInstallAddress = AddressHelper.MakeInstallAddress(Cus);
                CustomerSignature cs = new CustomerSignature();
                GlobalSetting glbs = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CompanySignature");
                string cusSignature = "";
                string cussignDate = "";
                DateTime cussignDateVal = new DateTime();
                if (firstpage.HasValue && firstpage.Value == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "First Page");
                }
                else if (commercial.HasValue && commercial.Value == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Commercial");
                }
                else if (isinvoice.HasValue && isinvoice.Value == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimate");
                }
                else if (isestimator.HasValue && isestimator.Value == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimator");
                }
                else if (recreate.HasValue && recreate.Value == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Recreate");
                }
                else if (Cus != null && agreementtempid.HasValue && agreementtempid.Value > 0)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Agreement File");
                }
                else
                {
                    cusSignature = Cus.Singature;
                    if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                    {
                        cussignDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                        cussignDateVal = Cus.CustomerSignatureDate.Value.UTCToClientTime();
                    }

                }
                if (cs != null && (agreementtempid != 0 || (firstpage.HasValue && firstpage.Value == true) || (recreate.HasValue && recreate.Value == true) || (commercial.HasValue && commercial.Value == true)))
                {
                    cusSignature = cs.Signature;
                    if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                    {
                        cussignDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                        cussignDateVal = cs.CreatedDate.UTCToClientTime();
                    }

                }
                //(!string.IsNullOrWhiteSpace(Cus.MonthlyMonitoringFee) ? Convert.ToDouble(Cus.MonthlyMonitoringFee) : 1) * Convert.ToDouble(ContractTerm),

                Double MMR = 1;
                Double CTerm = 0;

                double.TryParse(Cus.MonthlyMonitoringFee, out MMR);
                double.TryParse(ContractTerm, out CTerm);
                //(!string.IsNullOrWhiteSpace() ? Convert.ToDouble(Cus.MonthlyMonitoringFee) : 1) * Convert.ToDouble(ContractTerm);
                Double TotalPayments = MMR * CTerm;
                #region For Promo Pyment Method
                List<PaymentInfoCustomer> paycusList = new List<PaymentInfoCustomer>();
                PaymentProfileCustomer paymentProfile = new PaymentProfileCustomer();
                paycusList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(Cus.CustomerId);
                if (paycusList != null && paycusList.Count > 0)
                {
                    foreach (var item in paycusList)
                    {
                        paymentProfile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(item.PaymentInfoId);
                        if (paymentProfile != null && paymentProfile.Type == LabelHelper.PaymentMethod.Promo)
                        {
                            if (item.Payfor == "Activation Fee")
                            {
                                NonConfirmingFee = 0.0;

                                if (PackageCustomer != null)
                                {
                                    PackageCustomer.ActivationFee = 0.0;
                                }
                                NewSubTotal = NewSubTotal - (PackageCustomer.AdditionFee + NonConfirmingFee);
                            }
                            else if (item.Payfor == "Equipment")
                            {
                                IsUpfrontPromo = true;
                                NewSubTotal = NewSubTotal - UpfrontAddOnTotal;
                            }
                            else if (item.Payfor == "Service")
                            {
                                NewSubTotal = NewSubTotal - TotalMonthlyMonitoring;
                                IsServicePromo = true;

                            }


                        }

                    }

                }
                #endregion

                #region LeadSource
                string LeadSource = "";
                Lookup leadsource = _Util.Facade.LookupFacade.GetLookupByKeyAndValueAndCompanyId("LeadSource", Cus.LeadSource, Com.CompanyId);
                LeadSource = leadsource != null && !string.IsNullOrWhiteSpace(leadsource.DisplayText) && leadsource.DataValue != "-1" ? leadsource.DisplayText : "";
                #endregion
                #region Insert Customer Agreement
                CustomerAgreement objCustomerAgreement = new CustomerAgreement()
                {
                    CompanyId = Com.CompanyId,
                    CustomerId = Cus.CustomerId,
                    IP = AppConfig.GetIP,
                    UserAgent = AppConfig.GetUserAgent,
                    Type = LabelHelper.CustomerAgreementLog.LoadAgreement,
                    AddedDate = DateTime.UtcNow
                };
                _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(objCustomerAgreement);
                #endregion
                if (!string.IsNullOrWhiteSpace(EstimatorId))
                {
                    Estimator estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(EstimatorId);
                    if (estimator != null)
                    {
                        cusSignature = estimator.EstimatorSignature;
                        PackageCustomer.ActivationFee = estimator.ActivationFee;
                    } 
                    //CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentEstimatorListByCustomerIdAndCompanyId(Cus.CustomerId, Cus.CompanyId, firstpage.Value, ticketid.Value, EstimatorId);
                    //if (CustomEquipmentList != null && CustomEquipmentList.Count() > 0)
                    //{
                    //    var ActivationData = CustomEquipmentList.FirstOrDefault();
                    //    PackageCustomer.ActivationFee = ActivationData.ActivationFee;
                    //}  
                }
                
                Model = new InstallationAgreementModel()
                {
                    CSIDNumber = Cus.Id,
                    LeadSource = LeadSource,
                    IsNonConfirming = IsNonConfirming,
                    NonConfirmingFee = NonConfirmingFee,
                    InstallDate = Cus.InstallDate != null ? Convert.ToDateTime(Cus.InstallDate).ToShortDateString() : "",
                    OriginalContactDate = (Cus.OriginalContactDate != null && Cus.OriginalContactDate.HasValue) ? Cus.OriginalContactDate.Value : new DateTime(),
                    AccountType = Cus.Type,
                    ContractType = CusExd != null && !string.IsNullOrWhiteSpace(CusExd.ContractType) ? CusExd.ContractType : "",
                    Referredby = Cus.ReferringCustomer != Guid.Empty ? _Util.Facade.CustomerFacade.GetCustomerNameById(Cus.ReferringCustomer) : "",
                    SocialSecurityNumber = Cus.SSN,
                    //Owner2ndPhone = Cus.SecondaryPhone,
                    Owner2ndPhone = Cus.PrimaryPhone,
                    InitialStreet = Cus.Street,
                    InitialCity = Cus.City,
                    InitialCountry = Cus.County,
                    InitialState = Cus.State,
                    InitialZip = Cus.ZipCode,
                    InitialApt = Cus.Appartment,
                    BillingCity = Cus.CityPrevious,
                    BillingState = Cus.StatePrevious,
                    BillingZip = Cus.ZipCodePrevious,
                    BillingCountry = Cus.CountryPrevious,
                    BillingStreet = Cus.StreetPrevious,
                    InstallTypeName = InstallTypeName,
                    SmartPackageEquipmentServiceList = SmartPackageEquipmentServiceList,
                    UpfrontAddOnTotal = UpfrontAddOnTotal,
                    UpfrontAddOnTotalPromo = UpfrontAddOnTotalPromo,
                    IsUpfrontPromo = IsUpfrontPromo,
                    IsServicePromo = IsServicePromo,
                    MonthlyServiceFeeTotal = MonthlyServiceFeeTotal,
                    TotalMonthlyMonitoring = TotalMonthlyMonitoring,
                    NewSubTotal = NewSubTotal,
                    TotalDueAtSigning = TotalDueAtSigning,
                    PaymentDetails = PaymentDetails != null ? PaymentDetails : new PaymentInfo(),
                    DisplayName = Cus.DisplayName,
                    BillingAddress = CustomerAddress,
                    OwnerAddress = CustomerAddress,
                    InstallAddress = CustomerInstallAddress,
                    OwnerEmail = Cus.EmailAddress,
                    //OwnerPhone = Cus.PrimaryPhone,
                    OwnerPhone = Cus.CellNo,
                    OwnerName = Cus.FirstName + " " + Cus.LastName,
                    FirstName = Cus.FirstName,
                    LastName = Cus.LastName,
                    EmergencyContactList = _Util.Facade.EmergencyContactFacade.GetAllEmergencyContactByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId),
                    CompanyName = Com.CompanyName,
                    CompanySate = string.Format("{0}, {1} {2}", Com.City, Com.State, Com.ZipCode),
                    CompanyStreet = Com.Street,
                    CompanyWebsite = Com.Website,
                    SubscribedMonths = ContractTerm,
                    SubscribedMonthsInWord = ContractTermInWord,
                    RenewalMonths = Cus.RenewalTerm.HasValue ? Cus.RenewalTerm.Value : 0,
                    Password = Cus.Passcode,
                    DateOfTransaction = FixDate.UTCToClientTime(),
                    CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyEmailLogoByCompanyId(Com.CompanyId),
                    EquipmentList = CustomEquipmentList.ToList(),
                    ServiceList = CustomServiceList.ToList(),
                    ActivationFee = (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue) ? PackageCustomer.ActivationFee.Value : 0,
                    BusinessName = Cus.BusinessName,
                    MonthlyMonitoringFee = Cus.MonthlyMonitoringFee,
                    EffectiveDate = FixDate.UTCToClientTime(),
                    CustomerSignature = cusSignature,
                    CustomerSignatureStringDate = cussignDate,
                    CustomerSignatureStringDateVal = cussignDateVal,
                    //ContractCreatedDateVal = contractCreatedDateVal,
                    ContractCreatedDateVal = (CusExd.ContractStartDate != null && CusExd.ContractStartDate.HasValue) ? CusExd.ContractStartDate.Value.ToShortDateString() : DateTime.Now.ToShortDateString(),
                    CustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByCompanyIdAndCustomerId1(Com.CompanyId, Cus.CustomerId),
                    Subtotal = AgreementSubtotal,
                    Tax = AgreementTax,
                    TaxTotal = taxtotal,
                    Total = AgreementTotal,
                    EContractId = Cus.Id,
                    ListAgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(Cus.CustomerId),
                    SalesRepresentative = !string.IsNullOrEmpty(Cus.Soldby) ? _Util.Facade.EmployeeFacade.GetEmployeeNumByEmployeeId(new Guid(Cus.Soldby)).ToString() : "",
                    TotalPayments = TotalPayments,
                    SingleCustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetIpAndUserAgentByCustomerIdAndCompanyId(Com.CompanyId, Cus.CustomerId),
                    ListContactEmergency = string.Format(paymentoverviewheader, paymentoverviewdata),
                    ListPaymentInfo = string.Format(paymentoverviewheader, paymentoverviewdata),
                    DoingBusinessAs = Cus.DBA,
                    DispalyName = Cus.DisplayName,
                    CompanyPhone = Com.Phone,
                    FirstPage = firstpage.HasValue ? firstpage.Value : false,
                    Commercial = commercial.HasValue ? commercial.Value : false,
                    IsInvoice = isinvoice.Value,
                    InvoiceId = invoiceid,
                    InvoiceDiagram = invDiagram,
                    InvoiceList = invoiceList,
                    IsEstimator = isestimator.HasValue ? isestimator.Value : false,
                    createEst = createest,
                    userInfo = userInfo,
                    inv = invoice,
                    NotARBEnabledServiceList = NotARBEnabledServiceList.ToList(),
                    NotARBEnabledTotalPrice = NotARBEnabledTotalPrice,
                    ProratedAmout = cpb != null ? Math.Round(cpb.Amount, 2, MidpointRounding.AwayFromZero) : 0.0,
                    FinancedAmout = Cus != null && Cus.FinancedAmount != null ? Math.Round(Cus.FinancedAmount.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                    MonthlyFinanceRate = CusExd != null && CusExd.MonthlyFinanceRate != null ? Math.Round(CusExd.MonthlyFinanceRate.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                    AdvanceServiceFeeTotal = AdvanceServiceFeeTotal
                };
                if (agreementtempid != 0)
                {
                    if (cs != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(cs.Signature))
                    {
                        Model.CompanySignature = glbs.Value;
                        if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                        {
                            Model.CompanySignatureDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                        }
                    }
                }
                else if (firstpage == true || recreate == true || commercial == true)
                {
                    if (glbs != null && !string.IsNullOrWhiteSpace(glbs.Value))
                    {
                        Model.CompanySignature = glbs.Value;
                        Model.CompanySignatureDate = cussignDate;
                    }
                }
                else
                {
                    if (Cus != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(Cus.Singature))
                    {
                        Model.CompanySignature = glbs.Value;
                        if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                        {
                            Model.CompanySignatureDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                        }
                    }
                }

                if (Model.EmergencyContactList == null)
                {
                    Model.EmergencyContactList = new List<EmergencyContact>();
                }
            }
            else
            {
                Model.CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyLogoForPDFByCompanyId(CurrentUser.CompanyId.Value);
            }

            //  return View(Model);
            Model.KazarLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/kazar_logo.PNG");
            ViewBag.CompanyId = Com.CompanyId.ToString();
            Model.CompanyId = Com.CompanyId.ToString();
            Model.CurrentCurrency = _Util.Facade.GlobalSettingsFacade.GetCurrentCurrencyByCompanyId(Com.CompanyId);

            string body = _Util.Facade.AgreementFacade.MakeSmartAgreementPdf(Model, agreementtempid.HasValue ? agreementtempid.Value : 0);
            ViewBag.Body = body;
            ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("SmartInstallationAgreement")
            {
                //FileName = "TestView.pdf",
                PageSize = Rotativa.Options.Size.A4,
                PageOrientation = Rotativa.Options.Orientation.Portrait,
                PageMargins = { Left = 1, Right = 1 },

            };
            byte[] applicationPDFData = actionPDF.BuildPdf(ControllerContext);

            #region File Save

            //Random rand = new Random();
            //string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
            //var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CurrentUser.CompanyId.Value).CompanyName.ReplaceSpecialChar();
            //var pdftempFolderName = string.Format(filename, comname) + rand.Next().ToString() + leadid + "AgreementMail.pdf";
            //string Serverfilename = FileHelper.GetFileFullPath(pdftempFolderName);
            //FileHelper.SaveFile(applicationPDFData, Serverfilename);

            #endregion

            //// "mayur" AWS S3 Changes //// Start

            #region File Save on AWS S3

            string returnurl = "";
            Random rand = new Random();
            string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
            filename = filename.TrimEnd('/');

            string comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CurrentUser.CompanyId.Value).CompanyName.ReplaceSpecialChar();

            string FilePath = string.Format(filename, comname);

            String FileName = rand.Next().ToString() + leadid + "AgreementMail.pdf";

            string FileKey = string.Format($"{FilePath}/{FileName}");

            /// "mayur" used thread for async s3 methods : start
            /// 

            var task = Task.Run(async () => {
                AWSS3ObjectService AWSobject = new AWSS3ObjectService();

                await AWSobject.UploadFile(FileKey, applicationPDFData);
                await AWSobject.MakePublic(FileName, FilePath);
            });

            task.Wait();

            //Thread thread = new Thread(async () => {

            //    AWSS3ObjectService AWSobject = new AWSS3ObjectService();

            //    await AWSobject.UploadFile(FileKey, applicationPDFData);
            //    await AWSobject.MakePublic(FileName, FilePath);

            //});
            //thread.Start();
            //Thread.Sleep(5000);
            /// "mayur" used thread for async s3 methods : End



            returnurl = String.Format(AppConfig.AWSS3Url, AppConfig.AWSS3BucketName);
            returnurl = returnurl + FileKey;


            ViewBag.ReturnUrl = returnurl;
            ViewBag.FileName = FileName;
            ViewBag.FileKey = FileKey;

            #endregion

            //// "mayur" AWS S3 Changes //// End

            //// ""Mayur" Calculate File Size : start
            #region Calculate file size

            _fileSize = applicationPDFData.Length / 1024;

            #endregion
            //// ""Mayur" Calculate File Size : End

            //var cusinfo = _Util.Facade.CustomerFacade.GetById(leadid.Value);
            bool result = false;
            //string encryptedurl = DESEncryptionDecryption.EncryptPlainTextToCipherText(leadid + "#" + Cus.EmailAddress + "#" + CurrentUser.CompanyId.Value.ToString() + "#" + (IsRecreate.HasValue ? IsRecreate.Value : false) + "#" + (agreementtempid.HasValue ? agreementtempid.Value : 0) + "#" + (firstpage.HasValue ? firstpage.Value : false) + "#" + (ticketid.HasValue ? ticketid.Value : 0) + "#" + (isinvoice.HasValue ? isinvoice.Value : false) + "#" + (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : "") + "#" + (isestimator.HasValue ? isestimator.Value : false) + "#" + (estid.HasValue ? estid.Value : 0) + "#" + (userid != Guid.Empty ? userid : new Guid()) + "#" + (commercial.HasValue ? commercial.Value : false) + "#" + (!string.IsNullOrWhiteSpace(EstimatorId) ? EstimatorId : ""));
            string encryptedurl = DESEncryptionDecryption.EncryptPlainTextToCipherText(leadid + "#" + Cus.EmailAddress + "#" + CurrentUser.CompanyId.Value.ToString() + "#" + (IsRecreate.HasValue ? IsRecreate.Value : false) + "#" + (agreementtempid.HasValue ? agreementtempid.Value : 0) + "#" + (firstpage.HasValue ? firstpage.Value : false) + "#" + (ticketid.HasValue ? ticketid.Value : 0) + "#" + (isinvoice.HasValue ? isinvoice.Value : false) + "#" + (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : "") + "#" + (isestimator.HasValue ? isestimator.Value : false) + "#" + (estid.HasValue ? estid.Value : 0) + "#" + (userid != Guid.Empty ? userid : new Guid()) + "#" + (commercial.HasValue ? commercial.Value : false) + "#" + (!string.IsNullOrWhiteSpace(EstimatorId) ? EstimatorId : ""));
            //string fullurl = string.Concat(AppConfig.SiteDomain, "/Leads-Agreement/", encryptedurl);
            string fullurl = string.Concat(AppConfig.SiteDomain, "/Public/LeadsAgreementDocument/?code=", encryptedurl);

            ShortUrl ShortUrl = _Util.Facade.ShortUrlFacade.GetSortUrlByUrl(fullurl, Cus.CustomerId);
            string shortUrl = string.Concat(AppConfig.ShortSiteDomain, "/shrt/", ShortUrl.Code);
            string message = "";


            /// Mayur :: File Download to temp folder :start

            webClient = new WebClient();
            fileBytes1 = webClient.DownloadData(returnurl);

            File(fileBytes1, System.Net.Mime.MediaTypeNames.Application.Octet, FileName).ToString();



            Temp_FileName = Server.MapPath("~/EmailFileCache/tmp_" + FileName);

            if (!System.IO.File.Exists(Temp_FileName))
            {
                System.IO.File.WriteAllBytes(Temp_FileName, fileBytes1);
            }
            else
            {
                System.IO.File.WriteAllBytes(Temp_FileName, fileBytes1);
            }

            /// Mayur :: File Download to temp folder :End

            if (Cus != null)
            {

                string EmailAddress = PrefferedEmail;
                if (ValidPrefferedEmail.Count == 0)
                {
                    EmailAddress = Cus.EmailAddress;
                }
                else
                {
                    EmailAddress = string.Join(";", ValidPrefferedEmail);
                }
                if (ValidPrefferedEmail.Count > 0 || (!string.IsNullOrWhiteSpace(Cus.EmailAddress) && Cus.EmailAddress.IsValidEmailAddress()))
                {
                    result = true;
                    //// ""Mayur" Calculate File Size : start
                    #region Calculate file size


                    _fileSize = (decimal)applicationPDFData.Length / 1024;
                    _fileSize = Math.Round(_fileSize, 2, MidpointRounding.AwayFromZero);

                    #endregion
                    //// ""Mayur" Calculate File Size : End
                    ///
                    LeadsAggrement la = new LeadsAggrement
                    {
                        CustomerNum = Cus.DisplayName,
                        ToEmail = EmailAddress,
                        //LeadsAggrementpdf = new Attachment(Temp_FileName, MediaTypeNames.Application.Octet),
                        BodyLink = shortUrl,
                        CustomerId = Cus.CustomerId.ToString(),
                        EmployeeId = CurrentUser.UserId.ToString()
                    };
                    if (IsRecreate == true)
                    {
                        from = "Recreate Agreement";
                        file = "Recreate_Agreement";
                        AgreementResult = _Util.Facade.MailFacade.EmailOnlyLeadsAggrement(la, CurrentUser.CompanyId.Value, from);
                        #region file save to customer file
                        if (result)
                        {
                            CustomerFile cfs = new CustomerFile()
                            {
                                FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                                Filename = "/" + FileKey,
                                FileSize = (double)_fileSize,
                                FileId = Guid.NewGuid(),
                                FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                                Uploadeddate = DateTime.Now.UTCCurrentTime(),
                                CustomerId = Cus.CustomerId,
                                CompanyId = CurrentUser.CompanyId.Value,
                                IsActive = true,
                                CreatedBy = CurrentUser.UserId,
                                CreatedDate = DateTime.Now.UTCCurrentTime(),
                                UpdatedBy = CurrentUser.UserId,
                                UpdatedDate = DateTime.Now.UTCCurrentTime(),
                                WMStatus = LabelHelper.WatermarkStatus.Pending,
                                AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                            };
                            _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                            string logMessage = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                            base.AddUserActivityForCustomer(logMessage, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                        }
                        #endregion
                    }
                    else if(!string.IsNullOrWhiteSpace(EstimatorId))
                    {
                        from = "Estimate Agreement";
                        file = "Estimate_Agreement"+"_" + EstimatorId + "sent to customer";
                        AgreementResult = _Util.Facade.MailFacade.EmailOnlyLeadsAggrement(la, CurrentUser.CompanyId.Value, from);
                        #region file save to customer file
                        if (result)
                        {
                            CustomerFile cfs = new CustomerFile()
                            {
                                FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                                Filename = "/" + FileKey,
                                FileSize = (double)_fileSize,
                                FileId = Guid.NewGuid(),
                                FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                                Uploadeddate = DateTime.Now.UTCCurrentTime(),
                                CustomerId = Cus.CustomerId,
                                CompanyId = CurrentUser.CompanyId.Value,
                                IsActive = true,
                                CreatedBy = CurrentUser.UserId,
                                CreatedDate = DateTime.Now.UTCCurrentTime(),
                                UpdatedBy = CurrentUser.UserId,
                                UpdatedDate = DateTime.Now.UTCCurrentTime(),
                                WMStatus = LabelHelper.WatermarkStatus.Pending,
                                AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                            };
                            _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                            string logMessage = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                            base.AddUserActivityForCustomer(logMessage, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                        }
                        

                        #endregion
                    }
                    else if (firstpage == true)
                    {
                        from = "First Page Agreement";
                        file = "FirstPage_Agreement";

                        AgreementResult = _Util.Facade.MailFacade.EmailOnlyLeadsAggrement(la, CurrentUser.CompanyId.Value, from);
                        #region file save to customer file
                        if (result)
                        {
                            CustomerFile cfs = new CustomerFile()
                            {
                                FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                                Filename = "/" + FileKey,
                                FileSize = (double)_fileSize,
                                FileId = Guid.NewGuid(),
                                FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                                Uploadeddate = DateTime.Now.UTCCurrentTime(),
                                CustomerId = Cus.CustomerId,
                                CompanyId = CurrentUser.CompanyId.Value,
                                IsActive = true,
                                CreatedBy = CurrentUser.UserId,
                                CreatedDate = DateTime.Now.UTCCurrentTime(),
                                UpdatedBy = CurrentUser.UserId,
                                UpdatedDate = DateTime.Now.UTCCurrentTime(),
                                WMStatus = LabelHelper.WatermarkStatus.Pending,
                                AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                            };
                            _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                            string logMessage = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                            base.AddUserActivityForCustomer(logMessage, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                        }
                        #endregion
                    }
                    else if (CusExd.ContractType == "Commercial")
                    {
                        from = "Commercial Agreement";
                        file = "Commercial_Agreement";

                        AgreementResult = _Util.Facade.MailFacade.EmailOnlyLeadsAggrement(la, CurrentUser.CompanyId.Value, from);
                        #region file save to customer file
                        if (result)
                        {
                            CustomerFile cfs = new CustomerFile()
                            {
                                FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                                Filename = "/" + FileKey,
                                FileSize = (double)_fileSize,
                                FileId = Guid.NewGuid(),
                                FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                                Uploadeddate = DateTime.Now.UTCCurrentTime(),
                                CustomerId = Cus.CustomerId,
                                CompanyId = CurrentUser.CompanyId.Value,
                                IsActive = true,
                                CreatedBy = CurrentUser.UserId,
                                CreatedDate = DateTime.Now.UTCCurrentTime(),
                                UpdatedBy = CurrentUser.UserId,
                                UpdatedDate = DateTime.Now.UTCCurrentTime(),
                                WMStatus = LabelHelper.WatermarkStatus.Pending,
                                AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                            };
                            _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                            string logMessage = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                            base.AddUserActivityForCustomer(logMessage, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                        }
                        #endregion
                    }
                    else if (CusExd.ContractType == "CommercialFire")
                    {
                        from = "Commercial Fire Agreement";
                        file = "Commercial_Fire_Agreement";

                        AgreementResult = _Util.Facade.MailFacade.EmailOnlyLeadsAggrement(la, CurrentUser.CompanyId.Value, from);
                        #region file save to customer file
                        if (result)
                        {
                            CustomerFile cfs = new CustomerFile()
                            {
                                FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                                Filename = "/" + FileKey,
                                FileSize = (double)_fileSize,
                                FileId = Guid.NewGuid(),
                                FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                                Uploadeddate = DateTime.Now.UTCCurrentTime(),
                                CustomerId = Cus.CustomerId,
                                CompanyId = CurrentUser.CompanyId.Value,
                                IsActive = true,
                                CreatedBy = CurrentUser.UserId,
                                CreatedDate = DateTime.Now.UTCCurrentTime(),
                                UpdatedBy = CurrentUser.UserId,
                                UpdatedDate = DateTime.Now.UTCCurrentTime(),
                                WMStatus = LabelHelper.WatermarkStatus.Pending,
                                AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                            };
                            _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                            string logMessage = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                            base.AddUserActivityForCustomer(logMessage, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                        }
                        #endregion
                    }
                    else
                    {
                        from = "Smart Lead Agreement";
                        AgreementResult = _Util.Facade.MailFacade.EmailOnlyLeadsAggrement(la, CurrentUser.CompanyId.Value, from);
                        file = "Smart_Lead_Agreement";
                        #region file save to customer file
                        if (result)
                        {
                            CustomerFile cfs = new CustomerFile()
                            {
                                FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                                Filename = "/" + FileKey,
                                FileSize = (double)_fileSize,
                                FileId = Guid.NewGuid(),
                                FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                                Uploadeddate = DateTime.Now.UTCCurrentTime(),
                                CustomerId = Cus.CustomerId,
                                CompanyId = CurrentUser.CompanyId.Value,
                                IsActive = true,
                                CreatedBy = CurrentUser.UserId,
                                CreatedDate = DateTime.Now.UTCCurrentTime(),
                                UpdatedBy = CurrentUser.UserId,
                                UpdatedDate = DateTime.Now.UTCCurrentTime(),
                                WMStatus = LabelHelper.WatermarkStatus.Pending,
                                AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                            };
                            _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                            string logMessage = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                            base.AddUserActivityForCustomer(logMessage, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                        }
                        #endregion
                    }
                    message = "Agreement sent to " + EmailAddress;
                    Customer cus2 = _Util.Facade.CustomerFacade.GetCustomerById(Cus.Id);
                    cus2.IsAgreementSend = true;
                    cus2.AgreementEmail = PrefferedEmail;
                    if (firstpage == true || recreate == true)
                    {
                        cus2.Singature = "";
                        cus2.IsContractSigned = false;
                        var objrecreate = _Util.Facade.CustomerSignatureFacade.GetRecreateCustomerSignatureByCustomerId(cus2.CustomerId);
                        if (objrecreate != null)
                        {
                            objrecreate.Signature = "";
                            _Util.Facade.CustomerSignatureFacade.UpdateCustomerSignature(objrecreate);
                        }
                        var objfirstpage = _Util.Facade.CustomerSignatureFacade.GetFirstPageCustomerSignatureByCustomerId(cus2.CustomerId);
                        if (objfirstpage != null)
                        {
                            objfirstpage.Signature = "";
                            _Util.Facade.CustomerSignatureFacade.UpdateCustomerSignature(objfirstpage);
                        }
                    }
                    _Util.Facade.CustomerFacade.UpdateCustomer(cus2);
                    if (commercial == true)
                    {
                        var objcommercial = _Util.Facade.CustomerSignatureFacade.GetCommercialCustomerSignatureByCustomerId(cus2.CustomerId);
                        if (objcommercial != null)
                        {
                            objcommercial.Signature = "";
                            _Util.Facade.CustomerSignatureFacade.UpdateCustomerSignature(objcommercial);
                        }
                    }
                    #region Agreement History
                    var cusAgrHistory = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementHistory(Cus.CustomerId, LabelHelper.CustomerAgreementHistory.AgreementSend);
                    if (cusAgrHistory == null)
                    {
                        CustomerAgreement cusAgrModel = new CustomerAgreement()
                        {
                            CompanyId = Com.CompanyId,
                            CustomerId = Cus.CustomerId,
                            IP = AppConfig.GetIP,
                            UserAgent = AppConfig.GetUserAgent,
                            Type = LabelHelper.CustomerAgreementHistory.AgreementSend,
                            AddedDate = DateTime.UtcNow
                        };
                        _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(cusAgrModel);
                    }
                    #endregion
                }
                else
                {
                    result = false;
                    message = "Invalid email address.";
                }
            }

            return Json(new { result = result, message = message });
        }


        #region After agreement sign SmartIAgreeSetup
        [HttpPost]
        public JsonResult SmartIAgreeSetup(int? Id, bool? recreate, int? agreementtempid, bool? firstpage, int? ticketid, bool? isinvoice, string invoiceid, bool? isestimator, int? estid, Guid? userid, bool? commercial)
        {
            bool result = false;
            #region Check Default Billing Tax
            bool defaultBillTaxVal = true;
            Guid tempTicketId = Guid.Empty;
            Guid CustomerGuidId = Guid.Empty;
            GlobalSetting defaultBillTax = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByOnlyKey("DefaultCustomerBillingTax");
            if (defaultBillTax != null)
            {
                if (defaultBillTax.Value.ToLower() == "true")
                {
                    defaultBillTaxVal = true;
                }
                else
                {
                    defaultBillTaxVal = false;
                }
            }
            bool AfterSubmitDocumentSave = false;
            GlobalSetting GlobSet = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByOnlyKey("AfterSubmitDocumentSave");
            if (GlobSet != null && !string.IsNullOrWhiteSpace(GlobSet.Value))
            {
                if (GlobSet.Value == "true")
                {
                    AfterSubmitDocumentSave = true;
                }
            }
            #endregion
            if (recreate.HasValue && recreate.Value == true)
            {
                if (!Id.HasValue)
                    return Json(false);
                Customer _Customer = new Customer();
                CustomerCompany custommerCompany = new CustomerCompany();
                Guid CompanyId = new Guid();
                if (User.Identity.IsAuthenticated)
                {
                    var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
                    CompanyId = CurrentUser.CompanyId.Value;
                }
                else
                {
                    custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(Id.Value);
                    CompanyId = custommerCompany.CompanyId;
                }
                Company _Company = new Company { CompanyId = CompanyId };

                if (Id.Value > 0)
                {
                    _Customer = _Util.Facade.CustomerFacade.GetCustomersById(Id.Value);
                    #region Insert Monthly Monitoring Fee
                    #region ACH discount
                    double discountAmount = 0;
                    var objpayinfocus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayFor(_Customer.CustomerId);
                    if (objpayinfocus != null)
                    {
                        var objpayprofile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(objpayinfocus.PaymentInfoId);
                        if (objpayprofile != null && objpayprofile.Type.ToLower().IndexOf("ach") > -1)
                        {
                            var objglobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(custommerCompany.CompanyId, "ACHDiscount");
                            if (objglobal != null)
                            {
                                discountAmount = Convert.ToDouble(objglobal.Value);
                            }
                        }
                    }
                    #endregion
                    List<CustomerPackageService> CustomerPackageServiceList = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(_Customer.CustomerId, custommerCompany.CompanyId);
                    double? ServiceCost = CustomerPackageServiceList.Where(x => x.IsARBEnabled).Sum(x => x.Total);
                    double ServiceCostTax = 0;
                    if (ServiceCost.HasValue && ServiceCost.Value > 0)
                    {
                        ServiceCost = ServiceCost - discountAmount;
                        #region Tax Calculations
                        Guid tempCustomerId = new Guid();
                        if (_Customer != null)
                        {
                            tempCustomerId = _Customer.CustomerId;
                        }
                        GlobalSetting GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(custommerCompany.CompanyId, tempCustomerId);
                        if (GetSalesTax != null)
                        {
                            ServiceCostTax = Math.Round((ServiceCost.Value * Convert.ToDouble(GetSalesTax.Value)) / 100, 2, MidpointRounding.AwayFromZero);
                        }
                        #endregion
                        _Customer.MonthlyMonitoringFee = ServiceCost.Value.ToString();
                        _Customer.BillAmount = defaultBillTaxVal ? (ServiceCost.Value + ServiceCostTax) : ServiceCost.Value;
                        _Customer.TotalTax = defaultBillTaxVal ? ServiceCostTax : 0;
                        _Customer.BillTax = defaultBillTaxVal;
                        _Util.Facade.CustomerFacade.UpdateCustomer(_Customer);
                    }
                    #endregion
                    CustomerExtended extended = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(_Customer.CustomerId);
                    if (extended != null)
                    {
                        extended.ContractStartDate = DateTime.Now.UTCCurrentTime();
                        _Util.Facade.CustomerFacade.UpdateCustomerExtended(extended);
                    }
                    else
                    {
                        extended = new CustomerExtended();
                        extended.CustomerId = _Customer.CustomerId;
                        extended.ContractStartDate = DateTime.Now.UTCCurrentTime();
                        _Util.Facade.CustomerFacade.InsertCustomerExtended(extended);
                    }
                }
                if (AfterSubmitDocumentSave == true)
                {
                    //_Customer.EstimatorId = EstimatorId;
                    result = IAgreeCustomerFileUpload(_Customer, _Company, new Guid(), agreementtempid.HasValue ? agreementtempid.Value : 0, true, firstpage.HasValue ? firstpage.Value : false, (ticketid.HasValue ? ticketid.Value : 0), (recreate.HasValue ? recreate.Value : false), (isinvoice.HasValue ? isinvoice.Value : false), (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : ""), (isestimator.HasValue ? isestimator.Value : false), (estid.HasValue ? estid.Value : 0), (userid != Guid.Empty ? userid : Guid.Empty), commercial.HasValue ? commercial.Value : false);
                }
                #region recreate agreement answer
                bool isques = false;

                var objsetting = _Util.Facade.GlobalSettingsFacade.GetGlobalsettingBySearchKeyAndCompanyId("ContractAgreementquestionnaire", _Company.CompanyId);
                if (objsetting != null)
                {
                    isques = Convert.ToBoolean(objsetting.Value);
                }
                if (isques == true)
                {
                    AgreementQuestionAnswerPDFModel model = new AgreementQuestionAnswerPDFModel();
                    model.Customer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(_Customer.CustomerId);
                    model.AgreementQuestion = _Util.Facade.AgreementFacade.GetAllAgreementQuestionByCustomerType(_Customer.Type);
                    model.AgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(_Customer.CustomerId);
                    int term = 0;
                    double contract;
                    string conterm = "";
                    if (model.Customer != null)
                    {
                        bool success = Double.TryParse(model.Customer.ContractTeam, out contract);
                        if (success)
                        {
                            term = Convert.ToInt32(Math.Round(contract * 12));
                            ViewBag.termid = term;
                            if (term > 1)
                            {
                                ViewBag.TermMonth = " month";
                            }
                            else
                            {
                                ViewBag.TermMonth = " month";
                            }
                        }
                        conterm = string.Concat(ViewBag.termid, ViewBag.TermMonth);
                        foreach (var item in model.AgreementQuestion)
                        {
                            item.Title = string.Format(item.Title, conterm);
                        }
                    }
                    ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("~/Views/Agreement/AgreementQuestionAnswerPDF.cshtml", model)
                    {
                        PageSize = Rotativa.Options.Size.A4,
                        PageOrientation = Rotativa.Options.Orientation.Portrait,
                        PageMargins = { Left = 1, Right = 1 },

                    };
                    byte[] applicationPDFData = actionPDF.BuildPdf(ControllerContext);
                    Random rand = new Random();
                    string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
                    var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(_Company.CompanyId).CompanyName.ReplaceSpecialChar();
                    var pdftempFolderName = string.Format(filename, comname) + _Customer.Id + "_AgreementAnswer.pdf";
                    string Serverfilename = FileHelper.GetFileFullPath(pdftempFolderName);
                    FileHelper.SaveFile(applicationPDFData, Serverfilename);
                    CustomerFile CustomerFile = new CustomerFile()
                    {
                        CompanyId = _Company.CompanyId,
                        FileId = Guid.NewGuid(),
                        CustomerId = _Customer.CustomerId,
                        FileDescription = _Customer.Id + "_Recreate_Agreement_Answers.pdf",
                        Filename = "/" + pdftempFolderName,
                        FileFullName = _Customer.Id + "_RecreateAgreementAnswer.pdf",
                        Uploadeddate = DateTime.Now.UTCCurrentTime(),
                        IsActive = true,
                        CreatedBy = _Customer.Soldby1,
                        CreatedDate = DateTime.Now.UTCCurrentTime(),
                        UpdatedBy = _Customer.Soldby1,
                        UpdatedDate = DateTime.Now.UTCCurrentTime(),
                        WMStatus = LabelHelper.WatermarkStatus.Pending,
                        AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                    };
                    _Util.Facade.CustomerFileFacade.InsertCustomerFile(CustomerFile);

                }
                #endregion
            }
            else
            {
                if (!Id.HasValue)
                    return Json(false);
                Customer _Customer = new Customer();
                CustomerCompany custommerCompany = new CustomerCompany();
                Guid CompanyId = new Guid();
                if (User.Identity.IsAuthenticated)
                {
                    var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
                    CompanyId = CurrentUser.CompanyId.Value;
                }
                else
                {
                    custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(Id.Value);
                    CompanyId = custommerCompany.CompanyId;
                }
                Company _Company = new Company { CompanyId = CompanyId };

                if (Id.Value > 0)
                {
                    _Customer = _Util.Facade.CustomerFacade.GetCustomersById(Id.Value);
                }
                //SalesCommisionUpdateInsert(_Customer, _Company);
                #region Agreement History
                var cusAgrHistory = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementHistory(_Customer.CustomerId, LabelHelper.CustomerAgreementHistory.AgreementComplete);
                if (cusAgrHistory == null)
                {
                    CustomerAgreement cusAgrModel = new CustomerAgreement()
                    {
                        CompanyId = custommerCompany.CompanyId,
                        CustomerId = _Customer.CustomerId,
                        IP = AppConfig.GetIP,
                        UserAgent = AppConfig.GetUserAgent,
                        Type = LabelHelper.CustomerAgreementHistory.AgreementComplete,
                        AddedDate = DateTime.UtcNow
                    };
                    _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(cusAgrModel);
                }
                #endregion
                if (custommerCompany.IsLead == true)
                {
                    _Customer.IsAgreement = true;
                    _Util.Facade.CustomerFacade.UpdateCustomer(_Customer);
                    Guid soldby = new Guid();
                    if (!string.IsNullOrWhiteSpace(_Customer.Soldby))
                    {
                        soldby = new Guid(_Customer.Soldby);
                    }
                    SendSignedAgreementNotification(CompanyId, soldby, _Customer.FirstName + " " + _Customer.LastName, _Customer.Id);
                    var TicketId = Guid.Empty;


                    var TicketDetails = _Util.Facade.TicketFacade.GetAgreementTicketByCustomerId(_Customer.CustomerId);
                    if (TicketDetails != null)
                    {
                        TicketId = TicketDetails.TicketId;
                    }

                    PackageCustomer packageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(_Customer.CustomerId);

                    #region Kazar Installation Ticket
                    Invoice tempinv = _Util.Facade.InvoiceFacade.GetByInvoiceId(invoiceid);
                    if (!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true && tempinv != null && tempinv.Status != LabelHelper.EstimateStatus.Signed)
                    {
                        #region Insert Ticket
                        //Guid TicketId = Guid.Empty;
                        Guid SoldBy = new Guid();
                        Guid.TryParse(_Customer.Soldby, out SoldBy);
                        CustomerAppointmentEquipment caEquipment = new CustomerAppointmentEquipment();
                        Ticket newTicket = new Ticket();

                        newTicket = new Ticket()
                        {
                            TicketId = Guid.NewGuid(),
                            CompanyId = CompanyId,
                            CustomerId = _Customer.CustomerId,
                            TicketType = LabelHelper.TicketType.Installtion,
                            CreatedBy = new Guid(LabelHelper.SystemUser.ID),
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            CompletionDate = DateTime.Now.UTCCurrentTime(),
                            Status = LabelHelper.TicketStatus.Created,
                            LastUpdatedBy = new Guid(LabelHelper.SystemUser.ID),
                            LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                            HasInvoice = false,
                            HasSurvey = false,
                            IsAgreementTicket = true
                        };
                        if (packageCustomer != null && packageCustomer.IsNFTTicket.HasValue && packageCustomer.IsNFTTicket.Value)
                        {
                            newTicket.TicketType = "Install NFT";
                        }
                        newTicket.Id = _Util.Facade.TicketFacade.InsertTicket(newTicket);
                        logger.WithProperty("tags", "ticket,insert").WithProperty("params", JsonConvert.SerializeObject(newTicket)).Trace("Ticket Id {Id}", newTicket.Id);
                        TicketId = newTicket.TicketId;
                        tempTicketId = newTicket.TicketId; ;

                        CustomerAppointment ca = new CustomerAppointment()
                        {
                            AppointmentId = newTicket.TicketId,
                            CompanyId = CompanyId,
                            CustomerId = _Customer.CustomerId,
                            EmployeeId = new Guid(LabelHelper.SystemUser.ID),
                            AppointmentType = newTicket.TicketType,
                            AppointmentDate = DateTime.Now.UTCCurrentTime(),
                            CreatedBy = User.Identity.Name,
                            LastUpdatedBy = User.Identity.Name,
                            LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                            IsAllDay = true,
                        };
                        ca.Id = (int)_Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppoinment(ca);
                        TicketUser TU = new TicketUser()
                        {
                            IsPrimary = true,
                            NotificationOnly = false,
                            AddedBy = SoldBy,
                            AddedDate = DateTime.Now.UTCCurrentTime(),
                            TiketId = newTicket.TicketId,
                            UserId = new Guid(LabelHelper.SystemUser.ID),
                        };
                        TU.Id = _Util.Facade.TicketFacade.InsertTicketUser(TU);

                        Equipment EquipmentDetails = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentName("Monthly Monitoring Rate");
                        caEquipment = new CustomerAppointmentEquipment()
                        {
                            AppointmentId = newTicket.TicketId,
                            EquipmentId = EquipmentDetails != null && EquipmentDetails.EquipmentId != null ? EquipmentDetails.EquipmentId : Guid.Empty,
                            Quantity = 1,
                            UnitPrice = tempinv.MonitoringAmount.HasValue ? tempinv.MonitoringAmount.Value : 0.0,
                            TotalPrice = tempinv.MonitoringAmount.HasValue ? tempinv.MonitoringAmount.Value : 0.0,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            CreatedBy = User.Identity.Name,
                            EquipName = EquipmentDetails != null && !string.IsNullOrWhiteSpace(EquipmentDetails.Name) ? EquipmentDetails.Name : "",
                            EquipDetail = EquipmentDetails != null && !string.IsNullOrWhiteSpace(EquipmentDetails.Description) ? EquipmentDetails.Description : "",
                            IsEquipmentRelease = false,
                            IsService = true,
                            CreatedByUid = SoldBy,
                            InstalledByUid = new Guid(LabelHelper.SystemUser.ID),
                            IsAgreementItem = true,
                            IsBaseItem = true,
                            OriginalUnitPrice = tempinv.MonitoringAmount.HasValue ? tempinv.MonitoringAmount.Value : 0.0,
                            IsInvoiceCreate = true,
                            IsNonCommissionable = false
                        };
                        _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(caEquipment);

                        #region Estimate Added in Ticket
                        List<InvoiceDetail> detlist = _Util.Facade.InvoiceFacade.GetInvoiceDetailsByInvoiceId(tempinv.InvoiceId);
                        if (detlist != null)
                        {
                            foreach (var item in detlist)
                            {
                                caEquipment = new CustomerAppointmentEquipment()
                                {
                                    AppointmentId = TicketId,
                                    EquipmentId = item.EquipmentId,
                                    CreatedBy = User.Identity.Name,
                                    EquipDetail = item.EquipDetail,
                                    EquipName = item.EquipName,
                                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                                    Quantity = item.Quantity.HasValue ? item.Quantity.Value : 0,
                                    UnitPrice = item.UnitPrice.HasValue ? item.UnitPrice.Value : 0,
                                    TotalPrice = item.TotalPrice.HasValue ? item.TotalPrice.Value : 0,
                                    IsAgreementItem = true,
                                    InstalledByUid = new Guid(LabelHelper.SystemUser.ID),
                                    CreatedByUid = SoldBy
                                };
                                _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(caEquipment);
                            }
                        }

                        double ServiceCost = tempinv.MonitoringAmount.HasValue ? tempinv.MonitoringAmount.Value : 0.0;
                        double ServiceCostTax = 0;
                        GlobalSetting GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(CompanyId, _Customer.CustomerId);
                        if (GetSalesTax != null)
                        {
                            ServiceCostTax = Math.Round((ServiceCost * Convert.ToDouble(GetSalesTax.Value)) / 100, 2, MidpointRounding.AwayFromZero);
                        }
                        _Customer.MonthlyMonitoringFee = ServiceCost.ToString();
                        _Customer.BillAmount = defaultBillTaxVal ? (ServiceCost + ServiceCostTax) : ServiceCost;
                        _Customer.TotalTax = defaultBillTaxVal ? ServiceCostTax : 0;
                        _Customer.BillTax = defaultBillTaxVal;
                        #endregion

                        #endregion

                        #region Create Invoice(If estimate is signed then don't need to create invoice)
                        if (!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true && tempinv != null && tempinv.Status != LabelHelper.EstimateStatus.Signed)
                        {
                            tempinv.Status = LabelHelper.EstimateStatus.Signed;
                            tempinv.LastUpdatedDate = DateTime.UtcNow;
                            _Util.Facade.InvoiceFacade.UpdateInvoice(tempinv);
                            Invoice _tempInv = new Invoice()
                            {
                                CustomerId = tempinv.CustomerId,
                                CompanyId = tempinv.CompanyId,
                                Amount = tempinv.Amount,
                                Tax = tempinv.Tax,
                                DiscountCode = tempinv.DiscountCode,
                                DiscountAmount = tempinv.DiscountAmount,
                                TotalAmount = tempinv.TotalAmount,
                                Status = LabelHelper.InvoiceStatus.Open,
                                InvoiceDate = tempinv.InvoiceDate,
                                IsEstimate = false,
                                IsBill = tempinv.IsBill,
                                BillingAddress = tempinv.BillingAddress,
                                DueDate = tempinv.DueDate,
                                Terms = tempinv.Terms,
                                ShippingAddress = tempinv.ShippingAddress,
                                ShippingVia = tempinv.ShippingVia,
                                ShippingDate = tempinv.ShippingDate,
                                TrackingNo = tempinv.TrackingNo,
                                ShippingCost = tempinv.ShippingCost,
                                Discountpercent = tempinv.Discountpercent,
                                BalanceDue = tempinv.BalanceDue,
                                Deposit = tempinv.Deposit,
                                Message = tempinv.Message,
                                TaxType = tempinv.TaxType,
                                Balance = tempinv.Balance,
                                Memo = tempinv.Memo,
                                InvoiceFor = LabelHelper.InvoiceFor.Invoice,
                                LateFee = tempinv.LateFee,
                                LateAmount = tempinv.LateAmount,
                                InstallDate = tempinv.InstallDate,
                                Description = tempinv.Description,
                                DiscountType = tempinv.DiscountType,
                                BillingCycle = tempinv.BillingCycle,
                                EstimateTerm = tempinv.EstimateTerm,
                                Signature = tempinv.Signature,
                                CancelReason = tempinv.CancelReason,
                                CreatedDate = tempinv.CreatedDate,
                                CreatedBy = tempinv.CreatedBy,
                                CreatedByUid = tempinv.CreatedByUid,
                                LastUpdatedDate = tempinv.LastUpdatedDate,
                                LastUpdatedByUid = tempinv.LastUpdatedByUid,
                                RefType = tempinv.RefType,
                                PaymentType = tempinv.PaymentType,
                                BookingId = tempinv.BookingId,
                                InstallationType = tempinv.InstallationType,
                                SignatureDate = tempinv.SignatureDate,
                                InvoiceEmailAddress = tempinv.InvoiceEmailAddress,
                                InvoiceCcEmailAddress = tempinv.InvoiceCcEmailAddress,
                                MonitoringAmount = tempinv.MonitoringAmount,
                                ContractTerm = tempinv.ContractTerm,
                                MonitoringDescription = tempinv.MonitoringDescription,
                                IsARBInvoice = tempinv.IsARBInvoice,
                                TransactionId = tempinv.TransactionId,
                                ForteStatus = tempinv.ForteStatus,
                                UpfrontMonth = tempinv.UpfrontMonth
                            };

                            //tempInv.IsEstimate = false;
                            //tempInv.InvoiceFor = LabelHelper.InvoiceFor.Invoice;
                            //tempInv.Status = LabelHelper.InvoiceStatus.Open;


                            _tempInv.Id = _Util.Facade.InvoiceFacade.InsertInvoice(_tempInv);
                            _tempInv.InvoiceId = _tempInv.Id.GenerateInvoiceNo();
                            _Util.Facade.InvoiceFacade.UpdateInvoice(_tempInv);
                            List<InvoiceDetail> invoiceList = _Util.Facade.InvoiceFacade.GetInvoiceDetailsByInvoiceId(tempinv.InvoiceId);
                            if (invoiceList != null)
                            {
                                foreach (var item in invoiceList)
                                {
                                    item.InvoiceId = _tempInv.InvoiceId;
                                    item.CreatedDate = DateTime.UtcNow;
                                    _Util.Facade.InvoiceFacade.InsertInvoiceDetails(item);
                                }
                            }
                            #region Added Monthly Fee as Invoice line item
                            Equipment _EquipmentDetails = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentName("Monthly Monitoring Rate");
                            InvoiceDetail _invDetls = new InvoiceDetail()
                            {
                                InvoiceId = _tempInv.InvoiceId,
                                InventoryId = Guid.Empty,
                                EquipmentId = _EquipmentDetails != null ? _EquipmentDetails.EquipmentId : Guid.Empty,
                                EquipName = "Product and Service",
                                EquipDetail = "Product and Service",
                                CompanyId = _tempInv.CompanyId,
                                Quantity = _tempInv != null && !string.IsNullOrWhiteSpace(_tempInv.UpfrontMonth) && _tempInv.UpfrontMonth != "-1" ? Convert.ToInt32(_tempInv.UpfrontMonth) : 0,
                                UnitPrice = _tempInv.MonitoringAmount,
                                TotalPrice = _tempInv.MonitoringAmount * (_tempInv != null && !string.IsNullOrWhiteSpace(_tempInv.UpfrontMonth) && _tempInv.UpfrontMonth != "-1" ? Convert.ToInt32(_tempInv.UpfrontMonth) : 0),
                                CreatedDate = DateTime.UtcNow,
                                CreatedBy = _tempInv.CreatedBy,
                                Taxable = defaultBillTaxVal
                            };
                            _Util.Facade.InvoiceFacade.InsertInvoiceDetails(_invDetls);
                            #endregion


                        }
                        #endregion
                    }

                    #endregion
                    #region Insert Monthly Monitoring Fee
                    #region ACH discount
                    double discountAmount = 0;
                    var objpayinfocus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayFor(_Customer.CustomerId);
                    if (objpayinfocus != null)
                    {
                        var objpayprofile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(objpayinfocus.PaymentInfoId);
                        if (objpayprofile != null && objpayprofile.Type.ToLower().IndexOf("ach") > -1)
                        {
                            var objglobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(custommerCompany.CompanyId, "ACHDiscount");
                            if (objglobal != null)
                            {
                                discountAmount = Convert.ToDouble(objglobal.Value);
                            }
                        }
                    }
                    #endregion
                    List<CustomerPackageService> CustomerPackageServiceList = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(_Customer.CustomerId, custommerCompany.CompanyId);
                    double? ServiceCostMMR = CustomerPackageServiceList.Where(x => x.IsARBEnabled).Sum(x => x.Total);
                    double ServiceCostTaxMMR = 0;
                    if (ServiceCostMMR.HasValue && ServiceCostMMR.Value > 0)
                    {
                        ServiceCostMMR = ServiceCostMMR - discountAmount;
                        #region Tax Calculations
                        Guid tempCustomerId = new Guid();
                        if (_Customer != null)
                        {
                            tempCustomerId = _Customer.CustomerId;
                        }
                        GlobalSetting GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(custommerCompany.CompanyId, tempCustomerId);
                        if (GetSalesTax != null)
                        {
                            ServiceCostTaxMMR = Math.Round((ServiceCostMMR.Value * Convert.ToDouble(GetSalesTax.Value)) / 100, 2, MidpointRounding.AwayFromZero);
                        }
                        #endregion
                        _Customer.MonthlyMonitoringFee = ServiceCostMMR.Value.ToString();
                        _Customer.BillAmount = defaultBillTaxVal ? (ServiceCostMMR.Value + ServiceCostTaxMMR) : ServiceCostMMR.Value;
                        _Customer.TotalTax = defaultBillTaxVal ? ServiceCostTaxMMR : 0;
                        _Customer.BillTax = defaultBillTaxVal;
                        _Util.Facade.CustomerFacade.UpdateCustomer(_Customer);
                    }
                    #endregion
                    _Util.Facade.CustomerFacade.UpdateCustomer(_Customer);

                    if (AfterSubmitDocumentSave == true)
                    {
                        //if (!string.IsNullOrWhiteSpace(EstimatorId))
                        //{
                        //    _Customer.EstimatorId = EstimatorId;
                        //}
                        result = IAgreeCustomerFileUpload(_Customer, _Company, TicketId, agreementtempid.HasValue ? agreementtempid.Value : 0, true, firstpage.HasValue ? firstpage.Value : false, (ticketid.HasValue ? ticketid.Value : 0), (recreate.HasValue ? recreate.Value : false), (isinvoice.HasValue ? isinvoice.Value : false), (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : ""), (isestimator.HasValue ? isestimator.Value : false), (estid.HasValue ? estid.Value : 0), (userid != Guid.Empty ? userid : Guid.Empty), (commercial.HasValue ? commercial.Value : false));
                    }
                    //if (result)
                    //{
                    //    //remove Invoice references from PaymentInfoCustomer table
                    //    //Update Invoice status if not paid
                    //    List<PaymentInfoCustomer> PICList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(_Customer.CustomerId);
                    //    foreach (var item in PICList)
                    //    {
                    //        if (!string.IsNullOrWhiteSpace(item.InvoiceId))
                    //        {

                    //            Invoice inv = _Util.Facade.InvoiceFacade.GetInvoiceByInvoiceId(item.InvoiceId);

                    //            if (inv != null && inv.Status != LabelHelper.InvoiceStatus.Paid && inv.Status != LabelHelper.InvoiceStatus.Init)
                    //            {
                    //                string TempStatus = inv.Status;

                    //                inv.Status = LabelHelper.InvoiceStatus.Cancelled;
                    //                inv.BalanceDue = 0;
                    //                _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                    //                if (TempStatus != inv.Status)
                    //                {
                    //                    bool newBool = inv.IsARBInvoice ?? false;

                    //                    #region log
                    //                    UserActivity ua = new UserActivity()
                    //                    {
                    //                        ActivityId = Guid.NewGuid(),
                    //                        PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                    //                        ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                    //                        // new paramiter
                    //                        Action = "4264,CustomerInvoicePayment,Public",
                    //                        StatsDate = DateTime.UtcNow,
                    //                        UserId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                    //                        UserName = _Customer.FirstName + " " + _Customer.LastName,
                    //                        ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + inv.Status + " #InvoiceId: " + inv.InvoiceId,
                    //                        IsARB = newBool,

                    //                        UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                    //                        UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                    //                    };
                    //                    Guid ActivityID = ua.ActivityId;
                    //                    _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                    //                    UserActivityCustomer uac = new UserActivityCustomer()
                    //                    {
                    //                        ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                    //                        CustomerId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                    //                        RefId = inv.InvoiceId,

                    //                    };
                    //                    _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                    //                    #endregion
                    //                }
                    //            }
                    //        }
                    //        item.IsPaid = false;
                    //        item.InvoiceId = "";
                    //        _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(item);

                    //    }
                    //}

                    CustomerGuidId = _Customer.CustomerId;


                    // Here is my recurring billing code   

                    //Guid RMRCompanyId = Guid.Empty;
                    //var customerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(_Customer.CustomerId);
                    //if (customerCompany != null) { RMRCompanyId = customerCompany.CompanyId; }
                    //var controller = DependencyResolver.Current.GetService<RecurringBillingController>();
                    //controller.UpdateRecurringBillingInformationByCustomerModification(_Customer.CustomerId, tempTicketId, _Customer.LastUpdatedByUid, RMRCompanyId);

                }
                else
                { 
                    Guid TicketId = IAgreeConvertLeadToCustomer(_Customer, _Company, (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : ""), (isinvoice.HasValue ? isinvoice.Value : false));
                    tempTicketId = TicketId;
                    result = TicketId != Guid.Empty && IAgreeLeadtoCustomerConvertQAEmail(_Customer, _Company);
                    result = result && IAgreeAllScheduleCalendar(_Customer, _Company);
                    if (AfterSubmitDocumentSave == true)
                    {
                        //if (!string.IsNullOrWhiteSpace(EstimatorId))
                        //{
                        //    _Customer.EstimatorId = EstimatorId;
                        //}
                        result = result && IAgreeCustomerFileUpload(_Customer, _Company, TicketId, agreementtempid.HasValue ? agreementtempid.Value : 0, true, firstpage.HasValue ? firstpage.Value : false, (ticketid.HasValue ? ticketid.Value : 0), (recreate.HasValue ? recreate.Value : false), (isinvoice.HasValue ? isinvoice.Value : false), (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : ""), (isestimator.HasValue ? isestimator.Value : false), (estid.HasValue ? estid.Value : 0), (userid != Guid.Empty ? userid : Guid.Empty), (commercial.HasValue ? commercial.Value : false));
                    }
                    Guid soldby = new Guid();
                    if (!string.IsNullOrWhiteSpace(_Customer.Soldby))
                    {
                        soldby = new Guid(_Customer.Soldby);
                    }
                    var result2 = result && SendSignedAgreementNotification(CompanyId, soldby, _Customer.FirstName + " " + _Customer.LastName, _Customer.Id);
                    bool isques = false;
                    bool isrecreate = recreate.HasValue ? recreate.Value : false;
                    bool isfirstpage = firstpage.HasValue ? firstpage.Value : false;
                    bool iscommercial = commercial.HasValue ? commercial.Value : false;
                    var objsetting = _Util.Facade.GlobalSettingsFacade.GetGlobalsettingBySearchKeyAndCompanyId("ContractAgreementquestionnaire", _Company.CompanyId);
                    if (objsetting != null)
                    {
                        isques = Convert.ToBoolean(objsetting.Value);
                    }
                    if (isrecreate == false && isfirstpage == false && isques == true)
                    {
                        AgreementQuestionAnswerPDFModel model = new AgreementQuestionAnswerPDFModel();
                        model.Customer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(_Customer.CustomerId);
                        model.AgreementQuestion = _Util.Facade.AgreementFacade.GetAllAgreementQuestionByCustomerType(_Customer.Type);
                        model.AgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(_Customer.CustomerId);
                        int term = 0;
                        double contract;
                        string conterm = "";
                        if (model.Customer != null)
                        {
                            bool success = Double.TryParse(model.Customer.ContractTeam, out contract);
                            if (success)
                            {
                                term = Convert.ToInt32(Math.Round(contract * 12));
                                ViewBag.termid = term;
                                if (term > 1)
                                {
                                    ViewBag.TermMonth = " month";
                                }
                                else
                                {
                                    ViewBag.TermMonth = " month";
                                }
                            }
                            conterm = string.Concat(ViewBag.termid, ViewBag.TermMonth);
                            foreach (var item in model.AgreementQuestion)
                            {
                                item.Title = string.Format(item.Title, conterm);
                            }
                        }
                        ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("~/Views/Agreement/AgreementQuestionAnswerPDF.cshtml", model)
                        {
                            PageSize = Rotativa.Options.Size.A4,
                            PageOrientation = Rotativa.Options.Orientation.Portrait,
                            PageMargins = { Left = 1, Right = 1 },

                        };
                        byte[] applicationPDFData = actionPDF.BuildPdf(ControllerContext);
                        Random rand = new Random();
                        string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
                        var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(_Company.CompanyId).CompanyName.ReplaceSpecialChar();
                        var pdftempFolderName = string.Format(filename, comname) + _Customer.Id + "_AgreementAnswer.pdf";
                        string Serverfilename = FileHelper.GetFileFullPath(pdftempFolderName);
                        FileHelper.SaveFile(applicationPDFData, Serverfilename);
                        CustomerFile CustomerFile = new CustomerFile()
                        {
                            CompanyId = _Company.CompanyId,
                            FileId = Guid.NewGuid(),
                            CustomerId = _Customer.CustomerId,
                            FileDescription = _Customer.Id + "_Agreement_Answer.pdf",
                            Filename = "/" + pdftempFolderName,
                            FileFullName = _Customer.Id + "_AgreementAnswer.pdf",
                            Uploadeddate = DateTime.Now.UTCCurrentTime(),
                            IsActive = true,
                            CreatedBy = _Customer.Soldby1,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            UpdatedBy = _Customer.Soldby1,
                            UpdatedDate = DateTime.Now.UTCCurrentTime(),
                            WMStatus = LabelHelper.WatermarkStatus.Pending,
                            AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                        };
                        _Util.Facade.CustomerFileFacade.InsertCustomerFile(CustomerFile);

                    }
                }
                if (result)
                {
                    string Cusname = "";
                    if (!String.IsNullOrWhiteSpace(_Customer.DBA))
                    {
                        Cusname = _Customer.DBA;
                    }
                    else if (!String.IsNullOrWhiteSpace(_Customer.BusinessName))
                    {
                        Cusname = _Customer.BusinessName;
                    }
                    else
                    {
                        Cusname = _Customer.FirstName + ' ' + _Customer.LastName;
                    }
                    #region Log for Sign 

                    UserActivity ua = new UserActivity()
                    {
                        ActivityId = Guid.NewGuid(),
                        PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                        ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                        // new paramiter
                        Action = "File Signed",
                        StatsDate = DateTime.UtcNow,
                        UserId = _Customer.CustomerId != null ? _Customer.CustomerId : Guid.NewGuid(),
                        UserName = Cusname,
                        ActionDisplyText = "Lead #" + _Customer.Id + " Signed and Submitted Smart Lead Agreement Document",


                        UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                        UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                    };
                    Guid ActivityID = ua.ActivityId;
                    _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                    UserActivityCustomer uac = new UserActivityCustomer()
                    {
                        ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                        CustomerId = _Customer.CustomerId != null ? _Customer.CustomerId : Guid.NewGuid(),
                        RefId = _Customer.Id.ToString(),

                    };
                    _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                    #endregion

                    #region Log for Convert 

                    UserActivity uaconvert = new UserActivity()
                    {
                        ActivityId = Guid.NewGuid(),
                        PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                        ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                        // new paramiter
                        Action = "Lead to Customer",
                        StatsDate = DateTime.UtcNow,
                        UserId = _Customer.CustomerId != null ? _Customer.CustomerId : Guid.NewGuid(),
                        UserName = Cusname,
                        ActionDisplyText = "Lead #" + _Customer.Id + " is Converted to Customer </br> Convertion Type: System Generated",


                        UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                        UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                    };
                    Guid ActivityIDConvert = uaconvert.ActivityId;
                    _Util.Facade.UserActivityFacade.InsertUserActivity(uaconvert);
                    UserActivityCustomer uacconvert = new UserActivityCustomer()
                    {
                        ActivityId = ActivityIDConvert != null ? ActivityIDConvert : Guid.NewGuid(),

                        CustomerId = _Customer.CustomerId != null ? _Customer.CustomerId : Guid.NewGuid(),
                        RefId = _Customer.Id.ToString(),

                    };
                    _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uacconvert);
                    #endregion
                    //List<PaymentInfoCustomer> PICList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(_Customer.CustomerId);
                    if (custommerCompany.IsLead == true)
                    {
                        CapturePayment(_Customer, custommerCompany.CompanyId, new Guid("22222222-2222-2222-2222-222222222222"), "SYSTEM ", false, null);
                    }
                    if (tempTicketId != Guid.Empty)
                    {
                        _Util.Facade.InvoiceFacade.UpdateInvoiceTicketIdByCustomerId(tempTicketId, _Customer.CustomerId);
                    }
                    SignSmartAgreementAppointmentEquipment(_Customer);
                    SMSConvertLeadToCustomer(_Customer.Id, tempTicketId);
                }
                CustomerGuidId = _Customer.CustomerId;
            }

            // Here is my recurring billing code   

            //if (CustomerGuidId != Guid.Empty)
            //{
            //    Invoice RMRInvoice = _Util.Facade.InvoiceFacade.GetInvoiceByCustomerId(CustomerGuidId);
            //    if (RMRInvoice != null) // && RMRInvoice.IsARBInvoice != null && RMRInvoice.IsARBInvoice.Value
            //    {
            //        var IsRMRActice = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(RMRInvoice.CompanyId, "IsRMRActive");
            //        if (IsRMRActice != null && IsRMRActice.Value.ToLower() == "true")
            //        {
            //            var controller = DependencyResolver.Current.GetService<RecurringBillingController>();
            //            controller.UpdateRecurringBillingInformationByCustomerModification(RMRInvoice.CustomerId, tempTicketId, RMRInvoice.LastUpdatedByUid, RMRInvoice.CompanyId, RMRInvoice.InvoiceId, "SmartLeads");
            //        }
            //    }
            //}

            return Json(result);
        }
        #endregion


        [HttpPost]
        public JsonResult LoadCustomerSignatureImage(string data, string LeadConvertId, string templateid, bool? firstpage, int? ticketid, bool? recreate, bool? isinvoice, string invoiceid, bool? CreateDocument, bool? isestimator, int? estid, Guid? userid, bool? commercial, bool? ContractSubmit,string EstimatorId)
        {
            Guid CompanyId = new Guid();
            //EstimatorId = "EST00001109";
            if (User.Identity.IsAuthenticated)
            {
                var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
                CompanyId = CurrentUser.CompanyId.Value;
            }
            else
            {
                CustomerCompany custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(int.Parse(LeadConvertId));
                CompanyId = custommerCompany.CompanyId;
            }

            bool uploadImage = false;
            string filePath = "";
            var leadID = LeadConvertId;
            string[] datasplit = data.Split(',');
            byte[] bytes = Convert.FromBase64String(datasplit[1]);
            Image image;
            using (MemoryStream ms = new MemoryStream(bytes))
            {
                image = Image.FromStream(ms);
                string tempFolder = ConfigurationManager.AppSettings["File.CustomerSignatureFile"];
                var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CompanyId).CompanyName.ReplaceSpecialChar();
                var FtempFolderName = string.Format(tempFolder, comname) + leadID + "Signature";
                Random rand = new Random();
                string FileName = rand.Next().ToString();
                FileName += "-___" + "Signature.png";
                string tempFolderPath = Server.MapPath("~/" + FtempFolderName);

                if (FileHelper.CreateFolderIfNeeded(tempFolderPath))
                {
                    try
                    {
                        image.Save(Path.Combine(tempFolderPath, FileName));
                        uploadImage = true;
                    }
                    catch (Exception)
                    {

                    }
                }
                filePath = string.Concat("/", FtempFolderName, "/", FileName);
            }
            var serverFile = Server.MapPath(filePath);
            int leadid = Convert.ToInt32(leadID);
            if (!System.IO.File.Exists(serverFile))
            {
                return Json(new { result = true, message = "File not exsists" });
            }
            Customer tmpCustomer = _Util.Facade.CustomerFacade.GetById(leadid);
            if (firstpage.HasValue && firstpage.Value == true)
            {
                CustomerSignature cs = new CustomerSignature()
                {
                    CustomerId = tmpCustomer.CustomerId,
                    ReferenceIdGuid = Guid.Empty,
                    ReferenceIdnvarchar = templateid,
                    Type = "First Page",
                    Signature = filePath,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    CreatedBy = tmpCustomer.CustomerId
                };
                _Util.Facade.CustomerSignatureFacade.InsertCustomerSignature(cs);

                tmpCustomer.IsContractSigned = true;
                _Util.Facade.CustomerFacade.UpdateCustomer(tmpCustomer);
            }
            else if (commercial.HasValue && commercial.Value == true)
            {
                CustomerSignature cs = new CustomerSignature()
                {
                    CustomerId = tmpCustomer.CustomerId,
                    ReferenceIdGuid = Guid.Empty,
                    ReferenceIdnvarchar = templateid,
                    Type = "Commercial",
                    Signature = filePath,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    CreatedBy = tmpCustomer.CustomerId
                };
                _Util.Facade.CustomerSignatureFacade.InsertCustomerSignature(cs);

                tmpCustomer.IsContractSigned = true;
                _Util.Facade.CustomerFacade.UpdateCustomer(tmpCustomer);
            }
            else if (isinvoice.HasValue && isinvoice.Value == true)
            {
                CustomerSignature cs = new CustomerSignature()
                {
                    CustomerId = tmpCustomer.CustomerId,
                    ReferenceIdGuid = Guid.Empty,
                    ReferenceIdnvarchar = templateid,
                    Type = "Estimate",
                    Signature = filePath,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    CreatedBy = tmpCustomer.CustomerId
                };
                _Util.Facade.CustomerSignatureFacade.InsertCustomerSignature(cs);

                tmpCustomer.IsContractSigned = true;
                _Util.Facade.CustomerFacade.UpdateCustomer(tmpCustomer);
            }
            else if (isestimator.HasValue && isestimator.Value == true)
            {
                CustomerSignature cs = new CustomerSignature()
                {
                    CustomerId = tmpCustomer.CustomerId,
                    ReferenceIdGuid = Guid.Empty,
                    ReferenceIdnvarchar = templateid,
                    Type = "Estimator",
                    Signature = filePath,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    CreatedBy = tmpCustomer.CustomerId
                };
                _Util.Facade.CustomerSignatureFacade.InsertCustomerSignature(cs);

                tmpCustomer.IsContractSigned = true;
                _Util.Facade.CustomerFacade.UpdateCustomer(tmpCustomer);
            }
            else if (recreate.HasValue && recreate.Value == true)
            {
                CustomerSignature cs = new CustomerSignature()
                {
                    CustomerId = tmpCustomer.CustomerId,
                    ReferenceIdGuid = Guid.Empty,
                    ReferenceIdnvarchar = templateid,
                    Type = "Recreate",
                    Signature = filePath,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    CreatedBy = tmpCustomer.CustomerId
                };
                _Util.Facade.CustomerSignatureFacade.InsertCustomerSignature(cs);

                tmpCustomer.IsContractSigned = true;
                _Util.Facade.CustomerFacade.UpdateCustomer(tmpCustomer);
            }
            else if (tmpCustomer != null && !string.IsNullOrWhiteSpace(templateid) && templateid != "0")
            {
                CustomerSignature cs = new CustomerSignature()
                {
                    CustomerId = tmpCustomer.CustomerId,
                    ReferenceIdGuid = Guid.Empty,
                    ReferenceIdnvarchar = templateid,
                    Type = "Agreement File",
                    Signature = filePath,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    CreatedBy = tmpCustomer.CustomerId
                };
                _Util.Facade.CustomerSignatureFacade.InsertCustomerSignature(cs);
            }
            else if (tmpCustomer != null)
            {
                if (!string.IsNullOrWhiteSpace(EstimatorId))
                {
                    Estimator estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(EstimatorId);
                    if (estimator != null)
                    {
                        estimator.EstimatorSignature = filePath;
                        _Util.Facade.EstimatorFacade.UpdateEstimator(estimator);
                    }
                }
                else
                {
                    tmpCustomer.Singature = filePath;
                    tmpCustomer.IsContractSigned = true;
                    tmpCustomer.CustomerSignatureDate = DateTime.Now.UTCCurrentTime();
                    _Util.Facade.CustomerFacade.UpdateCustomer(tmpCustomer);
                }
            }
            else
            {
                uploadImage = false;
                return Json(new { uploadImage = uploadImage, message = "Invalid customer." });
            }
            string status = "";
            var EmailReceiver = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByOnlyKey("SendContractSignEstimateSignAndFileSignNotificationEmail");
            if (EmailReceiver != null)
            {
                status = EmailReceiver.Value;
            }
            if (status == "true")
            {
                SendContractSignNotificationEmail(leadid, CompanyId);
            }
            if (uploadImage == true)
            {
                var objCusAgree = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByComIdAndCusIsAndSignAgreement(CompanyId, tmpCustomer.CustomerId);
                if (objCusAgree != null)
                {
                    if (objCusAgree.Id > 0)
                    {
                        objCusAgree.CompanyId = CompanyId;
                        objCusAgree.CustomerId = tmpCustomer.CustomerId;
                        objCusAgree.AddedDate = DateTime.UtcNow;
                        _Util.Facade.CustomerAgreementFacade.UpdateCustomerAgreement(objCusAgree);
                    }
                }
                if (objCusAgree == null)
                {
                    CustomerAgreement objCustomerAgreement = new CustomerAgreement()
                    {
                        CompanyId = CompanyId,
                        CustomerId = tmpCustomer.CustomerId,
                        IP = AppConfig.GetIP,
                        UserAgent = AppConfig.GetUserAgent,
                        Type = LabelHelper.CustomerAgreementLog.SignAgreement,
                        AddedDate = DateTime.UtcNow
                    };
                    _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(objCustomerAgreement);
                }

                #region Agreement History
                var cusAgrHistory = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementHistory(tmpCustomer.CustomerId, LabelHelper.CustomerAgreementHistory.AgreementSign);
                if (cusAgrHistory == null)
                {
                    CustomerAgreement cusAgrModel = new CustomerAgreement()
                    {
                        CompanyId = CompanyId,
                        CustomerId = tmpCustomer.CustomerId,
                        IP = AppConfig.GetIP,
                        UserAgent = AppConfig.GetUserAgent,
                        Type = LabelHelper.CustomerAgreementHistory.AgreementSign,
                        AddedDate = DateTime.UtcNow
                    };
                    _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(cusAgrModel);
                }
                #endregion
            }
            #region Customer File Upload
            Company _Company = new Company { CompanyId = CompanyId };
            bool AfterSignDocumentSave = false;
            GlobalSetting GlobSet = _Util.Facade.GlobalSettingsFacade.GetGlobalsettingBySearchKeyAndCompanyId("AfterSignDocumentSave", _Company.CompanyId);
            if (GlobSet != null && !string.IsNullOrWhiteSpace(GlobSet.Value))
            {
                if (GlobSet.Value == "true")
                {
                    AfterSignDocumentSave = true;
                }
            }
            if (CreateDocument.HasValue && CreateDocument == true && AfterSignDocumentSave)
            {
                int agreementtempid = 0;
                int.TryParse(templateid, out agreementtempid);
                var TicketId = Guid.Empty;
                var TicketDetails = _Util.Facade.TicketFacade.GetAgreementTicketByCustomerId(tmpCustomer.CustomerId);
                if (TicketDetails != null)
                {
                    TicketId = TicketDetails.TicketId;
                }
                if(!string.IsNullOrWhiteSpace(EstimatorId))
                {
                    tmpCustomer.EstimatorId = EstimatorId;
                } 
                bool result = IAgreeCustomerFileUpload(tmpCustomer, _Company, TicketId, agreementtempid, true, firstpage.HasValue ? firstpage.Value : false, (ticketid.HasValue ? ticketid.Value : 0), (recreate.HasValue ? recreate.Value : false), (isinvoice.HasValue ? isinvoice.Value : false), (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : ""), (isestimator.HasValue ? isestimator.Value : false), (estid.HasValue ? estid.Value : 0), (userid != Guid.Empty ? userid : Guid.Empty), commercial.HasValue ? commercial.Value : false);
            }
            #endregion

            #region Contract Sign And Submit
            if (ContractSubmit.HasValue && ContractSubmit.Value == true)
            {
                // SmartIAgreeSetupAndSubmit(int.Parse(LeadConvertId), recreate, int.Parse(templateid), firstpage, ticketid, isinvoice, invoiceid, isestimator, estid, userid, commercial);
            }
            #endregion
            return Json(new { uploadImage = uploadImage, UploadFilePath = AppConfig.DomainSitePath + filePath, LeadID = leadID }, "text/html");
        }
        [Authorize]
        [HttpPost]
        public JsonResult ConvertLeadToCustomer(string CustomerIdStr, int? Id, bool? ProceedWithoutPaymentMethod, int? agreementtempid, bool? firstpage, int? ticketid)
        {
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            Guid CustomerId = new Guid();
            Guid CommissionSoldBy = Guid.Empty;
            CustomerAppointmentEquipment caEquipment = new CustomerAppointmentEquipment();
            CreateInvoice Model = new CreateInvoice();
            Guid SoldBy = CurrentLoggedInUser.UserId;

            Guid.TryParse(CustomerIdStr, out CustomerId);
            Guid TicketAssignedTo = new Guid(LabelHelper.SystemUser.ID);
            string AppointmentStartTime = null;
            string AppointmentEndTime = null;
            bool IsAllDay = true;
            DateTime CompletionDate = DateTime.Now.UTCCurrentTime();
            Guid tempTicketId = Guid.Empty;
            SalesCommission SalesCommissionDetail = new SalesCommission();
            var result = false;
            if (CustomerId == Guid.Empty && Id == 0)
            {
                return Json(new { result = result, message = "No ID found." });
            }

            #region Get Customer
            Customer customerInfo = new Customer();
            if (Id.HasValue && Id > 0 && CustomerId == new Guid())
            {
                customerInfo = _Util.Facade.CustomerFacade.GetCustomersById(Id.Value);
            }
            else
            {
                customerInfo = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(CustomerId);
            }
            if (customerInfo != null)
            {
                CustomerId = customerInfo.CustomerId;
                Guid.TryParse(customerInfo.Soldby, out SoldBy);

                #region Lead Status Update

                string status = "";
                GlobalSetting ConvertedLeadStatus = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByOnlyKey("SetConvertedLeadStatusToSold");
                if (ConvertedLeadStatus != null)
                {
                    status = ConvertedLeadStatus.Value;
                }
                if (status == "true")
                {
                    customerInfo.Status = "Sold";
                    _Util.Facade.CustomerFacade.UpdateCustomer(customerInfo);
                }

                #endregion
            }
            else
            {
                return Json(new { result = result, message = "Customer not found." });
            }
            #endregion
            #region Check Default Billing Tax
            bool defaultBillTaxVal = true;
            GlobalSetting defaultBillTax = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByOnlyKey("DefaultCustomerBillingTax");
            if (defaultBillTax != null)
            {
                if (defaultBillTax.Value.ToLower() == "true")
                {
                    defaultBillTaxVal = true;
                }
                else
                {
                    defaultBillTaxVal = false;
                }
            }
            #endregion
            CustomerCompany CC = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(customerInfo.Id);
            Company tempComp = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CurrentLoggedInUser.CompanyId.Value);
            if (CC == null)
            {
                return Json(new { result = false, message = "Customer not found." });
            }
            #region For Customer Delete all previous Data
            if (CC.IsLead == false)
            {
                return Json(new { result = true, CID = Id });
            }
            #endregion


            PackageCustomer PackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(CustomerId);

            #region Get Recent Estimate 
            Invoice _tempInv = _Util.Facade.InvoiceFacade.GetInvoiceByCustomerId(CustomerId);
            #endregion

            if (PackageCustomer != null)
            {
                List<PaymentProfileCustomer> PaymentProfileList = _Util.Facade.CustomerFacade.GetAllPaymentProfileByCustomerId(customerInfo.CustomerId, CurrentLoggedInUser.CompanyId.Value);
                if ((PaymentProfileList == null || PaymentProfileList.Count == 0) && (!ProceedWithoutPaymentMethod.HasValue || ProceedWithoutPaymentMethod == false))
                {
                    return Json(new { result = false, message = "Do you want to proceed without giving the billing info?", noPayment = true });
                }
                bool LeadConvertResult = false;
                bool smsSendResult = false;
                if (CC.IsLead == true)
                {
                    LeadConvertResult = _Util.Facade.CustomerFacade.ConvertLeadToCustomer(CustomerId, CurrentLoggedInUser.CompanyId.Value, "Manually Converted");
                    if (LeadConvertResult == true)
                    {
                        result = true;
                    }
                }
                if (LeadConvertResult != false)
                {
                    result = LeadConvertResult;
                    //not required for customer
                    if (customerInfo != null)
                    {
                        customerInfo.LastUpdatedDate = DateTime.Now.UTCCurrentTime();
                        customerInfo.LastUpdatedBy = User.Identity.Name;
                        customerInfo.IsTechCallPassed = false;
                        customerInfo.IsDirect = false;
                        customerInfo.IsActive = true;
                        customerInfo.CustomerStatus = "6";
                        customerInfo.JoinDate = DateTime.Now.UTCCurrentTime();
                        customerInfo.SalesDate = DateTime.Today;
                        #region Insert Monthly Monitoring Fee
                        #region ACH discount
                        double discountAmount = 0;
                        var objpayinfocus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayFor(customerInfo.CustomerId);
                        if (objpayinfocus != null)
                        {
                            var objpayprofile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(objpayinfocus.PaymentInfoId);
                            if (objpayprofile != null && objpayprofile.Type.ToLower().IndexOf("ach") > -1)
                            {
                                var objglobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentLoggedInUser.CompanyId.Value, "ACHDiscount");
                                if (objglobal != null)
                                {
                                    discountAmount = Convert.ToDouble(objglobal.Value);
                                }
                            }
                        }
                        #endregion
                        List<CustomerPackageService> CustomerPackageServiceList = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(customerInfo.CustomerId, CurrentLoggedInUser.CompanyId.Value);
                        double? ServiceCost = CustomerPackageServiceList.Where(x => x.IsARBEnabled).Sum(x => x.Total);
                        double ServiceCostTax = 0;
                        if (ServiceCost.HasValue && ServiceCost.Value > 0)
                        {
                            ServiceCost = ServiceCost - discountAmount;
                            #region Tax Calculations
                            Guid tempCustomerId = new Guid();
                            if (customerInfo != null)
                            {
                                tempCustomerId = customerInfo.CustomerId;
                            }
                            GlobalSetting GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(CurrentLoggedInUser.CompanyId.Value, tempCustomerId);
                            if (GetSalesTax != null)
                            {
                                ServiceCostTax = Math.Round((ServiceCost.Value * Convert.ToDouble(GetSalesTax.Value)) / 100, 2, MidpointRounding.AwayFromZero);
                            }
                            #endregion
                            customerInfo.MonthlyMonitoringFee = ServiceCost.Value.ToString();
                            customerInfo.BillAmount = defaultBillTaxVal ? (ServiceCost.Value + ServiceCostTax) : ServiceCost.Value;
                            customerInfo.TotalTax = defaultBillTaxVal ? ServiceCostTax : 0;
                            customerInfo.BillTax = defaultBillTaxVal;
                        }
                        #endregion
                        result = _Util.Facade.CustomerFacade.UpdateCustomer(customerInfo);
                    }
                    //not required for customer
                    CustomerSnapshot ObjCutomerSnapshot = new CustomerSnapshot
                    {
                        CustomerId = CustomerId,
                        CompanyId = CurrentLoggedInUser.CompanyId.Value,
                        Description = "ConvertLeadToCustomer",
                        Logdate = DateTime.Now.UTCCurrentTime(),
                        Updatedby = User.Identity.Name
                    };
                    _Util.Facade.CustomerSnapshotFacade.InsertSnapshot(ObjCutomerSnapshot);
                    //not required for customer
                    //SMSConvertLeadToCustomer(customerInfo.Id);
                    smsSendResult = true;
                }
                //required for customer
                #region Insert Ticket 
                Ticket newTicket = new Ticket();
                if (customerInfo.MoveCustomerId != new Guid())
                {
                    newTicket = new Ticket()
                    {
                        TicketId = Guid.NewGuid(),
                        CompanyId = CurrentLoggedInUser.CompanyId.Value,
                        CustomerId = customerInfo.CustomerId,
                        TicketType = LabelHelper.TicketType.InstallMove,
                        CreatedBy = new Guid(LabelHelper.SystemUser.ID),
                        CreatedDate = DateTime.Now.UTCCurrentTime(),
                        CompletionDate = CompletionDate,
                        Status = LabelHelper.TicketStatus.Created,
                        LastUpdatedBy = new Guid(LabelHelper.SystemUser.ID),
                        LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                        HasInvoice = false,
                        HasSurvey = false,
                        IsAgreementTicket = true
                    };

                    if (PackageCustomer != null && PackageCustomer.IsNFTTicket.HasValue && PackageCustomer.IsNFTTicket.Value)
                    {
                        newTicket.TicketType = "Install NFT";
                    }

                    newTicket.Id = _Util.Facade.TicketFacade.InsertTicket(newTicket);
                    logger.WithProperty("tags", "ticket,insert").WithProperty("params", JsonConvert.SerializeObject(newTicket)).Trace("Ticket Id {Id}", newTicket.Id);
                    tempTicketId = newTicket.TicketId;
                }
                else if (customerInfo.TransferCustomerId.HasValue && customerInfo.TransferCustomerId.Value > 0)
                {
                    newTicket = new Ticket()
                    {
                        TicketId = Guid.NewGuid(),
                        CompanyId = CurrentLoggedInUser.CompanyId.Value,
                        CustomerId = customerInfo.CustomerId,
                        TicketType = LabelHelper.TicketType.Transfer,
                        CreatedBy = new Guid(LabelHelper.SystemUser.ID),
                        CreatedDate = DateTime.Now.UTCCurrentTime(),
                        CompletionDate = CompletionDate,
                        Status = LabelHelper.TicketStatus.Created,
                        LastUpdatedBy = new Guid(LabelHelper.SystemUser.ID),
                        LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                        HasInvoice = false,
                        HasSurvey = false,
                        IsAgreementTicket = true
                    };

                    if (PackageCustomer != null && PackageCustomer.IsNFTTicket.HasValue && PackageCustomer.IsNFTTicket.Value)
                    {
                        newTicket.TicketType = "Install NFT";
                    }

                    newTicket.Id = _Util.Facade.TicketFacade.InsertTicket(newTicket);
                    logger.WithProperty("tags", "ticket,insert").WithProperty("params", JsonConvert.SerializeObject(newTicket)).Trace("Ticket Id {Id}", newTicket.Id);
                    tempTicketId = newTicket.TicketId;
                }
                else
                {
                    newTicket = new Ticket()
                    {
                        TicketId = Guid.NewGuid(),
                        CompanyId = CurrentLoggedInUser.CompanyId.Value,
                        CustomerId = customerInfo.CustomerId,
                        TicketType = LabelHelper.TicketType.Installtion,
                        CreatedBy = new Guid(LabelHelper.SystemUser.ID),
                        CreatedDate = DateTime.Now.UTCCurrentTime(),
                        CompletionDate = CompletionDate,
                        Status = LabelHelper.TicketStatus.Created,
                        LastUpdatedBy = new Guid(LabelHelper.SystemUser.ID),
                        LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                        HasInvoice = false,
                        HasSurvey = false,
                        IsAgreementTicket = true
                    };

                    if (PackageCustomer != null && PackageCustomer.IsNFTTicket.HasValue && PackageCustomer.IsNFTTicket.Value)
                    {
                        newTicket.TicketType = "Install NFT";
                    }
                    newTicket.Id = _Util.Facade.TicketFacade.InsertTicket(newTicket);
                    logger.WithProperty("tags", "ticket,insert").WithProperty("params", JsonConvert.SerializeObject(newTicket)).Trace("Ticket Id {Id}", newTicket.Id);
                    tempTicketId = newTicket.TicketId;
                }
                if (smsSendResult == true)
                {
                    SMSConvertLeadToCustomer(customerInfo.Id, tempTicketId);
                }
                TicketUser TU = new TicketUser()
                {
                    IsPrimary = true,
                    NotificationOnly = false,
                    AddedBy = CurrentLoggedInUser.UserId,
                    AddedDate = DateTime.Now.UTCCurrentTime(),
                    TiketId = newTicket.TicketId,
                    UserId = TicketAssignedTo,
                };
                TU.Id = _Util.Facade.TicketFacade.InsertTicketUser(TU);
                CustomerAppointment ca = new CustomerAppointment()
                {
                    AppointmentId = newTicket.TicketId,
                    CompanyId = CurrentLoggedInUser.CompanyId.Value,
                    CustomerId = customerInfo.CustomerId,
                    EmployeeId = new Guid(LabelHelper.SystemUser.ID),
                    AppointmentType = newTicket.TicketType,
                    AppointmentDate = DateTime.Now.UTCCurrentTime(),
                    CreatedBy = User.Identity.Name,
                    LastUpdatedBy = User.Identity.Name,
                    LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                    IsAllDay = IsAllDay,
                    AppointmentStartTime = AppointmentStartTime,
                    AppointmentEndTime = AppointmentEndTime
                };
                ca.Id = (int)_Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppoinment(ca);


                var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(customerInfo.CustomerId);
                if (PackageCustomerDetails != null)
                {
                    var PackageBaseItem = _Util.Facade.PackageFacade.GetAllSmartPackageEquipmentServiceByPackageIdAndCompanyId(PackageCustomerDetails.PackageId, CurrentLoggedInUser.CompanyId.Value).Where(m => m.Type == "Service" || m.Type == "Include" || m.Type == "Device" || m.Type == "Optional");

                    List<CustomerPackageEqp> CustomerPackageEqpList = _Util.Facade.PackageFacade.GetCustomerPackageEqpListbyCustomerId(CurrentLoggedInUser.CompanyId.Value, customerInfo.CustomerId);
                    if (CustomerPackageEqpList != null)
                    {
                        foreach (var eqp in CustomerPackageEqpList)
                        {
                            if (eqp.IsTransfered == true)
                            {
                                var smartPackageEquipmentService = _Util.Facade.SmartPackageFacade.GetSmartPackageEquipmentServiceByPackageIdEquipmentId(PackageCustomerDetails.PackageId, eqp.EquipmentId);

                                bool IsBaseMainItem = (eqp.IsIncluded == true || eqp.IsDevice == true || eqp.IsOptionalEqp == true || eqp.IsServiceEquipment == true) ? true : false;
                                Equipment EquipmentDetails = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentId(eqp.EquipmentId);
                                caEquipment = new CustomerAppointmentEquipment()
                                {
                                    AppointmentId = newTicket.TicketId,
                                    EquipmentId = eqp.EquipmentId,
                                    Quantity = eqp.Quantity != null ? eqp.Quantity.Value : 0,
                                    UnitPrice = 0.0,
                                    TotalPrice = 0.0,
                                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                                    CreatedBy = User.Identity.Name,
                                    EquipName = EquipmentDetails.Name,
                                    EquipDetail = EquipmentDetails.Description,
                                    IsEquipmentRelease = true,
                                    IsService = false,
                                    CreatedByUid = SoldBy,
                                    InstalledByUid = new Guid(LabelHelper.SystemUser.ID),
                                    IsAgreementItem = true,
                                    IsBaseItem = IsBaseMainItem,
                                    IsTransfered = true,
                                    QuantityLeftEquipment = eqp.Quantity != null ? eqp.Quantity.Value : 0,
                                    IsEquipmentExist = true,
                                    IsInvoiceCreate = true,
                                    IsNonCommissionable = eqp.IsNonCommissionable,
                                };
                                _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(caEquipment);
                            }
                            else
                            {
                                bool IsBaseMainItem = (eqp.IsIncluded == true || eqp.IsDevice == true || eqp.IsOptionalEqp == true || eqp.IsServiceEquipment == true) ? true : false;
                                Equipment EquipmentDetails = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentId(eqp.EquipmentId);
                                if (EquipmentDetails != null)
                                {
                                    caEquipment = new CustomerAppointmentEquipment()
                                    {
                                        AppointmentId = newTicket.TicketId,
                                        EquipmentId = eqp.EquipmentId,
                                        Quantity = eqp.Quantity != null ? eqp.Quantity.Value : 0,
                                        UnitPrice = ((eqp.UnitPrice != null ? eqp.UnitPrice.Value : 0) - (eqp.DiscountUnitPricce.HasValue ? eqp.DiscountUnitPricce.Value : 0)),
                                        TotalPrice = eqp.Total != null ? eqp.Total.Value : 0,
                                        CreatedDate = DateTime.Now.UTCCurrentTime(),
                                        CreatedBy = User.Identity.Name,
                                        EquipName = EquipmentDetails.Name,
                                        EquipDetail = EquipmentDetails.Description,
                                        IsEquipmentRelease = false,
                                        IsService = false,
                                        CreatedByUid = SoldBy,
                                        InstalledByUid = new Guid(LabelHelper.SystemUser.ID),
                                        IsAgreementItem = true,
                                        IsBaseItem = IsBaseMainItem,
                                        IsInvoiceCreate = true,
                                        IsNonCommissionable = eqp.IsNonCommissionable,
                                        QuantityLeftEquipment = 0
                                    };
                                    _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(caEquipment);
                                }

                            }
                            eqp.AppointmentEquipmentIntId = caEquipment.Id;
                            eqp.AppointmentIntId = newTicket.Id;
                            _Util.Facade.SmartPackageFacade.UpdateCustomerPackageEqp(eqp);
                        }
                        List<CustomerPackageService> CustomerPackageServiceList = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(customerInfo.CustomerId, CurrentLoggedInUser.CompanyId.Value);
                        if (CustomerPackageServiceList != null)
                        {
                            foreach (var eqp in CustomerPackageServiceList)
                            {
                                var smartPackageEquipmentService = _Util.Facade.SmartPackageFacade.GetSmartPackageEquipmentServiceByPackageIdEquipmentId(PackageCustomerDetails.PackageId, eqp.EquipmentId);

                                bool IsBaseItem = PackageBaseItem.Where(m => m.EquipmentId == eqp.EquipmentId).Count() > 0;
                                Equipment EquipmentDetails = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentId(eqp.EquipmentId);
                                caEquipment = new CustomerAppointmentEquipment()
                                {
                                    AppointmentId = newTicket.TicketId,
                                    EquipmentId = eqp.EquipmentId,
                                    Quantity = 1,
                                    UnitPrice = eqp.UnitPrice,
                                    TotalPrice = eqp.Total != null ? eqp.Total.Value : 0,
                                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                                    CreatedBy = User.Identity.Name,
                                    EquipName = EquipmentDetails.Name,
                                    EquipDetail = EquipmentDetails.Description,
                                    IsEquipmentRelease = false,
                                    IsService = true,
                                    CreatedByUid = SoldBy,
                                    InstalledByUid = new Guid(LabelHelper.SystemUser.ID),
                                    IsAgreementItem = true,
                                    IsBaseItem = IsBaseItem,
                                    OriginalUnitPrice = smartPackageEquipmentService != null ? smartPackageEquipmentService.OriginalPrice : eqp.UnitPrice,
                                    IsInvoiceCreate = true,
                                    IsNonCommissionable = eqp.IsNonCommissionable
                                };
                                _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(caEquipment);
                                var WarrentyEquipment = _Util.Facade.EquipmentFacade.GetWarrentyEquipmentListByEquipmentId(eqp.EquipmentId);
                                if (WarrentyEquipment != null && WarrentyEquipment.Count > 0)
                                {
                                    var warrentypackagecus = _Util.Facade.PackageFacade.GetWarrentyPackageCustomerByCustomerIdAndPackageId(eqp.PackageId, eqp.CustomerId);
                                    if (warrentypackagecus != null)
                                    {
                                        warrentypackagecus.WarrentyAvailable = true;
                                        _Util.Facade.PackageFacade.UpdatePackageCustomer(warrentypackagecus);
                                    }
                                }
                                eqp.AppointmentEquipmentIntId = caEquipment.Id;
                                eqp.AppointmentIntId = newTicket.Id;
                                _Util.Facade.SmartPackageFacade.UpdateCustomerPackageService(eqp);
                            }
                        }
                    }
                }
                #endregion
                //required for customer
                #region File Upload 
                Company _Company = new Company()
                {
                    CompanyId = CurrentLoggedInUser.CompanyId.Value
                };
                //result = IAgreeCustomerFileUpload(customerInfo, _Company, newTicket.TicketId, agreementtempid.HasValue ? agreementtempid.Value : 0, false, firstpage.HasValue ? firstpage.Value : false, (ticketid.HasValue ? ticketid.Value : 0), false, false, "", false, 0, new Guid(), false);
                #endregion

                //required for customer
                CapturePayment(customerInfo, CurrentLoggedInUser.CompanyId.Value, new Guid("22222222-2222-2222-2222-222222222222"), "SYSTEM ", false, "menual");
                //required for customer
                if (tempTicketId != Guid.Empty)
                {
                    _Util.Facade.InvoiceFacade.UpdateInvoiceTicketIdByCustomerId(tempTicketId, customerInfo.CustomerId);
                }
                var objappointeqp = _Util.Facade.CustomerAppoinmentFacade.GetAllCustomerAppointmentEquipmentListByAppointmentId(newTicket.TicketId);
                if (objappointeqp != null && objappointeqp.Count > 0)
                {
                    foreach (var item in objappointeqp)
                    {
                        var objinvdetail = _Util.Facade.InvoiceFacade.GetInvoiceDetailByequipmentId(item.EquipmentId);
                        if (objinvdetail != null && objinvdetail.Count > 0)
                        {
                            foreach (var invdetail in objinvdetail)
                            {
                                var objinv = _Util.Facade.InvoiceFacade.GetInvoiceByCustomerIdInvoiceId(CustomerId, invdetail.InvoiceId);
                                if (objinv != null)
                                {
                                    item.ReferenceInvoiceId = objinv.InvoiceId;
                                    item.ReferenceInvDetailId = invdetail.Id;
                                    _Util.Facade.CustomerAppoinmentFacade.UpdateCustomerAppoinmentEquipment(item);
                                }
                            }
                        }
                    }
                }

                result = true;

            }
            #region Estimate Ticket
            else if (_tempInv != null)
            {
                bool LeadConvertResult = false;
                if (CC.IsLead == true)
                {
                    LeadConvertResult = _Util.Facade.CustomerFacade.ConvertLeadToCustomer(CustomerId, CurrentLoggedInUser.CompanyId.Value, "Manually Converted");
                    if (LeadConvertResult == true)
                    {
                        result = true;
                    }
                }
                if (LeadConvertResult != false)
                {
                    result = LeadConvertResult;
                    //not required for customer
                    if (customerInfo != null)
                    {
                        customerInfo.LastUpdatedDate = DateTime.Now.UTCCurrentTime();
                        customerInfo.LastUpdatedBy = User.Identity.Name;
                        customerInfo.IsTechCallPassed = false;
                        customerInfo.IsDirect = false;
                        customerInfo.IsActive = true;
                        //if (customerInfo.JoinDate.Value.ToString("MM/dd/yyyy") == DateTime.Now.UTCCurrentTime().ToString("MM/dd/yyyy"))
                        //{
                        //    customerInfo.CustomerStatus = "FirstCallClose";
                        //}
                        //else
                        //{
                        //    customerInfo.CustomerStatus = "FollowUp";
                        //}
                        customerInfo.CustomerStatus = "6";
                        customerInfo.SalesDate = DateTime.Today;
                        customerInfo.JoinDate = DateTime.Now.UTCCurrentTime();
                        //result = _Util.Facade.CustomerFacade.UpdateCustomer(customerInfo);
                    }
                    //not required for customer
                    CustomerSnapshot ObjCutomerSnapshot = new CustomerSnapshot
                    {
                        CustomerId = CustomerId,
                        CompanyId = CurrentLoggedInUser.CompanyId.Value,
                        Description = "ConvertLeadToCustomer",
                        Logdate = DateTime.Now.UTCCurrentTime(),
                        Updatedby = User.Identity.Name
                    };
                    _Util.Facade.CustomerSnapshotFacade.InsertSnapshot(ObjCutomerSnapshot);

                    //not required for customer
                    //SMSConvertLeadToCustomer(customerInfo.Id);
                }

                #region Insert Ticket 
                Guid TicketId = Guid.Empty;
                //Guid SoldByEst = new Guid();
                //Guid.TryParse(customerInfo.Soldby, out SoldByEst);
                //CustomerAppointmentEquipment caEquipmentEst = new CustomerAppointmentEquipment();
                Ticket newTicket = new Ticket();

                newTicket = new Ticket()
                {
                    TicketId = Guid.NewGuid(),
                    CompanyId = CurrentLoggedInUser.CompanyId.Value,
                    CustomerId = CustomerId,
                    TicketType = LabelHelper.TicketType.Installtion,
                    CreatedBy = new Guid(LabelHelper.SystemUser.ID),
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    CompletionDate = DateTime.Now.UTCCurrentTime(),
                    Status = LabelHelper.TicketStatus.Created,
                    LastUpdatedBy = new Guid(LabelHelper.SystemUser.ID),
                    LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                    HasInvoice = false,
                    HasSurvey = false,
                    IsAgreementTicket = true
                };
                if (PackageCustomer != null && PackageCustomer.IsNFTTicket.HasValue && PackageCustomer.IsNFTTicket.Value)
                {
                    newTicket.TicketType = "Install NFT";
                }
                newTicket.Id = _Util.Facade.TicketFacade.InsertTicket(newTicket);
                logger.WithProperty("tags", "ticket,insert").WithProperty("params", JsonConvert.SerializeObject(newTicket)).Trace("Ticket Id {Id}", newTicket.Id);
                if (newTicket != null)
                {
                    _Util.Facade.InvoiceFacade.UpdateInvoiceTicketIdByCustomerId(newTicket.TicketId, newTicket.CustomerId);
                }
                TicketId = newTicket.TicketId;

                CustomerAppointment ca = new CustomerAppointment()
                {
                    AppointmentId = newTicket.TicketId,
                    CompanyId = CurrentLoggedInUser.CompanyId.Value,
                    CustomerId = CustomerId,
                    EmployeeId = new Guid(LabelHelper.SystemUser.ID),
                    AppointmentType = newTicket.TicketType,
                    AppointmentDate = DateTime.Now.UTCCurrentTime(),
                    CreatedBy = User.Identity.Name,
                    LastUpdatedBy = User.Identity.Name,
                    LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                    IsAllDay = true,
                };
                ca.Id = (int)_Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppoinment(ca);
                TicketUser TU = new TicketUser()
                {
                    IsPrimary = true,
                    NotificationOnly = false,
                    AddedBy = SoldBy,
                    AddedDate = DateTime.Now.UTCCurrentTime(),
                    TiketId = newTicket.TicketId,
                    UserId = new Guid(LabelHelper.SystemUser.ID),
                };
                TU.Id = _Util.Facade.TicketFacade.InsertTicketUser(TU);

                Equipment EquipmentDetails = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentName("Monthly Monitoring Rate");
                caEquipment = new CustomerAppointmentEquipment()
                {
                    AppointmentId = newTicket.TicketId,
                    EquipmentId = EquipmentDetails != null && EquipmentDetails.EquipmentId != null ? EquipmentDetails.EquipmentId : Guid.Empty,
                    Quantity = 1,
                    UnitPrice = _tempInv.MonitoringAmount.HasValue ? _tempInv.MonitoringAmount.Value : 0.0,
                    TotalPrice = _tempInv.MonitoringAmount.HasValue ? _tempInv.MonitoringAmount.Value : 0.0,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    CreatedBy = User.Identity.Name,
                    EquipName = EquipmentDetails != null && !string.IsNullOrWhiteSpace(EquipmentDetails.Name) ? EquipmentDetails.Name : "",
                    EquipDetail = EquipmentDetails != null && !string.IsNullOrWhiteSpace(EquipmentDetails.Description) ? EquipmentDetails.Description : "",
                    IsEquipmentRelease = false,
                    IsService = true,
                    CreatedByUid = SoldBy,
                    InstalledByUid = new Guid(LabelHelper.SystemUser.ID),
                    IsAgreementItem = true,
                    IsBaseItem = true,
                    OriginalUnitPrice = _tempInv.MonitoringAmount.HasValue ? _tempInv.MonitoringAmount.Value : 0.0,
                    IsInvoiceCreate = true,
                    IsNonCommissionable = false
                };
                _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(caEquipment);

                #region Estimate Added in Ticket
                List<InvoiceDetail> detlist = _Util.Facade.InvoiceFacade.GetInvoiceDetailsByInvoiceId(_tempInv.InvoiceId);
                foreach (var item in detlist)
                {
                    caEquipment = new CustomerAppointmentEquipment()
                    {
                        AppointmentId = TicketId,
                        EquipmentId = item.EquipmentId,
                        CreatedBy = User.Identity.Name,
                        EquipDetail = item.EquipDetail,
                        EquipName = item.EquipName,
                        CreatedDate = DateTime.Now.UTCCurrentTime(),
                        Quantity = item.Quantity.HasValue ? item.Quantity.Value : 0,
                        UnitPrice = item.UnitPrice.HasValue ? item.UnitPrice.Value : 0,
                        TotalPrice = item.TotalPrice.HasValue ? item.TotalPrice.Value : 0,
                        IsAgreementItem = true,
                        CreatedByUid = SoldBy,
                        InstalledByUid = new Guid(LabelHelper.SystemUser.ID)
                    };
                    _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(caEquipment);
                }
                #endregion
                //var WarrentyEquipment = _Util.Facade.EquipmentFacade.GetWarrentyEquipmentListByEquipmentId(eqp.EquipmentId);
                //if (WarrentyEquipment != null && WarrentyEquipment.Count > 0)
                //{
                //    var warrentypackagecus = _Util.Facade.PackageFacade.GetWarrentyPackageCustomerByCustomerIdAndPackageId(eqp.PackageId, eqp.CustomerId);
                //    if (warrentypackagecus != null)
                //    {
                //        warrentypackagecus.WarrentyAvailable = true;
                //        _Util.Facade.PackageFacade.UpdatePackageCustomer(warrentypackagecus);
                //    }
                //}

                #endregion
                double ServiceCost = _tempInv.MonitoringAmount.HasValue ? _tempInv.MonitoringAmount.Value : 0.0;
                double ServiceCostTax = 0;
                GlobalSetting GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(CurrentLoggedInUser.CompanyId.Value, CustomerId);
                if (GetSalesTax != null)
                {
                    ServiceCostTax = Math.Round((ServiceCost * Convert.ToDouble(GetSalesTax.Value)) / 100, 2, MidpointRounding.AwayFromZero);
                }
                customerInfo.MonthlyMonitoringFee = ServiceCost.ToString();
                customerInfo.BillAmount = defaultBillTaxVal ? (ServiceCost + ServiceCostTax) : ServiceCost;
                customerInfo.TotalTax = defaultBillTaxVal ? ServiceCostTax : 0;
                customerInfo.BillTax = defaultBillTaxVal;

                CustomerCompany cc = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerIdAndCompanyId(CustomerId, CurrentLoggedInUser.CompanyId.Value);
                cc.IsLead = false;
                _Util.Facade.CustomerFacade.UpdateCustomerCompany(cc);
                //customerInfo.JoinDate = DateTime.Now.UTCCurrentTime();
                //customerInfo.IsActive = true;
                _Util.Facade.CustomerFacade.UpdateCustomer(customerInfo);

                List<InvoiceDetail> invDetList = _Util.Facade.InvoiceFacade.GetInvoiceDetialsListByInvoiceId(_tempInv.InvoiceId);

                #region Make invoice  
                _tempInv.Status = LabelHelper.EstimateStatus.SentToCustomer;
                _tempInv.LastUpdatedDate = DateTime.UtcNow;
                _Util.Facade.InvoiceFacade.UpdateInvoice(_tempInv);
                Invoice tempInv = new Invoice()
                {
                    CustomerId = _tempInv.CustomerId,
                    CompanyId = _tempInv.CompanyId,
                    Amount = _tempInv.Amount,
                    Tax = _tempInv.Tax,

                    DiscountCode = _tempInv.DiscountCode,
                    DiscountAmount = _tempInv.DiscountAmount,
                    TotalAmount = _tempInv.TotalAmount,
                    Status = LabelHelper.InvoiceStatus.Open,
                    InvoiceDate = _tempInv.InvoiceDate,
                    IsEstimate = false,
                    IsBill = _tempInv.IsBill,
                    BillingAddress = _tempInv.BillingAddress,
                    DueDate = _tempInv.DueDate,
                    Terms = _tempInv.Terms,
                    ShippingAddress = _tempInv.ShippingAddress,
                    ShippingVia = _tempInv.ShippingVia,
                    ShippingDate = _tempInv.ShippingDate,
                    TrackingNo = _tempInv.TrackingNo,
                    ShippingCost = _tempInv.ShippingCost,
                    Discountpercent = _tempInv.Discountpercent,
                    BalanceDue = _tempInv.BalanceDue,
                    Deposit = _tempInv.Deposit,
                    Message = _tempInv.Message,
                    TaxType = _tempInv.TaxType,
                    Balance = _tempInv.Balance,
                    Memo = _tempInv.Memo,
                    InvoiceFor = LabelHelper.InvoiceFor.Invoice,
                    LateFee = _tempInv.LateFee,
                    LateAmount = _tempInv.LateAmount,
                    InstallDate = _tempInv.InstallDate,
                    Description = _tempInv.Description,
                    DiscountType = _tempInv.DiscountType,
                    BillingCycle = _tempInv.BillingCycle,
                    EstimateTerm = _tempInv.EstimateTerm,
                    Signature = _tempInv.Signature,
                    CancelReason = _tempInv.CancelReason,
                    CreatedDate = _tempInv.CreatedDate,
                    CreatedBy = _tempInv.CreatedBy,
                    CreatedByUid = _tempInv.CreatedByUid,
                    LastUpdatedDate = _tempInv.LastUpdatedDate,
                    LastUpdatedByUid = _tempInv.LastUpdatedByUid,
                    RefType = _tempInv.RefType,
                    PaymentType = _tempInv.PaymentType,
                    BookingId = _tempInv.BookingId,
                    InstallationType = _tempInv.InstallationType,
                    SignatureDate = _tempInv.SignatureDate,
                    InvoiceEmailAddress = _tempInv.InvoiceEmailAddress,
                    InvoiceCcEmailAddress = _tempInv.InvoiceCcEmailAddress,
                    MonitoringAmount = _tempInv.MonitoringAmount,
                    ContractTerm = _tempInv.ContractTerm,
                    MonitoringDescription = _tempInv.MonitoringDescription,
                    IsARBInvoice = _tempInv.IsARBInvoice,
                    TransactionId = _tempInv.TransactionId,
                    ForteStatus = _tempInv.ForteStatus,
                    UpfrontMonth = _tempInv.UpfrontMonth
                };

                //tempInv.IsEstimate = false;
                //tempInv.InvoiceFor = LabelHelper.InvoiceFor.Invoice;
                //tempInv.Status = LabelHelper.InvoiceStatus.Open;


                tempInv.Id = _Util.Facade.InvoiceFacade.InsertInvoice(tempInv);
                tempInv.InvoiceId = tempInv.Id.GenerateInvoiceNo();
                _Util.Facade.InvoiceFacade.UpdateInvoice(tempInv);

                foreach (var item in invDetList)
                {
                    item.InvoiceId = tempInv.InvoiceId;
                    item.CreatedDate = DateTime.UtcNow;
                    _Util.Facade.InvoiceFacade.InsertInvoiceDetails(item);
                }
                #region Added Monthly Fee as Invoice line item
                Equipment _EquipmentDetails = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentName("Monthly Monitoring Rate");
                InvoiceDetail _invDetls = new InvoiceDetail()
                {
                    InvoiceId = tempInv.InvoiceId,
                    InventoryId = Guid.Empty,
                    EquipmentId = _EquipmentDetails != null ? _EquipmentDetails.EquipmentId : Guid.Empty,
                    EquipName = "Product and Service",
                    EquipDetail = "Product and Service",
                    CompanyId = tempInv.CompanyId,
                    Quantity = tempInv != null && !string.IsNullOrWhiteSpace(tempInv.UpfrontMonth) && tempInv.UpfrontMonth != "-1" ? Convert.ToInt32(tempInv.UpfrontMonth) : 0,
                    UnitPrice = tempInv.MonitoringAmount,
                    TotalPrice = tempInv.MonitoringAmount * (tempInv != null && !string.IsNullOrWhiteSpace(tempInv.UpfrontMonth) && tempInv.UpfrontMonth != "-1" ? Convert.ToInt32(tempInv.UpfrontMonth) : 0),
                    CreatedDate = DateTime.UtcNow,
                    CreatedBy = tempInv.CreatedBy,
                    Taxable = defaultBillTaxVal
                };
                _Util.Facade.InvoiceFacade.InsertInvoiceDetails(_invDetls);
                #endregion
                #endregion

                #region Make the Estimate_Signed.pdf file
                Model = GetCreateInvoiceModel(_tempInv, invDetList, tempComp, customerInfo);
                Model.CompanyInfo = _Util.Facade.GlobalSettingsFacade.GetCompanyAddressFormat(CurrentLoggedInUser.CompanyId.Value);
                Model.Invoice.InvoiceId = Model.Invoice.Id.GenerateEstimateNo();

                #region Insert Customer Agreement
                //Model.Invoice.CustomerAgreement
                CustomerAgreement CustomerAgreement = new CustomerAgreement()
                {
                    CompanyId = CurrentLoggedInUser.CompanyId.Value,
                    CustomerId = CustomerId,
                    IP = AppConfig.GetIP,
                    UserAgent = AppConfig.GetUserAgent,
                    Type = LabelHelper.CustomerAgreementLog.SubmitEstimate,
                    InvoiceId = _tempInv.Id.GenerateEstimateNo(),
                    AddedDate = DateTime.Now.UTCCurrentTime(),
                };
                _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(CustomerAgreement);
                #endregion

                Model.Invoice.CustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByCompanyIdAndCustomerIdAndInvoiceId(CurrentLoggedInUser.CompanyId.Value, CustomerId, _tempInv.Id.GenerateEstimateNo());
                //ViewBag.CompanyId = tempComp.CompanyId.ToString();
                Model.InvoiceSetting = new InvoiceSetting();
                string settingskey = @" 'InvoiceSettingsShipping', 'InvoiceSettingsDiscount', 'InvoiceSettingsDeposit'";
                List<GlobalSetting> printsetting = _Util.Facade.GlobalSettingsFacade.GetInvoiceSettingListByCompanyIdAndKey(settingskey, CurrentLoggedInUser.CompanyId.Value);
                foreach (var print in printsetting)
                {
                    if (print.Value.ToLower() == "true")
                    {
                        if (print.SearchKey == "InvoiceSettingsDeposit")
                        {
                            Model.InvoiceSetting.DepositSetting = true;
                        }
                        if (print.SearchKey == "InvoiceSettingsDiscount")
                        {
                            Model.InvoiceSetting.DiscountSetting = true;
                        }
                        if (print.SearchKey == "InvoiceSettingsShipping")
                        {
                            Model.InvoiceSetting.ShippingSetting = true;
                        }
                    }
                }
                GlobalSetting monitoringVal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(Model.Invoice.CompanyId, "EstimateMonitoringAmount");
                GlobalSetting contractTerm = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(Model.Invoice.CompanyId, "EstimateContractTerm");
                GlobalSetting monitoringDes = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(Model.Invoice.CompanyId, "EstimateMonitoringDescription");
                if (monitoringDes != null)
                {
                    Model.ShowEstimateMonitoringDescription = monitoringDes.Value.ToLower() == "true" ? true : false;
                }
                else
                {
                    Model.ShowEstimateMonitoringDescription = false;
                }
                if (monitoringVal != null)
                {
                    Model.ShowEstimateMonitoringAmount = monitoringVal.Value.ToLower() == "true" ? true : false;
                }
                else
                {
                    Model.ShowEstimateMonitoringAmount = false;
                }
                if (contractTerm != null)
                {
                    Model.ShowEstimateContractTerm = contractTerm.Value.ToLower() == "true" ? true : false;
                }
                else
                {
                    Model.ShowEstimateContractTerm = false;
                }
                ViewAsPdf EstimateActionPdf = new Rotativa.ViewAsPdf("~/Views/Estimate/EstimatePdf.cshtml", Model)
                {
                    //FileName = "TestView.pdf",
                    PageSize = Rotativa.Options.Size.A4,
                    PageOrientation = Rotativa.Options.Orientation.Portrait,
                    PageMargins = { Left = 1, Right = 1 },

                };
                byte[] EstimatePdfData = EstimateActionPdf.BuildPdf(ControllerContext);

                #region Save Estimate.pdf to file System  
                string estimateno = Model.Invoice.Id.GenerateEstimateNo();
                string filename = ConfigurationManager.AppSettings["File.EstimateFiles"];
                var comname = tempComp.CompanyName.ReplaceSpecialChar();
                filename = string.Format(filename, comname);
                filename += DateTime.Now.UTCCurrentTime().Year.ToString()
                    + "/" + DateTime.Now.UTCCurrentTime().Month.ToString()
                    + "/" + estimateno + "_Signed.pdf";
                string Serverfilename = FileHelper.GetFileFullPath(filename);
                FileHelper.SaveFile(EstimatePdfData, Serverfilename);
                #endregion

                #region Save CustomerFile
                _Util.Facade.CustomerFileFacade.SaveEstimatePdfFile(AppConfig.DomainSitePath + filename, estimateno, CustomerId, CurrentLoggedInUser.CompanyId.Value, true);
                #endregion

                #endregion
            }
            #endregion
            else
            {
                result = _Util.Facade.CustomerFacade.ConvertLeadToCustomer(CustomerId, CurrentLoggedInUser.CompanyId.Value, LabelHelper.CustomerConvertType.ManuallyConverted);

            }


            if (result)
            {
                base.AddUserActivityForCustomer("Lead #" + customerInfo.Id + " is Manually Converted to Customer", LabelHelper.ActivityAction.Create, CustomerId, null, null);

            }

            // Here is my recurring billing code   
            //Invoice RMRInvoice = _Util.Facade.InvoiceFacade.GetInvoiceByCustomerId(customerInfo.CustomerId);
            //if (RMRInvoice != null) //  && RMRInvoice.IsARBInvoice != null && RMRInvoice.IsARBInvoice.Value
            //{
            //    var IsRMRActice = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(RMRInvoice.CompanyId, "IsRMRActive");
            //    if (IsRMRActice != null && IsRMRActice.Value.ToLower() == "true")
            //    {
            //        var controller = DependencyResolver.Current.GetService<RecurringBillingController>();
            //        controller.UpdateRecurringBillingInformationByCustomerModification(RMRInvoice.CustomerId, tempTicketId, RMRInvoice.LastUpdatedByUid, RMRInvoice.CompanyId, RMRInvoice.InvoiceId, "SmartLeads");
            //    }
            //}
            return Json(new { result = result, CID = Id });
        }

        public JsonResult SendEcontract(Guid CustomerId, string PaymentDate, string InstallStartDate, string InstallFinishDate, SurveyQuestion Questions, PersonalGuarantee personalGuarantee, string from, int PromotionMonth, int PrepaidMonth, double? ActivitionFee, int? ContactId, string ContractType)
        {
            bool result = false;
            bool IsConverted = false;
            string Message = "";
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;

            string userName = "";
            string password = "";

            string Login = "";
            string Password = "";
            var endPointAddress = new EndpointAddress("https://senti.monitronics.net/eContractAPIUAT");
            #region Credentials

            var UserIdGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "BrinksUserId");
            if (UserIdGlobal != null)
            {
                Login = UserIdGlobal.Value;
            }
            var PasswordGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "BrinksPassword");
            if (PasswordGlobal != null)
            {
                Password = PasswordGlobal.Value;
            }

            var EContractUserIdGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "EContractUserName");
            if (UserIdGlobal != null)
            {
                userName = EContractUserIdGlobal.Value;
            }
            var EContractPasswordGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "EContractPassword");
            if (PasswordGlobal != null)
            {
                password = EContractPasswordGlobal.Value;
            }
            var BrinksInProductionGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "BrinksInProduction");
            if (BrinksInProductionGlobal != null && BrinksInProductionGlobal.Value.ToLower() == "true")
            {
                endPointAddress = new EndpointAddress("https://mimasweb.monitronics.net/eContractAPI");
            }
            else
            {
                endPointAddress = new EndpointAddress("https://senti.monitronics.net/eContractAPIUAT");
            }


            #endregion
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;

            var basicHttpBinding = new BasicHttpBinding(
                              BasicHttpSecurityMode.TransportWithMessageCredential);
            basicHttpBinding.Security.Message.ClientCredentialType =
                                                 BasicHttpMessageCredentialType.UserName;
            try
            {
                using (HS.Econtract.eContractApi.VirtualInterfaceClient client = new HS.Econtract.eContractApi.VirtualInterfaceClient(basicHttpBinding, endPointAddress))
                {

                    client.ClientCredentials.UserName.UserName = userName;
                    client.ClientCredentials.UserName.Password = password;
                    AuthenticationResult2 authresult = client.AuthenticateUser2(Login, Password);
                    if (authresult != null)
                    {

                        Customer cus = _Util.Facade.CustomerFacade.GetCustomerByCustomerGuidId(CustomerId);
                        #region Emergency Contact Ready
                        List<EmergencyContact> emgContact = _Util.Facade.EmergencyContactFacade.GetAllEmergencyContactByCustomerId(CustomerId);
                        List<ContactItem> contactItemList = new List<ContactItem>();
                        ContactItem contact = new ContactItem();
                        int order = 1;

                        if (emgContact != null && emgContact.Count > 0)
                        {
                            foreach (var item in emgContact)
                            {
                                contact = new ContactItem();
                                contact.Name = item.FirstName + " " + item.LastName;
                                contact.Phone = item.Phone;
                                contact.UserNumber = order.ToString();
                                if (cus.PhoneType == "HO")
                                {
                                    contact.PhoneType = PhoneTypeEnum.Home;
                                }
                                else if (cus.PhoneType == "MB")
                                {
                                    contact.PhoneType = PhoneTypeEnum.Cell;
                                }
                                else if (cus.PhoneType == "BS")
                                {
                                    contact.PhoneType = PhoneTypeEnum.Work;
                                }
                                contactItemList.Add(contact);

                            }
                        }

                        #endregion
                        List<EquipmentItem> eqpItemList = new List<EquipmentItem>();
                        EquipmentItem eqpItem = new EquipmentItem();
                        double? ServiceTotal = 0.0;
                        double? EquipmentSubTotal = 0.0;
                        double ServiceTax = 0.0;
                        double PackageEquipTaxAmount = 0.0;
                        double PackageEquipTax = 0.0;
                        double? MonthlyPayment = 0.0;
                        double? OnedayPayment = 0.0;

                        PaymentItem payMonthly = new PaymentItem();
                        PaymentItem payInitial = new PaymentItem();
                        var TaxGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByOnlyKey("IsServiceTaxable");
                        CustomerAdditionalContact secondaryCredit = new CustomerAdditionalContact();
                        if (from == "lead")
                        {
                            #region customer package
                            SmartSetupSummary Model = new SmartSetupSummary();
                            Model.Customer = cus;
                            Model.PackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(CustomerId);
                            Model.CustomerPackageServiceList = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(CustomerId, CurrentUser.CompanyId.Value);
                            Model.CustomerPackageEqpList = _Util.Facade.CustomerFacade.IsLeadAppointmentEquipmentExistCheckCustomerPackageEqp(CustomerId, CurrentUser.CompanyId.Value);


                            #endregion
                            #region Tax

                            var TaxActivationNoncorming = 0.0;

                            var GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(CurrentUser.CompanyId.Value, CustomerId);

                            ViewBag.SaleTax = 0.00;
                            ViewBag.Tax = 0.00;
                            if (GetSalesTax != null)
                            {
                                ViewBag.SaleTax = Math.Round(Convert.ToDouble(GetSalesTax.Value), 2, MidpointRounding.AwayFromZero);
                                if (TaxGlobal != null && TaxGlobal.Value.ToLower() == "true")
                                {
                                    double ServiceTaxAmount = (Convert.ToDouble(Model.CustomerPackageServiceList.Where(x => x.IsARBEnabled).Sum(x => x.Total)) * Convert.ToDouble(GetSalesTax.Value)) / 100;

                                    ServiceTax = Math.Round(ServiceTaxAmount, 2);
                                }
                                else
                                {
                                    ServiceTax = 0.0;
                                }


                                PackageEquipTaxAmount = (Convert.ToDouble(Model.CustomerPackageEqpList.Sum(x => x.Total)) * Convert.ToDouble(GetSalesTax.Value)) / 100;
                                PackageEquipTax = Math.Round(PackageEquipTaxAmount, 2, MidpointRounding.AwayFromZero);


                                var SumActivationNon = Model.PackageCustomer.ActivationFee + Model.PackageCustomer.NonConformingFee;
                                TaxActivationNoncorming = (Convert.ToDouble(SumActivationNon) * Convert.ToDouble(GetSalesTax.Value)) / 100;

                            }
                            #endregion

                            #region Equipment List Ready


                            if (Model.CustomerPackageEqpList != null)
                            {
                                foreach (var item in Model.CustomerPackageEqpList)
                                {
                                    eqpItem = new EquipmentItem();
                                    eqpItem.Name = item.EquipmentServiceName;

                                    //eqpItem.Points = item.Point;

                                    if (item.Total != null)
                                    {
                                        eqpItem.Total = item.Total.Value;
                                    }
                                    if (item.Quantity != null)
                                    {
                                        eqpItem.Quantity = item.Quantity.Value;
                                    }

                                    if (item.DiscountUnitPricce.HasValue)
                                    {
                                        eqpItem.Price = Math.Abs(item.DiscountUnitPricce.Value);
                                    }
                                    else
                                    {
                                        eqpItem.Price = item.UnitPrice.Value;
                                    }

                                    eqpItemList.Add(eqpItem);

                                }
                            }

                            #endregion
                            #region Service Equipment List Ready

                            //if (Model.CustomerPackageServiceList != null)
                            //{
                            //    foreach (var item in Model.CustomerPackageServiceList)
                            //    {
                            //        eqpItem = new EquipmentItem();
                            //        eqpItem.Name = item.EquipmentServiceName;

                            //        if (item.Total != null)
                            //        {
                            //            eqpItem.Total = item.Total.Value;
                            //        }
                            //        eqpItem.Price = eqpItem.Price;

                            //        eqpItemList.Add(eqpItem);

                            //    }
                            //}

                            #endregion
                            #region Payment Info Customer Related
                            List<PaymentInfoCustomer> PICList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(Model.Customer.CustomerId);

                            if (PICList != null && PICList.Count() > 0)
                            {
                                PaymentInfoCustomer PIC = PICList.Where(x => x.Payfor == "Equipment").FirstOrDefault();

                                PIC = PICList.Where(x => x.Payfor == "MMR").FirstOrDefault();
                                if (PIC != null)
                                {
                                    PaymentInfo payInfoMonthly = _Util.Facade.PaymentInfoFacade.GetPaymentInfoById(PIC.PaymentInfoId);


                                    if (payMonthly != null)
                                    {
                                        payMonthly.BankAccountNumber = payInfoMonthly.AcountNo;
                                        payMonthly.BankRoutingNumber = payInfoMonthly.RoutingNo;
                                        int expireMonth = 0;
                                        int expireYear = 0;

                                        if (!string.IsNullOrEmpty(payInfoMonthly.CardExpireDate))
                                        {
                                            expireMonth = payInfoMonthly.CardExpireDate.Split("/")[0].ToInt();
                                            var expireYearval = "";
                                            if (payInfoMonthly.CardExpireDate.Split("/")[1].Length < 3)
                                            {
                                                expireYearval = "20" + payInfoMonthly.CardExpireDate.Split("/")[1];
                                                expireYear = expireYearval.ToInt();
                                            }
                                            else
                                            {
                                                expireYear = payInfoMonthly.CardExpireDate.Split("/")[1].ToInt();
                                            }
                                        }
                                        payMonthly.CreditCardExpireMonth = expireMonth;
                                        payMonthly.CreditCardExpireYear = expireYear;
                                        payMonthly.CreditCardNumber = payInfoMonthly.CardNumber;
                                        if (payInfoMonthly.CardType == LabelHelper.CardType.Visa)
                                        {
                                            payMonthly.CreditCardType = CreditCardTypeEnum.Visa;
                                            payMonthly.PaymentType = PaymentTypeEnum.CreditCard;
                                        }
                                        else if (payInfoMonthly.CardType == LabelHelper.CardType.MasterCard)
                                        {
                                            payMonthly.CreditCardType = CreditCardTypeEnum.MasterCard;
                                            payMonthly.PaymentType = PaymentTypeEnum.CreditCard;
                                        }
                                        else if (payInfoMonthly.CardType == LabelHelper.CardType.AmericanExpress)
                                        {
                                            payMonthly.CreditCardType = CreditCardTypeEnum.AmericanExpress;
                                            payMonthly.PaymentType = PaymentTypeEnum.CreditCard;
                                        }
                                        else if (payInfoMonthly.CardType == LabelHelper.CardType.Discover)
                                        {
                                            payMonthly.CreditCardType = CreditCardTypeEnum.Discover;
                                            payMonthly.PaymentType = PaymentTypeEnum.CreditCard;
                                        }


                                    }

                                    PIC.ForMonths = PrepaidMonth;
                                    _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PIC);
                                }


                                PIC = PICList.Where(x => x.Payfor == "Activation Fee").FirstOrDefault();
                                if (PIC != null)
                                {
                                    PaymentInfo payInfo = _Util.Facade.PaymentInfoFacade.GetPaymentInfoById(PIC.PaymentInfoId);


                                    if (payInfo != null)
                                    {
                                        payInitial.BankAccountNumber = payInfo.AcountNo;
                                        payInitial.BankRoutingNumber = payInfo.RoutingNo;
                                        if (payInitial.BankAccountNumber != "")
                                        {
                                            payInitial.PaymentType = PaymentTypeEnum.BankAccount;
                                        }
                                        int expireMonth = 0;
                                        int expireYear = 0;
                                        if (!string.IsNullOrEmpty(payInfo.CardExpireDate))
                                        {
                                            expireMonth = payInfo.CardExpireDate.Split("/")[0].ToInt();
                                            var expireYearval = "";
                                            if (payInfo.CardExpireDate.Split("/")[1].Length < 3)
                                            {
                                                expireYearval = "20" + payInfo.CardExpireDate.Split("/")[1];
                                                expireYear = expireYearval.ToInt();
                                            }
                                            else
                                            {
                                                expireYear = payInfo.CardExpireDate.Split("/")[1].ToInt();
                                            }

                                        }
                                        payInitial.CreditCardExpireMonth = expireMonth;
                                        payInitial.CreditCardExpireYear = expireYear;
                                        payInitial.CreditCardNumber = payInfo.CardNumber;
                                        if (payInfo.CardType == LabelHelper.CardType.Visa)
                                        {
                                            payInitial.CreditCardType = CreditCardTypeEnum.Visa;
                                            payInitial.PaymentType = PaymentTypeEnum.CreditCard;
                                        }
                                        else if (payInfo.CardType == LabelHelper.CardType.MasterCard)
                                        {
                                            payInitial.CreditCardType = CreditCardTypeEnum.MasterCard;
                                            payInitial.PaymentType = PaymentTypeEnum.CreditCard;
                                        }
                                        else if (payInfo.CardType == LabelHelper.CardType.AmericanExpress)
                                        {
                                            payInitial.CreditCardType = CreditCardTypeEnum.AmericanExpress;
                                            payInitial.PaymentType = PaymentTypeEnum.CreditCard;
                                        }
                                        else if (payInfo.CardType == LabelHelper.CardType.Discover)
                                        {
                                            payInitial.CreditCardType = CreditCardTypeEnum.Discover;
                                            payInitial.PaymentType = PaymentTypeEnum.CreditCard;
                                        }
                                        if (payInfo.PaymentMethod == LabelHelper.PaymentMethod.Invoice)
                                        {
                                            payInitial.PaymentType = PaymentTypeEnum.Invoice;
                                        }

                                    }
                                }
                                PaymentInfoCustomer PICService = PICList.Where(x => x.Payfor == "Service").FirstOrDefault();
                                if (PICService != null)
                                {
                                    PICService.ForMonths = PrepaidMonth;
                                    _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(PICService);
                                }

                            }


                            #endregion


                            if (Model.CustomerPackageServiceList != null)
                            {
                                ServiceTotal = Model.CustomerPackageServiceList.Where(x => x.IsARBEnabled).Sum(x => x.Total);
                            }
                            if (Model.CustomerPackageEqpList != null)
                            {
                                EquipmentSubTotal = Model.CustomerPackageEqpList.Sum(x => x.Total);
                            }

                            MonthlyPayment = ServiceTotal + ServiceTax;
                            OnedayPayment = Model.PackageCustomer.ActivationFee + Model.PackageCustomer.NonConformingFee + TaxActivationNoncorming;
                        }
                        else
                        {
                            #region Payment Info Ready
                            List<PaymentInfo> model = new List<PaymentInfo>();
                            PaymentInfo payInfoInitial = new PaymentInfo();
                            PaymentInfo payInfoPartial = new PaymentInfo();
                            var objpayprofile = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentProfileCustomerByCustomerId(cus.CustomerId);
                            if (objpayprofile != null && objpayprofile.Count > 0)
                            {
                                foreach (var item in objpayprofile)
                                {

                                    model.Add(_Util.Facade.PaymentInfoFacade.GetPaymentInfoById(item.PaymentInfoId));
                                }
                            }
                            if (model != null && model.Count > 0)
                            {
                                payInfoInitial = model.Where(x => x.IsForBrinks == true && x.IsInitialPayment == true).FirstOrDefault();
                                payInfoPartial = model.Where(x => x.IsForBrinks == true && x.IsPartialPayment == true).FirstOrDefault();
                            }
                            if (payInfoInitial != null)
                            {
                                payInitial.BankAccountNumber = payInfoInitial.AcountNo;
                                payInitial.BankRoutingNumber = payInfoInitial.RoutingNo;
                                if (payInitial.BankAccountNumber != "")
                                {
                                    payInitial.PaymentType = PaymentTypeEnum.BankAccount;
                                }
                                int expireMonth = 0;
                                int expireYear = 0;
                                if (!string.IsNullOrEmpty(payInfoInitial.CardExpireDate))
                                {
                                    expireMonth = payInfoInitial.CardExpireDate.Split("/")[0].ToInt();
                                    var expireYearval = "";
                                    if (payInfoInitial.CardExpireDate.Split("/")[1].Length < 3)
                                    {
                                        expireYearval = "20" + payInfoInitial.CardExpireDate.Split("/")[1];
                                        expireYear = expireYearval.ToInt();
                                    }
                                    else
                                    {
                                        expireYear = payInfoInitial.CardExpireDate.Split("/")[1].ToInt();
                                    }

                                }
                                payInitial.CreditCardExpireMonth = expireMonth;
                                payInitial.CreditCardExpireYear = expireYear;
                                payInitial.CreditCardNumber = payInfoInitial.CardNumber;
                                if (payInfoInitial.CardType == LabelHelper.CardType.Visa)
                                {
                                    payInitial.CreditCardType = CreditCardTypeEnum.Visa;
                                    payInitial.PaymentType = PaymentTypeEnum.CreditCard;
                                }
                                else if (payInfoInitial.CardType == LabelHelper.CardType.MasterCard)
                                {
                                    payInitial.CreditCardType = CreditCardTypeEnum.MasterCard;
                                    payInitial.PaymentType = PaymentTypeEnum.CreditCard;
                                }
                                else if (payInfoInitial.CardType == LabelHelper.CardType.AmericanExpress)
                                {
                                    payInitial.CreditCardType = CreditCardTypeEnum.AmericanExpress;
                                    payInitial.PaymentType = PaymentTypeEnum.CreditCard;
                                }
                                else if (payInfoInitial.CardType == LabelHelper.CardType.Discover)
                                {
                                    payInitial.CreditCardType = CreditCardTypeEnum.Discover;
                                    payInitial.PaymentType = PaymentTypeEnum.CreditCard;
                                }
                                if (payInfoInitial.PaymentMethod == LabelHelper.PaymentMethod.Invoice)
                                {
                                    payInitial.PaymentType = PaymentTypeEnum.Invoice;
                                }

                            }

                            if (payInfoPartial != null)
                            {
                                payMonthly.BankAccountNumber = payInfoPartial.AcountNo;
                                payMonthly.BankRoutingNumber = payInfoPartial.RoutingNo;
                                if (payMonthly.BankAccountNumber != "")
                                {
                                    payMonthly.PaymentType = PaymentTypeEnum.BankAccount;
                                }
                                int expireMonth = 0;
                                int expireYear = 0;
                                if (!string.IsNullOrEmpty(payInfoPartial.CardExpireDate))
                                {
                                    expireMonth = payInfoPartial.CardExpireDate.Split("/")[0].ToInt();
                                    var expireYearval = "";
                                    if (payInfoPartial.CardExpireDate.Split("/")[1].Length < 3)
                                    {
                                        expireYearval = "20" + payInfoPartial.CardExpireDate.Split("/")[1];
                                        expireYear = expireYearval.ToInt();
                                    }
                                    else
                                    {
                                        expireYear = payInfoPartial.CardExpireDate.Split("/")[1].ToInt();
                                    }

                                }
                                payMonthly.CreditCardExpireMonth = expireMonth;
                                payMonthly.CreditCardExpireYear = expireYear;
                                payMonthly.CreditCardNumber = payInfoPartial.CardNumber;
                                if (payInfoPartial.CardType == LabelHelper.CardType.Visa)
                                {
                                    payMonthly.CreditCardType = CreditCardTypeEnum.Visa;
                                    payMonthly.PaymentType = PaymentTypeEnum.CreditCard;
                                }
                                else if (payInfoPartial.CardType == LabelHelper.CardType.MasterCard)
                                {
                                    payMonthly.CreditCardType = CreditCardTypeEnum.MasterCard;
                                    payMonthly.PaymentType = PaymentTypeEnum.CreditCard;
                                }
                                else if (payInfoPartial.CardType == LabelHelper.CardType.AmericanExpress)
                                {
                                    payMonthly.CreditCardType = CreditCardTypeEnum.AmericanExpress;
                                    payMonthly.PaymentType = PaymentTypeEnum.CreditCard;
                                }
                                else if (payInfoPartial.CardType == LabelHelper.CardType.Discover)
                                {
                                    payMonthly.CreditCardType = CreditCardTypeEnum.Discover;
                                    payMonthly.PaymentType = PaymentTypeEnum.CreditCard;
                                }
                                if (payInfoPartial.PaymentMethod == LabelHelper.PaymentMethod.Invoice)
                                {
                                    payMonthly.PaymentType = PaymentTypeEnum.Invoice;
                                }

                            }
                            #endregion
                            #region Tax
                            List<CustomerAppointmentEquipment> appEqpList = new List<CustomerAppointmentEquipment>();
                            List<CustomerAppointmentEquipment> appServiceList = new List<CustomerAppointmentEquipment>();
                            appEqpList = _Util.Facade.CustomerAppoinmentFacade.GetAllCustomerAppointmentEquipListByCustomerId(CustomerId).Where(x => x.IsService == false).ToList();
                            appServiceList = _Util.Facade.CustomerAppoinmentFacade.GetAllCustomerAppointmentEquipListByCustomerId(CustomerId).Where(x => x.IsService == true).ToList();
                            var TaxActivationNoncorming = 0.0;

                            var GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(CurrentUser.CompanyId.Value, CustomerId);

                            ViewBag.SaleTax = 0.00;
                            ViewBag.Tax = 0.00;
                            if (GetSalesTax != null)
                            {
                                ViewBag.SaleTax = Math.Round(Convert.ToDouble(GetSalesTax.Value), 2, MidpointRounding.AwayFromZero);
                                if (TaxGlobal != null && TaxGlobal.Value.ToLower() == "true")
                                {
                                    double ServiceTaxAmount = (Convert.ToDouble(appServiceList.Sum(x => x.TotalPrice)) * Convert.ToDouble(GetSalesTax.Value)) / 100;
                                    ServiceTax = Math.Round(ServiceTaxAmount, 2);
                                }
                                else
                                {
                                    ServiceTax = 0.0;
                                }


                                PackageEquipTaxAmount = (Convert.ToDouble(appEqpList.Sum(x => x.TotalPrice)) * Convert.ToDouble(GetSalesTax.Value)) / 100;
                                PackageEquipTax = Math.Round(PackageEquipTaxAmount, 2);

                            }
                            #endregion
                            #region Equipment and Service Ready

                            if (appEqpList != null && appEqpList.Count > 0)
                            {
                                Equipment eqp = new Equipment();
                                foreach (var item in appEqpList)
                                {

                                    // eqp = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentId(item.EquipmentId);
                                    Ticket tic = _Util.Facade.TicketFacade.GetTicketByTicketId(item.AppointmentId);
                                    if (tic != null && tic.TicketType == "Installation")
                                    {
                                        eqpItem = new EquipmentItem();
                                        eqpItem.Name = item.EquipName;

                                        //eqpItem.Points = item.Point;
                                        eqpItem.Total = item.TotalPrice;
                                        eqpItem.Quantity = item.Quantity;
                                        eqpItem.Price = item.UnitPrice;

                                        eqpItemList.Add(eqpItem);
                                    }


                                }



                            }
                            foreach (var item in appServiceList)
                            {
                                Ticket tic = _Util.Facade.TicketFacade.GetTicketByTicketId(item.AppointmentId);
                                if (tic != null && tic.TicketType == "Installation")
                                {
                                    ServiceTotal += item.TotalPrice;

                                }

                            }
                            MonthlyPayment = ServiceTotal + ServiceTax;
                            if (appEqpList != null)
                            {
                                EquipmentSubTotal = appEqpList.Sum(x => x.TotalPrice);
                            }
                            if (ActivitionFee.HasValue)
                            {
                                OnedayPayment = Math.Round(ActivitionFee.Value, 2, MidpointRounding.AwayFromZero);
                            }
                            #endregion

                        }


                        #region Attachment in Base64 Formate
                        List<CustomerFile> cusFileList = _Util.Facade.CustomerFileFacade.GetAllTagFilesByCustomerIdAndCompanyId(CustomerId, CurrentUser.CompanyId.Value);
                        List<string> attachmentList = new List<string>();
                        //if(cusFileList != null && cusFileList.Count > 0)
                        //{
                        //    foreach(var item in cusFileList)
                        //    {
                        //        string path = AppDomain.CurrentDomain.BaseDirectory.Replace("\\", "/") + item.Filename;
                        //        byte[] imageArray = System.IO.File.ReadAllBytes(path);
                        //        string base64ImageRepresentation = Convert.ToBase64String(imageArray);
                        //        string attachmentGuid = client.UploadAttachment(imageArray, item.Tag);
                        //        attachmentList.Add(attachmentGuid);
                        //    }

                        //}


                        #endregion

                        DateTime PaymentEffectiveDate = new DateTime();
                        DateTime.TryParse(PaymentDate, out PaymentEffectiveDate);

                        DateTime InstallationStartDate = new DateTime();
                        DateTime.TryParse(InstallStartDate, out InstallationStartDate);

                        DateTime InstallationFinishDate = new DateTime();
                        DateTime.TryParse(InstallFinishDate, out InstallationFinishDate);

                        #region Gether ContractDocument Info


                        ContractDocument2 document = new ContractDocument2();
                        if (cus != null)
                        {
                            document.BillStartDate = PaymentEffectiveDate;
                            document.BillingAddress1 = !string.IsNullOrEmpty(cus.Address) ? cus.Address : cus.Street + "," + cus.City + "," + cus.State + " " + cus.ZipCode;
                            document.BillingCity = cus.City;
                            document.BillingCounty = cus.County != "" ? cus.County : "N/A";
                            if (!string.IsNullOrEmpty(cus.State))
                            {
                                StateProvinceEnum state = (StateProvinceEnum)Enum.Parse(typeof(StateProvinceEnum), cus.State);
                                document.BillingState = state;
                                document.PremiseState = state;
                            }

                            document.BillingZip = cus.ZipCode;
                            document.CompanyName = cus.BusinessName;
                            document.CompanyType = CompanyTypes.LLC;

                            document.ContactList = contactItemList.Select(x => x as ContactItem).ToArray();
                            document.CountryOfSale = HS.Econtract.eContractApi.CountryEnum.US;
                            if (cus.Type == "Residential")
                            {
                                document.CustomerType = CustomerTypeEnum.Residential;
                                document.PaymentExtendedServiceOption = Questions.IsExtendedService;
                            }
                            else if (cus.Type == "Commercial")
                            {
                                document.CustomerType = CustomerTypeEnum.Commercial;
                                //if (attachmentList != null && attachmentList.Count > 0)
                                //{
                                //    document.AttachmentGUIDListing = attachmentList.Select(x => x as string).ToArray();

                                //}

                                document.PersonalGuaranteeRequired = personalGuarantee.IsPersonalGuarantee;
                                if (personalGuarantee.IsPersonalGuarantee == true)
                                {
                                    document.PGTitle = personalGuarantee.Title;
                                    document.PGHomeAdddress1 = personalGuarantee.Address1;
                                    document.PGHomeAdddress2 = personalGuarantee.Address2;
                                    document.PGHomeCity = personalGuarantee.City;
                                    if (!string.IsNullOrEmpty(personalGuarantee.State))
                                    {
                                        StateProvinceEnum PGstate = (StateProvinceEnum)Enum.Parse(typeof(StateProvinceEnum), personalGuarantee.State);
                                        document.PGHomeState = PGstate;
                                    }

                                    document.PGHomeZip = personalGuarantee.ZipCode;
                                }
                            }
                            string DealerName = "";
                            string DealerPass = "";

                            Employee emp = _Util.Facade.EmployeeFacade.GetEmployeeByEmployeeId(cus.Soldby1);
                            if (emp != null)
                            {
                                DealerName = emp.BrinksDealerUser;
                                DealerPass = emp.BrinksDealerPassword;
                            }
                            if (!string.IsNullOrEmpty(DealerName) && !string.IsNullOrEmpty(DealerPass))
                            {
                                document.DealerPassword = DealerPass;
                                document.DealerUsername = DealerName;
                            }
                            else
                            {
                                document.DealerPassword = Password;
                                document.DealerUsername = Login;
                            }

                            if (cus.RenewalTerm != null)
                            {
                                if (cus.RenewalTerm > 28)
                                {
                                    document.DraftDay = 28;
                                }
                                else
                                {
                                    document.DraftDay = cus.RenewalTerm.Value;
                                }

                            }
                            document.EquipmentAlarmNetwork = AlarmNetworkEnum.AlarmDotcom;
                            document.EquipmentAlarmNetworkIncluded = true;
                            document.EquipmentList = eqpItemList.Select(x => x as EquipmentItem).ToArray();
                            document.EquipmentSubtotalAmount = EquipmentSubTotal != null ? Math.Round(EquipmentSubTotal.Value, 2, MidpointRounding.AwayFromZero) : 0.0;
                            document.EquipmentTaxAmount = Math.Round(PackageEquipTaxAmount, 2, MidpointRounding.AwayFromZero);

                            document.EquipmentTotalAmount = Math.Round((document.EquipmentSubtotalAmount + document.EquipmentTaxAmount), 2, MidpointRounding.AwayFromZero);
                            document.InstallationFinish = InstallationStartDate;
                            document.InstallationStart = InstallationFinishDate;
                            document.InstallationWorkDescription = "Nothing";
                            document.InsurancePersonalInjuryAmount = 0;
                            document.InsurancePropertyDamageAmount = 0;
                            document.Language = ContractLanguageEnum.English;

                            document.PaymentCount = 36;
                            document.PaymentEffectiveDate = PaymentEffectiveDate;

                            document.PaymentInitial = payInitial;
                            document.PaymentMonthly = payMonthly;


                            document.PaymentMonthlyMonitoringRate = MonthlyPayment != null ? Math.Round(MonthlyPayment.Value, 2, MidpointRounding.AwayFromZero) : 0.0;
                            document.PaymentOneTimeActivationFee = OnedayPayment != null ? Math.Round(OnedayPayment.Value, MidpointRounding.AwayFromZero) : 0.0;
                            document.PremiseAddress1 = !string.IsNullOrEmpty(cus.Address) ? cus.Address : cus.Street + "," + cus.City + "," + cus.State + " " + cus.ZipCode;
                            document.PremiseCity = cus.City;
                            document.PremiseCounty = cus.County != "" ? cus.County : "N/A";
                            document.MonthsPaidUpFront = PrepaidMonth;
                            document.PromotionPeriod = PromotionMonth;
                            document.PremiseZip = cus.ZipCode;

                            document.PrimaryFirstName = cus.FirstName;
                            document.PrimaryLastName = cus.LastName;
                            document.PrimaryPassword = cus.Passcode;
                            document.PrimaryPhone = cus.PrimaryPhone != "" ? cus.PrimaryPhone : cus.CellNo;
                            document.PrimaryTaxIDNumber = cus.SSN;

                            document.PrimaryBirthDate = cus.DateofBirth != null ? cus.DateofBirth.Value.ToString("MM/dd/yyyy") : "";
                            document.PrimaryEmail = cus.EmailAddress;

                            #region Second Signer Value

                            if (ContractType == "S" || ContractType == "B")
                            {
                                if (ContactId.HasValue)
                                {
                                    secondaryCredit = _Util.Facade.AdditionalContactFacade.GetById(ContactId.Value);
                                    if (secondaryCredit != null)
                                    {
                                        document.SecondaryFirstName = secondaryCredit.FirstName;
                                        document.SecondaryLastName = secondaryCredit.LastName;
                                        document.SecondaryEmail = secondaryCredit.Email;
                                        document.SecondaryPhone = secondaryCredit.Phone;
                                        if (secondaryCredit.DOB.HasValue)
                                        {
                                            document.SecondaryBirthDate = secondaryCredit.DOB != null ? secondaryCredit.DOB.Value.ToString("MM/dd/yyyy") : "";
                                        }

                                        if (!string.IsNullOrEmpty(secondaryCredit.SSN))
                                        {
                                            document.SecondaryTaxIDNumber = secondaryCredit.SSN.Trim();
                                        }

                                    }
                                }

                            }

                            #endregion


                            document.PaymentEffectiveDate = PaymentEffectiveDate;
                            if (cus.DateofBirth != null)
                            {
                                document.PrimaryBirthDate = cus.DateofBirth.Value.ToString("MM/dd/yyyy");
                            }
                            else
                            {
                                document.PrimaryBirthDate = new DateTime().ToString("MM/dd/yyyy");
                            }


                            document.SurveyCancellingService = Questions.SurveyCancellingService;
                            document.SurveyConfirmContractLength = Questions.SurveyConfirmContractLength;
                            document.SurveyFamiliarizationPeriod = Questions.SurveyFamiliarizationPeriod;
                            document.SurveyHomeowner = Questions.SurveyHomeowner;
                            document.SurveyNewConstruction = Questions.SurveyNewConstruction;
                            document.SurveyUnderContract = Questions.SurveyUnderContract;

                        }
                        #endregion

                        CreateContractResult contractResult1 = client.CreateContract2(document, SigningType.Embedded, SigningType.Embedded);
                        CreateContractResult contractResult = new CreateContractResult();
                        if (ContractType == "P")
                        {
                            contractResult = client.CreateContract2(document, SigningType.Remote, SigningType.None);
                        }
                        else if (ContractType == "S")
                        {
                            contractResult = client.CreateContract2(document, SigningType.None, SigningType.Remote);
                        }
                        else
                        {
                            contractResult = client.CreateContract2(document, SigningType.Remote, SigningType.Remote);
                        }

                        if (contractResult.EnvelopeID != "")
                        {
                            result = true;
                            Message = "Econtract send successfully.";
                            cus.EcontractEnvlobeId = contractResult.EnvelopeID;
                            cus.EcontractId = contractResult.ResultData;
                            if (ActivitionFee.HasValue)
                            {
                                cus.ActivationFee = Math.Round(ActivitionFee.Value, 2, MidpointRounding.AwayFromZero);
                            }
                            cus.InstallDate = InstallationStartDate;
                            _Util.Facade.CustomerFacade.UpdateCustomer(cus);

                            CustomerExtended cusExted = new CustomerExtended();
                            cusExted = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(cus.CustomerId);
                            if (cusExted == null)
                            {
                                cusExted = new CustomerExtended();
                                cusExted.CustomerId = cus.CustomerId;
                                cusExted.ContractSentBy = CurrentUser.UserId;
                                cusExted.InstallFinishDate = InstallationFinishDate;
                                cusExted.PrepaidMonth = PrepaidMonth;
                                cusExted.PromotionMonth = PromotionMonth;
                                cusExted.PaymentEffectiveDate = PaymentEffectiveDate;
                                _Util.Facade.CustomerFacade.InsertCustomerExtended(cusExted);
                            }
                            else
                            {
                                cusExted.ContractSentBy = CurrentUser.UserId;
                                cusExted.InstallFinishDate = InstallationFinishDate;
                                cusExted.PrepaidMonth = PrepaidMonth;
                                cusExted.PromotionMonth = PromotionMonth;
                                cusExted.PaymentEffectiveDate = PaymentEffectiveDate;
                                _Util.Facade.CustomerFacade.UpdateCustomerExtended(cusExted);
                            }
                            ThirdPartyCustomer tcustomer = new ThirdPartyCustomer();
                            tcustomer = _Util.Facade.CustomerFacade.GetThirdPartyCustomerByCustomerId(cus.CustomerId);
                            if (tcustomer != null)
                            {
                                tcustomer.eContact = cus.EcontractId;
                                _Util.Facade.CustomerFacade.UpdateThirdPartyCustomer(tcustomer);
                            }

                            #region Update SecondaryContact
                            List<CustomerAdditionalContact> contactList = new List<CustomerAdditionalContact>();
                            if (ContactId.HasValue && secondaryCredit != null)
                            {
                                contactList = _Util.Facade.AdditionalContactFacade.GetAllAdditionalContactByCustomerId(cus.CustomerId);
                                if (contactList != null)
                                {
                                    foreach (var item in contactList)
                                    {
                                        item.IsSigningUsed = false;
                                        _Util.Facade.AdditionalContactFacade.UpdateAdditionalContact(item);
                                    }
                                }
                                secondaryCredit.IsSigningUsed = true;
                                _Util.Facade.AdditionalContactFacade.UpdateAdditionalContact(secondaryCredit);
                            }
                            #endregion
                            #region ConvertLeadToCustomer
                            if (from == "lead")
                            {

                                try
                                {
                                    var convertionResult = ConvertLeadToCustomer(cus.CustomerId.ToString(), cus.Id, true, null, null, null);
                                    IsConverted = true;
                                    Message += "</br> Lead converted to customer successfully.";
                                }
                                catch (Exception ex)
                                {
                                    logger.Error(ex);
                                    IsConverted = false;
                                    Message += "</br>Convertion Failed.";
                                }
                            }


                            #endregion
                        }
                        else
                        {
                            int count = 1;
                            if (contractResult.ResultData == "You have entered the wrong user/password combination.")
                            {
                                Message = "Brinks user is not found.";
                            }
                            else
                            {
                                foreach (var item in contractResult.FaultFields)
                                {
                                    Message += count + "." + item.Key + ", " + item.Value + "</br>";
                                }
                                if (Message == "")
                                {
                                    Message = contractResult.ResultData;


                                }
                            }

                        }
                    }
                }

            }
            catch (Exception ex)
            {
                result = false;
                Message = ex.Message;
            }
            return Json(new { result = result, Message = Message });
        }

        private CreateInvoice GetCreateInvoiceModel(Invoice Invoice, List<InvoiceDetail> InvoiceDetialList, Company tempCom, Customer tempCUstomer)
        {
            CreateInvoice Model = new CreateInvoice();
            Model.Invoice = Invoice;
            Model.InvoiceDetailList = InvoiceDetialList;

            Model.Invoice.CustomerName = tempCUstomer.Title + " " + tempCUstomer.FirstName + " " + tempCUstomer.LastName;

            Model.Invoice.IsEstimate = false;
            //Model.Invoice.InvoiceDate = Invoice.InvoiceDate.HasValue ? Invoice.InvoiceDate.Value : Model.Invoice.InvoiceDate.Value.ClientToUTCTime();
            //Model.Invoice.DueDate = Invoice.DueDate.HasValue ? Invoice.DueDate.Value : Model.Invoice.DueDate.Value.ClientToUTCTime();
            #region Discount Calculation 
            if (!string.IsNullOrWhiteSpace(Model.Invoice.DiscountType))
            {
                if (Model.Invoice.DiscountType == "amount")
                {
                    if (Invoice.Discountpercent != null)
                    {
                        Model.Discount = Invoice.Discountpercent.Value;
                    }
                }
                else
                {
                    if (Invoice.Discountpercent != null)
                    {
                        Model.Discount = ((Invoice.Discountpercent / 100) * Model.SubTotal).Value;
                    }
                }
            }
            #endregion

            #region making Name of Address Bold
            //if (!string.IsNullOrWhiteSpace(Model.Invoice.BillingAddress))
            //{
            //    var split = Model.Invoice.BillingAddress.Split(new string[] { "\n" }, StringSplitOptions.None);

            //    if (split.Count() > 0)
            //    {
            //        string NewAddress = "";
            //        split[0] = "<b>" + split[0] + "</b>";

            //        foreach (var item in split)
            //        {
            //            NewAddress += item + Environment.NewLine;
            //        }
            //        Model.Invoice.BillingAddress = NewAddress;
            //    }
            //}
            //if (!string.IsNullOrWhiteSpace(Model.Invoice.ShippingAddress))
            //{
            //    var split = Model.Invoice.ShippingAddress.Split(new string[] { "\n" }, StringSplitOptions.None);

            //    if (split.Count() > 0)
            //    {
            //        string NewAddress = "";
            //        split[0] = "<b>" + split[0] + "</b>";

            //        foreach (var item in split)
            //        {
            //            NewAddress += item + Environment.NewLine;
            //        }
            //        Model.Invoice.ShippingAddress = NewAddress;
            //    }
            //}
            //if (!string.IsNullOrWhiteSpace(Model.InvoiceShipping))
            //{
            //    var split = Model.InvoiceShipping.Split(new string[] { "\n" }, StringSplitOptions.None);

            //    if (split.Count() > 0)
            //    {
            //        string NewAddress = "";
            //        split[0] = "<b>" + split[0] + "</b>";

            //        foreach (var item in split)
            //        {
            //            NewAddress += item + Environment.NewLine;
            //        }
            //        Model.InvoiceShipping = NewAddress;
            //    }
            //}
            #endregion
            //Model.Invoice.EstimateTerm = "";
            if (!string.IsNullOrWhiteSpace(Model.Invoice.EstimateTerm) && Model.Invoice.EstimateTerm != "-1")
                Model.Invoice.EstimateTerm = _Util.Facade.LookupFacade.GetDisplayTextByDataValueFromLLookup(Model.Invoice.EstimateTerm);

            //customer name is customer business name here 
            if (tempCUstomer.BusinessName != "")
            {
                Model.CustomerName = tempCUstomer.BusinessName;
            }
            else
            {
                Model.CustomerName = Model.Invoice.CustomerName;
            }
            Model.CusBussinessName = tempCUstomer.BusinessName;

            Model.SubTotal = 0;
            foreach (var item in InvoiceDetialList)
            {
                item.CreatedBy = User.Identity.Name;
                item.CreatedDate = DateTime.Now.UTCCurrentTime();
                item.CompanyId = tempCom.CompanyId;
                Model.SubTotal = Model.SubTotal + (item.TotalPrice.HasValue ? item.TotalPrice.Value : 0);
            }

            Model.CompanyAddress = tempCom.Address;
            Model.CompanyStreet = tempCom.Street;
            string ComCity = "";
            string ComState = "";
            if (!string.IsNullOrWhiteSpace(tempCom.City))
            {
                ComCity = tempCom.City.UppercaseFirst() + ", ";
            }
            if (!string.IsNullOrWhiteSpace(tempCom.State))
            {
                ComState = tempCom.State + " ";
            }
            Model.companyStreetInfo = ComCity + ComState + tempCom.ZipCode;
            Model.CompanyCity = tempCom.City.UppercaseFirst();
            Model.CompanyState = tempCom.State;
            Model.CompanyZip = tempCom.ZipCode;
            Model.CompanyPhone = tempCom.Phone;
            var objpermit = _Util.Facade.PermissionFacade.IsPermittedPermission(3167, Model.Invoice.CreatedByUid, tempCom.CompanyId);
            if (objpermit)
            {
                var empobj = _Util.Facade.EmployeeFacade.GetEmployeeByUserId(Model.Invoice.CreatedByUid);
                if (empobj != null)
                {
                    Model.CompanyEmail = empobj.Email;
                }
            }
            else
            {
                Model.CompanyEmail = tempCom.EmailAdress;
            }
            Model.CompanyName = tempCom.CompanyName;
            Model.PhoneNum = tempCom.Phone;
            Model.CompanyWebsite = tempCom.Website;

            if (string.IsNullOrWhiteSpace(Model.CustomerInfo))
            {
                Model.CustomerInfo = _Util.Facade.GlobalSettingsFacade.GetCustomerAddressFormat(tempCom.CompanyId);
            }
            if (string.IsNullOrWhiteSpace(Model.CustomerStreet))
            {
                Model.CustomerStreet = tempCUstomer.Street;
            }
            if (string.IsNullOrWhiteSpace(Model.CustomerCity))
            {
                Model.CustomerCity = tempCUstomer.City.UppercaseFirst();
            }
            if (string.IsNullOrWhiteSpace(Model.CustomerState))
            {
                Model.CustomerState = tempCUstomer.State;
            }
            if (string.IsNullOrWhiteSpace(Model.CustomerZipCode))
            {
                Model.CustomerZipCode = tempCUstomer.ZipCode;
            }
            if (string.IsNullOrWhiteSpace(Model.CustomerNo))
            {
                Model.CustomerNo = tempCUstomer.CustomerNo;
            }

            //ViewBag.ShippingValue = _Util.Facade.GlobalSettingsFacade.GetShippingSettingCompanyId(tempCom.CompanyId);
            Model.ShowInvoiceShippingAddress = _Util.Facade.GlobalSettingsFacade.GetShippingSettingCompanyId(tempCom.CompanyId).ToLower() == "true" ? true : false;
            if (string.IsNullOrWhiteSpace(tempCom.CompanyLogo))
            {
                tempCom.CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyLogoForPDFByCompanyId(tempCom.CompanyId);
            }
            Model.CompanyLogo = tempCom.CompanyLogo;
            if (string.IsNullOrWhiteSpace(Model.Invoice.InvoiceMessage))
            {
                Model.Invoice.InvoiceMessage = Model.Invoice.Message;
            }
            return Model;
        }

        public bool SMSConvertLeadToCustomer(int? leadid, Guid ticketId)
        {
            if (!leadid.HasValue)
                return false;
            Guid CompanyId = new Guid();
            Guid UserId = Guid.Empty;
            if (User.Identity.IsAuthenticated)
            {
                var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
                CompanyId = CurrentUser.CompanyId.Value;
                UserId = CurrentUser.UserId;
            }
            else
            {
                CustomerCompany custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(leadid.Value);
                CompanyId = custommerCompany.CompanyId;
            }
            Company _Company = new Company { CompanyId = CompanyId };

            List<string> ReceiverNumberList = new List<string>();

            if (!_Util.Facade.CustomerFacade.CustomerIsInCompany(leadid.Value, CompanyId))
            {
                return false;
            }

            var Cus = _Util.Facade.CustomerFacade.GetCustomerById(leadid.Value);

            #region Total RMR Calculation, Lead Source, Sales Location, Ticket type And Sales Group
            double TotalRMR = 0.0;
            int customerid = 0;
            double financedamount = 0;
            string SalesGroup = "";
            string SalesPerson = "";
            string LeadSource = "";
            string TicketType = "";
            string SalesLocation = "";
            double UpFront = 0.0;
            Ticket _ticket = _Util.Facade.TicketFacade.GetTicketByTicketId(ticketId);
            if (_ticket != null && !string.IsNullOrWhiteSpace(_ticket.TicketType) && _ticket.TicketType != "-1")
            {
                Lookup ticketTypeDisText = _Util.Facade.LookupFacade.GetLookupByKeyAndValueAndCompanyId("TicketType", _ticket.TicketType, CompanyId);
                TicketType = ticketTypeDisText != null && !string.IsNullOrWhiteSpace(ticketTypeDisText.DisplayText) ? ticketTypeDisText.DisplayText : "";
            }
            if (Cus != null)
            {
                Lookup salesloc = _Util.Facade.LookupFacade.GetLookupByKeyAndValueAndCompanyId("CommissionType", Cus.SalesLocation, CompanyId);
                Lookup leadsource = _Util.Facade.LookupFacade.GetLookupByKeyAndValueAndCompanyId("LeadSource", Cus.LeadSource, CompanyId);
                TotalRMR = _Util.Facade.CustomerFacade.GetLeadTotalRMRByCustomerId(Cus.CustomerId);
                UpFront = _Util.Facade.CustomerFacade.GetCollectedAmountByCustomerId(Cus.CustomerId);
                LeadSource = leadsource != null && !string.IsNullOrWhiteSpace(leadsource.DisplayText) && leadsource.DataValue != "-1" ? leadsource.DisplayText : "";
                customerid = Cus.Id;
                financedamount = Cus.FinancedAmount != null && Cus.FinancedAmount.HasValue ? Cus.FinancedAmount.Value : 0;
                SalesLocation = salesloc != null && !string.IsNullOrWhiteSpace(salesloc.DisplayText) && salesloc.DataValue != "-1" ? salesloc.DisplayText : "";
                if (!string.IsNullOrWhiteSpace(Cus.Soldby))
                {
                    Employee _emp = _Util.Facade.CustomerFacade.GetSalesGroupAndEmpNamBySoldby(new Guid(Cus.Soldby));
                    SalesGroup = _emp != null && !string.IsNullOrWhiteSpace(_emp.PermissionGroupName) ? _emp.PermissionGroupName : "";
                    SalesPerson = _emp != null && !string.IsNullOrWhiteSpace(_emp.EMPName) ? _emp.EMPName : "";
                }
            }
            #endregion


            #region ReceiverNumber Setup

            GlobalSetting GlobalSettingModel = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByOnlyKey("SendLeadToCustomerConversionSms");

            string PrefferedNO = "";
            if (GlobalSettingModel != null && GlobalSettingModel.Value.ToLower() == "true")
            {
                PrefferedNO = GlobalSettingModel.OptionalValue.Replace(" ", ""); ;
            }
            else
            {
                return false;
            }

            if (!string.IsNullOrWhiteSpace(PrefferedNO))
            {
                PrefferedNO = PrefferedNO.Replace("-", "");
            }
            else
            {
                return false;
                //return Json(new { result = false, message = "Lead has no phone number available." });
            }

            string[] PrefferedNOList = PrefferedNO.Split(',');
            if (PrefferedNOList != null && PrefferedNOList.Length > 0)
            {
                for (int i = 0; i < PrefferedNOList.Length; i++)
                {

                    if (!(PrefferedNOList[i].IndexOf("+88") > -1) && PrefferedNOList[i].Count() == 11)
                    {
                        //PrefferedNOList[i] =  PrefferedNOList[i].Replace("-", "").Replace(")", "").Replace("(", "").Replace(" ", "");
                        PrefferedNOList[i] = "+88" + PrefferedNOList[i];
                    }
                    ReceiverNumberList.Add(PrefferedNOList[i]);


                }
            }


            #endregion
            //SMSAgreement smsAgreement = new SMSAgreement();

            //smsAgreement.ShortUrl = shortUrl;
            var CustomerExtend = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(Cus.CustomerId);

            string phonenumber = string.Join(";", ReceiverNumberList);
            if (ReceiverNumberList.Count() > 0 && CustomerExtend.IsAgreementSMSSend != true)
            {
                bool sendResult = _Util.Facade.SMSFacade.SendConvertLeadToCustomerSMS(Cus.FirstName + " " + Cus.LastName, TotalRMR, SalesGroup, LeadSource, SalesLocation, TicketType, SalesPerson, customerid, financedamount, CompanyId, ReceiverNumberList, false, string.Empty, UpFront, UserId);
                if (sendResult)
                {
                    if (CustomerExtend != null)
                    {
                        CustomerExtend.IsAgreementSMSSend = true;
                    }
                    _Util.Facade.CustomerFacade.UpdateCustomerExtended(CustomerExtend);
                }
                return sendResult;
            }
            else
            {
                return false;
            }

        }
         

        #region Private Func
        private void SalesCommisionUpdateInsert(Customer _Customer, Company company)
        {
            var result = false;
            var CustomerdB = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(_Customer.CustomerId);
            var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(CustomerdB.CustomerId);
            if (PackageCustomerDetails != null && !string.IsNullOrEmpty(CustomerdB.LeadSource) && !string.IsNullOrEmpty(CustomerdB.Soldby))
            {
                var SalesLocation = "";
                var LeadType = "";
                if (CustomerdB.LeadSource == "Company")
                {
                    SalesLocation = "Inside Sales";
                    LeadType = "Company Lead";
                }
                else if (CustomerdB.LeadSource == "SGN")
                {
                    SalesLocation = "Employee Sales";
                    LeadType = "Self Generated";
                }
                if (!string.IsNullOrEmpty(SalesLocation) && !string.IsNullOrEmpty(LeadType))
                {
                    var SalesCommissionDetails = _Util.Facade.SmartPackageFacade.GetSalesCommisionBypackageSalesType(company.CompanyId, PackageCustomerDetails.PackageId, SalesLocation, LeadType);
                    if (SalesCommissionDetails != null)
                    {
                        var MonthlyMonitoringFee = 0.0;
                        var CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(CustomerdB.CustomerId, company.CompanyId, false, 0);
                        if (CustomServiceList.Count > 0)
                        {
                            foreach (var item in CustomServiceList)
                            {
                                MonthlyMonitoringFee += item.Total;
                            }
                        }
                        var OldSalesComission = _Util.Facade.EmployeeFacade.GetEmployeeComissionByCustomerId(CustomerdB.CustomerId);
                        if (OldSalesComission != null)
                        {
                            OldSalesComission.Amount = SalesCommissionDetails.AmoutParcent * MonthlyMonitoringFee;
                            result = _Util.Facade.EmployeeFacade.UpdateEmployeeComission(OldSalesComission);
                        }
                        else
                        {
                            EmployeeCommission empCommision = new EmployeeCommission()
                            {
                                CompanyId = company.CompanyId,
                                EmployeeCommissionId = Guid.NewGuid(),
                                UserId = !string.IsNullOrEmpty(CustomerdB.Soldby) ? new Guid(CustomerdB.Soldby) : Guid.Empty,
                                CustomerId = CustomerdB.CustomerId,
                                Amount = SalesCommissionDetails.AmoutParcent * MonthlyMonitoringFee,
                                CreatedDate = DateTime.Now.UTCCurrentTime()
                            };
                            result = _Util.Facade.EmployeeFacade.InsertEmployeeComission(empCommision);
                        }
                    }
                }
            }
        }
        private Guid IAgreeConvertLeadToCustomer(Customer _Customer, Company company, string invoiceid, bool isinvoice)
        {
            var result = false;
            Guid TicketId = Guid.Empty;
            Guid SoldBy = new Guid();
            CustomerAppointmentEquipment caEquipment = new CustomerAppointmentEquipment();
            #region Check Default Billing Tax
            bool defaultBillTaxVal = true;
            GlobalSetting defaultBillTax = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByOnlyKey("DefaultCustomerBillingTax");
            if (defaultBillTax != null)
            {
                if (defaultBillTax.Value.ToLower() == "true")
                {
                    defaultBillTaxVal = true;
                }
                else
                {
                    defaultBillTaxVal = false;
                }
            }
            #endregion
            if (_Customer != null)
            {
                Guid.TryParse(_Customer.Soldby, out SoldBy);
            }
            bool LeadConvertResult = _Util.Facade.CustomerFacade.ConvertLeadToCustomer(_Customer.CustomerId, company.CompanyId, "System Generated");

            if (LeadConvertResult != false)
            {
                result = LeadConvertResult;
                var CustomerdB = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(_Customer.CustomerId);
                if (CustomerdB != null)
                {
                    CustomerdB.LastUpdatedDate = DateTime.Now.UTCCurrentTime();
                    CustomerdB.LastUpdatedBy = User.Identity.Name;
                    CustomerdB.IsTechCallPassed = false;
                    CustomerdB.IsDirect = false;
                    CustomerdB.IsActive = true;
                    CustomerdB.IsAgreement = true;
                    //if (CustomerdB.JoinDate.Value.ToString("MM/dd/yyyy") == DateTime.Now.UTCCurrentTime().ToString("MM/dd/yyyy"))
                    //{
                    //    CustomerdB.CustomerStatus = "FirstCallClose";
                    //}
                    //else
                    //{
                    //    CustomerdB.CustomerStatus = "FollowUp";
                    //}
                    CustomerdB.CustomerStatus = "6";
                    CustomerdB.SalesDate = DateTime.Today;
                    CustomerdB.JoinDate = DateTime.Now.UTCCurrentTime();

                    #region Insert Monthly Monitoring Fee
                    #region ACH discount
                    double discountAmount = 0;
                    var objpayinfocus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayFor(CustomerdB.CustomerId);
                    if (objpayinfocus != null)
                    {
                        var objpayprofile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(objpayinfocus.PaymentInfoId);
                        if (objpayprofile != null && objpayprofile.Type.ToLower().IndexOf("ach") > -1)
                        {
                            var objglobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(company.CompanyId, "ACHDiscount");
                            if (objglobal != null)
                            {
                                discountAmount = Convert.ToDouble(objglobal.Value);
                            }
                        }
                    }
                    #endregion
                    List<CustomerPackageService> CustomerPackageServiceListMonitoring = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(CustomerdB.CustomerId, company.CompanyId);
                    double? ServiceCost = CustomerPackageServiceListMonitoring.Where(x => x.IsARBEnabled).Sum(x => x.Total);
                    double ServiceCostTax = 0;
                    if (ServiceCost.HasValue && ServiceCost.Value > 0)
                    {
                        ServiceCost = ServiceCost - discountAmount;
                        #region Tax Calculations
                        Guid tempCustomerId = new Guid();
                        if (CustomerdB != null)
                        {
                            tempCustomerId = CustomerdB.CustomerId;
                        }
                        GlobalSetting GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(company.CompanyId, tempCustomerId);
                        if (GetSalesTax != null)
                        {
                            ServiceCostTax = Math.Round((ServiceCost.Value * Convert.ToDouble(GetSalesTax.Value)) / 100, 2, MidpointRounding.AwayFromZero);
                        }
                        #endregion
                        CustomerdB.MonthlyMonitoringFee = ServiceCost.Value.ToString();
                        CustomerdB.BillAmount = defaultBillTaxVal ? (ServiceCost.Value + ServiceCostTax) : ServiceCost.Value;
                        CustomerdB.TotalTax = defaultBillTaxVal ? ServiceCostTax : 0;
                        CustomerdB.BillTax = defaultBillTaxVal;
                    }
                    #endregion

                    #region If IsInvoice get Monitoring fee
                    Invoice temInv = new Invoice();

                    if (!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true)
                    {
                        temInv = _Util.Facade.InvoiceFacade.GetByInvoiceId(invoiceid);
                    }
                    #endregion
                    //List<Ticket> _ticList = _Util.Facade.TicketFacade.GetAllInstallationTicketByCustomerId(_Customer.CustomerId);
                    if ((temInv != null && temInv.Status != LabelHelper.EstimateStatus.Signed && isinvoice == true) || (string.IsNullOrWhiteSpace(invoiceid) && isinvoice == false))
                    {

                        #region Insert Ticket 
                        Ticket newTicket = new Ticket();
                        if (CustomerdB.MoveCustomerId != new Guid())
                        {
                            newTicket = new Ticket()
                            {
                                TicketId = Guid.NewGuid(),
                                CompanyId = company.CompanyId,
                                CustomerId = CustomerdB.CustomerId,
                                TicketType = LabelHelper.TicketType.InstallMove,
                                //  CreatedBy = new Guid(LabelHelper.SystemUser.ID),
                                CreatedDate = DateTime.Now.UTCCurrentTime(),
                                CompletionDate = DateTime.Now.UTCCurrentTime(),
                                Status = LabelHelper.TicketStatus.Created,
                                LastUpdatedBy = new Guid(LabelHelper.SystemUser.ID),
                                LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                                HasInvoice = false,
                                HasSurvey = false,
                                IsAgreementTicket = true,
                                CreatedBy = CustomerdB.CreatedByUid,
                                AssignedTo = CustomerdB.Soldby


                            };
                            newTicket.Id = _Util.Facade.TicketFacade.InsertTicket(newTicket);
                            logger.WithProperty("tags", "ticket,insert").WithProperty("params", JsonConvert.SerializeObject(newTicket)).Trace("Ticket Id {Id}", newTicket.Id);
                        }
                        else if (CustomerdB.TransferCustomerId.HasValue && CustomerdB.TransferCustomerId.Value > 0)
                        {
                            newTicket = new Ticket()
                            {
                                TicketId = Guid.NewGuid(),
                                CompanyId = company.CompanyId,
                                CustomerId = CustomerdB.CustomerId,
                                TicketType = LabelHelper.TicketType.Transfer,
                                // CreatedBy = new Guid(LabelHelper.SystemUser.ID),
                                CreatedDate = DateTime.Now.UTCCurrentTime(),
                                CompletionDate = DateTime.Now.UTCCurrentTime(),
                                Status = LabelHelper.TicketStatus.Created,
                                LastUpdatedBy = new Guid(LabelHelper.SystemUser.ID),
                                LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                                HasInvoice = false,
                                HasSurvey = false,
                                IsAgreementTicket = true,
                                CreatedBy = CustomerdB.CreatedByUid,
                                AssignedTo = CustomerdB.Soldby
                            };
                            newTicket.Id = _Util.Facade.TicketFacade.InsertTicket(newTicket);
                            logger.WithProperty("tags", "ticket,insert").WithProperty("params", JsonConvert.SerializeObject(newTicket)).Trace("Ticket Id {Id}", newTicket.Id);
                        }
                        else
                        {
                            newTicket = new Ticket()
                            {
                                TicketId = Guid.NewGuid(),
                                CompanyId = company.CompanyId,
                                CustomerId = CustomerdB.CustomerId,
                                TicketType = LabelHelper.TicketType.Installtion,
                                //  CreatedBy = new Guid(LabelHelper.SystemUser.ID),
                                CreatedDate = DateTime.Now.UTCCurrentTime(),
                                CompletionDate = DateTime.Now.UTCCurrentTime(),
                                Status = LabelHelper.TicketStatus.Created,
                                LastUpdatedBy = new Guid(LabelHelper.SystemUser.ID),
                                LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                                HasInvoice = false,
                                HasSurvey = false,
                                IsAgreementTicket = true,
                                CreatedBy = CustomerdB.CreatedByUid,
                                AssignedTo = CustomerdB.Soldby
                            };
                            newTicket.Id = _Util.Facade.TicketFacade.InsertTicket(newTicket);
                            logger.WithProperty("tags", "ticket,insert").WithProperty("params", JsonConvert.SerializeObject(newTicket)).Trace("Ticket Id {Id}", newTicket.Id);
                        }
                        if (newTicket != null)
                        {
                            _Util.Facade.InvoiceFacade.UpdateInvoiceTicketIdByCustomerId(newTicket.TicketId, newTicket.CustomerId);
                        }
                        TicketId = newTicket.TicketId;

                        CustomerAppointment ca = new CustomerAppointment()
                        {
                            AppointmentId = newTicket.TicketId,
                            CompanyId = company.CompanyId,
                            CustomerId = _Customer.CustomerId,
                            EmployeeId = new Guid(LabelHelper.SystemUser.ID),
                            AppointmentType = newTicket.TicketType,
                            AppointmentDate = DateTime.Now.UTCCurrentTime(),
                            CreatedBy = User.Identity.Name,
                            LastUpdatedBy = User.Identity.Name,
                            LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                            IsAllDay = true,
                        };
                        ca.Id = (int)_Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppoinment(ca);
                        TicketUser TU = new TicketUser()
                        {
                            IsPrimary = true,
                            NotificationOnly = false,
                            AddedBy = SoldBy,
                            AddedDate = DateTime.Now.UTCCurrentTime(),
                            TiketId = newTicket.TicketId,
                            UserId = new Guid(LabelHelper.SystemUser.ID),
                        };
                        TU.Id = _Util.Facade.TicketFacade.InsertTicketUser(TU);


                        if (temInv != null && isinvoice == true && !string.IsNullOrWhiteSpace(invoiceid))
                        {
                            Equipment EquipmentDetails = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentName("Monthly Monitoring Rate");
                            caEquipment = new CustomerAppointmentEquipment()
                            {
                                AppointmentId = newTicket.TicketId,
                                EquipmentId = EquipmentDetails != null && EquipmentDetails.EquipmentId != null ? EquipmentDetails.EquipmentId : Guid.Empty,
                                Quantity = 1,
                                UnitPrice = temInv.MonitoringAmount.HasValue ? temInv.MonitoringAmount.Value : 0.0,
                                TotalPrice = temInv.MonitoringAmount.HasValue ? temInv.MonitoringAmount.Value : 0.0,
                                CreatedDate = DateTime.Now.UTCCurrentTime(),
                                CreatedBy = User.Identity.Name,
                                EquipName = EquipmentDetails != null && !string.IsNullOrWhiteSpace(EquipmentDetails.Name) ? EquipmentDetails.Name : "",
                                EquipDetail = EquipmentDetails != null && !string.IsNullOrWhiteSpace(EquipmentDetails.Description) ? EquipmentDetails.Description : "",
                                IsEquipmentRelease = false,
                                IsService = true,
                                CreatedByUid = SoldBy,
                                InstalledByUid = new Guid(LabelHelper.SystemUser.ID),
                                IsAgreementItem = true,
                                IsBaseItem = true,
                                OriginalUnitPrice = temInv.MonitoringAmount.HasValue ? temInv.MonitoringAmount.Value : 0.0,
                                IsInvoiceCreate = true,
                                IsNonCommissionable = false
                            };
                            _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(caEquipment);


                            #region Estimate Added in Ticket
                            List<InvoiceDetail> detlist = _Util.Facade.InvoiceFacade.GetInvoiceDetailsByInvoiceId(temInv.InvoiceId);
                            foreach (var item in detlist)
                            {
                                caEquipment = new CustomerAppointmentEquipment()
                                {
                                    AppointmentId = TicketId,
                                    EquipmentId = item.EquipmentId,
                                    CreatedBy = User.Identity.Name,
                                    EquipDetail = item.EquipDetail,
                                    EquipName = item.EquipName,
                                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                                    Quantity = item.Quantity.HasValue ? item.Quantity.Value : 0,
                                    UnitPrice = item.UnitPrice.HasValue ? item.UnitPrice.Value : 0,
                                    TotalPrice = item.TotalPrice.HasValue ? item.TotalPrice.Value : 0,
                                    IsAgreementItem = true,
                                    CreatedByUid = SoldBy,
                                    InstalledByUid = new Guid(LabelHelper.SystemUser.ID)
                                };
                                _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(caEquipment);
                            }
                            #endregion

                            double ServiceCostInvoice = temInv.MonitoringAmount.HasValue ? temInv.MonitoringAmount.Value : 0.0;
                            double ServiceCostTaxInvoice = 0;
                            GlobalSetting GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(company.CompanyId, _Customer.CustomerId);
                            if (GetSalesTax != null)
                            {
                                ServiceCostTaxInvoice = Math.Round((ServiceCostInvoice * Convert.ToDouble(GetSalesTax.Value)) / 100, 2, MidpointRounding.AwayFromZero);
                            }
                            CustomerdB.MonthlyMonitoringFee = ServiceCostInvoice.ToString();
                            CustomerdB.BillAmount = defaultBillTaxVal ? (ServiceCostInvoice + ServiceCostTaxInvoice) : ServiceCostInvoice;
                            CustomerdB.TotalTax = defaultBillTaxVal ? ServiceCostTaxInvoice : 0;
                            CustomerdB.BillTax = defaultBillTaxVal;
                        }
                        else
                        {
                            List<CustomerPackageEqp> CustomerPackageEqpList = _Util.Facade.PackageFacade.GetCustomerPackageEqpListbyCustomerId(company.CompanyId, _Customer.CustomerId);
                            if (CustomerPackageEqpList != null && CustomerPackageEqpList.Count > 0)
                            {
                                double? eqpfinaltotal = 0.00;
                                foreach (var eqp in CustomerPackageEqpList)
                                {
                                    double? eqptotal = eqp.Total != null ? eqp.Total.Value : 0;
                                    eqpfinaltotal = eqpfinaltotal + eqptotal;
                                }

                                foreach (var eqp in CustomerPackageEqpList)
                                {
                                    
                                    if (eqp.IsTransfered != null && eqp.IsTransfered == true)
                                    {
                                        bool IsBaseMainItem = (eqp.IsIncluded == true || eqp.IsDevice == true || eqp.IsOptionalEqp == true || eqp.IsServiceEquipment == true) ? true : false;
                                        Equipment EquipmentDetails = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentId(eqp.EquipmentId);
                                        caEquipment = new CustomerAppointmentEquipment()
                                        {
                                            AppointmentId = newTicket.TicketId,
                                            EquipmentId = eqp.EquipmentId,
                                            Quantity = eqp.Quantity != null ? eqp.Quantity.Value : 0,
                                            UnitPrice = 0.0,
                                            TotalPrice = 0.0,
                                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                                            CreatedBy = User.Identity.Name,
                                            EquipName = EquipmentDetails.Name,
                                            EquipDetail = EquipmentDetails.Description,
                                            IsEquipmentRelease = true,
                                            IsService = false,
                                            CreatedByUid = SoldBy,
                                            InstalledByUid = new Guid(LabelHelper.SystemUser.ID),
                                            IsAgreementItem = true,
                                            IsBaseItem = IsBaseMainItem,
                                            IsTransfered = true,
                                            QuantityLeftEquipment = eqp.Quantity != null ? eqp.Quantity.Value : 0,
                                            IsEquipmentExist = true,
                                            IsInvoiceCreate = true,
                                            IsNonCommissionable = eqp.IsNonCommissionable
                                        };
                                        _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(caEquipment);
                                    }
                                    else
                                    {
                                        bool IsBaseMainItem = (eqp.IsIncluded == true || eqp.IsDevice == true || eqp.IsOptionalEqp == true || eqp.IsServiceEquipment == true) ? true : false;
                                        Equipment EquipmentDetails = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentId(eqp.EquipmentId);
                                        caEquipment = new CustomerAppointmentEquipment()
                                        {
                                            AppointmentId = newTicket.TicketId,
                                            EquipmentId = eqp.EquipmentId,
                                            Quantity = eqp.Quantity != null ? eqp.Quantity.Value : 0,
                                            UnitPrice = ((eqp.UnitPrice != null ? eqp.UnitPrice.Value : 0) - (eqp.DiscountUnitPricce.HasValue ? eqp.DiscountUnitPricce.Value : 0)),
                                            TotalPrice = eqp.Total != null ? eqp.Total.Value : 0,
                                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                                            CreatedBy = User.Identity.Name,
                                            EquipName = EquipmentDetails.Name,
                                            EquipDetail = EquipmentDetails.Description,
                                            IsEquipmentRelease = false,
                                            IsService = false,
                                            CreatedByUid = SoldBy,
                                            InstalledByUid = new Guid(LabelHelper.SystemUser.ID),
                                            IsAgreementItem = true,
                                            IsBaseItem = IsBaseMainItem,
                                            IsInvoiceCreate = true,
                                            IsNonCommissionable = eqp.IsNonCommissionable,
                                            QuantityLeftEquipment = 0
                                        };
                                        _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(caEquipment);
                                    }

                                    eqp.IsPackageEqp = true;
                                    //   eqp.DiscountPercent = eqp.DiscountPercent != null ? eqp.DiscountPercent.Value : 0;
                                    //   eqp.DiscountInAmount = eqp.DiscountInAmount != null ? eqp.DiscountInAmount.Value : 0;

                                    if (eqp.DiscountPercent.HasValue && eqp.DiscountPercent.Value > 0)
                                    {
                                        eqp.DiscountPercent = eqp.DiscountPercent != null ? eqp.DiscountPercent.Value : 0;
                                        eqp.DiscountInAmount = (eqpfinaltotal * eqp.DiscountPercent) / 100;
                                    }
                                    else
                                    {
                                        eqp.DiscountPercent = 0;
                                        eqp.DiscountInAmount = eqp.DiscountInAmount;

                                    };
                                    

                                    eqp.AppointmentEquipmentIntId = caEquipment.Id;
                                    eqp.AppointmentIntId = newTicket.Id;
                                    _Util.Facade.SmartPackageFacade.UpdateCustomerPackageEqp(eqp);

                                }
                            }
                            List<CustomerPackageService> CustomerPackageServiceList = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(_Customer.CustomerId, company.CompanyId);
                            if (CustomerPackageServiceList != null && CustomerPackageServiceList.Count > 0)
                            {
                                var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(_Customer.CustomerId);
                                var PackageBaseItem = _Util.Facade.PackageFacade.GetAllSmartPackageEquipmentServiceByPackageIdAndCompanyId(PackageCustomerDetails.PackageId, company.CompanyId).Where(m => m.Type == "Service" || m.Type == "Include" || m.Type == "Device" || m.Type == "Optional");
                                foreach (var eqp in CustomerPackageServiceList)
                                {
                                    var smartPackageEquipmentService = _Util.Facade.SmartPackageFacade.GetSmartPackageEquipmentServiceByPackageIdEquipmentId(PackageCustomerDetails.PackageId, eqp.EquipmentId);

                                    bool IsBaseItem = PackageBaseItem.Where(m => m.EquipmentId == eqp.EquipmentId).Count() > 0;

                                    Equipment EquipmentDetails = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentId(eqp.EquipmentId);
                                    caEquipment = new CustomerAppointmentEquipment()
                                    {
                                        AppointmentId = newTicket.TicketId,
                                        EquipmentId = eqp.EquipmentId,
                                        Quantity = 1,
                                        UnitPrice = eqp.UnitPrice,
                                        TotalPrice = eqp.Total != null ? eqp.Total.Value : 0,
                                        CreatedDate = DateTime.Now.UTCCurrentTime(),
                                        CreatedBy = User.Identity.Name,
                                        EquipName = EquipmentDetails.Name,
                                        EquipDetail = EquipmentDetails.Description,
                                        IsEquipmentRelease = false,
                                        IsService = true,
                                        CreatedByUid = SoldBy,
                                        InstalledByUid = new Guid(LabelHelper.SystemUser.ID),
                                        IsAgreementItem = true,
                                        IsBaseItem = IsBaseItem,
                                        OriginalUnitPrice = smartPackageEquipmentService != null ? smartPackageEquipmentService.OriginalPrice : eqp.UnitPrice,
                                        IsInvoiceCreate = true,
                                        IsNonCommissionable = eqp.IsNonCommissionable
                                    };
                                    _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(caEquipment);
                                    var WarrentyEquipment = _Util.Facade.EquipmentFacade.GetWarrentyEquipmentListByEquipmentId(eqp.EquipmentId);
                                    if (WarrentyEquipment != null && WarrentyEquipment.Count > 0)
                                    {
                                        var warrentypackagecus = _Util.Facade.PackageFacade.GetWarrentyPackageCustomerByCustomerIdAndPackageId(eqp.PackageId, eqp.CustomerId);
                                        if (warrentypackagecus != null)
                                        {
                                            warrentypackagecus.WarrentyAvailable = true;
                                            _Util.Facade.PackageFacade.UpdatePackageCustomer(warrentypackagecus);
                                        }
                                    }
                                    eqp.AppointmentEquipmentIntId = caEquipment.Id;
                                    eqp.AppointmentIntId = newTicket.Id;
                                    _Util.Facade.SmartPackageFacade.UpdateCustomerPackageService(eqp);
                                }
                            }
                        }

                        #endregion

                        #region Create Invoice(If estimate is signed then don't need to create invoice)
                        if (!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true && temInv != null && temInv.Status != LabelHelper.EstimateStatus.Signed)
                        {
                            temInv.Status = LabelHelper.EstimateStatus.Signed;
                            temInv.LastUpdatedDate = DateTime.UtcNow;
                            _Util.Facade.InvoiceFacade.UpdateInvoice(temInv);
                            Invoice _tempInv = new Invoice()
                            {
                                CustomerId = temInv.CustomerId,
                                CompanyId = temInv.CompanyId,
                                Amount = temInv.Amount,
                                Tax = temInv.Tax,
                                DiscountCode = temInv.DiscountCode,
                                DiscountAmount = temInv.DiscountAmount,
                                TotalAmount = temInv.TotalAmount,
                                Status = LabelHelper.InvoiceStatus.Open,
                                InvoiceDate = temInv.InvoiceDate,
                                IsEstimate = false,
                                IsBill = temInv.IsBill,
                                BillingAddress = temInv.BillingAddress,
                                DueDate = temInv.DueDate,
                                Terms = temInv.Terms,
                                ShippingAddress = temInv.ShippingAddress,
                                ShippingVia = temInv.ShippingVia,
                                ShippingDate = temInv.ShippingDate,
                                TrackingNo = temInv.TrackingNo,
                                ShippingCost = temInv.ShippingCost,
                                Discountpercent = temInv.Discountpercent,
                                BalanceDue = temInv.BalanceDue,
                                Deposit = temInv.Deposit,
                                Message = temInv.Message,
                                TaxType = temInv.TaxType,
                                Balance = temInv.Balance,
                                Memo = temInv.Memo,
                                InvoiceFor = LabelHelper.InvoiceFor.Invoice,
                                LateFee = temInv.LateFee,
                                LateAmount = temInv.LateAmount,
                                InstallDate = temInv.InstallDate,
                                Description = temInv.Description,
                                DiscountType = temInv.DiscountType,
                                BillingCycle = temInv.BillingCycle,
                                EstimateTerm = temInv.EstimateTerm,
                                Signature = temInv.Signature,
                                CancelReason = temInv.CancelReason,
                                CreatedDate = temInv.CreatedDate,
                                CreatedBy = temInv.CreatedBy,
                                CreatedByUid = temInv.CreatedByUid,
                                LastUpdatedDate = temInv.LastUpdatedDate,
                                LastUpdatedByUid = temInv.LastUpdatedByUid,
                                RefType = temInv.RefType,
                                PaymentType = temInv.PaymentType,
                                BookingId = temInv.BookingId,
                                InstallationType = temInv.InstallationType,
                                SignatureDate = temInv.SignatureDate,
                                InvoiceEmailAddress = temInv.InvoiceEmailAddress,
                                InvoiceCcEmailAddress = temInv.InvoiceCcEmailAddress,
                                MonitoringAmount = temInv.MonitoringAmount,
                                ContractTerm = temInv.ContractTerm,
                                MonitoringDescription = temInv.MonitoringDescription,
                                IsARBInvoice = temInv.IsARBInvoice,
                                TransactionId = temInv.TransactionId,
                                ForteStatus = temInv.ForteStatus,
                                UpfrontMonth = temInv.UpfrontMonth
                            };

                            //tempInv.IsEstimate = false;
                            //tempInv.InvoiceFor = LabelHelper.InvoiceFor.Invoice;
                            //tempInv.Status = LabelHelper.InvoiceStatus.Open;


                            _tempInv.Id = _Util.Facade.InvoiceFacade.InsertInvoice(_tempInv);
                            _tempInv.InvoiceId = _tempInv.Id.GenerateInvoiceNo();
                            _Util.Facade.InvoiceFacade.UpdateInvoice(_tempInv);
                            List<InvoiceDetail> invoiceList = _Util.Facade.InvoiceFacade.GetInvoiceDetailsByInvoiceId(temInv.InvoiceId);
                            if (invoiceList != null)
                            {

                                foreach (var item in invoiceList)
                                {
                                    item.InvoiceId = _tempInv.InvoiceId;
                                    item.CreatedDate = DateTime.UtcNow;
                                    _Util.Facade.InvoiceFacade.InsertInvoiceDetails(item);
                                }
                            }
                            #region Added Monthly Fee as Invoice line item
                            Equipment _EquipmentDetails = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentName("Monthly Monitoring Rate");
                            InvoiceDetail _invDetls = new InvoiceDetail()
                            {
                                InvoiceId = _tempInv.InvoiceId,
                                InventoryId = Guid.Empty,
                                EquipmentId = _EquipmentDetails != null ? _EquipmentDetails.EquipmentId : Guid.Empty,
                                EquipName = "Product and Service",
                                EquipDetail = "Product and Service",
                                CompanyId = _tempInv.CompanyId,
                                Quantity = _tempInv != null && !string.IsNullOrWhiteSpace(_tempInv.UpfrontMonth) && _tempInv.UpfrontMonth != "-1" ? Convert.ToInt32(_tempInv.UpfrontMonth) : 0,
                                UnitPrice = _tempInv.MonitoringAmount,
                                TotalPrice = _tempInv.MonitoringAmount * (_tempInv != null && !string.IsNullOrWhiteSpace(_tempInv.UpfrontMonth) && _tempInv.UpfrontMonth != "-1" ? Convert.ToInt32(_tempInv.UpfrontMonth) : 0),
                                CreatedDate = DateTime.UtcNow,
                                CreatedBy = _tempInv.CreatedBy,
                                Taxable = defaultBillTaxVal
                            };
                            _Util.Facade.InvoiceFacade.InsertInvoiceDetails(_invDetls);
                            #endregion
                        }
                        #endregion
                    }
                    result = _Util.Facade.CustomerFacade.UpdateCustomer(CustomerdB);

                }

            }

            CustomerSnapshot ObjCutomerSnapshot = new CustomerSnapshot
            {
                CustomerId = _Customer.CustomerId,
                CompanyId = company.CompanyId,
                Description = "ConvertLeadToCustomer",
                Logdate = DateTime.Now.UTCCurrentTime(),
                Updatedby = User.Identity.Name
            };

            _Util.Facade.CustomerSnapshotFacade.InsertSnapshot(ObjCutomerSnapshot);

            return TicketId;
        }
        public bool IAgreeLeadtoCustomerConvertQAEmail(Customer leadDetails, Company _Company)
        {

            bool result = true;

            List<Employee> EmployeeDetails = _Util.Facade.EmployeeFacade.GetAllQAEmployee(_Company.CompanyId);
            //  var leadDetails = _Util.Facade.CustomerFacade.GetCustomerByLeadId(_Customer.Id);
            if (EmployeeDetails.Count > 0)
            {
                LeadtoCustomer leadtocus = new LeadtoCustomer();

                leadtocus.CustomerName = leadDetails.FirstName + " " + leadDetails.LastName;
                if (leadDetails.MiddleName != null)
                {
                    leadtocus.CustomerName = leadDetails.FirstName + " " + leadDetails.MiddleName + " " + leadDetails.LastName;
                }
                leadtocus.CustomerAddress = leadDetails.Address;

                foreach (var item in EmployeeDetails)
                {

                    leadtocus.EmployeeName = item.FirstName + " " + item.LastName;
                    leadtocus.ToEmail = item.UserName;
                    _Util.Facade.MailFacade.EmailToQALeadtoCusConverFor(leadtocus, _Company.CompanyId);
                }
            }

            return result;
        }
        private bool IAgreeCustomerFileUpload_v2(Customer Cus, Company Com, Guid TicketId, int? agreementtempid, bool isSignMessageSend, bool? firstpage, int? ticketid, bool? recreate, bool? isinvoice, string invoiceid, bool? isestimator, int? estid, Guid? userid, bool? commercial)
        {
            DateTime FixDate = DateTime.Now.UTCCurrentTime();
            int? Id;
            Id = Cus.Id;
            Guid cusFileId = Guid.NewGuid();
            string cusSignSubmitIP = AppConfig.GetIP;
            //var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            //int idlead = Convert.ToInt32(Lid);
            InstallationAgreementModel Model = new InstallationAgreementModel();
            Model.EmergencyContactList = new List<EmergencyContact>();
            Model.ListAgreementAnswer = new List<AgreementAnswer>();
            Model.EquipmentList = new List<Equipment>();
            Model.CustomerAgreement = new List<CustomerAgreement>();
            Model.SingleCustomerAgreement = new CustomerAgreement();
            var taxtotal = 0.0;
            string ContractTerm = "";
            string ContractTermInWord = "";
            if (Com.CompanyId != null)
            {
                Com = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(Com.CompanyId);
            }
            CustomerExtended CusExd = new CustomerExtended();
            if (Cus != null)
            {
                CusExd = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(Cus.CustomerId);
            }
            if (!string.IsNullOrWhiteSpace(Cus.ContractTeam) && Cus.ContractTeam != "-1")
            {
                if (Cus.ContractTeam.ToLower() == "month to month")
                {
                    ContractTerm = Cus.ContractTeam;
                    ContractTermInWord = Cus.ContractTeam;
                }
                else
                {
                    ContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))).ToString();
                    ContractTermInWord = NumberToWords((Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))));
                }

            }
            var UpfrontAddOnTotal = 0.0;
            var UpfrontAddOnTotalPromo = 0.0;
            bool IsUpfrontPromo = false;
            bool IsServicePromo = false;
            var MonthlyServiceFeeTotal = 0.0;
            var TotalMonthlyMonitoring = 0.0;
            var NewSubTotal = 0.0;
            var TotalDueAtSigning = 0.0;
            var EquipmentTotalPrice = 0.0;
            var ServiceTotalPrice = 0.0;
            var AgreementSubtotal = 0.0;
            var AgreementTotal = 0.0;
            var AgreementTax = 0.0;
            double ServiceTax = 0.0;
            var NotARBEnabledTotalPrice = 0.0;
            string InstallTypeName = "";
            bool IsNonConfirming = false;
            var NonConfirmingFee = 0.0;
            var AdvanceServiceFeeTotal = 0.0;
            string contractCreatedDateVal = "";
            if (CusExd.ContractCreatedDate != null)
            {
                contractCreatedDateVal = CusExd.ContractCreatedDate.Value.ToString("M/d/yy");
            }
            else
            {
                CusExd.ContractCreatedDate = DateTime.UtcNow;
                _Util.Facade.CustomerFacade.UpdateCustomerExtended(CusExd);
                contractCreatedDateVal = CusExd.ContractCreatedDate.Value.ToString("M/d/yy");
            }
            if (Cus.CreditScoreValue == null)
            {
                Cus.CreditScoreValue = 0;
            }
            var PackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(Cus.CustomerId);
            if (PackageCustomer != null)
            {
                if (PackageCustomer.NonConforming && PackageCustomer.NonConformingFee > 0 && (Cus.CreditScoreValue < PackageCustomer.MinCredit || Cus.CreditScoreValue > PackageCustomer.MaxCredit))
                {
                    IsNonConfirming = true;
                    NonConfirmingFee = PackageCustomer.NonConformingFee.Value;
                }
            }

            var SmartPackageEquipmentServiceList = new List<SmartPackageEquipmentService>();
            var GetCityTaxList = _Util.Facade.CompanyBranchFacade.GetCityTaxRate(Cus.CustomerId, Com.CompanyId);
            if (GetCityTaxList.Count > 0)
            {
                foreach (var item1 in GetCityTaxList)
                {
                    AgreementTax = item1.Rate;
                    ServiceTax = item1.Rate;
                }
            }
            else
            {
                Guid CustomerId = new Guid();
                if (Cus != null)
                {
                    CustomerId = Cus.CustomerId;
                }

                var GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(Com.CompanyId, CustomerId);
                if (GetSalesTax != null)
                {
                    AgreementTax = Convert.ToDouble(GetSalesTax.Value);
                    ServiceTax = Convert.ToDouble(GetSalesTax.Value);
                }

            }
            #region Invoice
            Invoice invoice = new Invoice();
            CustomerProratedBill cpb = new CustomerProratedBill();
            cpb = _Util.Facade.InvoiceFacade.GetCusProratedBillByCustomerId(Cus.CustomerId);
            List<InvoiceDetail> invoiceList = new List<InvoiceDetail>();
            string invDiagram = "";
            if (!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true)
            {
                invoice = _Util.Facade.InvoiceFacade.GetByInvoiceId(invoiceid);
                if (invoice != null)
                {
                    invDiagram = invoice.InvoiceContractDiagram;
                    invoiceList = _Util.Facade.InvoiceFacade.GetInvoiceDetialsListByInvoiceId(invoice.InvoiceId);
                }

            }
            #endregion
            #region Estimator
            Employee userInfo = new Employee();
            if (userid != Guid.Empty)
            {
                userInfo = _Util.Facade.EmployeeFacade.GetEmployeeByEmployeeId(userid.Value);
            }
            CreateEstimator createest = new CreateEstimator();
            if (isestimator.Value && estid > 0)
            {
                CreateEstimator ca = new CreateEstimator();
                ca.EstimatorSetting = new EstimatorSetting();
                ca.Company = Com;

                ca.Estimator = _Util.Facade.EstimatorFacade.GetById(estid.Value);
                ca._EstimatorPDFFilter = _Util.Facade.EstimatorFacade.GetEstimatorPdfFilterByComIdCusIdUserId(Com.CompanyId, userid.Value, ca.Estimator.CustomerId);
                ca.estimatorDetails = _Util.Facade.EstimatorFacade.GetEstimatorDetailListByEstimatorId(ca.Estimator.EstimatorId);
                ca.estimatorServices = _Util.Facade.EstimatorFacade.GetEstimatorServicesByEstimatorId(ca.Estimator.EstimatorId);
                if (ca.Estimator == null || ca.Estimator.CompanyId != Com.CompanyId)
                {
                    return false;
                }
                if ((ca.estimatorDetails == null || ca.estimatorDetails.Count() == 0) && (ca.estimatorServices == null || ca.estimatorServices.Count() == 0))
                {
                    return false;
                }
                Customer tempCUstomer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(ca.Estimator.CustomerId);
                if (tempCUstomer == null)
                {
                    return false;
                }

                CreateEstimator processedModel = GetEstimatorModelById(ca.Estimator, ca.estimatorDetails, ca.estimatorServices, Com, tempCUstomer, ca._EstimatorPDFFilter, Com.CompanyId);
                Estimator estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(ca.Estimator.EstimatorId);
                if (estimator != null)
                {
                    ViewBag.CoverLetter = estimator.CoverLetter;
                    processedModel.Estimator.CoverLetter = estimator.CoverLetter;
                    processedModel.Estimator.CoverLetterFile = estimator.CoverLetterFile;
                    processedModel.Estimator.ServicePlanType = estimator.ServicePlanType;
                    processedModel.Estimator.ServicePlanRate = estimator.ServicePlanRate;
                    processedModel.Estimator.ServicePlanAmount = estimator.ServicePlanAmount;
                    processedModel.Estimator.ServiceTaxAmount = estimator.ServiceTaxAmount;
                    processedModel.Estimator.ServiceTotalAmount = estimator.ServiceTotalAmount;
                    processedModel.Estimator.ShowServicePlan = estimator.ShowServicePlan;
                    processedModel.Estimator.ShowService = estimator.ShowService;
                    processedModel.Estimator.ServicePlanTypeName = "Service Plan";

                    SelectListItem selectListItem = _Util.Facade.LookupFacade.GetDropdownsByKey("ServicePlans").Where(x => x.Value == estimator.ServicePlanType).FirstOrDefault();
                    if (selectListItem != null)
                    {
                        processedModel.Estimator.ServicePlanTypeName = selectListItem.Text;
                    }

                }
                if (ca.estimatorDetails != null)
                {
                    foreach (var item in ca.estimatorDetails)
                    {
                        Manufacturer Manufacturer = _Util.Facade.EquipmentFacade.GetManufacturerByManufacturerId(item.ManufacturerId);
                        if (Manufacturer != null)
                        {
                            item.Manufacturer = Manufacturer.Name;
                        }
                        item.CreatedDate = DateTime.Now.UTCCurrentTime();
                        ca.SubTotal = ca.SubTotal + (item.TotalPrice.HasValue ? item.TotalPrice.Value : 0);
                        item.EquipmentFile = _Util.Facade.EquipmentFileFacade.GetEquipmentFilesByEquipmentIdAndFileType(item.EquipmentId, LabelHelper.EquipmentFileType.ProfilePicture).FirstOrDefault();
                        if (item.EquipmentFile == null)
                        {
                            item.EquipmentFile = new EquipmentFile();
                        }
                    }
                }
                if (ca.estimatorServices != null)
                {
                    foreach (var item in ca.estimatorServices)
                    {
                        processedModel.ServiceSubTotal += ca.ServiceSubTotal + item.Amount;
                    }
                    processedModel.TotalServiceAmount = processedModel.ServiceSubTotal + ca.ServiceTax;
                }
                createest = processedModel;
                createest.eSecurityLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/eSecurity_logo.png");
                createest.specializedLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/specialized_property_management_logo.png");
                string EstimatorContractTerm = "";
                if (!string.IsNullOrWhiteSpace(createest.Estimator.ContractTerm) && createest.Estimator.ContractTerm != "-1")
                {
                    if (createest.Estimator.ContractTerm.ToLower() == "month to month")
                    {
                        EstimatorContractTerm = createest.Estimator.ContractTerm;
                    }
                    else
                    {
                        EstimatorContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(createest.Estimator.ContractTerm) * 12))).ToString() + " month";
                    }

                }
                createest.EstimatorContractTerm = EstimatorContractTerm;
            }
            #endregion
            var CustomEquipmentList = new List<Equipment>();
            if (firstpage == true || recreate == true)
            {
                CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                if (CustomEquipmentList.Count > 0)
                {
                    foreach (var item in CustomEquipmentList)
                    {
                        EquipmentTotalPrice += item.Total;
                        UpfrontAddOnTotal += item.Total;
                    }
                }
            }
            else
            {
                CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                if (CustomEquipmentList.Count > 0)
                {
                    foreach (var item in CustomEquipmentList)
                    {
                        EquipmentTotalPrice += item.Total;
                        UpfrontAddOnTotal += item.Total;
                    }
                }
            }
            var CustomServiceList = new List<Equipment>();
            if (firstpage == true || recreate == true)
            {
                CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                if (CustomServiceList.Count > 0)
                {
                    foreach (var item in CustomServiceList)
                    {
                        EquipmentTotalPrice += item.Total;
                        ServiceTotalPrice += item.Total;
                        MonthlyServiceFeeTotal += item.Total;
                    }
                }
            }
            else
            {
                CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                if (CustomServiceList.Count > 0)
                {
                    foreach (var item in CustomServiceList)
                    {
                        EquipmentTotalPrice += item.Total;
                        ServiceTotalPrice += item.Total;
                        MonthlyServiceFeeTotal += item.Total;
                    }
                }
            }
            var NotARBEnabledServiceList = new List<Equipment>();
            if (firstpage == true || recreate == true || commercial == true)
            {
                NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                if (NotARBEnabledServiceList.Count > 0)
                {
                    foreach (var item in NotARBEnabledServiceList)
                    {
                        NotARBEnabledTotalPrice += item.Total;
                    }
                }
            }
            else
            {
                NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListFromService(Cus.CustomerId, Com.CompanyId);
                if (NotARBEnabledServiceList.Count > 0)
                {
                    foreach (var item in NotARBEnabledServiceList)
                    {
                        NotARBEnabledTotalPrice += item.Total;
                    }
                }
            }
            #region Advance Monitoring Service Month

            PaymentInfoCustomer paycus = new PaymentInfoCustomer();
            paycus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayForService(Cus.CustomerId);
            int ForMonth = 1;
            if (paycus != null && paycus.ForMonths.HasValue)
            {
                ForMonth = paycus.ForMonths.Value;
            }
            if (ForMonth > 1)
            {
                AdvanceServiceFeeTotal = MonthlyServiceFeeTotal * (ForMonth - 1);

            }
            #endregion
            Cus.MonthlyMonitoringFee = Convert.ToString(ServiceTotalPrice);
            TotalMonthlyMonitoring = MonthlyServiceFeeTotal;
            NewSubTotal = TotalMonthlyMonitoring + UpfrontAddOnTotal;

            if (CustomServiceList.Count > 0 || CustomEquipmentList.Count > 0)
            {
                if (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue)
                {
                    AgreementSubtotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                    NewSubTotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                }
                else
                {
                    AgreementSubtotal = EquipmentTotalPrice;
                    NewSubTotal = EquipmentTotalPrice;
                }
            }
            if (IsNonConfirming && NonConfirmingFee > 0)
            {
                AgreementSubtotal = AgreementSubtotal + NonConfirmingFee;
                NewSubTotal = NewSubTotal + NonConfirmingFee;
            }
            if (AgreementTax != 0.0)
            {
                taxtotal = (AgreementSubtotal / 100) * AgreementTax;
                Model.TaxTotal = taxtotal;
                AgreementTotal = AgreementSubtotal + taxtotal;
                TotalDueAtSigning = NewSubTotal + taxtotal;
            }
            else
            {
                Model.TaxTotal = 0.0;
                AgreementTotal = AgreementSubtotal;
                TotalDueAtSigning = NewSubTotal;
            }

            if (ServiceTax != 0.0)
            {
                taxtotal = (ServiceTotalPrice / 100) * ServiceTax;
                //  MonthlyServiceFeeTotal = ServiceTotalPrice + taxtotal;
            }
            else
            {
            }


            var objCusAgree = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByComIdAndCusIsAndSubmitAgreement(Com.CompanyId, Cus.CustomerId);
            if (objCusAgree == null)
            {
                CustomerAgreement objCustomerAgreement = new CustomerAgreement()
                {
                    CompanyId = Com.CompanyId,
                    CustomerId = Cus.CustomerId,
                    IP = AppConfig.GetIP,
                    UserAgent = AppConfig.GetUserAgent,
                    Type = LabelHelper.CustomerAgreementLog.SubmitAgreement,
                    AddedDate = DateTime.UtcNow
                };
                _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(objCustomerAgreement);
            }
            var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(Cus.CustomerId, Com.CompanyId);
            if (PackageCustomerDetails != null)
            {
                InstallTypeName = _Util.Facade.PackageFacade.SmartInstallTypeNameByInstallTypeId(Convert.ToInt32(PackageCustomerDetails.SmartInstallTypeId));
                if (string.IsNullOrWhiteSpace(InstallTypeName))
                {
                    InstallTypeName = "New Install";
                }
                SmartPackageEquipmentServiceList = _Util.Facade.PackageFacade.GetAllSmartPackageIncludeEquipmentByPackageIdAndCompanyId(PackageCustomerDetails.PackageId, Com.CompanyId);
            }
            var PaymentDetails = _Util.Facade.PaymentInfoFacade.GetAllPaymentInfoByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId).Where(m => m.PayFor == "First Month").FirstOrDefault();
            var agreementPayment = _Util.Facade.PaymentInfoFacade.GetLeadAgreementPaymentInfoByCustomerId(Cus.CustomerId);
            string paymentoverviewheader = "";
            string paymentoverviewdata = "";
            if (agreementPayment != null && agreementPayment.Count > 0)
            {
                paymentoverviewheader = "<table style='border-collapse:collapse; width:100%; font-family:Arial; table-layout:fixed; font-size:13px;'>{0}</table>";
                foreach (var pay in agreementPayment)
                {
                    var sppay = pay.Type.Split('_');
                    if (sppay.Length > 0)
                    {
                        if (sppay[0] == "CC")
                        {
                            var cardNumber = pay.CardNumber.Replace('-', ' ').Replace(" ", "");
                            if (cardNumber.Length == 16)
                            {
                                paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(12, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                            }
                            else
                            {
                                paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(11, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                            }
                        }
                        else if (sppay[0] == "ACH")
                        {
                            paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Type: " + pay.BankAccountType + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Routing No: " + pay.RoutingNo + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account No: " + string.Concat("".PadLeft(pay.AcountNo.Length - 4, '*'), pay.AcountNo.Substring(pay.AcountNo.Length - 4)) + @"</td>
                                                        </tr>";
                        }
                    }
                }
            }
            var CustomerAddress = AddressHelper.MakeAddress(Cus);
            var CustomerInstallAddress = AddressHelper.MakeInstallAddress(Cus);
            CustomerSignature cs = new CustomerSignature();
            GlobalSetting glbs = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(Com.CompanyId, "CompanySignature");
            string cusSignature = "";
            string cussignDate = "";
            DateTime cussignDateVal = new DateTime();
            if (firstpage.HasValue && firstpage.Value == true)
            {
                cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "First Page");
            }
            else if (commercial.HasValue && commercial.Value == true)
            {
                cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Commercial");
            }
            else if (isinvoice.HasValue && isinvoice.Value == true)
            {
                cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimate");
            }
            else if (isestimator.HasValue && isestimator.Value == true)
            {
                cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimator");
            }
            else if (recreate.HasValue && recreate.Value == true)
            {
                cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Recreate");
            }
            else if (Cus != null && agreementtempid.HasValue && agreementtempid.Value > 0)
            {
                cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Agreement File");
            }
            else
            {
                cusSignature = Cus.Singature;
                if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                {
                    cussignDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                    cussignDateVal = Cus.CustomerSignatureDate.Value.UTCToClientTime();
                }

            }
            if (cs != null && (agreementtempid != 0 || (firstpage.HasValue && firstpage.Value == true) || (recreate.HasValue && recreate.Value == true) || (commercial.HasValue && commercial.Value == true)))
            {
                cusSignature = cs.Signature;
                if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                {
                    cussignDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                    cussignDateVal = cs.CreatedDate.UTCToClientTime();
                }

            }
            Double MMR = 1;
            Double CTerm = 0;

            double.TryParse(Cus.MonthlyMonitoringFee, out MMR);
            double.TryParse(ContractTerm, out CTerm);
            //(!string.IsNullOrWhiteSpace() ? Convert.ToDouble(Cus.MonthlyMonitoringFee) : 1) * Convert.ToDouble(ContractTerm);
            Double TotalPayments = MMR * CTerm;
            #region For Promo Pyment Method
            List<PaymentInfoCustomer> paycusList = new List<PaymentInfoCustomer>();
            PaymentProfileCustomer paymentProfile = new PaymentProfileCustomer();
            paycusList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(Cus.CustomerId);
            if (paycusList != null && paycusList.Count > 0)
            {
                foreach (var item in paycusList)
                {
                    paymentProfile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(item.PaymentInfoId);
                    if (paymentProfile != null && paymentProfile.Type == LabelHelper.PaymentMethod.Promo)
                    {
                        if (item.Payfor == "Activation Fee")
                        {
                            NonConfirmingFee = 0.0;

                            if (PackageCustomer != null)
                            {
                                PackageCustomer.ActivationFee = 0.0;
                            }
                            NewSubTotal = NewSubTotal - (PackageCustomer.AdditionFee + NonConfirmingFee);
                        }
                        else if (item.Payfor == "Equipment")
                        {
                            IsUpfrontPromo = true;
                            NewSubTotal = NewSubTotal - UpfrontAddOnTotal;
                        }
                        else if (item.Payfor == "Service")
                        {
                            NewSubTotal = NewSubTotal - TotalMonthlyMonitoring;
                            IsServicePromo = true;

                        }


                    }

                }

            }
            #endregion
            #region LeadSource
            string LeadSource = "";
            Lookup leadsource = _Util.Facade.LookupFacade.GetLookupByKeyAndValueAndCompanyId("LeadSource", Cus.LeadSource, Com.CompanyId);
            LeadSource = leadsource != null && !string.IsNullOrWhiteSpace(leadsource.DisplayText) && leadsource.DataValue != "-1" ? leadsource.DisplayText : "";
            #endregion
            Model = new InstallationAgreementModel()
            {
                CSIDNumber = Cus.Id,
                LeadSource = LeadSource,
                FileId = cusFileId.ToString(),
                CusSignIP = !string.IsNullOrWhiteSpace(cussignDate) ? cusSignSubmitIP : "",
                IsNonConfirming = IsNonConfirming,
                NonConfirmingFee = NonConfirmingFee,
                InstallDate = Cus.InstallDate != null ? Convert.ToDateTime(Cus.InstallDate).ToShortDateString() : "",
                OriginalContactDate = (Cus.OriginalContactDate != null && Cus.OriginalContactDate.HasValue) ? Cus.OriginalContactDate.Value : new DateTime(),
                AccountType = Cus.Type,
                ContractType = CusExd != null && !string.IsNullOrWhiteSpace(CusExd.ContractType) ? CusExd.ContractType : "",
                Referredby = Cus.ReferringCustomer != Guid.Empty ? _Util.Facade.CustomerFacade.GetCustomerNameById(Cus.ReferringCustomer) : "",
                SocialSecurityNumber = Cus.SSN,
                //Owner2ndPhone = Cus.SecondaryPhone,
                Owner2ndPhone = Cus.PrimaryPhone,
                InitialStreet = Cus.Street,
                InitialCity = Cus.City,
                InitialCountry = Cus.County,
                InitialState = Cus.State,
                InitialZip = Cus.ZipCode,
                InitialApt = Cus.Appartment,
                BillingCity = Cus.CityPrevious,
                BillingState = Cus.StatePrevious,
                BillingZip = Cus.ZipCodePrevious,
                BillingCountry = Cus.CountryPrevious,
                BillingStreet = Cus.StreetPrevious,
                InstallTypeName = InstallTypeName,
                SmartPackageEquipmentServiceList = SmartPackageEquipmentServiceList,
                UpfrontAddOnTotal = UpfrontAddOnTotal,
                UpfrontAddOnTotalPromo = UpfrontAddOnTotalPromo,
                IsUpfrontPromo = IsUpfrontPromo,
                IsServicePromo = IsServicePromo,
                MonthlyServiceFeeTotal = MonthlyServiceFeeTotal,
                TotalMonthlyMonitoring = TotalMonthlyMonitoring,
                NewSubTotal = NewSubTotal,
                TotalDueAtSigning = TotalDueAtSigning,
                PaymentDetails = PaymentDetails != null ? PaymentDetails : new PaymentInfo(),
                DisplayName = Cus.DisplayName,
                BillingAddress = CustomerAddress,
                OwnerAddress = CustomerAddress,
                InstallAddress = CustomerInstallAddress,
                OwnerEmail = Cus.EmailAddress,
                //OwnerPhone = Cus.PrimaryPhone,
                OwnerPhone = Cus.CellNo,
                OwnerName = Cus.FirstName + " " + Cus.LastName,
                FirstName = Cus.FirstName,
                LastName = Cus.LastName,
                EmergencyContactList = _Util.Facade.EmergencyContactFacade.GetAllEmergencyContactByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId),
                CompanyName = Com.CompanyName,
                CompanySate = string.Format("{0}, {1} {2}", Com.City, Com.State, Com.ZipCode),
                CompanyStreet = Com.Street,
                CompanyWebsite = Com.Website,
                SubscribedMonths = ContractTerm,
                SubscribedMonthsInWord = ContractTermInWord,
                RenewalMonths = Cus.RenewalTerm.HasValue ? Cus.RenewalTerm.Value : 0,
                Password = Cus.Passcode,
                DateOfTransaction = FixDate.UTCToClientTime(),
                CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyEmailLogoByCompanyId(Com.CompanyId),
                EquipmentList = CustomEquipmentList.ToList(),
                ServiceList = CustomServiceList.ToList(),
                ActivationFee = (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue) ? PackageCustomer.ActivationFee.Value : 0,
                BusinessName = Cus.BusinessName,
                MonthlyMonitoringFee = Cus.MonthlyMonitoringFee,
                EffectiveDate = FixDate.UTCToClientTime(),
                CustomerSignature = cusSignature,
                CustomerSignatureStringDate = cussignDate,
                CustomerSignatureStringDateVal = cussignDateVal,
                //ContractCreatedDateVal = contractCreatedDateVal,
                ContractCreatedDateVal = (CusExd.ContractStartDate != null && CusExd.ContractStartDate.HasValue) ? CusExd.ContractStartDate.Value.ToShortDateString() : DateTime.Now.ToShortDateString(),
                CustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByCompanyIdAndCustomerId1(Com.CompanyId, Cus.CustomerId),
                Subtotal = AgreementSubtotal,
                Tax = AgreementTax,
                TaxTotal = taxtotal,
                Total = AgreementTotal,
                EContractId = Cus.Id,
                ListAgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(Cus.CustomerId),
                SalesRepresentative = !string.IsNullOrEmpty(Cus.Soldby) ? _Util.Facade.EmployeeFacade.GetEmployeeNumByEmployeeId(new Guid(Cus.Soldby)).ToString() : "",
                TotalPayments = TotalPayments,
                SingleCustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetIpAndUserAgentByCustomerIdAndCompanyId(Com.CompanyId, Cus.CustomerId),
                ListContactEmergency = string.Format(paymentoverviewheader, paymentoverviewdata),
                ListPaymentInfo = string.Format(paymentoverviewheader, paymentoverviewdata),
                DoingBusinessAs = Cus.DBA,
                DispalyName = Cus.DisplayName,
                CompanyPhone = Com.Phone,
                FirstPage = firstpage.HasValue ? firstpage.Value : false,
                Commercial = commercial.HasValue ? commercial.Value : false,
                IsInvoice = isinvoice.HasValue ? isinvoice.Value : false,
                InvoiceId = invoiceid,
                InvoiceDiagram = invDiagram,
                InvoiceList = invoiceList,
                IsEstimator = isestimator.HasValue ? isestimator.Value : false,
                createEst = createest,
                userInfo = userInfo,
                inv = invoice,
                NotARBEnabledServiceList = NotARBEnabledServiceList.ToList(),
                NotARBEnabledTotalPrice = NotARBEnabledTotalPrice,
                ProratedAmout = cpb != null ? Math.Round(cpb.Amount, 2, MidpointRounding.AwayFromZero) : 0.0,
                FinancedAmout = Cus != null && Cus.FinancedAmount != null ? Math.Round(Cus.FinancedAmount.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                MonthlyFinanceRate = CusExd != null && CusExd.MonthlyFinanceRate != null ? Math.Round(CusExd.MonthlyFinanceRate.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                AdvanceServiceFeeTotal = AdvanceServiceFeeTotal
            };
            if (agreementtempid != 0)
            {
                if (cs != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(cs.Signature))
                {
                    Model.CompanySignature = glbs.Value;
                    if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                    {
                        Model.CompanySignatureDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                    }
                }
            }
            else if (firstpage == true || recreate == true || commercial == true)
            {
                if (glbs != null && !string.IsNullOrWhiteSpace(glbs.Value))
                {
                    Model.CompanySignature = glbs.Value;
                    Model.CompanySignatureDate = cussignDate;
                }
            }
            else
            {
                if (Cus != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(Cus.Singature))
                {
                    Model.CompanySignature = glbs.Value;
                    if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                    {
                        Model.CompanySignatureDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                    }
                }
            }

            //if (Model.EquipmentList != null && Model.EquipmentList.Count() > 0)
            //{
            //    Model.Subtotal = Model.EquipmentList.Sum(x => x.TotalPrice) + Model.ActivationFee;
            //    var taxp = Convert.ToDouble(_Util.Facade.GlobalSettingsFacade.GetSalesTax(Com.CompanyId).Value);
            //    Model.Tax = (Model.Subtotal * taxp) / 100;
            //    Model.Total = Model.Subtotal + Model.Tax;

            //}
            //else
            //{
            //    Model.EquipmentList = new List<Equipment>();
            //}

            if (Model.EmergencyContactList == null)
            {
                Model.EmergencyContactList = new List<EmergencyContact>();
            }
            Model.KazarLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/kazar_logo.PNG");
            ViewBag.CompanyId = Com.CompanyId.ToString();
            Model.CompanyId = Com.CompanyId.ToString();
            Model.CurrentCurrency = _Util.Facade.GlobalSettingsFacade.GetCurrentCurrencyByCompanyId(Com.CompanyId);
            string body = _Util.Facade.AgreementFacade.MakeSmartAgreementPdf(Model, agreementtempid.HasValue ? agreementtempid.Value : 0);
            ViewBag.Body = body;
            ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("SmartInstallationAgreement", Model)
            {
                //FileName = "TestView.pdf",
                PageSize = Rotativa.Options.Size.A4,
                PageOrientation = Rotativa.Options.Orientation.Portrait,
                PageMargins = { Left = 1, Right = 1 },

            };
            var FileNo = 1;
            var ExistAgreementPdfCount = _Util.Facade.CustomerFileFacade.GetCustomerAgreementFileByCustomerId(Cus.CustomerId);
            if (ExistAgreementPdfCount != null)
            {
                FileNo = ExistAgreementPdfCount.Count + 1;
            }
            byte[] applicationPDFData = actionPDF.BuildPdf(ControllerContext);
            Random rand = new Random();
            string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
            var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(Com.CompanyId).CompanyName.ReplaceSpecialChar();
            var pdftempFolderName = string.Format(filename, comname) + Id + "Agreement_Mail.pdf";
            if (FileNo > 1)
            {
                pdftempFolderName = string.Format(filename, comname) + Id + string.Format("Agreement_Mail_{0}.pdf", FileNo);
            }
            string Serverfilename = FileHelper.GetFileFullPath(pdftempFolderName);
            FileHelper.SaveFile(applicationPDFData, Serverfilename);
            var cusinfo = _Util.Facade.CustomerFacade.GetById(Id.Value);
            string[] comNameSplit = comname.Split('/');

            #region Send Customer sign successfully
            if (isSignMessageSend)
            {
                SetupLeadCustormer slc = new SetupLeadCustormer
                {
                    CustomerName = Cus.DisplayName,
                    EmailBody = Cus.DisplayName,
                    ToEmail = cusinfo.AgreementEmail,
                    CompanyName = Com.CompanyName,
                    CustomerId = cusinfo.CustomerId.ToString(),
                    EmployeeId = Com.CompanyId.ToString(),
                    PdfAggrement = new Attachment(Serverfilename, MediaTypeNames.Application.Octet)
                };
                string from = "";
                if (firstpage.HasValue && firstpage.Value == true && ticketid.HasValue && ticketid.Value > 0)
                {
                    from = "First Page Agreement Signed";
                }
                if (commercial.HasValue && commercial.Value == true && ticketid.HasValue && ticketid.Value > 0)
                {
                    from = "Commercial Agreement Signed";
                }
                if (recreate.HasValue && recreate.Value == true)
                {
                    from = "Recreate Agreement Signed";
                }
                if (CusExd.IsSignAgrSendToCus == true)
                {
                    _Util.Facade.MailFacade.EmailToLeadSignAgreement(slc, Com.CompanyId, from);
                }
            }
            #endregion

            var FileNameDes = "Smart_Lead_Agreement.pdf";
            if (cusinfo.IsContractSigned == true)
            {
                FileNameDes = "Smart_Lead_Agreement_Signed.pdf";
            }
            if (FileNo > 1)
            {
                if (firstpage.HasValue && firstpage.Value == true && ticketid.HasValue && ticketid.Value > 0)
                {
                    FileNameDes = string.Format("FirstPage_Agreement_Signed.pdf", FileNo);
                }
                else if (recreate.HasValue && recreate.Value == true)
                {
                    FileNameDes = string.Format("Recreate_Agreement_Signed.pdf", FileNo);
                }
                else if (CusExd.ContractType == "Commercial")
                {
                    FileNameDes = string.Format("Commercial_Agreement_Signed.pdf", FileNo);
                }
                else if (CusExd.ContractType == "CommercialFire")
                {
                    FileNameDes = string.Format("Commercial_Fire_Agreement_Signed.pdf", FileNo);
                }

                else
                {
                    if (FileNo > 2)
                    {
                        FileNameDes = string.Format("Smart_Lead_Agreement_Signed.pdf", FileNo);
                    }
                    else
                    {
                        FileNameDes = string.Format("Smart_Lead_Agreement_Signed.pdf", FileNo);
                    }
                }
            }
            CustomerFile cfs = new CustomerFile()
            {
                FileId = cusFileId,
                FileDescription = Cus.Id + "_" + FileNameDes,
                Filename = "/" + pdftempFolderName,
                FileFullName = Id + FileNameDes,
                Uploadeddate = DateTime.Now.UTCCurrentTime(),
                CustomerId = cusinfo.CustomerId,
                CompanyId = Com.CompanyId,
                IsActive = true,
                CreatedBy = cusinfo.Soldby1,
                CreatedDate = DateTime.Now.UTCCurrentTime(),
                UpdatedBy = cusinfo.Soldby1,
                UpdatedDate = DateTime.Now.UTCCurrentTime(),
                WMStatus = LabelHelper.WatermarkStatus.Pending,
                AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
            };
            int CustomerFileId = (int)_Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
            string Cusname = "";
            if (!String.IsNullOrWhiteSpace(cusinfo.DBA))
            {
                Cusname = cusinfo.DBA;
            }
            else if (!String.IsNullOrWhiteSpace(cusinfo.BusinessName))
            {
                Cusname = cusinfo.BusinessName;
            }
            else
            {
                Cusname = cusinfo.FirstName + ' ' + cusinfo.LastName;
            }
            if (firstpage.HasValue && firstpage.Value == true)
            {

                //  base.AddUserActivityForCustomer("First Page Agreement Is Signed", LabelHelper.ActivityAction.AddFile, cusinfo.CustomerId, null, null);
                UserActivity ua = new UserActivity()
                {
                    ActivityId = Guid.NewGuid(),
                    PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                    ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                    // new paramiter
                    Action = "File Signed",
                    StatsDate = DateTime.UtcNow,
                    UserId = cusinfo.CustomerId != null ? cusinfo.CustomerId : Guid.NewGuid(),
                    UserName = Cusname,
                    ActionDisplyText = "First Page Agreement Is Signed",


                    UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                    UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                };
                Guid ActivityID = ua.ActivityId;
                _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                UserActivityCustomer uac = new UserActivityCustomer()
                {
                    ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                    CustomerId = cusinfo.CustomerId != null ? cusinfo.CustomerId : Guid.NewGuid(),
                    RefId = cusinfo.Id.ToString(),

                };
                _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);

            }

            if (commercial.HasValue && commercial.Value == true)
            {

                //  base.AddUserActivityForCustomer("First Page Agreement Is Signed", LabelHelper.ActivityAction.AddFile, cusinfo.CustomerId, null, null);
                UserActivity ua = new UserActivity()
                {
                    ActivityId = Guid.NewGuid(),
                    PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                    ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                    // new paramiter
                    Action = "File Signed",
                    StatsDate = DateTime.UtcNow,
                    UserId = cusinfo.CustomerId != null ? cusinfo.CustomerId : Guid.NewGuid(),
                    UserName = Cusname,
                    ActionDisplyText = "Commercial Agreement Is Signed",


                    UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                    UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                };
                Guid ActivityID = ua.ActivityId;
                _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                UserActivityCustomer uac = new UserActivityCustomer()
                {
                    ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                    CustomerId = cusinfo.CustomerId != null ? cusinfo.CustomerId : Guid.NewGuid(),
                    RefId = cusinfo.Id.ToString(),

                };
                _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);

            }

            if (recreate.HasValue && recreate.Value == true)
            {

                //  base.AddUserActivityForCustomer("Recreate Agreement Is Signed", LabelHelper.ActivityAction.AddFile, cusinfo.CustomerId, null, null);
                UserActivity ua = new UserActivity()
                {
                    ActivityId = Guid.NewGuid(),
                    PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                    ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                    // new paramiter
                    Action = "File Signed",
                    StatsDate = DateTime.UtcNow,
                    UserId = cusinfo.CustomerId != null ? cusinfo.CustomerId : Guid.NewGuid(),
                    UserName = Cusname,
                    ActionDisplyText = "Recreate Agreement Is Signed",


                    UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                    UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                };
                Guid ActivityID = ua.ActivityId;
                _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                UserActivityCustomer uac = new UserActivityCustomer()
                {
                    ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                    CustomerId = cusinfo.CustomerId != null ? cusinfo.CustomerId : Guid.NewGuid(),
                    RefId = cusinfo.Id.ToString(),

                };
                _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);

            }

            #region add AgreementPdf 
            if (CustomerFileId > 0 && TicketId != new Guid())
            {
                TicketReply Tr = new TicketReply()
                {
                    Message = "<a class='fileDownloadCustom cus - anchor' href='/Download/?"
                    + (HttpUtility.UrlEncode(HS.Framework.DESEncryptionDecryption.EncryptPlainTextToCipherText(CustomerFileId.ToString())))
                    + "' id='down-file' target='_blank' data-id='"
                    + CustomerFileId + "'><img class='size-img' src='" + AppConfig.SiteDomain + "/Content/Icons/pdf.png' />" + cfs.FileDescription + "</a>",
                    RepliedDate = DateTime.Now.UTCCurrentTime(),
                    TicketId = TicketId,
                    UserId = cusinfo.CustomerId,
                    IsPrivate = false
                };
                _Util.Facade.TicketFacade.InsertTicketReply(Tr);
            }
            #endregion


            return true;
        }
        private bool IAgreeCustomerFileUpload(Customer Cus, Company Com, Guid TicketId, int? agreementtempid, bool isSignMessageSend, bool? firstpage, int? ticketid, bool? recreate, bool? isinvoice, string invoiceid, bool? isestimator, int? estid, Guid? userid, bool? commercial)
        {

            WebClient webClient;
            byte[] fileBytes1;

            DateTime FixDate = DateTime.Now.UTCCurrentTime();
            int? Id;
            Id = Cus.Id;
            Guid cusFileId = Guid.NewGuid();
            string cusSignSubmitIP = AppConfig.GetIP;
            //var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            //int idlead = Convert.ToInt32(Lid);
            InstallationAgreementModel Model = new InstallationAgreementModel();
            Model.EmergencyContactList = new List<EmergencyContact>();
            Model.ListAgreementAnswer = new List<AgreementAnswer>();
            Model.EquipmentList = new List<Equipment>();
            Model.CustomerAgreement = new List<CustomerAgreement>();
            Model.SingleCustomerAgreement = new CustomerAgreement();
            var taxtotal = 0.0;
            string ContractTerm = "";
            string ContractTermInWord = "";
            if (Com.CompanyId != null)
            {
                Com = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(Com.CompanyId);
            }
            CustomerExtended CusExd = new CustomerExtended();
            if (Cus != null)
            {
                CusExd = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(Cus.CustomerId);
            }
            if (!string.IsNullOrWhiteSpace(Cus.ContractTeam) && Cus.ContractTeam != "-1")
            {
                if (Cus.ContractTeam.ToLower() == "month to month")
                {
                    ContractTerm = Cus.ContractTeam;
                    ContractTermInWord = Cus.ContractTeam;
                }
                else
                {
                    ContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))).ToString();
                    ContractTermInWord = NumberToWords((Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))));
                }

            }
            var UpfrontAddOnTotal = 0.0;
            var UpfrontAddOnTotalPromo = 0.0;
            bool IsUpfrontPromo = false;
            bool IsServicePromo = false;
            var MonthlyServiceFeeTotal = 0.0;
            var TotalMonthlyMonitoring = 0.0;
            var NewSubTotal = 0.0;
            var TotalDueAtSigning = 0.0;
            var EquipmentTotalPrice = 0.0;
            var ServiceTotalPrice = 0.0;
            var AgreementSubtotal = 0.0;
            var AgreementTotal = 0.0;
            var AgreementTax = 0.0;
            double ServiceTax = 0.0;
            var NotARBEnabledTotalPrice = 0.0;
            string InstallTypeName = "";
            bool IsNonConfirming = false;
            var NonConfirmingFee = 0.0;
            var AdvanceServiceFeeTotal = 0.0;
            string contractCreatedDateVal = "";
            if (CusExd.ContractCreatedDate != null)
            {
                contractCreatedDateVal = CusExd.ContractCreatedDate.Value.ToString("M/d/yy");
            }
            else
            {
                CusExd.ContractCreatedDate = DateTime.UtcNow;
                _Util.Facade.CustomerFacade.UpdateCustomerExtended(CusExd);
                contractCreatedDateVal = CusExd.ContractCreatedDate.Value.ToString("M/d/yy");
            }

            if (Cus.CreditScoreValue == null)
            {
                Cus.CreditScoreValue = 0;
            }
            var PackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(Cus.CustomerId);
            if (PackageCustomer != null)
            {
                //if (PackageCustomer.NonConforming && PackageCustomer.NonConformingFee > 0 && (Cus.CreditScoreValue < PackageCustomer.MinCredit || Cus.CreditScoreValue > PackageCustomer.MaxCredit))
                if (PackageCustomer.NonConformingFee > 0 && (Cus.CreditScoreValue <= PackageCustomer.MinCredit || Cus.CreditScoreValue >= PackageCustomer.MaxCredit))
                {
                    IsNonConfirming = true;
                    NonConfirmingFee = PackageCustomer.NonConformingFee.Value;
                }
            }

            var SmartPackageEquipmentServiceList = new List<SmartPackageEquipmentService>();
            var GetCityTaxList = _Util.Facade.CompanyBranchFacade.GetCityTaxRate(Cus.CustomerId, Com.CompanyId);
            if (GetCityTaxList.Count > 0)
            {
                foreach (var item1 in GetCityTaxList)
                {
                    AgreementTax = item1.Rate;
                    ServiceTax = item1.Rate;
                }
            }
            else
            {
                Guid CustomerId = new Guid();
                if (Cus != null)
                {
                    CustomerId = Cus.CustomerId;
                }

                var GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(Com.CompanyId, CustomerId);
                if (GetSalesTax != null)
                {
                    AgreementTax = Convert.ToDouble(GetSalesTax.Value);
                    ServiceTax = Convert.ToDouble(GetSalesTax.Value);
                }

            }
            #region Invoice
            Invoice invoice = new Invoice();
            CustomerProratedBill cpb = new CustomerProratedBill();
            cpb = _Util.Facade.InvoiceFacade.GetCusProratedBillByCustomerId(Cus.CustomerId);
            List<InvoiceDetail> invoiceList = new List<InvoiceDetail>();
            string invDiagram = "";
            if (!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true)
            {
                invoice = _Util.Facade.InvoiceFacade.GetByInvoiceId(invoiceid);
                if (invoice != null)
                {
                    invDiagram = invoice.InvoiceContractDiagram;
                    invoiceList = _Util.Facade.InvoiceFacade.GetInvoiceDetialsListByInvoiceId(invoice.InvoiceId);
                }

            }
            #endregion
            #region Estimator
            Employee userInfo = new Employee();
            if (userid != Guid.Empty)
            {
                userInfo = _Util.Facade.EmployeeFacade.GetEmployeeByEmployeeId(userid.Value);
            }
            CreateEstimator createest = new CreateEstimator();
            if (isestimator.Value && estid > 0)
            {
                CreateEstimator ca = new CreateEstimator();
                ca.EstimatorSetting = new EstimatorSetting();
                ca.Company = Com;

                ca.Estimator = _Util.Facade.EstimatorFacade.GetById(estid.Value);
                ca._EstimatorPDFFilter = _Util.Facade.EstimatorFacade.GetEstimatorPdfFilterByComIdCusIdUserId(Com.CompanyId, userid.Value, ca.Estimator.CustomerId);
                ca.estimatorDetails = _Util.Facade.EstimatorFacade.GetEstimatorDetailListByEstimatorId(ca.Estimator.EstimatorId);
                ca.estimatorServices = _Util.Facade.EstimatorFacade.GetEstimatorServicesByEstimatorId(ca.Estimator.EstimatorId);
                if (ca.Estimator == null || ca.Estimator.CompanyId != Com.CompanyId)
                {
                    return false;
                }
                if ((ca.estimatorDetails == null || ca.estimatorDetails.Count() == 0) && (ca.estimatorServices == null || ca.estimatorServices.Count() == 0))
                {
                    return false;
                }
                Customer tempCUstomer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(ca.Estimator.CustomerId);
                if (tempCUstomer == null)
                {
                    return false;
                }

                CreateEstimator processedModel = GetEstimatorModelById(ca.Estimator, ca.estimatorDetails, ca.estimatorServices, Com, tempCUstomer, ca._EstimatorPDFFilter, Com.CompanyId);
                Estimator estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(ca.Estimator.EstimatorId);
                if (estimator != null)
                {
                    ViewBag.CoverLetter = estimator.CoverLetter;
                    processedModel.Estimator.CoverLetter = estimator.CoverLetter;
                    processedModel.Estimator.CoverLetterFile = estimator.CoverLetterFile;
                    processedModel.Estimator.ServicePlanType = estimator.ServicePlanType;
                    processedModel.Estimator.ServicePlanRate = estimator.ServicePlanRate;
                    processedModel.Estimator.ServicePlanAmount = estimator.ServicePlanAmount;
                    processedModel.Estimator.ServiceTaxAmount = estimator.ServiceTaxAmount;
                    processedModel.Estimator.ServiceTotalAmount = estimator.ServiceTotalAmount;
                    processedModel.Estimator.ShowServicePlan = estimator.ShowServicePlan;
                    processedModel.Estimator.ShowService = estimator.ShowService;
                    processedModel.Estimator.ServicePlanTypeName = "Service Plan";

                    SelectListItem selectListItem = _Util.Facade.LookupFacade.GetDropdownsByKey("ServicePlans").Where(x => x.Value == estimator.ServicePlanType).FirstOrDefault();
                    if (selectListItem != null)
                    {
                        processedModel.Estimator.ServicePlanTypeName = selectListItem.Text;
                    }

                }
                if (ca.estimatorDetails != null)
                {
                    foreach (var item in ca.estimatorDetails)
                    {
                        Manufacturer Manufacturer = _Util.Facade.EquipmentFacade.GetManufacturerByManufacturerId(item.ManufacturerId);
                        if (Manufacturer != null)
                        {
                            item.Manufacturer = Manufacturer.Name;
                        }
                        item.CreatedDate = DateTime.Now.UTCCurrentTime();
                        ca.SubTotal = ca.SubTotal + (item.TotalPrice.HasValue ? item.TotalPrice.Value : 0);
                        item.EquipmentFile = _Util.Facade.EquipmentFileFacade.GetEquipmentFilesByEquipmentIdAndFileType(item.EquipmentId, LabelHelper.EquipmentFileType.ProfilePicture).FirstOrDefault();
                        if (item.EquipmentFile == null)
                        {
                            item.EquipmentFile = new EquipmentFile();
                        }
                    }
                }
                if (ca.estimatorServices != null)
                {
                    foreach (var item in ca.estimatorServices)
                    {
                        processedModel.ServiceSubTotal += ca.ServiceSubTotal + item.Amount;
                    }
                    processedModel.TotalServiceAmount = processedModel.ServiceSubTotal + ca.ServiceTax;
                }
                createest = processedModel;
                createest.eSecurityLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/eSecurity_logo.png");
                createest.specializedLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/specialized_property_management_logo.png");
                string EstimatorContractTerm = "";
                if (!string.IsNullOrWhiteSpace(createest.Estimator.ContractTerm) && createest.Estimator.ContractTerm != "-1")
                {
                    if (createest.Estimator.ContractTerm.ToLower() == "month to month")
                    {
                        EstimatorContractTerm = createest.Estimator.ContractTerm;
                    }
                    else
                    {
                        EstimatorContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(createest.Estimator.ContractTerm) * 12))).ToString() + " month";
                    }

                }
                createest.EstimatorContractTerm = EstimatorContractTerm;
            }
            #endregion
            var CustomEquipmentList = new List<Equipment>();
            if (firstpage == true || recreate == true)
            {
                CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                if (CustomEquipmentList.Count > 0)
                {
                    foreach (var item in CustomEquipmentList)
                    {
                        EquipmentTotalPrice += item.Total;
                        UpfrontAddOnTotal += item.Total;
                    }
                }
            }
            else if (!string.IsNullOrWhiteSpace(Cus.EstimatorId))
            {
                CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentEstimatorListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, firstpage.Value, ticketid.Value, Cus.EstimatorId);
                if (CustomEquipmentList.Count > 0)
                {
                    foreach (var item in CustomEquipmentList)
                    {
                        EquipmentTotalPrice += item.Total;
                        UpfrontAddOnTotal += item.Total;
                    }
                }
            }
            else
            {
                CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                if (CustomEquipmentList.Count > 0)
                {
                    foreach (var item in CustomEquipmentList)
                    {
                        EquipmentTotalPrice += item.Total;
                        UpfrontAddOnTotal += item.Total;
                    }
                }
            }
            var CustomServiceList = new List<Equipment>();
            if (firstpage == true || recreate == true)
            {
                CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                if (CustomServiceList.Count > 0)
                {
                    foreach (var item in CustomServiceList)
                    {
                        EquipmentTotalPrice += item.Total;
                        ServiceTotalPrice += item.Total;
                        MonthlyServiceFeeTotal += item.Total;
                    }
                }
            }
            else if (!string.IsNullOrWhiteSpace(Cus.EstimatorId))
            {
                CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartEstimatorServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, firstpage.HasValue ? firstpage.Value : false, ticketid.HasValue ? ticketid.Value : 0, Cus.EstimatorId);
                if (CustomServiceList != null)
                {
                    var IsRecurringList = CustomServiceList.Where(x => x.IsARBEnabled == true).ToList();
                    if (IsRecurringList != null && IsRecurringList.Count > 0)
                    {
                        foreach (var item in IsRecurringList)
                        {
                            EquipmentTotalPrice += item.Total;
                            ServiceTotalPrice += item.Total;
                            MonthlyServiceFeeTotal += item.Total;
                        }
                    }
                }
            }
            else
            {
                CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                if (CustomServiceList.Count > 0)
                {
                    foreach (var item in CustomServiceList)
                    {
                        EquipmentTotalPrice += item.Total;
                        ServiceTotalPrice += item.Total;
                        MonthlyServiceFeeTotal += item.Total;
                    }
                }
            }
            var NotARBEnabledServiceList = new List<Equipment>();
            if (firstpage == true || recreate == true || commercial == true)
            {
                NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                if (NotARBEnabledServiceList.Count > 0)
                {
                    foreach (var item in NotARBEnabledServiceList)
                    {
                        NotARBEnabledTotalPrice += item.Total;
                    }
                }
            }
            else if (!string.IsNullOrWhiteSpace(Cus.EstimatorId))
            {
                NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetSmartEstimatorServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0), Cus.EstimatorId);
                var onetimeserviceList = NotARBEnabledServiceList.Where(x => x.IsARBEnabled == false).ToList();
                if (onetimeserviceList != null)
                {
                    if (onetimeserviceList.Count > 0)
                    {
                        foreach (var item in onetimeserviceList)
                        {
                            NotARBEnabledTotalPrice += item.Total;
                        }
                    }
                } 
            }
            else
            {
                NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListFromService(Cus.CustomerId, Com.CompanyId);
                if (NotARBEnabledServiceList.Count > 0)
                {
                    foreach (var item in NotARBEnabledServiceList)
                    {
                        NotARBEnabledTotalPrice += item.Total;
                    }
                }
            }
            #region Advance Monitoring Service Month

            PaymentInfoCustomer paycus = new PaymentInfoCustomer();
            paycus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayForService(Cus.CustomerId);
            int ForMonth = 1;
            if (paycus != null && paycus.ForMonths.HasValue)
            {
                ForMonth = paycus.ForMonths.Value;
            }
            if (ForMonth > 1)
            {
                AdvanceServiceFeeTotal = MonthlyServiceFeeTotal * (ForMonth - 1);

            }
            #endregion
            Cus.MonthlyMonitoringFee = Convert.ToString(ServiceTotalPrice);
            TotalMonthlyMonitoring = MonthlyServiceFeeTotal;
            NewSubTotal = TotalMonthlyMonitoring + UpfrontAddOnTotal;

            if (CustomServiceList.Count > 0 || CustomEquipmentList.Count > 0)
            {
                if (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue)
                {
                    AgreementSubtotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                    NewSubTotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                }
                else
                {
                    AgreementSubtotal = EquipmentTotalPrice;
                    NewSubTotal = EquipmentTotalPrice;
                }
            }
            if (IsNonConfirming && NonConfirmingFee > 0)
            {
                AgreementSubtotal = AgreementSubtotal + NonConfirmingFee;
                NewSubTotal = NewSubTotal + NonConfirmingFee;
            }
            if (AgreementTax != 0.0)
            {
                taxtotal = (AgreementSubtotal / 100) * AgreementTax;
                Model.TaxTotal = taxtotal;
                AgreementTotal = AgreementSubtotal + taxtotal;
                TotalDueAtSigning = NewSubTotal + taxtotal;
            }
            else
            {
                Model.TaxTotal = 0.0;
                AgreementTotal = AgreementSubtotal;
                TotalDueAtSigning = NewSubTotal;
            }

            if (ServiceTax != 0.0)
            {
                taxtotal = (ServiceTotalPrice / 100) * ServiceTax;
                //  MonthlyServiceFeeTotal = ServiceTotalPrice + taxtotal;
            }
            else
            {
            }


            var objCusAgree = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByComIdAndCusIsAndSubmitAgreement(Com.CompanyId, Cus.CustomerId);
            if (objCusAgree == null)
            {
                CustomerAgreement objCustomerAgreement = new CustomerAgreement()
                {
                    CompanyId = Com.CompanyId,
                    CustomerId = Cus.CustomerId,
                    IP = AppConfig.GetIP,
                    UserAgent = AppConfig.GetUserAgent,
                    Type = LabelHelper.CustomerAgreementLog.SubmitAgreement,
                    AddedDate = DateTime.UtcNow
                };
                _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(objCustomerAgreement);
            }
            var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(Cus.CustomerId, Com.CompanyId);
            if (PackageCustomerDetails != null)
            {
                InstallTypeName = _Util.Facade.PackageFacade.SmartInstallTypeNameByInstallTypeId(Convert.ToInt32(PackageCustomerDetails.SmartInstallTypeId));
                if (string.IsNullOrWhiteSpace(InstallTypeName))
                {
                    InstallTypeName = "New Install";
                }
                SmartPackageEquipmentServiceList = _Util.Facade.PackageFacade.GetAllSmartPackageIncludeEquipmentByPackageIdAndCompanyId(PackageCustomerDetails.PackageId, Com.CompanyId);
            }
            var PaymentDetails = _Util.Facade.PaymentInfoFacade.GetAllPaymentInfoByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId).Where(m => m.PayFor == "First Month").FirstOrDefault();
            var agreementPayment = _Util.Facade.PaymentInfoFacade.GetLeadAgreementPaymentInfoByCustomerId(Cus.CustomerId);
            string paymentoverviewheader = "";
            string paymentoverviewdata = "";
            if (agreementPayment != null && agreementPayment.Count > 0)
            {
                paymentoverviewheader = "<table style='border-collapse:collapse; width:100%; font-family:Arial; table-layout:fixed; font-size:13px;'>{0}</table>";
                foreach (var pay in agreementPayment)
                {
                    var sppay = pay.Type.Split('_');
                    if (sppay.Length > 0)
                    {
                        if (sppay[0] == "CC")
                        {
                            var cardNumber = pay.CardNumber.Replace('-', ' ').Replace(" ", "");
                            if (cardNumber.Length == 16)
                            {
                                paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(12, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                            }
                            else
                            {
                                paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(11, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                            }
                        }
                        else if (sppay[0] == "ACH")
                        {
                            paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Type: " + pay.BankAccountType + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Routing No: " + pay.RoutingNo + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account No: " + string.Concat("".PadLeft(pay.AcountNo.Length - 4, '*'), pay.AcountNo.Substring(pay.AcountNo.Length - 4)) + @"</td>
                                                        </tr>";
                        }
                    }
                }
            }
            var CustomerAddress = AddressHelper.MakeAddress(Cus);
            var CustomerInstallAddress = AddressHelper.MakeInstallAddress(Cus);
            CustomerSignature cs = new CustomerSignature();
            GlobalSetting glbs = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(Com.CompanyId, "CompanySignature");
            string cusSignature = "";
            string cussignDate = "";
            DateTime cussignDateVal = new DateTime();
            if (firstpage.HasValue && firstpage.Value == true)
            {
                cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "First Page");
            }
            else if (commercial.HasValue && commercial.Value == true)
            {
                cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Commercial");
            }
            else if (isinvoice.HasValue && isinvoice.Value == true)
            {
                cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimate");
            }
            else if (isestimator.HasValue && isestimator.Value == true)
            {
                cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimator");
            }
            else if (recreate.HasValue && recreate.Value == true)
            {
                cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Recreate");
            }
            else if (Cus != null && agreementtempid.HasValue && agreementtempid.Value > 0)
            {
                cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Agreement File");
            }
            else
            {
                cusSignature = Cus.Singature;
                if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                {
                    cussignDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                    cussignDateVal = Cus.CustomerSignatureDate.Value.UTCToClientTime();
                }

            }
            if (cs != null && (agreementtempid != 0 || (firstpage.HasValue && firstpage.Value == true) || (recreate.HasValue && recreate.Value == true) || (commercial.HasValue && commercial.Value == true)))
            {
                cusSignature = cs.Signature;
                if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                {
                    cussignDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                    cussignDateVal = cs.CreatedDate.UTCToClientTime();
                }

            }
            Double MMR = 1;
            Double CTerm = 0;

            double.TryParse(Cus.MonthlyMonitoringFee, out MMR);
            double.TryParse(ContractTerm, out CTerm);
            //(!string.IsNullOrWhiteSpace() ? Convert.ToDouble(Cus.MonthlyMonitoringFee) : 1) * Convert.ToDouble(ContractTerm);
            Double TotalPayments = MMR * CTerm;
            #region For Promo Pyment Method
            List<PaymentInfoCustomer> paycusList = new List<PaymentInfoCustomer>();
            PaymentProfileCustomer paymentProfile = new PaymentProfileCustomer();
            paycusList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(Cus.CustomerId);
            if (paycusList != null && paycusList.Count > 0)
            {
                foreach (var item in paycusList)
                {
                    paymentProfile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(item.PaymentInfoId);
                    if (paymentProfile != null && paymentProfile.Type == LabelHelper.PaymentMethod.Promo)
                    {
                        if (item.Payfor == "Activation Fee")
                        {
                            NonConfirmingFee = 0.0;

                            if (PackageCustomer != null)
                            {
                                PackageCustomer.ActivationFee = 0.0;
                            }
                            NewSubTotal = NewSubTotal - (PackageCustomer.AdditionFee + NonConfirmingFee);
                        }
                        else if (item.Payfor == "Equipment")
                        {
                            IsUpfrontPromo = true;
                            NewSubTotal = NewSubTotal - UpfrontAddOnTotal;
                        }
                        else if (item.Payfor == "Service")
                        {
                            NewSubTotal = NewSubTotal - TotalMonthlyMonitoring;
                            IsServicePromo = true;

                        }


                    }

                }

            }
            #endregion
            #region LeadSource
            string LeadSource = "";
            Lookup leadsource = _Util.Facade.LookupFacade.GetLookupByKeyAndValueAndCompanyId("LeadSource", Cus.LeadSource, Com.CompanyId);
            LeadSource = leadsource != null && !string.IsNullOrWhiteSpace(leadsource.DisplayText) && leadsource.DataValue != "-1" ? leadsource.DisplayText : "";
            #endregion
            if (!string.IsNullOrWhiteSpace(Cus.EstimatorId))
            {
                Estimator estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(Cus.EstimatorId);
                if (estimator != null)
                {
                    cusSignature = estimator.EstimatorSignature;
                    PackageCustomer.ActivationFee = estimator.ActivationFee;
                }  
            } 
            Model = new InstallationAgreementModel()
            {
                EstimatorId = Cus.EstimatorId,
                CSIDNumber = Cus.Id,
                LeadSource = LeadSource,
                FileId = cusFileId.ToString(),
                CusSignIP = !string.IsNullOrWhiteSpace(cussignDate) ? cusSignSubmitIP : "",
                IsNonConfirming = IsNonConfirming,
                NonConfirmingFee = NonConfirmingFee,
                InstallDate = Cus.InstallDate != null ? Convert.ToDateTime(Cus.InstallDate).ToShortDateString() : "",
                OriginalContactDate = (Cus.OriginalContactDate != null && Cus.OriginalContactDate.HasValue) ? Cus.OriginalContactDate.Value : new DateTime(),
                AccountType = Cus.Type,
                ContractType = CusExd != null && !string.IsNullOrWhiteSpace(CusExd.ContractType) ? CusExd.ContractType : "",
                Referredby = Cus.ReferringCustomer != Guid.Empty ? _Util.Facade.CustomerFacade.GetCustomerNameById(Cus.ReferringCustomer) : "",
                SocialSecurityNumber = Cus.SSN,
                //Owner2ndPhone = Cus.SecondaryPhone,
                Owner2ndPhone = Cus.PrimaryPhone,
                InitialStreet = Cus.Street,
                InitialCity = Cus.City,
                InitialCountry = Cus.County,
                InitialState = Cus.State,
                InitialZip = Cus.ZipCode,
                InitialApt = Cus.Appartment,
                BillingCity = Cus.CityPrevious,
                BillingState = Cus.StatePrevious,
                BillingZip = Cus.ZipCodePrevious,
                BillingCountry = Cus.CountryPrevious,
                BillingStreet = Cus.StreetPrevious,
                InstallTypeName = InstallTypeName,
                SmartPackageEquipmentServiceList = SmartPackageEquipmentServiceList,
                UpfrontAddOnTotal = UpfrontAddOnTotal,
                UpfrontAddOnTotalPromo = UpfrontAddOnTotalPromo,
                IsUpfrontPromo = IsUpfrontPromo,
                IsServicePromo = IsServicePromo,
                MonthlyServiceFeeTotal = MonthlyServiceFeeTotal,
                TotalMonthlyMonitoring = TotalMonthlyMonitoring,
                NewSubTotal = NewSubTotal,
                TotalDueAtSigning = TotalDueAtSigning,
                PaymentDetails = PaymentDetails != null ? PaymentDetails : new PaymentInfo(),
                DisplayName = Cus.DisplayName,
                BillingAddress = CustomerAddress,
                OwnerAddress = CustomerAddress,
                InstallAddress = CustomerInstallAddress,
                OwnerEmail = Cus.EmailAddress,
                //OwnerPhone = Cus.PrimaryPhone,
                OwnerPhone = Cus.CellNo,
                OwnerName = Cus.FirstName + " " + Cus.LastName,
                FirstName = Cus.FirstName,
                LastName = Cus.LastName,
                EmergencyContactList = _Util.Facade.EmergencyContactFacade.GetAllEmergencyContactByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId),
                CompanyName = Com.CompanyName,
                CompanySate = string.Format("{0}, {1} {2}", Com.City, Com.State, Com.ZipCode),
                CompanyStreet = Com.Street,
                CompanyWebsite = Com.Website,
                SubscribedMonths = ContractTerm,
                SubscribedMonthsInWord = ContractTermInWord,
                RenewalMonths = Cus.RenewalTerm.HasValue ? Cus.RenewalTerm.Value : 0,
                Password = Cus.Passcode,
                DateOfTransaction = FixDate.UTCToClientTime(),
                CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyEmailLogoByCompanyId(Com.CompanyId),
                EquipmentList = CustomEquipmentList.ToList(),
                ServiceList = CustomServiceList.ToList(),
                ActivationFee = (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue) ? PackageCustomer.ActivationFee.Value : 0,
                BusinessName = Cus.BusinessName,
                MonthlyMonitoringFee = Cus.MonthlyMonitoringFee,
                EffectiveDate = FixDate.UTCToClientTime(),
                CustomerSignature = cusSignature,
                CustomerSignatureStringDate = cussignDate,
                CustomerSignatureStringDateVal = cussignDateVal,
                //ContractCreatedDateVal = contractCreatedDateVal,
                ContractCreatedDateVal = (CusExd.ContractStartDate != null && CusExd.ContractStartDate.HasValue) ? CusExd.ContractStartDate.Value.ToShortDateString() : DateTime.Now.ToShortDateString(),
                CustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByCompanyIdAndCustomerId1(Com.CompanyId, Cus.CustomerId),
                Subtotal = AgreementSubtotal,
                Tax = AgreementTax,
                TaxTotal = taxtotal,
                Total = AgreementTotal,
                EContractId = Cus.Id,
                ListAgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(Cus.CustomerId),
                SalesRepresentative = !string.IsNullOrEmpty(Cus.Soldby) ? _Util.Facade.EmployeeFacade.GetEmployeeNumByEmployeeId(new Guid(Cus.Soldby)).ToString() : "",
                TotalPayments = TotalPayments,
                SingleCustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetIpAndUserAgentByCustomerIdAndCompanyId(Com.CompanyId, Cus.CustomerId),
                ListContactEmergency = string.Format(paymentoverviewheader, paymentoverviewdata),
                ListPaymentInfo = string.Format(paymentoverviewheader, paymentoverviewdata),
                DoingBusinessAs = Cus.DBA,
                DispalyName = Cus.DisplayName,
                CompanyPhone = Com.Phone,
                FirstPage = firstpage.HasValue ? firstpage.Value : false,
                Commercial = commercial.HasValue ? commercial.Value : false,
                IsInvoice = isinvoice.HasValue ? isinvoice.Value : false,
                InvoiceId = invoiceid,
                InvoiceDiagram = invDiagram,
                InvoiceList = invoiceList,
                IsEstimator = isestimator.HasValue ? isestimator.Value : false,
                createEst = createest,
                userInfo = userInfo,
                inv = invoice,
                NotARBEnabledServiceList = NotARBEnabledServiceList.ToList(),
                NotARBEnabledTotalPrice = NotARBEnabledTotalPrice,
                ProratedAmout = cpb != null ? Math.Round(cpb.Amount, 2, MidpointRounding.AwayFromZero) : 0.0,
                FinancedAmout = Cus != null && Cus.FinancedAmount != null ? Math.Round(Cus.FinancedAmount.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                MonthlyFinanceRate = CusExd != null && CusExd.MonthlyFinanceRate != null ? Math.Round(CusExd.MonthlyFinanceRate.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                AdvanceServiceFeeTotal = AdvanceServiceFeeTotal
            };
            if (agreementtempid != 0)
            {
                if (cs != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(cs.Signature))
                {
                    Model.CompanySignature = glbs.Value;
                    if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                    {
                        Model.CompanySignatureDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                    }
                }
            }
            else if (firstpage == true || recreate == true || commercial == true)
            {
                if (glbs != null && !string.IsNullOrWhiteSpace(glbs.Value))
                {
                    Model.CompanySignature = glbs.Value;
                    Model.CompanySignatureDate = cussignDate;
                }
            }
            else
            {
                if (Cus != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(Cus.Singature))
                {
                    Model.CompanySignature = glbs.Value;
                    if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                    {
                        Model.CompanySignatureDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                    }
                }
            }

            //if (Model.EquipmentList != null && Model.EquipmentList.Count() > 0)
            //{
            //    Model.Subtotal = Model.EquipmentList.Sum(x => x.TotalPrice) + Model.ActivationFee;
            //    var taxp = Convert.ToDouble(_Util.Facade.GlobalSettingsFacade.GetSalesTax(Com.CompanyId).Value);
            //    Model.Tax = (Model.Subtotal * taxp) / 100;
            //    Model.Total = Model.Subtotal + Model.Tax;

            //}
            //else
            //{
            //    Model.EquipmentList = new List<Equipment>();
            //}

            if (Model.EmergencyContactList == null)
            {
                Model.EmergencyContactList = new List<EmergencyContact>();
            }
            Model.KazarLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/kazar_logo.PNG");
            ViewBag.CompanyId = Com.CompanyId.ToString();
            Model.CompanyId = Com.CompanyId.ToString();
            Model.CurrentCurrency = _Util.Facade.GlobalSettingsFacade.GetCurrentCurrencyByCompanyId(Com.CompanyId);
            string body = _Util.Facade.AgreementFacade.MakeSmartAgreementPdf(Model, agreementtempid.HasValue ? agreementtempid.Value : 0);
            ViewBag.Body = body;
            //ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("SmartInstallationAgreement", Model)
            ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("SmartInstallationAgreement")
            {
                //FileName = "TestView.pdf",
                PageSize = Rotativa.Options.Size.A4,
                PageOrientation = Rotativa.Options.Orientation.Portrait,
                PageMargins = { Left = 1, Right = 1 },

            };
            var FileNo = 1;
            var ExistAgreementPdfCount = _Util.Facade.CustomerFileFacade.GetCustomerAgreementFileByCustomerId(Cus.CustomerId);
            if (ExistAgreementPdfCount != null)
            {
                FileNo = ExistAgreementPdfCount.Count + 1;
            }
            byte[] applicationPDFData = actionPDF.BuildPdf(ControllerContext);

            #region File save
            //Random rand = new Random();
            //string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];

            //var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(Com.CompanyId).CompanyName.ReplaceSpecialChar();
            //var pdftempFolderName = string.Format(filename, comname) + Id + "Agreement_Mail.pdf";
            //if (FileNo > 1)
            //{
            //    pdftempFolderName = string.Format(filename, comname) + Id + string.Format("Agreement_Mail_{0}.pdf", FileNo);
            //}
            //string Serverfilename = FileHelper.GetFileFullPath(pdftempFolderName);
            //FileHelper.SaveFile(applicationPDFData, Serverfilename);
            //var cusinfo = _Util.Facade.CustomerFacade.GetById(Id.Value);
            //string[] comNameSplit = comname.Split('/');
            #endregion



            #region File Save on AWS S3

            Random rand = new Random();
            string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
            filename = filename.TrimEnd('/');

            var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(Com.CompanyId).CompanyName.ReplaceSpecialChar();

            string FilePath = string.Format(filename, comname);
            string FileName = Id + "Agreement_Mail.pdf";

            if (FileNo > 1)
            {
                FileName = Id + string.Format("Agreement_Mail_{0}.pdf", FileNo);
            }

            string FileKey = string.Format($"{FilePath}/{FileName}");
            var cusinfo = _Util.Facade.CustomerFacade.GetById(Id.Value);

            var returnurl = "";

            var task = Task.Run(async () => {
                AWSS3ObjectService AWSobject = new AWSS3ObjectService();

                await AWSobject.UploadFile(FileKey, applicationPDFData);
                await AWSobject.MakePublic(FileName, FilePath);
            });

            task.Wait();

            /// "mayur" used thread for async s3 methods : start

            //Thread thread = new Thread(async () =>
            //{

            //    AWSS3ObjectService AWSobject = new AWSS3ObjectService();

            //    await AWSobject.UploadFile(FileKey, applicationPDFData);
            //    await AWSobject.MakePublic(FileName, FilePath);

            //      });

            //thread.Start();

            ////// temp solution for thread to complete
            //Thread.Sleep(3000);
            ////


            //while (thread.IsAlive == true)
            //{
            //    continue; 
            //}

            /// "mayur" used thread for async s3 methods : End



            returnurl = String.Format(AppConfig.AWSS3Url, AppConfig.AWSS3BucketName);
            returnurl = returnurl + FileKey;


            ViewBag.ReturnUrl = returnurl;
            ViewBag.FileName = FileName;
            ViewBag.FileKey = FileKey;

            #endregion

            //// "mayur" AWS S3 Changes //// End


            //// ""Mayur" Calculate File Size : start
            #region Calculate file size

            var _fileSize = applicationPDFData.Length / 1024;

            #endregion
            //// ""Mayur" Calculate File Size : End
            

          
            /// Mayur :: File Download to temp folder :start
            
            webClient = new WebClient();
            fileBytes1 = webClient.DownloadData(returnurl);

            File(fileBytes1, System.Net.Mime.MediaTypeNames.Application.Octet,FileName).ToString();



            string Temp_FileName = Server.MapPath("~/EmailFileCache/tmp_" + FileName);

            if (!System.IO.File.Exists(Temp_FileName))
            {
                System.IO.File.WriteAllBytes(Temp_FileName, fileBytes1);
            }
            else
            {
                System.IO.File.WriteAllBytes(Temp_FileName, fileBytes1);
            }

            /// Mayur :: File Download to temp folder :End

            #region Send Customer sign successfully
            if (isSignMessageSend)
            {
                SetupLeadCustormer slc = new SetupLeadCustormer
                {
                    CustomerName = Cus.DisplayName,
                    EmailBody = Cus.DisplayName,
                    ToEmail = cusinfo.AgreementEmail,
                    CompanyName = Com.CompanyName,
                    CustomerId = cusinfo.CustomerId.ToString(),
                    EmployeeId = Com.CompanyId.ToString(),
                    PdfAggrement = new Attachment(Temp_FileName, MediaTypeNames.Application.Octet)
                };
                string from = "";
                if (firstpage.HasValue && firstpage.Value == true && ticketid.HasValue && ticketid.Value > 0)
                {
                    from = "First Page Agreement Signed";
                }
                if (commercial.HasValue && commercial.Value == true && ticketid.HasValue && ticketid.Value > 0)
                {
                    from = "Commercial Agreement Signed";
                }
                if (recreate.HasValue && recreate.Value == true)
                {
                    from = "Recreate Agreement Signed";
                }
                if (CusExd.IsSignAgrSendToCus == true)
                {
                    _Util.Facade.MailFacade.EmailToLeadSignAgreement(slc, Com.CompanyId, from);
                }
            }
            #endregion

            var FileNameDes = "Smart_Lead_Agreement.pdf";
            if (cusinfo.IsContractSigned == true)
            {
                FileNameDes = "Smart_Lead_Agreement_Signed.pdf";
            }
            if (FileNo > 1)
            {
                if (firstpage.HasValue && firstpage.Value == true && ticketid.HasValue && ticketid.Value > 0)
                {
                    FileNameDes = string.Format("FirstPage_Agreement_Signed.pdf", FileNo);
                }
                else if (recreate.HasValue && recreate.Value == true)
                {
                    FileNameDes = string.Format("Recreate_Agreement_Signed.pdf", FileNo);
                }
                else if (CusExd.ContractType == "Commercial")
                {
                    FileNameDes = string.Format("Commercial_Agreement_Signed.pdf", FileNo);
                }
                else if (CusExd.ContractType == "CommercialFire")
                {
                    FileNameDes = string.Format("Commercial_Fire_Agreement_Signed.pdf", FileNo);
                }

                else
                {
                    if (FileNo > 2)
                    {
                        FileNameDes = string.Format("Smart_Lead_Agreement_Signed.pdf", FileNo);
                    }
                    else
                    {
                        FileNameDes = string.Format("Smart_Lead_Agreement_Signed.pdf", FileNo);
                    }
                }
            }
            CustomerFile cfs = new CustomerFile()
            {
                FileId = cusFileId,
                FileDescription = Cus.Id + "_" + FileNameDes,
                FileSize = _fileSize,
                Filename = "/" + ViewBag.FileKey,
                FileFullName = Id + FileNameDes,
                Uploadeddate = DateTime.Now.UTCCurrentTime(),
                CustomerId = cusinfo.CustomerId,
                CompanyId = Com.CompanyId,
                IsActive = true,
                CreatedBy = cusinfo.Soldby1,
                CreatedDate = DateTime.Now.UTCCurrentTime(),
                UpdatedBy = cusinfo.Soldby1,
                UpdatedDate = DateTime.Now.UTCCurrentTime(),
                WMStatus = LabelHelper.WatermarkStatus.Pending,
                AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
            };
            int CustomerFileId = (int)_Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
            string Cusname = "";
            if (!String.IsNullOrWhiteSpace(cusinfo.DBA))
            {
                Cusname = cusinfo.DBA;
            }
            else if (!String.IsNullOrWhiteSpace(cusinfo.BusinessName))
            {
                Cusname = cusinfo.BusinessName;
            }
            else
            {
                Cusname = cusinfo.FirstName + ' ' + cusinfo.LastName;
            }
            if(!string.IsNullOrWhiteSpace(Cus.EstimatorId))
            {  
                UserActivity ua = new UserActivity()
                {
                    ActivityId = Guid.NewGuid(),
                    PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                    ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                    // new paramiter
                    Action = "File Signed",
                    StatsDate = DateTime.UtcNow,
                    UserId = cusinfo.CustomerId != null ? cusinfo.CustomerId : Guid.NewGuid(),
                    UserName = Cusname,
                    ActionDisplyText = "Estimate Agreement Is Signed With New Ticket and Invoices",


                    UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                    UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                };
                Guid ActivityID = ua.ActivityId;
                _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                UserActivityCustomer uac = new UserActivityCustomer()
                {
                    ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                    CustomerId = cusinfo.CustomerId != null ? cusinfo.CustomerId : Guid.NewGuid(),
                    RefId = cusinfo.Id.ToString(),

                };
                _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac); 
            }
            if (firstpage.HasValue && firstpage.Value == true)
            {

                //  base.AddUserActivityForCustomer("First Page Agreement Is Signed", LabelHelper.ActivityAction.AddFile, cusinfo.CustomerId, null, null);
                UserActivity ua = new UserActivity()
                {
                    ActivityId = Guid.NewGuid(),
                    PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                    ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                    // new paramiter
                    Action = "File Signed",
                    StatsDate = DateTime.UtcNow,
                    UserId = cusinfo.CustomerId != null ? cusinfo.CustomerId : Guid.NewGuid(),
                    UserName = Cusname,
                    ActionDisplyText = "First Page Agreement Is Signed",


                    UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                    UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                };
                Guid ActivityID = ua.ActivityId;
                _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                UserActivityCustomer uac = new UserActivityCustomer()
                {
                    ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                    CustomerId = cusinfo.CustomerId != null ? cusinfo.CustomerId : Guid.NewGuid(),
                    RefId = cusinfo.Id.ToString(),

                };
                _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);

            }

            if (commercial.HasValue && commercial.Value == true)
            {

                //  base.AddUserActivityForCustomer("First Page Agreement Is Signed", LabelHelper.ActivityAction.AddFile, cusinfo.CustomerId, null, null);
                UserActivity ua = new UserActivity()
                {
                    ActivityId = Guid.NewGuid(),
                    PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                    ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                    // new paramiter
                    Action = "File Signed",
                    StatsDate = DateTime.UtcNow,
                    UserId = cusinfo.CustomerId != null ? cusinfo.CustomerId : Guid.NewGuid(),
                    UserName = Cusname,
                    ActionDisplyText = "Commercial Agreement Is Signed",


                    UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                    UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                };
                Guid ActivityID = ua.ActivityId;
                _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                UserActivityCustomer uac = new UserActivityCustomer()
                {
                    ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                    CustomerId = cusinfo.CustomerId != null ? cusinfo.CustomerId : Guid.NewGuid(),
                    RefId = cusinfo.Id.ToString(),

                };
                _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);

            }

            if (recreate.HasValue && recreate.Value == true)
            {

                //  base.AddUserActivityForCustomer("Recreate Agreement Is Signed", LabelHelper.ActivityAction.AddFile, cusinfo.CustomerId, null, null);
                UserActivity ua = new UserActivity()
                {
                    ActivityId = Guid.NewGuid(),
                    PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                    ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                    // new paramiter
                    Action = "File Signed",
                    StatsDate = DateTime.UtcNow,
                    UserId = cusinfo.CustomerId != null ? cusinfo.CustomerId : Guid.NewGuid(),
                    UserName = Cusname,
                    ActionDisplyText = "Recreate Agreement Is Signed",


                    UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                    UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                };
                Guid ActivityID = ua.ActivityId;
                _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                UserActivityCustomer uac = new UserActivityCustomer()
                {
                    ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                    CustomerId = cusinfo.CustomerId != null ? cusinfo.CustomerId : Guid.NewGuid(),
                    RefId = cusinfo.Id.ToString(),

                };
                _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);

            }

            #region add AgreementPdf 
            if (CustomerFileId > 0 && TicketId != new Guid())
            {
                TicketReply Tr = new TicketReply()
                {
                    Message = "<a class='fileDownloadCustom cus - anchor' href='/Download/?"
                    + (HttpUtility.UrlEncode(HS.Framework.DESEncryptionDecryption.EncryptPlainTextToCipherText(CustomerFileId.ToString())))
                    + "' id='down-file' target='_blank' data-id='"
                    + CustomerFileId + "'><img class='size-img' src='" + AppConfig.SiteDomain + "/Content/Icons/pdf.png' />" + cfs.FileDescription + "</a>",
                    RepliedDate = DateTime.Now.UTCCurrentTime(),
                    TicketId = TicketId,
                    UserId = cusinfo.CustomerId,
                    IsPrivate = false
                };
                _Util.Facade.TicketFacade.InsertTicketReply(Tr);
            }
            #endregion

            return true;
        }
        private bool IAgreeAllScheduleCalendar(Customer LSchedule, Company _Company)
        {
            ScheduleCalendarList model = new ScheduleCalendarList();
            Schedule objScheduleCalendar = new Schedule();

            //int leadidvalue = Convert.ToInt32(LeadScheduleId);
            //var LSchedule = _Util.Facade.CustomerFacade.GetCustomersById(leadidvalue);
            if (LSchedule != null)
            {
                if (!string.IsNullOrWhiteSpace(LSchedule.Installer))
                {
                    Guid ScheduleTechid = new Guid(LSchedule.Installer);
                    var ScheduleCustomerappointment = _Util.Facade.CustomerAppoinmentFacade.GetAllAppointmentByCustomerId(LSchedule.CustomerId);
                    if (ScheduleCustomerappointment != null)
                    {
                        objScheduleCalendar.CompanyId = _Company.CompanyId;
                        objScheduleCalendar.Type = ScheduleCustomerappointment.AppointmentType;
                        objScheduleCalendar.Title = ScheduleCustomerappointment.Notes;
                        objScheduleCalendar.IsCompleted = false;
                        objScheduleCalendar.LeadId = LSchedule.Id;
                        objScheduleCalendar.IsFullDay = true;
                        objScheduleCalendar.Identifier = ScheduleTechid.ToString();
                        objScheduleCalendar.StartDate = Convert.ToDateTime("01/01/0001");
                        objScheduleCalendar.EndDate = Convert.ToDateTime("01/01/0001");
                        _Util.Facade.ScheduleFacade.InsertSchedule(objScheduleCalendar);
                    }
                }
                if (LSchedule.CustomerId != null)
                {
                    var LeadobjName = LSchedule.FirstName + " " + LSchedule.LastName;
                    Schedule objQa1Schedule = new Schedule()
                    {
                        CompanyId = _Company.CompanyId,
                        Type = ScheduleType.QA1,
                        StartDate = (DateTime.Now.UTCCurrentTime()).AddDays(1),
                        EndDate = (DateTime.Now.UTCCurrentTime()).AddDays(2),
                        Title = ScheduleTitle.QA1Required + " " + LeadobjName,
                        IsCompleted = false,
                        LeadId = LSchedule.Id,
                        IsFullDay = true,
                        Identifier = "00000000-0000-0000-0000-000000000000"
                    };
                    _Util.Facade.ScheduleFacade.InsertSchedule(objQa1Schedule);

                    Schedule objQa2Schedule = new Schedule()
                    {
                        CompanyId = _Company.CompanyId,
                        Type = ScheduleType.QA2,
                        StartDate = (DateTime.Now.UTCCurrentTime()).AddDays(1),
                        EndDate = (DateTime.Now.UTCCurrentTime()).AddDays(2),
                        Title = ScheduleTitle.QA2Required + " " + LeadobjName,
                        IsCompleted = false,
                        LeadId = LSchedule.Id,
                        IsFullDay = true,
                        Identifier = "00000000-0000-0000-0000-000000000000"
                    };
                    _Util.Facade.ScheduleFacade.InsertSchedule(objQa2Schedule);
                }
                if (!string.IsNullOrWhiteSpace(LSchedule.Installer))
                {
                    var ScheduleCustomerappointment = _Util.Facade.CustomerAppoinmentFacade.GetAllAppointmentByCustomerId(LSchedule.CustomerId);
                    if (ScheduleCustomerappointment != null)
                    {
                        objScheduleCalendar.CompanyId = _Company.CompanyId;
                        objScheduleCalendar.Type = ScheduleCustomerappointment.AppointmentType;
                        objScheduleCalendar.Title = ScheduleCustomerappointment.Notes;
                        objScheduleCalendar.IsCompleted = false;
                        objScheduleCalendar.LeadId = LSchedule.Id;
                        objScheduleCalendar.IsFullDay = true;
                        objScheduleCalendar.Identifier = "00000000-0000-0000-0000-000000000000";
                        objScheduleCalendar.StartDate = Convert.ToDateTime("01/01/0001");
                        objScheduleCalendar.EndDate = Convert.ToDateTime("01/01/0001");
                        _Util.Facade.ScheduleFacade.InsertSchedule(objScheduleCalendar);
                    }
                }
            }

            //if (currentLoggedIn.UserRole != "SysAdmin" && currentLoggedIn.UserRole != "Stuff")
            //{
            //    model.ListTechnicianSchedule = _Util.Facade.ScheduleFacade.GetPermissionScheduleListByCompanyId(_Company.CompanyId, currentLoggedIn.UserRole);
            //}
            //else
            //{
            //    model.ListTechnicianSchedule = _Util.Facade.ScheduleFacade.GetScheduleListByCompanyId(_Company.CompanyId);
            //}
            return true;
        }
        public ActionResult FillInstallType(int SystemTypeId)
        {
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (CurrentLoggedInUser == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            ManufacturerInstallType model = new ManufacturerInstallType();
            #region InstallType
            List<SmartInstallType> InstallTypeList = new List<SmartInstallType>();
            InstallTypeList.Add(new SmartInstallType()
            {
                Name = "Please Select One",
                Id = -1
            });
            if (SystemTypeId != -1)
            {
                InstallTypeList.AddRange(_Util.Facade.PackageFacade.GetInstallTypeByCompanyIdAndSystemId(CurrentLoggedInUser.CompanyId.Value, SystemTypeId).Select(x =>
                          new SmartInstallType()
                          {
                              Name = x.Name.ToString(),
                              Id = x.Id,
                              SystemId = x.SystemId
                          }).ToList());
            }
            model.SmartInstallTypeList = InstallTypeList;
            #endregion
            #region InstallType
            List<Manufacturer> SystemTypeManufacturerMapList = new List<Manufacturer>();
            SystemTypeManufacturerMapList.Add(new Manufacturer()
            {
                Name = "Please Select One",
                ManufacturerId = Guid.Empty
            });
            if (SystemTypeId != -1)
            {
                SystemTypeManufacturerMapList.AddRange(_Util.Facade.PackageFacade.GetManufacturerBySystemId(SystemTypeId).Select(x =>
                          new Manufacturer()
                          {
                              Name = x.Name.ToString(),
                              ManufacturerId = x.ManufacturerId,
                              SystemId = x.SystemId
                          }).ToList());
            }
            #endregion
            model.SmartInstallTypeList = InstallTypeList;
            model.ManufacturerList = SystemTypeManufacturerMapList;
            return Json(model, JsonRequestBehavior.AllowGet);
        }
        public ActionResult FillPackage(int SystemTypeId, int InstallTypeId, Guid? ManufacturerId, int LeadId)
        {
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            int GradeMaxValue = 0;
            int GradeMinValue = 0;
            if (CurrentLoggedInUser == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            List<SmartPackage> PackageList = new List<SmartPackage>();
            PackageList.Add(new SmartPackage()
            {
                PackageName = "Please Select One",
                Id = -1
            });
            Customer Customer = new Customer()
            {
                CreditScore = "0"
            };
            if (SystemTypeId != -1 && InstallTypeId != -1 && LeadId > 0)
            {
                var CurrentCurrency = _Util.Facade.GlobalSettingsFacade.GetCurrentCurrencyByCompanyId(CurrentLoggedInUser.CompanyId.Value);
                Customer = _Util.Facade.CustomerFacade.GetCustomersById(LeadId);
                List<SmartPackage> PackageListItem = _Util.Facade.PackageFacade.GetAllPackageListByCompanyIdSystemIdAndInstallTypeId(CurrentLoggedInUser.CompanyId.Value, SystemTypeId, InstallTypeId, ManufacturerId).ToList();
                List<SmartPackageEquipmentService> PackageServiceList = _Util.Facade.SmartPackageFacade.GetAllSmartPackageEquipmentService(CurrentLoggedInUser.CompanyId.Value, "Service");

                if (Customer != null && Customer.Type == "Residential")
                {
                    PackageListItem = PackageListItem.Where(m => m.UserType == "Residential").ToList();
                }
                else if (Customer != null && Customer.Type == "Commercial")
                {
                    PackageListItem = PackageListItem.Where(m => m.UserType == "Commercial").ToList();
                }
                PackageList.AddRange(PackageListItem.Select(x =>
                         new SmartPackage()
                         {
                             PackageName = ((string.IsNullOrWhiteSpace(x.PackageCode) || x.PackageCode == "-1") ? "" : string.Format("{0} -> ", x.PackageCode)) + x.PackageName.ToString() +
                            (PackageServiceList.Where(y => y.PackageId == x.PackageId).Sum(y => y.Price) == 0 ? "" : string.Format(" [{0}{1}]", CurrentCurrency, LabelHelper.FormatAmount(PackageServiceList.Where(y => y.PackageId == x.PackageId).Sum(y => y.Price)))),
                             PackageId = x.PackageId,
                             MinCredit = x.MinCredit
                         }).ToList());
                if (!string.IsNullOrEmpty(Customer.CreditScore) && Customer.CreditScore != "-1")
                {
                    int GradeId = 0;
                    int.TryParse(Customer.CreditScore, out GradeId);
                    CreditScoreGrade creditGrade = _Util.Facade.CustomerFacade.GetCreditScoreGradeById(GradeId);
                    if (creditGrade != null)
                    {
                        if (creditGrade.MaxScore.HasValue)
                        {
                            GradeMaxValue = creditGrade.MaxScore.Value;
                        }


                    }
                }
                else
                {
                    if (Customer.CreditScoreValue.HasValue)
                    {
                        GradeMaxValue = Customer.CreditScoreValue.Value;
                    }

                }

            }
            return Json(new { PackageList = PackageList, LeadCS = GradeMaxValue }, JsonRequestBehavior.AllowGet);
        }

        public static string UppercaseFirst(string s)
        {
            // Check for empty string.
            if (string.IsNullOrEmpty(s))
            {
                return string.Empty;
            }
            // Return char and concat substring.
            return char.ToUpper(s[0]) + s.Substring(1);
        }
        public void InsertSystemTypeChangeCommission(Ticket ticket)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            GlobalSetting glob = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "SystemTypeChangeCommission");
            var TotalCommission = 0.0;
            if (glob != null)
            {
                TotalCommission = Convert.ToDouble(glob.Value);
            }
            SalesCommission salesCom = new SalesCommission()
            {
                SalesCommissionId = Guid.NewGuid(),
                TicketId = ticket.TicketId,
                CustomerId = ticket.CustomerId,
                UserId = ticket.AssignedToId,
                CompletionDate = ticket.CompletionDate,
                RMRSold = 1,
                RMRCommission = TotalCommission,
                NoOfEquipment = 0,
                EquipmentCommission = 0,
                TotalCommission = TotalCommission,
                IsPaid = false,
                CreatedBy = CurrentUser.UserId,
                CreatedDate = DateTime.Now.UTCCurrentTime(),
                RMRCommissionCalculation = "",
                EquipmentCommissionCalculation = "",
                IsPermanent = true
            };
            _Util.Facade.TicketFacade.InsertSalesCommission(salesCom);
        }
        #endregion

        [Authorize]
        public ActionResult ACHAddViewPaymentMethod(int? id, Guid customerid, string type)
        {
            PaymentInfo model;
            ViewBag.ECheckType = _Util.Facade.LookupFacade.GetLookupByKey("ECheckType").Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.BankAccountTypeList = _Util.Facade.LookupFacade.GetLookupByKey("BankAccountType").Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            if (id.HasValue)
            {
                model = _Util.Facade.PaymentInfoFacade.GetPaymentInfoById(id.Value);
            }
            else
            {
                model = new PaymentInfo();
            }
            ViewBag.customerid = customerid;
            ViewBag.type = type;
            return View(model);
        }

        [Authorize]
        public ActionResult CCAddViewPaymentMethod(Guid customerid, string type, bool? IsFromBooking)
        {
            PaymentInfo model = new PaymentInfo();
            if (IsFromBooking != null && IsFromBooking == true)
            {
                model.IsFromBooking = IsFromBooking.Value;
            }
            else
            {
                model.IsFromBooking = false;
            }
            //if (customerid != null)
            //{
            //    model = _Util.Facade.PaymentInfoFacade.GetOldPaymentInfoByCustomerIdOnly(customerid);
            //}

            ViewBag.customerid = customerid;
            ViewBag.type = type;
            return View(model);
        }
        [Authorize]
        public ActionResult CCEditViewPaymentMethod(Guid customerid, string type, bool? IsFromBooking, int Id)
        {
            if (!base.IsPermitted(PermissionList.CustomerPermissions.PaymentOptionCCEdit))
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            PaymentInfo model = new PaymentInfo();
            if (IsFromBooking != null && IsFromBooking == true)
            {
                model.IsFromBooking = IsFromBooking.Value;
            }
            else
            {
                model.IsFromBooking = false;
            }
            if (customerid != Guid.Empty)
            {
                model = _Util.Facade.PaymentInfoFacade.GetOldPaymentInfoByCustomerId(customerid, Id);
            }

            ViewBag.customerid = customerid;
            ViewBag.type = type;
            return View("CCAddViewPaymentMethod", model);
        }
        [Authorize]
        public ActionResult CHKAddViewPaymentMethod(Guid customerid)
        {
            PaymentInfo model = new PaymentInfo();
            ViewBag.customerid = customerid;
            return View(model);
        }


        [Authorize]
        public ActionResult ListViewPaymentMethod(Guid? customerid)
        {
            var CurrentLoggedInUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<PaymentProfileCustomer> ListProfile = new List<PaymentProfileCustomer>();
            if (customerid.HasValue && customerid.Value != new Guid())
            {
                ListProfile = _Util.Facade.CustomerFacade.GetAllPaymentProfileByCustomerId(customerid.Value, CurrentLoggedInUser.CompanyId.Value);
            }
            return View(ListProfile);
        }
        [HttpPost]
        public JsonResult DeletePaymentProfile(int? id)
        {
            bool result = false;
            if (id.HasValue)
            {
                _Util.Facade.PaymentInfoFacade.DeletePaymentProfile(id.Value);
                result = true;
            }
            return Json(result);
        }

        [HttpPost]
        public JsonResult DeletePaymentInfo(int PaymentInfoId)
        {
            bool result = false;
            Guid customerId = Guid.Empty;
            if (PaymentInfoId > 0)
            {
                PaymentInfo Pinfo = _Util.Facade.PaymentInfoFacade.GetPaymentInfoById(PaymentInfoId);
                if (Pinfo != null)
                {
                    _Util.Facade.PaymentInfoFacade.DeletePaymentProfile(PaymentInfoId);
                    List<PaymentProfileCustomer> paymentProfileCustomer = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileListByPaymentInfoId(PaymentInfoId);
                    if (paymentProfileCustomer != null && paymentProfileCustomer.Count > 0)
                    {
                        foreach (var item in paymentProfileCustomer)
                        {
                            customerId = item.CustomerId;
                            _Util.Facade.PaymentInfoCustomerFacade.DeletePaymentProfileCustomerById(item.Id);
                        }
                    }
                    base.AddUserActivityForCustomer("Payment information is deleted", LabelHelper.ActivityAction.Delete, customerId, null, null);
                    List<PaymentInfoCustomer> paymentInfoCustomers = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByPaymentInfoId(PaymentInfoId);
                    if (paymentInfoCustomers != null && paymentInfoCustomers.Count > 0)
                    {
                        foreach (var item in paymentInfoCustomers)
                        {
                            _Util.Facade.PaymentInfoCustomerFacade.DeletePaymentInfoCustomerById(item.Id);
                        }
                    }
                }
                result = true;
            }
            return Json(result);
        }

        [Authorize]
        [HttpPost]
        public JsonResult SavePaymentMethod(PaymentInfo PaymentInfo)
        {
            string methodtype = "";
            bool result = false;
            var CurrentLoggedInUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            PaymentInfo.CompanyId = CurrentLoggedInUser.CompanyId.Value;
            if (PaymentInfo.MethodType == LabelHelper.PaymentMethod.Invoice)
            {
                List<PaymentProfileCustomer> AllCustomerPaymentProfile = _Util.Facade.CustomerFacade.GetAllPaymentProfileByCustomerId(PaymentInfo.CustomerId, PaymentInfo.CompanyId);
                if (AllCustomerPaymentProfile != null && AllCustomerPaymentProfile.Where(x => x.Type == "Invoice").Count() > 0)
                {
                    var PaymentProfile = AllCustomerPaymentProfile.Where(x => x.Type == "Invoice").FirstOrDefault();
                    return Json(new { result = true, message = "", PaymentProfileId = PaymentProfile.PaymentInfoId });
                }
                PaymentInfo.CardType = LabelHelper.PaymentMethod.Invoice;
                PaymentInfo.BankAccountType = LabelHelper.PaymentMethod.Invoice;
            }
            if (PaymentInfo.MethodType == LabelHelper.PaymentMethod.Promo)
            {
                List<PaymentProfileCustomer> AllCustomerPaymentProfile = _Util.Facade.CustomerFacade.GetAllPaymentProfileByCustomerId(PaymentInfo.CustomerId, PaymentInfo.CompanyId);
                if (AllCustomerPaymentProfile != null && AllCustomerPaymentProfile.Where(x => x.Type == "Promo").Count() > 0)
                {
                    var PaymentProfile = AllCustomerPaymentProfile.Where(x => x.Type == "Promo").FirstOrDefault();
                    return Json(new { result = true, message = "", PaymentProfileId = PaymentProfile.PaymentInfoId });
                }
                PaymentInfo.CardType = LabelHelper.PaymentMethod.Promo;
                PaymentInfo.BankAccountType = LabelHelper.PaymentMethod.Promo;
            }
            else if (PaymentInfo.MethodType == LabelHelper.PaymentMethod.Financed)
            {
                List<PaymentProfileCustomer> AllCustomerPaymentProfile = _Util.Facade.CustomerFacade.GetAllPaymentProfileByCustomerId(PaymentInfo.CustomerId, PaymentInfo.CompanyId);
                if (AllCustomerPaymentProfile != null && AllCustomerPaymentProfile.Where(x => x.Type == "Financed").Count() > 0)
                {
                    var PaymentProfile = AllCustomerPaymentProfile.Where(x => x.Type == "Financed").FirstOrDefault();
                    return Json(new { result = true, message = "", PaymentProfileId = PaymentProfile.PaymentInfoId });
                }
                PaymentInfo.CardType = LabelHelper.PaymentMethod.Financed;
                PaymentInfo.BankAccountType = LabelHelper.PaymentMethod.Financed;
            }
            else if (PaymentInfo.MethodType == LabelHelper.PaymentMethod.OnFile)
            {
                List<PaymentProfileCustomer> AllCustomerPaymentProfile = _Util.Facade.CustomerFacade.GetAllPaymentProfileByCustomerId(PaymentInfo.CustomerId, PaymentInfo.CompanyId);
                if (AllCustomerPaymentProfile != null && AllCustomerPaymentProfile.Where(x => x.Type == "OnFile").Count() > 0)
                {
                    var PaymentProfile = AllCustomerPaymentProfile.Where(x => x.Type == "OnFile").FirstOrDefault();
                    return Json(new { result = true, message = "", PaymentProfileId = PaymentProfile.PaymentInfoId });
                }
                PaymentInfo.CardType = LabelHelper.PaymentMethod.OnFile;
                PaymentInfo.BankAccountType = LabelHelper.PaymentMethod.OnFile;
            }
            else if (PaymentInfo.MethodType == LabelHelper.PaymentMethod.Cash)
            {
                List<PaymentProfileCustomer> AllCustomerPaymentProfile = _Util.Facade.CustomerFacade.GetAllPaymentProfileByCustomerId(PaymentInfo.CustomerId, PaymentInfo.CompanyId);
                if (AllCustomerPaymentProfile != null && AllCustomerPaymentProfile.Where(x => x.Type == "Cash").Count() > 0)
                {
                    var PaymentProfile = AllCustomerPaymentProfile.Where(x => x.Type == "Cash").FirstOrDefault();
                    return Json(new { result = true, message = "", PaymentProfileId = PaymentProfile.PaymentInfoId });
                }
                PaymentInfo.CardType = LabelHelper.PaymentMethod.Cash;
                PaymentInfo.BankAccountType = LabelHelper.PaymentMethod.Cash;
            }
            PaymentInfo.Street = PaymentInfo.CustomerBillingStreet;
            PaymentInfo.ZipCode = PaymentInfo.CustomerBillingZip;
            PaymentInfo.City = PaymentInfo.CustomerBillingCity;
            PaymentInfo.State = PaymentInfo.CustomerBillingState;
            if (PaymentInfo.Id > 0)
            {
                result = _Util.Facade.PaymentInfoFacade.UpdatePaymentInfo(PaymentInfo);
                if (!string.IsNullOrWhiteSpace(PaymentInfo.MethodType) && PaymentInfo.MethodType == "ACH")
                {
                    base.AddUserActivityForCustomer("ACH Payment information is updated", LabelHelper.ActivityAction.Update, PaymentInfo.CustomerId, null, null);
                }
                else if (!string.IsNullOrWhiteSpace(PaymentInfo.MethodType) && PaymentInfo.MethodType == "Credit Card")
                {
                    base.AddUserActivityForCustomer("CC Payment information is updated", LabelHelper.ActivityAction.Update, PaymentInfo.CustomerId, null, null);
                }
            }
            else
            {
                result = _Util.Facade.PaymentInfoFacade.InsertPaymentInfo(PaymentInfo) > 0;
                if (!string.IsNullOrWhiteSpace(PaymentInfo.MethodType) && PaymentInfo.MethodType == "ACH")
                {
                    base.AddUserActivityForCustomer("ACH Payment information is added", LabelHelper.ActivityAction.Create, PaymentInfo.CustomerId, null, null);
                }
                else if (!string.IsNullOrWhiteSpace(PaymentInfo.MethodType) && PaymentInfo.MethodType == "Credit Card")
                {
                    base.AddUserActivityForCustomer("CC Payment information is added", LabelHelper.ActivityAction.Create, PaymentInfo.CustomerId, null, null);
                }
            }
            if (result)
            {
                if (!string.IsNullOrWhiteSpace(PaymentInfo.MethodType) && PaymentInfo.MethodType == "ACH")
                {
                    methodtype = PaymentInfo.MethodType + "_" + PaymentInfo.AccountName + "_" + PaymentInfo.AcountNo.Substring(Math.Max(0, PaymentInfo.AcountNo.Length - 2));
                }
                else if (!string.IsNullOrWhiteSpace(PaymentInfo.MethodType) && PaymentInfo.MethodType == "Credit Card")
                {
                    string cardno = DESEncryptionDecryption.DecryptCipherTextToPlainText(PaymentInfo.CardNumber);
                    cardno = cardno.Replace("-", "");
                    methodtype = "CC" + "_" + PaymentInfo.AccountName + "_" + cardno.Substring(Math.Max(0, cardno.Length - 4));
                }
                else if (!string.IsNullOrWhiteSpace(PaymentInfo.MethodType) && PaymentInfo.MethodType == LabelHelper.PaymentMethod.Check)
                {
                    methodtype = "CHK" + "_" + PaymentInfo.CheckNo.Substring(Math.Max(0, PaymentInfo.CheckNo.Length - 4));
                }
                else if (!string.IsNullOrWhiteSpace(PaymentInfo.MethodType) && PaymentInfo.MethodType == LabelHelper.PaymentMethod.Invoice)
                {
                    methodtype = LabelHelper.PaymentMethod.Invoice;
                }
                else if (!string.IsNullOrWhiteSpace(PaymentInfo.MethodType) && PaymentInfo.MethodType == LabelHelper.PaymentMethod.Promo)
                {
                    methodtype = LabelHelper.PaymentMethod.Promo;
                }
                else if (!string.IsNullOrWhiteSpace(PaymentInfo.MethodType) && PaymentInfo.MethodType == LabelHelper.PaymentMethod.Financed)
                {
                    methodtype = LabelHelper.PaymentMethod.Financed;
                }
                else if (!string.IsNullOrWhiteSpace(PaymentInfo.MethodType) && PaymentInfo.MethodType == LabelHelper.PaymentMethod.Cash)
                {
                    methodtype = LabelHelper.PaymentMethod.Cash;
                }
                else if (!string.IsNullOrWhiteSpace(PaymentInfo.MethodType) && PaymentInfo.MethodType == LabelHelper.PaymentMethod.OnFile)
                {
                    methodtype = LabelHelper.PaymentMethod.OnFile;
                }


                //if (PaymentInfo.Id == 0)
                //{
                //    result = _Util.Facade.CustomerFacade.InsertPaymentProfileCustomer(PaymentProfileCustomer) > 0;
                //}

                //while (PaymentInfo.Id > 0)
                //    continue;
                PaymentProfileCustomer payCus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(PaymentInfo.Id);
                if (payCus == null)
                {
                    PaymentProfileCustomer PaymentProfileCustomer = new PaymentProfileCustomer()
                    {
                        CompanyId = CurrentLoggedInUser.CompanyId.Value,
                        CustomerId = PaymentInfo.CustomerId,
                        PaymentInfoId = PaymentInfo.Id,
                        Type = methodtype,

                    };
                    result = _Util.Facade.CustomerFacade.InsertPaymentProfileCustomer(PaymentProfileCustomer) > 0;
                }
                else
                {
                    payCus.PaymentInfoId = PaymentInfo.Id;
                    payCus.Type = methodtype;
                    result = _Util.Facade.CustomerFacade.UpdatePaymentProfileCustomer(payCus) > 0;
                }


                //will not update customer address 10-8-21
                //var cusobj = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(PaymentInfo.CustomerId);
                //if (cusobj != null)
                //{
                //    cusobj.StreetPrevious = PaymentInfo.CustomerBillingStreet;
                //    cusobj.ZipCodePrevious = PaymentInfo.CustomerBillingZip;
                //    cusobj.CityPrevious = PaymentInfo.CustomerBillingCity;
                //    cusobj.StatePrevious = PaymentInfo.CustomerBillingState;
                //    _Util.Facade.CustomerFacade.UpdateCustomer(cusobj);
                //}
                //else
                //{
                //    cusobj.StreetPrevious = cusobj.Street;
                //    cusobj.ZipCodePrevious = cusobj.ZipCode;
                //    cusobj.CityPrevious = cusobj.City;
                //    cusobj.StatePrevious = cusobj.State;
                //    _Util.Facade.CustomerFacade.UpdateCustomer(cusobj);
                //}
            }
            //System.Web.HttpContext.Current.Session["PaymentInfoId"] = PaymentInfo.Id +"_"+ PaymentInfo.CustomerId;
            return Json(new { result = result, message = "", customerid = PaymentInfo.CustomerId, paymentInfoId = PaymentInfo.Id });
        }

        [HttpGet]
        public JsonResult GetBankingInformationByRoutingNumber(string routingnumber)
        {
            if (string.IsNullOrWhiteSpace(routingnumber) || routingnumber.Length < 8)
            {
                return Json(new { result = false }, JsonRequestBehavior.AllowGet);
            }

            RoutingNumber routingNumber = _Util.Facade.TransactionFacade.GetBankInfoFromRoutingNumber(routingnumber);
            if (routingNumber != null)
            {
                routingNumber.code = "200";
                return Json(new { result = true, dataObjects = routingNumber }, JsonRequestBehavior.AllowGet);
            }

            string url = "https://www.routingnumbers.info/api/name.json";
            string urlparam = "?rn=" + routingnumber;
            HttpClient client = new HttpClient();
            client.BaseAddress = new Uri(url);

            // Add an Accept header for JSON format.
            client.DefaultRequestHeaders.Add("rn", routingnumber);
            HttpResponseMessage response = client.GetAsync(url + urlparam).Result;
            if (response.IsSuccessStatusCode)
            {
                var dataObjects = response.Content.ReadAsStringAsync().Result;
                try
                {
                    RoutingNumberAPIResponse APIResponse = Newtonsoft.Json.JsonConvert.DeserializeObject<RoutingNumberAPIResponse>(dataObjects);
                    if (string.IsNullOrWhiteSpace(APIResponse.name))
                    {
                        return Json(new { result = false }, JsonRequestBehavior.AllowGet);
                    }

                    routingNumber = new RoutingNumber()
                    {
                        RoutingNumber = APIResponse.rn,
                        BankName = APIResponse.name,
                        code = "200"
                    };
                    _Util.Facade.TransactionFacade.InsertRoutingNumber(routingNumber);


                    return Json(new { result = true, dataObjects = routingNumber }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception e)
                {
                    logger.Error(e);
                    return Json(new { result = false }, JsonRequestBehavior.AllowGet);
                }

            }
            else
            {
                return Json(new { result = false }, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult GetCreditScore(Guid CustomerId, bool IsSoftCheck, string BUREAU, int? ContactId)
        {

            string result = "false";
            string responseContent = "";
            string score = "";
            string TransId = "";
            string filehit = "";
            string HtmlReports = "";
            double MinCreditScore = 0;
            CustomerCreditScore CreditScore = new CustomerCreditScore();
            CustomerAdditionalContact secondaryCredit = new CustomerAdditionalContact();
            if (ContactId.HasValue && ContactId > 0)
            {
                secondaryCredit = _Util.Facade.AdditionalContactFacade.GetById(ContactId.Value);
                if (secondaryCredit != null)
                {
                    CreditScore.FirstName = secondaryCredit.FirstName;
                    CreditScore.LastName = secondaryCredit.LastName;
                    CreditScore.STATE = secondaryCredit.CorpState;
                    CreditScore.ZIP = secondaryCredit.CorpZipCode;
                    CreditScore.CITY = secondaryCredit.CorpCity;
                    CreditScore.ADDRESS = secondaryCredit.CorpAddress;
                    CreditScore.SSN = secondaryCredit.SSN;
                    CreditScore.CustomerId = CustomerId;
                    CreditScore.BUREAU = BUREAU;
                }
            }
            else
            {
                if (CustomerId != new Guid())
                {
                    Customer cus = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(CustomerId);
                    CreditScore.FirstName = cus.FirstName;
                    CreditScore.LastName = cus.LastName;
                    CreditScore.STATE = cus.State;
                    CreditScore.ZIP = cus.ZipCode;
                    CreditScore.CITY = cus.City;
                    CreditScore.ADDRESS = cus.Street;
                    CreditScore.SSN = cus.SSN;
                    CreditScore.CustomerId = CustomerId;
                    CreditScore.BUREAU = BUREAU;
                }
            }

            CustomerCreditCheck creditcheck = new CustomerCreditCheck();
            try
            {
                var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
                CreditScore.IsSoftCheck = IsSoftCheck;
                IRestResponse response = _Util.Facade.CustomerFacade.GetCreditReportResponse(CreditScore, CurrentUser.CompanyId.Value);
                responseContent = response.Content;
                //System.IO.File.WriteAllText(HttpContext.Server.MapPath("~/CreditScore.txt"), responseContent);
                //using (System.IO.StreamWriter file = new System.IO.StreamWriter(System.Web.Hosting.HostingEnvironment.MapPath(@"~\SchedulerReports\CreditScoreReport.txt"), true))
                //{
                //    file.WriteLine(string.Format("Credit Report: ", responseContent));
                //}
                XmlDocument doc = new XmlDocument();
                doc.LoadXml(responseContent);
                var scoreXML = doc.SelectSingleNode("//score");
                var TransIdXML = doc.SelectSingleNode("//Transid");
                var HtmlReportXML = doc.SelectSingleNode("//HTML_Reports");
                double CreditScoreValue = 0;
                Customer cus = new Customer();
                cus = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(CreditScore.CustomerId);
                if (scoreXML != null)
                {
                    score = scoreXML.InnerText;
                    double.TryParse(score, out CreditScoreValue);
                }
                if (TransIdXML != null)
                {
                    TransId = TransIdXML.InnerText;
                    CustomerExtended extended = new CustomerExtended();
                    extended = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(cus.CustomerId);
                    if (extended != null)
                    {
                        extended.CreditTransectionId = TransId;
                        _Util.Facade.CustomerFacade.UpdateCustomerExtended(extended);
                    }
                    else
                    {
                        extended.CustomerId = cus.CustomerId;
                        extended.CreditTransectionId = TransId;
                        _Util.Facade.CustomerFacade.InsertCustomerExtended(extended);
                    }

                }
                PackageCustomer packageCus = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(CreditScore.CustomerId);
                if (packageCus != null)
                {
                    SmartPackage smartPackage = _Util.Facade.PackageFacade.GetSmartPackageByIdAndCompanyId(packageCus.PackageId, CurrentUser.CompanyId.Value);
                    if (smartPackage != null)
                    {
                        if (smartPackage.MinCredit.HasValue)
                        {
                            MinCreditScore = smartPackage.MinCredit.Value;
                        }
                    }
                }
                if (MinCreditScore == 0)
                {
                    filehit = "Undefined";
                }
                else if (MinCreditScore > CreditScoreValue)
                {
                    filehit = "Fail";

                }
                else
                {
                    filehit = "Pass";
                }
                if (HtmlReportXML != null)
                {
                    HtmlReports = HtmlReportXML.InnerText;
                }


                int ScoreValue = 0;
                int.TryParse(score, out ScoreValue);
                cus.CreditScoreValue = ScoreValue;
                if (cus.CreditScoreValue != null && cus.CreditScoreValue > 0)
                {
                    CreditScoreGrade creditscoreGrade = _Util.Facade.CustomerFacade.GetCreditScoreGradeByScoreRange(cus.CreditScoreValue.Value);
                    if (creditscoreGrade != null)
                    {
                        cus.CreditScore = creditscoreGrade.ID.ToString();
                    }

                }
                _Util.Facade.CustomerFacade.UpdateCustomer(cus);

                CustomerCreditScoreReport creditscoreBody = new CustomerCreditScoreReport();
                creditscoreBody.ContentBody = HtmlReports;
                ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("~/Views/Leads/ViewCreditScore.cshtml", creditscoreBody)
                {
                    //FileName = "TestView.pdf",
                    PageSize = Rotativa.Options.Size.A4,
                    PageOrientation = Rotativa.Options.Orientation.Portrait,
                    PageMargins = { Left = 1, Right = 1 },

                };
                byte[] applicationPDFData = actionPDF.BuildPdf(ControllerContext);
                string filename = ConfigurationManager.AppSettings["File.CreditReports"];
                var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CurrentUser.CompanyId.Value).CompanyName.ReplaceSpecialChar();
                filename = string.Format(filename, comname);
                Random rand = new Random();
                string ReportName = cus.Id + "_CreditReport_" + rand.Next().ToString() + ".pdf";
                filename += DateTime.Now.UTCCurrentTime().Year.ToString() + "/" + DateTime.Now.UTCCurrentTime().Month.ToString() + "/" + ReportName;
                string Serverfilename = FileHelper.GetFileFullPath(filename);
                FileHelper.SaveFile(applicationPDFData, Serverfilename);


                creditcheck.CustomerId = CreditScore.CustomerId;
                creditcheck.FirstName = CreditScore.FirstName;
                creditcheck.LastName = CreditScore.LastName;
                creditcheck.CreditAddress = CreditScore.ADDRESS;
                creditcheck.CreditBureau = CreditScore.BUREAU;
                creditcheck.CreditCity = CreditScore.CITY;
                creditcheck.CreditState = CreditScore.STATE;
                creditcheck.CreditZipCode = CreditScore.ZIP;
                creditcheck.ReportPdfLink = filename;
                creditcheck.RepontPdfName = ReportName;
                creditcheck.DateOfBirth = DateTime.Now;
                creditcheck.CreatedBy = CurrentUser.UserId;
                creditcheck.CreditCheckDate = DateTime.Now;
                creditcheck.Hit = filehit;
                creditcheck.Score = score;
                creditcheck.TransectionId = TransId;
                creditcheck.CompanyId = CurrentUser.CompanyId.Value;
                _Util.Facade.CustomerFacade.InsertCustomerCreditCheck(creditcheck);
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    result = "true";
                }
                #region Update SecondaryContact
                List<CustomerAdditionalContact> contactList = new List<CustomerAdditionalContact>();
                if (ContactId.HasValue && secondaryCredit != null)
                {
                    contactList = _Util.Facade.AdditionalContactFacade.GetAllAdditionalContactByCustomerId(creditcheck.CustomerId);
                    if (contactList != null)
                    {
                        foreach (var item in contactList)
                        {
                            item.IsCreditUsed = false;
                            _Util.Facade.AdditionalContactFacade.UpdateAdditionalContact(item);
                        }
                    }
                    secondaryCredit.IsCreditUsed = true;
                    secondaryCredit.CreditScore = cus.CreditScoreValue.ToString();
                    secondaryCredit.ReportPdfLink = filename;
                    _Util.Facade.AdditionalContactFacade.UpdateAdditionalContact(secondaryCredit);
                }
                #endregion
            }
            catch (Exception ex)
            {
                logger.Error(ex);
            }

            return Json(new { result = result, response = responseContent, Score = score, ReportName = creditcheck.RepontPdfName, ReportLink = creditcheck.ReportPdfLink, HitStatus = filehit });
        }

        public JsonResult SmartLeadConvertedToCustomerPDFMailAndSMS_v2(int? leadid, string PrefferedEmail, string PrefferedNO, bool? IsRecreate, int? agreementtempid, bool? firstpage, int? ticketid, bool? isinvoice, string invoiceid, bool? isestimator, int? estid, Guid? userid, bool? commercial)
        {
            #region Send Mail Agreement
            List<string> ValidPrefferedEmail = new List<string>();
            if (!string.IsNullOrWhiteSpace(PrefferedEmail))
            {
                string[] Emailadd = PrefferedEmail.Split(';');
                if (Emailadd != null)
                {
                    foreach (var item in Emailadd)
                    {
                        if (item.IsValidEmailAddress())
                        {
                            ValidPrefferedEmail.Add(item);
                        }
                    }
                }
                if (ValidPrefferedEmail.Count == 0)
                {
                    return Json(new { result = false, message = "Invalid email address." });
                }

            }
            DateTime FixDate = DateTime.Now.UTCCurrentTime();
            //int idlead = Convert.ToInt32(Lid);
            InstallationAgreementModel Model = new InstallationAgreementModel();
            Model.EmergencyContactList = new List<EmergencyContact>();
            Model.ListAgreementAnswer = new List<AgreementAnswer>();
            Model.EquipmentList = new List<Equipment>();
            Model.CustomerAgreement = new List<CustomerAgreement>();
            Model.SingleCustomerAgreement = new CustomerAgreement();
            var taxtotal = 0.0;
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool AgreementResult = false;
            string file = "";
            string from = "";
            string logMessage = "";
            //var ActivationfeeValue = 0.0;
            //var IsActivationFee = _Util.Facade.ActivationFeeFacade.GetActivationFeeByCompanyId(CurrentUser.CompanyId.Value);
            //if (IsActivationFee != null)
            //{
            //    ActivationfeeValue = IsActivationFee.Fee;
            //}
            Customer Cus = new Customer();
            CustomerExtended CusExd = new CustomerExtended();
            Company Com = new Company();
            if (leadid.HasValue)
            {
                if (!_Util.Facade.CustomerFacade.CustomerIsInCompany(leadid.Value, CurrentUser.CompanyId.Value))
                {
                    return null;
                }
                Cus = _Util.Facade.CustomerFacade.GetCustomersById(leadid.Value);
                if (Cus != null)
                {
                    CusExd = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(Cus.CustomerId);
                }
                Com = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CurrentUser.CompanyId.Value);

                string ContractTerm = "";
                string ContractTermInWord = "";
                if (!string.IsNullOrWhiteSpace(Cus.ContractTeam) && Cus.ContractTeam != "-1")
                {
                    if (Cus.ContractTeam.ToLower() == "month to month")
                    {
                        ContractTerm = Cus.ContractTeam;
                        ContractTermInWord = Cus.ContractTeam;
                    }
                    else
                    {
                        ContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))).ToString();
                        ContractTermInWord = NumberToWords((Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))));
                    }

                }

                #region Sold by change
                //Person who sends the mail to Customer will be counted as sold by
                //Cus.Soldby = CurrentUser.UserId.ToString();
                _Util.Facade.CustomerFacade.UpdateCustomer(Cus);
                #endregion

                var UpfrontAddOnTotal = 0.0;
                var UpfrontAddOnTotalPromo = 0.0;
                bool IsUpfrontPromo = false;
                bool IsServicePromo = false;
                var MonthlyServiceFeeTotal = 0.0;
                var TotalMonthlyMonitoring = 0.0;
                var NewSubTotal = 0.0;
                var TotalDueAtSigning = 0.0;
                var EquipmentTotalPrice = 0.0;
                var ServiceTotalPrice = 0.0;
                var AgreementSubtotal = 0.0;
                var AgreementTotal = 0.0;
                var AgreementTax = 0.0;
                var NotARBEnabledTotalPrice = 0.0;
                string InstallTypeName = "";
                bool IsNonConfirming = false;
                var NonConfirmingFee = 0.0;
                var AdvanceServiceFeeTotal = 0.0;
                string contractCreatedDateVal = "";
                if (CusExd.ContractCreatedDate != null)
                {
                    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.UTCToClientTime().ToString("M/d/yy");
                }
                else
                {
                    CusExd.ContractCreatedDate = DateTime.UtcNow;
                    _Util.Facade.CustomerFacade.UpdateCustomerExtended(CusExd);
                    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.UTCToClientTime().ToString("M/d/yy");
                }
                if (Cus.CreditScoreValue == null)
                {
                    Cus.CreditScoreValue = 0;
                }
                var PackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(Cus.CustomerId);
                if (PackageCustomer != null && PackageCustomer.NonConforming && PackageCustomer.NonConformingFee > 0 && (Cus.CreditScoreValue < PackageCustomer.MinCredit || Cus.CreditScoreValue > PackageCustomer.MaxCredit))
                {
                    IsNonConfirming = true;
                    NonConfirmingFee = PackageCustomer.NonConformingFee.Value;
                }
                var SmartPackageEquipmentServiceList = new List<SmartPackageEquipmentService>();
                var GetCityTaxList = _Util.Facade.CompanyBranchFacade.GetCityTaxRate(Cus.CustomerId, Com.CompanyId);
                if (GetCityTaxList.Count > 0)
                {
                    foreach (var item1 in GetCityTaxList)
                    {
                        AgreementTax = item1.Rate;
                    }
                }
                else
                {
                    Guid CustomerId = new Guid();
                    if (Cus != null)
                    {
                        CustomerId = Cus.CustomerId;
                    }

                    var GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(Com.CompanyId, CustomerId);
                    if (GetSalesTax != null)
                    {
                        AgreementTax = Convert.ToDouble(GetSalesTax.Value);
                    }
                }
                #region Invoice
                Invoice invoice = new Invoice();
                CustomerProratedBill cpb = new CustomerProratedBill();
                cpb = _Util.Facade.InvoiceFacade.GetCusProratedBillByCustomerId(Cus.CustomerId);
                List<InvoiceDetail> invoiceList = new List<InvoiceDetail>();
                string invDiagram = "";
                if (!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true)
                {
                    invoice = _Util.Facade.InvoiceFacade.GetByInvoiceId(invoiceid);
                    if (invoice != null)
                    {
                        invDiagram = invoice.InvoiceContractDiagram;
                        invoiceList = _Util.Facade.InvoiceFacade.GetInvoiceDetialsListByInvoiceId(invoice.InvoiceId);
                    }
                }
                #endregion

                #region Estimate
                Employee userInfo = new Employee();
                if (userid != Guid.Empty)
                {
                    userInfo = _Util.Facade.EmployeeFacade.GetEmployeeByEmployeeId(userid.Value);
                }
                CreateEstimator createest = new CreateEstimator();
                if (isestimator.Value && estid > 0)
                {
                    CreateEstimator ca = new CreateEstimator();
                    ca.EstimatorSetting = new EstimatorSetting();
                    ca.Company = Com;

                    ca.Estimator = _Util.Facade.EstimatorFacade.GetById(estid.Value);
                    ca._EstimatorPDFFilter = _Util.Facade.EstimatorFacade.GetEstimatorPdfFilterByComIdCusIdUserId(Com.CompanyId, userid.Value, ca.Estimator.CustomerId);
                    ca.estimatorDetails = _Util.Facade.EstimatorFacade.GetEstimatorDetailListByEstimatorId(ca.Estimator.EstimatorId);
                    ca.estimatorServices = _Util.Facade.EstimatorFacade.GetEstimatorServicesByEstimatorId(ca.Estimator.EstimatorId);
                    if (ca.Estimator == null || ca.Estimator.CompanyId != Com.CompanyId)
                    {
                        return null;
                    }
                    if ((ca.estimatorDetails == null || ca.estimatorDetails.Count() == 0) && (ca.estimatorServices == null || ca.estimatorServices.Count() == 0))
                    {
                        return null;
                    }
                    Customer tempCUstomer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(ca.Estimator.CustomerId);
                    if (tempCUstomer == null)
                    {
                        return null;
                    }

                    CreateEstimator processedModel = GetEstimatorModelById(ca.Estimator, ca.estimatorDetails, ca.estimatorServices, Com, tempCUstomer, ca._EstimatorPDFFilter, Com.CompanyId);
                    Estimator estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(ca.Estimator.EstimatorId);
                    if (estimator != null)
                    {
                        ViewBag.CoverLetter = estimator.CoverLetter;
                        processedModel.Estimator.CoverLetter = estimator.CoverLetter;
                        processedModel.Estimator.CoverLetterFile = estimator.CoverLetterFile;
                        processedModel.Estimator.ServicePlanType = estimator.ServicePlanType;
                        processedModel.Estimator.ServicePlanRate = estimator.ServicePlanRate;
                        processedModel.Estimator.ServicePlanAmount = estimator.ServicePlanAmount;
                        processedModel.Estimator.ServiceTaxAmount = estimator.ServiceTaxAmount;
                        processedModel.Estimator.ServiceTotalAmount = estimator.ServiceTotalAmount;
                        processedModel.Estimator.ShowServicePlan = estimator.ShowServicePlan;
                        processedModel.Estimator.ShowService = estimator.ShowService;
                        processedModel.Estimator.ServicePlanTypeName = "Service Plan";

                        SelectListItem selectListItem = _Util.Facade.LookupFacade.GetDropdownsByKey("ServicePlans").Where(x => x.Value == estimator.ServicePlanType).FirstOrDefault();
                        if (selectListItem != null)
                        {
                            processedModel.Estimator.ServicePlanTypeName = selectListItem.Text;
                        }

                    }
                    if (ca.estimatorDetails != null)
                    {
                        foreach (var item in ca.estimatorDetails)
                        {
                            Manufacturer Manufacturer = _Util.Facade.EquipmentFacade.GetManufacturerByManufacturerId(item.ManufacturerId);
                            if (Manufacturer != null)
                            {
                                item.Manufacturer = Manufacturer.Name;
                            }
                            item.CreatedDate = DateTime.Now.UTCCurrentTime();
                            ca.SubTotal = ca.SubTotal + (item.TotalPrice.HasValue ? item.TotalPrice.Value : 0);
                            item.EquipmentFile = _Util.Facade.EquipmentFileFacade.GetEquipmentFilesByEquipmentIdAndFileType(item.EquipmentId, LabelHelper.EquipmentFileType.ProfilePicture).FirstOrDefault();
                            if (item.EquipmentFile == null)
                            {
                                item.EquipmentFile = new EquipmentFile();
                            }
                        }
                    }
                    if (ca.estimatorServices != null)
                    {
                        foreach (var item in ca.estimatorServices)
                        {
                            processedModel.ServiceSubTotal += ca.ServiceSubTotal + item.Amount;
                        }
                        processedModel.TotalServiceAmount = processedModel.ServiceSubTotal + ca.ServiceTax;
                    }
                    createest = processedModel;
                    createest.eSecurityLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/eSecurity_logo.png");
                    createest.specializedLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/specialized_property_management_logo.png");
                    string EstimatorContractTerm = "";
                    if (!string.IsNullOrWhiteSpace(createest.Estimator.ContractTerm) && createest.Estimator.ContractTerm != "-1")
                    {
                        if (createest.Estimator.ContractTerm.ToLower() == "month to month")
                        {
                            EstimatorContractTerm = createest.Estimator.ContractTerm;
                        }
                        else
                        {
                            EstimatorContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(createest.Estimator.ContractTerm) * 12))).ToString() + " month";
                        }

                    }
                    createest.EstimatorContractTerm = EstimatorContractTerm;
                }
                #endregion
                var CustomEquipmentList = new List<Equipment>();
                if (firstpage == true || IsRecreate == true)
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }
                else
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }
                var CustomServiceList = new List<Equipment>();
                if (firstpage == true || IsRecreate == true)
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (CustomServiceList.Count > 0)
                    {
                        foreach (var item in CustomServiceList)
                        {
                            EquipmentTotalPrice += item.Total;
                            ServiceTotalPrice += item.Total;
                            MonthlyServiceFeeTotal += item.Total;
                        }
                    }
                }
                else
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (CustomServiceList.Count > 0)
                    {
                        foreach (var item in CustomServiceList)
                        {
                            EquipmentTotalPrice += item.Total;
                            ServiceTotalPrice += item.Total;
                            MonthlyServiceFeeTotal += item.Total;
                        }
                    }
                }
                var NotARBEnabledServiceList = new List<Equipment>();
                if (firstpage == true || IsRecreate == true || commercial == true)
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (NotARBEnabledServiceList.Count > 0)
                    {
                        foreach (var item in NotARBEnabledServiceList)
                        {
                            NotARBEnabledTotalPrice += item.Total;
                        }
                    }
                }
                else
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListFromService(Cus.CustomerId, Com.CompanyId);
                    if (NotARBEnabledServiceList.Count > 0)
                    {
                        foreach (var item in NotARBEnabledServiceList)
                        {
                            NotARBEnabledTotalPrice += item.Total;
                        }
                    }
                }
                #region Advance Monitoring Service Month

                PaymentInfoCustomer paycus = new PaymentInfoCustomer();
                paycus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayForService(Cus.CustomerId);
                int ForMonth = 1;
                if (paycus != null && paycus.ForMonths.HasValue)
                {
                    ForMonth = paycus.ForMonths.Value;
                }
                if (ForMonth > 1)
                {
                    AdvanceServiceFeeTotal = MonthlyServiceFeeTotal * (ForMonth - 1);

                }
                #endregion
                Cus.MonthlyMonitoringFee = Convert.ToString(ServiceTotalPrice);
                TotalMonthlyMonitoring = MonthlyServiceFeeTotal;
                NewSubTotal = TotalMonthlyMonitoring + UpfrontAddOnTotal;
                if (CustomServiceList.Count > 0 || CustomEquipmentList.Count > 0)
                {
                    if (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue)
                    {
                        AgreementSubtotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                        NewSubTotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                    }
                    else
                    {
                        AgreementSubtotal = EquipmentTotalPrice;
                        NewSubTotal = EquipmentTotalPrice;
                    }
                }
                if (IsNonConfirming && NonConfirmingFee > 0)
                {
                    AgreementSubtotal = AgreementSubtotal + NonConfirmingFee;
                    NewSubTotal = NewSubTotal + NonConfirmingFee;
                }
                if (AgreementTax != 0.0)
                {
                    taxtotal = (AgreementSubtotal / 100) * AgreementTax;
                    Model.TaxTotal = taxtotal;
                    AgreementTotal = AgreementSubtotal + taxtotal;
                    TotalDueAtSigning = NewSubTotal + taxtotal;
                }
                else
                {
                    Model.TaxTotal = 0.0;
                    AgreementTotal = AgreementSubtotal;
                    TotalDueAtSigning = NewSubTotal;
                }
                var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(Cus.CustomerId, CurrentUser.CompanyId.Value);
                if (PackageCustomerDetails != null)
                {
                    InstallTypeName = _Util.Facade.PackageFacade.SmartInstallTypeNameByInstallTypeId(Convert.ToInt32(PackageCustomerDetails.SmartInstallTypeId));
                    if (string.IsNullOrWhiteSpace(InstallTypeName))
                    {
                        InstallTypeName = "New Install";
                    }
                    SmartPackageEquipmentServiceList = _Util.Facade.PackageFacade.GetAllSmartPackageIncludeEquipmentByPackageIdAndCompanyId(PackageCustomerDetails.PackageId, CurrentUser.CompanyId.Value);
                }
                var PaymentDetails = _Util.Facade.PaymentInfoFacade.GetAllPaymentInfoByCustomerIdAndCompanyId(Cus.CustomerId, CurrentUser.CompanyId.Value).Where(m => m.PayFor == "First Month").FirstOrDefault();
                var agreementPayment = _Util.Facade.PaymentInfoFacade.GetLeadAgreementPaymentInfoByCustomerId(Cus.CustomerId);
                string paymentoverviewheader = "";
                string paymentoverviewdata = "";
                if (agreementPayment != null && agreementPayment.Count > 0)
                {
                    paymentoverviewheader = "<table style='border-collapse:collapse; width:100%; font-family:Arial; table-layout:fixed; font-size:13px;'>{0}</table>";
                    foreach (var pay in agreementPayment)
                    {
                        var sppay = pay.Type.Split('_');
                        if (sppay.Length > 0)
                        {
                            if (sppay[0] == "CC")
                            {
                                var cardNumber = pay.CardNumber.Replace('-', ' ').Replace(" ", "");
                                if (cardNumber.Length == 16)
                                {
                                    paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(12, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                                }
                                else
                                {
                                    paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(11, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                                }
                            }
                            else if (sppay[0] == "ACH")
                            {
                                paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Type: " + pay.BankAccountType + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Routing No: " + pay.RoutingNo + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account No: " + string.Concat("".PadLeft(pay.AcountNo.Length - 4, '*'), pay.AcountNo.Substring(pay.AcountNo.Length - 4)) + @"</td>
                                                        </tr>";
                            }
                        }
                    }
                }
                var CustomerAddress = AddressHelper.MakeAddress(Cus);
                var CustomerInstallAddress = AddressHelper.MakeInstallAddress(Cus);
                CustomerSignature cs = new CustomerSignature();
                GlobalSetting glbs = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CompanySignature");
                string cusSignature = "";
                string cussignDate = "";
                DateTime cussignDateVal = new DateTime();
                if (firstpage.HasValue && firstpage.Value == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "First Page");
                }
                else if (commercial.HasValue && commercial.Value == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Commercial");
                }
                else if (isinvoice == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimate");
                }
                else if (isestimator.HasValue && isestimator.Value == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimator");
                }
                else if (IsRecreate == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Recreate");
                }
                else if (Cus != null && agreementtempid.HasValue && agreementtempid.Value > 0)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Agreement File");
                }
                else
                {
                    cusSignature = Cus.Singature;
                    if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                    {
                        cussignDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                        cussignDateVal = Cus.CustomerSignatureDate.Value.UTCToClientTime();
                    }

                }
                if (cs != null && (agreementtempid != 0 || (firstpage.HasValue && firstpage.Value == true) || (IsRecreate == true) || (commercial.HasValue && commercial.Value == true)))
                {
                    cusSignature = cs.Signature;
                    if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                    {
                        cussignDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                        cussignDateVal = cs.CreatedDate.UTCToClientTime();
                    }

                }
                Double MMR = 1;
                Double CTerm = 0;

                double.TryParse(Cus.MonthlyMonitoringFee, out MMR);
                double.TryParse(ContractTerm, out CTerm);
                //(!string.IsNullOrWhiteSpace() ? Convert.ToDouble(Cus.MonthlyMonitoringFee) : 1) * Convert.ToDouble(ContractTerm);
                Double TotalPayments = MMR * CTerm;
                #region For Promo Pyment Method
                List<PaymentInfoCustomer> paycusList = new List<PaymentInfoCustomer>();
                PaymentProfileCustomer paymentProfile = new PaymentProfileCustomer();
                paycusList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(Cus.CustomerId);
                if (paycusList != null && paycusList.Count > 0)
                {
                    foreach (var item in paycusList)
                    {
                        paymentProfile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(item.PaymentInfoId);
                        if (paymentProfile != null && paymentProfile.Type == LabelHelper.PaymentMethod.Promo)
                        {
                            if (item.Payfor == "Activation Fee")
                            {
                                NonConfirmingFee = 0.0;

                                if (PackageCustomer != null)
                                {
                                    PackageCustomer.ActivationFee = 0.0;
                                }
                                NewSubTotal = NewSubTotal - (PackageCustomer.AdditionFee + NonConfirmingFee);
                            }
                            else if (item.Payfor == "Equipment")
                            {
                                IsUpfrontPromo = true;
                                NewSubTotal = NewSubTotal - UpfrontAddOnTotal;
                            }
                            else if (item.Payfor == "Service")
                            {
                                NewSubTotal = NewSubTotal - TotalMonthlyMonitoring;
                                IsServicePromo = true;

                            }


                        }

                    }

                }
                #endregion

                #region LeadSource
                string LeadSource = "";
                Lookup leadsource = _Util.Facade.LookupFacade.GetLookupByKeyAndValueAndCompanyId("LeadSource", Cus.LeadSource, Com.CompanyId);
                LeadSource = leadsource != null && !string.IsNullOrWhiteSpace(leadsource.DisplayText) && leadsource.DataValue != "-1" ? leadsource.DisplayText : "";
                #endregion

                Model = new InstallationAgreementModel()
                {
                    CSIDNumber = Cus.Id,
                    LeadSource = LeadSource,
                    IsNonConfirming = IsNonConfirming,
                    NonConfirmingFee = NonConfirmingFee,
                    InstallDate = Cus.InstallDate != null ? Convert.ToDateTime(Cus.InstallDate).ToShortDateString() : "",
                    OriginalContactDate = (Cus.OriginalContactDate != null && Cus.OriginalContactDate.HasValue) ? Cus.OriginalContactDate.Value : new DateTime(),
                    AccountType = Cus.Type,
                    ContractType = CusExd != null && !string.IsNullOrWhiteSpace(CusExd.ContractType) ? CusExd.ContractType : "",
                    Referredby = Cus.ReferringCustomer != Guid.Empty ? _Util.Facade.CustomerFacade.GetCustomerNameById(Cus.ReferringCustomer) : "",
                    SocialSecurityNumber = Cus.SSN,
                    //Owner2ndPhone = Cus.SecondaryPhone,
                    Owner2ndPhone = Cus.PrimaryPhone,
                    InitialStreet = Cus.Street,
                    InitialCity = Cus.City,
                    InitialCountry = Cus.County,
                    InitialState = Cus.State,
                    InitialZip = Cus.ZipCode,
                    InitialApt = Cus.Appartment,
                    BillingCity = Cus.CityPrevious,
                    BillingState = Cus.StatePrevious,
                    BillingZip = Cus.ZipCodePrevious,
                    BillingCountry = Cus.CountryPrevious,
                    BillingStreet = Cus.StreetPrevious,
                    InstallTypeName = InstallTypeName,
                    SmartPackageEquipmentServiceList = SmartPackageEquipmentServiceList,
                    UpfrontAddOnTotal = UpfrontAddOnTotal,
                    UpfrontAddOnTotalPromo = UpfrontAddOnTotalPromo,
                    IsUpfrontPromo = IsUpfrontPromo,
                    IsServicePromo = IsServicePromo,
                    MonthlyServiceFeeTotal = MonthlyServiceFeeTotal,
                    TotalMonthlyMonitoring = TotalMonthlyMonitoring,
                    NewSubTotal = NewSubTotal,
                    TotalDueAtSigning = TotalDueAtSigning,
                    PaymentDetails = PaymentDetails != null ? PaymentDetails : new PaymentInfo(),
                    DisplayName = Cus.DisplayName,
                    BillingAddress = CustomerAddress,
                    OwnerAddress = CustomerAddress,
                    InstallAddress = CustomerInstallAddress,
                    OwnerEmail = Cus.EmailAddress,
                    //OwnerPhone = Cus.PrimaryPhone,
                    OwnerPhone = Cus.CellNo,
                    OwnerName = Cus.FirstName + " " + Cus.LastName,
                    FirstName = Cus.FirstName,
                    LastName = Cus.LastName,
                    EmergencyContactList = _Util.Facade.EmergencyContactFacade.GetAllEmergencyContactByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId),
                    CompanyName = Com.CompanyName,
                    CompanySate = string.Format("{0}, {1} {2}", Com.City, Com.State, Com.ZipCode),
                    CompanyStreet = Com.Street,
                    CompanyWebsite = Com.Website,
                    SubscribedMonths = ContractTerm,
                    SubscribedMonthsInWord = ContractTermInWord,
                    RenewalMonths = Cus.RenewalTerm.HasValue ? Cus.RenewalTerm.Value : 0,
                    Password = Cus.Passcode,
                    DateOfTransaction = FixDate.UTCToClientTime(),
                    CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyEmailLogoByCompanyId(Com.CompanyId),
                    EquipmentList = CustomEquipmentList.ToList(),
                    ServiceList = CustomServiceList.ToList(),
                    ActivationFee = (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue) ? PackageCustomer.ActivationFee.Value : 0,
                    BusinessName = Cus.BusinessName,
                    MonthlyMonitoringFee = Cus.MonthlyMonitoringFee,
                    EffectiveDate = FixDate.UTCToClientTime(),
                    CustomerSignature = cusSignature,
                    CustomerSignatureStringDate = cussignDate,
                    CustomerSignatureStringDateVal = cussignDateVal,
                    //ContractCreatedDateVal = contractCreatedDateVal,
                    ContractCreatedDateVal = (CusExd.ContractStartDate != null && CusExd.ContractStartDate.HasValue) ? CusExd.ContractStartDate.Value.ToShortDateString() : DateTime.Now.ToShortDateString(),
                    CustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByCompanyIdAndCustomerId1(Com.CompanyId, Cus.CustomerId),
                    Subtotal = AgreementSubtotal,
                    Tax = AgreementTax,
                    TaxTotal = taxtotal,
                    Total = AgreementTotal,
                    EContractId = Cus.Id,
                    ListAgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(Cus.CustomerId),
                    SalesRepresentative = !string.IsNullOrEmpty(Cus.Soldby) ? _Util.Facade.EmployeeFacade.GetEmployeeNumByEmployeeId(new Guid(Cus.Soldby)).ToString() : "",
                    TotalPayments = TotalPayments,
                    SingleCustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetIpAndUserAgentByCustomerIdAndCompanyId(Com.CompanyId, Cus.CustomerId),
                    ListContactEmergency = string.Format(paymentoverviewheader, paymentoverviewdata),
                    ListPaymentInfo = string.Format(paymentoverviewheader, paymentoverviewdata),
                    DoingBusinessAs = Cus.DBA,
                    DispalyName = Cus.DisplayName,
                    CompanyPhone = Com.Phone,
                    FirstPage = firstpage.HasValue ? firstpage.Value : false,
                    Commercial = commercial.HasValue ? commercial.Value : false,
                    IsInvoice = isinvoice.HasValue ? isinvoice.Value : false,
                    InvoiceId = invoiceid,
                    InvoiceDiagram = invDiagram,
                    InvoiceList = invoiceList,
                    IsEstimator = isestimator.HasValue ? isestimator.Value : false,
                    createEst = createest,
                    userInfo = userInfo,
                    inv = invoice,
                    NotARBEnabledServiceList = NotARBEnabledServiceList.ToList(),
                    NotARBEnabledTotalPrice = NotARBEnabledTotalPrice,
                    ProratedAmout = cpb != null ? Math.Round(cpb.Amount, 2, MidpointRounding.AwayFromZero) : 0.0,
                    FinancedAmout = Cus != null && Cus.FinancedAmount != null ? Math.Round(Cus.FinancedAmount.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                    MonthlyFinanceRate = CusExd != null && CusExd.MonthlyFinanceRate != null ? Math.Round(CusExd.MonthlyFinanceRate.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                    AdvanceServiceFeeTotal = AdvanceServiceFeeTotal
                };
                if (agreementtempid != 0)
                {
                    if (cs != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(cs.Signature))
                    {
                        Model.CompanySignature = glbs.Value;
                        if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                        {
                            Model.CompanySignatureDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                        }
                    }
                }
                else if (firstpage == true || IsRecreate == true || commercial == true)
                {
                    if (glbs != null && !string.IsNullOrWhiteSpace(glbs.Value))
                    {
                        Model.CompanySignature = glbs.Value;
                        Model.CompanySignatureDate = cussignDate;
                    }
                }
                else
                {
                    if (Cus != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(Cus.Singature))
                    {
                        Model.CompanySignature = glbs.Value;
                        if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                        {
                            Model.CompanySignatureDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                        }
                    }
                }

                if (Model.EmergencyContactList == null)
                {
                    Model.EmergencyContactList = new List<EmergencyContact>();
                }
            }
            else
            {
                Model.CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyLogoForPDFByCompanyId(CurrentUser.CompanyId.Value);
            }

            //  return View(Model);
            Model.KazarLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/kazar_logo.PNG");
            ViewBag.CompanyId = Com.CompanyId.ToString();
            Model.CompanyId = Com.CompanyId.ToString();
            Model.CurrentCurrency = _Util.Facade.GlobalSettingsFacade.GetCurrentCurrencyByCompanyId(Com.CompanyId);
            string body = _Util.Facade.AgreementFacade.MakeSmartAgreementPdf(Model, agreementtempid.HasValue ? agreementtempid.Value : 0);
            ViewBag.Body = body;
            ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("SmartInstallationAgreement")
            {
                //FileName = "TestView.pdf",
                PageSize = Rotativa.Options.Size.A4,
                PageOrientation = Rotativa.Options.Orientation.Portrait,
                PageMargins = { Left = 1, Right = 1 },

            };
            byte[] applicationPDFData = actionPDF.BuildPdf(ControllerContext);
            Random rand = new Random();
            string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
            var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CurrentUser.CompanyId.Value).CompanyName.ReplaceSpecialChar();
            var pdftempFolderName = string.Format(filename, comname) + rand.Next().ToString() + leadid + "AgreementMail.pdf";
            string Serverfilename = FileHelper.GetFileFullPath(pdftempFolderName);
            FileHelper.SaveFile(applicationPDFData, Serverfilename);
            //var cusinfo = _Util.Facade.CustomerFacade.GetById(leadid.Value);
            bool result = false;
            string encryptedurl = DESEncryptionDecryption.EncryptPlainTextToCipherText(leadid + "#" + Cus.EmailAddress + "#" + CurrentUser.CompanyId.Value.ToString() + "#" + (IsRecreate.HasValue ? IsRecreate.Value : false) + "#" + (agreementtempid.HasValue ? agreementtempid.Value : 0) + "#" + (firstpage.HasValue ? firstpage.Value : false) + "#" + (ticketid.HasValue ? ticketid.Value : 0) + "#" + (isinvoice.HasValue ? isinvoice : false) + "#" + (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : "") + "#" + (isestimator.HasValue ? isestimator.Value : false) + "#" + (estid.HasValue ? estid.Value : 0) + "#" + (userid != Guid.Empty ? userid : new Guid()) + "#" + (commercial.HasValue ? commercial.Value : false));
            //string fullurl = string.Concat(AppConfig.SiteDomain, "/Leads-Agreement/", encryptedurl);
            string fullurl = string.Concat(AppConfig.SiteDomain, "/Public/LeadsAgreementDocument/?code=", encryptedurl);

            ShortUrl ShortUrl = _Util.Facade.ShortUrlFacade.GetSortUrlByUrl(fullurl, Cus.CustomerId);
            string shortUrl = string.Concat(AppConfig.ShortSiteDomain, "/shrt/", ShortUrl.Code);
            string message = "";
            string SMSText = "";
            string ReceiverNumber = "";
            if (Cus != null)
            {
                string EmailAddress = PrefferedEmail;
                if (ValidPrefferedEmail.Count == 0)
                {
                    EmailAddress = Cus.EmailAddress;
                }
                else
                {
                    EmailAddress = string.Join(";", ValidPrefferedEmail);
                }
                if (ValidPrefferedEmail.Count > 0 || (!string.IsNullOrWhiteSpace(Cus.EmailAddress) && Cus.EmailAddress.IsValidEmailAddress()))
                {
                    result = true;
                    LeadsAggrement la = new LeadsAggrement
                    {
                        CustomerNum = Cus.DisplayName,
                        ToEmail = EmailAddress,
                        //LeadsAggrementpdf = new Attachment(Serverfilename, MediaTypeNames.Application.Octet),
                        BodyLink = shortUrl,
                        CustomerId = Cus.CustomerId.ToString(),
                        EmployeeId = CurrentUser.UserId.ToString()
                    };
                    if (IsRecreate == true)
                    {
                        from = "Recreate Agreement";
                    }
                    else if (firstpage == true)
                    {
                        from = "First Page Agreement";
                    }
                    else if (commercial == true)
                    {
                        from = "Commercial Agreement";
                    }
                    else
                    {
                        from = "Smart Lead Agreement";
                    }
                    AgreementResult = _Util.Facade.MailFacade.EmailOnlyLeadsAggrement(la, CurrentUser.CompanyId.Value, from);
                    //if (AgreementResult)
                    //{
                    //#region Customer file
                    //if (IsRecreate == true)
                    //{
                    //    file = "Recreate_Agreement";
                    //    #region file save to customer file

                    //    CustomerFile cfs = new CustomerFile()
                    //    {
                    //        FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                    //        Filename = "/" + pdftempFolderName,
                    //        FileId = Guid.NewGuid(),
                    //        FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                    //        Uploadeddate = DateTime.Now.UTCCurrentTime(),
                    //        CustomerId = Cus.CustomerId,
                    //        CompanyId = CurrentUser.CompanyId.Value,
                    //        IsActive = true,
                    //        CreatedBy = CurrentUser.UserId,
                    //        CreatedDate = DateTime.Now.UTCCurrentTime(),
                    //        UpdatedBy = CurrentUser.UserId,
                    //        UpdatedDate = DateTime.Now.UTCCurrentTime()
                    //    };
                    //    _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                    //    logMessage = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                    //    base.AddUserActivityForCustomer(logMessage, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);

                    //    #endregion
                    //}
                    //else if (firstpage == true)
                    //{
                    //    file = "FirstPage_Agreement";

                    //    #region file save to customer file

                    //    CustomerFile cfs = new CustomerFile()
                    //    {
                    //        FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                    //        Filename = "/" + pdftempFolderName,
                    //        FileId = Guid.NewGuid(),
                    //        FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                    //        Uploadeddate = DateTime.Now.UTCCurrentTime(),
                    //        CustomerId = Cus.CustomerId,
                    //        CompanyId = CurrentUser.CompanyId.Value,
                    //        IsActive = true,
                    //        CreatedBy = CurrentUser.UserId,
                    //        CreatedDate = DateTime.Now.UTCCurrentTime(),
                    //        UpdatedBy = CurrentUser.UserId,
                    //        UpdatedDate = DateTime.Now.UTCCurrentTime()
                    //    };
                    //    _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                    //    string msglog = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                    //    base.AddUserActivityForCustomer(msglog, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                    //    #endregion

                    //}
                    //else if (commercial == true)
                    //{
                    //    file = "Commercial_Agreement";

                    //    #region file save to customer file

                    //    CustomerFile cfs = new CustomerFile()
                    //    {
                    //        FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                    //        Filename = "/" + pdftempFolderName,
                    //        FileId = Guid.NewGuid(),
                    //        FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                    //        Uploadeddate = DateTime.Now.UTCCurrentTime(),
                    //        CustomerId = Cus.CustomerId,
                    //        CompanyId = CurrentUser.CompanyId.Value,
                    //        IsActive = true,
                    //        CreatedBy = CurrentUser.UserId,
                    //        CreatedDate = DateTime.Now.UTCCurrentTime(),
                    //        UpdatedBy = CurrentUser.UserId,
                    //        UpdatedDate = DateTime.Now.UTCCurrentTime()
                    //    };
                    //    _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                    //    string msglog = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                    //    base.AddUserActivityForCustomer(msglog, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);

                    //    #endregion
                    //}
                    //else
                    //{

                    //    file = "Smart_Lead_Agreement";
                    //    #region file save to customer file

                    //    CustomerFile cfs = new CustomerFile()
                    //    {
                    //        FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                    //        Filename = "/" + pdftempFolderName,
                    //        FileId = Guid.NewGuid(),
                    //        FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                    //        Uploadeddate = DateTime.Now.UTCCurrentTime(),
                    //        CustomerId = Cus.CustomerId,
                    //        CompanyId = CurrentUser.CompanyId.Value,
                    //        IsActive = true,
                    //        CreatedBy = CurrentUser.UserId,
                    //        CreatedDate = DateTime.Now.UTCCurrentTime(),
                    //        UpdatedBy = CurrentUser.UserId,
                    //        UpdatedDate = DateTime.Now.UTCCurrentTime()
                    //    };
                    //    _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                    //    string msglog = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                    //    base.AddUserActivityForCustomer(msglog, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);

                    //    #endregion
                    //}


                    //}
                    //#endregion
                    message += "Agreement sent to " + EmailAddress;
                    Customer cus2 = _Util.Facade.CustomerFacade.GetCustomerById(Cus.Id);
                    cus2.IsAgreementSend = true;
                    cus2.AgreementEmail = PrefferedEmail;
                    cus2.AgreementPhoneNo = PrefferedNO;
                    if (firstpage == true || IsRecreate == true)
                    {
                        cus2.Singature = "";
                        cus2.IsContractSigned = false;
                        var objrecreate = _Util.Facade.CustomerSignatureFacade.GetRecreateCustomerSignatureByCustomerId(cus2.CustomerId);
                        if (objrecreate != null)
                        {
                            objrecreate.Signature = "";
                            _Util.Facade.CustomerSignatureFacade.UpdateCustomerSignature(objrecreate);
                        }
                        var objfirstpage = _Util.Facade.CustomerSignatureFacade.GetFirstPageCustomerSignatureByCustomerId(cus2.CustomerId);
                        if (objfirstpage != null)
                        {
                            objfirstpage.Signature = "";
                            _Util.Facade.CustomerSignatureFacade.UpdateCustomerSignature(objfirstpage);
                        }
                    }

                    _Util.Facade.CustomerFacade.UpdateCustomer(cus2);
                    if (commercial == true)
                    {
                        var objcommercial = _Util.Facade.CustomerSignatureFacade.GetCommercialCustomerSignatureByCustomerId(cus2.CustomerId);
                        if (objcommercial != null)
                        {
                            objcommercial.Signature = "";
                            _Util.Facade.CustomerSignatureFacade.UpdateCustomerSignature(objcommercial);
                        }
                    }
                    #region Agreement History
                    var cusAgrHistory = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementHistory(Cus.CustomerId, LabelHelper.CustomerAgreementHistory.AgreementSend);
                    if (cusAgrHistory == null)
                    {
                        CustomerAgreement cusAgrModel = new CustomerAgreement()
                        {
                            CompanyId = Com.CompanyId,
                            CustomerId = Cus.CustomerId,
                            IP = AppConfig.GetIP,
                            UserAgent = AppConfig.GetUserAgent,
                            Type = LabelHelper.CustomerAgreementHistory.AgreementSend,
                            AddedDate = DateTime.UtcNow
                        };
                        _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(cusAgrModel);
                    }
                    #endregion
                }
                else
                {
                    result = false;
                    message = "Invalid email address.";
                }
                #region Send SMS Agreeemnt
                List<string> ReceiverNumberList = new List<string>();
                #region ReceiverNumber Setup
                if (!string.IsNullOrWhiteSpace(PrefferedNO))
                {
                    ReceiverNumber = PrefferedNO.Replace("-", "");
                }
                else if (!string.IsNullOrWhiteSpace(Cus.SecondaryPhone))
                {
                    ReceiverNumber = Cus.SecondaryPhone.Replace("-", "");
                }
                else
                {
                    return Json(new { result = false, message = message + " and no phone number available." });
                }
                ReceiverNumberList.Add(ReceiverNumber);
                #endregion
                SMSAgreement smsAgreement = new SMSAgreement();

                smsAgreement.ShortUrl = shortUrl;
                smsAgreement.CompanyName = CurrentUser.CompanyName;
                string phonenumber = string.Join(";", ReceiverNumberList);

                if (_Util.Facade.SMSFacade.SendAgrementSMS(smsAgreement, CurrentUser.UserId, CurrentUser.CompanyId.Value, ReceiverNumberList, false, string.Concat(CurrentUser.FirstName, " ", CurrentUser.LastName)) == true)
                {
                    #region insert lead correspondence
                    if (IsRecreate == true)
                    {
                        LeadCorrespondence LeadCorrespondence = new LeadCorrespondence()
                        {
                            CompanyId = CurrentUser.CompanyId.Value,
                            CustomerId = Cus.CustomerId,
                            Type = "SMS",
                            ToMobileNo = phonenumber,
                            BodyContent = "Recreate  Agreement",
                            SentDate = DateTime.Now.UTCCurrentTime(),
                            LastUpdatedDate = DateTime.Now,
                            SentBy = CurrentUser.UserId

                        };
                        _Util.Facade.LeadCorrespondenceFacade.InsertCorrespondence(LeadCorrespondence);
                        message += " and " + phonenumber;

                    }
                    else if (firstpage == true)
                    {
                        LeadCorrespondence LeadCorrespondence = new LeadCorrespondence()
                        {
                            CompanyId = CurrentUser.CompanyId.Value,
                            CustomerId = Cus.CustomerId,
                            Type = "SMS",
                            ToMobileNo = phonenumber,
                            BodyContent = "First Page Agreement",
                            SentDate = DateTime.Now.UTCCurrentTime(),
                            LastUpdatedDate = DateTime.Now,
                            SentBy = CurrentUser.UserId
                        };
                        _Util.Facade.LeadCorrespondenceFacade.InsertCorrespondence(LeadCorrespondence);
                        message += " and " + phonenumber;

                    }
                    else if (commercial == true)
                    {
                        LeadCorrespondence LeadCorrespondence = new LeadCorrespondence()
                        {
                            CompanyId = CurrentUser.CompanyId.Value,
                            CustomerId = Cus.CustomerId,
                            Type = "SMS",
                            ToMobileNo = phonenumber,
                            BodyContent = "Commercial Agreement",
                            SentDate = DateTime.Now.UTCCurrentTime(),
                            LastUpdatedDate = DateTime.Now,
                            SentBy = CurrentUser.UserId
                        };
                        _Util.Facade.LeadCorrespondenceFacade.InsertCorrespondence(LeadCorrespondence);
                        message += " and " + phonenumber;

                    }
                    else
                    {
                        LeadCorrespondence LeadCorrespondence = new LeadCorrespondence()
                        {
                            CompanyId = CurrentUser.CompanyId.Value,
                            CustomerId = Cus.CustomerId,
                            Type = "SMS",
                            ToMobileNo = phonenumber,
                            BodyContent = "Smart Lead Agreement",
                            SentDate = DateTime.Now.UTCCurrentTime(),
                            LastUpdatedDate = DateTime.Now,
                            SentBy = CurrentUser.UserId
                        };
                        _Util.Facade.LeadCorrespondenceFacade.InsertCorrespondence(LeadCorrespondence);
                        message += " and " + phonenumber;
                    }
                    #endregion
                    #region Customer file
                    if (IsRecreate == true)
                    {
                        file = "Recreate_Agreement";
                        #region file save to customer file

                        CustomerFile cfs = new CustomerFile()
                        {
                            FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail_SMS" + ".pdf",
                            Filename = "/" + pdftempFolderName,
                            FileId = Guid.NewGuid(),
                            FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                            Uploadeddate = DateTime.Now.UTCCurrentTime(),
                            CustomerId = Cus.CustomerId,
                            CompanyId = CurrentUser.CompanyId.Value,
                            IsActive = true,
                            CreatedBy = CurrentUser.UserId,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            UpdatedBy = CurrentUser.UserId,
                            UpdatedDate = DateTime.Now.UTCCurrentTime(),
                            WMStatus = LabelHelper.WatermarkStatus.Pending,
                            AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                        };
                        _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                        logMessage = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                        base.AddUserActivityForCustomer(logMessage, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);

                        #endregion
                    }
                    else if (firstpage == true)
                    {
                        file = "FirstPage_Agreement";
                        #region file save to customer file

                        CustomerFile cfs = new CustomerFile()
                        {
                            FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail_SMS" + ".pdf",
                            Filename = "/" + pdftempFolderName,
                            FileId = Guid.NewGuid(),
                            FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                            Uploadeddate = DateTime.Now.UTCCurrentTime(),
                            CustomerId = Cus.CustomerId,
                            CompanyId = CurrentUser.CompanyId.Value,
                            IsActive = true,
                            CreatedBy = CurrentUser.UserId,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            UpdatedBy = CurrentUser.UserId,
                            UpdatedDate = DateTime.Now.UTCCurrentTime(),
                            WMStatus = LabelHelper.WatermarkStatus.Pending,
                            AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                        };
                        _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                        string msglog = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                        base.AddUserActivityForCustomer(msglog, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                        #endregion

                    }
                    else if (CusExd.ContractType == "Commercial")
                    {
                        file = "Commercial_Agreement";
                        #region file save to customer file
                        CustomerFile cfs = new CustomerFile()
                        {
                            FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail_SMS" + ".pdf",
                            Filename = "/" + pdftempFolderName,
                            FileId = Guid.NewGuid(),
                            FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                            Uploadeddate = DateTime.Now.UTCCurrentTime(),
                            CustomerId = Cus.CustomerId,
                            CompanyId = CurrentUser.CompanyId.Value,
                            IsActive = true,
                            CreatedBy = CurrentUser.UserId,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            UpdatedBy = CurrentUser.UserId,
                            UpdatedDate = DateTime.Now.UTCCurrentTime(),
                            WMStatus = LabelHelper.WatermarkStatus.Pending,
                            AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                        };
                        _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                        string msglog = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                        base.AddUserActivityForCustomer(msglog, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                        #endregion
                    }
                    else if (CusExd.ContractType == "CommercialFire")
                    {
                        file = "Commercial_Fire_Agreement";
                        #region file save to customer file
                        CustomerFile cfs = new CustomerFile()
                        {
                            FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail_SMS" + ".pdf",
                            Filename = "/" + pdftempFolderName,
                            FileId = Guid.NewGuid(),
                            FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                            Uploadeddate = DateTime.Now.UTCCurrentTime(),
                            CustomerId = Cus.CustomerId,
                            CompanyId = CurrentUser.CompanyId.Value,
                            IsActive = true,
                            CreatedBy = CurrentUser.UserId,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            UpdatedBy = CurrentUser.UserId,
                            UpdatedDate = DateTime.Now.UTCCurrentTime(),
                            WMStatus = LabelHelper.WatermarkStatus.Pending,
                            AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                        };
                        _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                        string msglog = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                        base.AddUserActivityForCustomer(msglog, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                        #endregion                   
                    }
                    else
                    {

                        file = "Smart_Lead_Agreement";
                        #region file save to customer file

                        CustomerFile cfs = new CustomerFile()
                        {
                            FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail_SMS" + ".pdf",
                            Filename = "/" + pdftempFolderName,
                            FileId = Guid.NewGuid(),
                            FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                            Uploadeddate = DateTime.Now.UTCCurrentTime(),
                            CustomerId = Cus.CustomerId,
                            CompanyId = CurrentUser.CompanyId.Value,
                            IsActive = true,
                            CreatedBy = CurrentUser.UserId,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            UpdatedBy = CurrentUser.UserId,
                            UpdatedDate = DateTime.Now.UTCCurrentTime()
                        };
                        _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                        string msglog = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                        base.AddUserActivityForCustomer(msglog, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);

                        #endregion
                    }
                    #endregion

                }
                #endregion
            }
            #endregion
            return Json(new { result = result, message = message });
        }


        public JsonResult SmartLeadConvertedToCustomerPDFMailAndSMS(int? leadid, string PrefferedEmail, string PrefferedNO, bool? IsRecreate, int? agreementtempid, bool? firstpage, int? ticketid, bool? isinvoice, string invoiceid, bool? isestimator, int? estid, Guid? userid, bool? commercial)
        {
            WebClient webClient;
            byte[] fileBytes1;
            string Temp_FileName;
            #region Send Mail Agreement
            List<string> ValidPrefferedEmail = new List<string>();
            if (!string.IsNullOrWhiteSpace(PrefferedEmail))
            {
                string[] Emailadd = PrefferedEmail.Split(';');
                if (Emailadd != null)
                {
                    foreach (var item in Emailadd)
                    {
                        if (item.IsValidEmailAddress())
                        {
                            ValidPrefferedEmail.Add(item);
                        }
                    }
                }
                if (ValidPrefferedEmail.Count == 0)
                {
                    return Json(new { result = false, message = "Invalid email address." });
                }

            }
            DateTime FixDate = DateTime.Now.UTCCurrentTime();
            //int idlead = Convert.ToInt32(Lid);
            InstallationAgreementModel Model = new InstallationAgreementModel();
            Model.EmergencyContactList = new List<EmergencyContact>();
            Model.ListAgreementAnswer = new List<AgreementAnswer>();
            Model.EquipmentList = new List<Equipment>();
            Model.CustomerAgreement = new List<CustomerAgreement>();
            Model.SingleCustomerAgreement = new CustomerAgreement();
            var taxtotal = 0.0;
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool AgreementResult = false;
            string file = "";
            string from = "";
            string logMessage = "";
            //var ActivationfeeValue = 0.0;
            //var IsActivationFee = _Util.Facade.ActivationFeeFacade.GetActivationFeeByCompanyId(CurrentUser.CompanyId.Value);
            //if (IsActivationFee != null)
            //{
            //    ActivationfeeValue = IsActivationFee.Fee;
            //}
            Customer Cus = new Customer();
            CustomerExtended CusExd = new CustomerExtended();
            Company Com = new Company();
            if (leadid.HasValue)
            {
                if (!_Util.Facade.CustomerFacade.CustomerIsInCompany(leadid.Value, CurrentUser.CompanyId.Value))
                {
                    return null;
                }
                Cus = _Util.Facade.CustomerFacade.GetCustomersById(leadid.Value);
                if (Cus != null)
                {
                    CusExd = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(Cus.CustomerId);
                }
                Com = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CurrentUser.CompanyId.Value);

                string ContractTerm = "";
                string ContractTermInWord = "";
                if (!string.IsNullOrWhiteSpace(Cus.ContractTeam) && Cus.ContractTeam != "-1")
                {
                    if (Cus.ContractTeam.ToLower() == "month to month")
                    {
                        ContractTerm = Cus.ContractTeam;
                        ContractTermInWord = Cus.ContractTeam;
                    }
                    else
                    {
                        ContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))).ToString();
                        ContractTermInWord = NumberToWords((Convert.ToInt32(Math.Round(Convert.ToDouble(Cus.ContractTeam) * 12))));
                    }

                }

                #region Sold by change
                //Person who sends the mail to Customer will be counted as sold by
                //Cus.Soldby = CurrentUser.UserId.ToString();
                _Util.Facade.CustomerFacade.UpdateCustomer(Cus);
                #endregion

                var UpfrontAddOnTotal = 0.0;
                var UpfrontAddOnTotalPromo = 0.0;
                bool IsUpfrontPromo = false;
                bool IsServicePromo = false;
                var MonthlyServiceFeeTotal = 0.0;
                var TotalMonthlyMonitoring = 0.0;
                var NewSubTotal = 0.0;
                var TotalDueAtSigning = 0.0;
                var EquipmentTotalPrice = 0.0;
                var ServiceTotalPrice = 0.0;
                var AgreementSubtotal = 0.0;
                var AgreementTotal = 0.0;
                var AgreementTax = 0.0;
                var NotARBEnabledTotalPrice = 0.0;
                string InstallTypeName = "";
                bool IsNonConfirming = false;
                var NonConfirmingFee = 0.0;
                var AdvanceServiceFeeTotal = 0.0;
                string contractCreatedDateVal = "";
                if (CusExd.ContractCreatedDate != null)
                {
                    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.UTCToClientTime().ToString("M/d/yy");
                }
                else
                {
                    CusExd.ContractCreatedDate = DateTime.UtcNow;
                    _Util.Facade.CustomerFacade.UpdateCustomerExtended(CusExd);
                    contractCreatedDateVal = CusExd.ContractCreatedDate.Value.UTCToClientTime().ToString("M/d/yy");
                }
                if (Cus.CreditScoreValue == null)
                {
                    Cus.CreditScoreValue = 0;
                }
                var PackageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(Cus.CustomerId);
                //if (PackageCustomer != null && PackageCustomer.NonConforming && PackageCustomer.NonConformingFee > 0 && (Cus.CreditScoreValue < PackageCustomer.MinCredit || Cus.CreditScoreValue > PackageCustomer.MaxCredit))
                if (PackageCustomer != null && PackageCustomer.NonConformingFee > 0 && (Cus.CreditScoreValue <= PackageCustomer.MinCredit || Cus.CreditScoreValue >= PackageCustomer.MaxCredit))
                {
                    IsNonConfirming = true;
                    NonConfirmingFee = PackageCustomer.NonConformingFee.Value;
                }
                var SmartPackageEquipmentServiceList = new List<SmartPackageEquipmentService>();
                var GetCityTaxList = _Util.Facade.CompanyBranchFacade.GetCityTaxRate(Cus.CustomerId, Com.CompanyId);
                if (GetCityTaxList.Count > 0)
                {
                    foreach (var item1 in GetCityTaxList)
                    {
                        AgreementTax = item1.Rate;
                    }
                }
                else
                {
                    Guid CustomerId = new Guid();
                    if (Cus != null)
                    {
                        CustomerId = Cus.CustomerId;
                    }

                    var GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(Com.CompanyId, CustomerId);
                    if (GetSalesTax != null)
                    {
                        AgreementTax = Convert.ToDouble(GetSalesTax.Value);
                    }
                }
                #region Invoice
                Invoice invoice = new Invoice();
                CustomerProratedBill cpb = new CustomerProratedBill();
                cpb = _Util.Facade.InvoiceFacade.GetCusProratedBillByCustomerId(Cus.CustomerId);
                List<InvoiceDetail> invoiceList = new List<InvoiceDetail>();
                string invDiagram = "";
                if (!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true)
                {
                    invoice = _Util.Facade.InvoiceFacade.GetByInvoiceId(invoiceid);
                    if (invoice != null)
                    {
                        invDiagram = invoice.InvoiceContractDiagram;
                        invoiceList = _Util.Facade.InvoiceFacade.GetInvoiceDetialsListByInvoiceId(invoice.InvoiceId);
                    }
                }
                #endregion

                #region Estimator
                Employee userInfo = new Employee();
                if (userid != Guid.Empty)
                {
                    userInfo = _Util.Facade.EmployeeFacade.GetEmployeeByEmployeeId(userid.Value);
                }
                CreateEstimator createest = new CreateEstimator();
                if (isestimator.Value && estid > 0)
                {
                    CreateEstimator ca = new CreateEstimator();
                    ca.EstimatorSetting = new EstimatorSetting();
                    ca.Company = Com;

                    ca.Estimator = _Util.Facade.EstimatorFacade.GetById(estid.Value);
                    ca._EstimatorPDFFilter = _Util.Facade.EstimatorFacade.GetEstimatorPdfFilterByComIdCusIdUserId(Com.CompanyId, userid.Value, ca.Estimator.CustomerId);
                    ca.estimatorDetails = _Util.Facade.EstimatorFacade.GetEstimatorDetailListByEstimatorId(ca.Estimator.EstimatorId);
                    ca.estimatorServices = _Util.Facade.EstimatorFacade.GetEstimatorServicesByEstimatorId(ca.Estimator.EstimatorId);
                    if (ca.Estimator == null || ca.Estimator.CompanyId != Com.CompanyId)
                    {
                        return null;
                    }
                    if ((ca.estimatorDetails == null || ca.estimatorDetails.Count() == 0) && (ca.estimatorServices == null || ca.estimatorServices.Count() == 0))
                    {
                        return null;
                    }
                    Customer tempCUstomer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(ca.Estimator.CustomerId);
                    if (tempCUstomer == null)
                    {
                        return null;
                    }

                    CreateEstimator processedModel = GetEstimatorModelById(ca.Estimator, ca.estimatorDetails, ca.estimatorServices, Com, tempCUstomer, ca._EstimatorPDFFilter, Com.CompanyId);
                    Estimator estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(ca.Estimator.EstimatorId);
                    if (estimator != null)
                    {
                        ViewBag.CoverLetter = estimator.CoverLetter;
                        processedModel.Estimator.CoverLetter = estimator.CoverLetter;
                        processedModel.Estimator.CoverLetterFile = estimator.CoverLetterFile;
                        processedModel.Estimator.ServicePlanType = estimator.ServicePlanType;
                        processedModel.Estimator.ServicePlanRate = estimator.ServicePlanRate;
                        processedModel.Estimator.ServicePlanAmount = estimator.ServicePlanAmount;
                        processedModel.Estimator.ServiceTaxAmount = estimator.ServiceTaxAmount;
                        processedModel.Estimator.ServiceTotalAmount = estimator.ServiceTotalAmount;
                        processedModel.Estimator.ShowServicePlan = estimator.ShowServicePlan;
                        processedModel.Estimator.ShowService = estimator.ShowService;
                        processedModel.Estimator.ServicePlanTypeName = "Service Plan";

                        SelectListItem selectListItem = _Util.Facade.LookupFacade.GetDropdownsByKey("ServicePlans").Where(x => x.Value == estimator.ServicePlanType).FirstOrDefault();
                        if (selectListItem != null)
                        {
                            processedModel.Estimator.ServicePlanTypeName = selectListItem.Text;
                        }

                    }
                    if (ca.estimatorDetails != null)
                    {
                        foreach (var item in ca.estimatorDetails)
                        {
                            Manufacturer Manufacturer = _Util.Facade.EquipmentFacade.GetManufacturerByManufacturerId(item.ManufacturerId);
                            if (Manufacturer != null)
                            {
                                item.Manufacturer = Manufacturer.Name;
                            }
                            item.CreatedDate = DateTime.Now.UTCCurrentTime();
                            ca.SubTotal = ca.SubTotal + (item.TotalPrice.HasValue ? item.TotalPrice.Value : 0);
                            item.EquipmentFile = _Util.Facade.EquipmentFileFacade.GetEquipmentFilesByEquipmentIdAndFileType(item.EquipmentId, LabelHelper.EquipmentFileType.ProfilePicture).FirstOrDefault();
                            if (item.EquipmentFile == null)
                            {
                                item.EquipmentFile = new EquipmentFile();
                            }
                        }
                    }
                    if (ca.estimatorServices != null)
                    {
                        foreach (var item in ca.estimatorServices)
                        {
                            processedModel.ServiceSubTotal += ca.ServiceSubTotal + item.Amount;
                        }
                        processedModel.TotalServiceAmount = processedModel.ServiceSubTotal + ca.ServiceTax;
                    }
                    createest = processedModel;
                    createest.eSecurityLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/eSecurity_logo.png");
                    createest.specializedLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/specialized_property_management_logo.png");
                    string EstimatorContractTerm = "";
                    if (!string.IsNullOrWhiteSpace(createest.Estimator.ContractTerm) && createest.Estimator.ContractTerm != "-1")
                    {
                        if (createest.Estimator.ContractTerm.ToLower() == "month to month")
                        {
                            EstimatorContractTerm = createest.Estimator.ContractTerm;
                        }
                        else
                        {
                            EstimatorContractTerm = (Convert.ToInt32(Math.Round(Convert.ToDouble(createest.Estimator.ContractTerm) * 12))).ToString() + " month";
                        }

                    }
                    createest.EstimatorContractTerm = EstimatorContractTerm;
                }
                #endregion
                var CustomEquipmentList = new List<Equipment>();
                if (firstpage == true || IsRecreate == true)
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }
                else
                {
                    CustomEquipmentList = _Util.Facade.EquipmentFacade.GetSmartEquipmentListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (CustomEquipmentList.Count > 0)
                    {
                        foreach (var item in CustomEquipmentList)
                        {
                            EquipmentTotalPrice += item.Total;
                            UpfrontAddOnTotal += item.Total;
                        }
                    }
                }
                var CustomServiceList = new List<Equipment>();
                if (firstpage == true || IsRecreate == true)
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (CustomServiceList.Count > 0)
                    {
                        foreach (var item in CustomServiceList)
                        {
                            EquipmentTotalPrice += item.Total;
                            ServiceTotalPrice += item.Total;
                            MonthlyServiceFeeTotal += item.Total;
                        }
                    }
                }
                else
                {
                    CustomServiceList = _Util.Facade.EquipmentFacade.GetSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (CustomServiceList.Count > 0)
                    {
                        foreach (var item in CustomServiceList)
                        {
                            EquipmentTotalPrice += item.Total;
                            ServiceTotalPrice += item.Total;
                            MonthlyServiceFeeTotal += item.Total;
                        }
                    }
                }
                var NotARBEnabledServiceList = new List<Equipment>();
                if (firstpage == true || IsRecreate == true || commercial == true)
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId, (firstpage.HasValue ? firstpage.Value : false), (ticketid.HasValue ? ticketid.Value : 0));
                    if (NotARBEnabledServiceList.Count > 0)
                    {
                        foreach (var item in NotARBEnabledServiceList)
                        {
                            NotARBEnabledTotalPrice += item.Total;
                        }
                    }
                }
                else
                {
                    NotARBEnabledServiceList = _Util.Facade.EquipmentFacade.GetNotARBEnabledSmartServiceListFromService(Cus.CustomerId, Com.CompanyId);
                    if (NotARBEnabledServiceList.Count > 0)
                    {
                        foreach (var item in NotARBEnabledServiceList)
                        {
                            NotARBEnabledTotalPrice += item.Total;
                        }
                    }
                }
                #region Advance Monitoring Service Month

                PaymentInfoCustomer paycus = new PaymentInfoCustomer();
                paycus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayForService(Cus.CustomerId);
                int ForMonth = 1;
                if (paycus != null && paycus.ForMonths.HasValue)
                {
                    ForMonth = paycus.ForMonths.Value;
                }
                if (ForMonth > 1)
                {
                    AdvanceServiceFeeTotal = MonthlyServiceFeeTotal * (ForMonth - 1);

                }
                #endregion
                Cus.MonthlyMonitoringFee = Convert.ToString(ServiceTotalPrice);
                TotalMonthlyMonitoring = MonthlyServiceFeeTotal;
                NewSubTotal = TotalMonthlyMonitoring + UpfrontAddOnTotal;
                if (CustomServiceList.Count > 0 || CustomEquipmentList.Count > 0)
                {
                    if (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue)
                    {
                        AgreementSubtotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                        NewSubTotal = PackageCustomer.ActivationFee.Value + EquipmentTotalPrice;
                    }
                    else
                    {
                        AgreementSubtotal = EquipmentTotalPrice;
                        NewSubTotal = EquipmentTotalPrice;
                    }
                }
                if (IsNonConfirming && NonConfirmingFee > 0)
                {
                    AgreementSubtotal = AgreementSubtotal + NonConfirmingFee;
                    NewSubTotal = NewSubTotal + NonConfirmingFee;
                }
                if (AgreementTax != 0.0)
                {
                    taxtotal = (AgreementSubtotal / 100) * AgreementTax;
                    Model.TaxTotal = taxtotal;
                    AgreementTotal = AgreementSubtotal + taxtotal;
                    TotalDueAtSigning = NewSubTotal + taxtotal;
                }
                else
                {
                    Model.TaxTotal = 0.0;
                    AgreementTotal = AgreementSubtotal;
                    TotalDueAtSigning = NewSubTotal;
                }
                var PackageCustomerDetails = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerIdandCompanyId(Cus.CustomerId, CurrentUser.CompanyId.Value);
                if (PackageCustomerDetails != null)
                {
                    InstallTypeName = _Util.Facade.PackageFacade.SmartInstallTypeNameByInstallTypeId(Convert.ToInt32(PackageCustomerDetails.SmartInstallTypeId));
                    if (string.IsNullOrWhiteSpace(InstallTypeName))
                    {
                        InstallTypeName = "New Install";
                    }
                    SmartPackageEquipmentServiceList = _Util.Facade.PackageFacade.GetAllSmartPackageIncludeEquipmentByPackageIdAndCompanyId(PackageCustomerDetails.PackageId, CurrentUser.CompanyId.Value);
                }
                var PaymentDetails = _Util.Facade.PaymentInfoFacade.GetAllPaymentInfoByCustomerIdAndCompanyId(Cus.CustomerId, CurrentUser.CompanyId.Value).Where(m => m.PayFor == "First Month").FirstOrDefault();
                var agreementPayment = _Util.Facade.PaymentInfoFacade.GetLeadAgreementPaymentInfoByCustomerId(Cus.CustomerId);
                string paymentoverviewheader = "";
                string paymentoverviewdata = "";
                if (agreementPayment != null && agreementPayment.Count > 0)
                {
                    paymentoverviewheader = "<table style='border-collapse:collapse; width:100%; font-family:Arial; table-layout:fixed; font-size:13px;'>{0}</table>";
                    foreach (var pay in agreementPayment)
                    {
                        var sppay = pay.Type.Split('_');
                        if (sppay.Length > 0)
                        {
                            if (sppay[0] == "CC")
                            {
                                var cardNumber = pay.CardNumber.Replace('-', ' ').Replace(" ", "");
                                if (cardNumber.Length == 16)
                                {
                                    paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(12, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                                }
                                else
                                {
                                    paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Card Number: " + string.Concat("".PadLeft(11, '*'), cardNumber.Substring(cardNumber.Length - 4)) + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Expire Date: " + pay.CardExpireDate + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Security Code: " + string.Concat("".PadLeft(2, '*'), pay.CardSecurityCode.Substring(pay.CardSecurityCode.Length - 1)) + @"</td>
                                                        </tr>";
                                }
                            }
                            else if (sppay[0] == "ACH")
                            {
                                paymentoverviewdata += @"<tr>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Name: " + pay.AccountName + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account Type: " + pay.BankAccountType + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Routing No: " + pay.RoutingNo + @"</td>
                                                        <td style='border: 2px solid #000; font-weight:bold; padding-left:10px;'>Account No: " + string.Concat("".PadLeft(pay.AcountNo.Length - 4, '*'), pay.AcountNo.Substring(pay.AcountNo.Length - 4)) + @"</td>
                                                        </tr>";
                            }
                        }
                    }
                }
                var CustomerAddress = AddressHelper.MakeAddress(Cus);
                var CustomerInstallAddress = AddressHelper.MakeInstallAddress(Cus);
                CustomerSignature cs = new CustomerSignature();
                GlobalSetting glbs = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CompanySignature");
                string cusSignature = "";
                string cussignDate = "";
                DateTime cussignDateVal = new DateTime();
                if (firstpage.HasValue && firstpage.Value == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "First Page");
                }
                else if (commercial.HasValue && commercial.Value == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Commercial");
                }
                else if (isinvoice == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimate");
                }
                else if (isestimator.HasValue && isestimator.Value == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Estimator");
                }
                else if (IsRecreate == true)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Recreate");
                }
                else if (Cus != null && agreementtempid.HasValue && agreementtempid.Value > 0)
                {
                    cs = _Util.Facade.CustomerSignatureFacade.GetCustomerSignatureByReferenceIdcharCustomerIdType(Cus.CustomerId, agreementtempid.ToString(), "Agreement File");
                }
                else
                {
                    cusSignature = Cus.Singature;
                    if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                    {
                        cussignDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                        cussignDateVal = Cus.CustomerSignatureDate.Value.UTCToClientTime();
                    }

                }
                if (cs != null && (agreementtempid != 0 || (firstpage.HasValue && firstpage.Value == true) || (IsRecreate == true) || (commercial.HasValue && commercial.Value == true)))
                {
                    cusSignature = cs.Signature;
                    if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                    {
                        cussignDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                        cussignDateVal = cs.CreatedDate.UTCToClientTime();
                    }

                }
                Double MMR = 1;
                Double CTerm = 0;

                double.TryParse(Cus.MonthlyMonitoringFee, out MMR);
                double.TryParse(ContractTerm, out CTerm);
                //(!string.IsNullOrWhiteSpace() ? Convert.ToDouble(Cus.MonthlyMonitoringFee) : 1) * Convert.ToDouble(ContractTerm);
                Double TotalPayments = MMR * CTerm;
                #region For Promo Pyment Method
                List<PaymentInfoCustomer> paycusList = new List<PaymentInfoCustomer>();
                PaymentProfileCustomer paymentProfile = new PaymentProfileCustomer();
                paycusList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(Cus.CustomerId);
                if (paycusList != null && paycusList.Count > 0)
                {
                    foreach (var item in paycusList)
                    {
                        paymentProfile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(item.PaymentInfoId);
                        if (paymentProfile != null && paymentProfile.Type == LabelHelper.PaymentMethod.Promo)
                        {
                            if (item.Payfor == "Activation Fee")
                            {
                                NonConfirmingFee = 0.0;

                                if (PackageCustomer != null)
                                {
                                    PackageCustomer.ActivationFee = 0.0;
                                }
                                NewSubTotal = NewSubTotal - (PackageCustomer.AdditionFee + NonConfirmingFee);
                            }
                            else if (item.Payfor == "Equipment")
                            {
                                IsUpfrontPromo = true;
                                NewSubTotal = NewSubTotal - UpfrontAddOnTotal;
                            }
                            else if (item.Payfor == "Service")
                            {
                                NewSubTotal = NewSubTotal - TotalMonthlyMonitoring;
                                IsServicePromo = true;

                            }


                        }

                    }

                }
                #endregion

                #region LeadSource
                string LeadSource = "";
                Lookup leadsource = _Util.Facade.LookupFacade.GetLookupByKeyAndValueAndCompanyId("LeadSource", Cus.LeadSource, Com.CompanyId);
                LeadSource = leadsource != null && !string.IsNullOrWhiteSpace(leadsource.DisplayText) && leadsource.DataValue != "-1" ? leadsource.DisplayText : "";
                #endregion

                Model = new InstallationAgreementModel()
                {
                    CSIDNumber = Cus.Id,
                    LeadSource = LeadSource,
                    IsNonConfirming = IsNonConfirming,
                    NonConfirmingFee = NonConfirmingFee,
                    InstallDate = Cus.InstallDate != null ? Convert.ToDateTime(Cus.InstallDate).ToShortDateString() : "",
                    OriginalContactDate = (Cus.OriginalContactDate != null && Cus.OriginalContactDate.HasValue) ? Cus.OriginalContactDate.Value : new DateTime(),
                    AccountType = Cus.Type,
                    ContractType = CusExd != null && !string.IsNullOrWhiteSpace(CusExd.ContractType) ? CusExd.ContractType : "",
                    Referredby = Cus.ReferringCustomer != Guid.Empty ? _Util.Facade.CustomerFacade.GetCustomerNameById(Cus.ReferringCustomer) : "",
                    SocialSecurityNumber = Cus.SSN,
                    //Owner2ndPhone = Cus.SecondaryPhone,
                    Owner2ndPhone = Cus.PrimaryPhone,
                    InitialStreet = Cus.Street,
                    InitialCity = Cus.City,
                    InitialCountry = Cus.County,
                    InitialState = Cus.State,
                    InitialZip = Cus.ZipCode,
                    InitialApt = Cus.Appartment,
                    BillingCity = Cus.CityPrevious,
                    BillingState = Cus.StatePrevious,
                    BillingZip = Cus.ZipCodePrevious,
                    BillingCountry = Cus.CountryPrevious,
                    BillingStreet = Cus.StreetPrevious,
                    InstallTypeName = InstallTypeName,
                    SmartPackageEquipmentServiceList = SmartPackageEquipmentServiceList,
                    UpfrontAddOnTotal = UpfrontAddOnTotal,
                    UpfrontAddOnTotalPromo = UpfrontAddOnTotalPromo,
                    IsUpfrontPromo = IsUpfrontPromo,
                    IsServicePromo = IsServicePromo,
                    MonthlyServiceFeeTotal = MonthlyServiceFeeTotal,
                    TotalMonthlyMonitoring = TotalMonthlyMonitoring,
                    NewSubTotal = NewSubTotal,
                    TotalDueAtSigning = TotalDueAtSigning,
                    PaymentDetails = PaymentDetails != null ? PaymentDetails : new PaymentInfo(),
                    DisplayName = Cus.DisplayName,
                    BillingAddress = CustomerAddress,
                    OwnerAddress = CustomerAddress,
                    InstallAddress = CustomerInstallAddress,
                    OwnerEmail = Cus.EmailAddress,
                    //OwnerPhone = Cus.PrimaryPhone,
                    OwnerPhone = Cus.CellNo,
                    OwnerName = Cus.FirstName + " " + Cus.LastName,
                    FirstName = Cus.FirstName,
                    LastName = Cus.LastName,
                    EmergencyContactList = _Util.Facade.EmergencyContactFacade.GetAllEmergencyContactByCustomerIdAndCompanyId(Cus.CustomerId, Com.CompanyId),
                    CompanyName = Com.CompanyName,
                    CompanySate = string.Format("{0}, {1} {2}", Com.City, Com.State, Com.ZipCode),
                    CompanyStreet = Com.Street,
                    CompanyWebsite = Com.Website,
                    SubscribedMonths = ContractTerm,
                    SubscribedMonthsInWord = ContractTermInWord,
                    RenewalMonths = Cus.RenewalTerm.HasValue ? Cus.RenewalTerm.Value : 0,
                    Password = Cus.Passcode,
                    DateOfTransaction = FixDate.UTCToClientTime(),
                    CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyEmailLogoByCompanyId(Com.CompanyId),
                    EquipmentList = CustomEquipmentList.ToList(),
                    ServiceList = CustomServiceList.ToList(),
                    ActivationFee = (PackageCustomer != null && PackageCustomer.ActivationFee.HasValue) ? PackageCustomer.ActivationFee.Value : 0,
                    BusinessName = Cus.BusinessName,
                    MonthlyMonitoringFee = Cus.MonthlyMonitoringFee,
                    EffectiveDate = FixDate.UTCToClientTime(),
                    CustomerSignature = cusSignature,
                    CustomerSignatureStringDate = cussignDate,
                    CustomerSignatureStringDateVal = cussignDateVal,
                    //ContractCreatedDateVal = contractCreatedDateVal,
                    ContractCreatedDateVal = (CusExd.ContractStartDate != null && CusExd.ContractStartDate.HasValue) ? CusExd.ContractStartDate.Value.ToShortDateString() : DateTime.Now.ToShortDateString(),
                    CustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementByCompanyIdAndCustomerId1(Com.CompanyId, Cus.CustomerId),
                    Subtotal = AgreementSubtotal,
                    Tax = AgreementTax,
                    TaxTotal = taxtotal,
                    Total = AgreementTotal,
                    EContractId = Cus.Id,
                    ListAgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(Cus.CustomerId),
                    SalesRepresentative = !string.IsNullOrEmpty(Cus.Soldby) ? _Util.Facade.EmployeeFacade.GetEmployeeNumByEmployeeId(new Guid(Cus.Soldby)).ToString() : "",
                    TotalPayments = TotalPayments,
                    SingleCustomerAgreement = _Util.Facade.CustomerAgreementFacade.GetIpAndUserAgentByCustomerIdAndCompanyId(Com.CompanyId, Cus.CustomerId),
                    ListContactEmergency = string.Format(paymentoverviewheader, paymentoverviewdata),
                    ListPaymentInfo = string.Format(paymentoverviewheader, paymentoverviewdata),
                    DoingBusinessAs = Cus.DBA,
                    DispalyName = Cus.DisplayName,
                    CompanyPhone = Com.Phone,
                    FirstPage = firstpage.HasValue ? firstpage.Value : false,
                    Commercial = commercial.HasValue ? commercial.Value : false,
                    IsInvoice = isinvoice.HasValue ? isinvoice.Value : false,
                    InvoiceId = invoiceid,
                    InvoiceDiagram = invDiagram,
                    InvoiceList = invoiceList,
                    IsEstimator = isestimator.HasValue ? isestimator.Value : false,
                    createEst = createest,
                    userInfo = userInfo,
                    inv = invoice,
                    NotARBEnabledServiceList = NotARBEnabledServiceList.ToList(),
                    NotARBEnabledTotalPrice = NotARBEnabledTotalPrice,
                    ProratedAmout = cpb != null ? Math.Round(cpb.Amount, 2, MidpointRounding.AwayFromZero) : 0.0,
                    FinancedAmout = Cus != null && Cus.FinancedAmount != null ? Math.Round(Cus.FinancedAmount.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                    MonthlyFinanceRate = CusExd != null && CusExd.MonthlyFinanceRate != null ? Math.Round(CusExd.MonthlyFinanceRate.Value, 2, MidpointRounding.AwayFromZero) : 0.0,
                    AdvanceServiceFeeTotal = AdvanceServiceFeeTotal
                };
                if (agreementtempid != 0)
                {
                    if (cs != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(cs.Signature))
                    {
                        Model.CompanySignature = glbs.Value;
                        if (cs.CreatedDate != null && cs.CreatedDate != new DateTime())
                        {
                            Model.CompanySignatureDate = cs.CreatedDate.UTCToClientTime().ToString("M/dd/yy");
                        }
                    }
                }
                else if (firstpage == true || IsRecreate == true || commercial == true)
                {
                    if (glbs != null && !string.IsNullOrWhiteSpace(glbs.Value))
                    {
                        Model.CompanySignature = glbs.Value;
                        Model.CompanySignatureDate = cussignDate;
                    }
                }
                else
                {
                    if (Cus != null && glbs != null && !string.IsNullOrWhiteSpace(glbs.Value) && !string.IsNullOrWhiteSpace(Cus.Singature))
                    {
                        Model.CompanySignature = glbs.Value;
                        if (Cus.CustomerSignatureDate != null && Cus.CustomerSignatureDate != new DateTime())
                        {
                            Model.CompanySignatureDate = Cus.CustomerSignatureDate.Value.UTCToClientTime().ToString("M/dd/yy");
                        }
                    }
                }

                if (Model.EmergencyContactList == null)
                {
                    Model.EmergencyContactList = new List<EmergencyContact>();
                }
            }
            else
            {
                Model.CompanyLogo = _Util.Facade.CompanyBranchFacade.GetCompanyLogoForPDFByCompanyId(CurrentUser.CompanyId.Value);
            }

            //  return View(Model);
            Model.KazarLogo = string.Concat(AppConfig.SiteDomain, "/Content/img/kazar_logo.PNG");
            ViewBag.CompanyId = Com.CompanyId.ToString();
            Model.CompanyId = Com.CompanyId.ToString();
            Model.CurrentCurrency = _Util.Facade.GlobalSettingsFacade.GetCurrentCurrencyByCompanyId(Com.CompanyId);
            string body = _Util.Facade.AgreementFacade.MakeSmartAgreementPdf(Model, agreementtempid.HasValue ? agreementtempid.Value : 0);
            ViewBag.Body = body;
            ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("SmartInstallationAgreement")
            {
                //FileName = "TestView.pdf",
                PageSize = Rotativa.Options.Size.A4,
                PageOrientation = Rotativa.Options.Orientation.Portrait,
                PageMargins = { Left = 1, Right = 1 },

            };
            byte[] applicationPDFData = actionPDF.BuildPdf(ControllerContext);

            #region file save
            //Random rand = new Random();
            //string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
            //var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CurrentUser.CompanyId.Value).CompanyName.ReplaceSpecialChar();
            //var pdftempFolderName = string.Format(filename, comname) + rand.Next().ToString() + leadid + "AgreementMail.pdf";
            //string Serverfilename = FileHelper.GetFileFullPath(pdftempFolderName);
            //FileHelper.SaveFile(applicationPDFData, Serverfilename);
            #endregion

            //// "mayur" AWS S3 Changes //// Start

            #region File Save on AWS S3

            Random rand = new Random();
            string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
            filename = filename.TrimEnd('/');

            var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(Com.CompanyId).CompanyName.ReplaceSpecialChar();

            string FilePath = string.Format(filename, comname);
            string FileName = rand.Next().ToString() + leadid + "AgreementMail.pdf";

            string FileKey = string.Format($"{FilePath}/{FileName}");

            var returnurl = "";

            var task = Task.Run(async () => {
                AWSS3ObjectService AWSobject = new AWSS3ObjectService();

                await AWSobject.UploadFile(FileKey, applicationPDFData);
                await AWSobject.MakePublic(FileName, FilePath);
            });

            task.Wait();

            /// "mayur" used thread for async s3 methods : start

            //Thread thread = new Thread(async () => {

            //    AWSS3ObjectService AWSobject = new AWSS3ObjectService();

            //    await AWSobject.UploadFile(FileKey, applicationPDFData);
            //    await AWSobject.MakePublic(FileName, FilePath);

            //});
            //thread.Start();

            ////// temp solution for thread to complete
            //Thread.Sleep(5000);
            ////


            /// "mayur" used thread for async s3 methods : End



            returnurl = String.Format(AppConfig.AWSS3Url, AppConfig.AWSS3BucketName);
            returnurl = returnurl + FileKey;


            ViewBag.ReturnUrl = returnurl;
            ViewBag.FileName = FileName;
            ViewBag.FileKey = FileKey;

            #endregion

            //// "mayur" AWS S3 Changes //// End

            //// ""Mayur" Calculate File Size : start
            #region Calculate file size


            var _fileSize = (decimal)applicationPDFData.Length / 1024;
            _fileSize = Math.Round(_fileSize, 2, MidpointRounding.AwayFromZero);

            #endregion
            //// ""Mayur" Calculate File Size : End



            //var cusinfo = _Util.Facade.CustomerFacade.GetById(leadid.Value);
            bool result = false;
            string encryptedurl = DESEncryptionDecryption.EncryptPlainTextToCipherText(leadid + "#" + Cus.EmailAddress + "#" + CurrentUser.CompanyId.Value.ToString() + "#" + (IsRecreate.HasValue ? IsRecreate.Value : false) + "#" + (agreementtempid.HasValue ? agreementtempid.Value : 0) + "#" + (firstpage.HasValue ? firstpage.Value : false) + "#" + (ticketid.HasValue ? ticketid.Value : 0) + "#" + (isinvoice.HasValue ? isinvoice : false) + "#" + (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : "") + "#" + (isestimator.HasValue ? isestimator.Value : false) + "#" + (estid.HasValue ? estid.Value : 0) + "#" + (userid != Guid.Empty ? userid : new Guid()) + "#" + (commercial.HasValue ? commercial.Value : false));
            //string fullurl = string.Concat(AppConfig.SiteDomain, "/Leads-Agreement/", encryptedurl);
            string fullurl = string.Concat(AppConfig.SiteDomain, "/Public/LeadsAgreementDocument/?code=", encryptedurl);

            ShortUrl ShortUrl = _Util.Facade.ShortUrlFacade.GetSortUrlByUrl(fullurl, Cus.CustomerId);
         

            string shortUrl = string.Concat(AppConfig.ShortSiteDomain, "/shrt/", ShortUrl.Code);

            string message = "";
            string SMSText = "";
            string ReceiverNumber = "";

            /// Mayur :: File Download to temp folder :start

            //webClient = new WebClient();
            //fileBytes1 = webClient.DownloadData(returnurl);

            //File(fileBytes1, System.Net.Mime.MediaTypeNames.Application.Octet, FileName).ToString();



            //Temp_FileName = Server.MapPath("~/EmailFileCache/tmp_" + FileName);

            //if (!System.IO.File.Exists(Temp_FileName))
            //{
            //    System.IO.File.WriteAllBytes(Temp_FileName, fileBytes1);
            //}
            //else
            //{
            //    System.IO.File.WriteAllBytes(Temp_FileName, fileBytes1);
            //}

            /// Mayur :: File Download to temp folder :End

            if (Cus != null)
            {
                string EmailAddress = PrefferedEmail;
                if (ValidPrefferedEmail.Count == 0)
                {
                    EmailAddress = Cus.EmailAddress;
                }
                else
                {
                    EmailAddress = string.Join(";", ValidPrefferedEmail);
                }
                if (ValidPrefferedEmail.Count > 0 || (!string.IsNullOrWhiteSpace(Cus.EmailAddress) && Cus.EmailAddress.IsValidEmailAddress()))
                {
                    result = true;
                    LeadsAggrement la = new LeadsAggrement
                    {
                        CustomerNum = Cus.DisplayName,
                        ToEmail = EmailAddress,
                        //LeadsAggrementpdf = new Attachment(Temp_FileName, MediaTypeNames.Application.Octet),
                        BodyLink = shortUrl,
                        CustomerId = Cus.CustomerId.ToString(),
                        EmployeeId = CurrentUser.UserId.ToString()
                    };
                    if (IsRecreate == true)
                    {
                        from = "Recreate Agreement";
                    }
                    else if (firstpage == true)
                    {
                        from = "First Page Agreement";
                    }
                    else if (commercial == true)
                    {
                        from = "Commercial Agreement";
                    }
                    else
                    {
                        from = "Smart Lead Agreement";
                    }
                    AgreementResult = _Util.Facade.MailFacade.EmailOnlyLeadsAggrement(la, CurrentUser.CompanyId.Value, from);
                    //if (AgreementResult)
                    //{
                    //#region Customer file
                    //if (IsRecreate == true)
                    //{
                    //    file = "Recreate_Agreement";
                    //    #region file save to customer file

                    //    CustomerFile cfs = new CustomerFile()
                    //    {
                    //        FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                    //        Filename = "/" + FileKey,
                    //        FileSize = "/" + _fileSize,
                    //        FileId = Guid.NewGuid(),
                    //        FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                    //        Uploadeddate = DateTime.Now.UTCCurrentTime(),
                    //        CustomerId = Cus.CustomerId,
                    //        CompanyId = CurrentUser.CompanyId.Value,
                    //        IsActive = true,
                    //        CreatedBy = CurrentUser.UserId,
                    //        CreatedDate = DateTime.Now.UTCCurrentTime(),
                    //        UpdatedBy = CurrentUser.UserId,
                    //        UpdatedDate = DateTime.Now.UTCCurrentTime()
                    //    };
                    //    _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                    //    logMessage = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                    //    base.AddUserActivityForCustomer(logMessage, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);

                    //    #endregion
                    //}
                    //else if (firstpage == true)
                    //{
                    //    file = "FirstPage_Agreement";

                    //    #region file save to customer file

                    //    CustomerFile cfs = new CustomerFile()
                    //    {
                    //        FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                    //        Filename = "/" + Filekey,
                    //        FileId = Guid.NewGuid(),
                    //        FileSize = "/" + _fileSize,
                    //        FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                    //        Uploadeddate = DateTime.Now.UTCCurrentTime(),
                    //        CustomerId = Cus.CustomerId,
                    //        CompanyId = CurrentUser.CompanyId.Value,
                    //        IsActive = true,
                    //        CreatedBy = CurrentUser.UserId,
                    //        CreatedDate = DateTime.Now.UTCCurrentTime(),
                    //        UpdatedBy = CurrentUser.UserId,
                    //        UpdatedDate = DateTime.Now.UTCCurrentTime()
                    //    };
                    //    _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                    //    string msglog = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                    //    base.AddUserActivityForCustomer(msglog, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                    //    #endregion

                    //}
                    //else if (commercial == true)
                    //{
                    //    file = "Commercial_Agreement";

                    //    #region file save to customer file

                    //    CustomerFile cfs = new CustomerFile()
                    //    {
                    //        FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                    //        Filename = "/" + Filekey,
                    //        FileId = Guid.NewGuid(),
                    //        FileSize = "/" + _fileSize,
                    //        FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                    //        Uploadeddate = DateTime.Now.UTCCurrentTime(),
                    //        CustomerId = Cus.CustomerId,
                    //        CompanyId = CurrentUser.CompanyId.Value,
                    //        IsActive = true,
                    //        CreatedBy = CurrentUser.UserId,
                    //        CreatedDate = DateTime.Now.UTCCurrentTime(),
                    //        UpdatedBy = CurrentUser.UserId,
                    //        UpdatedDate = DateTime.Now.UTCCurrentTime()
                    //    };
                    //    _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                    //    string msglog = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                    //    base.AddUserActivityForCustomer(msglog, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);

                    //    #endregion
                    //}
                    //else
                    //{

                    //    file = "Smart_Lead_Agreement";
                    //    #region file save to customer file

                    //    CustomerFile cfs = new CustomerFile()
                    //    {
                    //        FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail" + ".pdf",
                    //        Filename = "/" + Filekey,
                    //        FileId = Guid.NewGuid(),
                    //        FileSize = "/" + _fileSize,
                    //        FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                    //        Uploadeddate = DateTime.Now.UTCCurrentTime(),
                    //        CustomerId = Cus.CustomerId,
                    //        CompanyId = CurrentUser.CompanyId.Value,
                    //        IsActive = true,
                    //        CreatedBy = CurrentUser.UserId,
                    //        CreatedDate = DateTime.Now.UTCCurrentTime(),
                    //        UpdatedBy = CurrentUser.UserId,
                    //        UpdatedDate = DateTime.Now.UTCCurrentTime()
                    //    };
                    //    _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                    //    string msglog = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                    //    base.AddUserActivityForCustomer(msglog, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);

                    //    #endregion
                    //}


                    //}
                    //#endregion
                    message += "Agreement sent to " + EmailAddress;
                    Customer cus2 = _Util.Facade.CustomerFacade.GetCustomerById(Cus.Id);
                    cus2.IsAgreementSend = true;
                    cus2.AgreementEmail = PrefferedEmail;
                    cus2.AgreementPhoneNo = PrefferedNO;
                    if (firstpage == true || IsRecreate == true)
                    {
                        cus2.Singature = "";
                        cus2.IsContractSigned = false;
                        var objrecreate = _Util.Facade.CustomerSignatureFacade.GetRecreateCustomerSignatureByCustomerId(cus2.CustomerId);
                        if (objrecreate != null)
                        {
                            objrecreate.Signature = "";
                            _Util.Facade.CustomerSignatureFacade.UpdateCustomerSignature(objrecreate);
                        }
                        var objfirstpage = _Util.Facade.CustomerSignatureFacade.GetFirstPageCustomerSignatureByCustomerId(cus2.CustomerId);
                        if (objfirstpage != null)
                        {
                            objfirstpage.Signature = "";
                            _Util.Facade.CustomerSignatureFacade.UpdateCustomerSignature(objfirstpage);
                        }
                    }

                    _Util.Facade.CustomerFacade.UpdateCustomer(cus2);
                    if (commercial == true)
                    {
                        var objcommercial = _Util.Facade.CustomerSignatureFacade.GetCommercialCustomerSignatureByCustomerId(cus2.CustomerId);
                        if (objcommercial != null)
                        {
                            objcommercial.Signature = "";
                            _Util.Facade.CustomerSignatureFacade.UpdateCustomerSignature(objcommercial);
                        }
                    }
                    #region Agreement History
                    var cusAgrHistory = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementHistory(Cus.CustomerId, LabelHelper.CustomerAgreementHistory.AgreementSend);
                    if (cusAgrHistory == null)
                    {
                        CustomerAgreement cusAgrModel = new CustomerAgreement()
                        {
                            CompanyId = Com.CompanyId,
                            CustomerId = Cus.CustomerId,
                            IP = AppConfig.GetIP,
                            UserAgent = AppConfig.GetUserAgent,
                            Type = LabelHelper.CustomerAgreementHistory.AgreementSend,
                            AddedDate = DateTime.UtcNow
                        };
                        _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(cusAgrModel);
                    }
                    #endregion
                }
                else
                {
                    result = false;
                    message = "Invalid email address.";
                }
                #region Send SMS Agreeemnt
                List<string> ReceiverNumberList = new List<string>();
                #region ReceiverNumber Setup
                if (!string.IsNullOrWhiteSpace(PrefferedNO))
                {
                    ReceiverNumber = PrefferedNO.Replace("-", "");
                }
                else if (!string.IsNullOrWhiteSpace(Cus.SecondaryPhone))
                {
                    ReceiverNumber = Cus.SecondaryPhone.Replace("-", "");
                }
                else
                {
                    return Json(new { result = false, message = message + " and no phone number available." });
                }
                ReceiverNumberList.Add(ReceiverNumber);
                #endregion
                SMSAgreement smsAgreement = new SMSAgreement();

                smsAgreement.ShortUrl = shortUrl;
                smsAgreement.CompanyName = CurrentUser.CompanyName;
                string phonenumber = string.Join(";", ReceiverNumberList);

                if (_Util.Facade.SMSFacade.SendAgrementSMS(smsAgreement, CurrentUser.UserId, CurrentUser.CompanyId.Value, ReceiverNumberList, false, string.Concat(CurrentUser.FirstName, " ", CurrentUser.LastName)) == true)
                {
                    #region insert lead correspondence
                    if (IsRecreate == true)
                    {
                        LeadCorrespondence LeadCorrespondence = new LeadCorrespondence()
                        {
                            CompanyId = CurrentUser.CompanyId.Value,
                            CustomerId = Cus.CustomerId,
                            Type = "SMS",
                            ToMobileNo = phonenumber,
                            BodyContent = "Recreate  Agreement",
                            SentDate = DateTime.Now.UTCCurrentTime(),
                            LastUpdatedDate = DateTime.Now,
                            SentBy = CurrentUser.UserId

                        };
                        _Util.Facade.LeadCorrespondenceFacade.InsertCorrespondence(LeadCorrespondence);
                        message += " and " + phonenumber;

                    }
                    else if (firstpage == true)
                    {
                        LeadCorrespondence LeadCorrespondence = new LeadCorrespondence()
                        {
                            CompanyId = CurrentUser.CompanyId.Value,
                            CustomerId = Cus.CustomerId,
                            Type = "SMS",
                            ToMobileNo = phonenumber,
                            BodyContent = "First Page Agreement",
                            SentDate = DateTime.Now.UTCCurrentTime(),
                            LastUpdatedDate = DateTime.Now,
                            SentBy = CurrentUser.UserId
                        };
                        _Util.Facade.LeadCorrespondenceFacade.InsertCorrespondence(LeadCorrespondence);
                        message += " and " + phonenumber;

                    }
                    else if (commercial == true)
                    {
                        LeadCorrespondence LeadCorrespondence = new LeadCorrespondence()
                        {
                            CompanyId = CurrentUser.CompanyId.Value,
                            CustomerId = Cus.CustomerId,
                            Type = "SMS",
                            ToMobileNo = phonenumber,
                            BodyContent = "Commercial Agreement",
                            SentDate = DateTime.Now.UTCCurrentTime(),
                            LastUpdatedDate = DateTime.Now,
                            SentBy = CurrentUser.UserId
                        };
                        _Util.Facade.LeadCorrespondenceFacade.InsertCorrespondence(LeadCorrespondence);
                        message += " and " + phonenumber;

                    }
                    else
                    {
                        LeadCorrespondence LeadCorrespondence = new LeadCorrespondence()
                        {
                            CompanyId = CurrentUser.CompanyId.Value,
                            CustomerId = Cus.CustomerId,
                            Type = "SMS",
                            ToMobileNo = phonenumber,
                            BodyContent = "Smart Lead Agreement",
                            SentDate = DateTime.Now.UTCCurrentTime(),
                            LastUpdatedDate = DateTime.Now,
                            SentBy = CurrentUser.UserId
                        };
                        _Util.Facade.LeadCorrespondenceFacade.InsertCorrespondence(LeadCorrespondence);
                        message += " and " + phonenumber;
                    }
                    #endregion

                    //// ""Mayur" Calculate File Size : start
                    #region Calculate file size

                    _fileSize = applicationPDFData.Length / 1024;

                    #endregion
                    //// ""Mayur" Calculate File Size : End
                    ///

                    #region Customer file
                    if (IsRecreate == true)
                    {
                        file = "Recreate_Agreement";
                        #region file save to customer file

                        CustomerFile cfs = new CustomerFile()
                        {
                            FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail_SMS" + ".pdf",
                            Filename = "/" + FileKey,
                            FileSize = (double)_fileSize,
                            FileId = Guid.NewGuid(),
                            FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                            Uploadeddate = DateTime.Now.UTCCurrentTime(),
                            CustomerId = Cus.CustomerId,
                            CompanyId = CurrentUser.CompanyId.Value,
                            IsActive = true,
                            CreatedBy = CurrentUser.UserId,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            UpdatedBy = CurrentUser.UserId,
                            UpdatedDate = DateTime.Now.UTCCurrentTime()
                        };
                        _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                        logMessage = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                        base.AddUserActivityForCustomer(logMessage, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);

                        #endregion
                    }
                    else if (firstpage == true)
                    {
                        file = "FirstPage_Agreement";
                        #region file save to customer file

                        CustomerFile cfs = new CustomerFile()
                        {
                            FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail_SMS" + ".pdf",
                            Filename = "/" + FileKey,
                            FileSize = (double)_fileSize,
                            FileId = Guid.NewGuid(),
                            FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                            Uploadeddate = DateTime.Now.UTCCurrentTime(),
                            CustomerId = Cus.CustomerId,
                            CompanyId = CurrentUser.CompanyId.Value,
                            IsActive = true,
                            CreatedBy = CurrentUser.UserId,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            UpdatedBy = CurrentUser.UserId,
                            UpdatedDate = DateTime.Now.UTCCurrentTime()
                        };
                        _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                        string msglog = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                        base.AddUserActivityForCustomer(msglog, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                        #endregion

                    }
                    else if (CusExd.ContractType == "Commercial")
                    {
                        file = "Commercial_Agreement";
                        #region file save to customer file
                        CustomerFile cfs = new CustomerFile()
                        {
                            FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail_SMS" + ".pdf",
                            Filename = "/" + FileKey,
                            FileSize = (double)_fileSize,
                            FileId = Guid.NewGuid(),
                            FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                            Uploadeddate = DateTime.Now.UTCCurrentTime(),
                            CustomerId = Cus.CustomerId,
                            CompanyId = CurrentUser.CompanyId.Value,
                            IsActive = true,
                            CreatedBy = CurrentUser.UserId,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            UpdatedBy = CurrentUser.UserId,
                            UpdatedDate = DateTime.Now.UTCCurrentTime(),
                            WMStatus = LabelHelper.WatermarkStatus.Pending,
                            AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                        };
                        _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                        string msglog = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                        base.AddUserActivityForCustomer(msglog, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                        #endregion
                    }
                    else if (CusExd.ContractType == "CommercialFire")
                    {
                        file = "Commercial_Fire_Agreement";
                        #region file save to customer file
                        CustomerFile cfs = new CustomerFile()
                        {
                            FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail_SMS" + ".pdf",
                            Filename = "/" + FileKey,
                            FileSize = (double)_fileSize,
                            FileId = Guid.NewGuid(),
                            FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                            Uploadeddate = DateTime.Now.UTCCurrentTime(),
                            CustomerId = Cus.CustomerId,
                            CompanyId = CurrentUser.CompanyId.Value,
                            IsActive = true,
                            CreatedBy = CurrentUser.UserId,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            UpdatedBy = CurrentUser.UserId,
                            UpdatedDate = DateTime.Now.UTCCurrentTime(),
                            WMStatus = LabelHelper.WatermarkStatus.Pending,
                            AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                        };
                        _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                        string msglog = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                        base.AddUserActivityForCustomer(msglog, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);
                        #endregion                   
                    }
                    else
                    {

                        file = "Smart_Lead_Agreement";
                        #region file save to customer file

                        CustomerFile cfs = new CustomerFile()
                        {
                            FileDescription = Cus.Id + "_" + Regex.Replace(file, @"\s+", String.Empty) + "_Mail_SMS" + ".pdf",
                            Filename = "/" + FileKey,
                            FileSize = (double)_fileSize,
                            FileId = Guid.NewGuid(),
                            FileFullName = Regex.Replace(file, @"\s+", String.Empty) + ".pdf",
                            Uploadeddate = DateTime.Now.UTCCurrentTime(),
                            CustomerId = Cus.CustomerId,
                            CompanyId = CurrentUser.CompanyId.Value,
                            IsActive = true,
                            CreatedBy = CurrentUser.UserId,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            UpdatedBy = CurrentUser.UserId,
                            UpdatedDate = DateTime.Now.UTCCurrentTime(),
                            WMStatus = LabelHelper.WatermarkStatus.Pending,
                            AWSProcessStatus = LabelHelper.AWSProcessStatus.Local
                        };
                        _Util.Facade.CustomerFileFacade.InsertCustomerFile(cfs);
                        string msglog = Regex.Replace(file, @"\s+", String.Empty) + ".pdf " + message.ToLower();
                        base.AddUserActivityForCustomer(msglog, LabelHelper.ActivityAction.AddDocumentFileManagement, null, Cus.Id, null);

                        #endregion
                    }
                    #endregion

                }
                #endregion
            }
            #endregion
            return Json(new { result = result, message = message });
        }
        private bool SendSignedAgreementNotification(Guid companyid, Guid userid, string name, int id)
        {
            bool result = false;
            if (companyid != new Guid() && userid != new Guid())
            {
                var empobj = _Util.Facade.EmployeeFacade.GetEmployeeByEmployeeId(userid);
                if (empobj != null)
                {
                    Notification noti = new Notification()
                    {
                        CompanyId = companyid,
                        NotificationId = Guid.NewGuid(),
                        Who = userid,
                        What = string.Format("Agreement signed for {0}", name),
                        CreatedDate = DateTime.Now.UTCCurrentTime(),
                        Type = "Customer",
                        NotificationUrl = string.Format("/Customer/Customerdetail/?id={0}", id)
                    };
                    result = _Util.Facade.NotificationFacade.InsertNotification(noti) > 0;
                    NotificationUser notiuser = new NotificationUser()
                    {
                        NotificationId = noti.NotificationId,
                        NotificationPerson = userid,
                        IsRead = true
                    };
                    _Util.Facade.NotificationFacade.InsertNotificationUser(notiuser);
                }

            }
            return result;
        }

        public bool SignSmartAgreementAppointmentEquipment(Customer _Customer)
        {
            bool result = false;
            var objticket = _Util.Facade.TicketFacade.GetTicketByCustomerId(_Customer.CustomerId);
            if (objticket != null)
            {
                var objappointeqp = _Util.Facade.CustomerAppoinmentFacade.GetAllCustomerAppointmentEquipmentListByAppointmentId(objticket.TicketId);
                if (objappointeqp != null && objappointeqp.Count > 0)
                {
                    foreach (var item in objappointeqp)
                    {
                        var objinvdetail = _Util.Facade.InvoiceFacade.GetInvoiceDetailByequipmentId(item.EquipmentId);
                        if (objinvdetail != null && objinvdetail.Count > 0)
                        {
                            foreach (var invdetail in objinvdetail)
                            {
                                var objinv = _Util.Facade.InvoiceFacade.GetInvoiceByCustomerIdInvoiceId(_Customer.CustomerId, invdetail.InvoiceId);
                                if (objinv != null)
                                {
                                    item.ReferenceInvoiceId = objinv.InvoiceId;
                                    item.ReferenceInvDetailId = invdetail.Id;
                                    result = _Util.Facade.CustomerAppoinmentFacade.UpdateCustomerAppoinmentEquipment(item);
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }

        [HttpPost]
        public JsonResult SaveNonCommissionableServiceList(List<string> NonCommissionableServiceList, Guid EquipmentPartialLeadGuId, List<string> DeleteNonCommissionableServiceList)
        {
            bool result = false;
            var CurrentLoggedInUser = (HS.Web.UI.Helper.CustomPrincipal)User;

            if (NonCommissionableServiceList != null && NonCommissionableServiceList.Count > 0)
            {
                foreach (var item in NonCommissionableServiceList)
                {
                    var objpackservice = _Util.Facade.SmartPackageFacade.GetCustomerPackageServiceById(Convert.ToInt32(item));
                    if (objpackservice != null)
                    {
                        objpackservice.IsNonCommissionable = true;
                        _Util.Facade.SmartPackageFacade.UpdateCustomerPackageService(objpackservice);

                        #region Add Added equipments for service
                        List<CustomerPackageEqp> ServiceEquipmentList = _Util.Facade.SmartPackageFacade.GetCustomerPackageEqpByCustomerIdServiceId(EquipmentPartialLeadGuId, objpackservice.EquipmentId);
                        foreach (var itemeqp in ServiceEquipmentList)
                        {
                            itemeqp.IsNonCommissionable = true;
                            _Util.Facade.SmartPackageFacade.UpdateCustomerPackageEqp(itemeqp);
                        }
                        #endregion
                    }
                }
            }
            if (DeleteNonCommissionableServiceList != null && DeleteNonCommissionableServiceList.Count > 0)
            {
                foreach (var item in DeleteNonCommissionableServiceList)
                {
                    var objpackservice = _Util.Facade.SmartPackageFacade.GetCustomerPackageServiceById(Convert.ToInt32(item));
                    if (objpackservice != null)
                    {
                        objpackservice.IsNonCommissionable = false;
                        _Util.Facade.SmartPackageFacade.UpdateCustomerPackageService(objpackservice);

                        #region Add Added equipments for service
                        List<CustomerPackageEqp> ServiceEquipmentList = _Util.Facade.SmartPackageFacade.GetCustomerPackageEqpByCustomerIdServiceId(EquipmentPartialLeadGuId, objpackservice.EquipmentId);
                        foreach (var itemeqp in ServiceEquipmentList)
                        {
                            itemeqp.IsNonCommissionable = false;
                            _Util.Facade.SmartPackageFacade.UpdateCustomerPackageEqp(itemeqp);
                        }
                        #endregion
                    }
                }
            }
            return Json(result);
        }

        [HttpPost]
        public JsonResult SaveNonCommissionableEqpList(List<string> NonCommissionableEqpList, int EquipmentPartialLeadId, List<string> DeleteNonCommissionableEqpList)
        {
            bool result = false;
            var CurrentLoggedInUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            var objcustomer = _Util.Facade.CustomerFacade.GetCustomerById(EquipmentPartialLeadId);

            if (objcustomer != null)
            {
                if (NonCommissionableEqpList != null && NonCommissionableEqpList.Count > 0)
                {
                    foreach (var item in NonCommissionableEqpList)
                    {
                        var objpackeqp = _Util.Facade.SmartPackageFacade.GetCustomerPackageEqpById(Convert.ToInt32(item));
                        if (objpackeqp != null)
                        {
                            objpackeqp.IsNonCommissionable = true;
                            _Util.Facade.SmartPackageFacade.UpdateCustomerPackageEqp(objpackeqp);
                        }
                    }
                }
                if (DeleteNonCommissionableEqpList != null && DeleteNonCommissionableEqpList.Count > 0)
                {
                    foreach (var item in DeleteNonCommissionableEqpList)
                    {
                        var objpackeqp = _Util.Facade.SmartPackageFacade.GetCustomerPackageEqpById(Convert.ToInt32(item));
                        if (objpackeqp != null)
                        {
                            objpackeqp.IsNonCommissionable = false;
                            _Util.Facade.SmartPackageFacade.UpdateCustomerPackageEqp(objpackeqp);
                        }
                    }
                }
            }
            return Json(result);
        }


        #region NFT Ticket

        public JsonResult SetNFTTicket(Guid CustomerId, bool IsNFTTicket)
        {
            bool result = false;
            PackageCustomer packageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(CustomerId);
            if (packageCustomer != null)
            {
                packageCustomer.IsNFTTicket = IsNFTTicket;
                _Util.Facade.PackageFacade.UpdatePackageCustomer(packageCustomer);
                result = true;
            }
            return Json(result);
        }

        #endregion

        #region Send Contract Sign Notification Email
        public bool SendContractSignNotificationEmail(int LeadId, Guid companyId)
        {
            CompanyConneciton CC = _Util.Facade.UserOrganizationFacade.GetCompanyConnectionByCompanyId(companyId);

            if (CC == null || string.IsNullOrWhiteSpace(CC.ConnectionString) || CC.CompanyId == new Guid())
            {
                //return RedirectToAction("Index", "Login");
            }
            else
            {
                Guid CompanyId = CC.CompanyId;
                string ConnectionString = CC.ConnectionString;
                if (!string.IsNullOrWhiteSpace(ConnectionString))
                {
                    ConnectionString = DESEncryptionDecryption.DecryptCipherTextToPlainText(ConnectionString);

                    Session[SessionKeys.CompanyConnectionString] = ConnectionString;
                }
                else
                {
                    //return RedirectToAction("Index", "Login");
                }
            }

            bool result = false;

            if (LeadId != 0)
            {
                string recevieremail = "";

                var EmailReceiver = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByOnlyKey("ContractSignAndEstimateSignNotificationReceiverEmail");
                if (EmailReceiver != null)
                {
                    recevieremail = EmailReceiver.Value;
                }
                Customer cust = _Util.Facade.CustomerFacade.GetCustomerByLeadId(LeadId);

                if (cust != null)
                {
                    NotificationEmail EmailNotifiaction = new NotificationEmail()
                    {
                        Subject = "Contract " + cust.Id + " Has Signed.",
                        ToEmail = recevieremail,
                        EmailBody = "Contract " + cust.Id + " Has Signed By " + cust.FirstName + " " + cust.LastName + ".",
                    };
                    result = _Util.Facade.MailFacade.SendSignNotificationEmail(EmailNotifiaction, companyId);
                }
            }
            return result;
        }
        #endregion

        #region ISPC
        public ActionResult AddFinance(Guid CustomerId, string from)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            ViewBag.from = from;
            int MerchantId = 0;

            var MerchantIdGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ISPCMerchantId");
            if (MerchantIdGlobal != null)
            {
                MerchantId = Convert.ToInt32(MerchantIdGlobal.Value);
            }
            CustomerIsPcCreditApplication creditApp = _Util.Facade.CustomerFacade.GetCustomerIsPcAppByCustomerId(CustomerId);
            if (creditApp == null)
            {
                Customer cus = _Util.Facade.CustomerFacade.GetCustomerByCustomerGuidId(CustomerId);
                creditApp = new CustomerIsPcCreditApplication();
                creditApp.MerchantId = MerchantId;
                creditApp.ApplicantCity = cus.City;
                creditApp.ApplicantState = cus.State;
                creditApp.ApplicantZipCode = cus.ZipCode;
                creditApp.ApplicantFirstName = cus.FirstName;
                creditApp.ApplicantLastName = cus.LastName;
                creditApp.ApplicantEmailAddress = cus.EmailAddress;
                creditApp.ApplicantSSN = cus.SSN;
                creditApp.ApplicantDOB = cus.DateofBirth;
                creditApp.ApplicantCellPhone = cus.CellNo;
                creditApp.ApplicantHomePhone = cus.PrimaryPhone;
                creditApp.ApplicantStreet = cus.Street;
                creditApp.ApplicantGrossAnnualIncome = 0;
                creditApp.CoapplicantGrossAnnualIncome = 0;
                creditApp.CoapplicantOtherIncome = 0;
                creditApp.ApplicantOtherIncome = 0;
                creditApp.MortgageBalance = 0;
                creditApp.CoapplicantGrossAnnualIncome = 0;
                creditApp.ApplicantGrossAnnualIncome = 0;
                creditApp.MortgagePayment = 0;
            }

            ViewBag.OptionCodeList = GetCGServiceOptions();
            ViewBag.BankType = _Util.Facade.LookupFacade.GetLookupByKey("IspcBankType").Select(x =>
                new SelectListItem()
                {
                    Text = x.DisplayText.ToString(),
                    Value = x.DataValue.ToString()
                }).ToList();
            return View(creditApp);
        }

        public JsonResult ApplyForFinance(CustomerIsPcCreditApplication model, Guid CustomerId, bool IsApply, string from)
        {

            #region Credentials
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            var strUser = "";
            var strPasswd = "";
            int MerchantId = 0;

            var MerchantIdGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ISPCMerchantId");
            if (MerchantIdGlobal != null)
            {
                MerchantId = Convert.ToInt32(MerchantIdGlobal.Value);
            }
            var UserIdGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ISPCUserName");
            if (UserIdGlobal != null)
            {
                strUser = UserIdGlobal.Value;
            }
            var PasswordGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ISPCPassword");
            if (PasswordGlobal != null)
            {
                strPasswd = PasswordGlobal.Value;
            }
            #endregion
            #region In Production

            string Url = "";
            var IsPcInProductionGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ISPCInProduction");
            bool InProduction = false;
            if (IsPcInProductionGlobal != null && IsPcInProductionGlobal.Value.ToLower() == "true")
            {
                InProduction = true;
                Url = " https://merchant.theispc.com/api/";
            }
            else
            {
                InProduction = false;
                Url = "https://mws-test.theispc.com/api/";
            }
            #endregion
            bool result = false;
            string ApplicationId = "";
            string Message = "";
            try
            {
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                string authheadertext = Convert.ToBase64String(Encoding.Default.GetBytes(strUser + ":" + strPasswd)).Trim();
                var client = new RestClient(Url + "CGSubmit");
                var request = new RestRequest(Method.POST);
                request.AddHeader("postman-token", "9e6a6130-7e24-2185-3bfd-e8e8dfae8182");
                request.AddHeader("cache-control", "no-cache");
                request.AddHeader("authorization", "Basic " + authheadertext);
                if (model.Id > 0)
                {
                    CustomerIsPcCreditApplication app = _Util.Facade.CustomerFacade.GetCustomerIsPcAppById(model.Id);
                    app.MerchantId = model.MerchantId.HasValue ? model.MerchantId.Value : MerchantId;
                    app.ApplicantFirstName = model.ApplicantFirstName;
                    app.ApplicantLastName = model.ApplicantLastName;
                    app.ApplicantDriversLicense = model.ApplicantDriversLicense;
                    app.AmountRequested = model.AmountRequested.HasValue ? model.AmountRequested.Value : 0.0;
                    app.ApplicantCellPhone = model.ApplicantCellPhone;
                    app.ApplicantCity = model.ApplicantCity;
                    app.ApplicantCountry = !string.IsNullOrEmpty(model.ApplicantCountry) ? model.ApplicantCountry : "N/A";
                    app.ApplicantDOB = model.ApplicantDOB;
                    app.ApplicantEmailAddress = model.ApplicantEmailAddress;
                    app.ApplicantEmployer = model.ApplicantEmployer;
                    app.ApplicantEmployerPhone = model.ApplicantEmployerPhone;
                    app.ApplicantGrossAnnualIncome = model.ApplicantGrossAnnualIncome;
                    app.ApplicantHomePhone = model.ApplicantHomePhone;
                    app.ApplicantMiddleName = model.ApplicantMiddleName;
                    app.ApplicantMonthsAtAddress = model.ApplicantMonthsAtAddress;
                    app.ApplicantMonthsEmployed = model.ApplicantMonthsEmployed;
                    app.ApplicantNameSuffix = model.ApplicantNameSuffix;
                    app.ApplicantOtherIncome = model.ApplicantOtherIncome;
                    app.ApplicantOtherIncomeSource = model.ApplicantOtherIncomeSource;
                    app.ApplicantPosition = model.ApplicantPosition;
                    app.ApplicantPrevCity = model.ApplicantPrevCity;
                    app.ApplicantPrevCountry = model.ApplicantPrevCountry;
                    app.ApplicantPrevMonthsAtAddress = model.ApplicantPrevMonthsAtAddress;
                    app.ApplicantPrevState = model.ApplicantPrevState;
                    app.ApplicantPrevStreet = model.ApplicantPrevStreet;
                    app.ApplicantPrevYearsAtAddress = model.ApplicantPrevYearsAtAddress;
                    app.ApplicantPrevZipCode = model.ApplicantPrevZipCode;
                    app.ApplicantSSN = model.ApplicantSSN;
                    app.ApplicantState = model.ApplicantState;
                    app.ApplicantStreet = model.ApplicantStreet;
                    app.ApplicantYearsAtAddress = model.ApplicantYearsAtAddress;
                    app.ApplicantYearsEmployed = model.ApplicantYearsEmployed;
                    app.ApplicantZipCode = model.ApplicantZipCode;
                    app.BankAcctType = model.BankAcctType;
                    app.CoapplicantEmailAddress = model.CoapplicantEmailAddress;
                    app.CoapplicantCity = model.CoapplicantCity;
                    app.CoapplicantCountry = model.CoapplicantCountry;
                    app.CoapplicantDOB = model.CoapplicantDOB;
                    app.CoapplicantDriversLicense = model.CoapplicantDriversLicense;
                    app.CoapplicantEmployer = model.CoapplicantEmployer;
                    app.CoapplicantEmployerPhone = model.CoapplicantEmployerPhone;
                    app.CoapplicantFirstName = model.CoapplicantFirstName;
                    app.CoapplicantGrossAnnualIncome = model.CoapplicantGrossAnnualIncome;
                    app.CoapplicantHomePhone = model.CoapplicantHomePhone;
                    app.CoapplicantLastName = model.CoapplicantLastName;
                    app.CoapplicantMiddleName = model.CoapplicantMiddleName;
                    app.CoapplicantMonthsAtAddress = model.CoapplicantMonthsAtAddress;
                    app.CoapplicantMonthsEmployed = model.CoapplicantMonthsEmployed;
                    app.CoapplicantNameSuffix = model.CoapplicantNameSuffix;
                    app.CoapplicantOtherIncome = model.CoapplicantOtherIncome;
                    app.CoapplicantOtherIncomeSource = model.CoapplicantOtherIncomeSource;
                    app.CoapplicantPosition = model.CoapplicantPosition;
                    app.CoapplicantSSN = model.CoapplicantSSN;
                    app.CoapplicantState = model.CoapplicantState;
                    app.CoapplicantStreet = model.CoapplicantStreet;
                    app.CoapplicantYearsAtAddress = model.CoapplicantYearsAtAddress;
                    app.CoapplicantYearsEmployed = model.CoapplicantYearsEmployed;
                    app.CoapplicantZipCode = model.CoapplicantZipCode;
                    app.CpapplicantCellPhone = model.CpapplicantCellPhone;
                    app.OptionCode = model.OptionCode;
                    app.MortgageBalance = model.MortgageBalance;
                    app.MortgageHolder = model.MortgageHolder;
                    app.BankName = model.BankName;
                    app.MortgagePayment = model.MortgagePayment;
                    app.ProdMiscDescription = model.ProdMiscDescription;
                    app.ProdSecuritySystem = model.ProdSecuritySystem;
                    app.SelectedAssignedUserId = model.SelectedAssignedUserId;
                    _Util.Facade.CustomerFacade.UpdateIsPcCreditApp(app);
                }
                else
                {
                    model.CustomerId = CustomerId;
                    _Util.Facade.CustomerFacade.InsertIsPcCreditApp(model);
                }

                if (IsApply == true)
                {
                    IsPcFinanceApplyModel financeInfo = new IsPcFinanceApplyModel
                    {
                        MerchantId = model.MerchantId.HasValue ? model.MerchantId.Value : MerchantId,
                        ApplicantFirstName = model.ApplicantFirstName,
                        ApplicantLastName = model.ApplicantLastName,
                        ApplicantDriversLicense = model.ApplicantDriversLicense,
                        AmountRequested = model.AmountRequested.HasValue ? model.AmountRequested.Value : 0.0,
                        ApplicantCellPhone = model.ApplicantCellPhone,
                        ApplicantCity = model.ApplicantCity,
                        ApplicantCountry = !string.IsNullOrEmpty(model.ApplicantCountry) ? model.ApplicantCountry : "N/A",
                        ApplicantDOB = model.ApplicantDOB.HasValue ? model.ApplicantDOB.Value : new DateTime(),
                        ApplicantEmailAddress = model.ApplicantEmailAddress,
                        ApplicantEmployer = model.ApplicantEmployer,
                        ApplicantEmployerPhone = model.ApplicantEmployerPhone,
                        ApplicantGrossAnnualIncome = model.ApplicantGrossAnnualIncome.HasValue ? model.ApplicantGrossAnnualIncome : 0.0,
                        ApplicantHomePhone = model.ApplicantHomePhone,
                        ApplicantMiddleName = model.ApplicantMiddleName,
                        ApplicantMonthsAtAddress = model.ApplicantMonthsAtAddress,
                        ApplicantMonthsEmployed = model.ApplicantMonthsEmployed,
                        ApplicantNameSuffix = model.ApplicantNameSuffix,
                        ApplicantOtherIncome = model.ApplicantOtherIncome,
                        ApplicantOtherIncomeSource = model.ApplicantOtherIncomeSource,
                        ApplicantPosition = model.ApplicantPosition,
                        ApplicantPrevCity = model.ApplicantPrevCity,
                        ApplicantPrevCountry = model.ApplicantPrevCountry,
                        ApplicantPrevMonthsAtAddress = model.ApplicantPrevMonthsAtAddress,
                        ApplicantPrevState = model.ApplicantPrevState,
                        ApplicantPrevStreet = model.ApplicantPrevStreet,
                        ApplicantPrevYearsAtAddress = model.ApplicantPrevYearsAtAddress,
                        ApplicantPrevZipCode = model.ApplicantPrevZipCode,
                        ApplicantSSN = model.ApplicantSSN,
                        ApplicantState = model.ApplicantState,
                        ApplicantStreet = model.ApplicantStreet,
                        ApplicantYearsAtAddress = model.ApplicantYearsAtAddress,
                        ApplicantYearsEmployed = model.ApplicantYearsEmployed,
                        ApplicantZipCode = model.ApplicantZipCode,
                        BankAcctType = model.BankAcctType,
                        CoapplicantEmailAddress = model.CoapplicantEmailAddress,
                        CoapplicantCity = model.CoapplicantCity,
                        CoapplicantCountry = model.CoapplicantCountry,
                        CoapplicantDOB = model.CoapplicantDOB,
                        CoapplicantDriversLicense = model.CoapplicantDriversLicense,
                        CoapplicantEmployer = model.CoapplicantEmployer,
                        CoapplicantEmployerPhone = model.CoapplicantEmployerPhone,
                        CoapplicantFirstName = model.CoapplicantFirstName,
                        CoapplicantGrossAnnualIncome = model.CoapplicantGrossAnnualIncome,
                        CoapplicantHomePhone = model.CoapplicantHomePhone,
                        CoapplicantLastName = model.CoapplicantLastName,
                        CoapplicantMiddleName = model.CoapplicantMiddleName,
                        CoapplicantMonthsAtAddress = model.CoapplicantMonthsAtAddress,
                        CoapplicantMonthsEmployed = model.CoapplicantMonthsEmployed,
                        CoapplicantNameSuffix = model.CoapplicantNameSuffix,
                        CoapplicantOtherIncome = model.CoapplicantOtherIncome,
                        CoapplicantOtherIncomeSource = model.CoapplicantOtherIncomeSource,
                        CoapplicantPosition = model.CoapplicantPosition,
                        CoapplicantSSN = model.CoapplicantSSN,
                        CoapplicantState = model.CoapplicantState,
                        CoapplicantStreet = model.CoapplicantStreet,
                        CoapplicantYearsAtAddress = model.CoapplicantYearsAtAddress,
                        CoapplicantYearsEmployed = model.CoapplicantYearsEmployed,
                        CoapplicantZipCode = model.CoapplicantZipCode,
                        CpapplicantCellPhone = model.CpapplicantCellPhone,
                        OptionCode = model.OptionCode,
                        MortgageBalance = model.MortgageBalance,
                        MortgageHolder = model.MortgageHolder,
                        BankName = model.BankName,
                        MortgagePayment = model.MortgagePayment,
                        ProdMiscDescription = model.ProdMiscDescription,
                        ProdSecuritySystem = model.ProdSecuritySystem,
                        SelectedAssignedUserId = model.SelectedAssignedUserId
                    };
                    var content = JsonConvert.SerializeObject(financeInfo);

                    request.AddParameter("application/json", content, ParameterType.RequestBody);
                    IRestResponse response = client.Execute(request);
                    if (response != null)
                    {
                        IsPcResponseModel resModel = new IsPcResponseModel();
                        resModel = Newtonsoft.Json.JsonConvert.DeserializeObject<IsPcResponseModel>(response.Content);
                        if (!string.IsNullOrEmpty(resModel.CurrentStatus))
                        {
                            Message = resModel.CurrentStatus;
                            ApplicationId = resModel.ApplicationID;
                            result = true;
                            #region Insert on customer extended
                            CustomerExtended extended = new CustomerExtended();

                            extended = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(CustomerId);
                            if (extended != null)
                            {
                                extended.IsPcAppStatus = resModel.CurrentStatus;
                                extended.IsPcApplicationId = ApplicationId;
                                extended.IsPcCreditApproved = true;
                                _Util.Facade.CustomerFacade.UpdateCustomerExtended(extended);
                            }
                            else
                            {
                                extended.CustomerId = CustomerId;
                                extended.IsPcAppStatus = resModel.CurrentStatus;
                                extended.IsPcApplicationId = ApplicationId;
                                extended.IsPcCreditApproved = true;
                                _Util.Facade.CustomerFacade.InsertCustomerExtended(extended);
                            }
                            #endregion
                        }
                        else if (resModel.ValidationErrors != null && resModel.ValidationErrors.Count > 0)
                        {
                            int count = 1;
                            foreach (var item in resModel.ValidationErrors)
                            {
                                Message += count + ". " + item + "</br>";
                                count++;
                            }
                            result = false;
                        }
                    }


                }
                else
                {
                    result = true;
                    Message = "Saved Successfully.";
                }

            }
            catch (Exception ex)
            {
                result = false;
                Message = ex.Message;
            }

            return Json(new { result = result, Message = Message, ApplicationId = ApplicationId, from = from });
        }


        public List<SelectListItem> GetCGServiceOptions()
        {

            #region Credentials
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            var strUser = "";
            var strPasswd = "";
            int MerchantId = 0;

            var MerchantIdGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ISPCMerchantId");
            if (MerchantIdGlobal != null)
            {
                MerchantId = Convert.ToInt32(MerchantIdGlobal.Value);
            }
            var UserIdGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ISPCUserName");
            if (UserIdGlobal != null)
            {
                strUser = UserIdGlobal.Value;
            }
            var PasswordGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ISPCPassword");
            if (PasswordGlobal != null)
            {
                strPasswd = PasswordGlobal.Value;
            }
            #endregion
            #region In Production

            string Url = "";
            var IsPcInProductionGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ISPCInProduction");
            bool InProduction = false;
            if (IsPcInProductionGlobal != null && IsPcInProductionGlobal.Value.ToLower() == "true")
            {
                InProduction = true;
                Url = " https://merchant.theispc.com/api/";
            }
            else
            {
                InProduction = false;
                Url = "https://mws-test.theispc.com/api/";
            }
            #endregion
            List<SelectListItem> OptionList = new List<SelectListItem>();
            OptionList.Add(new SelectListItem()
            {
                Text = "Select One",
                Value = "-1"
            });
            try
            {
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                string authheadertext = Convert.ToBase64String(Encoding.Default.GetBytes(strUser + ":" + strPasswd)).Trim();
                var client = new RestClient(Url + "CGOptionCodeService");
                var request = new RestRequest(Method.POST);
                request.AddHeader("postman-token", "9e6a6130-7e24-2185-3bfd-e8e8dfae8182");
                request.AddHeader("cache-control", "no-cache");
                request.AddHeader("authorization", "Basic " + authheadertext);
                ServiceOptionInput optionInput = new ServiceOptionInput()
                {
                    MerchantId = MerchantId
                };
                var content = JsonConvert.SerializeObject(optionInput);
                request.AddParameter("application/json", content, ParameterType.RequestBody);

                IRestResponse response = client.Execute(request);

                if (response != null)
                {
                    IsPcOptionModel optionModel = new IsPcOptionModel();
                    optionModel = Newtonsoft.Json.JsonConvert.DeserializeObject<IsPcOptionModel>(response.Content);
                    if (optionModel.Errors != null && optionModel.Errors.Count > 0)
                    {

                    }
                    else if (optionModel.OptionCodeList != null && optionModel.OptionCodeList.Count > 0)
                    {


                        OptionList.AddRange(optionModel.OptionCodeList.Select(x =>
                             new SelectListItem()
                             {
                                 Text = x.OptionCodeDescription.ToString(),
                                 Value = x.OptionCodeID.ToString()
                             }).ToList());

                    }
                }
            }
            catch (Exception ex)
            {
                return OptionList;
            }

            return OptionList;
        }
        public JsonResult GetIsPcFinanceStatus(Guid CustomerId, int? ApplicationId)
        {

            #region Credentials
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            var strUser = "";
            var strPasswd = "";
            int MerchantId = 0;

            var MerchantIdGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ISPCMerchantId");
            if (MerchantIdGlobal != null)
            {
                MerchantId = Convert.ToInt32(MerchantIdGlobal.Value);
            }
            var UserIdGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ISPCUserName");
            if (UserIdGlobal != null)
            {
                strUser = UserIdGlobal.Value;
            }
            var PasswordGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ISPCPassword");
            if (PasswordGlobal != null)
            {
                strPasswd = PasswordGlobal.Value;
            }
            #endregion
            #region In Production

            string Url = "";
            var IsPcInProductionGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ISPCInProduction");
            bool InProduction = false;
            if (IsPcInProductionGlobal != null && IsPcInProductionGlobal.Value.ToLower() == "true")
            {
                InProduction = true;
                Url = " https://merchant.theispc.com/api/";
            }
            else
            {
                InProduction = false;
                Url = "https://mws-test.theispc.com/api/";
            }
            #endregion
            bool result = false;
            string Message = "";
            try
            {
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                string authheadertext = Convert.ToBase64String(Encoding.Default.GetBytes(strUser + ":" + strPasswd)).Trim();
                var client = new RestClient(Url + "CGStatus/" + ApplicationId);
                var request = new RestRequest(Method.GET);
                request.AddHeader("postman-token", "9e6a6130-7e24-2185-3bfd-e8e8dfae8182");
                request.AddHeader("cache-control", "no-cache");
                request.AddHeader("authorization", "Basic " + authheadertext);
                IRestResponse response = client.Execute(request);
                if (response != null)
                {
                    IsPcStatusModel resModel = new IsPcStatusModel();
                    resModel = Newtonsoft.Json.JsonConvert.DeserializeObject<IsPcStatusModel>(response.Content);
                    if (string.IsNullOrEmpty(resModel.ErrorMessage))
                    {
                        result = true;
                        Message = "Decition: " + resModel.Decision + "</br> Current Status: " + resModel.CurrentStatus;
                        if (resModel.ProcessingMessages != null && resModel.ProcessingMessages.Count() > 0)
                        {
                            Message += "\n Processing Message : ";
                            foreach (var item in resModel.ProcessingMessages)
                            {
                                Message += item + "\n";
                            }
                        }
                        if (resModel.FundingOnHoldMessage != null)
                        {
                            Message += "\n Funding On HoldMessage : " + resModel.FundingOnHoldMessage;

                        }
                        if (resModel.AnalystNotes != null && resModel.AnalystNotes.Count() > 0)
                        {
                            Message += "\n Analyst Notes : ";
                            foreach (var item in resModel.AnalystNotes)
                            {
                                Message += item + "\n";
                            }
                        }
                    }
                    else
                    {
                        result = false;
                        Message = resModel.ErrorMessage;
                    }
                    if (!string.IsNullOrEmpty(resModel.CurrentStatus))
                    {

                        #region Insert on customer extended
                        CustomerExtended extended = new CustomerExtended();

                        extended = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(CustomerId);
                        if (extended != null)
                        {
                            extended.IsPcAppStatus = resModel.CurrentStatus;

                            _Util.Facade.CustomerFacade.UpdateCustomerExtended(extended);
                        }
                        else
                        {
                            extended.CustomerId = CustomerId;
                            extended.IsPcAppStatus = resModel.CurrentStatus;

                            _Util.Facade.CustomerFacade.InsertCustomerExtended(extended);
                        }
                        #endregion
                    }

                }
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                result = false;
                Message = "Internal Error.";
            }
            return Json(new { result = result, Message = Message, ApplicationId = ApplicationId });
        }

        public JsonResult SendEcontractForISPC(Guid CustomerId, IspcAccountInfo accInfo)
        {

            #region Credentials
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            var strUser = "";
            var strPasswd = "";
            int MerchantId = 0;

            var MerchantIdGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ISPCMerchantId");
            if (MerchantIdGlobal != null)
            {
                MerchantId = Convert.ToInt32(MerchantIdGlobal.Value);
            }
            var UserIdGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ISPCUserName");
            if (UserIdGlobal != null)
            {
                strUser = UserIdGlobal.Value;
            }
            var PasswordGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ISPCPassword");
            if (PasswordGlobal != null)
            {
                strPasswd = PasswordGlobal.Value;
            }
            #endregion
            #region In Production

            string Url = "";
            var IsPcInProductionGlobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "ISPCInProduction");
            bool InProduction = false;
            if (IsPcInProductionGlobal != null && IsPcInProductionGlobal.Value.ToLower() == "true")
            {
                InProduction = true;
                Url = " https://merchant.theispc.com/api/";
            }
            else
            {
                InProduction = false;
                Url = "https://mws-test.theispc.com/api/";
            }
            #endregion
            bool result = false;
            string Message = "";
            CustomerExtended cusExt = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(CustomerId);
            if (cusExt != null)
            {
                accInfo.ApplicationId = cusExt.IsPcApplicationId;
                if (!string.IsNullOrEmpty(accInfo.ApplicantHomePhone))
                {
                    accInfo.ApplicantHomePhone = accInfo.ApplicantHomePhone.Replace("-", "");
                }
                if (!string.IsNullOrEmpty(accInfo.ApplicantCellPhone))
                {
                    accInfo.ApplicantCellPhone = accInfo.ApplicantCellPhone.Replace("-", "");
                }
                if (!string.IsNullOrEmpty(accInfo.CoApplicantHomePhone))
                {
                    accInfo.CoApplicantHomePhone = accInfo.CoApplicantHomePhone.Replace("-", "");
                }
                if (!string.IsNullOrEmpty(accInfo.CoApplicantCellPhone))
                {
                    accInfo.CoApplicantCellPhone = accInfo.CoApplicantCellPhone.Replace("-", "");
                }
                accInfo.SignatureRequired = true;
                var content = JsonConvert.SerializeObject(accInfo);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

                string authheadertext = Convert.ToBase64String(Encoding.Default.GetBytes(strUser + ":" + strPasswd)).Trim();
                var client = new RestClient(Url + "CGESignByEmail");
                var request = new RestRequest(Method.POST);
                request.AddHeader("postman-token", "9e6a6130-7e24-2185-3bfd-e8e8dfae8182");
                request.AddHeader("cache-control", "no-cache");
                request.AddHeader("authorization", "Basic " + authheadertext);
                request.AddParameter("application/json", content, ParameterType.RequestBody);
                IRestResponse response = client.Execute(request);
                if (response != null)
                {

                    IspcESigningResponse resModel = new IspcESigningResponse();
                    resModel = Newtonsoft.Json.JsonConvert.DeserializeObject<IspcESigningResponse>(response.Content);
                    if (!string.IsNullOrEmpty(resModel.ErrorCode) || !string.IsNullOrEmpty(resModel.ErrorMessage))
                    {
                        result = false;
                        if (resModel.MissingEsignFields != null && resModel.MissingEsignFields.Count > 0)
                        {
                            foreach (var item in resModel.MissingEsignFields)
                            {
                                Message += item + "</br>";
                            }
                        }
                        if (!string.IsNullOrEmpty(resModel.ErrorMessage))
                        {
                            Message += resModel.ErrorMessage;
                        }

                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(resModel.Status))
                        {
                            Message = resModel.Status;
                        }
                        result = true;
                    }



                }

            }
            return Json(new { result = result, Message = Message });
        }
        #endregion

        #region Power Pay
        //public JsonResult PowerPayApplication()
        //{
        //    var client = new RestClient("https://powerpay.qa.defisolutions.com/Integrator/SubmitApplication?authtoken=e236c5132fff45379f7bbcd1fcfccd64");
        //    var request = new RestRequest(Method.POST);
        //    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
        //    request.AddHeader("postman-token", "a6549e8e-5882-5b6c-ce16-a3de7d85cc99");
        //    request.AddHeader("cache-control", "no-cache");
        //    request.AddHeader("connection", "Keep-alive");

        //    request.AddHeader("content-type", "application/xml");
        //    request.AddParameter("application/xml", "\n<loanapplication>\n    <DefiSourceSystemId>WEB4</DefiSourceSystemId>\n    <DefiDealerId>99998</DefiDealerId>\n    <RequestedLoanAmount>25,500</RequestedLoanAmount>\n    <ApplicationAffiliate>ONIT</ApplicationAffiliate>\n\t<ith_email>test@gmail.com</ith_email>\n\t<IHRMobileNumber>2155551212</IHRMobileNumber>\n    <PrimaryApplicant>\n        <Firstname>JANE</Firstname>\n        <Lastname>BREWSTER</Lastname>\n        <DOB>01/16/1977</DOB>\n        <Phone>2815859900</Phone>\n        <Email>jr@getpowerpay.com</Email>\n        <SSN>666387636</SSN>\n        <US_Citizen>YES</US_Citizen>\n        <PPAddressPB>1313 46th Street</PPAddressPB>\n        <AddressStreetNumber>1313</AddressStreetNumber>\n        <AddressStreetName>46th</AddressStreetName>\n        <AddressStreetType>Street</AddressStreetType>\n        <POBox></POBox>\n        <City>Port Arthur</City>\n        <State>TX</State>\n        <Zip>77642</Zip>\n        <AddressHouseType>Own</AddressHouseType>\n        <ActiveMilitary>No</ActiveMilitary>\n        <DriversLicense>22044400</DriversLicense>\n        <DriversLicenseState>TX</DriversLicenseState>\n        <AnnualIncome>80,000</AnnualIncome>\n        <IncomeFrequency>Annually</IncomeFrequency>\n        <EmployerOccupation>Manager</EmployerOccupation>\n        <EmployerName>IBM</EmployerName>\n        <EmployerZip>76651</EmployerZip>\n        <Employment_Type>Employed</Employment_Type>\n        <Employer_Years>3</Employer_Years>\n    </PrimaryApplicant>\n    <CoApplicant>\n        <Firstname></Firstname>\n        <Lastname></Lastname>\n        <DOB></DOB>\n        <Phone></Phone>\n        <Email></Email>\n        <SSN></SSN>\n        <US_Citizen></US_Citizen>\n        <PPAddressCB></PPAddressCB>\n        <AddressStreetNumber></AddressStreetNumber>\n        <AddressStreetName></AddressStreetName>\n        <AddressStreetType></AddressStreetType>\n        <POBox></POBox>\n        <City></City>\n        <State></State>\n        <Zip></Zip>\n        <AddressHouseType></AddressHouseType>\n        <ActiveMilitary></ActiveMilitary>\n        <DriversLicense></DriversLicense>\n        <DriversLicenseState></DriversLicenseState>\n        <AnnualIncome></AnnualIncome>\n        <IncomeFrequency></IncomeFrequency>\n        <EmployerOccupation></EmployerOccupation>\n        <EmployerName></EmployerName>\n        <EmployerZip></EmployerZip>\n        <Employment_Type></Employment_Type>\n        <Employer_Years></Employer_Years>\n    </CoApplicant>\n</loanapplication>", ParameterType.RequestBody);
        //    IRestResponse response = client.Execute(request);
        //    return null;
        //}
        public static string GetXMLFromObject(object o)
        {
            StringWriter sw = new StringWriter();
            XmlTextWriter tw = null;
            try
            {
                XmlSerializer serializer = new XmlSerializer(o.GetType());
                tw = new XmlTextWriter(sw);
                serializer.Serialize(tw, o);
            }
            catch (Exception ex)
            {
                //logger.Error(ex);
                //Handle Exception Code
            }
            finally
            {
                sw.Close();
                if (tw != null)
                {
                    tw.Close();
                }
            }
            return sw.ToString();
        }
        public ActionResult AddFinancePowerPay(Guid CustomerId)
        {
            PowerPayFinance creditApp = _Util.Facade.CustomerFacade.GetCustomerPowerPayAppByCustomerId(CustomerId);
            if (creditApp == null)
            {
                Customer cus = _Util.Facade.CustomerFacade.GetCustomerByCustomerGuidId(CustomerId);
                creditApp = new PowerPayFinance();
                creditApp.City = cus.City;
                creditApp.State = cus.State;
                creditApp.ZipCode = cus.ZipCode;
                creditApp.Firstname = cus.FirstName;
                creditApp.Lastname = cus.LastName;
                creditApp.SSN = cus.SSN;
                creditApp.DOB = cus.DateofBirth;
            }

            return View(creditApp);
        }
        public T Deserialize<T>(string input) where T : class
        {
            System.Xml.Serialization.XmlSerializer ser = new System.Xml.Serialization.XmlSerializer(typeof(T));

            using (StringReader sr = new StringReader(input))
            {
                return (T)ser.Deserialize(sr);
            }
        }
        public JsonResult ApplyForPowerPayFinance(PowerPayFinance model)
        {
            bool result = false;
            string ApplicationId = "";
            string Message = "";

            try
            {
                var client = new RestClient("https://powerpay.qa.defisolutions.com/Integrator/SubmitApplication?authtoken=e236c5132fff45379f7bbcd1fcfccd64");
                var request = new RestRequest(Method.POST);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                request.AddHeader("postman-token", "a6549e8e-5882-5b6c-ce16-a3de7d85cc99");
                request.AddHeader("cache-control", "no-cache");
                request.AddHeader("connection", "Keep-alive");

                request.AddHeader("content-type", "application/xml");
                if (model.Id > 0)
                {
                    PowerPayFinance app = _Util.Facade.CustomerFacade.GetCustomerPowerPayAppById(model.Id);
                    app.DefiDealerId = 99998;
                    app.DefiSourceSystemId = "WEB4";
                    app.ApplicationAffiliate = "ONIT";
                    app.Firstname = model.Firstname;
                    app.Lastname = model.Lastname;
                    app.POBox = model.POBox;
                    app.DOB = model.DOB;
                    app.Phone = model.Phone;
                    app.Email = model.Email;
                    app.SSN = model.SSN;
                    app.USCitizen = model.USCitizen;
                    app.PPAddressPB = model.PPAddressPB;
                    app.AddressStreetNumber = model.AddressStreetNumber;
                    app.AddressHouseType = model.AddressHouseType;
                    app.AddressStreetName = model.AddressStreetName;
                    app.City = model.City;
                    app.State = model.State;
                    app.ZipCode = model.ZipCode;

                    app.AddressHouseType = model.AddressHouseType;
                    app.ActiveMilitary = model.ActiveMilitary;
                    app.DriversLicense = model.DriversLicense;
                    app.DriversLicenseState = model.DriversLicenseState;
                    app.AnnualIncome = model.AnnualIncome.HasValue ? model.AnnualIncome.Value : 0.0;
                    app.IncomeFrequency = model.IncomeFrequency;
                    app.EmployerOccupation = model.EmployerOccupation;
                    app.EmployerName = model.EmployerName;
                    app.EmploymentType = model.EmploymentType;
                    app.EmployerZip = model.EmployerZip;
                    app.EmployerYears = model.EmployerYears.HasValue ? model.EmployerYears.Value : 0;
                    app.RequestedLoanAmount = model.RequestedLoanAmount.HasValue ? model.RequestedLoanAmount.Value : 0.0;
                    app.ith_email = model.ith_email;
                    app.IHRMobileNumber = model.IHRMobileNumber;
                    app.CoFirstname = model.CoFirstname;
                    app.CoLastname = model.CoLastname;
                    app.CoPOBox = model.CoPOBox;
                    app.CoDOB = model.CoDOB;
                    app.CoPhone = model.CoPhone;
                    app.CoEmail = model.CoEmail;
                    app.CoSSN = model.CoSSN;
                    app.CoUSCitizen = model.CoUSCitizen;
                    app.CoPPAddressPB = model.CoPPAddressPB;
                    app.CoAddressStreetNumber = model.CoAddressStreetNumber;
                    app.CoAddressHouseType = model.CoAddressHouseType;
                    app.CoAddressStreetName = model.CoAddressStreetName;
                    app.CoCity = model.CoCity;
                    app.CoState = model.CoState;
                    app.CoZipCode = model.CoZipCode;

                    app.CoAddressHouseType = model.CoAddressHouseType;
                    app.CoActiveMilitary = model.CoActiveMilitary;
                    app.CoDriversLicense = model.CoDriversLicense;
                    app.CoDriversLicenseState = model.CoDriversLicenseState;
                    app.CoAnnualIncome = model.CoAnnualIncome.HasValue ? model.CoAnnualIncome.Value : 0.0;
                    app.CoIncomeFrequency = model.CoIncomeFrequency;
                    app.CoEmployerOccupation = model.CoEmployerOccupation;
                    app.CoEmployerName = model.CoEmployerName;
                    app.CoEmploymentType = model.CoEmploymentType;
                    app.CoEmployerZip = model.CoEmployerZip;
                    app.CoEmployerYears = model.CoEmployerYears.HasValue ? model.CoEmployerYears.Value : 0;
                    _Util.Facade.CustomerFacade.UpdatePowerPayCreditApp(app);


                }
                else
                {

                    _Util.Facade.CustomerFacade.InsertPowerPayCreditApp(model);
                    model.DefiDealerId = 99998;
                    model.DefiSourceSystemId = "WEB4";
                    model.ApplicationAffiliate = "ONIT";

                }

                if (model.IsApply == true)
                {
                    Loanapplication powerModel = new Loanapplication();

                    powerModel.DefiDealerId = "99998";
                    powerModel.DefiSourceSystemId = "WEB4";
                    powerModel.ApplicationAffiliate = "ONIT";
                    powerModel.RequestedLoanAmount = model.RequestedLoanAmount.HasValue ? model.RequestedLoanAmount.Value.ToString() : "";
                    powerModel.IHRMobileNumber = model.IHRMobileNumber;
                    powerModel.Ith_email = model.ith_email;

                    powerModel.PrimaryApplicant = new PrimaryApplicant()
                    {
                        Firstname = model.Firstname,
                        Lastname = model.Lastname,
                        DOB = model.DOB.HasValue ? model.DOB.Value.ToString("MM/dd/yyyy") : "",
                        SSN = model.SSN,
                        Phone = model.Phone,
                        Email = model.Email,
                        City = model.City,
                        State = model.State,
                        Zip = model.ZipCode,
                        EmployerName = model.EmployerName,
                        EmployerOccupation = model.EmployerOccupation,
                        EmployerZip = model.EmployerZip,
                        Employer_Years = model.EmployerYears.HasValue ? model.EmployerYears.ToString() : "",
                        Employment_Type = model.EmploymentType,
                        ActiveMilitary = model.ActiveMilitary,
                        AddressHouseType = model.AddressHouseType,
                        AddressStreetName = model.AddressStreetName,
                        AddressStreetNumber = model.AddressStreetNumber,
                        AddressStreetType = model.AddressStreetType,
                        AnnualIncome = model.AnnualIncome.HasValue ? model.AnnualIncome.Value.ToString() : "",
                        PPAddressPB = model.PPAddressPB,
                        DriversLicense = model.DriversLicense,
                        DriversLicenseState = model.DriversLicenseState,
                        IncomeFrequency = model.IncomeFrequency,
                        POBox = model.POBox,
                        US_Citizen = model.USCitizen

                    };
                    powerModel.CoApplicant = new CoApplicant()
                    {
                        Firstname = model.CoFirstname,
                        Lastname = model.CoLastname,
                        DOB = model.CoDOB.HasValue ? model.CoDOB.Value.ToString("MM/dd/yyyy") : "",
                        SSN = model.CoSSN,
                        Phone = model.CoPhone,
                        Email = model.CoEmail,
                        City = model.CoCity,
                        State = model.CoState,
                        Zip = model.CoZipCode,
                        EmployerName = model.CoEmployerName,
                        EmployerOccupation = model.CoEmployerOccupation,
                        EmployerZip = model.CoEmployerZip,
                        Employer_Years = model.CoEmployerYears.HasValue ? model.CoEmployerYears.ToString() : "",
                        Employment_Type = model.CoEmploymentType,
                        ActiveMilitary = model.CoActiveMilitary,
                        AddressHouseType = model.CoAddressHouseType,
                        AddressStreetName = model.CoAddressStreetName,
                        AddressStreetNumber = model.CoAddressStreetNumber,
                        AddressStreetType = model.CoAddressStreetType,
                        AnnualIncome = model.CoAnnualIncome.HasValue ? model.CoAnnualIncome.Value.ToString() : "",
                        DriversLicense = model.CoDriversLicense,
                        DriversLicenseState = model.CoDriversLicenseState,
                        IncomeFrequency = model.CoIncomeFrequency,
                        POBox = model.CoPOBox,
                        US_Citizen = model.CoUSCitizen
                    };

                    var content = GetXMLFromObject(powerModel);
                    request.AddParameter("text/xml", content, ParameterType.RequestBody);
                    try
                    {
                        IRestResponse response = client.Execute(request);
                        using (System.IO.StreamWriter file = new System.IO.StreamWriter(System.Web.Hosting.HostingEnvironment.MapPath(@"~\SchedulerReports\PowerPayApiresponse.txt"), true))
                        {
                            file.WriteLine(response.Content);
                            file.Close();
                        }
                        if (response != null)
                        {
                            GenericSubmitAppResponse resModel = new GenericSubmitAppResponse();
                            //response.Content = @"<?xml version='1.0' encoding='utf-8'?>
                            //                        <GenericSubmitAppResponse xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>
                            //                          <Errors />
                            //                          <Success>true</Success>
                            //                          <ApplicationNumber>5252</ApplicationNumber>
                            //                        </GenericSubmitAppResponse>";
                            resModel = Deserialize<GenericSubmitAppResponse>(response.Content);
                            if (resModel != null && resModel.Success == "true")
                            {
                                Message = "Application submitted successfully";
                                ApplicationId = resModel.ApplicationNumber;
                                result = true;
                                #region Insert on customer extended
                                CustomerExtended extended = new CustomerExtended();

                                extended = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(model.CustomerId);
                                if (extended != null)
                                {
                                    extended.PowerPayAppStatus = resModel.Success;
                                    extended.PowerPayAppId = ApplicationId;

                                    _Util.Facade.CustomerFacade.UpdateCustomerExtended(extended);
                                    extended = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(model.CustomerId);
                                }
                                else
                                {
                                    extended.CustomerId = model.CustomerId;
                                    extended.PowerPayAppStatus = resModel.Success;
                                    extended.PowerPayAppId = ApplicationId;

                                    _Util.Facade.CustomerFacade.InsertCustomerExtended(extended);
                                }
                                #endregion
                            }
                            else if (string.IsNullOrEmpty(resModel.Errors))
                            {
                                Message = response.Content;
                                result = false;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        using (System.IO.StreamWriter file = new System.IO.StreamWriter(System.Web.Hosting.HostingEnvironment.MapPath(@"~\SchedulerReports\PowerPayApiError.txt"), true))
                        {
                            file.WriteLine(ex);
                            file.Close();
                        }
                        result = false;
                        Message = "Internal Error!";
                    }



                }
                else
                {
                    result = true;
                    Message = "Saved Successfully.";
                }

            }
            catch (Exception ex)
            {
                result = false;
                Message = ex.Message;
            }

            return Json(new { result = result, Message = Message, ApplicationId = ApplicationId });
        }

        #endregion

        [HttpPost]
        public JsonResult SignAgrSendToCus(int CustId, bool IsSignAgrSendToCus)
        {
            bool result = false;
            if (CustId > 0)
            {
                var cusDetails = _Util.Facade.CustomerFacade.GetCustomerById(CustId);
                if (cusDetails != null)
                {
                    var cusExtDetails = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(cusDetails.CustomerId);
                    if (cusExtDetails != null)
                    {
                        cusExtDetails.IsSignAgrSendToCus = IsSignAgrSendToCus;
                        result = _Util.Facade.CustomerFacade.UpdateCustomerExtended(cusExtDetails);
                    }
                }
            }
            return Json(result);
        }
        public bool SmartIAgreeSetupAndSubmit(int? Id, bool? recreate, int? agreementtempid, bool? firstpage, int? ticketid, bool? isinvoice, string invoiceid, bool? isestimator, int? estid, Guid? userid, bool? commercial,string EstimatorId)
        { 
            WebClient webClient;
            byte[] fileBytes1;
            string Temp_FileName;
            bool result = false;

            #region Check Default Billing Tax
            bool defaultBillTaxVal = true;
            Guid tempTicketId = Guid.Empty;
            Guid CustomerGuidId = Guid.Empty;
            GlobalSetting defaultBillTax = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByOnlyKey("DefaultCustomerBillingTax");
            if (defaultBillTax != null)
            {
                if (defaultBillTax.Value.ToLower() == "true")
                {
                    defaultBillTaxVal = true;
                }
                else
                {
                    defaultBillTaxVal = false;
                }
            }
            bool AfterSubmitDocumentSave = false;
            GlobalSetting GlobSet = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByOnlyKey("AfterSubmitDocumentSave");
            if (GlobSet != null && !string.IsNullOrWhiteSpace(GlobSet.Value))
            {
                if (GlobSet.Value == "true")
                {
                    AfterSubmitDocumentSave = true;
                }
            }
            #endregion
            if (recreate.HasValue && recreate.Value == true)
            {
                if (!Id.HasValue)
                    return false;
                Customer _Customer = new Customer();
                CustomerCompany custommerCompany = new CustomerCompany();
                Guid CompanyId = new Guid();
                if (User.Identity.IsAuthenticated)
                {
                    var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
                    CompanyId = CurrentUser.CompanyId.Value;
                    custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(Id.Value);
                }
                else
                {
                    custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(Id.Value);
                    CompanyId = custommerCompany.CompanyId;
                }
                Company _Company = new Company { CompanyId = CompanyId };

                if (Id.Value > 0)
                {
                    _Customer = _Util.Facade.CustomerFacade.GetCustomersById(Id.Value);
                    #region Insert Monthly Monitoring Fee
                    #region ACH discount
                    double discountAmount = 0;
                    var objpayinfocus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayFor(_Customer.CustomerId);
                    if (objpayinfocus != null)
                    {
                        var objpayprofile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(objpayinfocus.PaymentInfoId);
                        if (objpayprofile != null && objpayprofile.Type.ToLower().IndexOf("ach") > -1)
                        {
                            var objglobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(custommerCompany.CompanyId, "ACHDiscount");
                            if (objglobal != null)
                            {
                                discountAmount = Convert.ToDouble(objglobal.Value);
                            }
                        }
                    }
                    #endregion
                    List<CustomerPackageService> CustomerPackageServiceList = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(_Customer.CustomerId, custommerCompany.CompanyId);
                    double? ServiceCost = CustomerPackageServiceList.Where(x => x.IsARBEnabled).Sum(x => x.Total);
                    double ServiceCostTax = 0;
                    if (ServiceCost.HasValue && ServiceCost.Value > 0)
                    {
                        ServiceCost = ServiceCost - discountAmount;
                        #region Tax Calculations
                        Guid tempCustomerId = new Guid();
                        if (_Customer != null)
                        {
                            tempCustomerId = _Customer.CustomerId;
                        }
                        GlobalSetting GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(custommerCompany.CompanyId, tempCustomerId);
                        if (GetSalesTax != null)
                        {
                            ServiceCostTax = Math.Round((ServiceCost.Value * Convert.ToDouble(GetSalesTax.Value)) / 100, 2, MidpointRounding.AwayFromZero);
                        }
                        #endregion
                        _Customer.MonthlyMonitoringFee = ServiceCost.Value.ToString();
                        _Customer.BillAmount = defaultBillTaxVal ? (ServiceCost.Value + ServiceCostTax) : ServiceCost.Value;
                        _Customer.TotalTax = defaultBillTaxVal ? ServiceCostTax : 0;
                        _Customer.BillTax = defaultBillTaxVal;
                        _Util.Facade.CustomerFacade.UpdateCustomer(_Customer);
                    }
                    #endregion
                    CustomerExtended extended = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(_Customer.CustomerId);
                    if (extended != null)
                    {
                        extended.ContractStartDate = extended.ContractStartDate??DateTime.Now;
                        _Util.Facade.CustomerFacade.UpdateCustomerExtended(extended);
                    }
                    else
                    {
                        extended = new CustomerExtended();
                        extended.CustomerId = _Customer.CustomerId;
                        extended.ContractStartDate = extended.ContractStartDate??DateTime.Now;
                        _Util.Facade.CustomerFacade.InsertCustomerExtended(extended);
                    }
                }
                if (AfterSubmitDocumentSave == true)
                {
                    if(!string.IsNullOrWhiteSpace(EstimatorId))
                    {
                        _Customer.EstimatorId = EstimatorId;
                    } 
                    result = IAgreeCustomerFileUpload(_Customer, _Company, new Guid(), agreementtempid.HasValue ? agreementtempid.Value : 0, true, firstpage.HasValue ? firstpage.Value : false, (ticketid.HasValue ? ticketid.Value : 0), (recreate.HasValue ? recreate.Value : false), (isinvoice.HasValue ? isinvoice.Value : false), (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : ""), (isestimator.HasValue ? isestimator.Value : false), (estid.HasValue ? estid.Value : 0), (userid != Guid.Empty ? userid : Guid.Empty), commercial.HasValue ? commercial.Value : false);
                }
                #region recreate agreement answer
                bool isques = false;

                var objsetting = _Util.Facade.GlobalSettingsFacade.GetGlobalsettingBySearchKeyAndCompanyId("ContractAgreementquestionnaire", _Company.CompanyId);
                if (objsetting != null)
                {
                    isques = Convert.ToBoolean(objsetting.Value);
                }
                if (isques == true)
                {
                    AgreementQuestionAnswerPDFModel model = new AgreementQuestionAnswerPDFModel();
                    model.Customer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(_Customer.CustomerId);
                    model.AgreementQuestion = _Util.Facade.AgreementFacade.GetAllAgreementQuestionByCustomerType(_Customer.Type);
                    model.AgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(_Customer.CustomerId);
                    int term = 0;
                    double contract;
                    string conterm = "";
                    if (model.Customer != null)
                    {
                        bool success = Double.TryParse(model.Customer.ContractTeam, out contract);
                        if (success)
                        {
                            term = Convert.ToInt32(Math.Round(contract * 12));
                            ViewBag.termid = term;
                            if (term > 1)
                            {
                                ViewBag.TermMonth = " month";
                            }
                            else
                            {
                                ViewBag.TermMonth = " month";
                            }
                        }
                        conterm = string.Concat(ViewBag.termid, ViewBag.TermMonth);
                        foreach (var item in model.AgreementQuestion)
                        {
                            item.Title = string.Format(item.Title, conterm);
                        }
                    }
                    ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("~/Views/Agreement/AgreementQuestionAnswerPDF.cshtml", model)
                    {
                        PageSize = Rotativa.Options.Size.A4,
                        PageOrientation = Rotativa.Options.Orientation.Portrait,
                        PageMargins = { Left = 1, Right = 1 },

                    };
                    byte[] applicationPDFData = actionPDF.BuildPdf(ControllerContext);
                    #region file save
                    //Random rand = new Random();
                    //string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
                    //var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(_Company.CompanyId).CompanyName.ReplaceSpecialChar();
                    //var pdftempFolderName = string.Format(filename, comname) + _Customer.Id + "_AgreementAnswer.pdf";
                    //string Serverfilename = FileHelper.GetFileFullPath(pdftempFolderName);
                    //FileHelper.SaveFile(applicationPDFData, Serverfilename);
                    #endregion

                    //// "mayur" AWS S3 Changes //// Start

                    #region File Save on AWS S3

                    Random rand = new Random();
                    string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
                    filename = filename.TrimEnd('/');

                    var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(_Company.CompanyId).CompanyName.ReplaceSpecialChar();

                    string FilePath = string.Format(filename, comname);
                    string FileName = _Customer.Id + "_AgreementMail.pdf";

                    string FileKey = string.Format($"{FilePath}/{FileName}");

                    var returnurl = "";

                    var task = Task.Run(async () => {
                        AWSS3ObjectService AWSobject = new AWSS3ObjectService();

                        await AWSobject.UploadFile(FileKey, applicationPDFData);
                        await AWSobject.MakePublic(FileName, FilePath);
                    });

                    task.Wait();

                    /// "mayur" used thread for async s3 methods : start

                    //Thread thread = new Thread(async () => {

                    //    AWSS3ObjectService AWSobject = new AWSS3ObjectService();

                    //    await AWSobject.UploadFile(FileKey, applicationPDFData);
                    //    await AWSobject.MakePublic(FileName, FilePath);

                    //});
                    //thread.Start();

                    ////// temp solution for thread to complete
                    //Thread.Sleep(5000);
                    ////


                    /// "mayur" used thread for async s3 methods : End



                    returnurl = String.Format(AppConfig.AWSS3Url, AppConfig.AWSS3BucketName);
                    returnurl = returnurl + FileKey;


                    ViewBag.ReturnUrl = returnurl;
                    ViewBag.FileName = FileName;
                    ViewBag.FileName_Path = FilePath + '/' + FileName;


                    #endregion

                    //// "mayur" AWS S3 Changes //// End


                    //// ""Mayur" Calculate File Size : start
                    #region Calculate file size

                    var _fileSize = applicationPDFData.Length / 1024;

                    #endregion
                    //// ""Mayur" Calculate File Size : End




                    CustomerFile CustomerFile = new CustomerFile()
                    {
                        CompanyId = _Company.CompanyId,
                        FileId = Guid.NewGuid(),
                        FileSize= _fileSize,
                        CustomerId = _Customer.CustomerId,
                        FileDescription = _Customer.Id + "_Recreate_Agreement_Answers.pdf",
                        Filename = "/" + ViewBag.FileName_Path,
                        FileFullName = _Customer.Id + "_RecreateAgreementAnswer.pdf",
                        Uploadeddate = DateTime.Now.UTCCurrentTime(),
                        IsActive = true,
                        CreatedBy = _Customer.Soldby1,
                        CreatedDate = DateTime.Now,
                        UpdatedBy = _Customer.Soldby1,
                        UpdatedDate = DateTime.Now,
                        WMStatus = LabelHelper.WatermarkStatus.Pending,
                        AWSProcessStatus = LabelHelper.AWSProcessStatus.Local,
                        AWSUploadTS = DateTime.Now
                    };
                    _Util.Facade.CustomerFileFacade.InsertCustomerFile(CustomerFile);

                }
                #endregion
            }
            else
            {
                if (!Id.HasValue)
                    return false;
                Customer _Customer = new Customer();
                CustomerCompany custommerCompany = new CustomerCompany();
                Guid CompanyId = new Guid();
                if (User.Identity.IsAuthenticated)
                {
                    var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
                    CompanyId = CurrentUser.CompanyId.Value;
                    custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(Id.Value);
                }
                else
                {
                    custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(Id.Value);
                    CompanyId = custommerCompany.CompanyId;
                }
                Company _Company = new Company { CompanyId = CompanyId };

                if (Id.Value > 0)
                {
                    _Customer = _Util.Facade.CustomerFacade.GetCustomersById(Id.Value);
                }
                //SalesCommisionUpdateInsert(_Customer, _Company);
                #region Agreement History
                var cusAgrHistory = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementHistory(_Customer.CustomerId, LabelHelper.CustomerAgreementHistory.AgreementComplete);
                if (cusAgrHistory == null)
                {
                    CustomerAgreement cusAgrModel = new CustomerAgreement()
                    {
                        CompanyId = custommerCompany.CompanyId,
                        CustomerId = _Customer.CustomerId,
                        IP = AppConfig.GetIP,
                        UserAgent = AppConfig.GetUserAgent,
                        Type = LabelHelper.CustomerAgreementHistory.AgreementComplete,
                        AddedDate = DateTime.UtcNow
                    };
                    _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(cusAgrModel);
                }
                #endregion
                if (custommerCompany.IsLead == false || (!string.IsNullOrWhiteSpace(EstimatorId)))
                {
                    _Customer.IsAgreement = true;
                    _Util.Facade.CustomerFacade.UpdateCustomer(_Customer);
                    Guid soldby = new Guid();
                    if (!string.IsNullOrWhiteSpace(_Customer.Soldby))
                    {
                        soldby = new Guid(_Customer.Soldby);
                    }
                    SendSignedAgreementNotification(CompanyId, soldby, _Customer.FirstName + " " + _Customer.LastName, _Customer.Id);
                    var TicketId = Guid.Empty;


                    var TicketDetails = _Util.Facade.TicketFacade.GetAgreementTicketByCustomerId(_Customer.CustomerId);
                    if (TicketDetails != null)
                    {
                        TicketId = TicketDetails.TicketId;
                    }

                    PackageCustomer packageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(_Customer.CustomerId);

                    #region Kazar Installation Ticket
                    Invoice tempinv = _Util.Facade.InvoiceFacade.GetByInvoiceId(invoiceid);
                    //if ((!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true && tempinv != null && tempinv.Status != LabelHelper.EstimateStatus.Signed) || (!string.IsNullOrWhiteSpace(EstimatorId)))
                    if ((!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true) || (!string.IsNullOrWhiteSpace(EstimatorId)))
                    {
                        #region Insert Ticket
                        //Guid TicketId = Guid.Empty;
                        Guid SoldBy = new Guid();
                        Guid.TryParse(_Customer.Soldby, out SoldBy);
                        CustomerAppointmentEquipment caEquipment = new CustomerAppointmentEquipment();
                        Ticket newTicket = new Ticket();

                        newTicket = new Ticket()
                        {
                            TicketId = Guid.NewGuid(),
                            CompanyId = CompanyId,
                            CustomerId = _Customer.CustomerId,
                            TicketType = LabelHelper.TicketType.Installtion,
                            CreatedBy = new Guid(LabelHelper.SystemUser.ID),
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            CompletionDate = DateTime.Now.UTCCurrentTime(),
                            Status = LabelHelper.TicketStatus.Created,
                            LastUpdatedBy = new Guid(LabelHelper.SystemUser.ID),
                            LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                            HasInvoice = false,
                            HasSurvey = false,
                            IsAgreementTicket = true,
                        };
                        if (packageCustomer != null && packageCustomer.IsNFTTicket.HasValue && packageCustomer.IsNFTTicket.Value)
                        {
                            newTicket.TicketType = "Install NFT";
                        }
                        newTicket.Id = _Util.Facade.TicketFacade.InsertTicket(newTicket);
                        logger.WithProperty("tags", "ticket,insert").WithProperty("params", JsonConvert.SerializeObject(newTicket)).Trace("Ticket Id {Id}", newTicket.Id);
                        if (newTicket != null)
                        {
                            _Util.Facade.InvoiceFacade.UpdateInvoiceTicketIdByCustomerId(newTicket.TicketId, newTicket.CustomerId);
                        }
                        TicketId = newTicket.TicketId;
                        tempTicketId = newTicket.TicketId; ;

                        CustomerAppointment ca = new CustomerAppointment()
                        {
                            AppointmentId = newTicket.TicketId,
                            CompanyId = CompanyId,
                            CustomerId = _Customer.CustomerId,
                            EmployeeId = new Guid(LabelHelper.SystemUser.ID),
                            AppointmentType = newTicket.TicketType,
                            AppointmentDate = DateTime.Now.UTCCurrentTime(),
                            CreatedBy = User.Identity.Name,
                            LastUpdatedBy = User.Identity.Name,
                            LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                            IsAllDay = true,
                        };
                        ca.Id = (int)_Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppoinment(ca);
                        TicketUser TU = new TicketUser()
                        {
                            IsPrimary = true,
                            NotificationOnly = false,
                            AddedBy = SoldBy,
                            AddedDate = DateTime.Now.UTCCurrentTime(),
                            TiketId = newTicket.TicketId,
                            UserId = new Guid(LabelHelper.SystemUser.ID),
                        };
                        TU.Id = _Util.Facade.TicketFacade.InsertTicketUser(TU);
                        Estimator estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(EstimatorId);
                        List<EstimatorDetail> estimatorDetail = _Util.Facade.EstimatorFacade.GetEstimatorDetailListByEstimatorId(EstimatorId);
                        List<EstimatorService> serviceestimator = _Util.Facade.EstimatorFacade.GetEstimatorServicesByEstimatorId(EstimatorId);
                        List<EstimatorService> onetimeserviceestimator = _Util.Facade.EstimatorFacade.GetEstimatorOneTimeServicesByEstimatorId(EstimatorId);


                        #region obaydullah Estimator

                        if (estimatorDetail != null && estimatorDetail.Count > 0)
                        {
                            var EstimatorTotalAmount = Math.Round(estimator.TotalPrice.HasValue ? estimator.TotalPrice.Value : 0, 2);
                            var EstimatorTax = Math.Round(estimator.TaxAmount.HasValue ? estimator.TaxAmount.Value : 0, 2);

                            Invoice tempInv = new Invoice()
                            {
                                CustomerId = _Customer.CustomerId,
                                CompanyId = CompanyId,
                                Amount = estimator.TotalPrice.Value,
                                Tax = Math.Round(estimator.TaxAmount.HasValue ? estimator.TaxAmount.Value : 0, 2),
                                DiscountCode = "",//estimator.Description,
                                DiscountAmount = 0,
                                TotalAmount = EstimatorTotalAmount + EstimatorTax,
                                Status = LabelHelper.InvoiceStatus.Open,
                                InvoiceDate = DateTime.UtcNow,
                                IsEstimate = false,
                                IsBill = false,
                                BillingAddress = "",
                                DueDate = DateTime.UtcNow.AddMonths(1),
                                Terms = "",
                                ShippingAddress = "",
                                ShippingVia = "",
                                ShippingDate = DateTime.UtcNow,
                                TrackingNo = "",
                                ShippingCost = 0,
                                Discountpercent = 0,
                                BalanceDue = EstimatorTotalAmount + EstimatorTax,
                                Deposit = 0,
                                Message = "",
                                TaxType = "",
                                Balance = estimator.ServiceTotalAmount,
                                Memo = "", 
                                LateFee = 0,
                                LateAmount = 0,
                                InstallDate = estimator.EstimateDate,
                                Description = "Payment for equipment (1) months",
                                DiscountType = "percent",
                                BillingCycle = "",
                                EstimateTerm = "",
                                Signature = "",
                                CancelReason = "",
                                CreatedBy = User.Identity.Name,
                                CreatedByUid = soldby,
                                LastUpdatedByUid = soldby,
                                LastUpdatedDate = DateTime.UtcNow,
                                CreatedDate = DateTime.UtcNow,
                                RefType = "",
                                PaymentType = "",
                                BookingId = "",
                                InstallationType = "",
                                SignatureDate = DateTime.UtcNow,
                                InvoiceEmailAddress = _Customer.EmailAddress,
                                InvoiceCcEmailAddress = _Customer.EmailAddress,
                                MonitoringAmount = 0,
                                ContractTerm = estimator.ContractTerm,
                                MonitoringDescription = estimator.Description,
                                IsARBInvoice = false,
                                TransactionId = "",
                                ForteStatus = "",
                                UpfrontMonth = "",
                            };

                            tempInv.IsEstimate = false;
                            tempInv.InvoiceFor = LabelHelper.InvoiceFor.Equipment;
                            tempInv.Status = LabelHelper.InvoiceStatus.Open;
                            tempInv.Id = _Util.Facade.InvoiceFacade.InsertInvoice(tempInv);
                            tempInv.InvoiceId = tempInv.Id.GenerateInvoiceNo();
                            _Util.Facade.InvoiceFacade.UpdateInvoice(tempInv);
                            //createTempInv = tempInv;
                            foreach (var item in estimatorDetail)
                            {
                                Equipment _EquipmentDetailsiitem = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentName(item.PartDescription);
                                if (_EquipmentDetailsiitem != null)
                                {
                                    InvoiceDetail invoiceDetailitem = new InvoiceDetail()
                                    {
                                        InvoiceId = tempInv.InvoiceId,
                                        CreatedDate = DateTime.UtcNow,
                                        InventoryId = Guid.Empty,
                                        EquipmentId = _EquipmentDetailsiitem != null ? _EquipmentDetailsiitem.EquipmentId : Guid.Empty,
                                        EquipName = item.PartDescription,
                                        CompanyId = CompanyId,
                                        Quantity = Convert.ToInt32(item.Qunatity.Value),
                                        UnitPrice = item.UnitCost,
                                        TotalPrice = item.TotalPrice,
                                        CreatedBy = User.Identity.Name,
                                        Taxable = true,
                                        DiscountAmount = 0,
                                        DiscountPercent = 0,
                                        DiscountType = "",
                                        EquipCategory = ""
                                    };
                                    _Util.Facade.InvoiceFacade.InsertInvoiceDetails(invoiceDetailitem);
                                }
                                string CustomerAppointmentEquipmentName = "";

                                CustomerAppointmentEquipment cae = new CustomerAppointmentEquipment()
                                {
                                    AppointmentId = TicketId,
                                    EquipmentId = item.EquipmentId,
                                    CreatedBy = User.Identity.Name,
                                    EquipDetail = "",
                                    EquipName = item.PartDescription,
                                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                                    Quantity = (item.Qunatity.HasValue ? Convert.ToInt32(item.Qunatity.Value) : 0),
                                    //UnitPrice = (item.UnitCost.HasValue ? Convert.ToInt32(item.UnitCost.Value) : 0),
                                    UnitPrice = item.TotalPrice.HasValue ? item.TotalPrice.Value : 0,
                                    TotalPrice = item.TotalPrice.HasValue ? item.TotalPrice.Value : 0,
                                    IsAgreementItem = false,
                                    CreatedByUid = soldby,
                                };
                                _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(cae);
                            }
                        }
                        if (serviceestimator != null && serviceestimator.Count > 0)
                        {
                            var EstimatorserviceTotalAmount = Math.Round(estimator.ServiceTotalAmount.HasValue ? estimator.ServiceTotalAmount.Value : 0, 2);
                            var EstimatorServiceTax = Math.Round(estimator.ServiceTaxAmount.HasValue ? estimator.ServiceTaxAmount.Value : 0, 2);

                            Invoice servicetempInv = new Invoice()
                            {
                                CustomerId = _Customer.CustomerId,
                                CompanyId = CompanyId,
                                Amount = estimator.TotalPrice.Value,
                                Tax = Math.Round(estimator.TaxAmount.HasValue ? estimator.TaxAmount.Value : 0, 2),
                                DiscountCode = estimator.Description,
                                DiscountAmount = 0,
                                TotalAmount = EstimatorserviceTotalAmount + EstimatorServiceTax,
                                Status = LabelHelper.InvoiceStatus.Open,
                                InvoiceDate = DateTime.UtcNow,
                                LastUpdatedDate = DateTime.UtcNow,
                                IsEstimate = false,
                                IsBill = false,
                                BillingAddress = "",
                                DueDate = DateTime.UtcNow.AddMonths(1),
                                Terms = "",
                                ShippingAddress = "",
                                ShippingVia = "",
                                ShippingDate = DateTime.UtcNow,
                                TrackingNo = "",
                                ShippingCost = 0,
                                Discountpercent = 0,
                                BalanceDue = EstimatorserviceTotalAmount + EstimatorServiceTax,
                                Deposit = 0,
                                Message = "",
                                TaxType = "",
                                Balance = estimator.ServiceTotalAmount,
                                Memo = "", 
                                LateFee = 0,
                                LateAmount = 0,
                                InstallDate = estimator.EstimateDate,
                                Description = "Payment for services (1) months",
                                DiscountType = "percent",
                                BillingCycle = "",
                                EstimateTerm = "",
                                Signature = "",
                                CancelReason = "",
                                CreatedBy = User.Identity.Name,
                                CreatedByUid = soldby,
                                LastUpdatedByUid = soldby,
                                CreatedDate = DateTime.UtcNow,
                                RefType = "",
                                PaymentType = "",
                                BookingId = "",
                                InstallationType = "",
                                SignatureDate = DateTime.UtcNow,
                                InvoiceEmailAddress = _Customer.EmailAddress,
                                InvoiceCcEmailAddress = _Customer.EmailAddress,
                                MonitoringAmount = 0,
                                ContractTerm = estimator.ContractTerm,
                                MonitoringDescription = estimator.Description,
                                IsARBInvoice = false,
                                TransactionId = "",
                                ForteStatus = "",
                                UpfrontMonth = "",
                            };
                            servicetempInv.IsEstimate = false;
                            servicetempInv.InvoiceFor = LabelHelper.InvoiceFor.Service;
                            servicetempInv.InstallationType = LabelHelper.InvoiceFor.Service;
                            servicetempInv.Status = LabelHelper.InvoiceStatus.Open;
                            servicetempInv.Id = _Util.Facade.InvoiceFacade.InsertInvoice(servicetempInv);
                            servicetempInv.InvoiceId = servicetempInv.Id.GenerateInvoiceNo();
                            _Util.Facade.InvoiceFacade.UpdateInvoice(servicetempInv);
                            //createTempInv = servicetempInv;

                            foreach (var itemservice in serviceestimator)
                            {
                                Equipment _EquipmentDetails = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentName(itemservice.EquipmentName);
                                if (_EquipmentDetails != null)
                                {
                                    InvoiceDetail invoiceDetailitem = new InvoiceDetail()
                                    {
                                        InvoiceId = servicetempInv.InvoiceId,
                                        CreatedDate = DateTime.UtcNow,
                                        InventoryId = Guid.Empty,
                                        EquipmentId = _EquipmentDetails != null ? _EquipmentDetails.EquipmentId : Guid.Empty,
                                        EquipName = itemservice.EquipmentName,
                                        CompanyId = CompanyId,
                                        Quantity = itemservice.Quantity,
                                        UnitPrice = itemservice.UnitPrice,
                                        TotalPrice = itemservice.Amount,
                                        CreatedBy = User.Identity.Name,
                                        Taxable = true,
                                        DiscountAmount = 0,
                                        DiscountPercent = 0,
                                        DiscountType = "",
                                        EquipCategory = ""
                                    };
                                    _Util.Facade.InvoiceFacade.InsertInvoiceDetails(invoiceDetailitem);
                                }
                                CustomerAppointmentEquipment cae = new CustomerAppointmentEquipment()
                                {
                                    AppointmentId = TicketId,
                                    EquipmentId = itemservice.EquipmentId,
                                    CreatedBy = User.Identity.Name,
                                    EquipDetail = "",
                                    EquipName = itemservice.EquipmentName,
                                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                                    Quantity = (itemservice.Quantity != null ? itemservice.Quantity : 0),
                                    UnitPrice = (itemservice.UnitPrice != null ? itemservice.UnitPrice : 0),
                                    TotalPrice = itemservice.Amount != null ? itemservice.Amount : 0,
                                    IsAgreementItem = false,
                                    CreatedByUid = soldby,
                                };
                                _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(cae);
                            }
                        }
                        if (onetimeserviceestimator != null && onetimeserviceestimator.Count > 0)
                        {
                            var EstimatorserviceTotalAmount = Math.Round(estimator.ServiceTotalAmount.HasValue ? estimator.ServiceTotalAmount.Value : 0, 2);
                            var EstimatorServiceTax = Math.Round(estimator.ServiceTaxAmount.HasValue ? estimator.ServiceTaxAmount.Value : 0, 2);

                            Invoice servicetempInv = new Invoice()
                            {
                                CustomerId = _Customer.CustomerId,
                                CompanyId = CompanyId,
                                Amount = estimator.TotalPrice.Value,
                                Tax = Math.Round(estimator.TaxAmount.HasValue ? estimator.TaxAmount.Value : 0, 2),
                                DiscountCode = estimator.Description,
                                DiscountAmount = 0,
                                TotalAmount = EstimatorserviceTotalAmount + EstimatorServiceTax,
                                Status = LabelHelper.InvoiceStatus.Open,
                                InvoiceDate = DateTime.UtcNow,
                                LastUpdatedDate = DateTime.UtcNow,
                                IsEstimate = false,
                                IsBill = false,
                                BillingAddress = "",
                                DueDate = DateTime.UtcNow.AddMonths(1),
                                Terms = "",
                                ShippingAddress = "",
                                ShippingVia = "",
                                ShippingDate = DateTime.UtcNow,
                                TrackingNo = "",
                                ShippingCost = 0,
                                Discountpercent = 0,
                                BalanceDue = EstimatorserviceTotalAmount + EstimatorServiceTax,
                                Deposit = 0,
                                Message = "",
                                TaxType = "",
                                Balance = estimator.ServiceTotalAmount,
                                Memo = "",
                                LateFee = 0,
                                LateAmount = 0,
                                InstallDate = estimator.EstimateDate,
                                Description = "Payment for one time services (1) months",
                                DiscountType = "percent",
                                BillingCycle = "",
                                EstimateTerm = "",
                                Signature = "",
                                CancelReason = "",
                                CreatedBy = User.Identity.Name,
                                CreatedByUid = soldby,
                                LastUpdatedByUid = soldby,
                                CreatedDate = DateTime.UtcNow,
                                RefType = "",
                                PaymentType = "",
                                BookingId = "",
                                InstallationType = "",
                                SignatureDate = DateTime.UtcNow,
                                InvoiceEmailAddress = _Customer.EmailAddress,
                                InvoiceCcEmailAddress = _Customer.EmailAddress,
                                MonitoringAmount = 0,
                                ContractTerm = estimator.ContractTerm,
                                MonitoringDescription = estimator.Description,
                                IsARBInvoice = false,
                                TransactionId = "",
                                ForteStatus = "",
                                UpfrontMonth = "",
                            };
                            servicetempInv.IsEstimate = false;
                            servicetempInv.InvoiceFor = LabelHelper.InvoiceFor.Service;
                            servicetempInv.InstallationType = LabelHelper.InvoiceFor.Service;
                            servicetempInv.Status = LabelHelper.InvoiceStatus.Open;
                            servicetempInv.Id = _Util.Facade.InvoiceFacade.InsertInvoice(servicetempInv);
                            servicetempInv.InvoiceId = servicetempInv.Id.GenerateInvoiceNo();
                            _Util.Facade.InvoiceFacade.UpdateInvoice(servicetempInv);
                            //createTempInv = servicetempInv;

                            foreach (var itemservice in onetimeserviceestimator)
                            {
                                Equipment _EquipmentDetails = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentName(itemservice.EquipmentName);
                                if (_EquipmentDetails != null)
                                {
                                    InvoiceDetail invoiceDetailitem = new InvoiceDetail()
                                    {
                                        InvoiceId = servicetempInv.InvoiceId,
                                        CreatedDate = DateTime.UtcNow,
                                        InventoryId = Guid.Empty,
                                        EquipmentId = _EquipmentDetails != null ? _EquipmentDetails.EquipmentId : Guid.Empty,
                                        EquipName = itemservice.EquipmentName,
                                        CompanyId = CompanyId,
                                        Quantity = itemservice.Quantity,
                                        UnitPrice = itemservice.UnitPrice,
                                        TotalPrice = itemservice.Amount,
                                        CreatedBy = User.Identity.Name,
                                        Taxable = true,
                                        DiscountAmount = 0,
                                        DiscountPercent = 0,
                                        DiscountType = "",
                                        EquipCategory = ""
                                    };
                                    _Util.Facade.InvoiceFacade.InsertInvoiceDetails(invoiceDetailitem);
                                }
                                CustomerAppointmentEquipment cae = new CustomerAppointmentEquipment()
                                {
                                    AppointmentId = TicketId,
                                    EquipmentId = itemservice.EquipmentId,
                                    CreatedBy = User.Identity.Name,
                                    EquipDetail = "",
                                    EquipName = itemservice.EquipmentName,
                                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                                    Quantity = (itemservice.Quantity != null ? itemservice.Quantity : 0),
                                    UnitPrice = (itemservice.UnitPrice != null ? itemservice.UnitPrice : 0),
                                    TotalPrice = itemservice.Amount != null ? itemservice.Amount : 0,
                                    IsAgreementItem = false,
                                    CreatedByUid = soldby,
                                };
                                _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(cae);
                            }
                        }
                        CustomerCompany cc = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerIdAndCompanyId(_Customer.CustomerId, CompanyId);
                        cc.IsLead = false;
                        _Util.Facade.CustomerFacade.UpdateCustomerCompany(cc);




                        //var estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(EstimatorId);
                        //if (estimator.Status == LabelHelper.EstimateStatus.Signed )
                        //{
                        //    estimator.Status = LabelHelper.EstimateStatus.ResendToCustomer;
                        //}
                        //else
                        //{
                        //    estimator.Status = LabelHelper.EstimateStatus.SentToCustomer;
                        //}
                        estimator.Status = LabelHelper.EstimateStatus.ContractSingned;
                        _Util.Facade.EstimatorFacade.UpdateEstimator(estimator);

                        _Customer.IsAgreement = true;
                        _Util.Facade.CustomerFacade.UpdateCustomer(_Customer);

                        #endregion obaydullah Estimator
                        #endregion

                    }

                    #endregion
                    #region Insert Monthly Monitoring Fee
                    #region ACH discount
                    double discountAmount = 0;
                    var objpayinfocus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayFor(_Customer.CustomerId);
                    if (objpayinfocus != null)
                    {
                        var objpayprofile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(objpayinfocus.PaymentInfoId);
                        if (objpayprofile != null && objpayprofile.Type.ToLower().IndexOf("ach") > -1)
                        {
                            var objglobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(custommerCompany.CompanyId, "ACHDiscount");
                            if (objglobal != null)
                            {
                                discountAmount = Convert.ToDouble(objglobal.Value);
                            }
                        }
                    }
                    #endregion
                    List<CustomerPackageService> CustomerPackageServiceList = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(_Customer.CustomerId, custommerCompany.CompanyId);
                    double? ServiceCostMMR = CustomerPackageServiceList.Where(x => x.IsARBEnabled).Sum(x => x.Total);
                    double ServiceCostTaxMMR = 0;
                    if (ServiceCostMMR.HasValue && ServiceCostMMR.Value > 0)
                    {
                        ServiceCostMMR = ServiceCostMMR - discountAmount;
                        #region Tax Calculations
                        Guid tempCustomerId = new Guid();
                        if (_Customer != null)
                        {
                            tempCustomerId = _Customer.CustomerId;
                        }
                        GlobalSetting GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(custommerCompany.CompanyId, tempCustomerId);
                        if (GetSalesTax != null)
                        {
                            ServiceCostTaxMMR = Math.Round((ServiceCostMMR.Value * Convert.ToDouble(GetSalesTax.Value)) / 100, 2, MidpointRounding.AwayFromZero);
                        }
                        #endregion
                        _Customer.MonthlyMonitoringFee = ServiceCostMMR.Value.ToString();
                        _Customer.BillAmount = defaultBillTaxVal ? (ServiceCostMMR.Value + ServiceCostTaxMMR) : ServiceCostMMR.Value;
                        _Customer.TotalTax = defaultBillTaxVal ? ServiceCostTaxMMR : 0;
                        _Customer.BillTax = defaultBillTaxVal;
                        _Util.Facade.CustomerFacade.UpdateCustomer(_Customer);
                    }
                    #endregion
                    _Util.Facade.CustomerFacade.UpdateCustomer(_Customer);

                    if (AfterSubmitDocumentSave == true)
                    {
                        if (!string.IsNullOrWhiteSpace(EstimatorId))
                        {
                            _Customer.EstimatorId = EstimatorId;
                        }
                        result = IAgreeCustomerFileUpload(_Customer, _Company, TicketId, agreementtempid.HasValue ? agreementtempid.Value : 0, true, firstpage.HasValue ? firstpage.Value : false, (ticketid.HasValue ? ticketid.Value : 0), (recreate.HasValue ? recreate.Value : false), (isinvoice.HasValue ? isinvoice.Value : false), (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : ""), (isestimator.HasValue ? isestimator.Value : false), (estid.HasValue ? estid.Value : 0), (userid != Guid.Empty ? userid : Guid.Empty), (commercial.HasValue ? commercial.Value : false));
                        AgreementQuestionAnswerPDFModel model = new AgreementQuestionAnswerPDFModel();
                        model.Customer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(_Customer.CustomerId);
                        model.AgreementQuestion = _Util.Facade.AgreementFacade.GetAllAgreementQuestionByCustomerType(_Customer.Type);
                        model.AgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(_Customer.CustomerId);
                        int term = 0;
                        double contract;
                        string conterm = "";
                        if (model.Customer != null)
                        {
                            bool success = Double.TryParse(model.Customer.ContractTeam, out contract);
                            if (success)
                            {
                                term = Convert.ToInt32(Math.Round(contract * 12));
                                ViewBag.termid = term;
                                if (term > 1)
                                {
                                    ViewBag.TermMonth = " month";
                                }
                                else
                                {
                                    ViewBag.TermMonth = " month";
                                }
                            }
                            conterm = string.Concat(ViewBag.termid, ViewBag.TermMonth);
                            foreach (var item in model.AgreementQuestion)
                            {
                                item.Title = string.Format(item.Title, conterm);
                            }
                        }
                        ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("~/Views/Agreement/AgreementQuestionAnswerPDF.cshtml", model)
                        {
                            PageSize = Rotativa.Options.Size.A4,
                            PageOrientation = Rotativa.Options.Orientation.Portrait,
                            PageMargins = { Left = 1, Right = 1 },

                        };
                        byte[] applicationPDFData = actionPDF.BuildPdf(ControllerContext);
                        #region  file save
                        //Random rand = new Random();
                        //string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
                        //var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(_Company.CompanyId).CompanyName.ReplaceSpecialChar();
                        //var pdftempFolderName = string.Format(filename, comname) + _Customer.Id + "_AgreementAnswer.pdf";
                        //string Serverfilename = FileHelper.GetFileFullPath(pdftempFolderName);
                        //FileHelper.SaveFile(applicationPDFData, Serverfilename);
                        #endregion

                        //// "mayur" AWS S3 Changes //// Start

                        #region File Save on AWS S3

                        Random rand = new Random();
                        string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
                        filename = filename.TrimEnd('/');

                        var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(_Customer.CompanyId).CompanyName.ReplaceSpecialChar();

                        string FilePath = string.Format(filename, comname);
                        string FileName = _Customer.Id + "_AgreementMail.pdf";

                        string FileKey = string.Format($"{FilePath}/{FileName}");

                        var returnurl = "";

                        var task = Task.Run(async () => {
                            AWSS3ObjectService AWSobject = new AWSS3ObjectService();

                            await AWSobject.UploadFile(FileKey, applicationPDFData);
                            await AWSobject.MakePublic(FileName, FilePath);
                        });

                        task.Wait();

                        /// "mayur" used thread for async s3 methods : start

                        //Thread thread = new Thread(async () => {

                        //    AWSS3ObjectService AWSobject = new AWSS3ObjectService();

                        //    await AWSobject.UploadFile(FileKey, applicationPDFData);
                        //    await AWSobject.MakePublic(FileName, FilePath);

                        //});
                        //thread.Start();

                        ////// temp solution for thread to complete
                        //Thread.Sleep(5000);
                        ////


                        /// "mayur" used thread for async s3 methods : End



                        returnurl = String.Format(AppConfig.AWSS3Url, AppConfig.AWSS3BucketName);
                        returnurl = returnurl + FileKey;



                        ViewBag.ReturnUrl = returnurl;
                        ViewBag.FileName = FileName;
                        ViewBag.FileKey = FileKey;

                        #endregion

                        //// "mayur" AWS S3 Changes //// End


                        //// ""Mayur" Calculate File Size : start
                        #region Calculate file size

                        var _fileSize = applicationPDFData.Length / 1024;

                        #endregion
                        //// ""Mayur" Calculate File Size : End




                        CustomerFile CustomerFile = new CustomerFile()
                        {
                            CompanyId = _Company.CompanyId,
                            FileId = Guid.NewGuid(),
                            FileSize = _fileSize,
                            CustomerId = _Customer.CustomerId,
                            FileDescription = _Customer.Id + "_Agreement_Answer.pdf",
                            Filename = "/" + FileKey,
                            FileFullName = _Customer.Id + "_AgreementAnswer.pdf",
                            Uploadeddate = DateTime.Now,
                            IsActive = true,
                            CreatedBy = _Customer.Soldby1,
                            CreatedDate = DateTime.Now,
                            UpdatedBy = _Customer.Soldby1,
                            UpdatedDate = DateTime.Now,
                            WMStatus = LabelHelper.WatermarkStatus.Pending,
                            AWSProcessStatus = LabelHelper.AWSProcessStatus.Local,
                            AWSUploadTS = DateTime.Now
                        };
                        _Util.Facade.CustomerFileFacade.InsertCustomerFile(CustomerFile);
                    }
                    if (result)
                    {
                        //remove Invoice references from PaymentInfoCustomer table
                        //Update Invoice status if not paid
                        List<PaymentInfoCustomer> PICList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(_Customer.CustomerId);
                        foreach (var item in PICList)
                        {
                            if (!string.IsNullOrWhiteSpace(item.InvoiceId))
                            {

                                Invoice inv = _Util.Facade.InvoiceFacade.GetInvoiceByInvoiceId(item.InvoiceId);

                                if (inv != null && inv.Status != LabelHelper.InvoiceStatus.Paid && inv.Status != LabelHelper.InvoiceStatus.Init)
                                {
                                    string TempStatus = inv.Status;

                                    inv.Status = LabelHelper.InvoiceStatus.Cancelled;
                                    inv.BalanceDue = 0;
                                    _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                    if (TempStatus != inv.Status)
                                    {
                                        bool newBool = inv.IsARBInvoice ?? false;

                                        #region log
                                        UserActivity ua = new UserActivity()
                                        {
                                            ActivityId = Guid.NewGuid(),
                                            PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                            ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                            // new paramiter
                                            Action = "4264,CustomerInvoicePayment,Public",
                                            StatsDate = DateTime.UtcNow,
                                            UserId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                            UserName = _Customer.FirstName + " " + _Customer.LastName,
                                            ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + inv.Status + " #InvoiceId: " + inv.InvoiceId,
                                            IsARB = newBool,

                                            UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                            UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                        };
                                        Guid ActivityID = ua.ActivityId;
                                        _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                        UserActivityCustomer uac = new UserActivityCustomer()
                                        {
                                            ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                            CustomerId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                            RefId = inv.InvoiceId,

                                        };
                                        _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                        #endregion
                                    }
                                }
                            }
                            item.IsPaid = false;
                            item.InvoiceId = "";
                            _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(item);

                        }
                    }

                    CustomerGuidId = _Customer.CustomerId;
                }
                else
                {
                    
                    Guid TicketId = IAgreeConvertLeadToCustomer(_Customer, _Company, (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : ""), (isinvoice.HasValue ? isinvoice.Value : false));
                    tempTicketId = TicketId;
                    result = TicketId != Guid.Empty && IAgreeLeadtoCustomerConvertQAEmail(_Customer, _Company);
                    result = result && IAgreeAllScheduleCalendar(_Customer, _Company);
                    if (AfterSubmitDocumentSave == true)
                    { 
                        if(!string.IsNullOrWhiteSpace(EstimatorId))
                        {
                            _Customer.EstimatorId = EstimatorId;
                        }
                        result = result && IAgreeCustomerFileUpload(_Customer, _Company, TicketId, agreementtempid.HasValue ? agreementtempid.Value : 0, true, firstpage.HasValue ? firstpage.Value : false, (ticketid.HasValue ? ticketid.Value : 0), (recreate.HasValue ? recreate.Value : false), (isinvoice.HasValue ? isinvoice.Value : false), (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : ""), (isestimator.HasValue ? isestimator.Value : false), (estid.HasValue ? estid.Value : 0), (userid != Guid.Empty ? userid : Guid.Empty), (commercial.HasValue ? commercial.Value : false));

                        var estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(EstimatorId);
                        //if (estimator.Status == LabelHelper.EstimateStatus.Signed )
                        //{
                        //    estimator.Status = LabelHelper.EstimateStatus.ResendToCustomer;
                        //}
                        //else
                        //{
                        //    estimator.Status = LabelHelper.EstimateStatus.SentToCustomer;
                        //}
                        //estimator.Status = LabelHelper.EstimateStatus.ContractSingned; 
                        //_Util.Facade.EstimatorFacade.UpdateEstimator(estimator);

                        //_Customer.IsAgreement = true;
                        //_Util.Facade.CustomerFacade.UpdateCustomer(_Customer);
                        

                    }
                    Guid soldby = new Guid();
                    if (!string.IsNullOrWhiteSpace(_Customer.Soldby))
                    {
                        soldby = new Guid(_Customer.Soldby);
                    }
                    var result2 = result && SendSignedAgreementNotification(CompanyId, soldby, _Customer.FirstName + " " + _Customer.LastName, _Customer.Id);
                    bool isques = false;
                    bool isrecreate = recreate.HasValue ? recreate.Value : false;
                    bool isfirstpage = firstpage.HasValue ? firstpage.Value : false;
                    bool iscommercial = commercial.HasValue ? commercial.Value : false;
                    var objsetting = _Util.Facade.GlobalSettingsFacade.GetGlobalsettingBySearchKeyAndCompanyId("ContractAgreementquestionnaire", _Company.CompanyId);
                    if (objsetting != null)
                    {
                        isques = Convert.ToBoolean(objsetting.Value);
                    }
                    if (isrecreate == false && isfirstpage == false && isques == true)
                    {
                        AgreementQuestionAnswerPDFModel model = new AgreementQuestionAnswerPDFModel();
                        model.Customer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(_Customer.CustomerId);
                        model.AgreementQuestion = _Util.Facade.AgreementFacade.GetAllAgreementQuestionByCustomerType(_Customer.Type);
                        model.AgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(_Customer.CustomerId);
                        int term = 0;
                        double contract;
                        string conterm = "";
                        if (model.Customer != null)
                        {
                            bool success = Double.TryParse(model.Customer.ContractTeam, out contract);
                            if (success)
                            {
                                term = Convert.ToInt32(Math.Round(contract * 12));
                                ViewBag.termid = term;
                                if (term > 1)
                                {
                                    ViewBag.TermMonth = " month";
                                }
                                else
                                {
                                    ViewBag.TermMonth = " month";
                                }
                            }
                            conterm = string.Concat(ViewBag.termid, ViewBag.TermMonth);
                            foreach (var item in model.AgreementQuestion)
                            {
                                item.Title = string.Format(item.Title, conterm);
                            }
                        }
                        ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("~/Views/Agreement/AgreementQuestionAnswerPDF.cshtml", model)
                        {
                            PageSize = Rotativa.Options.Size.A4,
                            PageOrientation = Rotativa.Options.Orientation.Portrait,
                            PageMargins = { Left = 1, Right = 1 },

                        };
                        byte[] applicationPDFData = actionPDF.BuildPdf(ControllerContext);

                        #region File Save
                        //Random rand = new Random();
                        //string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
                        //var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(_Company.CompanyId).CompanyName.ReplaceSpecialChar();
                        //var pdftempFolderName = string.Format(filename, comname) + _Customer.Id + "_AgreementAnswer.pdf";
                        //string Serverfilename = FileHelper.GetFileFullPath(pdftempFolderName);
                        //FileHelper.SaveFile(applicationPDFData, Serverfilename);
                        #endregion

                        //// "mayur" AWS S3 Changes //// Start

                        #region File Save on AWS S3

                        Random rand = new Random();
                        string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
                        filename = filename.TrimEnd('/');

                        var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(_Company.CompanyId).CompanyName.ReplaceSpecialChar();

                        string FilePath = string.Format(filename, comname);
                        string FileName = rand.Next().ToString() + _Customer.Id + "AgreementMail.pdf";

                        string FileKey = string.Format($"{FilePath}/{FileName}");

                        var returnurl = "";

                        var task = Task.Run(async () => {
                            AWSS3ObjectService AWSobject = new AWSS3ObjectService();

                            await AWSobject.UploadFile(FileKey, applicationPDFData);
                            await AWSobject.MakePublic(FileName, FilePath);
                        });

                        task.Wait();

                        /// "mayur" used thread for async s3 methods : start

                        //Thread thread = new Thread(async () => {

                        //    AWSS3ObjectService AWSobject = new AWSS3ObjectService();

                        //    await AWSobject.UploadFile(FileKey, applicationPDFData);
                        //    await AWSobject.MakePublic(FileName, FilePath);

                        //});
                        //thread.Start();



                        /// "mayur" used thread for async s3 methods : End



                        returnurl = String.Format(AppConfig.AWSS3Url, AppConfig.AWSS3BucketName);
                        returnurl = returnurl + FileKey;



                        ViewBag.ReturnUrl = returnurl;
                        ViewBag.FileName = FileName;
                        ViewBag.FileKey = FileKey;

                        #endregion

                        //// "mayur" AWS S3 Changes //// End

                        //// ""Mayur" Calculate File Size : start
                        #region Calculate file size

                        var _fileSize = applicationPDFData.Length / 1024;

                        #endregion
                        //// ""Mayur" Calculate File Size : End




                        CustomerFile CustomerFile = new CustomerFile()
                        {
                            CompanyId = _Company.CompanyId,
                            FileId = Guid.NewGuid(),
                            FileSize = _fileSize,
                            CustomerId = _Customer.CustomerId,
                            FileDescription = _Customer.Id + "_Agreement_Answer.pdf",
                            Filename = "/" + FileKey,
                            FileFullName = _Customer.Id + "_AgreementAnswer.pdf",
                            Uploadeddate = DateTime.Now.UTCCurrentTime(),
                            IsActive = true,
                            CreatedBy = _Customer.Soldby1,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            UpdatedBy = _Customer.Soldby1,
                            UpdatedDate = DateTime.Now.UTCCurrentTime(),
                            WMStatus = LabelHelper.WatermarkStatus.Pending,
                            AWSProcessStatus = LabelHelper.AWSProcessStatus.Local,
                            AWSUploadTS = DateTime.Now
                        };
                        _Util.Facade.CustomerFileFacade.InsertCustomerFile(CustomerFile);

                    }
                }
                if (result)
                {
                    string Cusname = "";
                    if (!String.IsNullOrWhiteSpace(_Customer.DBA))
                    {
                        Cusname = _Customer.DBA;
                    }
                    else if (!String.IsNullOrWhiteSpace(_Customer.BusinessName))
                    {
                        Cusname = _Customer.BusinessName;
                    }
                    else
                    {
                        Cusname = _Customer.FirstName + ' ' + _Customer.LastName;
                    }
                    #region Log for Sign 

                    UserActivity ua = new UserActivity()
                    {
                        ActivityId = Guid.NewGuid(),
                        PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                        ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                        // new paramiter
                        Action = "File Signed",
                        StatsDate = DateTime.UtcNow,
                        UserId = _Customer.CustomerId != null ? _Customer.CustomerId : Guid.NewGuid(),
                        UserName = Cusname,
                        ActionDisplyText = "Lead #" + _Customer.Id + " Signed and Submitted Smart Lead Agreement Document",


                        UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                        UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                    };
                    Guid ActivityID = ua.ActivityId;
                    _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                    UserActivityCustomer uac = new UserActivityCustomer()
                    {
                        ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                        CustomerId = _Customer.CustomerId != null ? _Customer.CustomerId : Guid.NewGuid(),
                        RefId = _Customer.Id.ToString(),

                    };
                    _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                    #endregion

                    #region Log for Convert 

                    UserActivity uaconvert = new UserActivity()
                    {
                        ActivityId = Guid.NewGuid(),
                        PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                        ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                        // new paramiter
                        Action = "Lead to Customer",
                        StatsDate = DateTime.UtcNow,
                        UserId = _Customer.CustomerId != null ? _Customer.CustomerId : Guid.NewGuid(),
                        UserName = Cusname,
                        ActionDisplyText = "Lead #" + _Customer.Id + " is Converted to Customer </br> Convertion Type: System Generated",


                        UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                        UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                    };
                    Guid ActivityIDConvert = uaconvert.ActivityId;
                    _Util.Facade.UserActivityFacade.InsertUserActivity(uaconvert);
                    UserActivityCustomer uacconvert = new UserActivityCustomer()
                    {
                        ActivityId = ActivityIDConvert != null ? ActivityIDConvert : Guid.NewGuid(),

                        CustomerId = _Customer.CustomerId != null ? _Customer.CustomerId : Guid.NewGuid(),
                        RefId = _Customer.Id.ToString(),

                    };
                    _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uacconvert);

                    #endregion

                    //List<PaymentInfoCustomer> PICList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(_Customer.CustomerId);

                    //if (custommerCompany.IsLead == true)
                    //{
                    //    CapturePayment(_Customer, custommerCompany.CompanyId, new Guid("22222222-2222-2222-2222-222222222222"), "SYSTEM ", null, false);
                    //}

                    ///"mayur" Adding discount in invoice :: start                    
                    double eqpDiscountPercent = 0;
                    double eqpDiscountInAmount = 0;
                    double eqpTotalAmount = 0;
                    double subtotal = 0.00;
                    double eqpfinaltotal = 0.00;
                    double tax = 0.00;
                    string DiscountType = "";

                    custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(Id.Value);
                    var GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(custommerCompany.CompanyId, _Customer.CustomerId);




                    List<CustomerPackageEqp> CustomerPackageEqpList = _Util.Facade.PackageFacade.GetCustomerPackageEqpListbyCustomerId(custommerCompany.CompanyId, _Customer.CustomerId);
                    if (CustomerPackageEqpList != null && CustomerPackageEqpList.Count > 0)
                    {

                        foreach (var eqp in CustomerPackageEqpList)
                        {
                            double eqptotal = eqp.Total != null ? eqp.Total.Value : 0;
                            eqpTotalAmount = eqpTotalAmount + eqptotal;
                        }

                        foreach (var eqp in CustomerPackageEqpList)
                        {

                            if (eqp.DiscountPercent.HasValue && eqp.DiscountPercent.Value > 0)
                            {
                                eqpDiscountPercent = eqp.DiscountPercent != null ? eqp.DiscountPercent.Value : 0.00;
                                eqpDiscountInAmount = Convert.ToDouble((eqpTotalAmount * eqp.DiscountPercent) / 100);
                                DiscountType = "Percent";
                            }
                            else
                            {
                                eqpDiscountPercent = 0.00;
                                eqpDiscountInAmount = Convert.ToDouble(eqp.DiscountInAmount);
                                DiscountType = "Amount";

                            }

                            break;

                        }

                        subtotal = Convert.ToDouble(eqpTotalAmount - eqpDiscountInAmount);
                        double eqptax = (subtotal * Convert.ToDouble(GetSalesTax.Value)) / 100;
                        eqpfinaltotal = subtotal + eqptax;



                    }


                    CapturePayment(_Customer, custommerCompany.CompanyId, new Guid("22222222-2222-2222-2222-222222222222"), "SYSTEM", false, "Iagree", DiscountType, eqpDiscountInAmount, eqpDiscountPercent, 0.00, 0.00, eqpfinaltotal);



                    ///"mayur" Adding discount in invoice :: End

                    SignSmartAgreementAppointmentEquipment(_Customer);
                    SMSConvertLeadToCustomer(_Customer.Id, tempTicketId);
                }
                CustomerGuidId = _Customer.CustomerId;
            }

            // Here is my recurring billing code   

            //if (CustomerGuidId != Guid.Empty)
            //{
            //    Invoice RMRInvoice = _Util.Facade.InvoiceFacade.GetInvoiceByCustomerId(CustomerGuidId);
            //    if (RMRInvoice != null) //  && RMRInvoice.IsARBInvoice != null && RMRInvoice.IsARBInvoice.Value
            //    {
            //        var IsRMRActice = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(RMRInvoice.CompanyId, "IsRMRActive");
            //        if (IsRMRActice != null && IsRMRActice.Value.ToLower() == "true")
            //        {
            //            var controller = DependencyResolver.Current.GetService<RecurringBillingController>();
            //            controller.UpdateRecurringBillingInformationByCustomerModification(RMRInvoice.CustomerId, tempTicketId, RMRInvoice.LastUpdatedByUid, RMRInvoice.CompanyId, RMRInvoice.InvoiceId, "SmartLeads");
            //        }
            //    }
            //}
            return result;
        }
        public bool SmartIAgreeSetupAndSubmit_v2(int? Id, bool? recreate, int? agreementtempid, bool? firstpage, int? ticketid, bool? isinvoice, string invoiceid, bool? isestimator, int? estid, Guid? userid, bool? commercial)
        {
            bool result = false;

            #region Check Default Billing Tax
            bool defaultBillTaxVal = true;
            Guid tempTicketId = Guid.Empty;
            Guid CustomerGuidId = Guid.Empty;
            GlobalSetting defaultBillTax = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByOnlyKey("DefaultCustomerBillingTax");
            if (defaultBillTax != null)
            {
                if (defaultBillTax.Value.ToLower() == "true")
                {
                    defaultBillTaxVal = true;
                }
                else
                {
                    defaultBillTaxVal = false;
                }
            }
            bool AfterSubmitDocumentSave = false;
            GlobalSetting GlobSet = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByOnlyKey("AfterSubmitDocumentSave");
            if (GlobSet != null && !string.IsNullOrWhiteSpace(GlobSet.Value))
            {
                if (GlobSet.Value == "true")
                {
                    AfterSubmitDocumentSave = true;
                }
            }
            #endregion
            if (recreate.HasValue && recreate.Value == true)
            {
                if (!Id.HasValue)
                    return false;
                Customer _Customer = new Customer();
                CustomerCompany custommerCompany = new CustomerCompany();
                Guid CompanyId = new Guid();
                if (User.Identity.IsAuthenticated)
                {
                    var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
                    CompanyId = CurrentUser.CompanyId.Value;
                    custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(Id.Value);
                }
                else
                {
                    custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(Id.Value);
                    CompanyId = custommerCompany.CompanyId;
                }
                Company _Company = new Company { CompanyId = CompanyId };

                if (Id.Value > 0)
                {
                    _Customer = _Util.Facade.CustomerFacade.GetCustomersById(Id.Value);
                    #region Insert Monthly Monitoring Fee
                    #region ACH discount
                    double discountAmount = 0;
                    var objpayinfocus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayFor(_Customer.CustomerId);
                    if (objpayinfocus != null)
                    {
                        var objpayprofile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(objpayinfocus.PaymentInfoId);
                        if (objpayprofile != null && objpayprofile.Type.ToLower().IndexOf("ach") > -1)
                        {
                            var objglobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(custommerCompany.CompanyId, "ACHDiscount");
                            if (objglobal != null)
                            {
                                discountAmount = Convert.ToDouble(objglobal.Value);
                            }
                        }
                    }
                    #endregion
                    List<CustomerPackageService> CustomerPackageServiceList = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(_Customer.CustomerId, custommerCompany.CompanyId);
                    double? ServiceCost = CustomerPackageServiceList.Where(x => x.IsARBEnabled).Sum(x => x.Total);
                    double ServiceCostTax = 0;
                    if (ServiceCost.HasValue && ServiceCost.Value > 0)
                    {
                        ServiceCost = ServiceCost - discountAmount;
                        #region Tax Calculations
                        Guid tempCustomerId = new Guid();
                        if (_Customer != null)
                        {
                            tempCustomerId = _Customer.CustomerId;
                        }
                        GlobalSetting GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(custommerCompany.CompanyId, tempCustomerId);
                        if (GetSalesTax != null)
                        {
                            ServiceCostTax = Math.Round((ServiceCost.Value * Convert.ToDouble(GetSalesTax.Value)) / 100, 2, MidpointRounding.AwayFromZero);
                        }
                        #endregion
                        _Customer.MonthlyMonitoringFee = ServiceCost.Value.ToString();
                        _Customer.BillAmount = defaultBillTaxVal ? (ServiceCost.Value + ServiceCostTax) : ServiceCost.Value;
                        _Customer.TotalTax = defaultBillTaxVal ? ServiceCostTax : 0;
                        _Customer.BillTax = defaultBillTaxVal;
                        _Util.Facade.CustomerFacade.UpdateCustomer(_Customer);
                    }
                    #endregion
                    CustomerExtended extended = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(_Customer.CustomerId);
                    if (extended != null)
                    {
                        extended.ContractStartDate = extended.ContractStartDate??DateTime.Now;
                        _Util.Facade.CustomerFacade.UpdateCustomerExtended(extended);
                    }
                    else
                    {
                        extended = new CustomerExtended();
                        extended.CustomerId = _Customer.CustomerId;
                        extended.ContractStartDate = extended.ContractStartDate??DateTime.Now;
                        _Util.Facade.CustomerFacade.InsertCustomerExtended(extended);
                    }
                }
                if (AfterSubmitDocumentSave == true)
                {
                    //if (!string.IsNullOrWhiteSpace(EstimatorId))
                    //{
                    //    _Customer.EstimatorId = EstimatorId;
                    //}
                    result = IAgreeCustomerFileUpload(_Customer, _Company, new Guid(), agreementtempid.HasValue ? agreementtempid.Value : 0, true, firstpage.HasValue ? firstpage.Value : false, (ticketid.HasValue ? ticketid.Value : 0), (recreate.HasValue ? recreate.Value : false), (isinvoice.HasValue ? isinvoice.Value : false), (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : ""), (isestimator.HasValue ? isestimator.Value : false), (estid.HasValue ? estid.Value : 0), (userid != Guid.Empty ? userid : Guid.Empty), commercial.HasValue ? commercial.Value : false);
                }
                #region recreate agreement answer
                bool isques = false;

                var objsetting = _Util.Facade.GlobalSettingsFacade.GetGlobalsettingBySearchKeyAndCompanyId("ContractAgreementquestionnaire", _Company.CompanyId);
                if (objsetting != null)
                {
                    isques = Convert.ToBoolean(objsetting.Value);
                }
                if (isques == true)
                {
                    AgreementQuestionAnswerPDFModel model = new AgreementQuestionAnswerPDFModel();
                    model.Customer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(_Customer.CustomerId);
                    model.AgreementQuestion = _Util.Facade.AgreementFacade.GetAllAgreementQuestionByCustomerType(_Customer.Type);
                    model.AgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(_Customer.CustomerId);
                    int term = 0;
                    double contract;
                    string conterm = "";
                    if (model.Customer != null)
                    {
                        bool success = Double.TryParse(model.Customer.ContractTeam, out contract);
                        if (success)
                        {
                            term = Convert.ToInt32(Math.Round(contract * 12));
                            ViewBag.termid = term;
                            if (term > 1)
                            {
                                ViewBag.TermMonth = " month";
                            }
                            else
                            {
                                ViewBag.TermMonth = " month";
                            }
                        }
                        conterm = string.Concat(ViewBag.termid, ViewBag.TermMonth);
                        foreach (var item in model.AgreementQuestion)
                        {
                            item.Title = string.Format(item.Title, conterm);
                        }
                    }
                    ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("~/Views/Agreement/AgreementQuestionAnswerPDF.cshtml", model)
                    {
                        PageSize = Rotativa.Options.Size.A4,
                        PageOrientation = Rotativa.Options.Orientation.Portrait,
                        PageMargins = { Left = 1, Right = 1 },

                    };
                    byte[] applicationPDFData = actionPDF.BuildPdf(ControllerContext);
                    Random rand = new Random();
                    string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
                    var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(_Company.CompanyId).CompanyName.ReplaceSpecialChar();
                    var pdftempFolderName = string.Format(filename, comname) + _Customer.Id + "_AgreementAnswer.pdf";
                    string Serverfilename = FileHelper.GetFileFullPath(pdftempFolderName);
                    FileHelper.SaveFile(applicationPDFData, Serverfilename);
                    CustomerFile CustomerFile = new CustomerFile()
                    {
                        CompanyId = _Company.CompanyId,
                        FileId = Guid.NewGuid(),
                        CustomerId = _Customer.CustomerId,
                        FileDescription = _Customer.Id + "_Recreate_Agreement_Answers.pdf",
                        Filename = "/" + pdftempFolderName,
                        FileFullName = _Customer.Id + "_RecreateAgreementAnswer.pdf",
                        Uploadeddate = DateTime.Now.UTCCurrentTime(),
                        IsActive = true,
                        CreatedBy = _Customer.Soldby1,
                        CreatedDate = DateTime.Now.UTCCurrentTime(),
                        UpdatedBy = _Customer.Soldby1,
                        UpdatedDate = DateTime.Now.UTCCurrentTime()
                    };
                    _Util.Facade.CustomerFileFacade.InsertCustomerFile(CustomerFile);

                }
                #endregion
            }
            else
            {
                if (!Id.HasValue)
                    return false;
                Customer _Customer = new Customer();
                CustomerCompany custommerCompany = new CustomerCompany();
                Guid CompanyId = new Guid();
                if (User.Identity.IsAuthenticated)
                {
                    var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
                    CompanyId = CurrentUser.CompanyId.Value;
                    custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(Id.Value);
                }
                else
                {
                    custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(Id.Value);
                    CompanyId = custommerCompany.CompanyId;
                }
                Company _Company = new Company { CompanyId = CompanyId };

                if (Id.Value > 0)
                {
                    _Customer = _Util.Facade.CustomerFacade.GetCustomersById(Id.Value);
                }
                //SalesCommisionUpdateInsert(_Customer, _Company);
                #region Agreement History
                var cusAgrHistory = _Util.Facade.CustomerAgreementFacade.GetCustomerAgreementHistory(_Customer.CustomerId, LabelHelper.CustomerAgreementHistory.AgreementComplete);
                if (cusAgrHistory == null)
                {
                    CustomerAgreement cusAgrModel = new CustomerAgreement()
                    {
                        CompanyId = custommerCompany.CompanyId,
                        CustomerId = _Customer.CustomerId,
                        IP = AppConfig.GetIP,
                        UserAgent = AppConfig.GetUserAgent,
                        Type = LabelHelper.CustomerAgreementHistory.AgreementComplete,
                        AddedDate = DateTime.UtcNow
                    };
                    _Util.Facade.CustomerAgreementFacade.InsertCustomerAgreement(cusAgrModel);
                }
                #endregion
                if (custommerCompany.IsLead == false)
                {
                    _Customer.IsAgreement = true;
                    _Util.Facade.CustomerFacade.UpdateCustomer(_Customer);
                    Guid soldby = new Guid();
                    if (!string.IsNullOrWhiteSpace(_Customer.Soldby))
                    {
                        soldby = new Guid(_Customer.Soldby);
                    }
                    SendSignedAgreementNotification(CompanyId, soldby, _Customer.FirstName + " " + _Customer.LastName, _Customer.Id);
                    var TicketId = Guid.Empty;


                    var TicketDetails = _Util.Facade.TicketFacade.GetAgreementTicketByCustomerId(_Customer.CustomerId);
                    if (TicketDetails != null)
                    {
                        TicketId = TicketDetails.TicketId;
                    }

                    PackageCustomer packageCustomer = _Util.Facade.PackageFacade.GetPackageCustomerByCustomerId(_Customer.CustomerId);

                    #region Kazar Installation Ticket
                    Invoice tempinv = _Util.Facade.InvoiceFacade.GetByInvoiceId(invoiceid);
                    if (!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true && tempinv != null && tempinv.Status != LabelHelper.EstimateStatus.Signed)
                    {
                        #region Insert Ticket
                        //Guid TicketId = Guid.Empty;
                        Guid SoldBy = new Guid();
                        Guid.TryParse(_Customer.Soldby, out SoldBy);
                        CustomerAppointmentEquipment caEquipment = new CustomerAppointmentEquipment();
                        Ticket newTicket = new Ticket();

                        newTicket = new Ticket()
                        {
                            TicketId = Guid.NewGuid(),
                            CompanyId = CompanyId,
                            CustomerId = _Customer.CustomerId,
                            TicketType = LabelHelper.TicketType.Installtion,
                            CreatedBy = new Guid(LabelHelper.SystemUser.ID),
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            CompletionDate = DateTime.Now.UTCCurrentTime(),
                            Status = LabelHelper.TicketStatus.Created,
                            LastUpdatedBy = new Guid(LabelHelper.SystemUser.ID),
                            LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                            HasInvoice = false,
                            HasSurvey = false,
                            IsAgreementTicket = true,                        
                        };
                        if (packageCustomer != null && packageCustomer.IsNFTTicket.HasValue && packageCustomer.IsNFTTicket.Value)
                        {
                            newTicket.TicketType = "Install NFT";
                        }
                        newTicket.Id = _Util.Facade.TicketFacade.InsertTicket(newTicket);
                        logger.WithProperty("tags", "ticket,insert").WithProperty("params", JsonConvert.SerializeObject(newTicket)).Trace("Ticket Id {Id}", newTicket.Id);
                        if (newTicket != null)
                        {
                            _Util.Facade.InvoiceFacade.UpdateInvoiceTicketIdByCustomerId(newTicket.TicketId, newTicket.CustomerId);
                        }
                        TicketId = newTicket.TicketId;
                        tempTicketId = newTicket.TicketId; ;

                        CustomerAppointment ca = new CustomerAppointment()
                        {
                            AppointmentId = newTicket.TicketId,
                            CompanyId = CompanyId,
                            CustomerId = _Customer.CustomerId,
                            EmployeeId = new Guid(LabelHelper.SystemUser.ID),
                            AppointmentType = newTicket.TicketType,
                            AppointmentDate = DateTime.Now.UTCCurrentTime(),
                            CreatedBy = User.Identity.Name,
                            LastUpdatedBy = User.Identity.Name,
                            LastUpdatedDate = DateTime.Now.UTCCurrentTime(),
                            IsAllDay = true,
                        };
                        ca.Id = (int)_Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppoinment(ca);
                        TicketUser TU = new TicketUser()
                        {
                            IsPrimary = true,
                            NotificationOnly = false,
                            AddedBy = SoldBy,
                            AddedDate = DateTime.Now.UTCCurrentTime(),
                            TiketId = newTicket.TicketId,
                            UserId = new Guid(LabelHelper.SystemUser.ID),
                        };
                        TU.Id = _Util.Facade.TicketFacade.InsertTicketUser(TU);

                        Equipment EquipmentDetails = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentName("Monthly Monitoring Rate");
                        caEquipment = new CustomerAppointmentEquipment()
                        {
                            AppointmentId = newTicket.TicketId,
                            EquipmentId = EquipmentDetails != null && EquipmentDetails.EquipmentId != null ? EquipmentDetails.EquipmentId : Guid.Empty,
                            Quantity = 1,
                            UnitPrice = tempinv.MonitoringAmount.HasValue ? tempinv.MonitoringAmount.Value : 0.0,
                            TotalPrice = tempinv.MonitoringAmount.HasValue ? tempinv.MonitoringAmount.Value : 0.0,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            CreatedBy = User.Identity.Name,
                            EquipName = EquipmentDetails != null && !string.IsNullOrWhiteSpace(EquipmentDetails.Name) ? EquipmentDetails.Name : "",
                            EquipDetail = EquipmentDetails != null && !string.IsNullOrWhiteSpace(EquipmentDetails.Description) ? EquipmentDetails.Description : "",
                            IsEquipmentRelease = false,
                            IsService = true,
                            CreatedByUid = SoldBy,
                            InstalledByUid = new Guid(LabelHelper.SystemUser.ID),
                            IsAgreementItem = true,
                            IsBaseItem = true,
                            OriginalUnitPrice = tempinv.MonitoringAmount.HasValue ? tempinv.MonitoringAmount.Value : 0.0,
                            IsInvoiceCreate = true,
                            IsNonCommissionable = false
                        };
                        _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(caEquipment);

                        #region Estimate Added in Ticket
                        List<InvoiceDetail> detlist = _Util.Facade.InvoiceFacade.GetInvoiceDetailsByInvoiceId(tempinv.InvoiceId);
                        if (detlist != null)
                        {
                            foreach (var item in detlist)
                            {
                                caEquipment = new CustomerAppointmentEquipment()
                                {
                                    AppointmentId = TicketId,
                                    EquipmentId = item.EquipmentId,
                                    CreatedBy = User.Identity.Name,
                                    EquipDetail = item.EquipDetail,
                                    EquipName = item.EquipName,
                                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                                    Quantity = item.Quantity.HasValue ? item.Quantity.Value : 0,
                                    UnitPrice = item.UnitPrice.HasValue ? item.UnitPrice.Value : 0,
                                    TotalPrice = item.TotalPrice.HasValue ? item.TotalPrice.Value : 0,
                                    IsAgreementItem = true,
                                    InstalledByUid = new Guid(LabelHelper.SystemUser.ID),
                                    CreatedByUid = SoldBy
                                };
                                _Util.Facade.CustomerAppoinmentFacade.InsertCustomerAppointmentEquipmentDetail(caEquipment);
                            }
                        }

                        double ServiceCost = tempinv.MonitoringAmount.HasValue ? tempinv.MonitoringAmount.Value : 0.0;
                        double ServiceCostTax = 0;
                        GlobalSetting GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(CompanyId, _Customer.CustomerId);
                        if (GetSalesTax != null)
                        {
                            ServiceCostTax = Math.Round((ServiceCost * Convert.ToDouble(GetSalesTax.Value)) / 100, 2, MidpointRounding.AwayFromZero);
                        }
                        _Customer.MonthlyMonitoringFee = ServiceCost.ToString();
                        _Customer.BillAmount = defaultBillTaxVal ? (ServiceCost + ServiceCostTax) : ServiceCost;
                        _Customer.TotalTax = defaultBillTaxVal ? ServiceCostTax : 0;
                        _Customer.BillTax = defaultBillTaxVal;
                        #endregion

                        #endregion

                        #region Create Invoice(If estimate is signed then don't need to create invoice)
                        if (!string.IsNullOrWhiteSpace(invoiceid) && isinvoice == true && tempinv != null && tempinv.Status != LabelHelper.EstimateStatus.Signed)
                        {
                            tempinv.Status = LabelHelper.EstimateStatus.Signed;
                            tempinv.LastUpdatedDate = DateTime.UtcNow;
                            _Util.Facade.InvoiceFacade.UpdateInvoice(tempinv);
                            Invoice _tempInv = new Invoice()
                            {
                                CustomerId = tempinv.CustomerId,
                                CompanyId = tempinv.CompanyId,
                                Amount = tempinv.Amount,
                                Tax = tempinv.Tax,
                                DiscountCode = tempinv.DiscountCode,
                                DiscountAmount = tempinv.DiscountAmount,
                                TotalAmount = tempinv.TotalAmount,
                                Status = LabelHelper.InvoiceStatus.Open,
                                InvoiceDate = tempinv.InvoiceDate,
                                IsEstimate = false,
                                IsBill = tempinv.IsBill,
                                BillingAddress = tempinv.BillingAddress,
                                DueDate = tempinv.DueDate,
                                Terms = tempinv.Terms,
                                ShippingAddress = tempinv.ShippingAddress,
                                ShippingVia = tempinv.ShippingVia,
                                ShippingDate = tempinv.ShippingDate,
                                TrackingNo = tempinv.TrackingNo,
                                ShippingCost = tempinv.ShippingCost,
                                Discountpercent = tempinv.Discountpercent,
                                BalanceDue = tempinv.BalanceDue,
                                Deposit = tempinv.Deposit,
                                Message = tempinv.Message,
                                TaxType = tempinv.TaxType,
                                Balance = tempinv.Balance,
                                Memo = tempinv.Memo,
                                InvoiceFor = LabelHelper.InvoiceFor.Invoice,
                                LateFee = tempinv.LateFee,
                                LateAmount = tempinv.LateAmount,
                                InstallDate = tempinv.InstallDate,
                                Description = tempinv.Description,
                                DiscountType = tempinv.DiscountType,
                                BillingCycle = tempinv.BillingCycle,
                                EstimateTerm = tempinv.EstimateTerm,
                                Signature = tempinv.Signature,
                                CancelReason = tempinv.CancelReason,
                                CreatedDate = tempinv.CreatedDate,
                                CreatedBy = tempinv.CreatedBy,
                                CreatedByUid = tempinv.CreatedByUid,
                                LastUpdatedDate = tempinv.LastUpdatedDate,
                                LastUpdatedByUid = tempinv.LastUpdatedByUid,
                                RefType = tempinv.RefType,
                                PaymentType = tempinv.PaymentType,
                                BookingId = tempinv.BookingId,
                                InstallationType = tempinv.InstallationType,
                                SignatureDate = tempinv.SignatureDate,
                                InvoiceEmailAddress = tempinv.InvoiceEmailAddress,
                                InvoiceCcEmailAddress = tempinv.InvoiceCcEmailAddress,
                                MonitoringAmount = tempinv.MonitoringAmount,
                                ContractTerm = tempinv.ContractTerm,
                                MonitoringDescription = tempinv.MonitoringDescription,
                                IsARBInvoice = tempinv.IsARBInvoice,
                                TransactionId = tempinv.TransactionId,
                                ForteStatus = tempinv.ForteStatus,
                                UpfrontMonth = tempinv.UpfrontMonth
                            };
                            _tempInv.Id = _Util.Facade.InvoiceFacade.InsertInvoice(_tempInv);
                            _tempInv.InvoiceId = _tempInv.Id.GenerateInvoiceNo();
                            _Util.Facade.InvoiceFacade.UpdateInvoice(_tempInv);
                            List<InvoiceDetail> invoiceList = _Util.Facade.InvoiceFacade.GetInvoiceDetailsByInvoiceId(tempinv.InvoiceId);
                            if (invoiceList != null)
                            {
                                foreach (var item in invoiceList)
                                {
                                    item.InvoiceId = _tempInv.InvoiceId;
                                    item.CreatedDate = DateTime.UtcNow;
                                    _Util.Facade.InvoiceFacade.InsertInvoiceDetails(item);
                                }
                            }
                            #region Added Monthly Fee as Invoice line item
                            Equipment _EquipmentDetails = _Util.Facade.EquipmentFacade.GetEquipmentByEquipmentName("Monthly Monitoring Rate");
                            InvoiceDetail _invDetls = new InvoiceDetail()
                            {
                                InvoiceId = _tempInv.InvoiceId,
                                InventoryId = Guid.Empty,
                                EquipmentId = _EquipmentDetails != null ? _EquipmentDetails.EquipmentId : Guid.Empty,
                                EquipName = "Product and Service",
                                EquipDetail = "Product and Service",
                                CompanyId = _tempInv.CompanyId,
                                Quantity = _tempInv != null && !string.IsNullOrWhiteSpace(_tempInv.UpfrontMonth) && _tempInv.UpfrontMonth != "-1" ? Convert.ToInt32(_tempInv.UpfrontMonth) : 0,
                                UnitPrice = _tempInv.MonitoringAmount,
                                TotalPrice = _tempInv.MonitoringAmount * (_tempInv != null && !string.IsNullOrWhiteSpace(_tempInv.UpfrontMonth) && _tempInv.UpfrontMonth != "-1" ? Convert.ToInt32(_tempInv.UpfrontMonth) : 0),
                                CreatedDate = DateTime.UtcNow,
                                CreatedBy = _tempInv.CreatedBy,
                                Taxable = defaultBillTaxVal
                            };
                            _Util.Facade.InvoiceFacade.InsertInvoiceDetails(_invDetls);
                            #endregion


                        }
                        #endregion
                    }

                    #endregion
                    #region Insert Monthly Monitoring Fee
                    #region ACH discount
                    double discountAmount = 0;
                    var objpayinfocus = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentInfoCustomerByCustomerIdAndPayFor(_Customer.CustomerId);
                    if (objpayinfocus != null)
                    {
                        var objpayprofile = _Util.Facade.PaymentInfoCustomerFacade.GetPaymentProfileByPaymentInfoId(objpayinfocus.PaymentInfoId);
                        if (objpayprofile != null && objpayprofile.Type.ToLower().IndexOf("ach") > -1)
                        {
                            var objglobal = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(custommerCompany.CompanyId, "ACHDiscount");
                            if (objglobal != null)
                            {
                                discountAmount = Convert.ToDouble(objglobal.Value);
                            }
                        }
                    }
                    #endregion
                    List<CustomerPackageService> CustomerPackageServiceList = _Util.Facade.CustomerFacade.IsLeadAppointmentServiceExistCheckCustomerPackageEqp(_Customer.CustomerId, custommerCompany.CompanyId);
                    double? ServiceCostMMR = CustomerPackageServiceList.Where(x => x.IsARBEnabled).Sum(x => x.Total);
                    double ServiceCostTaxMMR = 0;
                    if (ServiceCostMMR.HasValue && ServiceCostMMR.Value > 0)
                    {
                        ServiceCostMMR = ServiceCostMMR - discountAmount;
                        #region Tax Calculations
                        Guid tempCustomerId = new Guid();
                        if (_Customer != null)
                        {
                            tempCustomerId = _Customer.CustomerId;
                        }
                        GlobalSetting GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(custommerCompany.CompanyId, tempCustomerId);
                        if (GetSalesTax != null)
                        {
                            ServiceCostTaxMMR = Math.Round((ServiceCostMMR.Value * Convert.ToDouble(GetSalesTax.Value)) / 100, 2, MidpointRounding.AwayFromZero);
                        }
                        #endregion
                        _Customer.MonthlyMonitoringFee = ServiceCostMMR.Value.ToString();
                        _Customer.BillAmount = defaultBillTaxVal ? (ServiceCostMMR.Value + ServiceCostTaxMMR) : ServiceCostMMR.Value;
                        _Customer.TotalTax = defaultBillTaxVal ? ServiceCostTaxMMR : 0;
                        _Customer.BillTax = defaultBillTaxVal;
                        _Util.Facade.CustomerFacade.UpdateCustomer(_Customer);
                    }
                    #endregion
                    _Util.Facade.CustomerFacade.UpdateCustomer(_Customer);

                    if (AfterSubmitDocumentSave == true)
                    {
                        result = IAgreeCustomerFileUpload(_Customer, _Company, TicketId, agreementtempid.HasValue ? agreementtempid.Value : 0, true, firstpage.HasValue ? firstpage.Value : false, (ticketid.HasValue ? ticketid.Value : 0), (recreate.HasValue ? recreate.Value : false), (isinvoice.HasValue ? isinvoice.Value : false), (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : ""), (isestimator.HasValue ? isestimator.Value : false), (estid.HasValue ? estid.Value : 0), (userid != Guid.Empty ? userid : Guid.Empty), (commercial.HasValue ? commercial.Value : false));
                        AgreementQuestionAnswerPDFModel model = new AgreementQuestionAnswerPDFModel();
                        model.Customer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(_Customer.CustomerId);
                        model.AgreementQuestion = _Util.Facade.AgreementFacade.GetAllAgreementQuestionByCustomerType(_Customer.Type);
                        model.AgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(_Customer.CustomerId);
                        int term = 0;
                        double contract;
                        string conterm = "";
                        if (model.Customer != null)
                        {
                            bool success = Double.TryParse(model.Customer.ContractTeam, out contract);
                            if (success)
                            {
                                term = Convert.ToInt32(Math.Round(contract * 12));
                                ViewBag.termid = term;
                                if (term > 1)
                                {
                                    ViewBag.TermMonth = " month";
                                }
                                else
                                {
                                    ViewBag.TermMonth = " month";
                                }
                            }
                            conterm = string.Concat(ViewBag.termid, ViewBag.TermMonth);
                            foreach (var item in model.AgreementQuestion)
                            {
                                item.Title = string.Format(item.Title, conterm);
                            }
                        }
                        ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("~/Views/Agreement/AgreementQuestionAnswerPDF.cshtml", model)
                        {
                            PageSize = Rotativa.Options.Size.A4,
                            PageOrientation = Rotativa.Options.Orientation.Portrait,
                            PageMargins = { Left = 1, Right = 1 },

                        };
                        byte[] applicationPDFData = actionPDF.BuildPdf(ControllerContext);
                        Random rand = new Random();
                        string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
                        var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(_Company.CompanyId).CompanyName.ReplaceSpecialChar();
                        var pdftempFolderName = string.Format(filename, comname) + _Customer.Id + "_AgreementAnswer.pdf";
                        string Serverfilename = FileHelper.GetFileFullPath(pdftempFolderName);
                        FileHelper.SaveFile(applicationPDFData, Serverfilename);

                        CustomerFile CustomerFile = new CustomerFile()
                        {
                            CompanyId = _Company.CompanyId,
                            FileId = Guid.NewGuid(),
                            CustomerId = _Customer.CustomerId,
                            FileDescription = _Customer.Id + "_Agreement_Answer.pdf",
                            Filename = "/" + pdftempFolderName,
                            FileFullName = _Customer.Id + "_AgreementAnswer.pdf",
                            Uploadeddate = DateTime.Now.UTCCurrentTime(),
                            IsActive = true,
                            CreatedBy = _Customer.Soldby1,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            UpdatedBy = _Customer.Soldby1,
                            UpdatedDate = DateTime.Now.UTCCurrentTime()
                        };
                        _Util.Facade.CustomerFileFacade.InsertCustomerFile(CustomerFile);
                    }
                    if (result)
                    {
                        //remove Invoice references from PaymentInfoCustomer table
                        //Update Invoice status if not paid
                        List<PaymentInfoCustomer> PICList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(_Customer.CustomerId);
                        foreach (var item in PICList)
                        {
                            if (!string.IsNullOrWhiteSpace(item.InvoiceId))
                            {

                                Invoice inv = _Util.Facade.InvoiceFacade.GetInvoiceByInvoiceId(item.InvoiceId);

                                if (inv != null && inv.Status != LabelHelper.InvoiceStatus.Paid && inv.Status != LabelHelper.InvoiceStatus.Init)
                                {
                                    string TempStatus = inv.Status;

                                    inv.Status = LabelHelper.InvoiceStatus.Cancelled;
                                    inv.BalanceDue = 0;
                                    _Util.Facade.InvoiceFacade.UpdateInvoice(inv);
                                    if (TempStatus != inv.Status)
                                    {
                                        bool newBool = inv.IsARBInvoice ?? false;

                                        #region log
                                        UserActivity ua = new UserActivity()
                                        {
                                            ActivityId = Guid.NewGuid(),
                                            PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                                            ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                                            // new paramiter
                                            Action = "4264,CustomerInvoicePayment,Public",
                                            StatsDate = DateTime.UtcNow,
                                            UserId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                            UserName = _Customer.FirstName + " " + _Customer.LastName,
                                            ActionDisplyText = "Invoice Status Changed from " + TempStatus + " To " + inv.Status + " #InvoiceId: " + inv.InvoiceId,
                                            IsARB = newBool,

                                            UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                                            UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                                        };
                                        Guid ActivityID = ua.ActivityId;
                                        _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                                        UserActivityCustomer uac = new UserActivityCustomer()
                                        {
                                            ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                                            CustomerId = inv.CustomerId != null ? inv.CustomerId : Guid.NewGuid(),
                                            RefId = inv.InvoiceId,

                                        };
                                        _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                                        #endregion
                                    }
                                }
                            }
                            item.IsPaid = false;
                            item.InvoiceId = "";
                            _Util.Facade.PaymentInfoCustomerFacade.UpdatePaymentInfoCustomer(item);

                        }
                    }

                    CustomerGuidId = _Customer.CustomerId;
                }
                else
                {
                    Guid TicketId = IAgreeConvertLeadToCustomer(_Customer, _Company, (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : ""), (isinvoice.HasValue ? isinvoice.Value : false));
                    tempTicketId = TicketId;
                    result = TicketId != Guid.Empty && IAgreeLeadtoCustomerConvertQAEmail(_Customer, _Company);
                    result = result && IAgreeAllScheduleCalendar(_Customer, _Company);
                    if (AfterSubmitDocumentSave == true)
                    {
                        result = result && IAgreeCustomerFileUpload(_Customer, _Company, TicketId, agreementtempid.HasValue ? agreementtempid.Value : 0, true, firstpage.HasValue ? firstpage.Value : false, (ticketid.HasValue ? ticketid.Value : 0), (recreate.HasValue ? recreate.Value : false), (isinvoice.HasValue ? isinvoice.Value : false), (!string.IsNullOrWhiteSpace(invoiceid) ? invoiceid : ""), (isestimator.HasValue ? isestimator.Value : false), (estid.HasValue ? estid.Value : 0), (userid != Guid.Empty ? userid : Guid.Empty), (commercial.HasValue ? commercial.Value : false));
                    }
                    Guid soldby = new Guid();
                    if (!string.IsNullOrWhiteSpace(_Customer.Soldby))
                    {
                        soldby = new Guid(_Customer.Soldby);
                    }
                    var result2 = result && SendSignedAgreementNotification(CompanyId, soldby, _Customer.FirstName + " " + _Customer.LastName, _Customer.Id);
                    bool isques = false;
                    bool isrecreate = recreate.HasValue ? recreate.Value : false;
                    bool isfirstpage = firstpage.HasValue ? firstpage.Value : false;
                    bool iscommercial = commercial.HasValue ? commercial.Value : false;
                    var objsetting = _Util.Facade.GlobalSettingsFacade.GetGlobalsettingBySearchKeyAndCompanyId("ContractAgreementquestionnaire", _Company.CompanyId);
                    if (objsetting != null)
                    {
                        isques = Convert.ToBoolean(objsetting.Value);
                    }
                    if (isrecreate == false && isfirstpage == false && isques == true)
                    {
                        AgreementQuestionAnswerPDFModel model = new AgreementQuestionAnswerPDFModel();
                        model.Customer = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(_Customer.CustomerId);
                        model.AgreementQuestion = _Util.Facade.AgreementFacade.GetAllAgreementQuestionByCustomerType(_Customer.Type);
                        model.AgreementAnswer = _Util.Facade.AgreementFacade.GetAllAgreementAnswerByCustomerId(_Customer.CustomerId);
                        int term = 0;
                        double contract;
                        string conterm = "";
                        if (model.Customer != null)
                        {
                            bool success = Double.TryParse(model.Customer.ContractTeam, out contract);
                            if (success)
                            {
                                term = Convert.ToInt32(Math.Round(contract * 12));
                                ViewBag.termid = term;
                                if (term > 1)
                                {
                                    ViewBag.TermMonth = " month";
                                }
                                else
                                {
                                    ViewBag.TermMonth = " month";
                                }
                            }
                            conterm = string.Concat(ViewBag.termid, ViewBag.TermMonth);
                            foreach (var item in model.AgreementQuestion)
                            {
                                item.Title = string.Format(item.Title, conterm);
                            }
                        }
                        ViewAsPdf actionPDF = new Rotativa.ViewAsPdf("~/Views/Agreement/AgreementQuestionAnswerPDF.cshtml", model)
                        {
                            PageSize = Rotativa.Options.Size.A4,
                            PageOrientation = Rotativa.Options.Orientation.Portrait,
                            PageMargins = { Left = 1, Right = 1 },

                        };
                        byte[] applicationPDFData = actionPDF.BuildPdf(ControllerContext);
                        Random rand = new Random();
                        string filename = ConfigurationManager.AppSettings["File.LeadToCustomerAgreement"];
                        var comname = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(_Company.CompanyId).CompanyName.ReplaceSpecialChar();
                        var pdftempFolderName = string.Format(filename, comname) + _Customer.Id + "_AgreementAnswer.pdf";
                        string Serverfilename = FileHelper.GetFileFullPath(pdftempFolderName);
                        FileHelper.SaveFile(applicationPDFData, Serverfilename);
                        CustomerFile CustomerFile = new CustomerFile()
                        {
                            CompanyId = _Company.CompanyId,
                            FileId = Guid.NewGuid(),
                            CustomerId = _Customer.CustomerId,
                            FileDescription = _Customer.Id + "_Agreement_Answer.pdf",
                            Filename = "/" + pdftempFolderName,
                            FileFullName = _Customer.Id + "_AgreementAnswer.pdf",
                            Uploadeddate = DateTime.Now.UTCCurrentTime(),
                            IsActive = true,
                            CreatedBy = _Customer.Soldby1,
                            CreatedDate = DateTime.Now.UTCCurrentTime(),
                            UpdatedBy = _Customer.Soldby1,
                            UpdatedDate = DateTime.Now.UTCCurrentTime()
                        };
                        _Util.Facade.CustomerFileFacade.InsertCustomerFile(CustomerFile);

                    }
                }
                if (result)
                {
                    string Cusname = "";
                    if (!String.IsNullOrWhiteSpace(_Customer.DBA))
                    {
                        Cusname = _Customer.DBA;
                    }
                    else if (!String.IsNullOrWhiteSpace(_Customer.BusinessName))
                    {
                        Cusname = _Customer.BusinessName;
                    }
                    else
                    {
                        Cusname = _Customer.FirstName + ' ' + _Customer.LastName;
                    }
                    #region Log for Sign 

                    UserActivity ua = new UserActivity()
                    {
                        ActivityId = Guid.NewGuid(),
                        PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                        ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                        // new paramiter
                        Action = "File Signed",
                        StatsDate = DateTime.UtcNow,
                        UserId = _Customer.CustomerId != null ? _Customer.CustomerId : Guid.NewGuid(),
                        UserName = Cusname,
                        ActionDisplyText = "Lead #" + _Customer.Id + " Signed and Submitted Smart Lead Agreement Document",


                        UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                        UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                    };
                    Guid ActivityID = ua.ActivityId;
                    _Util.Facade.UserActivityFacade.InsertUserActivity(ua);
                    UserActivityCustomer uac = new UserActivityCustomer()
                    {
                        ActivityId = ActivityID != null ? ActivityID : Guid.NewGuid(),

                        CustomerId = _Customer.CustomerId != null ? _Customer.CustomerId : Guid.NewGuid(),
                        RefId = _Customer.Id.ToString(),

                    };
                    _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uac);
                    #endregion

                    #region Log for Convert 

                    UserActivity uaconvert = new UserActivity()
                    {
                        ActivityId = Guid.NewGuid(),
                        PageUrl = Request.Url.AbsoluteUri != null ? Request.Url.AbsoluteUri : "",
                        ReferrerUrl = Request.UrlReferrer != null ? Request.UrlReferrer.AbsoluteUri : "",
                        // new paramiter
                        Action = "Lead to Customer",
                        StatsDate = DateTime.UtcNow,
                        UserId = _Customer.CustomerId != null ? _Customer.CustomerId : Guid.NewGuid(),
                        UserName = Cusname,
                        ActionDisplyText = "Lead #" + _Customer.Id + " is Converted to Customer </br> Convertion Type: System Generated",


                        UserAgent = AppConfig.GetUserAgent != null ? AppConfig.GetUserAgent : "",
                        UserIp = AppConfig.GetIP != null ? AppConfig.GetIP : ""
                    };
                    Guid ActivityIDConvert = uaconvert.ActivityId;
                    _Util.Facade.UserActivityFacade.InsertUserActivity(uaconvert);
                    UserActivityCustomer uacconvert = new UserActivityCustomer()
                    {
                        ActivityId = ActivityIDConvert != null ? ActivityIDConvert : Guid.NewGuid(),

                        CustomerId = _Customer.CustomerId != null ? _Customer.CustomerId : Guid.NewGuid(),
                        RefId = _Customer.Id.ToString(),

                    };
                    _Util.Facade.UserActivityCustomerFacade.InsertUserActivityCustomer(uacconvert);

                    #endregion

                    //List<PaymentInfoCustomer> PICList = _Util.Facade.PaymentInfoCustomerFacade.GetAllPaymentInfoCustomerByCustomerId(_Customer.CustomerId);

                    //if (custommerCompany.IsLead == true)
                    //{
                    //    CapturePayment(_Customer, custommerCompany.CompanyId, new Guid("22222222-2222-2222-2222-222222222222"), "SYSTEM ", null, false);
                    //}

                    ///"mayur" Adding discount in invoice :: start                    
                    double eqpDiscountPercent = 0;
                    double eqpDiscountInAmount = 0;
                    double eqpTotalAmount = 0;
                    double subtotal = 0.00;
                    double eqpfinaltotal = 0.00;
                    double tax = 0.00;
                    string DiscountType = "";

                    custommerCompany = _Util.Facade.CustomerFacade.GetCustomerCompanyByCustomerId(Id.Value);
                    var GetSalesTax = _Util.Facade.GlobalSettingsFacade.GetSalesTax(custommerCompany.CompanyId, _Customer.CustomerId);




                    List<CustomerPackageEqp> CustomerPackageEqpList = _Util.Facade.PackageFacade.GetCustomerPackageEqpListbyCustomerId(custommerCompany.CompanyId, _Customer.CustomerId);
                    if (CustomerPackageEqpList != null && CustomerPackageEqpList.Count > 0)
                    {

                        foreach (var eqp in CustomerPackageEqpList)
                        {
                            double eqptotal = eqp.Total != null ? eqp.Total.Value : 0;
                            eqpTotalAmount = eqpTotalAmount + eqptotal;
                        }

                        foreach (var eqp in CustomerPackageEqpList)
                        {

                            if (eqp.DiscountPercent.HasValue && eqp.DiscountPercent.Value > 0)
                            {
                                eqpDiscountPercent = eqp.DiscountPercent != null ? eqp.DiscountPercent.Value : 0.00;
                                eqpDiscountInAmount = Convert.ToDouble((eqpTotalAmount * eqp.DiscountPercent) / 100);
                                DiscountType = "Percent";
                            }
                            else
                            {
                                eqpDiscountPercent = 0.00;
                                eqpDiscountInAmount = Convert.ToDouble(eqp.DiscountInAmount);
                                DiscountType = "Amount";

                            }

                            break;

                        }

                        subtotal = Convert.ToDouble(eqpTotalAmount - eqpDiscountInAmount);
                        double eqptax = (subtotal * Convert.ToDouble(GetSalesTax.Value)) / 100;
                        eqpfinaltotal = subtotal + eqptax;



                    }


                    CapturePayment(_Customer, custommerCompany.CompanyId, new Guid("22222222-2222-2222-2222-222222222222"), "SYSTEM", false, "Iagree", DiscountType, eqpDiscountInAmount, eqpDiscountPercent, 0.00, 0.00, eqpfinaltotal);



                    ///"mayur" Adding discount in invoice :: End

                    SignSmartAgreementAppointmentEquipment(_Customer);
                    SMSConvertLeadToCustomer(_Customer.Id, tempTicketId);
                }
                CustomerGuidId = _Customer.CustomerId;
            }

            // Here is my recurring billing code   

            //if (CustomerGuidId != Guid.Empty)
            //{
            //    Invoice RMRInvoice = _Util.Facade.InvoiceFacade.GetInvoiceByCustomerId(CustomerGuidId);
            //    if (RMRInvoice != null) //  && RMRInvoice.IsARBInvoice != null && RMRInvoice.IsARBInvoice.Value
            //    {
            //        var IsRMRActice = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(RMRInvoice.CompanyId, "IsRMRActive");
            //        if (IsRMRActice != null && IsRMRActice.Value.ToLower() == "true")
            //        {
            //            var controller = DependencyResolver.Current.GetService<RecurringBillingController>();
            //            controller.UpdateRecurringBillingInformationByCustomerModification(RMRInvoice.CustomerId, tempTicketId, RMRInvoice.LastUpdatedByUid, RMRInvoice.CompanyId, RMRInvoice.InvoiceId, "SmartLeads");
            //        }
            //    }
            //}
            return result;
        }
    }
     
}
