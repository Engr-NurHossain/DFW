using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Rotativa;
using HS.Entities;
using ClosedXML.Excel;
using Excel = HS.Web.UI.Helper.ExcelFormatHelper;
using System.Data;
using System.IO;
using HS.Web.UI.Helper;
using HS.Framework;
using NsExcel = Microsoft.Office.Interop.Excel;
using System.ComponentModel;
using System.Globalization;
using System.Reflection;
using Rotativa.Options;
using PermissionChekcer = HS.Web.UI.Helper.PermissionHelper;
using Permissions = HS.Framework.UserPermissions;
using DocumentFormat.OpenXml.Spreadsheet;
using System.Xml;
using System.Text;
using NLog;
using System.EnterpriseServices;
using DocumentFormat.OpenXml.Drawing;
using DocumentFormat.OpenXml.Office2010.Excel;
using HS.Entities.Bases;


namespace HS.Web.UI.Controllers
{
    public class ReportsController : BaseController
    {
        public ReportsController()
        {
            logger = LogManager.GetCurrentClassLogger();
        }

        [Authorize]
        // GET: Report
        public ActionResult Index(int? id)
        {
            if (!base.SetLayoutCommons())
            {
                return RedirectToAction("Logout", "Login");
            }
            if (id.HasValue)
            {
                ViewBag.id = id.Value;
            }
            return View();
        }
        public HolidayReturnModel HolidayCalculation(DateTime StartDate, DateTime EndDate)
        {
            HolidayReturnModel model = new HolidayReturnModel();
            DateTime dt = DateTime.UtcNow.UTCToClientTime();
            float workingHours = 8.00F;
            string WH = _Util.Facade.GlobalSettingsFacade.GetOnlyStrValueFromGlobalSettingByKey("EmployeeWorkingHours");
            if (!float.TryParse(WH, out workingHours))
            {
                workingHours = 8.00F;
            }
            string FirstDayOfWeek = _Util.Facade.GlobalSettingsFacade.GetOnlyStrValueFromGlobalSettingByKey("FirstDayOfWeek");
            string HolidayCount = _Util.Facade.GlobalSettingsFacade.GetOnlyStrValueFromGlobalSettingByKey("CustomCalendarColumnHourDuration");

            #region day calculation
            #region Weekly Holiday Calculation
            string queryweekend = "";
            string WeekEndDay = "";
            if (FirstDayOfWeek.ToLower() == "saturday")
            {
                if (HolidayCount == "2") { WeekEndDay = "friday,thursday"; }
                else if (HolidayCount == "3") { WeekEndDay = "friday,thursday,wednesday"; }
                else if (HolidayCount == "4") { WeekEndDay = "friday,thursday,wednesday,tuesday"; }
                else if (HolidayCount == "5") { WeekEndDay = "friday,thursday,wednesday,tuesday,monday"; }
                else if (HolidayCount == "6") { WeekEndDay = "friday,thursday,wednesday,tuesday,monday,sunday"; }
                else { WeekEndDay = "friday"; }
            }
            else if (FirstDayOfWeek.ToLower() == "sunday")
            {
                if (HolidayCount == "2") { WeekEndDay = "saturday,friday"; }
                else if (HolidayCount == "3") { WeekEndDay = "saturday,friday,thursday"; }
                else if (HolidayCount == "4") { WeekEndDay = "saturday,friday,thursday,wednesday"; }
                else if (HolidayCount == "5") { WeekEndDay = "saturday,friday,thursday,wednesday,tuesday"; }
                else if (HolidayCount == "6") { WeekEndDay = "saturday,friday,thursday,wednesday,tuesday,monday"; }
                else { WeekEndDay = "saturday"; }
            }
            else if (FirstDayOfWeek.ToLower() == "monday")
            {
                if (HolidayCount == "2") { WeekEndDay = "sunday,saturday"; }
                else if (HolidayCount == "3") { WeekEndDay = "sunday,saturday,friday"; }
                else if (HolidayCount == "4") { WeekEndDay = "sunday,saturday,friday,thursday"; }
                else if (HolidayCount == "5") { WeekEndDay = "sunday,saturday,friday,thursday,wednesday"; }
                else if (HolidayCount == "6") { WeekEndDay = "sunday,saturday,friday,thursday,wednesday,tuesday"; }
                else { WeekEndDay = "sunday"; }
            }
            if (!string.IsNullOrWhiteSpace(WeekEndDay))
            {
                var defaulttype = WeekEndDay.Split(',');
                queryweekend = string.Format("'{0}'", string.Join("','", defaulttype.Select(i => i.Replace("'", "''"))));
            }
            #endregion

            if (StartDate == new DateTime() || EndDate == new DateTime())
            {
                EndDate = new DateTime(dt.Year, dt.Month, DateTime.DaysInMonth(dt.Year, dt.Month));
                StartDate = EndDate.AddYears(-3);
            }
            dt = StartDate;
            //workingHours = (float)(endmin / 60));
            //var holiday = _Util.Facade.CompanyHolidayFacade.GetCompanyHolidayList(StartDate, EndDate);
            //int holidayQuery = 0;
            //if (holiday != null && holiday.Count() > 0)
            //{
            //    holidayQuery = holiday.Count();
            //}
            //int numberOfWorkingDays = 0;
            //int totalDays = (EndDate - StartDate).Days + 1;
            //for (int i = 0; i < totalDays; i++)
            //{
            //    string strday = dt.ToString("dddd");
            //    if (WeekEndDay.Contains(strday.ToLower()))
            //    {
            //        if (holidayQuery > 0)
            //        {
            //            var weekholiday = holiday.Where(x => x.Holiday == dt).Select(x => x).FirstOrDefault();
            //            if (weekholiday != null)
            //            {
            //                holidayQuery--;
            //            }
            //        }
            //        dt = dt.AddDays(1);
            //        continue;
            //    }
            //    else
            //    {
            //        dt = dt.AddDays(1);
            //        numberOfWorkingDays++;
            //    }
            //}
            //numberOfWorkingDays -= holidayQuery;
            model.Start = StartDate;
            model.End = EndDate;
            model.Hours = workingHours;
            //model.Days = numberOfWorkingDays;
            model.WeekEnd = queryweekend;
            return model;
            #endregion
        }
        public ActionResult ReportsPartial()
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            ViewBag.ispayroll = _Util.Facade.EmployeeFacade.GetEmployeeByUsername(CurrentUser.Identity.Name).IsPayroll;
            return View("_ReportsPartial");
        }
        public ActionResult LeadsReports()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuLeadsReport))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            ViewBag.ispayroll = _Util.Facade.EmployeeFacade.GetEmployeeByUsername(CurrentUser.Identity.Name).IsPayroll;
            return View("_LeadsReports");
        }
        public ActionResult CustomerReports()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuCustomerReport))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }

            if (base.IsPermitted(UserPermissions.ReportsPermissions.CustomerReportCustomerTab))
            {
                ViewBag.StartTab = "CustomerReportCustomerTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.CustomerReportConvertedCustomerTab))
            {
                ViewBag.StartTab = "CustomerReportConvertedCustomerTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.CustomerReportDelinquentCustomerTab))
            {
                ViewBag.StartTab = "CustomerReportDelinquentCustomerTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.CustomerReportTransferCustomerTab))
            {
                ViewBag.StartTab = "CustomerReportTransferCustomerTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.CustomerReportTestAccountTab))
            {
                ViewBag.StartTab = "CustomerReportTestAccountTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.CustomerReportInactiveCustomerTab))
            {
                ViewBag.StartTab = "CustomerReportInactiveCustomerTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.CustomerFinancedReport))
            {
                ViewBag.StartTab = "CustomerFinancedReportTab";
            }
            else
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }


            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            ViewBag.ispayroll = _Util.Facade.EmployeeFacade.GetEmployeeByUsername(CurrentUser.Identity.Name).IsPayroll;
            ViewBag.CustomerStatus = _Util.Facade.LookupFacade.GetLookupByKey("CustomerStatus").Select(x =>
                          new SelectListItem()
                          {
                              Text = x.DisplayText.ToString(),
                              Value = x.DataValue.ToString(),

                          }).ToList();
            return View("_CustomersReports");
        }
        public ActionResult InventoryReports()
        {

            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuInventoryReports))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }

            if (base.IsPermitted(UserPermissions.ReportsPermissions.InventoryReportWarehouseInventoryTab))
            {
                ViewBag.StartTab = "InventoryReportWarehouseInventoryTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.InventoryReportBadInventoryTab))
            {
                ViewBag.StartTab = "InventoryReportBadInventoryTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.InventoryReportTruckInventoryTab))
            {
                ViewBag.StartTab = "InventoryReportTruckInventoryTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.InventoryReportTransferInventoryTab))
            {
                ViewBag.StartTab = "InventoryReportTransferInventoryTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.InventoryReportSummaryTab))
            {
                ViewBag.StartTab = "InventoryReportSummaryTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.CompletedJobInventoryReportTab))
            {
                ViewBag.StartTab = "CompletedJobInventoryReportTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.TechTruckInventoryReportTab))
            {
                ViewBag.StartTab = "InventoryTechTruckReportTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.TechTruckInventoryReportTab))
            {
                ViewBag.StartTab = "InventoryTechUsedReportTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.TechTruckInventoryReportTab))
            {
                ViewBag.StartTab = "InventoryTechOrderReportTab";
            }
            else
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }






            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            ViewBag.ispayroll = _Util.Facade.EmployeeFacade.GetEmployeeByUsername(CurrentUser.Identity.Name).IsPayroll;
            return View("_InventoryReports");
        }
        public ActionResult AccountabilityReport()
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            return View();
        }
        public ActionResult AccountabilityList(string Start, string End, string searchtext, int pageno, int pagesize, string order, bool? GetReport)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                searchtext = HttpUtility.UrlDecode(searchtext);
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    dt = _Util.Facade.EmployeeFacade.GetAllEmployeeWithArticleForDownload(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, pageno, pagesize, order);
                }
                else if (!string.IsNullOrWhiteSpace(Start) && Start != "undefined" && !string.IsNullOrWhiteSpace(End) && End != "undefined")
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour();
                    EndDate = Convert.ToDateTime(End).SetMaxHour();
                    dt = _Util.Facade.EmployeeFacade.GetAllEmployeeWithArticleForDownload(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, pageno, pagesize, order);
                }
                else
                {
                    dt = _Util.Facade.EmployeeFacade.GetAllEmployeeWithArticleForDownload(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, pageno, pagesize, order);
                }
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable2(dt, "Accountability Report", rowarray, null, null);
            }
            AccountabilityReportModel Model = new AccountabilityReportModel();
            if (StartDate != new DateTime() && EndDate != new DateTime())
            {
                Model = _Util.Facade.EmployeeFacade.GetAllEmployeeWithArticle(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, pageno, pagesize, order);
            }
            else if (!string.IsNullOrWhiteSpace(Start) && Start != "undefined" && !string.IsNullOrWhiteSpace(End) && End != "undefined")
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                Model = _Util.Facade.EmployeeFacade.GetAllEmployeeWithArticle(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, pageno, pagesize, order);
            }
            else
            {
                Model = _Util.Facade.EmployeeFacade.GetAllEmployeeWithArticle(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, pageno, pagesize, order);
            }
            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            if (Model.TotalCount > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            ViewBag.search = searchtext;
            ViewBag.order = order;
            return View(Model);
        }
        public ActionResult AccountabilityHistory(Guid UserId, string Start, string End, string Order)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            AccountabilityHistoryReportModel Model = new AccountabilityHistoryReportModel();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            Model = _Util.Facade.EmployeeFacade.GetAccountabilityHistoryList(StartDate, EndDate, UserId, Order);
            Employee emp = _Util.Facade.EmployeeFacade.GetEmployeeByEmployeeId(UserId);
            ViewBag.Keyword = emp.FirstName + " " + emp.LastName;
            ViewBag.OutOfNumber = Model.TotalCount;
            ViewBag.UserId = UserId;
            return View(Model);
        }
        public ActionResult AccountabilityUnReadHistory(Guid UserId, string Start, string End, string Order)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            AccountabilityHistoryReportModel Model = new AccountabilityHistoryReportModel();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            Model = _Util.Facade.EmployeeFacade.GetAccountabilityHistoryUnreadList(StartDate, EndDate, UserId, Order);
            Employee emp = _Util.Facade.EmployeeFacade.GetEmployeeByEmployeeId(UserId);
            ViewBag.Keyword = emp.FirstName + " " + emp.LastName;
            ViewBag.OutOfNumber = Model.TotalCount;
            ViewBag.UserId = UserId;
            return View("AccountabilityHistory", Model);
        }

        public ActionResult AccountabilityCompletedHistory(Guid UserId, string Start, string End, string Order)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            AccountabilityHistoryReportModel Model = new AccountabilityHistoryReportModel();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            Model = _Util.Facade.EmployeeFacade.GetAccountabilityHistoryCompletedList(StartDate, EndDate, UserId, Order);
            Employee emp = _Util.Facade.EmployeeFacade.GetEmployeeByEmployeeId(UserId);
            ViewBag.Keyword = emp.FirstName + " " + emp.LastName;
            ViewBag.OutOfNumber = Model.TotalCount;
            ViewBag.UserId = UserId;
            return View("AccountabilityHistory", Model);
        }
        private FileContentResult MakeExcelFromDataTable2(DataTable dtResult, string ReportFor, int[] rowIndex, int[] coloumnIndex, int[] percent)
        {
            using (XLWorkbook wb = new XLWorkbook())
            {
                if (dtResult != null)
                {

                    var worksheet = wb.Worksheets.Add(dtResult);
                    if (ReportFor == "BrinksReport")
                    {
                        wb.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        wb.Style.Font.Bold = true;
                        worksheet.AutoFilter.Enabled = false;

                        /*/Excel Style /*/
                        //worksheet.Ranges("A1:D1").Style.Fill.PatternType = XLFillPatternValues.Solid;
                        //worksheet.Ranges("A1:D1").Style.Fill.BackgroundColor = XLColor.Yellow;
                        //worksheet.Style.Font.FontColor = XLColor.Black;
                        worksheet.Column(1).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(2).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(3).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(4).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(5).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(6).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(7).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(1).Style.Font.SetFontSize(12);
                        worksheet.Column(2).Style.Font.SetFontSize(12);
                        worksheet.Column(3).Style.Font.SetFontSize(12);
                        worksheet.Column(4).Style.Font.SetFontSize(12);
                        worksheet.Column(5).Style.Font.SetFontSize(12);
                        worksheet.Column(6).Style.Font.SetFontSize(12);
                        worksheet.Column(7).Style.Font.SetFontSize(12);

                        worksheet.Column(1).Width = 13.71;
                        worksheet.Column(2).Width = 13.71;
                        worksheet.Column(3).Width = 13.71;
                        worksheet.Column(4).Width = 13.71;
                        worksheet.Column(5).Width = 13.71;
                        worksheet.Column(6).Width = 13.71;
                        worksheet.Column(7).Width = 13.71;



                        worksheet.Column(1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        worksheet.Column(2).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        worksheet.Column(3).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        worksheet.Column(4).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Right;
                        worksheet.Column(5).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        worksheet.Column(6).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        worksheet.Column(7).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

                        worksheet.Ranges("A1:G1").Style.Font.Bold = true;
                        worksheet.Cells("A1:G1").Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        worksheet.Cells("A1:D1").Style.Font.SetFontSize(11);
                        worksheet.Cells("A1:D1").Style.Font.SetFontName("Calibri");
                        worksheet.Cells("A1:D1").Style.Font.SetBold();
                        worksheet.Cells("A1:G1").Style.Font.SetFontColor(XLColor.CoolBlack);
                        worksheet.Cells("A1:D1").Style.Fill.BackgroundColor = XLColor.Yellow;
                        worksheet.Cells("E1:G1").Style.Fill.BackgroundColor = XLColor.AshGrey;


                    }

                    var format = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey("CurrentCurrencyExcelFormat");
                    if (coloumnIndex != null && format != null && rowIndex != null)
                    {
                        foreach (int itemcol in coloumnIndex)
                        {
                            for (int i = 1; i < rowIndex[0]; i++)
                            {
                                var a = worksheet.Cell(i, itemcol).Style;
                                worksheet.Cell(i, itemcol).Style.NumberFormat.Format = format.Value;

                            }
                        }
                    }

                    string format2 = "0.00\\%";
                    if (percent != null && format2 != null && rowIndex != null)
                    {
                        foreach (int itemcol in percent)
                        {
                            for (int i = 1; i < rowIndex[0]; i++)
                            {
                                worksheet.Cell(i, itemcol).Style.NumberFormat.Format = format2;

                            }
                        }
                    }


                    MemoryStream memorystreem = new MemoryStream();
                    wb.SaveAs(memorystreem);
                    var fName = string.Format("{0}-{1}.xlsx", ReportFor, DateTime.Now.UTCCurrentTime().ToString("MM/dd/yyyy"));

                    byte[] fileContents = memorystreem.ToArray();
                    var userAgent = HttpContext.Request.UserAgent.ToLower();
                    if (userAgent.Contains("iphone;") || userAgent.Contains("ipad;"))
                    {
                        //var newExFile= File(fileContents, Excel.Format("ExcelFormat"), fName);
                        //var excelApplicatiopn = new NsExcel.Application();
                        //excelApplicatiopn.Visible = true;
                        //NsExcel.Workbooks books = excelApplicatiopn.Workbooks;
                        //NsExcel.Workbook sheet = books.Open();
                        return File(fileContents, Excel.Format("ExcelFormat"), fName);
                    }
                    else
                    {
                        return File(fileContents, Excel.Format("ExcelFormat"), fName);
                    }
                }
                else
                {
                    byte[] fileContents = new byte[1];
                    return File(fileContents, Excel.Format("ExcelFormat"), "empty.xlsx");
                }
            }
        }
        public ActionResult ExpenseReports()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuExpenseReports))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            ViewBag.ispayroll = _Util.Facade.EmployeeFacade.GetEmployeeByUsername(CurrentUser.Identity.Name).IsPayroll;
            return View("_ExpenseReports");
        }
        public ActionResult SearchedReport()
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            return View();
        }
        public ActionResult AllRemindersReportList()
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartTab = "AccountabilityReportTab";
            return View();
        }
        public ActionResult PayrollReports()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuPayrollReports))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            ViewBag.ispayroll = _Util.Facade.EmployeeFacade.GetEmployeeByUsername(CurrentUser.Identity.Name).IsPayroll;
            return View("_PayrollReports");
        }

        public ActionResult TicketReports()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuTicketReports))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            ViewBag.ispayroll = _Util.Facade.EmployeeFacade.GetEmployeeByUsername(CurrentUser.Identity.Name).IsPayroll;
            return View("_TicketReports");
        }
        // public ActionResult TechnicianReports()
        //{
        //     if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuTechnicianReports))
        //     {
        //         return View("~/Views/Shared/_AccessDenied.cshtml");
        //     }
        //     var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
        //     ViewBag.ispayroll = _Util.Facade.EmployeeFacade.GetEmployeeByUsername(CurrentUser.Identity.Name).IsPayroll;
        //     return View("_TechnicianReports");
        // }

        //public ActionResult InstallationTrackerReport()
        //{
        //    if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuInstallationTrackerReport))
        //    {
        //        return View("~/Views/Shared/_AccessDenied.cshtml");
        //    }
        //    var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
        //    ViewBag.ispayroll = _Util.Facade.EmployeeFacade.GetEmployeeByUsername(CurrentUser.Identity.Name).IsPayroll;
        //    return View("_InstallationTrackerReport");
        //}
        public ActionResult CSRActivityReport()
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            ViewBag.ispayroll = _Util.Facade.EmployeeFacade.GetEmployeeByUsername(CurrentUser.Identity.Name).IsPayroll;
            return View();
        }

        //public ActionResult CompletedInventoryReport()
        //{
        //    if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuCompletedInventoryReport))
        //    {
        //        return View("~/Views/Shared/_AccessDenied.cshtml");
        //    }
        //    var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
        //    ViewBag.ispayroll = _Util.Facade.EmployeeFacade.GetEmployeeByUsername(CurrentUser.Identity.Name).IsPayroll;
        //    return View("_CompletedInventoryReport");
        //}

        public ActionResult SalesReports()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuSalesReports))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }

            if (base.IsPermitted(UserPermissions.ReportsPermissions.SalesReportSalesTab))
            {
                ViewBag.StartTab = "SalesReportSalesTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.SalesReportRecurringBillingTab))
            {
                ViewBag.StartTab = "SalesReportRecurringBillingTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.SalesReportSummaryTab))
            {
                ViewBag.StartTab = "SalesReportSummaryTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.SalesReportInvoiceListTab))
            {
                ViewBag.StartTab = "SalesReportInvoiceListTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.EstimateReportListTab))
            {
                ViewBag.StartTab = "SalesReportEstimateListTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.SalesReportCollectionTab))
            {
                ViewBag.StartTab = "SalesReportCollectionTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.SalesReportNewSalesTab))
            {
                ViewBag.StartTab = "SalesReportNewSalesTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.TaxCollectionReport))
            {
                ViewBag.StartTab = "TaxCollectionReport";

            }

            else
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }


            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            ViewBag.ispayroll = _Util.Facade.EmployeeFacade.GetEmployeeByUsername(CurrentUser.Identity.Name).IsPayroll;
            return View();
        }
        public ActionResult BrinksReport()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuBrinksReport))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }

            if (base.IsPermitted(UserPermissions.ReportsPermissions.BrinksReportBrinksTab))
            {
                ViewBag.StartTab = "BrinksReportBrinksTab";
            }
            else if (base.IsPermitted(UserPermissions.ReportsPermissions.BrinksReportSoldTab))
            {
                ViewBag.StartTab = "BrinksReportSoldTab";
            }
            else
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }

            return View();
        }
        public ActionResult UccReport()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuUccReport))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }



            return View();
        }
        public ActionResult BookingSalesReports()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuBookingSalesReport))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            ViewBag.ispayroll = _Util.Facade.EmployeeFacade.GetEmployeeByUsername(CurrentUser.Identity.Name).IsPayroll;
            return View();
        }
        public ActionResult JobsReports()
        {
            if (!base.IsPermitted(UserPermissions.Dashboard.JobReports))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            List<SelectListItem> bookingsource = new List<SelectListItem>();
            bookingsource.Add(new SelectListItem()
            {
                Text = "Online",
                Value = "Online"
            });
            bookingsource.Add(new SelectListItem()
            {
                Text = "System Generated",
                Value = "System"
            });
            ViewBag.bookingsource = bookingsource;
            ViewBag.ispayroll = _Util.Facade.EmployeeFacade.GetEmployeeByUsername(CurrentUser.Identity.Name).IsPayroll;

            return View();
        }
        public ActionResult ConversionReports()
        {
            if (!base.IsPermitted(UserPermissions.Dashboard.ConvertionReports))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            ViewBag.ispayroll = _Util.Facade.EmployeeFacade.GetEmployeeByUsername(CurrentUser.Identity.Name).IsPayroll;
            return View();
        }

        public ActionResult LeadsReportPartial(string Start, string End, bool? GetReport, int pageno, int pagesize)
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string soldBy = "";
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.ShowAllReportData))
            {
                soldBy = CurrentUser.UserId.ToString();
            }
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetAllLeadsReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, soldBy);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllLeadsReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, soldBy);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllLeadsReportByCompany(CurrentUser.CompanyId.Value, null, null, soldBy);
                    }

                }
                return MakeExcelFromDataTable(dt, "LeadesReport", null, null);
            }
            CustomerListWithCountModel Model = new CustomerListWithCountModel();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                //EndDate = EndDate.AddHours(23).AddMinutes(59).AddSeconds(59);

                Model = _Util.Facade.CustomerFacade.GetAllLeadsByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, null, null, null, soldBy, null);
            }
            else
            {
                //if (StartDate != new DateTime() && EndDate != new DateTime())
                //{
                Model = _Util.Facade.CustomerFacade.GetAllLeadsByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, null, null, null, soldBy, null);
                //}
                //else
                //{
                //    Model = _Util.Facade.CustomerFacade.GetAllLeadsByCompany(CurrentUser.CompanyId.Value);
                //}

            }
            ViewBag.TotalLeads = Model.TotalCustomerCount.Counter;
            ViewBag.TotalCustomer = Model.CustomerCount.TotalCustomer;
            ViewBag.Closing = Math.Abs(((double)ViewBag.TotalCustomer / (double)ViewBag.TotalLeads) * 100);
            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;

            if (Model.CustomerList.Count > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCustomerCount.Counter;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);

            return View("_LeadsReportPartial", Model.CustomerList);
        }

        public ActionResult CustomerReportPartial(string Start, string End, bool? GetReport, int pageno, int pagesize, string Status)
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}
            if (Status == "null")
            {
                //Status = Status.Substring(0, Status.Length - 4);
                Status = null;

            }
            List<string> CuStatus = new List<string>();
            if (Status != null)
            {
                string[] spCuStatus = Status.Split(',');
                if (spCuStatus.Length > 0)
                {
                    foreach (var item in spCuStatus)
                    {
                        CuStatus.Add(item);
                    }

                }
            }

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string soldBy = "";
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.ShowAllReportData))
            {
                soldBy = CurrentUser.UserId.ToString();
            }
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetAllCustomerReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, Status, soldBy);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllCustomerReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, Status, soldBy);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllCustomerReportByCompany(CurrentUser.CompanyId.Value, null, null, Status, soldBy);
                    }

                }
                return MakeExcelFromDataTable(dt, "Customer Report", null, null);
            }
            List<Customer> Model = new List<Entities.Customer>();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                //EndDate = EndDate.AddHours(23).AddMinutes(59).AddSeconds(59);

                Model = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, CuStatus, null, soldBy, null, null);
                ViewBag.TotalLeads = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate, CuStatus, null, soldBy, null, null).Count;
                ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate, CuStatus, null, soldBy, null, null).Count;
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, CuStatus, null, soldBy, null, null);
                    ViewBag.TotalLeads = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate, CuStatus, null, soldBy, null, null).Count;
                    ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate, CuStatus, null, soldBy, null, null).Count;
                }
                else
                {
                    Model = _Util.Facade.CustomerFacade.GetAllCustomerByCompany(CurrentUser.CompanyId.Value, pageno, pagesize, CuStatus, null, soldBy, null, null);
                    ViewBag.TotalLeads = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyCount(CurrentUser.CompanyId.Value, null, null, CuStatus, null, soldBy, null, null).Count;
                    ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyCount(CurrentUser.CompanyId.Value, null, null, CuStatus, null, soldBy, null, null).Count;
                }

            }


            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }

            if (Model.Count() == 0)
            {
                pageno = 1;
                //customerfilterlist = _Util.Facade.CustomerFacade.GetCustomerByFilter(filter);
            }

            //ViewBag.CustomerStatus = _Util.Facade.LookupFacade.GetLookupByKeyForReport("CustomerStatus").Select(x =>
            //               new SelectListItem()
            //               {
            //                   Text = x.DisplayText.ToString(),
            //                   Value = x.DataValue.ToString(),

            //               }).ToList();

            List<SelectListItem> StatussList = new List<SelectListItem>();
            StatussList.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("LeadStatus").OrderBy(x => x.DisplayText).Where(x => x.DataValue != "-1").Select(x => new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DisplayText.ToString()
            }).ToList());
            ViewBag.StatussList = StatussList;

            ViewBag.PageNumber = pageno;
            //ViewBag.OutOfNumber = 0;



            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            ViewBag.statuscustomer = CuStatus;
            return View(Model);
        }

        public ActionResult ConvertCustomerReportPartial(string Start, string End, bool? GetReport, int pageno, int pagesize, FilterReportModel filter)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}
            List<SelectListItem> userlist = new List<SelectListItem>();
            userlist.Add(new SelectListItem()
            {
                Text = "Select User",
                Value = "-1"
            });
            userlist.AddRange(_Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).Select(x => new SelectListItem()
            {
                Text = x.FirstName + " " + x.LastName,
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.userlist = userlist;
            ViewBag.leadsource = _Util.Facade.LookupFacade.GetLookupByKeyWithParent("LeadSource").Select(x => new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList();
            List<SelectListItem> convertiontype = new List<SelectListItem>();
            convertiontype.Add(new SelectListItem()
            {
                Text = "Select Convertion Type",
                Value = "-1"
            });
            convertiontype.Add(new SelectListItem()
            {
                Text = "System Generated",
                Value = "System Generated"
            });
            convertiontype.Add(new SelectListItem()
            {
                Text = "Manually Converted",
                Value = "Manually Converted"
            });
            ViewBag.convertiontype = convertiontype;
            return View();
        }

        public ActionResult ConvertedCustomerReportList(string Start, string End, bool? GetReport, int pageno, int pagesize, FilterReportModel filter, string order)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetClientZeroHourToUTC();
                    EndDate = Convert.ToDateTime(End).SetClientMaxHourToUTC();
                    dt = _Util.Facade.CustomerFacade.GetAllConvertedCustomerReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, filter);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllConvertedCustomerReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, filter);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllConvertedCustomerReportByCompany(CurrentUser.CompanyId.Value, null, null, filter);
                    }

                }
                return MakeExcelFromDataTable(dt, "Converted Customer", null, null);
            }
            CustomerListWithCountModel Model = new CustomerListWithCountModel();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetClientZeroHourToUTC();
                EndDate = Convert.ToDateTime(End).SetClientMaxHourToUTC();

                Model = _Util.Facade.CustomerFacade.GetAllConvertedCustomerByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, filter, order);
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.CustomerFacade.GetAllConvertedCustomerByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, filter, order);
                }
                else
                {
                    Model = _Util.Facade.CustomerFacade.GetAllConvertedCustomerByCompany(CurrentUser.CompanyId.Value, pageno, pagesize, filter, order);
                }

            }
            ViewBag.TotalLeads = Model.TotalCustomerCount.Counter;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            if (Model.TotalCustomerCount.Counter == 0)
            {
                pageno = 1;
            }
            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;

            if (Model.TotalCustomerCount.Counter > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCustomerCount.Counter;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }

        public ActionResult DelinquentCustomerReportPartial(string Start, string End, bool? GetReport, int pageno, int pagesize)
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}
            return View();
        }

        public ActionResult DelinquentCustomerReportList(string Start, string End, bool? GetReport, int? pageno, int? pagesize, string id, string searchtext, string unpaid, string order)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (!pageno.HasValue)
            {
                pageno = 1;
            }
            if (!pagesize.HasValue)
            {
                pagesize = 50;
            }
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetClientZeroHourToUTC();
                    EndDate = Convert.ToDateTime(End).SetClientMaxHourToUTC();
                    dt = _Util.Facade.CustomerFacade.GetAllDelinquentCustomerReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, id, searchtext, unpaid);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllDelinquentCustomerReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, id, searchtext, unpaid);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllDelinquentCustomerReportByCompany(CurrentUser.CompanyId.Value, null, null, id, searchtext, unpaid);
                    }

                }
                int[] colarray = { 5 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "Delinquent Customer Report", rowarray, colarray);
            }
            DelinquentReportModel Model = new DelinquentReportModel();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetClientZeroHourToUTC();
                EndDate = Convert.ToDateTime(End).SetClientMaxHourToUTC();

                Model = _Util.Facade.CustomerFacade.GetAllDelinquentCustomerByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno.Value, pagesize.Value, id, searchtext, unpaid, order);
                ViewBag.OutOfNumber = Model.ToatalCustomer;
                ViewBag.TotalLeads = Model.ToatalCustomer;
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.CustomerFacade.GetAllDelinquentCustomerByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno.Value, pagesize.Value, id, searchtext, unpaid, order);
                    ViewBag.OutOfNumber = Model.ToatalCustomer;
                    ViewBag.TotalLeads = Model.ToatalCustomer;
                }
                else
                {
                    Model = _Util.Facade.CustomerFacade.GetAllDelinquentCustomerByCompany(CurrentUser.CompanyId.Value, new DateTime(), new DateTime(), pageno.Value, pagesize.Value, id, searchtext, unpaid, order);
                    ViewBag.OutOfNumber = Model.ToatalCustomer;
                    ViewBag.TotalLeads = Model.ToatalCustomer;
                }

            }
            //ViewBag.TotalLeads = Model.Count();

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }

            if (Model.DelinquentCustomerModel.Count == 0)
            {
                pageno = 1;
            }
            ViewBag.PageNumber = pageno;
            //ViewBag.OutOfNumber = 0;

            //if (Model.Count() > 0)
            //{
            //    ViewBag.OutOfNumber = Model.Count();
            //}

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize.Value);

            if (Model != null && Model.DelinquentCustomerModel.Count() > 0)
            {
                foreach (var item in Model.DelinquentCustomerModel)
                {
                    item.Address = MakeAddress(item.Street, item.StreetType, item.Appartment, item.City, item.State, item.ZipCode);
                }
            }
            return View(Model);
        }


        #region Make address 
        //[street][streetType][appartment]
        //[zip][city],[state]
        private string MakeAddress(string street, string streetType, string appartment, string city, string state, string zipCode)
        {
            string address = "";
            if (!string.IsNullOrWhiteSpace(street))
            {
                if (street != "-1")
                {
                    address += street;
                }

            }
            if (!string.IsNullOrWhiteSpace(streetType))
            {
                if (streetType != "-1")
                {
                    if (!string.IsNullOrWhiteSpace(address))
                    {
                        address += " " + streetType;
                    }
                    else
                    {
                        address += streetType;
                    }
                }

            }
            if (!string.IsNullOrWhiteSpace(appartment))
            {
                if (appartment != "-1")
                {
                    if (!string.IsNullOrWhiteSpace(address))
                    {
                        address += " " + appartment;
                    }
                    else
                    {
                        address += appartment;
                    }
                }

            }
            if (!string.IsNullOrWhiteSpace(address))
            {
                address += " <br> ";
            }

            if (!string.IsNullOrWhiteSpace(city))
            {
                if (city != "-1")
                {
                    if (!string.IsNullOrWhiteSpace(address))
                    {
                        address += " " + city;
                    }
                    else
                    {
                        address += city;
                    }

                }
            }
            if (!string.IsNullOrWhiteSpace(state))
            {
                if (state != "-1")
                {
                    if (!string.IsNullOrWhiteSpace(address))
                    {
                        address += ", " + state;
                    }
                    else
                    {
                        address += state;
                    }
                }

            }
            if (!string.IsNullOrWhiteSpace(zipCode))
            {
                if (zipCode != "-1")
                {
                    address += " " + zipCode;
                }
            }

            return address.TrimEnd(',');
        }
        #endregion


        public ActionResult TestAccountReportPartial(string Start, string End, bool? GetReport, int pageno, int pagesize)
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}
            return View();
        }
        public ActionResult TestAccountReportList(string Start, string End, bool? GetReport, int? pageno, int? pagesize, FilterReportModel filter, string order)
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";

            if (!pageno.HasValue)
            {
                pageno = 1;
            }
            if (!pagesize.HasValue)
            {
                pagesize = 50;
            }
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    dt = _Util.Facade.CustomerFacade.GetAllTestAccountReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, filter);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllTestAccountReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, filter);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllTestAccountReportByCompany(CurrentUser.CompanyId.Value, null, null, filter);
                    }

                }
                return MakeExcelFromDataTable(dt, "Test Account Report", null, null);
            }
            List<DelinquentTestCustomerModel> Model = new List<DelinquentTestCustomerModel>();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                Model = _Util.Facade.CustomerFacade.GetAllTestAccountByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno.Value, pagesize.Value, filter, order);
                ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllTestAccountReportByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate, filter).Count;
                ViewBag.TotalLead = ViewBag.OutOfNumber;
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.CustomerFacade.GetAllTestAccountByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno.Value, pagesize.Value, filter, order);
                    ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllTestAccountReportByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate, filter).Count;
                    ViewBag.TotalLead = ViewBag.OutOfNumber;
                }
                else
                {
                    Model = _Util.Facade.CustomerFacade.GetAllTestAccountByCompany(CurrentUser.CompanyId.Value, new DateTime(), new DateTime(), pageno.Value, pagesize.Value, filter, order);
                    ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllTestAccountReportByCompanyCount(CurrentUser.CompanyId.Value, null, null, filter).Count;
                    ViewBag.TotalLead = ViewBag.OutOfNumber;
                }

            }
            //ViewBag.TotalLeads = Model.Count();

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            //[Shariful-25-9-19]
            if (Model.Count() == 0)
            {
                pageno = 1;
            }
            ViewBag.PageNumber = pageno;

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize.Value);
            //[~Shariful-25-9-19]

            if (Model != null && Model.Count() > 0)
            {
                foreach (var item in Model)
                {
                    item.Address = MakeAddress(item.Street, item.StreetType, item.Appartment, item.City, item.State, item.ZipCode);
                }
            }

            return View(Model);
        }


        public ActionResult TransferCustomerReportPartial(string Start, string End, bool? GetReport, int pageno, int pagesize)
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}
            return View();
        }

        public ActionResult TransferCustomerReportList(string Start, string End, bool? GetReport, int? pageno, int? pagesize, FilterReportModel filter, string order)
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";

            if (!pageno.HasValue)
            {
                pageno = 1;
            }
            if (!pagesize.HasValue)
            {
                pagesize = 50;
            }
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    dt = _Util.Facade.CustomerFacade.GetAllTransferCustomerReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, filter);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllTransferCustomerReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, filter);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllTransferCustomerReportByCompany(CurrentUser.CompanyId.Value, null, null, filter);
                    }

                }
                return MakeExcelFromDataTable(dt, "Transfer Customer Report", null, null);
            }
            List<DelinquentCustomerModel> Model = new List<DelinquentCustomerModel>();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                Model = _Util.Facade.CustomerFacade.GetAllTransferCustomerByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno.Value, pagesize.Value, filter, order);
                ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllTransferCustomerReportByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate, filter).Count;
                ViewBag.TotalLeads = ViewBag.OutOfNumber;
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.CustomerFacade.GetAllTransferCustomerByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno.Value, pagesize.Value, filter, order);
                    ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllTransferCustomerReportByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate, filter).Count;
                    ViewBag.TotalLeads = ViewBag.OutOfNumber;
                }
                else
                {
                    Model = _Util.Facade.CustomerFacade.GetAllTransferCustomerByCompany(CurrentUser.CompanyId.Value, new DateTime(), new DateTime(), pageno.Value, pagesize.Value, filter, order);
                    ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllTransferCustomerReportByCompanyCount(CurrentUser.CompanyId.Value, null, null, filter).Count;
                    ViewBag.TotalLeads = ViewBag.OutOfNumber;
                }

            }
            //ViewBag.TotalLeads = Model.Count();

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            //[Shariful-25-9-19]
            if (Model.Count() == 0)
            {
                pageno = 1;
            }
            ViewBag.PageNumber = pageno;

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize.Value);
            //[~Shariful-25-9-19]

            if (Model != null && Model.Count() > 0)
            {
                foreach (var item in Model)
                {
                    item.Address = MakeAddress(item.Street, item.StreetType, item.Appartment, item.City, item.State, item.ZipCode);
                }
            }

            return View(Model);
        }

        public ActionResult InactiveCustomerReportPartial(string Start, string End, bool? GetReport, int pageno, int pagesize)
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetAllInactiveCustomerReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllInactiveCustomerReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllInactiveCustomerReportByCompany(CurrentUser.CompanyId.Value, null, null);
                    }

                }
                return MakeExcelFromDataTable(dt, "Inactive Customer Report", null, null);
            }
            List<Customer> Model = new List<Entities.Customer>();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                //EndDate = EndDate.AddHours(23).AddMinutes(59).AddSeconds(59);

                Model = _Util.Facade.CustomerFacade.GetAllInactiveCustomerByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize);
                ViewBag.TotalLeads = _Util.Facade.CustomerFacade.GetAllInactiveCustomerByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate).Count;
                ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllInactiveCustomerByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate).Count;
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.CustomerFacade.GetAllInactiveCustomerByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize);
                    ViewBag.TotalLeads = _Util.Facade.CustomerFacade.GetAllInactiveCustomerByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate).Count;
                    ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllInactiveCustomerByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate).Count;
                }
                else
                {
                    Model = _Util.Facade.CustomerFacade.GetAllInactiveCustomerByCompanyAndDates(CurrentUser.CompanyId.Value, null, null, pageno, pagesize);
                    ViewBag.TotalLeads = _Util.Facade.CustomerFacade.GetAllInactiveCustomerByCompanyCount(CurrentUser.CompanyId.Value, null, null).Count;
                    ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllInactiveCustomerByCompanyCount(CurrentUser.CompanyId.Value, null, null).Count;
                }

            }


            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }

            if (Model.Count() == 0)
            {
                pageno = 1;
                //customerfilterlist = _Util.Facade.CustomerFacade.GetCustomerByFilter(filter);
            }

            //ViewBag.CustomerStatus = _Util.Facade.LookupFacade.GetLookupByKeyForReport("CustomerStatus").Select(x =>
            //               new SelectListItem()
            //               {
            //                   Text = x.DisplayText.ToString(),
            //                   Value = x.DataValue.ToString(),

            //               }).ToList();

            ViewBag.PageNumber = pageno;
            //ViewBag.OutOfNumber = 0;



            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            //ViewBag.statuscustomer = CuStatus;
            return View(Model);
        }

        public ActionResult InvoiceReportPartial(string Start, string End, bool? GetReport, string Status, string Type)
        {

            if (!base.IsPermitted(UserPermissions.ReportsPermissions.InvoiceReport))
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }

            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string StartDate = "";
            string EndDate = "";
            if (!string.IsNullOrWhiteSpace(Status))
            {
                ViewBag.ValStatus = Status;
            }
            else
            {
                ViewBag.ValStatus = "-1";
            }
            if (!string.IsNullOrWhiteSpace(Type))
            {
                ViewBag.ValType = Type;
            }
            else
            {
                ViewBag.ValType = "-1";
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if ((!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End)) || !string.IsNullOrWhiteSpace(Status) || !string.IsNullOrWhiteSpace(Type))
                {
                    if ((!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End)))
                    {
                        StartDate = Start;
                        EndDate = End;
                        StartDate = StartDate + " " + "00:00:00.000";
                        EndDate = EndDate + " " + "23:59:59.000";
                    }
                    dt = _Util.Facade.InvoiceFacade.GetAllInvoiceReportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, Status, Type);
                }
                else
                {
                    dt = _Util.Facade.InvoiceFacade.GetAllInvoiceReportByCompanyId(CurrentUser.CompanyId.Value, null, null, null, null);
                }
                return MakeExcelFromDataTable(dt, "InvoiceReport", null, null);
            }
            List<Invoice> InvoiceList = new List<Entities.Invoice>();
            if ((!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End)) || !string.IsNullOrWhiteSpace(Status) || !string.IsNullOrWhiteSpace(Type))
            {
                if ((!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End)))
                {
                    StartDate = Start;
                    StartDate = StartDate + " " + "00:00:00.000";
                    EndDate = End;
                    EndDate = EndDate + " " + "23:59:59.000";
                }
                InvoiceList = _Util.Facade.InvoiceFacade.GetAllInvoiceByCompanyIdAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, Status, Type);

            }
            else
            {
                InvoiceList = _Util.Facade.InvoiceFacade.GetAllInvoiceByCompanyId(CurrentUser.CompanyId.Value);

            }
            ViewBag.TotalInvoice = InvoiceList.Count();
            ViewBag.TotalDue = InvoiceList.Sum(x => x.BalanceDue);
            ViewBag.TotalAmount = InvoiceList.Sum(x => x.TotalAmount);
            List<SelectListItem> ReportStatus = new List<SelectListItem>();
            ReportStatus.Add(new SelectListItem() { Text = "Please Select One", Value = "-1" });
            ReportStatus.Add(new SelectListItem() { Text = "Open", Value = "Open" });
            ReportStatus.Add(new SelectListItem() { Text = "Partial", Value = "Partial" });
            ReportStatus.Add(new SelectListItem() { Text = "Paid", Value = "Paid" });
            ReportStatus.Add(new SelectListItem() { Text = "Due", Value = "Due" });
            ReportStatus.Add(new SelectListItem() { Text = "Cancel", Value = "Cancel" });
            ViewBag.ReportStatus = ReportStatus.OrderBy(x => x.Text != "Please Select One").ThenBy(x => x.Text).ToList();

            ViewBag.PaymentMethods = _Util.Facade.LookupFacade.GetLookupByKeyForReport("PaymentMethod").Select(x =>
                            new SelectListItem()
                            {
                                Text = x.DisplayText.ToString(),
                                Value = x.DataValue.ToString()
                            }).ToList();
            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }

            return View("_InvoiceReportPartial", InvoiceList);
        }

        public ActionResult EstimateReportPartial(string Start, string End, bool? GetReport)
        {
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.EstimateReport))
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;

                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    DateTime StartDate = DateTime.ParseExact(Start, "MM_dd_yyyy", null);
                    DateTime EndDate = DateTime.ParseExact(End, "MM_dd_yyyy", null);
                    EndDate = EndDate.AddHours(23).AddMinutes(59).AddSeconds(59);
                    dt = _Util.Facade.InvoiceFacade.GetAllEstimateReportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate);
                }
                else
                {
                    dt = _Util.Facade.InvoiceFacade.GetAllEstimateReportByCompanyId(CurrentUser.CompanyId.Value, null, null);
                }


                return MakeExcelFromDataTable(dt, "EstimateReport", null, null);
            }
            List<Invoice> InvoiceList = new List<Entities.Invoice>();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                DateTime StartDate = DateTime.ParseExact(Start, "MM_dd_yyyy", null);
                DateTime EndDate = DateTime.ParseExact(End, "MM_dd_yyyy", null);
                EndDate.AddHours(23);
                EndDate.AddMinutes(59);
                EndDate.AddSeconds(59);
                InvoiceList = _Util.Facade.InvoiceFacade.GetAllEstimateByCompanyIdAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate);

            }
            else
            {
                InvoiceList = _Util.Facade.InvoiceFacade.GetAllEstimateByCompanyId(CurrentUser.CompanyId.Value);
            }



            ViewBag.TotalEstimates = InvoiceList.Count();
            ViewBag.TotalAmount = InvoiceList.Sum(x => x.TotalAmount);


            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            List<SelectListItem> ReportStatus = new List<SelectListItem>();
            ReportStatus.Add(new SelectListItem() { Text = "Please Select One", Value = "-1" });
            ReportStatus.Add(new SelectListItem() { Text = "Open", Value = "Open" });
            ReportStatus.Add(new SelectListItem() { Text = "Partial", Value = "Partial" });
            ReportStatus.Add(new SelectListItem() { Text = "Paid", Value = "Paid" });
            ReportStatus.Add(new SelectListItem() { Text = "Due", Value = "Due" });
            ReportStatus.Add(new SelectListItem() { Text = "Cancel", Value = "Cancel" });
            ViewBag.ReportStatus = ReportStatus.OrderBy(x => x.Text != "Please Select One").ThenBy(x => x.Text).ToList();

            ViewBag.PaymentMethods = _Util.Facade.LookupFacade.GetLookupByKeyForReport("PaymentMethod").Select(x =>
                            new SelectListItem()
                            {
                                Text = x.DisplayText.ToString(),
                                Value = x.DataValue.ToString()
                            }).ToList();

            return View("_EstimateReportListPartial", InvoiceList);
        }

        public ActionResult PaymentReceivedReportPartial(string Start, string End, bool? GetReport)
        {
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.EstimateReport))
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    DateTime StartDate = DateTime.ParseExact(Start, "MM_dd_yyyy", null);
                    DateTime EndDate = DateTime.ParseExact(End, "MM_dd_yyyy", null);
                    EndDate = EndDate.AddHours(23).AddMinutes(59).AddSeconds(59);
                    dt = _Util.Facade.TransactionFacade.GetAllTransactionHistoryReportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate);
                }
                else
                {
                    dt = _Util.Facade.TransactionFacade.GetAllTransactionHistoryReportByCompanyId(CurrentUser.CompanyId.Value, null, null);
                }


                return MakeExcelFromDataTable(dt, "PaymentReceivedReport", null, null);
            }
            List<TransactionHistory> Model = new List<TransactionHistory>();

            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                DateTime StartDate = DateTime.ParseExact(Start, "MM_dd_yyyy", null);
                DateTime EndDate = DateTime.ParseExact(End, "MM_dd_yyyy", null);
                EndDate.AddHours(23);
                EndDate.AddMinutes(59);
                EndDate.AddSeconds(59);
                Model = _Util.Facade.TransactionFacade.GetAllTransactionHistoryByCompanyIdAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate);
            }
            else
            {
                Model = _Util.Facade.TransactionFacade.GetAllTransactionHistoryByCompanyId(CurrentUser.CompanyId.Value);
            }
            ViewBag.TotalTransactions = Model.Count();
            ViewBag.TotalPaymentReceived = Model.Sum(x => x.Amout);

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }


            return View("_PaymentReceivedReportPartial", Model);
        }

        public ActionResult BillsReportPartial(string Start, string End, bool? GetReport, FilterReportModel filter)
        {

            if (!base.IsPermitted(UserPermissions.ReportsPermissions.BillsReport))
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            return View("_BillsReportPartial");
        }

        public ActionResult BillsReportList(string Start, string End, bool? GetReport, FilterReportModel filter, string order)
        {

            if (!base.IsPermitted(UserPermissions.ReportsPermissions.BillsReport))
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    DateTime StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    DateTime EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();

                    dt = _Util.Facade.BillFacade.GetAllBillReportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, filter);
                }
                else
                {
                    dt = _Util.Facade.BillFacade.GetAllBillReportByCompanyId(CurrentUser.CompanyId.Value, null, null, filter);
                }
                dt.Columns.Remove("Id");
                int[] colarray = { 4 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "BillsReport", rowarray, colarray);
            }
            BillingReportModel Model = new BillingReportModel();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                DateTime StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                DateTime EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();

                Model = _Util.Facade.BillFacade.GetAllBillByCompanyIdAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, filter, order);
            }
            else
            {
                Model = _Util.Facade.BillFacade.GetAllBillByCompanyId(CurrentUser.CompanyId.Value, filter, order);
            }

            ViewBag.TotalBills = Model.BillList.Count();
            ViewBag.TotalPaid = Model.BillList.Sum(x => x.Amount - x.PaymentDue);
            ViewBag.TotalDue = Model.BillList.Sum(x => x.PaymentDue);

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            return View(Model);
        }

        public ActionResult PaymentReportPartial(string Start, string End, bool? GetReport)
        {
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.BillPaymentReport))
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }

            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;

                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    DateTime StartDate = DateTime.ParseExact(Start, "MM_dd_yyyy", null);
                    DateTime EndDate = DateTime.ParseExact(End, "MM_dd_yyyy", null);
                    EndDate = EndDate.AddHours(23).AddMinutes(59).AddSeconds(59);
                    dt = _Util.Facade.BillFacade.GetAllBillPaymentHistoryReportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate);
                }
                else
                {
                    dt = _Util.Facade.BillFacade.GetAllBillPaymentHistoryReportByCompanyId(CurrentUser.CompanyId.Value, null, null);
                }


                return MakeExcelFromDataTable(dt, "PaymentReport", null, null);
            }
            List<BillPaymentHistory> Model = new List<BillPaymentHistory>();

            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                DateTime StartDate = DateTime.ParseExact(Start, "MM_dd_yyyy", null);
                DateTime EndDate = DateTime.ParseExact(End, "MM_dd_yyyy", null);
                EndDate.AddHours(23);
                EndDate.AddMinutes(59);
                EndDate.AddSeconds(59);
                Model = _Util.Facade.BillFacade.GetAllBillPaymentHistoryByCompanyIdAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate);
            }
            else
            {
                Model = _Util.Facade.BillFacade.GetAllBillPaymentHistoryByCompanyId(CurrentUser.CompanyId.Value);
            }


            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            return View("_PaymentReportPartial", Model);
        }

        public ActionResult Pdf()
        {
            return new ViewAsPdf("Index");
        }

        [Authorize]
        public ActionResult Invoice(Guid CompanyId, Guid CustomerId, string InvoiceId)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            Company com = _Util.Facade.CompanyFacade.GetCompanyByComapnyId(CurrentUser.CompanyId.Value);

            Invoice tempInv = _Util.Facade.InvoiceFacade.GetByInvoiceId(InvoiceId);
            List<InvoiceDetail> invdet = _Util.Facade.InvoiceFacade.GetInvoiceDetialsListByInvoiceId(InvoiceId);

            return new ViewAsPdf();
        }
        public ActionResult CustomerPdf(string ColumnNames, string ReportFor, string NumberPrefix, string SelectAllIds, string activeOrinactive, string isSelected)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<int> IdList = new List<int>();
            List<string> ColumnList = new List<string>();
            if (!string.IsNullOrWhiteSpace(SelectAllIds) && SelectAllIds == "true" && ReportFor == "Customer")
            {
                var objcus = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyId(CurrentUser.CompanyId.Value);
                if (objcus.Count > 0)
                {
                    foreach (var i in objcus)
                    {
                        IdList.Add(Convert.ToInt32(i.Id));
                    }
                }
            }
            else if (!string.IsNullOrWhiteSpace(SelectAllIds) && SelectAllIds == "true" && ReportFor == "Lead")
            {
                var objcus = _Util.Facade.CustomerFacade.GetAllLeadByCompanyId(CurrentUser.CompanyId.Value);
                if (objcus.Count > 0)
                {
                    foreach (var i in objcus)
                    {
                        IdList.Add(Convert.ToInt32(i.Id));
                    }
                }
            }

            else if (ReportFor == "Customer")
            {

                if (isSelected == "true")
                {
                    string[] ids = SelectAllIds.Split(',');
                    for (int i = 0; i < ids.Length - 1; i++)
                    {
                        IdList.Add(Convert.ToInt32(ids[i]));
                    }
                }
                else if (SelectAllIds == "filtered")
                {
                    var idList = (List<CustomerIdList>)Session["GetAllCustomerId"];
                    foreach (var item in idList)
                    {
                        IdList.Add(item.customerId);
                    }

                }
                else
                {
                    List<Customer> idList = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyId(CurrentUser.CompanyId.Value);
                    foreach (var item in idList)
                    {
                        IdList.Add(item.Id);
                    }
                }

            }
            else if (ReportFor == "Lead")
            {

                if (isSelected == "true")
                {
                    string[] ids = SelectAllIds.Split(',');
                    for (int i = 0; i < ids.Length - 1; i++)
                    {
                        IdList.Add(Convert.ToInt32(ids[i]));
                    }
                }
                else if (SelectAllIds == "filtered")
                {
                    var idList = (List<CustomerIdList>)System.Web.HttpRuntime.Cache["GetAllLeadId"];
                    foreach (var item in idList)
                    {
                        IdList.Add(item.customerId);
                    }

                }
                else
                {
                    List<Customer> idList = _Util.Facade.CustomerFacade.GetAllLeadByCompanyId(CurrentUser.CompanyId.Value);
                    foreach (var item in idList)
                    {
                        IdList.Add(item.Id);
                    }
                }

            }

            if (!string.IsNullOrWhiteSpace(ColumnNames))
            {
                var Columns = ColumnNames.Split(',');
                foreach (var item in Columns)
                {
                    ColumnList.Add(item);
                }

            }
            else
            {
                ViewBag.ColumnList = null;
            }
            ViewBag.ColumnList = ColumnList;
            List<Customer> customerList = new List<Customer>();
            if (!string.IsNullOrWhiteSpace(NumberPrefix) && NumberPrefix != "undefined")
            {
                NumberPrefix = _Util.Facade.CustomerSystemNoFacade.GetNumberPrefixById(Convert.ToInt32(NumberPrefix)).Name;
                customerList = _Util.Facade.CustomerFacade.GetCustomerPdf(IdList.ToArray(), CurrentUser.CompanyId.Value, NumberPrefix, activeOrinactive);
            }
            else
            {
                customerList = _Util.Facade.CustomerFacade.GetCustomerPdf(IdList.ToArray(), CurrentUser.CompanyId.Value, null, activeOrinactive);
            }



            return new ViewAsPdf(customerList)
            {
                PageSize = Size.A1,
                PageOrientation = Rotativa.Options.Orientation.Portrait,
                PageMargins = { Left = 1, Right = 1 },
            };
        }
        [Authorize]
        public ActionResult ExportConfirm(string ColumnName, string ReportFor, string UserList, string FilterUser, string ids, string idsAll)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<ReportModel> Reports = new List<ReportModel>();
            if (ReportFor == "Customer")
            {
                ViewBag.Ids = ids;
            }
            else
            {
                ViewBag.Ids = UserList;
            }

            //if (!string.IsNullOrWhiteSpace(ColumnName))
            //{
            string[] ColumnNames = ColumnName.Split('-');
            List<GridSetting> GridSettings = new List<GridSetting>();
            if (ReportFor == "Customer")
            {
                GridSettings = _Util.Facade.GridSettingsFacade.GetAllByKey("CustomerGrid", CurrentUser.CompanyId.Value);
            }
            else
            {
                GridSettings = _Util.Facade.GridSettingsFacade.GetAllByKey("LeadGrid", CurrentUser.CompanyId.Value);
            }
            if (GridSettings.Count > 0)
            {
                GridSettings = GridSettings.Where(x => x.FormActive == true && (x.SelectedColumn != "CheckSaveNew" && x.SelectedColumn != "User")).ToList();
            }
            ViewBag.ReporFor = ReportFor;

            ViewBag.FilterUser = FilterUser;
            foreach (var column in GridSettings.Where(x => x.FormActive == true).ToList())
            {
                //if (column.IndexOf(',') > -1)
                //{
                //    ReportModel model = new ReportModel();
                //    model.Name = column.Split(',')[0] != null ? column.Split(',')[1].Trim() : "";
                //    model.Value = column.Split(',')[1] != null ? column.Split(',')[0].Trim() : "";
                //    if (Reports.Where(x=>x.Value==model.Value && x.Name==model.Name).Count() > 0)
                //    {
                //        continue;
                //    }
                //    Reports.Add(model);
                //}
                ReportModel model = new ReportModel();
                model.Name = column.SelectedColumn;
                model.Value = column.SelectedColumn.RemoveSpecialCharacters();
                Reports.Add(model);
            }
            List<SelectListItem> NumberPrefix = new List<SelectListItem>();
            NumberPrefix.Add(new SelectListItem()
            {
                Text = "Please Select One",
                Value = ""
            });
            NumberPrefix.AddRange(_Util.Facade.CustomerSystemNoFacade.GetAllNumberPrefixByCompanyId(CurrentUser.CompanyId.Value).Select(x =>
            new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.Id.ToString()
            }).ToList());
            ViewBag.NumberPrefix = NumberPrefix.OrderBy(x => x.Text != "Please Select One").ThenBy(x => x.Text).ToList();
            //}

            return View(Reports);
        }

        [Authorize]
        public FileResult NewReport(string ColumnNames, string ReportFor, string NumberPrefix, string SelectAllIds, string activeOrinactive, string UserList, string ExportType, string FilterUser, string isSelected, string CustomerActivity, string CustomerOpportunity, string isDatabaseColumn, string CustomerId, string SelectedIdList, DateTime? Start, DateTime? End, int? UserGroup)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;

            int[] coloumnIndex = null;
            int[] rowIndex = null;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            CustomerLiteFilter cusfilter = new CustomerLiteFilter();
            cusfilter = (CustomerLiteFilter)Session["GetCustomerFilterLite"];
            List<int> IdList = new List<int>();
            string[] Users = null;
            if (ExportType == "2")
            {
                Users = FilterUser.Split(',');
            }
            if (ExportType == "3")
            {
                Users = UserList.Split(',');
            }
            string[] ColumnList = null;
            if (SelectedIdList != null && SelectedIdList.Length > 0)
            {
                string[] ids = SelectedIdList.Split(',');

                for (int i = 0; i < ids.Length - 1; i++)
                {
                    IdList.Add(Convert.ToInt32(ids[i]));
                }
            }
            if (!string.IsNullOrWhiteSpace(SelectAllIds) && SelectAllIds == "true" && ReportFor == "Customer")
            {
                //List<Customer> objcus = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyId(CurrentUser.CompanyId.Value);
                //if (objcus != null && objcus.Count > 0)
                //{
                //    foreach (var i in objcus)
                //    {
                //        IdList.Add(Convert.ToInt32(i.Id));
                //    }
                //}
            }
            else if (!string.IsNullOrWhiteSpace(SelectAllIds) && SelectAllIds == "true" && ReportFor == "Lead")
            {
                //var objcus = _Util.Facade.CustomerFacade.GetAllLeadsByCompany(CurrentUser.CompanyId.Value);


                //var objcus = _Util.Facade.CustomerFacade.GetAllLeadByCompanyId(CurrentUser.CompanyId.Value);
                //if (objcus.Count > 0)
                //{
                //    foreach (var i in objcus)
                //    {
                //        IdList.Add(Convert.ToInt32(i.Id));
                //    }
                //}
            }
            else if (!string.IsNullOrWhiteSpace(SelectAllIds) && SelectAllIds == "true" && ReportFor == "Equipment")
            {
                var objcus = _Util.Facade.EquipmentFacade.GetAllEquipmentIdByCompanyId(CurrentUser.CompanyId.Value);
                if (objcus.Count > 0)
                {
                    foreach (var i in objcus)
                    {
                        IdList.Add(Convert.ToInt32(i.Id));
                    }
                }
            }
            else if (ReportFor == "Customer")
            {
                //foreach (var item in idList) 
                if (isSelected == "true")
                {
                    string[] ids = SelectAllIds.Split(',');
                    for (int i = 0; i < ids.Length - 1; i++)
                    {
                        IdList.Add(Convert.ToInt32(ids[i]));
                    }
                }
                else if (SelectAllIds == "filtered")
                {
                    if (!CurrentUser.UserTags.Contains("admin") && CurrentUser.UserRole != "Sales Manager")
                    {
                        CustomerLiteFilter filter = (CustomerLiteFilter)Session["GetCustomerFilter"];
                        filter.SoldById = CurrentUser.UserId;
                        List<CustomerIdList> idlist = _Util.Facade.CustomerFacade.GetCustomerReportByFilter(filter);
                        foreach (var item in idlist)
                        {
                            IdList.Add(item.customerId);
                        }
                    }
                    else
                    {
                        //CustomerLiteFilter filter = (CustomerLiteFilter)Session["GetCustomerFilter"];
                        CustomerLiteFilter filter = (CustomerLiteFilter)Session["GetCustomerFilter"];
                        List<CustomerIdList> idlist = _Util.Facade.CustomerFacade.GetCustomerReportByFilter(filter);

                        foreach (var item in idlist)
                        {
                            IdList.Add(item.customerId);
                        }
                    }


                    //foreach (var item in idList)
                    //{
                    //    IdList.Add(item.customerId);
                    //}
                }
                //else 
                //{
                //    List<Customer> idList = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyId(CurrentUser.CompanyId.Value);
                //    foreach(var item in idList)
                //    {
                //        IdList.Add(item.Id);
                //    }
                //}
            }
            else if (ReportFor == "Lead")
            {
                CustomerLiteFilter filter = (CustomerLiteFilter)Session["GetCustomerFilter"];
                List<CustomerIdList> idlist = _Util.Facade.CustomerFacade.GetLeadReportByFilter(filter);
                if (isSelected == "true")
                {
                    foreach (var item in idlist)
                    {
                        if (Users != null && Users.Contains(item.customerId.ToString()))
                        {
                            IdList.Add(item.customerId);
                        }

                    }
                }
                else
                {
                    foreach (var item in idlist)
                    {
                        IdList.Add(item.customerId);
                    }
                }


            }
            else if (ReportFor == "Invoice")
            {
                string[] ids = SelectAllIds.Split(',');

                for (int i = 0; i < ids.Length - 1; i++)
                {
                    IdList.Add(Convert.ToInt32(ids[i]));
                }


            }
            else if (ReportFor == "Funding")
            {
                string[] ids = SelectAllIds.Split(',');

                for (int i = 0; i < ids.Length - 1; i++)
                {
                    IdList.Add(Convert.ToInt32(ids[i]));
                }


            }
            else if (ReportFor == "Expense")
            {
                string[] ids = SelectAllIds.Split(',');

                for (int i = 0; i < ids.Length - 1; i++)
                {
                    IdList.Add(Convert.ToInt32(ids[i]));
                }
            }
            else if (ReportFor == "Estimate")
            {
                string[] ids = SelectAllIds.Split(',');

                for (int i = 0; i < ids.Length - 1; i++)
                {
                    IdList.Add(Convert.ToInt32(ids[i]));
                }
            }
            if (!string.IsNullOrWhiteSpace(ColumnNames))
            {
                ColumnList = ColumnNames.Split(',');
            }
            using (XLWorkbook wb = new XLWorkbook())
            {
                DataTable dtResult = new DataTable();
                if (!string.IsNullOrWhiteSpace(NumberPrefix) && NumberPrefix != "undefined")
                {
                    NumberPrefix = _Util.Facade.CustomerSystemNoFacade.GetNumberPrefixById(Convert.ToInt32(NumberPrefix)).Name;
                    CustomerLiteFilter filter = new CustomerLiteFilter();
                    filter.EmployeeRole = CurrentUser.UserTags;
                    filter.Partners = _Util.Facade.EmployeeFacade.GetEmployeeByPartnerId(CurrentUser.UserId);
                    filter.isPermit = IsPermitted(UserPermissions.CustomerPermissions.ShowAllCustomerList);
                    dtResult = _Util.Facade.CustomerFacade.GetCustomerReport(IdList.ToArray(), ColumnList, CurrentUser.CompanyId.Value, NumberPrefix, activeOrinactive, CurrentUser.UserId, StartDate, EndDate, filter.Partners, filter.isPermit, filter.EmployeeRole, ReportFor, cusfilter);
                }
                else if (!string.IsNullOrWhiteSpace(ReportFor) && ReportFor == "Equipment")
                {
                    dtResult = _Util.Facade.CustomerFacade.GetEquipmentReport(IdList.ToArray(), ColumnList, CurrentUser.CompanyId.Value);
                }
                else if (!string.IsNullOrWhiteSpace(ReportFor) && ReportFor == "Invoice")
                {
                    dtResult = _Util.Facade.InvoiceFacade.GetInvoiceReport(IdList.ToArray(), ColumnList, CurrentUser.CompanyId.Value);
                    coloumnIndex = new int[] { 5, 6 };
                    rowIndex = new int[] { dtResult.Rows.Count + 2 };
                }
                else if (!string.IsNullOrWhiteSpace(ReportFor) && ReportFor == "Ticket")
                {
                    dtResult = _Util.Facade.InvoiceFacade.GetTicketReport(new Guid(CustomerId), ColumnList, CurrentUser.CompanyId.Value);
                }
                else if (!string.IsNullOrWhiteSpace(ReportFor) && ReportFor == "Funding")
                {
                    dtResult = _Util.Facade.TransactionFacade.GetFundingReport(IdList.ToArray(), ColumnList, CurrentUser.CompanyId.Value);
                    coloumnIndex = new int[] { 8 };
                    rowIndex = new int[] { dtResult.Rows.Count + 2 };
                }
                else if (!string.IsNullOrWhiteSpace(ReportFor) && ReportFor == "Expense")
                {
                    dtResult = _Util.Facade.TransactionFacade.GetExpenseReport(IdList.ToArray(), ColumnList, CurrentUser.CompanyId.Value);
                    coloumnIndex = new int[] { 7 };
                    rowIndex = new int[] { dtResult.Rows.Count + 2 };
                }
                else if (!string.IsNullOrWhiteSpace(ReportFor) && ReportFor == "Estimate")
                {
                    dtResult = _Util.Facade.InvoiceFacade.GetEstimateReport(IdList.ToArray(), ColumnList, CurrentUser.CompanyId.Value);
                    coloumnIndex = new int[] { 5 };
                    rowIndex = new int[] { dtResult.Rows.Count + 2 };
                }
                else if (!string.IsNullOrWhiteSpace(ReportFor) && ReportFor == "Opportunity")
                {
                    dtResult = _Util.Facade.OpportunityFacade.GetAllOpportunityForExport(CustomerOpportunity);
                }
                //else if (!string.IsNullOrWhiteSpace(ReportFor) && ReportFor == "Activity")
                //{
                //    dtResult = _Util.Facade.ActivityFacade.GetAllActivityForExport(CustomerActivity);
                //}
                else if (!string.IsNullOrWhiteSpace(ReportFor) && ReportFor == "Contact")
                {

                    dtResult = _Util.Facade.ContactFacade.GetAllContactForExport();
                }
                else if (!string.IsNullOrWhiteSpace(ReportFor) && ReportFor == "User")
                {

                    dtResult = _Util.Facade.UserLoginFacade.GetAllUserForExport(UserGroup, FilterUser, isSelected, CurrentUser.CompanyId.Value);
                }
                else if (!string.IsNullOrWhiteSpace(ReportFor) && ReportFor == "ContactDatabase")
                {

                    dtResult = _Util.Facade.ContactFacade.GetAllContactDatabaseForExport();
                }
                else if (!string.IsNullOrWhiteSpace(ReportFor) && ReportFor == "OpportunityDatabase")
                {

                    dtResult = _Util.Facade.OpportunityFacade.GetAllOpportunityDatabaseForExport();
                }
                else if (!string.IsNullOrWhiteSpace(ReportFor) && ReportFor == "RMR Template")
                {
                    Guid CusGuidId = Guid.Parse(CustomerId);
                    dtResult = _Util.Facade.CustomerFacade.GetRecurringBillingList(CusGuidId, CurrentUser.CompanyId.Value, FilterUser); ;
                }
                else if (!string.IsNullOrWhiteSpace(ReportFor) && ReportFor == "RMR Invoice")
                {
                    if (Start.HasValue == false || End.HasValue == false)
                    {
                        Start = new DateTime();
                        End = new DateTime();
                    }
                    Guid CusGuidId = Guid.Parse(CustomerId);
                    dtResult = _Util.Facade.CustomerFacade.GetRMRInvoiceListByCustomerIdAndCompanyId(CusGuidId, CurrentUser.CompanyId.Value, FilterUser, Start, End); ;
                }
                else if (!string.IsNullOrWhiteSpace(ReportFor) && ReportFor == "RMR History")
                {
                    if (Start.HasValue == false || End.HasValue == false)
                    {
                        Start = new DateTime();
                        End = new DateTime();
                    }
                    Guid CusGuidId = Guid.Parse(CustomerId);
                    dtResult = _Util.Facade.CustomerFacade.GetRMRHistoryListByCustomerIdAndCompanyId(CusGuidId, CurrentUser.CompanyId.Value, FilterUser, Start, End); ;
                }
                else if (!string.IsNullOrWhiteSpace(ReportFor) && ReportFor == "RMR Log")
                {
                    if (Start.HasValue == false)
                    {
                        Start = new DateTime();
                    }
                    if (End.HasValue == false)
                    {
                        End = new DateTime();
                    }
                    Guid CusGuidId = Guid.Parse(CustomerId);
                    dtResult = _Util.Facade.CustomerFacade.GetAllUserActivityForRMRCustomerListByCustomerIdExport(CusGuidId, CurrentUser.CompanyId.Value, FilterUser, Start, End);
                }
                else if (!string.IsNullOrWhiteSpace(ReportFor) && (ReportFor == "Customer" || ReportFor == "Lead") && isDatabaseColumn == "False")
                {
                    CustomerLiteFilter filter = new CustomerLiteFilter();
                    filter.EmployeeRole = CurrentUser.UserTags;
                    filter.Partners = _Util.Facade.EmployeeFacade.GetEmployeeByPartnerId(CurrentUser.UserId);
                    filter.isPermit = IsPermitted(UserPermissions.CustomerPermissions.ShowAllCustomerList);
                    dtResult = _Util.Facade.CustomerFacade.GetCustomerReport(IdList.ToArray(), ColumnList, CurrentUser.CompanyId.Value, null, activeOrinactive, CurrentUser.UserId, StartDate, EndDate, filter.Partners, filter.isPermit, filter.EmployeeRole, ReportFor, cusfilter);
                }
                else if (!string.IsNullOrWhiteSpace(ReportFor) && (ReportFor == "Customer" || ReportFor == "Lead") && isDatabaseColumn == "True")
                {
                    // dtResult = _Util.Facade.CustomerFacade.GetCustomerReport(IdList.ToArray(), ColumnList, CurrentUser.CompanyId.Value, null, activeOrinactive, CurrentUser.UserId, StartDate, EndDate, filter.Partners, filter.isPermit, filter.EmployeeRole, ReportFor);

                    dtResult = _Util.Facade.CustomerFacade.GetCustomerDatabaseReport(IdList.ToArray(), ColumnList, CurrentUser.CompanyId.Value, null, activeOrinactive, CurrentUser.UserId, StartDate, EndDate, ReportFor);
                }


                if (CustomerId != null)
                {
                    base.AddUserActivityForCustomer("Download " + ReportFor + " report " + LabelHelper.ActivityAction.Success, "NewReport", new Guid(CustomerId), null, null);
                }
                else
                {
                    base.AddUserActivityForCustomer("Download " + ReportFor + " report " + LabelHelper.ActivityAction.Success, "NewReport", null, null, null);

                }


                if (dtResult != null)
                {
                    var worksheet = wb.Worksheets.Add(dtResult);

                    wb.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    wb.Style.Font.Bold = true;

                    /*/Excel Style /*/
                    //worksheet.Ranges("A1:D1").Style.Fill.PatternType = XLFillPatternValues.Solid;
                    //worksheet.Ranges("A1:D1").Style.Fill.BackgroundColor = XLColor.Yellow;

                    //worksheet.Cells("A1:D1").Style.Fill.PatternType = XLFillPatternValues.Solid;
                    //worksheet.Cells("A1:D1").Style.Fill.BackgroundColor = XLColor.Yellow;

                    var format = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey("CurrentCurrencyExcelFormat");
                    if (coloumnIndex != null && format != null && rowIndex != null)
                    {
                        foreach (int itemcol in coloumnIndex)
                        {
                            for (int i = 1; i < rowIndex[0]; i++)
                            {
                                var a = worksheet.Cell(i, itemcol).Style;
                                worksheet.Cell(i, itemcol).Style.NumberFormat.Format = format.Value;

                            }
                        }
                    }

                    MemoryStream memorystreem = new MemoryStream();
                    wb.SaveAs(memorystreem);
                    var fName = string.Format("{0}-{1}.xlsx", ReportFor + " Report", DateTime.Now.UTCCurrentTime().ToString("s"));

                    byte[] fileContents = memorystreem.ToArray();

                    return File(fileContents, Excel.Format("ExcelFormat"), fName);

                }
                else
                {
                    byte[] fileContents = new byte[1];
                    return File(fileContents, Excel.Format("ExcelFormat"), "empty.xlsx");
                }
            }
        }



        [Authorize]
        public ActionResult PayrollReportPartial(string start, string end)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            ViewBag.Start = start;
            ViewBag.End = end;

            return View("_PayrollReportPartial");
        }


        [Authorize]
        public ActionResult SalesReportPartial()
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;

            List<SelectListItem> salespersonList = new List<SelectListItem>();
            salespersonList.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.SalesPerson, new Guid()).OrderBy(x => x.UserId.ToString() != "-1").ThenBy(x => string.Format("{0}", x.FirstName.ToString() + " " + x.LastName.ToString())).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.SalesPersonList = salespersonList;

            return View("_SalesReportPartial");
        }

        [Authorize]
        public ActionResult LoadSalesReportPartial(bool? GetReport, string Start, string End, int pageno, int pagesize, string searchtxt, string invostatus, string Order)
        {
            if (Start == "01/01/0001")
            {
                Start = "";
            }
            if (End == "01/01/0001")
            {
                End = "";
            }
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> invstatus = new List<string>();
            if (!string.IsNullOrWhiteSpace(invostatus))
            {
                string[] splituser = invostatus.Split(',');
                if (splituser.Length > 0)
                {
                    invostatus = string.Format("'{0}'", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        invstatus.Add(item);
                    }
                }
            }
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.EmployeeFacade.GetSalesReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtxt, invostatus);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.EmployeeFacade.GetSalesReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtxt, invostatus);
                    }
                    else
                    {
                        dt = _Util.Facade.EmployeeFacade.GetSalesReportExportByCompanyId(CurrentUser.CompanyId.Value, null, null, searchtxt, invostatus);
                    }

                }
                dt.Columns.Remove("Total RMR");
                int[] colarray = { 3, 4, 5, 6, 7 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "SalesReport", rowarray, colarray);
            }

            SalesReportModel Model = new SalesReportModel();

            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();

                Model = _Util.Facade.EmployeeFacade.GetSalesReportByCompanyId(CurrentUser.CompanyId.Value, pageno, pagesize, StartDate, EndDate, searchtxt, invostatus, Order);
            }
            else
            {

                Model = _Util.Facade.EmployeeFacade.GetSalesReportByCompanyId(CurrentUser.CompanyId.Value, pageno, pagesize, StartDate, EndDate, searchtxt, invostatus, Order);

            }

            //    SalesReportModel Model = _Util.Facade.EmployeeFacade.GetSalesReportByCompanyId(CurrentUser.CompanyId.Value, pageno, pagesize, StartDate, EndDate, searchtxt, invostatus, Order);
            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.ListCustomer != null && Model.ListCustomer.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.SalesReportCountModel.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            if (Model.TotalSalesAmountModel.TotalSalesAmount > 0)
            {
                ViewBag.average = Model.TotalSalesAmountModel.TotalSalesAmount / ViewBag.OutOfNumber;
            }

            List<SelectListItem> statusinv = new List<SelectListItem>();
            statusinv.Add(new SelectListItem()
            {
                Text = "Paid",
                Value = "Paid"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Open",
                Value = "Open"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Partial",
                Value = "Partial"
            });
            ViewBag.statusinv = statusinv;
            ViewBag.invstatus = invstatus;
            ViewBag.searchtext = searchtxt;


            return View("_LoadSalesReportPartial", Model);
        }
        [Authorize]
        public ActionResult LoadBrinksReportPartial(bool? GetReport, string Start, string End, string order)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;

            ThirdPartyCustomer brinksCustomerList = new ThirdPartyCustomer();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End) && Start != "01/01/0001" && End != "01/01/0001")
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                brinksCustomerList = _Util.Facade.ThirdPartyCustomerFacade.GetThirdPartyCustomersByIsSold(false, StartDate, EndDate, order);
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    brinksCustomerList = _Util.Facade.ThirdPartyCustomerFacade.GetThirdPartyCustomersByIsSold(false, StartDate, EndDate, order);
                }
                else
                {
                    brinksCustomerList = _Util.Facade.ThirdPartyCustomerFacade.GetThirdPartyCustomersByIsSold(false, StartDate, EndDate, order);
                }

            }
            #region excel report
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                bool reportConvertResult;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.ThirdPartyCustomerFacade.GetBrinksReportExport(StartDate, EndDate);
                    reportConvertResult = _Util.Facade.ThirdPartyCustomerFacade.UpdateBrinksCustomerToSold(StartDate, EndDate);

                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.ThirdPartyCustomerFacade.GetBrinksReportExport(StartDate, EndDate);
                        reportConvertResult = _Util.Facade.ThirdPartyCustomerFacade.UpdateBrinksCustomerToSold(StartDate, EndDate);

                    }
                    else
                    {
                        dt = _Util.Facade.ThirdPartyCustomerFacade.GetBrinksReportExport(StartDate, EndDate);
                        reportConvertResult = _Util.Facade.ThirdPartyCustomerFacade.UpdateBrinksCustomerToSold(StartDate, EndDate);

                    }

                }
                if (reportConvertResult == true)
                {
                    if (brinksCustomerList.ThirdPartyCustomerList != null && brinksCustomerList.ThirdPartyCustomerList.Count > 0)
                    {
                        List<string> CusIdList = new List<string>();
                        foreach (var item in brinksCustomerList.ThirdPartyCustomerList)
                        {
                            CusIdList.Add(item.CustomerId.ToString());
                        }
                        _Util.Facade.CustomerFacade.UpdateBrinksFundingStatusByCustomerIdList(CusIdList);
                    }
                }
                else
                {
                    dt = null;

                    return MakeExcelFromDataTable(dt, "BrinksReport", null, null);

                }
                return MakeExcelFromDataTable(dt, "BrinksReport", null, null);
            }
            #endregion



            return View("_LoadBrinksReportPartial", brinksCustomerList);
        }

        [Authorize]
        public ActionResult LoadUccReportPartial(bool? GetReport, string Start, string End, string order)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;

            ThirdPartyCustomer uccCustomerList = new ThirdPartyCustomer();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End) && Start != "01/01/0001" && End != "01/01/0001")
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                uccCustomerList = _Util.Facade.ThirdPartyCustomerFacade.GetThirdPartyUccCustomersOfNoAgency(StartDate, EndDate);
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    uccCustomerList = _Util.Facade.ThirdPartyCustomerFacade.GetThirdPartyUccCustomersOfNoAgency(StartDate, EndDate);
                }
                else
                {
                    uccCustomerList = _Util.Facade.ThirdPartyCustomerFacade.GetThirdPartyUccCustomersOfNoAgency(StartDate, EndDate);
                }

            }
            #region excel report
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                bool reportConvertResult;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.ThirdPartyCustomerFacade.GetBrinksReportExport(StartDate, EndDate);
                    reportConvertResult = _Util.Facade.ThirdPartyCustomerFacade.UpdateBrinksCustomerToSold(StartDate, EndDate);

                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.ThirdPartyCustomerFacade.GetBrinksReportExport(StartDate, EndDate);
                        reportConvertResult = _Util.Facade.ThirdPartyCustomerFacade.UpdateBrinksCustomerToSold(StartDate, EndDate);

                    }
                    else
                    {
                        dt = _Util.Facade.ThirdPartyCustomerFacade.GetBrinksReportExport(StartDate, EndDate);
                        reportConvertResult = _Util.Facade.ThirdPartyCustomerFacade.UpdateBrinksCustomerToSold(StartDate, EndDate);

                    }

                }
                if (reportConvertResult == true)
                {
                    if (uccCustomerList.ThirdPartyCustomerList != null && uccCustomerList.ThirdPartyCustomerList.Count > 0)
                    {
                        List<string> CusIdList = new List<string>();
                        foreach (var item in uccCustomerList.ThirdPartyCustomerList)
                        {
                            CusIdList.Add(item.CustomerId.ToString());
                        }
                        _Util.Facade.CustomerFacade.UpdateBrinksFundingStatusByCustomerIdList(CusIdList);
                    }
                }
                else
                {
                    dt = null;

                    return MakeExcelFromDataTable(dt, "BrinksReport", null, null);
                }
                return MakeExcelFromDataTable(dt, "BrinksReport", null, null);
            }
            #endregion



            return View(uccCustomerList);
        }
        [Authorize]
        public ActionResult LoadInvoiceListReportPartial(bool? GetReport, string Start, string End, int pageno, int pagesize, string searchtxt, string invostatus, string order, FilterReportModel filter)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> invstatus = new List<string>();
            if (!string.IsNullOrWhiteSpace(invostatus))
            {
                string[] splituser = invostatus.Split(',');
                if (splituser.Length > 0)
                {
                    invostatus = string.Format("'{0}'", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        invstatus.Add(item);
                    }
                }
            }
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.EmployeeFacade.GetInvoiceListReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtxt, invostatus, order, filter);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.EmployeeFacade.GetInvoiceListReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtxt, invostatus, order, filter);
                    }
                    else
                    {
                        dt = _Util.Facade.EmployeeFacade.GetInvoiceListReportExportByCompanyId(CurrentUser.CompanyId.Value, null, null, searchtxt, invostatus, order, filter);
                    }

                }
                return MakeExcelFromDataTable(dt, "InvoiceListReport", null, null);
            }
            InvoiceReportModel Model = _Util.Facade.EmployeeFacade.GetInvoiceReportByCompanyId(CurrentUser.CompanyId.Value, pageno, pagesize, StartDate, EndDate, searchtxt, invostatus, order, filter);
            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.orderval = order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.ListInvoice != null && Model.ListInvoice.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.InvoiceReportCountModel.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.Totalpagesize = (int)ViewBag.PageNumber * pagesize;
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            if (Model.TotalInvoiceAmountModel.TotalSalesAmount > 0)
            {
                ViewBag.average = Model.TotalInvoiceAmountModel.TotalSalesAmount / ViewBag.OutOfNumber;
            }
            List<SelectListItem> statusinv = new List<SelectListItem>();
            statusinv.Add(new SelectListItem()
            {
                Text = "Paid",
                Value = "Paid"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Open",
                Value = "Open"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Partial",
                Value = "Partial"
            });
            ViewBag.statusinv = statusinv;
            ViewBag.invstatus = invstatus;
            return View("_LoadInvoiceListReportPartial", Model);
        }

        [Authorize]
        public ActionResult LoadEstimateListReportPartial(bool? GetReport, string Start, string End, int pageno, int pagesize, string searchtxt, string invostatus, string order, FilterReportModel filter)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> invstatus = new List<string>();
            if (!string.IsNullOrWhiteSpace(invostatus))
            {
                string[] splituser = invostatus.Split(',');
                if (splituser.Length > 0)
                {
                    invostatus = string.Format("'{0}'", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        invstatus.Add(item);
                    }
                }
            }
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.EmployeeFacade.GetEstimateListReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtxt, invostatus, order, filter);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.EmployeeFacade.GetEstimateListReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtxt, invostatus, order, filter);
                    }
                    else
                    {
                        dt = _Util.Facade.EmployeeFacade.GetEstimateListReportExportByCompanyId(CurrentUser.CompanyId.Value, null, null, searchtxt, invostatus, order, filter);
                    }

                }
                return MakeExcelFromDataTable(dt, "EstimateListReport", null, null);
            }
            InvoiceReportModel Model = _Util.Facade.EmployeeFacade.GetEstimateReportByCompanyId(CurrentUser.CompanyId.Value, pageno, pagesize, StartDate, EndDate, searchtxt, invostatus, order, filter);
            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.orderval = order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.ListInvoice != null && Model.ListInvoice.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.InvoiceReportCountModel.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.Totalpagesize = (int)ViewBag.PageNumber * pagesize;
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            if (Model.TotalInvoiceAmountModel.TotalSalesAmount > 0)
            {
                ViewBag.average = Model.TotalInvoiceAmountModel.TotalSalesAmount / ViewBag.OutOfNumber;
            }
            List<SelectListItem> statusinv = new List<SelectListItem>();
            statusinv.Add(new SelectListItem()
            {
                Text = "Created",
                Value = "Created"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Open",
                Value = "Open"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Sent To Customer",
                Value = "Sent To Customer"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Resend To Customer",
                Value = "Resend To Customer"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Customer Viewed",
                Value = "Customer Viewed"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Signed",
                Value = "Signed"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Completed",
                Value = "Completed"
            });
            ViewBag.statusinv = statusinv;
            ViewBag.invstatus = invstatus;
            return View("_LoadEstimateListReportPartial", Model);
        }

        [Authorize]
        public ActionResult InvoiceListReportList(bool? GetReport, string Start, string End, int pageno, int pagesize, string searchtxt, string invostatus, string order, FilterReportModel filter)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> invstatus = new List<string>();
            if (!string.IsNullOrWhiteSpace(invostatus))
            {
                string[] splituser = invostatus.Split(',');
                if (splituser.Length > 0)
                {
                    invostatus = string.Format("'{0}'", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        invstatus.Add(item);
                    }
                }
            }
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    //StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    //EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.EmployeeFacade.GetInvoiceListReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtxt, invostatus, order, filter);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.EmployeeFacade.GetInvoiceListReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtxt, invostatus, order, filter);
                    }
                    else
                    {
                        dt = _Util.Facade.EmployeeFacade.GetInvoiceListReportExportByCompanyId(CurrentUser.CompanyId.Value, null, null, searchtxt, invostatus, order, filter);
                    }

                }
                int[] colarray = { 6, 7, 8, 9, 10 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "InvoiceListReport", rowarray, colarray);
            }
            InvoiceReportModel Model = _Util.Facade.EmployeeFacade.GetInvoiceReportByCompanyId(CurrentUser.CompanyId.Value, pageno, pagesize, StartDate, EndDate, searchtxt, invostatus, order, filter);
            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.orderval = order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.ListInvoice != null && Model.ListInvoice.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.InvoiceReportCountModel.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.Totalpagesize = (int)ViewBag.PageNumber * pagesize;
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            if (Model.TotalInvoiceAmountModel.TotalSalesAmount > 0)
            {
                ViewBag.average = Model.TotalInvoiceAmountModel.TotalSalesAmount / ViewBag.OutOfNumber;
            }
            List<SelectListItem> statusinv = new List<SelectListItem>();
            statusinv.Add(new SelectListItem()
            {
                Text = "Paid",
                Value = "Paid"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Open",
                Value = "Open"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Partial",
                Value = "Partial"
            });
            ViewBag.statusinv = statusinv;
            ViewBag.invstatus = invstatus;
            return View(Model);
        }

        [Authorize]
        public ActionResult EstimateListReportList(bool? GetReport, string Start, string End, int pageno, int pagesize, string searchtxt, string invostatus, string order, FilterReportModel filter)
        {
            if (!string.IsNullOrWhiteSpace(invostatus))
            {
                invostatus = HttpUtility.UrlDecode(invostatus);
            }
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> invstatus = new List<string>();
            if (!string.IsNullOrWhiteSpace(invostatus))
            {
                string[] splituser = invostatus.Split(',');
                if (splituser.Length > 0)
                {
                    invostatus = string.Format("'{0}'", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        invstatus.Add(item);
                    }
                }
            }
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    //StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    //EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.EmployeeFacade.GetEstimateListReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtxt, invostatus, order, filter);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.EmployeeFacade.GetEstimateListReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtxt, invostatus, order, filter);
                    }
                    else
                    {
                        dt = _Util.Facade.EmployeeFacade.GetEstimateListReportExportByCompanyId(CurrentUser.CompanyId.Value, null, null, searchtxt, invostatus, order, filter);
                    }

                }
                return MakeExcelFromDataTable(dt, "EstimateListReport", null, null);
            }
            InvoiceReportModel Model = _Util.Facade.EmployeeFacade.GetEstimateReportByCompanyId(CurrentUser.CompanyId.Value, pageno, pagesize, StartDate, EndDate, searchtxt, invostatus, order, filter);
            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.orderval = order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.ListInvoice != null && Model.ListInvoice.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.InvoiceReportCountModel.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.Totalpagesize = (int)ViewBag.PageNumber * pagesize;
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            if (Model.TotalInvoiceAmountModel.TotalSalesAmount > 0)
            {
                ViewBag.average = Model.TotalInvoiceAmountModel.TotalSalesAmount / ViewBag.OutOfNumber;
            }
            List<SelectListItem> statusinv = new List<SelectListItem>();
            statusinv.Add(new SelectListItem()
            {
                Text = "Created",
                Value = "Created"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Open",
                Value = "Open"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Sent To Customer",
                Value = "Sent To Customer"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Resend To Customer",
                Value = "Resend To Customer"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Customer Viewed",
                Value = "Customer Viewed"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Signed",
                Value = "Signed"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Completed",
                Value = "Completed"
            });
            ViewBag.statusinv = statusinv;
            ViewBag.invstatus = invstatus;
            return View(Model);
        }

        [Authorize]
        public ActionResult LoadCollectionReportPartial()
        {
            List<SelectListItem> statusinv = new List<SelectListItem>();
            statusinv.Add(new SelectListItem()
            {
                Text = "Paid",
                Value = "Paid"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Open",
                Value = "Open"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Partial",
                Value = "Partial"
            });
            List<SelectListItem> SalesCommisssion = new List<SelectListItem>();
            SalesCommisssion.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("CommissionType").Select(x =>
                        new SelectListItem()
                        {
                            Text = x.DisplayText.ToString(),
                            Value = x.DataValue.ToString()
                        }).ToList());
            ViewBag.SalesCommisssion = SalesCommisssion.OrderBy(x => x.Text != "Please Select").ThenBy(x => x.Text).ToList();

            ViewBag.statusinv = statusinv;
            ViewBag.paymentmethod = _Util.Facade.LookupFacade.GetLookupByKey("PaymentMethod").Select(x => new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            });
            return View("_LoadCollectionReportPartial");
        }

        [Authorize]
        public ActionResult CollectionReportList(bool? GetReport, string Start, string End, int pageno, int pagesize, string searchtxt, int salesCommission, string invostatus, string order, FilterReportModel filter)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> invstatus = new List<string>();
            if (!string.IsNullOrWhiteSpace(invostatus))
            {
                string[] splituser = invostatus.Split(',');
                if (splituser.Length > 0)
                {
                    invostatus = string.Format("'{0}'", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        invstatus.Add(item);
                    }
                }
            }
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            List<SelectListItem> SalesCommission = _Util.Facade.LookupFacade.GetLookupByKey("CommissionType")
          .Select(x => new SelectListItem
          {
              Text = x.DisplayText.ToString(),
              Value = x.DataValue.ToString()
          }).ToList();

            string salesCommissionName = SalesCommission
                .FirstOrDefault(x => x.Value == salesCommission.ToString())?.Text;
            ViewBag.SalesCommissionName = salesCommissionName;

            if (GetReport.HasValue && GetReport == true)
            {
              
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && Start != "undefined" && !string.IsNullOrWhiteSpace(End) && End != "undefined")
                {
                    //StartDate = Convert.ToDateTime(Start);
                    //EndDate = Convert.ToDateTime(End);
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.EmployeeFacade.GetCollectionReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtxt, salesCommission, invostatus, order, filter);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.EmployeeFacade.GetCollectionReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtxt, salesCommission, invostatus, order, filter);
                    }
                    else
                    {
                        dt = _Util.Facade.EmployeeFacade.GetCollectionReportExportByCompanyId(CurrentUser.CompanyId.Value, null, null, searchtxt, salesCommission, invostatus, order, filter);
                    }

                }
                // int[] colarray = {  7, 8, 10, 11 };
                int[] colarray = {  };
                int[] rowarray = { dt.Rows.Count + 2 };
                //dt.Columns.Remove("Invoice Date desc");

                return MakeExcelFromDataTable(dt, "CollectionReport", rowarray, colarray);
            }

            InvoiceReportModel Model = new InvoiceReportModel();
            if (!string.IsNullOrWhiteSpace(Start) && Start != "undefined" && !string.IsNullOrWhiteSpace(End) && End != "undefined")
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                Model = _Util.Facade.EmployeeFacade.GetCollectionReportByCompanyId(CurrentUser.CompanyId.Value, pageno, pagesize, StartDate, EndDate, searchtxt, salesCommission, invostatus, order, filter);
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.EmployeeFacade.GetCollectionReportByCompanyId(CurrentUser.CompanyId.Value, pageno, pagesize, StartDate, EndDate, searchtxt, salesCommission, invostatus, order, filter);
                }
                else
                {
                    Model = _Util.Facade.EmployeeFacade.GetCollectionReportByCompanyId(CurrentUser.CompanyId.Value, pageno, pagesize, StartDate, EndDate, searchtxt, salesCommission, invostatus, order, filter);
                }

            }
            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.orderval = order;
            if (!string.IsNullOrWhiteSpace(searchtxt) && searchtxt != "undefined")
            {
                ViewBag.searchtxt = searchtxt;
            }
            else
            {
                ViewBag.searchtxt = "";
            }
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }

            if (Model.ListInvoice != null && Model.ListInvoice.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.InvoiceReportCountModel.TotalCount;
            }


            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.Totalpagesize = (int)ViewBag.PageNumber * pagesize;
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);

            List<SelectListItem> statusinv = new List<SelectListItem>();
            statusinv.Add(new SelectListItem()
            {
                Text = "Paid",
                Value = "Paid"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Open",
                Value = "Open"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Partial",
                Value = "Partial"
            });
            ViewBag.statusinv = statusinv;
            ViewBag.invstatus = invstatus;
            return View(Model);
        }

        [Authorize]
        public ActionResult LoadBookingSalesReportPartial(bool? GetReport, string Start, string End, int pageno, int pagesize, string searchtxt, string source, string order)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> bsource = new List<string>();
            if (!string.IsNullOrWhiteSpace(source))
            {
                string[] splituser = source.Split(',');
                if (splituser.Length > 0)
                {
                    source = string.Format("'{0}'", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        bsource.Add(item);
                    }
                }
            }
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && Start != "undefined" && !string.IsNullOrWhiteSpace(End) && End != "undefined")
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.EmployeeFacade.GetBookingSalesReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtxt, source);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.EmployeeFacade.GetBookingSalesReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtxt, source);
                    }
                    else
                    {
                        dt = _Util.Facade.EmployeeFacade.GetBookingSalesReportExportByCompanyId(CurrentUser.CompanyId.Value, null, null, searchtxt, source);
                    }

                }
                return MakeExcelFromDataTable(dt, "BookingReport", null, null);
            }
            BookingSalesReportModel model = new BookingSalesReportModel();
            List<BookingReportModel> Model = _Util.Facade.EmployeeFacade.GetBookingSalesReportByCompanyId(CurrentUser.CompanyId.Value, pageno, pagesize, StartDate, EndDate, searchtxt, source, order);
            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.orderval = order;
            if (!string.IsNullOrWhiteSpace(searchtxt) && searchtxt != "undefined")
            {
                ViewBag.searchtxt = searchtxt;
            }
            else
            {
                ViewBag.searchtxt = "";
            }
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model != null && Model.Count() > 0)
            {
                ViewBag.OutOfNumber = Model[0].SalesReportCountModel.TotalCount;
                double Total = 0;
                foreach (var item in Model)
                {
                    Total += item.InTotalAmount;
                }
                ViewBag.TotalAmount = Total.ToString("N2");
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.Totalpagesize = (int)ViewBag.PageNumber * pagesize;
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            //if (Model.TotalSalesAmountModel.TotalSalesAmount > 0)
            //{
            //    ViewBag.average = Model.TotalSalesAmountModel.TotalSalesAmount / ViewBag.OutOfNumber;
            //}
            //List<SelectListItem> statusinv = new List<SelectListItem>();
            //statusinv.Add(new SelectListItem()
            //{
            //    Text = "Paid",
            //    Value = "Paid"
            //});
            //statusinv.Add(new SelectListItem()
            //{
            //    Text = "Open",
            //    Value = "Open"
            //});
            //statusinv.Add(new SelectListItem()
            //{
            //    Text = "Partial",
            //    Value = "Partial"
            //});
            //ViewBag.statusinv = statusinv;
            //ViewBag.invstatus = invstatus;
            List<SelectListItem> bookingsource = new List<SelectListItem>();
            bookingsource.Add(new SelectListItem()
            {
                Text = "Online",
                Value = "Online"
            });
            bookingsource.Add(new SelectListItem()
            {
                Text = "System Generated",
                Value = "System"
            });
            ViewBag.bookingsource = bookingsource;
            ViewBag.bsource = bsource;
            return View("_LoadBookingSalesReportPartial", Model);
        }

        [Authorize]
        public ActionResult LoadPartnerReportPartial(bool? GetReport, string Start, string End, int pageno, int pagesize, string searchtxt, string invostatus, string order, string empGIDList)
        {
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (CurrentLoggedInUser == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }

            //string eiDList = "";
            //List<Employee> EmployeeList = _Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentLoggedInUser.CompanyId.Value, LabelHelper.UserTags.Partner, new Guid());
            //if (EmployeeList != null && EmployeeList.Count() > 0)
            //{
            //    foreach (var item in EmployeeList)
            //    {
            //        if (item.UserId != null)
            //        {
            //            if (eiDList == "")
            //            {
            //                eiDList = "'" + item.UserId + "'";
            //            }
            //            else
            //            {
            //                eiDList = eiDList + ",'" + item.UserId + "'";
            //            }

            //        }

            //    }
            //}
            //if (string.IsNullOrWhiteSpace(eiDList))
            //{
            //    eiDList = "'empty'";
            //}

            if (string.IsNullOrWhiteSpace(empGIDList) || empGIDList == "undefined")
            {
                empGIDList = "'empty'";
            }


            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> invstatus = new List<string>();
            if (!string.IsNullOrWhiteSpace(invostatus))
            {
                string[] splituser = invostatus.Split(',');
                if (splituser.Length > 0)
                {
                    invostatus = string.Format("'{0}'", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        invstatus.Add(item);
                    }
                }
            }
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && Start != "undefined" && !string.IsNullOrWhiteSpace(End) && End != "undefined")
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.EmployeeFacade.GetPartnerReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, empGIDList);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.EmployeeFacade.GetPartnerReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate.SetZeroHour().ClientToUTCTime(), EndDate.SetMaxHour().ClientToUTCTime(), empGIDList);
                    }
                    else
                    {
                        dt = _Util.Facade.EmployeeFacade.GetPartnerReportExportByCompanyId(CurrentUser.CompanyId.Value, null, null, empGIDList);
                    }

                }
                return MakeExcelFromDataTable(dt, "PartnerReport", null, null);
            }


            List<Customer> Model = new List<Customer>();

            Model = _Util.Facade.EmployeeFacade.GetPartnerReportByCompanyId(CurrentUser.CompanyId.Value, pageno, pagesize, StartDate, EndDate, searchtxt, order, empGIDList);
            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.orderval = order;
            if (!string.IsNullOrWhiteSpace(searchtxt) && searchtxt != "undefined")
            {
                ViewBag.searchtxt = searchtxt;
            }
            else
            {
                ViewBag.searchtxt = "";
            }
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model != null && Model.Count() > 0)
            {
                ViewBag.OutOfNumber = Model[0].TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.Totalpagesize = (int)ViewBag.PageNumber * pagesize;
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            //if (Model.TotalSalesAmountModel.TotalSalesAmount > 0)
            //{
            //    ViewBag.average = Model.TotalSalesAmountModel.TotalSalesAmount / ViewBag.OutOfNumber;
            //}
            List<SelectListItem> statusinv = new List<SelectListItem>();
            statusinv.Add(new SelectListItem()
            {
                Text = "Paid",
                Value = "Paid"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Open",
                Value = "Open"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Partial",
                Value = "Partial"
            });
            ViewBag.statusinv = statusinv;
            ViewBag.invstatus = invstatus;
            return View("_LoadPartnerReportPartial", Model);
        }


        [Authorize]
        public ActionResult LoadPartnerReportBarPartial(string Start, string End, string empGIDList)
        {
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (CurrentLoggedInUser == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }

            //string eiDList = "";
            //List<Employee> EmployeeList = _Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentLoggedInUser.CompanyId.Value, LabelHelper.UserTags.Partner, new Guid());
            //if (EmployeeList != null && EmployeeList.Count() > 0)
            //{
            //    foreach (var item in EmployeeList)
            //    {
            //        if (item.UserId != null)
            //        {
            //            if (eiDList == "")
            //            {
            //                eiDList = "'" + item.UserId + "'";
            //            }
            //            else
            //            {
            //                eiDList = eiDList + ",'" + item.UserId + "'";
            //            }

            //        }

            //    }
            //}
            //if (string.IsNullOrWhiteSpace(eiDList))
            //{
            //    eiDList = "'empty'";
            //}
            if (string.IsNullOrWhiteSpace(empGIDList) || empGIDList == "undefined")
            {
                empGIDList = "'empty'";
            }

            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> invstatus = new List<string>();

            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }



            PartnerReportBarModel Model = new PartnerReportBarModel();

            Model = _Util.Facade.EmployeeFacade.GetPartnerReportBarByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, empGIDList);
            //ViewBag.PageNumber = pageno;
            //ViewBag.OutOfNumber = 0;
            //ViewBag.orderval = order;
            //if (!string.IsNullOrWhiteSpace(searchtxt) && searchtxt != "undefined")
            //{
            //    ViewBag.searchtxt = searchtxt;
            //}
            //else
            //{
            //    ViewBag.searchtxt = "";
            //}
            //if (ViewBag.order == null)
            //{
            //    ViewBag.order = 0;
            //}
            //if (Model != null && Model.Count() > 0)
            //{
            //    ViewBag.OutOfNumber = Model[0].TotalCount;
            //}

            //if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            //{
            //    ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            //}
            //else
            //{
            //    ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            //}
            //ViewBag.Totalpagesize = (int)ViewBag.PageNumber * pagesize;
            //ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            //if (Model.TotalSalesAmountModel.TotalSalesAmount > 0)
            //{
            //    ViewBag.average = Model.TotalSalesAmountModel.TotalSalesAmount / ViewBag.OutOfNumber;
            //}
            //List<SelectListItem> statusinv = new List<SelectListItem>();
            //statusinv.Add(new SelectListItem()
            //{
            //    Text = "Paid",
            //    Value = "Paid"
            //});
            //statusinv.Add(new SelectListItem()
            //{
            //    Text = "Open",
            //    Value = "Open"
            //});
            //statusinv.Add(new SelectListItem()
            //{
            //    Text = "Partial",
            //    Value = "Partial"
            //});
            //ViewBag.statusinv = statusinv;
            //ViewBag.invstatus = invstatus;
            return View("_LoadPartnerReportBarPartial", Model);
        }


        [Authorize]
        public ActionResult LoadLeadSourceReportPartial(bool? GetReport, string Start, string End, int pageno, int pagesize, string searchtxt, string invostatus, string order, string empGIDList)
        {
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (CurrentLoggedInUser == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }

            //string eiDList = "";
            //List<Employee> EmployeeList = _Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentLoggedInUser.CompanyId.Value, LabelHelper.UserTags.Partner, new Guid());
            //if (EmployeeList != null && EmployeeList.Count() > 0)
            //{
            //    foreach (var item in EmployeeList)
            //    {
            //        if (item.UserId != null)
            //        {
            //            if (eiDList == "")
            //            {
            //                eiDList = "'" + item.UserId + "'";
            //            }
            //            else
            //            {
            //                eiDList = eiDList + ",'" + item.UserId + "'";
            //            }

            //        }

            //    }
            //}
            //if (string.IsNullOrWhiteSpace(eiDList))
            //{
            //    eiDList = "'empty'";
            //}

            if (string.IsNullOrWhiteSpace(empGIDList) || empGIDList == "undefined")
            {
                empGIDList = "'empty'";
            }


            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> invstatus = new List<string>();
            if (!string.IsNullOrWhiteSpace(invostatus))
            {
                string[] splituser = invostatus.Split(',');
                if (splituser.Length > 0)
                {
                    invostatus = string.Format("'{0}'", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        invstatus.Add(item);
                    }
                }
            }
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && Start != "undefined" && !string.IsNullOrWhiteSpace(End) && End != "undefined")
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.EmployeeFacade.GetLeadSourceReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, empGIDList);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.EmployeeFacade.GetLeadSourceReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, empGIDList);
                    }
                    else
                    {
                        dt = _Util.Facade.EmployeeFacade.GetLeadSourceReportExportByCompanyId(CurrentUser.CompanyId.Value, null, null, empGIDList);
                    }

                }
                return MakeExcelFromDataTable(dt, "LeadSourceReport", null, null);
            }


            List<Customer> Model = new List<Customer>();

            Model = _Util.Facade.EmployeeFacade.GetLeadSourceReportByCompanyId(CurrentUser.CompanyId.Value, pageno, pagesize, StartDate, EndDate, searchtxt, order, empGIDList);
            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.orderval = order;
            if (!string.IsNullOrWhiteSpace(searchtxt) && searchtxt != "undefined")
            {
                ViewBag.searchtxt = searchtxt;
            }
            else
            {
                ViewBag.searchtxt = "";
            }
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model != null && Model.Count() > 0)
            {
                ViewBag.OutOfNumber = Model[0].TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.Totalpagesize = (int)ViewBag.PageNumber * pagesize;
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            //if (Model.TotalSalesAmountModel.TotalSalesAmount > 0)
            //{
            //    ViewBag.average = Model.TotalSalesAmountModel.TotalSalesAmount / ViewBag.OutOfNumber;
            //}
            List<SelectListItem> statusinv = new List<SelectListItem>();
            statusinv.Add(new SelectListItem()
            {
                Text = "Paid",
                Value = "Paid"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Open",
                Value = "Open"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Partial",
                Value = "Partial"
            });
            ViewBag.statusinv = statusinv;
            ViewBag.invstatus = invstatus;
            return View("_LoadLeadSourceReportPartial", Model);
        }


        [Authorize]
        public ActionResult LoadLeadSourceReportBarPartial(string Start, string End, string empGIDList)
        {
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (CurrentLoggedInUser == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }

            if (string.IsNullOrWhiteSpace(empGIDList) || empGIDList == "undefined")
            {
                empGIDList = "'empty'";
            }

            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> invstatus = new List<string>();

            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }



            LeadSourceReportBarModel Model = new LeadSourceReportBarModel();

            Model = _Util.Facade.EmployeeFacade.GetLeadSourceReportBarByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, empGIDList);

            return View("_LoadLeadSourceReportBarPartial", Model);
        }





        //DATE REFERENCE Web 1st load also Report download.
        [Authorize]
        public ActionResult TicketReportPartial(bool? GetReport, string Start, string End, TicketFilter Filters, string RepType, FilterReportModel filter)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();

            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                List<string> typeticket = new List<string>();
                List<string> statusticket = new List<string>();
                List<string> assignticket = new List<string>();
                List<string> eqcategory = new List<string>();
                List<string> manulist = new List<string>();
                List<string> technicianlist = new List<string>();
                List<string> EquipmentStatus = new List<string>();
                #region TicketType
                if (!string.IsNullOrWhiteSpace(Filters.TicketType))
                {
                    string[] splituser = Filters.TicketType.Split(',');
                    if (splituser.Length > 0)
                    {
                        Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                        foreach (var item in splituser)
                        {
                            typeticket.Add(item);
                        }
                    }
                }
                #endregion
                #region TicketStatus
                if (!string.IsNullOrWhiteSpace(Filters.TicketStatus))
                {
                    string[] splituser = Filters.TicketStatus.Split(',');
                    if (splituser.Length > 0)
                    {
                        Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                        foreach (var item in splituser)
                        {
                            statusticket.Add(item);
                        }
                    }
                }
                #endregion
                #region AssignedUserTicket
                if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket))
                {
                    string[] splituser = Filters.AssignedUserTicket.Split(',');
                    if (splituser.Length > 0)
                    {
                        Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                        foreach (var item in splituser)
                        {
                            assignticket.Add(item);
                        }
                    }
                }
                #endregion

                #region category
                if (!string.IsNullOrWhiteSpace(Filters.category))
                {
                    string[] splituser = Filters.category.Split(',');
                    if (splituser.Length > 0)
                    {
                        Filters.category = string.Format("{0}", string.Join(",", splituser));
                        foreach (var item in splituser)
                        {
                            eqcategory.Add(item);
                        }
                    }
                }
                #endregion

                //Not required in date reference
                #region manufact
                if (!string.IsNullOrWhiteSpace(Filters.manufact))
                {
                    string[] splituser = Filters.manufact.Split(',');
                    if (splituser.Length > 0)
                    {
                        Filters.manufact = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                        foreach (var item in splituser)
                        {
                            manulist.Add(item);
                        }
                    }
                }
                #endregion

                //Not requred in date reference
                #region technician
                if (!string.IsNullOrWhiteSpace(Filters.technician))
                {
                    string[] splituser = Filters.technician.Split(',');
                    if (splituser.Length > 0)
                    {
                        Filters.technician = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                        foreach (var item in splituser)
                        {
                            technicianlist.Add(item);
                        }
                    }
                }
                #endregion

                //Not required in date reference 
                #region EquipmentStatus
                if (!string.IsNullOrWhiteSpace(Filters.EquipmentStatus))
                {
                    string[] splituser = Filters.EquipmentStatus.Split(',');
                    if (splituser.Length > 0)
                    {
                        Filters.EquipmentStatus = string.Format("{0}", string.Join("','", splituser));
                        foreach (var item in splituser)
                        {
                            EquipmentStatus.Add(item);
                        }
                    }
                }
                #endregion

                if (RepType == "DateReference")
                {
                    DataTable dt;
                    DateTime NullStartDate = new DateTime();
                    DateTime NullEndDate = new DateTime();
                    if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                    {
                        StartDate = Convert.ToDateTime(Start).SetZeroHour();//.ClientToUTCTime();
                        EndDate = Convert.ToDateTime(End).SetMaxHour();//.ClientToUTCTime();
                        dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                    }
                    else
                    {
                        if (StartDate != new DateTime() && EndDate != new DateTime())
                        {
                            StartDate = StartDate.SetZeroHour();//.ClientToUTCTime();
                            EndDate = EndDate.SetMaxHour();//.ClientToUTCTime();
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                        }
                        else
                        {
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompany(CurrentUser.CompanyId.Value, NullStartDate, NullEndDate, Filters, filter);
                        }

                    }
                    //dt.Columns.Remove("Id");
                    //dt.Columns.Remove("DBA");
                    //dt.Columns.Remove("BookingId");
                    //dt.Columns.Remove("TicketType");
                    //dt.Columns.Remove("TicketId");
                    //dt.Columns.Remove("CustomerId");
                    //dt.Columns.Remove("Status");
                    //dt.Columns.Remove("Priority");
                    //dt.Columns.Remove("CompanyId");
                    //dt.Columns.Remove("CompletionDate");
                    //dt.Columns.Remove("ReferenceTicketId");
                    //dt.Columns.Remove("RescheduleTicketId");
                    //dt.Columns.Remove("cusid");
                    //dt.Columns.Remove("UserId");
                    //dt.Columns.Remove("CreatedBy");
                    //dt.Columns.Remove("CreatedDate");
                    return MakeExcelFromDataTable(dt, "Date Reference", null, null);
                }
                else if (RepType == "AppointmentDate")
                {
                    DataTable dt;
                    DateTime NullStartDate = new DateTime();
                    DateTime NullEndDate = new DateTime();
                    if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                    {
                        //StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                        //EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                        //dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompanyForAppointmentDate(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                        dt = _Util.Facade.CustomerFacade.GetAllTicketReportAppointmwntDateByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);

                    }
                    else
                    {
                        if (StartDate != new DateTime() && EndDate != new DateTime())
                        {
                            // StartDate = StartDate.SetZeroHour().ClientToUTCTime();
                            //EndDate = EndDate.SetMaxHour().ClientToUTCTime();
                            //dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompanyForAppointmentDate(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportAppointmwntDateByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);

                        }
                        else
                        {
                            //dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompanyForAppointmentDate(CurrentUser.CompanyId.Value, null, null, Filters, filter);
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportAppointmwntDateByCompany(CurrentUser.CompanyId.Value, NullStartDate, NullEndDate, Filters, filter);

                        }

                    }
                    return MakeExcelFromDataTable(dt, "Appointment Date", null, null);
                }
                else if (RepType == "GoBack")
                {
                    if (Filters.StartDate == new DateTime())
                    {
                        Filters.StartDate = DateTime.Today.AddDays(-90).Date;
                    }
                    if (Filters.EndDate == new DateTime())
                    {
                        Filters.EndDate = DateTime.Today.Date;
                    }
                    if (Filters.StartDate != null && Filters.StartDate != new DateTime())
                    {
                        Filters.StartDate = Filters.StartDate.SetZeroHour().ClientToUTCTime();
                    }
                    if (Filters.EndDate != null && Filters.EndDate != new DateTime())
                    {
                        Filters.EndDate = Filters.EndDate.SetMaxHour().ClientToUTCTime();
                    }
                    DataTable dt;
                    if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                    {
                        StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                        EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                        dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompanyForGoBack(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                    }
                    else
                    {
                        if (StartDate != new DateTime() && EndDate != new DateTime())
                        {
                            StartDate = StartDate.SetZeroHour().ClientToUTCTime();
                            EndDate = EndDate.SetMaxHour().ClientToUTCTime();
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompanyForGoBack(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                        }
                        else
                        {
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompanyForGoBack(CurrentUser.CompanyId.Value, null, null, Filters, filter);
                        }

                    }
                    return MakeExcelFromDataTable(dt, "Go Back", null, null);
                }
                else if (RepType == "Install")
                {
                    DataTable dt;
                    if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                    {
                        StartDate = Convert.ToDateTime(Start).SetZeroHour();
                        EndDate = Convert.ToDateTime(End).SetMaxHour();
                        dt = _Util.Facade.CustomerFacade.GetTicketListInstallReportByFilter(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters);
                    }
                    else
                    {
                        if (StartDate != new DateTime() && EndDate != new DateTime())
                        {
                            dt = _Util.Facade.CustomerFacade.GetTicketListInstallReportByFilter(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters);
                        }
                        else
                        {
                            dt = _Util.Facade.CustomerFacade.GetTicketListInstallReportByFilter(CurrentUser.CompanyId.Value, null, null, Filters);
                        }

                    }
                    int[] colarray = { 12, 13 };
                    int[] rowarray = { dt.Rows.Count + 2 };
                    return MakeExcelFromDataTable(dt, "Installed Equipments Report", rowarray, colarray);
                }
                else if (RepType == "AllEquipment")
                {
                    DataTable dt;
                    if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                    {
                        StartDate = Convert.ToDateTime(Start).SetZeroHour();
                        EndDate = Convert.ToDateTime(End).SetMaxHour();
                        dt = _Util.Facade.CustomerFacade.GetTicketListAllReportByFilter(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters);
                    }
                    else
                    {
                        if (StartDate != new DateTime() && EndDate != new DateTime())
                        {
                            dt = _Util.Facade.CustomerFacade.GetTicketListAllReportByFilter(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters);
                        }
                        else
                        {
                            dt = _Util.Facade.CustomerFacade.GetTicketListAllReportByFilter(CurrentUser.CompanyId.Value, null, null, Filters);
                        }

                    }
                    int[] colarray = { 13, 14 };
                    int[] rowarray = { dt.Rows.Count + 2 };
                    return MakeExcelFromDataTable(dt, "All Equipment Report", rowarray, colarray);
                }
            }
            return View("_TicketReportPartial");
        }
        [Authorize]
        public ActionResult TechnicianReportPartial(bool? GetReport, string Start, string End, EmployeeFilter Filters, string RepType, FilterReportModel filter)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                dt = new DataTable();
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetTechnicianReportByFilter(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);


                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        StartDate = StartDate.SetZeroHour().ClientToUTCTime();
                        EndDate = EndDate.SetMaxHour().ClientToUTCTime();
                        dt = _Util.Facade.CustomerFacade.GetTechnicianReportByFilter(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetTechnicianReportByFilter(CurrentUser.CompanyId.Value, null, null, Filters, filter);
                    }

                }
                //dt.Columns.Remove("TicketId");
                //dt.Columns.Remove("BookingId");

                dt.Columns.Remove("Id");

                return MakeExcelFromDataTable(dt, "Technician Report", null, null);
            }

            return View("_TechnicianReportPartial");
        }
        [Authorize]
        public ActionResult InstallationTrackerReportPartial(bool? GetReport, string Start, string End, TicketFilter Filters, FilterReportModel filter)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            List<string> salespersonlist = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.salesperson) && Filters.salesperson != "null")
            {
                string[] splituser = Filters.salesperson.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.salesperson = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        salespersonlist.Add(item);
                    }
                }
            }
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                dt = new DataTable();
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour();
                    EndDate = Convert.ToDateTime(End).SetMaxHour();
                    dt = _Util.Facade.CustomerFacade.GetInstallationTrackerTicketListReportByFilter(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        StartDate = StartDate.SetZeroHour();
                        EndDate = EndDate.SetMaxHour();
                        dt = _Util.Facade.CustomerFacade.GetInstallationTrackerTicketListReportByFilter(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetInstallationTrackerTicketListReportByFilter(CurrentUser.CompanyId.Value, null, null, Filters, filter);
                    }

                }
                //dt.Columns.Remove("TicketId");
                //dt.Columns.Remove("BookingId");
                //dt.Columns.Remove("Id");
                //dt.Columns.Remove("CompletedDate");
                return MakeExcelFromDataTable(dt, "Installation Tracker", null, null);
            }
            return View("_InstallationTrackerReportPartial");
        }


        [Authorize]
        public ActionResult CSRActivityReportPartial(bool? GetReport, string Start, string End, TicketFilter Filters, FilterReportModel filter)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                dt = new DataTable();
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    Filters.StartDate = StartDate;
                    Filters.EndDate = EndDate;
                    dt = _Util.Facade.CustomerFacade.GetCSRActivityListReportByFilter(Filters, filter);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        StartDate = StartDate.SetZeroHour().ClientToUTCTime();
                        EndDate = EndDate.SetMaxHour().ClientToUTCTime();
                        Filters.StartDate = StartDate;
                        Filters.EndDate = EndDate;
                        dt = _Util.Facade.CustomerFacade.GetCSRActivityListReportByFilter(Filters, filter);
                    }
                    else
                    {
                        Filters.StartDate = StartDate;
                        Filters.EndDate = EndDate;
                        dt = _Util.Facade.CustomerFacade.GetCSRActivityListReportByFilter(Filters, filter);
                    }

                }
                return MakeExcelFromDataTable(dt, "CSR Activity", null, null);
            }
            return View();
        }

        [Authorize]
        public ActionResult ServiceTrackerReportPartial(bool? GetReport, string Start, string End, TicketFilter Filters, FilterReportModel filter)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            List<string> salespersonlist = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.salesperson) && Filters.salesperson != "null")
            {
                string[] splituser = Filters.salesperson.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.salesperson = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        salespersonlist.Add(item);
                    }
                }
            }
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                dt = new DataTable();
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour();
                    EndDate = Convert.ToDateTime(End).SetMaxHour();
                    Filters.StartDate = StartDate;
                    Filters.EndDate = EndDate;
                    dt = _Util.Facade.CustomerFacade.GetServiceTrackerReportListByFilter(Filters, filter);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        StartDate = StartDate.SetZeroHour();
                        EndDate = EndDate.SetMaxHour();
                        Filters.StartDate = StartDate;
                        Filters.EndDate = EndDate;
                        dt = _Util.Facade.CustomerFacade.GetServiceTrackerReportListByFilter(Filters, filter);
                    }
                    else
                    {
                        Filters.StartDate = StartDate;
                        Filters.EndDate = EndDate;
                        dt = _Util.Facade.CustomerFacade.GetServiceTrackerReportListByFilter(Filters, filter);
                    }

                }
                return MakeExcelFromDataTable(dt, "Service Tracker", null, null);
            }
            return View();
        }

        [Authorize]
        public ActionResult TaskReportPartial(bool? GetReport, string Start, string End, TicketFilter Filters, FilterReportModel filter)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            List<string> salespersonlist = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.salesperson) && Filters.salesperson != "null")
            {
                string[] splituser = Filters.salesperson.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.salesperson = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        salespersonlist.Add(item);
                    }
                }
            }
            List<string> selectreminder = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.seletActive) && Filters.seletActive != "null")
            {
                string[] splituser = Filters.seletActive.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.seletActive = string.Format("{0}", string.Join(",", splituser.Select(i => i.Replace("'", ""))));
                    foreach (var item in splituser)
                    {
                        selectreminder.Add(item);
                    }
                }
            }
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                bool allTask = false;
                if (PermissionChekcer.IsPermitted(Permissions.ReportsPermissions.AllTaskReportList))
                {
                    allTask = true;
                }
                DataTable dt;
                dt = new DataTable();
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    Filters.StartDate = StartDate;
                    Filters.EndDate = EndDate;
                    dt = _Util.Facade.CustomerFacade.GetTaskReportListByFilter(Filters, filter, CurrentUser.CompanyId.Value, CurrentUser.UserId, allTask);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        StartDate = StartDate.SetZeroHour().ClientToUTCTime();
                        EndDate = EndDate.SetMaxHour().ClientToUTCTime();
                        Filters.StartDate = StartDate;
                        Filters.EndDate = EndDate;
                        dt = _Util.Facade.CustomerFacade.GetTaskReportListByFilter(Filters, filter, CurrentUser.CompanyId.Value, CurrentUser.UserId, allTask);
                    }
                    else
                    {
                        Filters.StartDate = StartDate;
                        Filters.EndDate = EndDate;
                        dt = _Util.Facade.CustomerFacade.GetTaskReportListByFilter(Filters, filter, CurrentUser.CompanyId.Value, CurrentUser.UserId, allTask);
                    }

                }
                dt.Columns.Remove("CreatedDate");
                dt.Columns.Remove("CID");
                return MakeExcelFromDataTable(dt, "Tasks", null, null);
            }
            return View();
        }

        [Authorize]
        public ActionResult CompletedInventoryReportPartial(bool? GetReport, string Start, string End, string SearchText)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                dt = new DataTable();
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.PurchaseOrderFacade.GetCompletedInventoryListByFilterReport(CurrentUser.CompanyId.Value, StartDate, EndDate, SearchText);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        StartDate = StartDate.SetZeroHour().ClientToUTCTime();
                        EndDate = EndDate.SetMaxHour().ClientToUTCTime();
                        dt = _Util.Facade.PurchaseOrderFacade.GetCompletedInventoryListByFilterReport(CurrentUser.CompanyId.Value, StartDate, EndDate, SearchText);
                    }
                    else
                    {
                        dt = _Util.Facade.PurchaseOrderFacade.GetCompletedInventoryListByFilterReport(CurrentUser.CompanyId.Value, null, null, SearchText);
                    }

                }
                //dt.Columns.Remove("TicketId");
                //dt.Columns.Remove("BookingId");

                return MakeExcelFromDataTable(dt, "Completed Inventory", null, null);
            }
            return View("_CompletedInventoryReportPartial");
        }

        [Authorize]
        public ActionResult TicketReportPartialDateReference(bool? GetReport, string Start, string End, TicketFilter Filters, string RepType, FilterReportModel filter)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                if (RepType == "DateReference")
                {
                    DataTable dt;
                    if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                    {
                        StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                        EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                        dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                    }
                    else
                    {
                        if (StartDate != new DateTime() && EndDate != new DateTime())
                        {
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                        }
                        else
                        {
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompany(CurrentUser.CompanyId.Value, null, null, Filters, filter);
                        }

                    }
                    return MakeExcelFromDataTable(dt, "Date Reference Report", null, null);
                }
                else if (RepType == "AppointmentDate")
                {
                    DataTable dt;
                    if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                    {
                        StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                        EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                        dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompanyForAppointmentDate(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                    }
                    else
                    {
                        if (StartDate != new DateTime() && EndDate != new DateTime())
                        {
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompanyForAppointmentDate(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                        }
                        else
                        {
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompanyForAppointmentDate(CurrentUser.CompanyId.Value, null, null, Filters, filter);
                        }

                    }
                    return MakeExcelFromDataTable(dt, "Appointment Date Report", null, null);
                }
            }
            return View();
        }

        [Authorize]
        public ActionResult TicketReportPartialGoBack(bool? GetReport, string Start, string End, TicketFilter Filters, string RepType, FilterReportModel filter)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                if (RepType == "DateReference")
                {
                    DataTable dt;
                    if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                    {
                        StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                        EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                        dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                    }
                    else
                    {
                        if (StartDate != new DateTime() && EndDate != new DateTime())
                        {
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                        }
                        else
                        {
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompany(CurrentUser.CompanyId.Value, null, null, Filters, filter);
                        }

                    }
                    return MakeExcelFromDataTable(dt, "Security Work Orders by Date Reference", null, null);
                }
                else if (RepType == "AppointmentDate")
                {
                    DataTable dt;
                    if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                    {
                        StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                        EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                        dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompanyForAppointmentDate(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                    }
                    else
                    {
                        if (StartDate != new DateTime() && EndDate != new DateTime())
                        {
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompanyForAppointmentDate(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                        }
                        else
                        {
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompanyForAppointmentDate(CurrentUser.CompanyId.Value, null, null, Filters, filter);
                        }

                    }
                    return MakeExcelFromDataTable(dt, "Security Work Orders by Appointment Date", null, null);
                }
            }
            ViewBag.startdate = StartDate;
            ViewBag.enddate = EndDate;
            return View();
        }

        public ActionResult TechReportPartial(string start, string end, bool? GetReport)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(start) && !string.IsNullOrWhiteSpace(end))
                {
                    StartDate = Convert.ToDateTime(start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(end).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetAllTechCommissionReport(StartDate, EndDate);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllTechCommissionReport(StartDate, EndDate);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllTechCommissionReport(null, null);
                    }

                }
                return MakeExcelFromDataTable(dt, "Security Payroll Labour Tasks Paid Details", null, null);
            }
            ViewBag.Start = start;
            ViewBag.End = end;
            List<SelectListItem> techpersonList = new List<SelectListItem>();
            techpersonList.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.Technicians, new Guid()).OrderBy(x => x.UserId.ToString() != "-1").ThenBy(x => string.Format("{0}", x.FirstName.ToString() + " " + x.LastName.ToString())).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.TechPersonList = techpersonList;
            return View("_TechReportPartial");
        }

        public ActionResult MemberReportPartial(string start, string end, bool? GetReport)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(start) && !string.IsNullOrWhiteSpace(end))
                {
                    StartDate = Convert.ToDateTime(start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(end).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetAllAdditionalMemberCommissionReport(StartDate, EndDate);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllAdditionalMemberCommissionReport(StartDate, EndDate);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllAdditionalMemberCommissionReport(null, null);
                    }

                }
                return MakeExcelFromDataTable(dt, "Security Payroll Labour Tasks Paid Details", null, null);
            }
            ViewBag.Start = start;
            ViewBag.End = end;
            List<SelectListItem> MemberList = new List<SelectListItem>();
            MemberList.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.Technicians, new Guid()).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.MemberList = MemberList;
            return View("_MemberReportPartial");
        }


        public ActionResult ServiceCallReportPartial(string start, string end, bool? GetReport)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(start) && !string.IsNullOrWhiteSpace(end))
                {
                    StartDate = Convert.ToDateTime(start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(end).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetAllServiceCallCommissionReport(StartDate, EndDate);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllServiceCallCommissionReport(StartDate, EndDate);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllServiceCallCommissionReport(null, null);
                    }

                }
                return MakeExcelFromDataTable(dt, "Security Payroll Labour Tasks Paid Details", null, null);
            }
            ViewBag.Start = start;
            ViewBag.End = end;

            List<SelectListItem> servicepersonList = new List<SelectListItem>();
            servicepersonList.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.Technicians, new Guid()).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.ServicePersonList = servicepersonList;
            return View("_ServiceCallReportPartial");
        }

        public ActionResult FollowUpReportPartial(string start, string end, bool? GetReport)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(start) && !string.IsNullOrWhiteSpace(end))
                {
                    StartDate = Convert.ToDateTime(start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(end).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetAllFollowupCommissionReport(StartDate, EndDate);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllFollowupCommissionReport(StartDate, EndDate);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllFollowupCommissionReport(null, null);
                    }

                }
                return MakeExcelFromDataTable(dt, "Security Payroll Labour Tasks Paid Details", null, null);
            }
            ViewBag.Start = start;
            ViewBag.End = end;
            List<SelectListItem> followuppersonList = new List<SelectListItem>();
            followuppersonList.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.Technicians, new Guid()).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.FollowUpPersonList = followuppersonList;

            return View("_FollowUpReportPartial");
        }
        public ActionResult RescheduleReportPartial(string start, string end, bool? GetReport)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(start) && !string.IsNullOrWhiteSpace(end))
                {
                    StartDate = Convert.ToDateTime(start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(end).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetAllRescheduleCommissionReport(StartDate, EndDate);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllRescheduleCommissionReport(StartDate, EndDate);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllRescheduleCommissionReport(null, null);
                    }

                }
                return MakeExcelFromDataTable(dt, "Security Payroll Labour Tasks Paid Details", null, null);
            }
            ViewBag.Start = start;
            ViewBag.End = end;
            List<SelectListItem> RescheduleTech = new List<SelectListItem>();
            RescheduleTech.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.Technicians, new Guid()).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.RescheduleTechList = RescheduleTech;
            return View("_RescheduleReportPertial");
        }
        public ActionResult FundedReportPartial(string start, string end, bool? GetReport)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            ViewBag.BatchNO = _Util.Facade.CommissionFacade.GetLastBatchNo();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(start) && !string.IsNullOrWhiteSpace(end))
                {
                    StartDate = Convert.ToDateTime(start).SetZeroHour();
                    EndDate = Convert.ToDateTime(end).SetMaxHour();
                    dt = _Util.Facade.CustomerFacade.GetAllServiceCallCommissionReport(StartDate, EndDate);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllServiceCallCommissionReport(StartDate, EndDate);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllServiceCallCommissionReport(null, null);
                    }

                }
                return MakeExcelFromDataTable(dt, "Security Payroll Labour Tasks Paid Details", null, null);
            }
            ViewBag.Start = start;
            ViewBag.End = end;
            ViewBag.TicketTypeList = _Util.Facade.LookupFacade.GetLookupByKey("TicketType");
            List<SelectListItem> tickeTypeList = new List<SelectListItem>();
            tickeTypeList.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("TicketType").Where(m => m.DataValue != "-1").Select(x =>
                                      new SelectListItem()
                                      {
                                          Text = x.DisplayText,
                                          Value = x.DataValue.ToString()
                                      }).ToList());
            ViewBag.TicketTypeList = tickeTypeList;
            return View("_FundedReportPartial");
        }
        #region
        public ActionResult FundedBrinksReportPartial(string start, string end)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            ViewBag.Start = start;
            ViewBag.End = end;
            return View("_FundedBrinksReportPartial");
        }
        public ActionResult SalesPay()
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<SelectListItem> SalesPersonList = new List<SelectListItem>();
            List<Employee> EmployeeDropdown = _Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.SalesPerson, new Guid()).ToList();
            if (EmployeeDropdown != null && EmployeeDropdown.Count > 0)
            {
                SalesPersonList.AddRange(EmployeeDropdown.OrderBy(x => x.FirstName).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.FirstName + " " + x.LastName,
                               Value = x.UserId.ToString()
                           }).ToList());
            }
            ViewBag.SalesPersonList = SalesPersonList;
            ViewBag.PayrollBrinksStatus = _Util.Facade.LookupFacade.GetLookupByKey("PayrollBrinksStatus").OrderBy(x => x.DataValue != "-1").ThenBy(x => x.DisplayText).ToList();
            ViewBag.PayrollBrinksFunding = _Util.Facade.LookupFacade.GetLookupByKey("PayrollBrinksFunding").OrderBy(x => x.DataValue != "-1").ThenBy(x => x.DisplayText).ToList();
            return PartialView("_SalesPay");
        }
        public ActionResult SalesPayPartial(PayrollFilterModel filter, string order)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            ViewBag.BatchNO = _Util.Facade.CommissionFacade.GetLastSalesBatchNo();
            DateTime FilterStartDate = filter.StartDate;
            DateTime FilterEndDate = filter.EndDate;
            GlobalSetting glob = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CustomerListPageSize");
            if (glob != null)
            {
                filter.PageSize = Convert.ToInt32(glob.Value);
            }
            else
            {
                filter.PageSize = 10;
            }
            if (filter.PageNo == null || filter.PageNo == 0)
            {
                filter.PageNo = 1;
            }
            bool IsPaid = true;
            if (filter.IsPaid.HasValue && filter.IsPaid.Value == false)
            {
                IsPaid = false;
            }
            ViewBag.IsPaid = IsPaid;

            if (!string.IsNullOrWhiteSpace(filter.SalesPerson))
            {
                string[] splituser = filter.SalesPerson.Split(',');
                if (splituser.Length > 0)
                {
                    filter.SalesPerson = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.PayrollBrinksStatus))
            {
                string[] splitstatus = filter.PayrollBrinksStatus.Split(',');
                if (splitstatus.Length > 0)
                {
                    filter.PayrollBrinksStatus = string.Format("'{0}'", string.Join("','", splitstatus.Select(i => i.Replace("'", "''"))));
                }
            }
            if (filter.GetReport == true)
            {
                DataTable dt;
                if (FilterStartDate != new DateTime() && FilterEndDate != new DateTime())
                {
                    dt = _Util.Facade.PayrollFacade.DownLoadAllPayrollBrinks(FilterStartDate, FilterEndDate, filter.PageNo.Value, filter.PageSize.Value, filter.SearchText, filter.SalesPerson, filter.PayrollBrinksStatus, filter.PayrollBrinksFunding);

                }
                else
                {
                    dt = _Util.Facade.PayrollFacade.DownLoadAllPayrollBrinks(new DateTime(), new DateTime(), filter.PageNo.Value, filter.PageSize.Value, filter.SearchText, filter.SalesPerson, filter.PayrollBrinksStatus, filter.PayrollBrinksFunding);
                }
                return MakeExcelFromDataTable(dt, "SalesPayReport", null, null);
            }
            EmpSalesPayReport model = _Util.Facade.PayrollFacade.GetAllPayrollBrinks(FilterStartDate, FilterEndDate, filter.PageNo.Value, filter.PageSize.Value, filter.SearchText, filter.SalesPerson, order, filter.PayrollBrinksStatus, filter.PayrollBrinksFunding);
            ViewBag.order = filter.order; ;
            if (model.PayrollTotalCount.CountTotal == 0)
            {
                filter.PageNo = 1;
            }

            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;


            if (model.SalesPayList.Count() > 0)
            {
                ViewBag.OutOfNumber = model.PayrollTotalCount.CountTotal;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize.Value);

            return PartialView("_SalesPayPartial", model);
        }
        public ActionResult NetPayDetails(PayrollFilterModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            DateTime FilterStartDate = filter.StartDate;
            DateTime FilterEndDate = filter.EndDate;
            GlobalSetting glob = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CustomerListPageSize");
            if (glob != null)
            {
                filter.PageSize = Convert.ToInt32(glob.Value);
            }
            else
            {
                filter.PageSize = 10;
            }
            if (filter.PageNo == null || filter.PageNo == 0)
            {
                filter.PageNo = 1;
            }
            if (!string.IsNullOrWhiteSpace(filter.PayrollBrinksStatus))
            {
                string[] splitstatus = filter.PayrollBrinksStatus.Split(',');
                if (splitstatus.Length > 0)
                {
                    filter.PayrollBrinksStatus = string.Format("'{0}'", string.Join("','", splitstatus.Select(i => i.Replace("'", "''"))));
                }
            }
            if (filter.GetReport == true)
            {
                DataTable dt;
                if (FilterStartDate != new DateTime() && FilterEndDate != new DateTime())
                {
                    dt = _Util.Facade.PayrollFacade.DownLoadPayrollBrinksBySalesPersonId(FilterStartDate, FilterEndDate, filter.PageNo.Value, filter.PageSize.Value, filter.SearchText, filter.UserId, filter.PayrollBrinksStatus, filter.PayrollBrinksFunding);
                }
                else
                {
                    dt = _Util.Facade.PayrollFacade.DownLoadPayrollBrinksBySalesPersonId(new DateTime(), new DateTime(), filter.PageNo.Value, filter.PageSize.Value, filter.SearchText, filter.UserId, filter.PayrollBrinksStatus, filter.PayrollBrinksFunding);
                }
                return MakeExcelFromDataTable(dt, "NetPayReport", null, null);
            }
            EmpSalesPayReport model = _Util.Facade.PayrollFacade.GetPayrollBrinksBySalesPersonId(FilterStartDate, FilterEndDate, filter.PageNo.Value, filter.PageSize.Value, filter.SearchText, filter.UserId, filter.PayrollBrinksStatus, filter.PayrollBrinksFunding);
            ViewBag.order = filter.order; ;
            if (model.PayrollTotalCount.CountTotal == 0)
            {
                filter.PageNo = 1;
            }

            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;


            if (model.SalesPayList.Count() > 0)
            {
                ViewBag.OutOfNumber = model.PayrollTotalCount.CountTotal;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize.Value);
            model.SalesPersonId = filter.UserId;
            if (filter.UserId != Guid.Empty)
            {
                var EmployeeDetails = _Util.Facade.EmployeeFacade.GetEmployeeByEmployeeId(filter.UserId);
                if (EmployeeDetails != null)
                {
                    model.SalesPersonName = EmployeeDetails.FirstName + " " + EmployeeDetails.LastName;
                }
            }
            return PartialView("_NetPayDetails", model);
        }
        public ActionResult DedudctionDetails(int PayrollBrinksId)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            PayrollBrinks model = new PayrollBrinks();
            if (PayrollBrinksId > 0)
            {
                model = _Util.Facade.PayrollFacade.GetDedudctionDetailsByPayrollBrinksId(PayrollBrinksId);
            }
            return PartialView("_DedudctionDetails", model);
        }
        public ActionResult MakePayrollStatusChange(List<int> CustomerListForStatusChange, string Status)
        {
            bool result = false;
            if (CustomerListForStatusChange.Count > 0 && !string.IsNullOrEmpty(Status))
            {
                foreach (var id in CustomerListForStatusChange)
                {
                    var payrollBrinksDetail = _Util.Facade.PayrollFacade.GetPayrollBrinksById(id);
                    if (payrollBrinksDetail != null)
                    {
                        payrollBrinksDetail.FundingStatus = Status;
                        result = _Util.Facade.PayrollFacade.UpdatePayrollBrinks(payrollBrinksDetail);
                    }
                }
            }
            return Json(new { result = result });
        }
        public ActionResult MakeBrinksFund(PayrollFilterModel filter)
        {
            bool result = false;
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            DateTime FilterStartDate = filter.StartDate;
            DateTime FilterEndDate = filter.EndDate;
            if (!string.IsNullOrWhiteSpace(filter.SalesPerson))
            {
                string[] splituser = filter.SalesPerson.Split(',');
                if (splituser.Length > 0)
                {
                    filter.SalesPerson = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.PayrollBrinksStatus))
            {
                string[] splitstatus = filter.PayrollBrinksStatus.Split(',');
                if (splitstatus.Length > 0)
                {
                    filter.PayrollBrinksStatus = string.Format("'{0}'", string.Join("','", splitstatus.Select(i => i.Replace("'", "''"))));
                }
            }
            result = _Util.Facade.PayrollFacade.UpdatePayrollBrinksFund(FilterStartDate, FilterEndDate, filter.SearchText, filter.SalesPerson, filter.PayrollBrinksStatus, filter.PayrollBrinksFunding);
            return Json(new { result = result });
        }
        public ActionResult PayrollSetting(Guid TermSheetId)
        {
            var TermSheet = _Util.Facade.PayrollFacade.GetPayrollTermSheetByTermSheetId(TermSheetId);
            return PartialView("_PayrollSetting", TermSheet);
        }
        #region Term Sheet
        public ActionResult TermSheet()
        {
            var model = _Util.Facade.PayrollFacade.GetPayrollTermSheetList();
            return PartialView("_TermSheet", model);
        }
        public ActionResult AddPayrollTermSheet(int? Id)
        {
            PayrollTermSheet model = new PayrollTermSheet();
            if (Id.HasValue && Id.Value > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollTermSheetById(Id.Value);
            }
            return PartialView("_AddPayrollTermSheet", model);
        }
        [HttpPost]
        public JsonResult AddPayrollTermSheet(PayrollTermSheet payrollTermSheet)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool result = false;
            PayrollTermSheet model = new PayrollTermSheet();
            if (payrollTermSheet != null && payrollTermSheet.IsBase == true)
            {
                _Util.Facade.PayrollFacade.SetAllTermSheetIsBaseFalse();
            }
            if (payrollTermSheet.Id > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollTermSheetById(payrollTermSheet.Id);
                if (model != null)
                {
                    model.Name = payrollTermSheet.Name;
                    model.IsBase = payrollTermSheet.IsBase;
                    model.LastUpdateBy = CurrentUser.UserId;
                    model.LastUpdateDate = DateTime.Now.UTCCurrentTime();
                    result = _Util.Facade.PayrollFacade.UpdatePayrollTermSheet(model);
                }
            }
            else
            {
                var NewTermSheetId = Guid.NewGuid();
                var BaseTermSheet = _Util.Facade.PayrollFacade.GetBasePayrollTermSheetBy();
                if (BaseTermSheet != null)
                {
                    _Util.Facade.PayrollFacade.CloneBasePayrollTermSheet(BaseTermSheet.TermSheetId, NewTermSheetId, CurrentUser.UserId, DateTime.Now.UTCCurrentTime());
                }
                model = new PayrollTermSheet()
                {
                    TermSheetId = NewTermSheetId,
                    CompanyId = CurrentUser.CompanyId.Value,
                    Name = payrollTermSheet.Name,
                    IsBase = payrollTermSheet.IsBase,
                    IsActive = true,
                    CreatedBy = CurrentUser.UserId,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    LastUpdateBy = Guid.Empty
                };
                result = _Util.Facade.PayrollFacade.InsertPayrollTermSheet(model) > 0;
            }
            return Json(new { result = result });
        }
        public JsonResult DeletePayrollTermSheet(int Id)
        {
            bool result = false;
            if (Id > 0)
            {
                result = _Util.Facade.PayrollFacade.DeletePayrollTermSheet(Id);
            }
            return Json(new { result = result });
        }
        #endregion
        #region SingleSettings
        public ActionResult SingleSettings(Guid TermSheetId)
        {
            ViewBag.TermSheetId = TermSheetId;
            var model = _Util.Facade.PayrollFacade.GetPayrollSingleItemSettingsList(TermSheetId);
            return PartialView("_SingleSettings", model);
        }
        public ActionResult AddPayrollSingleItemSettings(int? Id)
        {
            PayrollSingleItemSettings model = new PayrollSingleItemSettings();
            if (Id.HasValue && Id.Value > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollSingleItemSettingsById(Id.Value);
            }
            return PartialView("_AddPayrollSingleItemSettings", model);
        }
        [HttpPost]
        public JsonResult AddPayrollSingleItemSettings(PayrollSingleItemSettings payrollSingleItemSettings)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool result = false;
            PayrollSingleItemSettings model = new PayrollSingleItemSettings();
            if (payrollSingleItemSettings.Id > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollSingleItemSettingsById(payrollSingleItemSettings.Id);
                if (model != null)
                {
                    model.SearchKey = payrollSingleItemSettings.SearchKey;
                    model.SearchValue = payrollSingleItemSettings.SearchValue;
                    model.LastUpdateBy = CurrentUser.UserId;
                    model.LastUpdateDate = DateTime.Now.UTCCurrentTime();
                    result = _Util.Facade.PayrollFacade.UpdatePayrollSingleItemSettings(model);
                }
            }
            else
            {
                model = new PayrollSingleItemSettings()
                {
                    SingleItemSettingsId = Guid.NewGuid(),
                    TermSheetId = payrollSingleItemSettings.TermSheetId,
                    CompanyId = CurrentUser.CompanyId.Value,
                    SearchKey = payrollSingleItemSettings.SearchKey,
                    SearchValue = payrollSingleItemSettings.SearchValue,
                    IsActive = true,
                    CreatedBy = CurrentUser.UserId,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    LastUpdateBy = Guid.Empty
                };
                result = _Util.Facade.PayrollFacade.InsertPayrollSingleItemSettings(model) > 0;
            }
            return Json(new { result = result });
        }
        public JsonResult DeletePayrollSingleItemSettings(int Id)
        {
            bool result = false;
            if (Id > 0)
            {
                result = _Util.Facade.PayrollFacade.DeletePayrollSingleItemSettings(Id);
            }
            return Json(new { result = result });
        }
        #endregion
        #region Customer Billing Method
        public ActionResult BaseMultiple(Guid TermSheetId)
        {
            ViewBag.TermSheetId = TermSheetId;
            var model = _Util.Facade.PayrollFacade.GetPayrollBaseMultipleList(TermSheetId);
            return PartialView("_BaseMultiple", model);
        }
        public ActionResult AddPayrollBaseMultiple(int? Id)
        {
            ViewBag.PayrollBaseMultiple = _Util.Facade.LookupFacade.GetLookupByKey("PayrollBaseMultiple").OrderBy(x => x.DataValue != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            PayrollBaseMultiple model = new PayrollBaseMultiple();
            if (Id.HasValue && Id.Value > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollBaseMultipleById(Id.Value);
            }
            return PartialView("_AddPayrollBaseMultiple", model);
        }
        [HttpPost]
        public JsonResult AddPayrollBaseMultiple(PayrollBaseMultiple payrollBaseMultiple)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool result = false;
            PayrollBaseMultiple model = new PayrollBaseMultiple();
            if (payrollBaseMultiple.Id > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollBaseMultipleById(payrollBaseMultiple.Id);
                if (model != null)
                {
                    model.PayrollBaseMultipleId = payrollBaseMultiple.PayrollBaseMultipleId;
                    model.Amount = payrollBaseMultiple.Amount;
                    model.LastUpdateBy = CurrentUser.UserId;
                    model.LastUpdateDate = DateTime.Now.UTCCurrentTime();
                    result = _Util.Facade.PayrollFacade.UpdatePayrollBaseMultiple(model);
                }
            }
            else
            {
                model = new PayrollBaseMultiple()
                {
                    PayrollBaseMultipleId = Guid.NewGuid(),
                    TermSheetId = payrollBaseMultiple.TermSheetId,
                    CompanyId = CurrentUser.CompanyId.Value,
                    BaseMultiple = payrollBaseMultiple.BaseMultiple,
                    Amount = payrollBaseMultiple.Amount,
                    CreatedBy = CurrentUser.UserId,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    LastUpdateBy = Guid.Empty
                };
                result = _Util.Facade.PayrollFacade.InsertPayrollBaseMultiple(model) > 0;
            }
            return Json(new { result = result });
        }
        public JsonResult DeletePayrollBaseMultiple(int Id)
        {
            bool result = false;
            if (Id > 0)
            {
                result = _Util.Facade.PayrollFacade.DeletePayrollBaseMultiple(Id);
            }
            return Json(new { result = result });
        }
        #endregion
        #region Customer Billing Method
        public ActionResult CustomerBillingMethod(Guid TermSheetId)
        {
            ViewBag.TermSheetId = TermSheetId;
            var model = _Util.Facade.PayrollFacade.GetPayrollCustomerBillingMethodList(TermSheetId);
            return PartialView("_CustomerBillingMethod", model);
        }
        public ActionResult AddPayrollCustomerBillingMethod(int? Id)
        {
            ViewBag.PayrollBillingMethod = _Util.Facade.LookupFacade.GetLookupByKey("PayrollCustomerBillingMethod").OrderBy(x => x.DataValue != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            PayrollCustomerBillingMethod model = new PayrollCustomerBillingMethod();
            if (Id.HasValue && Id.Value > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollCustomerBillingMethodById(Id.Value);
            }
            return PartialView("_AddPayrollCustomerBillingMethod", model);
        }
        [HttpPost]
        public JsonResult AddPayrollCustomerBillingMethod(PayrollCustomerBillingMethod payrollCustomerBillingMethod)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool result = false;
            PayrollCustomerBillingMethod model = new PayrollCustomerBillingMethod();
            if (payrollCustomerBillingMethod.Id > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollCustomerBillingMethodById(payrollCustomerBillingMethod.Id);
                if (model != null)
                {
                    model.BillingMethod = payrollCustomerBillingMethod.BillingMethod;
                    model.Point = payrollCustomerBillingMethod.Point;
                    model.LastUpdateBy = CurrentUser.UserId;
                    model.LastUpdateDate = DateTime.Now.UTCCurrentTime();
                    result = _Util.Facade.PayrollFacade.UpdatePayrollCustomerBillingMethod(model);
                }
            }
            else
            {
                model = new PayrollCustomerBillingMethod()
                {
                    PayrollCustomerBillingMethodId = Guid.NewGuid(),
                    TermSheetId = payrollCustomerBillingMethod.TermSheetId,
                    CompanyId = CurrentUser.CompanyId.Value,
                    BillingMethod = payrollCustomerBillingMethod.BillingMethod,
                    Point = payrollCustomerBillingMethod.Point,
                    CreatedBy = CurrentUser.UserId,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    LastUpdateBy = Guid.Empty
                };
                result = _Util.Facade.PayrollFacade.InsertPayrollCustomerBillingMethod(model) > 0;
            }
            return Json(new { result = result });
        }
        public JsonResult DeletePayrollCustomerBillingMethod(int Id)
        {
            bool result = false;
            if (Id > 0)
            {
                result = _Util.Facade.PayrollFacade.DeletePayrollCustomerBillingMethod(Id);
            }
            return Json(new { result = result });
        }
        #endregion
        #region Monthly Production Bonus
        public ActionResult MonthlyProductionBonus(Guid TermSheetId)
        {
            ViewBag.TermSheetId = TermSheetId;
            var model = _Util.Facade.PayrollFacade.GetPayrollMonthlyProductionBonusList(TermSheetId);
            return PartialView("_MonthlyProductionBonus", model);
        }
        public ActionResult AddPayrollMonthlyProductionBonus(int? Id)
        {
            PayrollMonthlyProductionBonus model = new PayrollMonthlyProductionBonus();
            if (Id.HasValue && Id.Value > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollMonthlyProductionBonusById(Id.Value);
            }
            return PartialView("_AddPayrollMonthlyProductionBonus", model);
        }
        [HttpPost]
        public JsonResult AddPayrollMonthlyProductionBonus(PayrollMonthlyProductionBonus payrollMonthlyProductionBonus)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool result = false;
            PayrollMonthlyProductionBonus model = new PayrollMonthlyProductionBonus();
            if (payrollMonthlyProductionBonus.Id > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollMonthlyProductionBonusById(payrollMonthlyProductionBonus.Id);
                if (model != null)
                {
                    model.MonthlyProductionBonusMin = payrollMonthlyProductionBonus.MonthlyProductionBonusMin;
                    model.MonthlyProductionBonusMax = payrollMonthlyProductionBonus.MonthlyProductionBonusMax;
                    model.Point = payrollMonthlyProductionBonus.Point;
                    model.LastUpdateBy = CurrentUser.UserId;
                    model.LastUpdateDate = DateTime.Now.UTCCurrentTime();
                    result = _Util.Facade.PayrollFacade.UpdatePayrollMonthlyProductionBonus(model);
                }
            }
            else
            {
                model = new PayrollMonthlyProductionBonus()
                {
                    PayrollMonthlyProductionBonusId = Guid.NewGuid(),
                    TermSheetId = payrollMonthlyProductionBonus.TermSheetId,
                    CompanyId = CurrentUser.CompanyId.Value,
                    MonthlyProductionBonusMin = payrollMonthlyProductionBonus.MonthlyProductionBonusMin,
                    MonthlyProductionBonusMax = payrollMonthlyProductionBonus.MonthlyProductionBonusMax,
                    Point = payrollMonthlyProductionBonus.Point,
                    CreatedBy = CurrentUser.UserId,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    LastUpdateBy = Guid.Empty
                };
                result = _Util.Facade.PayrollFacade.InsertPayrollMonthlyProductionBonus(model) > 0;
            }
            return Json(new { result = result });
        }
        public JsonResult DeletePayrollMonthlyProductionBonus(int Id)
        {
            bool result = false;
            if (Id > 0)
            {
                result = _Util.Facade.PayrollFacade.DeletePayrollMonthlyProductionBonus(Id);
            }
            return Json(new { result = result });
        }
        #endregion
        #region Credit Rating
        public ActionResult CreditRating(Guid TermSheetId)
        {
            ViewBag.TermSheetId = TermSheetId;
            var model = _Util.Facade.PayrollFacade.GetPayrollCreditRatingList(TermSheetId);
            return PartialView("_CreditRating", model);
        }
        public ActionResult AddPayrollCreditRating(int? Id)
        {
            PayrollCreditRating model = new PayrollCreditRating();
            if (Id.HasValue && Id.Value > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollCreditRatingById(Id.Value);
            }
            return PartialView("_AddPayrollCreditRating", model);
        }
        [HttpPost]
        public JsonResult AddPayrollCreditRating(PayrollCreditRating payrollCreditRating)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool result = false;
            PayrollCreditRating model = new PayrollCreditRating();
            if (payrollCreditRating.Id > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollCreditRatingById(payrollCreditRating.Id);
                if (model != null)
                {
                    model.MinCredit = payrollCreditRating.MinCredit;
                    model.MaxCredit = payrollCreditRating.MaxCredit;
                    model.Point = payrollCreditRating.Point;
                    model.ACHBonusWaived = payrollCreditRating.ACHBonusWaived;
                    model.LastUpdateBy = CurrentUser.UserId;
                    model.LastUpdateDate = DateTime.Now.UTCCurrentTime();
                    result = _Util.Facade.PayrollFacade.UpdatePayrollCreditRating(model);
                }
            }
            else
            {
                model = new PayrollCreditRating()
                {
                    PayrollCreditRatingId = Guid.NewGuid(),
                    TermSheetId = payrollCreditRating.TermSheetId,
                    CompanyId = CurrentUser.CompanyId.Value,
                    MinCredit = payrollCreditRating.MinCredit,
                    MaxCredit = payrollCreditRating.MaxCredit,
                    Point = payrollCreditRating.Point,
                    ACHBonusWaived = payrollCreditRating.ACHBonusWaived,
                    CreatedBy = CurrentUser.UserId,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    LastUpdateBy = Guid.Empty
                };
                result = _Util.Facade.PayrollFacade.InsertPayrollCreditRating(model) > 0;
            }
            return Json(new { result = result });
        }
        public JsonResult DeletePayrollCreditRating(int Id)
        {
            bool result = false;
            if (Id > 0)
            {
                result = _Util.Facade.PayrollFacade.DeletePayrollCreditRating(Id);
            }
            return Json(new { result = result });
        }
        #endregion
        #region Customer Type
        public ActionResult CustomerType(Guid TermSheetId)
        {
            ViewBag.TermSheetId = TermSheetId;
            var model = _Util.Facade.PayrollFacade.GetPayrollCustomerTypeList(TermSheetId);
            return PartialView("_CustomerType", model);
        }
        public ActionResult AddPayrollCustomerType(int? Id)
        {
            ViewBag.PayrollCustomerType = _Util.Facade.LookupFacade.GetLookupByKey("CustomerType").OrderBy(x => x.DataValue != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            PayrollCustomerType model = new PayrollCustomerType();
            if (Id.HasValue && Id.Value > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollCustomerTypeById(Id.Value);
            }
            return PartialView("_AddPayrollCustomerType", model);
        }
        [HttpPost]
        public JsonResult AddPayrollCustomerType(PayrollCustomerType payrollCustomerType)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool result = false;
            PayrollCustomerType model = new PayrollCustomerType();
            if (payrollCustomerType.Id > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollCustomerTypeById(payrollCustomerType.Id);
                if (model != null)
                {
                    model.CustomerType = payrollCustomerType.CustomerType;
                    model.Point = payrollCustomerType.Point;
                    model.LastUpdateBy = CurrentUser.UserId;
                    model.LastUpdateDate = DateTime.Now.UTCCurrentTime();
                    result = _Util.Facade.PayrollFacade.UpdatePayrollCustomerType(model);
                }
            }
            else
            {
                model = new PayrollCustomerType()
                {
                    PayrollCustomerTypeId = Guid.NewGuid(),
                    TermSheetId = payrollCustomerType.TermSheetId,
                    CompanyId = CurrentUser.CompanyId.Value,
                    CustomerType = payrollCustomerType.CustomerType,
                    Point = payrollCustomerType.Point,
                    CreatedBy = CurrentUser.UserId,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    LastUpdateBy = Guid.Empty
                };
                result = _Util.Facade.PayrollFacade.InsertPayrollCustomerType(model) > 0;
            }
            return Json(new { result = result });
        }
        public JsonResult DeletePayrollCustomerType(int Id)
        {
            bool result = false;
            if (Id > 0)
            {
                result = _Util.Facade.PayrollFacade.DeletePayrollCustomerType(Id);
            }
            return Json(new { result = result });
        }
        #endregion
        #region Agreement Length
        public ActionResult AgreementLength(Guid TermSheetId)
        {
            ViewBag.TermSheetId = TermSheetId;
            var model = _Util.Facade.PayrollFacade.GetPayrollAgreementLengthList(TermSheetId);
            return PartialView("_AgreementLength", model);
        }
        public ActionResult AddPayrollAgreementLength(int? Id)
        {
            ViewBag.PayrollAgreementLength = _Util.Facade.LookupFacade.GetLookupByKey("ContractTerm").OrderBy(x => x.DataValue != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            PayrollAgreementLength model = new PayrollAgreementLength();
            if (Id.HasValue && Id.Value > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollAgreementLengthById(Id.Value);
            }
            return PartialView("_AddPayrollAgreementLength", model);
        }
        [HttpPost]
        public JsonResult AddPayrollAgreementLength(PayrollAgreementLength payrollAgreementLength)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool result = false;
            PayrollAgreementLength model = new PayrollAgreementLength();
            if (payrollAgreementLength.Id > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollAgreementLengthById(payrollAgreementLength.Id);
                if (model != null)
                {
                    model.AgreementLength = payrollAgreementLength.AgreementLength;
                    model.Point = payrollAgreementLength.Point;
                    model.LastUpdateBy = CurrentUser.UserId;
                    model.LastUpdateDate = DateTime.Now.UTCCurrentTime();
                    result = _Util.Facade.PayrollFacade.UpdatePayrollAgreementLength(model);
                }
            }
            else
            {
                model = new PayrollAgreementLength()
                {
                    PayrollAgreementLengthId = Guid.NewGuid(),
                    TermSheetId = payrollAgreementLength.TermSheetId,
                    CompanyId = CurrentUser.CompanyId.Value,
                    AgreementLength = payrollAgreementLength.AgreementLength,
                    Point = payrollAgreementLength.Point,
                    CreatedBy = CurrentUser.UserId,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    LastUpdateBy = Guid.Empty
                };
                result = _Util.Facade.PayrollFacade.InsertPayrollAgreementLength(model) > 0;
            }
            return Json(new { result = result });
        }
        public JsonResult DeletePayrollAgreementLength(int Id)
        {
            bool result = false;
            if (Id > 0)
            {
                result = _Util.Facade.PayrollFacade.DeletePayrollAgreementLength(Id);
            }
            return Json(new { result = result });
        }
        #endregion
        #region Pass Thrus
        public ActionResult PassThrus(Guid TermSheetId)
        {
            ViewBag.TermSheetId = TermSheetId;
            var model = _Util.Facade.PayrollFacade.GetPayrollPassThrusList(TermSheetId);
            return PartialView("_PassThrus", model);
        }
        public ActionResult AddPayrollPassThrus(int? Id)
        {
            ViewBag.PayrollPassThrus = _Util.Facade.LookupFacade.GetLookupByKey("PayrollPassThrus").OrderBy(x => x.DataValue != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            PayrollPassThrus model = new PayrollPassThrus();
            if (Id.HasValue && Id.Value > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollPassThrusById(Id.Value);
            }
            return PartialView("_AddPayrollPassThrus", model);
        }
        [HttpPost]
        public JsonResult AddPayrollPassThrus(PayrollPassThrus payrollPassThrus)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool result = false;
            PayrollPassThrus model = new PayrollPassThrus();
            if (payrollPassThrus.Id > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollPassThrusById(payrollPassThrus.Id);
                if (model != null)
                {
                    model.PassThrus = payrollPassThrus.PassThrus;
                    model.Amount = payrollPassThrus.Amount;
                    model.IsBase = payrollPassThrus.IsBase;
                    model.LastUpdateBy = CurrentUser.UserId;
                    model.LastUpdateDate = DateTime.Now.UTCCurrentTime();
                    result = _Util.Facade.PayrollFacade.UpdatePayrollPassThrus(model);
                }
            }
            else
            {
                model = new PayrollPassThrus()
                {
                    PayrollPassThrusId = Guid.NewGuid(),
                    TermSheetId = payrollPassThrus.TermSheetId,
                    CompanyId = CurrentUser.CompanyId.Value,
                    PassThrus = payrollPassThrus.PassThrus,
                    Amount = payrollPassThrus.Amount,
                    IsBase = payrollPassThrus.IsBase,
                    CreatedBy = CurrentUser.UserId,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    LastUpdateBy = Guid.Empty
                };
                result = _Util.Facade.PayrollFacade.InsertPayrollPassThrus(model) > 0;
            }
            return Json(new { result = result });
        }
        public JsonResult DeletePayrollPassThrus(int Id)
        {
            bool result = false;
            if (Id > 0)
            {
                result = _Util.Facade.PayrollFacade.DeletePayrollPassThrus(Id);
            }
            return Json(new { result = result });
        }
        #endregion
        #region Installation Fee
        public ActionResult InstallationFee(Guid TermSheetId)
        {
            ViewBag.TermSheetId = TermSheetId;
            var model = _Util.Facade.PayrollFacade.GetPayrollInstallationFeeList(TermSheetId);
            return PartialView("_InstallationFee", model);
        }
        public ActionResult AddPayrollInstallationFee(int? Id)
        {
            PayrollInstallationFee model = new PayrollInstallationFee();
            if (Id.HasValue && Id.Value > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollInstallationFeeById(Id.Value);
            }
            return PartialView("_AddPayrollInstallationFee", model);
        }
        [HttpPost]
        public JsonResult AddPayrollInstallationFee(PayrollInstallationFee payrollInstallationFee)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool result = false;
            PayrollInstallationFee model = new PayrollInstallationFee();
            if (payrollInstallationFee.Id > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollInstallationFeeById(payrollInstallationFee.Id);
                if (model != null)
                {
                    model.InstallationFeeMin = payrollInstallationFee.InstallationFeeMin;
                    model.InstallationFeeMax = payrollInstallationFee.InstallationFeeMax;
                    model.Amount = payrollInstallationFee.Amount;
                    model.LastUpdateBy = CurrentUser.UserId;
                    model.LastUpdateDate = DateTime.Now.UTCCurrentTime();
                    result = _Util.Facade.PayrollFacade.UpdatePayrollInstallationFee(model);
                }
            }
            else
            {
                model = new PayrollInstallationFee()
                {
                    PayrollInstallationFeeId = Guid.NewGuid(),
                    TermSheetId = payrollInstallationFee.TermSheetId,
                    CompanyId = CurrentUser.CompanyId.Value,
                    InstallationFeeMin = payrollInstallationFee.InstallationFeeMin,
                    InstallationFeeMax = payrollInstallationFee.InstallationFeeMax,
                    Amount = payrollInstallationFee.Amount,
                    CreatedBy = CurrentUser.UserId,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    LastUpdateBy = Guid.Empty
                };
                result = _Util.Facade.PayrollFacade.InsertPayrollInstallationFee(model) > 0;
            }
            return Json(new { result = result });
        }
        public JsonResult DeletePayrollInstallationFee(int Id)
        {
            bool result = false;
            if (Id > 0)
            {
                result = _Util.Facade.PayrollFacade.DeletePayrollInstallationFee(Id);
            }
            return Json(new { result = result });
        }
        #endregion
        #region Hold Back
        public ActionResult HoldBack(Guid TermSheetId)
        {
            ViewBag.TermSheetId = TermSheetId;
            var model = _Util.Facade.PayrollFacade.GetPayrollHoldBackList(TermSheetId);
            return PartialView("_HoldBack", model);
        }
        public ActionResult AddPayrollHoldBack(int? Id)
        {
            ViewBag.PayrollHoldBack = _Util.Facade.LookupFacade.GetLookupByKey("PayrollHoldBack").OrderBy(x => x.DataValue != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            ViewBag.PayrollHoldBackType = _Util.Facade.LookupFacade.GetLookupByKey("PayrollHoldBackType").OrderBy(x => x.DataValue != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            PayrollHoldBack model = new PayrollHoldBack();
            if (Id.HasValue && Id.Value > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollHoldBackById(Id.Value);
            }
            return PartialView("_AddPayrollHoldBack", model);
        }
        [HttpPost]
        public JsonResult AddPayrollHoldBack(PayrollHoldBack payrollHoldBack)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool result = false;
            PayrollHoldBack model = new PayrollHoldBack();
            if (payrollHoldBack.Id > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollHoldBackById(payrollHoldBack.Id);
                if (model != null)
                {
                    model.HoldBack = payrollHoldBack.HoldBack;
                    model.Type = payrollHoldBack.Type;
                    model.Percentage = payrollHoldBack.Percentage;
                    model.LastUpdateBy = CurrentUser.UserId;
                    model.LastUpdateDate = DateTime.Now.UTCCurrentTime();
                    result = _Util.Facade.PayrollFacade.UpdatePayrollHoldBack(model);
                }
            }
            else
            {
                model = new PayrollHoldBack()
                {
                    PayrollHoldBackId = Guid.NewGuid(),
                    TermSheetId = payrollHoldBack.TermSheetId,
                    CompanyId = CurrentUser.CompanyId.Value,
                    HoldBack = payrollHoldBack.HoldBack,
                    Type = payrollHoldBack.Type,
                    Percentage = payrollHoldBack.Percentage,
                    CreatedBy = CurrentUser.UserId,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    LastUpdateBy = Guid.Empty
                };
                result = _Util.Facade.PayrollFacade.InsertPayrollHoldBack(model) > 0;
            }
            return Json(new { result = result });
        }
        public JsonResult DeletePayrollHoldBack(int Id)
        {
            bool result = false;
            if (Id > 0)
            {
                result = _Util.Facade.PayrollFacade.DeletePayrollHoldBack(Id);
            }
            return Json(new { result = result });
        }
        #endregion
        #region Term Sheet Manager
        public ActionResult TermSheetManager(Guid TermSheetId)
        {
            ViewBag.TermSheetId = TermSheetId;
            var model = _Util.Facade.PayrollFacade.GetPayrollTermSheetManagerList(TermSheetId);
            return PartialView("_TermSheetManager", model);
        }
        public ActionResult AddPayrollTermSheetManager(int? Id)
        {
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            List<SelectListItem> EmployeeList = new List<SelectListItem>();
            EmployeeList.Add(new SelectListItem()
            {
                Text = "Please Select",
                Value = "-1"
            });
            EmployeeList.AddRange(_Util.Facade.EmployeeFacade.GetAllEmployeeByCompanyId(CurrentLoggedInUser.CompanyId.Value).Select(x =>
                                  new SelectListItem()
                                  {
                                      Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                                      Value = x.UserId.ToString()
                                  }).ToList());
            ViewBag.EmployeeList = EmployeeList;

            ViewBag.ManagerValueType = _Util.Facade.LookupFacade.GetLookupByKey("ManagerValueType").OrderBy(x => x.DataValue != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            PayrollTermSheetManager model = new PayrollTermSheetManager();
            if (Id.HasValue && Id.Value > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollTermSheetManagerById(Id.Value);
            }
            return PartialView("_AddPayrollTermSheetManager", model);
        }
        [HttpPost]
        public JsonResult AddPayrollTermSheetManager(PayrollTermSheetManager payrollTermSheetManager)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool result = false;
            PayrollTermSheetManager model = new PayrollTermSheetManager();
            if (payrollTermSheetManager.Id > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollTermSheetManagerById(payrollTermSheetManager.Id);
                if (model != null)
                {
                    model.ManagerId = payrollTermSheetManager.ManagerId;
                    model.Type = payrollTermSheetManager.Type;
                    model.Value = payrollTermSheetManager.Value;
                    model.LastUpdateBy = CurrentUser.UserId;
                    model.LastUpdateDate = DateTime.Now.UTCCurrentTime();
                    result = _Util.Facade.PayrollFacade.UpdatePayrollTermSheetManager(model);
                }
            }
            else
            {
                model = new PayrollTermSheetManager()
                {
                    PayrollTermSheetManagerId = Guid.NewGuid(),
                    TermSheetId = payrollTermSheetManager.TermSheetId,
                    CompanyId = CurrentUser.CompanyId.Value,
                    ManagerId = payrollTermSheetManager.ManagerId,
                    Type = payrollTermSheetManager.Type,
                    Value = payrollTermSheetManager.Value,
                    CreatedBy = CurrentUser.UserId,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    LastUpdateBy = Guid.Empty
                };
                result = _Util.Facade.PayrollFacade.InsertPayrollTermSheetManager(model) > 0;
            }
            return Json(new { result = result });
        }
        public JsonResult DeletePayrollTermSheetManager(int Id)
        {
            bool result = false;
            if (Id > 0)
            {
                result = _Util.Facade.PayrollFacade.DeletePayrollTermSheetManager(Id);
            }
            return Json(new { result = result });
        }
        #endregion
        #region Admin Fee
        public ActionResult AdminFee(Guid TermSheetId)
        {
            ViewBag.TermSheetId = TermSheetId;
            var model = _Util.Facade.PayrollFacade.GetPayrollAdminFeeList(TermSheetId);
            return PartialView("_AdminFee", model);
        }
        public ActionResult AddPayrollAdminFee(int? Id)
        {
            ViewBag.PayrollAdminFee = _Util.Facade.LookupFacade.GetLookupByKey("PayrollAdminFee").OrderBy(x => x.DataValue != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            PayrollAdminFee model = new PayrollAdminFee();
            if (Id.HasValue && Id.Value > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollAdminFeeById(Id.Value);
            }
            return PartialView("_AddPayrollAdminFee", model);
        }
        [HttpPost]
        public JsonResult AddPayrollAdminFee(PayrollAdminFee payrollAdminFee)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool result = false;
            PayrollAdminFee model = new PayrollAdminFee();
            if (payrollAdminFee.Id > 0)
            {
                model = _Util.Facade.PayrollFacade.GetPayrollAdminFeeById(payrollAdminFee.Id);
                if (model != null)
                {
                    model.AdminFee = payrollAdminFee.AdminFee;
                    model.Amount = payrollAdminFee.Amount;
                    model.LastUpdateBy = CurrentUser.UserId;
                    model.LastUpdateDate = DateTime.Now.UTCCurrentTime();
                    result = _Util.Facade.PayrollFacade.UpdatePayrollAdminFee(model);
                }
            }
            else
            {
                model = new PayrollAdminFee()
                {
                    PayrollAdminFeeId = Guid.NewGuid(),
                    TermSheetId = payrollAdminFee.TermSheetId,
                    CompanyId = CurrentUser.CompanyId.Value,
                    AdminFee = payrollAdminFee.AdminFee,
                    Amount = payrollAdminFee.Amount,
                    CreatedBy = CurrentUser.UserId,
                    CreatedDate = DateTime.Now.UTCCurrentTime(),
                    LastUpdateBy = Guid.Empty
                };
                result = _Util.Facade.PayrollFacade.InsertPayrollAdminFee(model) > 0;
            }
            return Json(new { result = result });
        }
        public JsonResult DeletePayrollAdminFee(int Id)
        {
            bool result = false;
            if (Id > 0)
            {
                result = _Util.Facade.PayrollFacade.DeletePayrollAdminFee(Id);
            }
            return Json(new { result = result });
        }
        #endregion
        #endregion
        public ActionResult UserPaymentPartial(string start, string end, bool? GetReport)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(start) && !string.IsNullOrWhiteSpace(end))
                {
                    StartDate = Convert.ToDateTime(start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(end).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetAllServiceCallCommissionReport(StartDate, EndDate);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllServiceCallCommissionReport(StartDate, EndDate);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllServiceCallCommissionReport(null, null);
                    }

                }
                return MakeExcelFromDataTable(dt, "Security Payroll Labour Tasks Paid Details", null, null);
            }
            List<SelectListItem> EmployeeNameList = new List<SelectListItem>();
            EmployeeNameList.Add(new SelectListItem()
            {
                Text = "Please Select One",
                Value = "-1"
            });
            EmployeeNameList.AddRange(_Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList().Select(x =>
                                  new SelectListItem()
                                  {
                                      Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                                      Value = x.UserId.ToString()
                                  }).ToList());
            ViewBag.EmployeeNameList = EmployeeNameList;

            List<SelectListItem> UserGroupList = new List<SelectListItem>();
            UserGroupList.Add(new SelectListItem
            {
                Text = "Select One",
                Value = "-1",
                Selected = true
            });
            UserGroupList.AddRange(_Util.Facade.UserLoginFacade.GetAllPermissionGroup(CurrentUser.CompanyId.Value).OrderBy(x => x.Id.ToString() != "-1").ThenBy(x => string.Format("{0}", x.Name)).Select(x => new SelectListItem()
            {
                Text = string.Format("{0}", x.Name),
                Value = x.Id.ToString()
                //Selected = UserGroup == x.Id
            }).ToList());
            //UserGroupList.Add(new SelectListItem()
            //{
            //    Text = "Deleted",
            //    Value = "404"
            //    //Selected = UserGroup == 404
            //});
            //ViewBag.LeadUserList = SalesList;
            ViewBag.UserGroupList = UserGroupList;

            ViewBag.TicketType = _Util.Facade.LookupFacade.GetLookupByKey("TicketType").OrderBy(x => x.DataValue != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();

            ViewBag.Start = start;
            ViewBag.End = end;
            return View("_UserPaymentPartial");
        }
        [Authorize]
        public ActionResult LoadPayrollReportList(PayrollFilterModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            DateTime FilterStartDate = filter.StartDate;
            DateTime FilterEndDate = filter.EndDate;

            GlobalSetting glob = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CustomerListPageSize");
            if (glob != null)
            {
                filter.PageSize = Convert.ToInt32(glob.Value);
            }
            else
            {
                filter.PageSize = 10;
            }
            if (filter.PageNo == null || filter.PageNo == 0)
            {
                filter.PageNo = 1;
            }
            EmployeePayrollReport model = _Util.Facade.EmployeeFacade.GetAllEmpPayrollReport(CurrentUser.UserId, FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value);
            ViewBag.order = filter.order; ;
            if (model.PayrollTotalCount.CountTotal == 0)
            {
                filter.PageNo = 1;
            }

            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;


            if (model.PayrollReportList.Count() > 0)
            {
                ViewBag.OutOfNumber = model.PayrollTotalCount.CountTotal;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize.Value);

            return View(model.PayrollReportList);
        }

        [Authorize]
        public ActionResult LoadJobsReportPartial(PayrollFilterModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            DateTime StartDate = filter.StartDate;
            DateTime EndDate = filter.EndDate;
            string newCookie = "";

            List<string> bsource = new List<string>();
            if (!string.IsNullOrWhiteSpace(filter.BookingSource))
            {
                string[] splituser = filter.BookingSource.Split(',');
                if (splituser.Length > 0)
                {
                    filter.BookingSource = string.Format("'{0}'", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        bsource.Add(item);
                    }
                }
            }
            GlobalSetting glob = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CustomerListPageSize");
            if (glob != null)
            {
                filter.PageSize = Convert.ToInt32(glob.Value);
            }
            else
            {
                filter.PageSize = 10;
            }
            if (filter.PageNo == null || filter.PageNo == 0)
            {
                filter.PageNo = 1;
            }
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (filter.GetReport == true)
            {
                DataTable dt;
                dt = _Util.Facade.BookingFacade.GetJobReportExport(StartDate, EndDate, filter.order, false, filter.BookingSource);
                return MakeExcelFromDataTable(dt, "JobReport", null, null);
            }
            EmployeeJobsReport model = _Util.Facade.BookingFacade.GetAllBookingListForReport(StartDate, EndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, false, filter.BookingSource);
            if (model.JobReportList != null)
            {
                ViewBag.order = filter.order;
                if (ViewBag.order == null)
                {
                    ViewBag.order = 0;
                }
                if (model.PayrollTotalCount.CountTotal == 0)
                {
                    filter.PageNo = 1;
                }

                ViewBag.PageNumber = filter.PageNo;
                ViewBag.OutOfNumber = 0;
                ViewBag.TotalOnline = model.TotalOnlineJobsCount.TotalOnlineBooking;
                ViewBag.TotalSystem = model.TotalSystemJobsCount.TotalSystemBooking;
                ViewBag.TotalAmount = model.TotalAmount.Amount;
                if (model.JobReportList.Count() > 0)
                {
                    ViewBag.OutOfNumber = model.PayrollTotalCount.CountTotal;
                }

                if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
                {
                    ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
                }
                else
                {
                    ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
                }
                ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize.Value);
            }
            ViewBag.bsource = bsource;
            return View(model.JobReportList);
        }

        [Authorize]
        public ActionResult LoadConversionReportPartial(PayrollFilterModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            DateTime StartDate = filter.StartDate;
            DateTime EndDate = filter.EndDate;
            string newCookie = "";
            GlobalSetting glob = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CustomerListPageSize");
            if (glob != null)
            {
                filter.PageSize = Convert.ToInt32(glob.Value);
            }
            else
            {
                filter.PageSize = 10;
            }
            if (filter.PageNo == null || filter.PageNo == 0)
            {
                filter.PageNo = 1;
            }
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            EmployeeConversionReport model = _Util.Facade.CustomerFacade.GetAllConversionListForReport(StartDate, EndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, false);
            if (model.ConversionReportList != null)
            {
                ViewBag.order = filter.order;
                if (ViewBag.order == null)
                {
                    ViewBag.order = 0;
                }
                if (model.PayrollTotalCount.CountTotal == 0)
                {
                    filter.PageNo = 1;
                }

                ViewBag.PageNumber = filter.PageNo;
                ViewBag.OutOfNumber = 0;


                if (model.ConversionReportList.Count() > 0)
                {
                    ViewBag.OutOfNumber = model.PayrollTotalCount.CountTotal;
                }

                if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
                {
                    ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
                }
                else
                {
                    ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
                }
                ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize.Value);
            }
            return View(model.ConversionReportList);
        }
        public ActionResult OpenCAEPoint(Guid ticketId, Guid UserId, bool withNonCommission, string Type, int CommissionIntId)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<CustomerAppointmentEquipment> caeModel = new List<CustomerAppointmentEquipment>();
            caeModel = _Util.Facade.CustomerAppoinmentFacade.GetCAEListByTicketIdUserId(ticketId, UserId, withNonCommission, Type, CommissionIntId);
            return PartialView("_OpenCAEPoint", caeModel);
        }
        [Authorize]
        public ActionResult LoadSalesReportList(PayrollFilterModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            ViewBag.BatchNO = _Util.Facade.CommissionFacade.GetLastSalesBatchNo();
            DateTime FilterStartDate = filter.StartDate;
            DateTime FilterEndDate = filter.EndDate;
            GlobalSetting glob = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CustomerListPageSize");
            if (glob != null)
            {
                filter.PageSize = Convert.ToInt32(glob.Value);
            }
            else
            {
                filter.PageSize = 10;
            }
            if (filter.PageNo == null || filter.PageNo == 0)
            {
                filter.PageNo = 1;
            }
            bool IsPaid = true;
            if (filter.IsPaid.HasValue && filter.IsPaid.Value == false)
            {
                IsPaid = false;
            }
            ViewBag.IsPaid = IsPaid;

            List<string> listsalesperson = new List<string>();
            if (!string.IsNullOrWhiteSpace(filter.SalesPerson))
            {
                string[] splituser = filter.SalesPerson.Split(',');
                if (splituser.Length > 0)
                {
                    filter.SalesPerson = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        listsalesperson.Add(item);
                    }
                }
            }

            if (!PermissionChekcer.IsPermitted(Permissions.CustomerPermissions.ShowAllPayroll))
            {
                filter.UserId = CurrentUser.UserId;
            }

            if (filter.GetReport == true)
            {
                DataTable dt;
                if (FilterStartDate != new DateTime() && FilterEndDate != new DateTime())
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadAllSalesCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.SalesPerson);

                }
                else
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadAllSalesCommisionReport(new DateTime(), new DateTime(), filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.SalesPerson);
                }


                int[] colarray = { 6, 7, 9, 10, 11, 12, 13, 14, 15 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "PayrollSales", rowarray, colarray);
            }


            EmpSaleCommisionReport model = _Util.Facade.EmployeeFacade.GetAllSalesCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.SalesPerson);
            ViewBag.order = filter.order; ;
            if (model.PayrollTotalCount.CountTotal == 0)
            {
                filter.PageNo = 1;
            }

            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;


            if (model.PayrollReportList.Count() > 0)
            {
                ViewBag.OutOfNumber = model.PayrollTotalCount.CountTotal;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize.Value);

            return View(model);
        }

        public ActionResult LoadTicketReportList(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            TicketListModel Model = new TicketListModel();
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.TicketType))
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus))
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket))
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }
            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }
            ViewBag.OutOfNumber = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            //Filters.CompanyId = CurrentUser.CompanyId.Value;
            //Filters.UserId = CurrentUser.UserId;

            //TicketListModel Model = _Util.Facade.EmployeeFacade.GetAllTicketReportByFilter(Filters, filter);
            //ViewBag.PageNumber = Filters.PageNo;
            //ViewBag.OutOfNumber = 0;
            //ViewBag.order = Filters.order;
            //if (ViewBag.order == null)
            //{
            //    ViewBag.order = 0;
            //}
            //if (Model.Tickets != null && Model.Tickets.Count() > 0)
            //{
            //    ViewBag.OutOfNumber = Model.TotalCount;
            //}

            //if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            //{
            //    ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            //}
            //else
            //{
            //    ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            //}
            //ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);


            #region Viewbags
            List<SelectListItem> Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketStatus")
                .OrderBy(x => x.DisplayText)
                .Where(x => x.DataValue != "-1")
                .ToList().Select(x =>
                 new SelectListItem()
                 {
                     Text = x.DisplayText.ToString(),
                     Value = x.DataValue.ToString()
                 }).ToList();
            //Items.RemoveAt(0);
            //Items.RemoveAt(0);
            //Items.Insert(0, new SelectListItem()
            //{
            //    Text = "Ticket Status",
            //    Value = "-1"
            //});


            ViewBag.TicketStatus = Items;

            Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketType").OrderBy(x => x.DataValue.ToString() != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            Items.RemoveAt(0);
            //Items.RemoveAt(0);
            //Items.Insert(0, new SelectListItem()
            //{
            //    Text = "Ticket Type",
            //    Value = "-1"
            //});
            ViewBag.TicketType = Items;
            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployeeByTicketUserIsprimary(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),

                }).ToList();
            //emplst.Insert(0, new SelectListItem()
            //{
            //    Text = "Assigned User",
            //    Value = new Guid().ToString()
            //});
            ViewBag.EmployeeList = emplst;

            List<SelectListItem> MyTicketList = new List<SelectListItem>();

            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Other Filters",
                    Value = "-1"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Created By Me",
                    Value = "Created"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Assigned to Me",
                    Value = "Assigned"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Both",
                    Value = "Both"
                });
            MyTicketList.Add(
               new SelectListItem
               {
                   Text = "None",
                   Value = "None"
               });
            ViewBag.MyTicketList = MyTicketList;

            #endregion
            ViewBag.tikettype = typeticket;
            ViewBag.statustiket = statusticket;
            ViewBag.assignticket = assignticket;
            List<SelectListItem> sales = new List<SelectListItem>();
            sales.Add(new SelectListItem()
            {
                Text = "Please Select",
                Value = "-1"
            });
            sales.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.SalesPerson, new Guid(), LabelHelper.UserTags.Partner).OrderBy(x => x.FirstName + " " + x.LastName).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.salesperson = sales;
            return View(Model);
        }
        public ActionResult LoadTechnicianReportList(EmployeeFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            EmployeeListModel Model = new EmployeeListModel();

            if (Filters.PageNo < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }
            List<string> citylist = new List<string>();

            if (!string.IsNullOrWhiteSpace(Filters.City))
            {
                string[] aList = Filters.City.Split(',');
                if (aList != null)
                {
                    foreach (var item in aList)
                    {
                        citylist.Add(item);
                    }
                }

            }
            ViewBag.valcity = citylist;

            List<string> statelist = new List<string>();

            if (!string.IsNullOrWhiteSpace(Filters.State))
            {
                string[] aList = Filters.State.Split(',');
                if (aList != null)
                {
                    foreach (var item in aList)
                    {
                        statelist.Add(item);
                    }
                }

            }
            ViewBag.valstate = statelist;
            List<SelectListItem> city = new List<SelectListItem>();
            city.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("USACity").OrderBy(x => x.DisplayText).Select(x =>
            new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            ViewBag.citylist = city;
            List<SelectListItem> state = new List<SelectListItem>();
            state.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("StateList").OrderBy(x => x.DisplayText).Select(x =>
            new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            ViewBag.statelist = state;
            ViewBag.OutOfNumber = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            ViewBag.Startdate = Filters.StartDate;
            return View(Model);
        }

        public ActionResult LoadInstallationTrackerReportReportList(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            TicketListModel Model = new TicketListModel();
            List<SelectListItem> SalesPerson = new List<SelectListItem>();

            SalesPerson.AddRange(_Util.Facade.EmployeeFacade.GetSalesPerson().OrderBy(x => x.FirstName + " " + x.LastName != "Please Select One").ThenBy(x => x.FirstName + " " + x.LastName).Select(x =>
                  new SelectListItem()
                  {
                      Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                      Value = x.FirstName.ToString() + " " + x.LastName.ToString()
                  }).ToList());

            ViewBag.SalespersonList = SalesPerson;

            List<string> salesperson = new List<string>();

            if (!string.IsNullOrWhiteSpace(Filters.salesperson))
            {
                string[] SList = Filters.salesperson.Split(',');
                if (SList != null)
                {
                    foreach (var item in SList)
                    {
                        salesperson.Add(item);
                    }
                }

            }
            ViewBag.Salesperson = salesperson;
            List<SelectListItem> TicketStatus = _Util.Facade.LookupFacade.GetLookupByKey("TicketStatus").Select(x =>
                new SelectListItem()
                {
                    Text = x.DisplayText.ToString(),
                    Value = x.DataValue.ToString()
                }).Where(x => x.Value != "-1").ToList();
            if (base.IsPermitted(HS.Framework.UserPermissions.CustomerPermissions.CompleteTicketPermission))
            {
                ViewBag.TicketStatus = TicketStatus;
            }
            else
            {
                ViewBag.TicketStatus = TicketStatus.Where(x => x.Value != LabelHelper.TicketStatus.Completed).ToList();
            }
            List<string> ticketstatus = new List<string>();

            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus))
            {
                string[] SList = Filters.TicketStatus.Split(',');
                if (SList != null)
                {
                    foreach (var item in SList)
                    {
                        ticketstatus.Add(item);
                    }
                }

            }
            ViewBag.TicketStatusSelected = ticketstatus;
            List<SelectListItem> ownership = _Util.Facade.LookupFacade.GetLookupByKey("OwnerShip").Select(x =>
                new SelectListItem()
                {
                    Text = x.DisplayText.ToString(),
                    Value = x.DataValue.ToString()
                }).Where(x => x.Value != "-1").ToList();
            ViewBag.OwnerShip = ownership;
            List<string> ownershipselectitem = new List<string>();

            if (!string.IsNullOrWhiteSpace(Filters.OwnerShip))
            {
                string[] SList = Filters.OwnerShip.Split(',');
                if (SList != null)
                {
                    foreach (var item in SList)
                    {
                        ownershipselectitem.Add(item);
                    }
                }

            }
            ViewBag.OwnershipSelected = ownershipselectitem;
            if (Filters.PageNo < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }
            ViewBag.OutOfNumber = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);

            return View(Model);
        }

        public ActionResult LoadCSRActivityReportList(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            TicketListModel Model = new TicketListModel();

            if (Filters.PageNo < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }
            ViewBag.OutOfNumber = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);

            return View(Model);
        }

        public ActionResult LoadServiceTrackerReportList(TicketFilter Filters, FilterReportModel filter)

        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            TicketListModel Model = new TicketListModel();
            List<SelectListItem> SalesPerson = new List<SelectListItem>();

            SalesPerson.AddRange(_Util.Facade.EmployeeFacade.GetSalesPerson().OrderBy(x => x.FirstName + " " + x.LastName != "Please Select One").ThenBy(x => x.FirstName + " " + x.LastName).Select(x =>
                  new SelectListItem()
                  {
                      Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                      Value = x.FirstName.ToString() + " " + x.LastName.ToString()
                  }).ToList());

            ViewBag.SalespersonList = SalesPerson;

            List<string> salesperson = new List<string>();

            if (!string.IsNullOrWhiteSpace(Filters.salesperson))
            {
                string[] SList = Filters.salesperson.Split(',');
                if (SList != null)
                {
                    foreach (var item in SList)
                    {
                        salesperson.Add(item);
                    }
                }

            }
            ViewBag.Salesperson = salesperson;
            if (Filters.PageNo < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }
            ViewBag.OutOfNumber = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);

            return View(Model);
        }
        public ActionResult LoadTaskReportList(TicketFilter Filters, FilterReportModel filter)

        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            TicketListModel Model = new TicketListModel();
            List<SelectListItem> ReminderActiveInActiveList = new List<SelectListItem>();
            List<SelectListItem> SalesPersonList = new List<SelectListItem>();
            List<Employee> empLsit = _Util.Facade.EmployeeFacade.GetCurrentEmployeeListByCompanyId(CurrentUser.CompanyId.Value);
            if (!PermissionChekcer.IsPermitted(Permissions.ReportsPermissions.AllTaskReportList))
            {
                empLsit = empLsit.Where(x => x.UserId == CurrentUser.UserId).ToList();
            }
            if (empLsit != null && empLsit.Count() > 0)
            {
                SalesPersonList.AddRange(empLsit.OrderBy(x => x.FirstName.ToString() + " " + x.LastName.ToString()).Select(x =>
                      new SelectListItem()
                      {
                          Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                          Value = x.UserId.ToString()
                      }).ToList());
            }
            ViewBag.SalesPersonList = SalesPersonList.OrderBy(x => x.Text != "Please Select One").ThenBy(x => x.Text).ToList();
            ReminderActiveInActiveList.Add(
                new SelectListItem
                {
                    Text = "Active",
                    Value = "1"
                });
            ReminderActiveInActiveList.Add(
                new SelectListItem
                {
                    Text = "Inactive",
                    Value = "0"
                });
            ViewBag.ReminderActiveInActiveList = ReminderActiveInActiveList;


            List<string> selectreminder = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.seletActive))
            {
                string[] splituser = Filters.seletActive.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.seletActive = string.Format("{0}", string.Join(",", splituser.Select(i => i.Replace("'", ""))));
                    foreach (var item in splituser)
                    {
                        selectreminder.Add(item);
                    }
                }
            }
            ViewBag.selectreminder = selectreminder;
            List<string> salesperson = new List<string>();

            if (!string.IsNullOrWhiteSpace(Filters.salesperson))
            {
                string[] SList = Filters.salesperson.Split(',');
                if (SList != null)
                {
                    foreach (var item in SList)
                    {
                        salesperson.Add(item);
                    }
                }

            }
            ViewBag.Salesperson = salesperson;
            if (Filters.PageNo < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }
            ViewBag.OutOfNumber = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);

            return View(Model);
        }
        public ActionResult LoadCompletedInventoryReportList(int? PageNo, string SearchText, DateTime? StartDate, DateTime? EndDate)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            CustomerAppointmentEquipmentListModel model = new CustomerAppointmentEquipmentListModel();

            if (PageNo < 1)
            {
                PageNo = 1;
            }
            if (SearchText == "undefined" || SearchText == null)
            {
                SearchText = "";
            }
            else
            {
                SearchText = SearchText.Replace(" ", "");
            }
            ViewBag.OutOfNumber = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);

            return View(model);
        }
        [Authorize]
        public ActionResult TicketReportAppointmentList(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.TicketType) && Filters.TicketType != "null")
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(HttpUtility.UrlDecode(item));
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus) && Filters.TicketStatus != "null")
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(HttpUtility.UrlDecode(item));
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket) && Filters.AssignedUserTicket != "null")
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }
            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = System.Web.HttpUtility.UrlDecode(Filters.SearchText);
            }
            Filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            Filters.UserId = CurrentUser.UserId;

            //if (Filters.StartDate != null && Filters.StartDate != new DateTime())
            //{
            //    Filters.StartDate = Filters.StartDate.SetZeroHour().ClientToUTCTime();
            //}
            //if (Filters.EndDate != null && Filters.EndDate != new DateTime())
            //{
            //    Filters.EndDate = Filters.EndDate.SetMaxHour().ClientToUTCTime();
            //}

            TicketListModel Model = _Util.Facade.EmployeeFacade.GetAllTicketReportByFilter(Filters, filter);
            ViewBag.PageNumber = Filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = Filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Tickets != null && Model.Tickets.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);

            return View(Model);
        }

        public ActionResult TechnicianReportAppointmentList(EmployeeFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;

            List<string> citylist = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.City) && Filters.City != "null")
            {
                string[] splituser = Filters.City.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.City = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        citylist.Add(item);
                    }
                }
            }
            List<string> statelist = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.State) && Filters.State != "null")
            {
                string[] splituser = Filters.State.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.State = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statelist.Add(item);
                    }
                }
            }
            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = System.Web.HttpUtility.UrlDecode(Filters.SearchText);
            }
            Filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            Filters.UserId = CurrentUser.UserId;
            if (Filters.StartDate != null && Filters.StartDate != new DateTime())
            {
                Filters.StartDate = Filters.StartDate.SetZeroHour().ClientToUTCTime();
            }
            if (Filters.EndDate != null && Filters.EndDate != new DateTime())
            {
                Filters.EndDate = Filters.EndDate.SetMaxHour().ClientToUTCTime();
            }
            EmployeeListModel Model = _Util.Facade.EmployeeFacade.GetAllTechnicianReportByFilter(Filters, filter);
            ViewBag.PageNumber = Filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = Filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Employees != null && Model.Employees.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);

            return View(Model);
        }
        public ActionResult InstallationTrackerReportList(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> salespersonlist = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.salesperson) && Filters.salesperson != "null")
            {
                string[] splituser = Filters.salesperson.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.salesperson = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        salespersonlist.Add(item);
                    }
                }
            }
            //List<string> typeticket = new List<string>();
            //List<string> statusticket = new List<string>();
            //List<string> assignticket = new List<string>();
            //if (!string.IsNullOrWhiteSpace(Filters.TicketType) && Filters.TicketType != "null")
            //{
            //    string[] splituser = Filters.TicketType.Split(',');
            //    if (splituser.Length > 0)
            //    {
            //        Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
            //        foreach (var item in splituser)
            //        {
            //            typeticket.Add(item);
            //        }
            //    }
            //}
            //if (!string.IsNullOrWhiteSpace(Filters.TicketStatus) && Filters.TicketStatus != "null")
            //{
            //    string[] splituser = Filters.TicketStatus.Split(',');
            //    if (splituser.Length > 0)
            //    {
            //        Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
            //        foreach (var item in splituser)
            //        {
            //            statusticket.Add(item);
            //        }
            //    }
            //}
            //if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket) && Filters.AssignedUserTicket != "null")
            //{
            //    string[] splituser = Filters.AssignedUserTicket.Split(',');
            //    if (splituser.Length > 0)
            //    {
            //        Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
            //        foreach (var item in splituser)
            //        {
            //            assignticket.Add(item);
            //        }
            //    }
            //}
            List<string> salesperson = new List<string>();

            if (!string.IsNullOrWhiteSpace(Filters.salesperson))
            {
                string[] SList = Filters.salesperson.Split(',');
                if (SList != null)
                {
                    foreach (var item in SList)
                    {
                        salesperson.Add(item);
                    }
                }

            }
            ViewBag.Salesperson = salesperson;
            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = System.Web.HttpUtility.UrlDecode(Filters.SearchText);
            }
            Filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            Filters.UserId = CurrentUser.UserId;
            if (Filters.StartDate != null && Filters.StartDate != new DateTime())
            {
                Filters.StartDate = Filters.StartDate.SetZeroHour();
            }
            if (Filters.EndDate != null && Filters.EndDate != new DateTime())
            {
                Filters.EndDate = Filters.EndDate.SetMaxHour();
            }
            TicketListModel Model = _Util.Facade.EmployeeFacade.GetAllInstallationTicketReportByFilter(Filters, filter);
            ViewBag.PageNumber = Filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = Filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Tickets != null && Model.Tickets.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);

            return View(Model);
        }


        public ActionResult CSRActivityReportList(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            //List<string> typeticket = new List<string>();
            //List<string> statusticket = new List<string>();
            //List<string> assignticket = new List<string>();
            //if (!string.IsNullOrWhiteSpace(Filters.TicketType) && Filters.TicketType != "null")
            //{
            //    string[] splituser = Filters.TicketType.Split(',');
            //    if (splituser.Length > 0)
            //    {
            //        Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
            //        foreach (var item in splituser)
            //        {
            //            typeticket.Add(item);
            //        }
            //    }
            //}
            //if (!string.IsNullOrWhiteSpace(Filters.TicketStatus) && Filters.TicketStatus != "null")
            //{
            //    string[] splituser = Filters.TicketStatus.Split(',');
            //    if (splituser.Length > 0)
            //    {
            //        Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
            //        foreach (var item in splituser)
            //        {
            //            statusticket.Add(item);
            //        }
            //    }
            //}
            //if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket) && Filters.AssignedUserTicket != "null")
            //{
            //    string[] splituser = Filters.AssignedUserTicket.Split(',');
            //    if (splituser.Length > 0)
            //    {
            //        Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
            //        foreach (var item in splituser)
            //        {
            //            assignticket.Add(item);
            //        }
            //    }
            //}
            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = System.Web.HttpUtility.UrlDecode(Filters.SearchText);
            }
            Filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            Filters.UserId = CurrentUser.UserId;
            if (Filters.StartDate != null && Filters.StartDate != new DateTime())
            {
                Filters.StartDate = Filters.StartDate.SetZeroHour().ClientToUTCTime();
            }
            if (Filters.EndDate != null && Filters.EndDate != new DateTime())
            {
                Filters.EndDate = Filters.EndDate.SetMaxHour().ClientToUTCTime();
            }
            CSRActivityModel Model = _Util.Facade.EmployeeFacade.GetAllCSRActivityReportByFilter(Filters, filter);
            ViewBag.PageNumber = Filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = Filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.CSRActivityList != null && Model.CSRActivityList.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);

            return View(Model);
        }

        public ActionResult ServiceTrackerReportList(TicketFilter Filters, FilterReportModel filter, string Start, string End)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;

            List<string> salespersonlist = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.salesperson) && Filters.salesperson != "null")
            {
                string[] splituser = Filters.salesperson.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.salesperson = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        salespersonlist.Add(item);
                    }
                }
            }
            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = System.Web.HttpUtility.UrlDecode(Filters.SearchText);
            }
            Filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            Filters.UserId = CurrentUser.UserId;
            if (Filters.StartDate != null && Filters.StartDate != new DateTime())
            {
                Filters.StartDate = Filters.StartDate.SetZeroHour();
            }

            if (Filters.EndDate != null && Filters.EndDate != new DateTime())
            {
                Filters.EndDate = Filters.EndDate.SetMaxHour();
            }
            ServiceTrackerModel Model = _Util.Facade.EmployeeFacade.GetAllServiceTrackerByFilter(Filters, filter, Start, End);
            ViewBag.PageNumber = Filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = Filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.SeviceTrackerList != null && Model.SeviceTrackerList.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);

            return View(Model);
        }

        public ActionResult TaskReportList(TicketFilter Filters, FilterReportModel filter, string Start, string End)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> selectreminder = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.seletActive) && Filters.seletActive != "null")
            {
                string[] splituser = Filters.seletActive.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.seletActive = string.Format("{0}", string.Join(",", splituser.Select(i => i.Replace("'", ""))));
                    foreach (var item in splituser)
                    {
                        selectreminder.Add(item);
                    }
                }
            }
            List<string> salespersonlist = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.salesperson) && Filters.salesperson != "null")
            {
                string[] splituser = Filters.salesperson.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.salesperson = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        salespersonlist.Add(item);
                    }
                }
            }
            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = System.Web.HttpUtility.UrlDecode(Filters.SearchText);
            }
            Filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            Filters.UserId = CurrentUser.UserId;
            if (Filters.StartDate != null && Filters.StartDate != new DateTime())
            {
                Filters.StartDate = Filters.StartDate.SetMaxHour().ClientToUTCTime();
            }

            if (Filters.EndDate != null && Filters.EndDate != new DateTime())
            {
                Filters.EndDate = Filters.EndDate.SetMaxHour().ClientToUTCTime();
            }
            bool allTask = false;
            if (PermissionChekcer.IsPermitted(Permissions.ReportsPermissions.AllTaskReportList))
            {
                allTask = true;
            }
            TaskModel Model = _Util.Facade.CustomerFacade.GetAllTaskByFilter(Filters, filter, Start, End, CurrentUser.CompanyId.Value, CurrentUser.UserId, allTask);
            ViewBag.PageNumber = Filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = Filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.TaskList != null && Model.TaskList.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);

            return View(Model);
        }

        public ActionResult CompletedInventoryReportList(int? PageNo, int? PageSize, string SearchText, string order, DateTime? StartDate, DateTime? EndDate)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            //List<string> typeticket = new List<string>();
            //List<string> statusticket = new List<string>();
            //List<string> assignticket = new List<string>();
            //if (!string.IsNullOrWhiteSpace(Filters.TicketType) && Filters.TicketType != "null")
            //{
            //    string[] splituser = Filters.TicketType.Split(',');
            //    if (splituser.Length > 0)
            //    {
            //        Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
            //        foreach (var item in splituser)
            //        {
            //            typeticket.Add(item);
            //        }
            //    }
            //}
            //if (!string.IsNullOrWhiteSpace(Filters.TicketStatus) && Filters.TicketStatus != "null")
            //{
            //    string[] splituser = Filters.TicketStatus.Split(',');
            //    if (splituser.Length > 0)
            //    {
            //        Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
            //        foreach (var item in splituser)
            //        {
            //            statusticket.Add(item);
            //        }
            //    }
            //}
            //if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket) && Filters.AssignedUserTicket != "null")
            //{
            //    string[] splituser = Filters.AssignedUserTicket.Split(',');
            //    if (splituser.Length > 0)
            //    {
            //        Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
            //        foreach (var item in splituser)
            //        {
            //            assignticket.Add(item);
            //        }
            //    }
            //}
            if (!PageNo.HasValue || PageNo.Value < 1)
            {
                PageNo = 1;
            }
            if (SearchText == "undefined" || SearchText == null)
            {
                SearchText = "";
            }
            else
            {
                SearchText = System.Web.HttpUtility.UrlDecode(SearchText);
            }
            PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            if (StartDate != null && StartDate != new DateTime())
            {
                StartDate = StartDate.Value.SetZeroHour().ClientToUTCTime();
            }
            if (EndDate != null && EndDate != new DateTime())
            {
                EndDate = EndDate.Value.SetMaxHour().ClientToUTCTime();
            }
            if (StartDate == null)
            {
                StartDate = new DateTime();
            }
            if (EndDate == null)
            {
                EndDate = new DateTime();
            }
            CustomerAppointmentEquipmentListModel Model = _Util.Facade.PurchaseOrderFacade.GetCompletedInventoryListByFilter(PageNo, PageSize, StartDate.Value, EndDate.Value, CurrentUser.CompanyId.Value, SearchText, order);
            //TicketListModel Model = _Util.Facade.EmployeeFacade.GetAllInstallationTicketReportByFilter(Filters, filter);
            ViewBag.PageNumber = PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.CustomerAppointmentEquipments != null && Model.CustomerAppointmentEquipments.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / PageSize.Value);

            return View(Model);
        }

        //GO BACK REPORT LIST
        [Authorize]
        public ActionResult LoadTicketReportListGoBack(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            TicketListModel Model = new TicketListModel();
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.TicketType))
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus))
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket))
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }
            if (Filters.StartDate != null && Filters.StartDate == new DateTime())
            {
                Filters.StartDate = DateTime.Today.AddDays(-90).Date;
            }
            if (Filters.EndDate != null && Filters.EndDate == new DateTime())
            {
                Filters.EndDate = DateTime.Today.Date;
            }
            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }
            //Filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            //Filters.CompanyId = CurrentUser.CompanyId.Value;
            //Filters.UserId = CurrentUser.UserId;

            //TicketListModel Model = _Util.Facade.EmployeeFacade.GetAllTicketReportByFilter(Filters, filter);
            //ViewBag.PageNumber = Filters.PageNo;
            //ViewBag.OutOfNumber = 0;
            //ViewBag.order = Filters.order;
            //if (ViewBag.order == null)
            //{
            //    ViewBag.order = 0;
            //}
            //if (Model.Tickets != null && Model.Tickets.Count() > 0)
            //{
            //    ViewBag.OutOfNumber = Model.TotalCount;
            //}

            //if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            //{
            //    ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            //}
            //else
            //{
            //    ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            //}
            //ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);


            #region Viewbags
            List<SelectListItem> Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketStatus").OrderBy(x => x.DataOrder).ToList().Select(x =>
                 new SelectListItem()
                 {
                     Text = x.DisplayText.ToString(),
                     Value = x.DataValue.ToString()
                 }).ToList();

            Items.RemoveAt(0);

            ViewBag.TicketStatus = Items;

            Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketType").OrderBy(x => x.DataOrder).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            Items.RemoveAt(0);
            ViewBag.TicketType = Items;
            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();

            ViewBag.EmployeeList = emplst;

            List<SelectListItem> MyTicketList = new List<SelectListItem>();

            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Other Filters",
                    Value = "-1"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Created By Me",
                    Value = "Created"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Assigned to Me",
                    Value = "Assigned"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Both",
                    Value = "Both"
                });
            MyTicketList.Add(
               new SelectListItem
               {
                   Text = "None",
                   Value = "None"
               });
            ViewBag.MyTicketList = MyTicketList;

            #endregion
            ViewBag.tikettype = typeticket;
            ViewBag.statustiket = statusticket;
            ViewBag.assignticket = assignticket;
            List<SelectListItem> sales = new List<SelectListItem>();
            sales.Add(new SelectListItem()
            {
                Text = "Please Select",
                Value = "-1"
            });
            sales.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.SalesPerson, new Guid(), LabelHelper.UserTags.Partner).OrderBy(x => x.FirstName + " " + x.LastName).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.salesperson = sales;
            return View(Model);
        }

        public ActionResult TicketReportListGoBack(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.TicketType))
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus))
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket))
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }
            if (Filters.StartDate == new DateTime())
            {
                Filters.StartDate = DateTime.Today.AddDays(-90).Date;
            }
            if (Filters.EndDate == new DateTime())
            {
                Filters.EndDate = DateTime.Today.Date;
            }
            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }
            Filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            Filters.UserId = CurrentUser.UserId;
            if (Filters.StartDate != null && Filters.StartDate != new DateTime())
            {
                Filters.StartDate = Filters.StartDate.SetZeroHour().ClientToUTCTime();
            }
            if (Filters.EndDate != null && Filters.EndDate != new DateTime())
            {
                Filters.EndDate = Filters.EndDate.SetMaxHour().ClientToUTCTime();
            }
            TicketListModel Model = _Util.Facade.EmployeeFacade.GetAllTicketReportByFilter(Filters, filter);
            ViewBag.PageNumber = Filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = Filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Tickets != null && Model.Tickets.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);


            #region Viewbags
            List<SelectListItem> Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketStatus").OrderBy(x => x.DataOrder).ToList().Select(x =>
                 new SelectListItem()
                 {
                     Text = x.DisplayText.ToString(),
                     Value = x.DataValue.ToString()
                 }).ToList();

            Items.RemoveAt(0);

            ViewBag.TicketStatus = Items;

            Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketType").OrderBy(x => x.DataOrder).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            Items.RemoveAt(0);
            ViewBag.TicketType = Items;
            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();

            ViewBag.EmployeeList = emplst;

            List<SelectListItem> MyTicketList = new List<SelectListItem>();

            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Other Filters",
                    Value = "-1"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Created By Me",
                    Value = "Created"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Assigned to Me",
                    Value = "Assigned"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Both",
                    Value = "Both"
                });
            MyTicketList.Add(
               new SelectListItem
               {
                   Text = "None",
                   Value = "None"
               });
            ViewBag.MyTicketList = MyTicketList;

            #endregion
            ViewBag.tikettype = typeticket;
            ViewBag.statustiket = statusticket;
            ViewBag.assignticket = assignticket;
            List<SelectListItem> sales = new List<SelectListItem>();
            sales.Add(new SelectListItem()
            {
                Text = "Please Select",
                Value = "-1"
            });
            sales.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.SalesPerson, new Guid(), LabelHelper.UserTags.Partner).OrderBy(x => x.FirstName + " " + x.LastName).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.salesperson = sales;
            return View(Model);
        }


        //DATE REFERENCE Web list load
        [Authorize]
        public ActionResult LoadTicketReportListDateReference(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            TicketListModel Model = new TicketListModel();
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            #region TicketType
            if (!string.IsNullOrWhiteSpace(Filters.TicketType))
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(item);
                    }
                }
            }
            #endregion

            #region TicketStatus
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus))
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(item);
                    }
                }
            }
            #endregion

            #region AssignedUserTicket
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket))
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }
            #endregion


            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }

            Filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            //Filters.CompanyId = CurrentUser.CompanyId.Value;
            //Filters.UserId = CurrentUser.UserId;

            //TicketListModel Model = _Util.Facade.EmployeeFacade.GetAllTicketReportByFilter(Filters, filter);
            //ViewBag.PageNumber = Filters.PageNo;
            //ViewBag.OutOfNumber = 0;
            //ViewBag.order = Filters.order;
            //if (ViewBag.order == null)
            //{
            //    ViewBag.order = 0;
            //}
            //if (Model.Tickets != null && Model.Tickets.Count() > 0)
            //{
            //    ViewBag.OutOfNumber = Model.TotalCount;
            //}

            //if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            //{
            //    ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            //}
            //else
            //{
            //    ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            //}
            //ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);


            #region Viewbags
            List<SelectListItem> Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketStatus").OrderBy(x => x.DisplayText).ToList().Where(x => x.DataValue != "-1").Select(x =>
                 new SelectListItem()
                 {
                     Text = x.DisplayText.ToString(),
                     Value = x.DataValue.ToString()
                 }).ToList();

            //Items.RemoveAt(0);

            ViewBag.TicketStatus = Items;

            Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketType").OrderBy(x => x.DataValue.ToString() != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            Items.RemoveAt(0);
            ViewBag.TicketType = Items;
            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployeeByTicketUserIsprimary(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();

            ViewBag.EmployeeList = emplst;

            List<SelectListItem> MyTicketList = new List<SelectListItem>();

            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Other Filters",
                    Value = "-1"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Created By Me",
                    Value = "Created"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Assigned to Me",
                    Value = "Assigned"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Both",
                    Value = "Both"
                });
            MyTicketList.Add(
               new SelectListItem
               {
                   Text = "None",
                   Value = "None"
               });
            ViewBag.MyTicketList = MyTicketList;

            #endregion
            ViewBag.tikettype = typeticket;
            ViewBag.statustiket = statusticket;
            ViewBag.assignticket = assignticket;
            List<SelectListItem> sales = new List<SelectListItem>();
            sales.Add(new SelectListItem()
            {
                Text = "Please Select",
                Value = "-1"
            });
            sales.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.SalesPerson, new Guid(), LabelHelper.UserTags.Partner).OrderBy(x => x.FirstName + " " + x.LastName).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.salesperson = sales;
            return View(Model);
        }

        public ActionResult TicketReportListDateReference(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            #region TicketType Filter
            if (!string.IsNullOrWhiteSpace(Filters.TicketType))
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(item);
                    }
                }
            }
            #endregion

            #region TicketStatus
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus))
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(item);
                    }
                }
            }
            #endregion

            #region AssignedUserTicket
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket))
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }
            #endregion

            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }

            Filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            Filters.UserId = CurrentUser.UserId;

            #region StartDate End Date

            if (Filters.StartDate != null && Filters.StartDate != new DateTime())
            {
                Filters.StartDate = Filters.StartDate.SetZeroHour();//.ClientToUTCTime();
            }
            if (Filters.EndDate != null && Filters.EndDate != new DateTime())
            {
                Filters.EndDate = Filters.EndDate.SetMaxHour();//.ClientToUTCTime();
            }
            #endregion

            #region Get Data 
            TicketListModel Model = _Util.Facade.EmployeeFacade.GetAllTicketReportByFilter(Filters, filter);
            #endregion

            ViewBag.PageNumber = Filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = Filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Tickets != null && Model.Tickets.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);


            #region Viewbags
            List<SelectListItem> Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketStatus").OrderBy(x => x.DisplayText != "Select One").ThenBy(x => x.DisplayText).ToList().Select(x =>
                 new SelectListItem()
                 {
                     Text = x.DisplayText.ToString(),
                     Value = x.DataValue.ToString()
                 }).ToList();

            Items.RemoveAt(0);

            ViewBag.TicketStatus = Items;

            Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketType").OrderBy(x => x.DisplayText != "Select One").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            Items.RemoveAt(0);
            ViewBag.TicketType = Items;
            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();

            ViewBag.EmployeeList = emplst;

            List<SelectListItem> MyTicketList = new List<SelectListItem>();

            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Other Filters",
                    Value = "-1"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Created By Me",
                    Value = "Created"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Assigned to Me",
                    Value = "Assigned"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Both",
                    Value = "Both"
                });
            MyTicketList.Add(
               new SelectListItem
               {
                   Text = "None",
                   Value = "None"
               });
            ViewBag.MyTicketList = MyTicketList;

            #endregion
            ViewBag.tikettype = typeticket;
            ViewBag.statustiket = statusticket;
            ViewBag.assignticket = assignticket;

            return View(Model);
        }

        [Authorize]
        [HttpPost]
        public JsonResult MakePaymentTechComm(List<int> IdList, bool IsPaid)
        {
            int batch = _Util.Facade.CommissionFacade.GetLastTechBatchNo();
            List<TechCommission> TechCommissionList = _Util.Facade.CommissionFacade.GetTechCommissionListByIdList(IdList);
            foreach (var item in TechCommissionList)
            {
                item.IsPaid = IsPaid;
                item.Batch = batch.ToString();
                _Util.Facade.CommissionFacade.UpdateTechCommission(item);
            }
            return Json(new { result = true, message = "Saved successfully." });
        }
        public bool MakeClusterPaymentFundingComm(List<int> ClusterTicketId, bool IsPaid)
        {
            int batch = _Util.Facade.CommissionFacade.GetLastBatchNo();
            DateTime PaidDate = DateTime.Now.UTCCurrentTime();
            StringBuilder ticketIdJoin = new StringBuilder();
            ticketIdJoin.Append(string.Join(",", ClusterTicketId));

            bool result = _Util.Facade.PayrollFacade.UpdatePayrollClusterFunding(ticketIdJoin.ToString(), batch, PaidDate);
            return result;
        }
        [Authorize]
        [HttpPost]
        public JsonResult MakePaymentFundingComm(List<int> IdListSales, List<int> IdListTech, List<int> IdListAddMember, List<int> IdListFinRep, List<int> IdListServiceCall, List<int> IdListFollowUp, List<int> IdListReschedule, List<int> IdListAdjustFunding, List<int> ClusterTicketId, bool IsPaid)
        {
            int batch = _Util.Facade.CommissionFacade.GetLastBatchNo();
            DateTime PaidDate = DateTime.Now.UTCCurrentTime();
            bool result = false;
            try
            {

                if (ClusterTicketId != null)
                {
                    result = MakeClusterPaymentFundingComm(ClusterTicketId, IsPaid);
                }

                StringBuilder idSales = new StringBuilder();
                StringBuilder idTech = new StringBuilder();
                StringBuilder idAddMember = new StringBuilder();
                StringBuilder idFinRep = new StringBuilder();
                StringBuilder idServiceCall = new StringBuilder();
                StringBuilder idFollowUp = new StringBuilder();
                StringBuilder idReshcedule = new StringBuilder();
                StringBuilder idAdjustmentFunding = new StringBuilder();

                if (IdListSales != null && IdListSales.Count > 0)
                {
                    idSales.Append(string.Join(",", IdListSales));
                }
                if (IdListTech != null && IdListTech.Count > 0)
                {
                    idTech.Append(string.Join(",", IdListTech));
                }
                if (IdListAddMember != null && IdListAddMember.Count > 0)
                {
                    idAddMember.Append(string.Join(",", IdListAddMember));
                }
                if (IdListFinRep != null && IdListFinRep.Count > 0)
                {
                    idFinRep.Append(string.Join(",", IdListFinRep));
                }
                if (IdListServiceCall != null && IdListServiceCall.Count > 0)
                {
                    idServiceCall.Append(string.Join(",", IdListServiceCall));
                }
                if (IdListFollowUp != null && IdListFollowUp.Count > 0)
                {
                    idFollowUp.Append(string.Join(",", IdListFollowUp));
                }
                if (IdListReschedule != null && IdListReschedule.Count > 0)
                {
                    idReshcedule.Append(string.Join(",", IdListReschedule));
                }
                if (IdListAdjustFunding != null && IdListAdjustFunding.Count > 0)
                {
                    idAdjustmentFunding.Append(string.Join(",", IdListAdjustFunding));
                }
                result = _Util.Facade.PayrollFacade.UpdatePayrollSingleFunding(idSales.ToString(), idTech.ToString(), idAddMember.ToString(), idFinRep.ToString(), idServiceCall.ToString(), idFollowUp.ToString(), idReshcedule.ToString(), idAdjustmentFunding.ToString(), batch, PaidDate);
            }
            catch (Exception ex)
            {
                result = false;
            }
            return Json(new { result = result });
        }

        [HttpPost]
        public JsonResult MakePaymentMemberComm(List<int> IdList, bool IsPaid)
        {

            int batch = _Util.Facade.TicketFacade.GetLastMemberBatchNo();
            List<AddMemberCommission> AddMemberCommissionList = _Util.Facade.TicketFacade.GetMemberCommissionListByIdList(IdList);
            foreach (var item in AddMemberCommissionList)
            {
                item.IsPaid = IsPaid;
                item.Batch = batch.ToString();
                _Util.Facade.TicketFacade.UpdateAddMemberCommission(item);
            }
            return Json(new { result = true, message = "Saved successfully." });
        }

        [HttpPost]
        public JsonResult MakePaymentServiceCallComm(List<int> IdList, bool IsPaid)
        {

            int batch = _Util.Facade.TicketFacade.GetLastMemberBatchNo();
            List<ServiceCallCommission> ServiceCallCommissionList = _Util.Facade.TicketFacade.GetServiceCallCommissionListByIdList(IdList);
            foreach (var item in ServiceCallCommissionList)
            {
                item.IsPaid = IsPaid;
                item.Batch = batch.ToString();
                _Util.Facade.TicketFacade.UpdateServiceCallCommission(item);
            }
            return Json(new { result = true, message = "Saved successfully." });
        }

        [Authorize]
        [HttpPost]
        public JsonResult MakePaymentSalesComm(List<int> IdList, bool IsPaid)
        {
            int batch = _Util.Facade.CommissionFacade.GetLastSalesBatchNo();
            List<SalesCommission> SalesCommissionList = _Util.Facade.CommissionFacade.GetSalesCommissionListByIdList(IdList);
            foreach (var item in SalesCommissionList)
            {
                item.IsPaid = IsPaid;
                item.Batch = batch.ToString();
                _Util.Facade.CommissionFacade.UpdateSalesCommission(item);
            }
            return Json(new { result = true, message = "Saved successfully." });
        }

        public ActionResult LoadTechReportList(PayrollFilterModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            ViewBag.BatchNO = _Util.Facade.CommissionFacade.GetLastTechBatchNo();
            DateTime FilterStartDate = filter.StartDate;
            DateTime FilterEndDate = filter.EndDate;

            GlobalSetting glob = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CustomerListPageSize");
            if (glob != null)
            {
                filter.PageSize = Convert.ToInt32(glob.Value);
            }
            else
            {
                filter.PageSize = 10;
            }
            if (filter.PageNo == null || filter.PageNo == 0)
            {
                filter.PageNo = 1;
            }
            bool IsPaid = true;
            if (filter.IsPaid.HasValue && filter.IsPaid.Value == false)
            {
                IsPaid = false;
            }
            ViewBag.IsPaid = IsPaid;
            List<string> listtechperson = new List<string>();
            if (!string.IsNullOrWhiteSpace(filter.TechPersonList))
            {
                string[] splituser = filter.TechPersonList.Split(',');
                if (splituser.Length > 0)
                {
                    filter.TechPersonList = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        listtechperson.Add(item);
                    }
                }
            }
            if (!PermissionChekcer.IsPermitted(Permissions.CustomerPermissions.ShowAllPayroll))
            {
                filter.UserId = CurrentUser.UserId;
            }
            if (filter.GetReport == true)
            {
                DataTable dt;
                if (FilterStartDate != new DateTime() && FilterEndDate != new DateTime())
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadAllTechCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.TechPersonList);

                }
                else
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadAllTechCommisionReport(new DateTime(), new DateTime(), filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.TechPersonList);
                }


                int[] colarray = { 6, 7, 8, 9, 10, 11, 12, 13, 14 };
                int[] rowarray = { dt.Rows.Count + 2 };

                return MakeExcelFromDataTable(dt, "PayrollTech", rowarray, colarray);
            }




            EmpTechCommisionReport model = _Util.Facade.EmployeeFacade.GetAllTechCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.TechPersonList);
            ViewBag.order = filter.order; ;
            if (model.PayrollTotalCount.CountTotal == 0)
            {
                filter.PageNo = 1;
            }

            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;


            if (model.PayrollReportList.Count() > 0)
            {
                ViewBag.OutOfNumber = model.PayrollTotalCount.CountTotal;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize.Value);

            return View(model);
        }

        public ActionResult LoadMemberReportList(PayrollFilterModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            ViewBag.BatchNO = _Util.Facade.TicketFacade.GetLastMemberBatchNo();
            DateTime FilterStartDate = filter.StartDate;
            DateTime FilterEndDate = filter.EndDate;

            GlobalSetting glob = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CustomerListPageSize");
            if (glob != null)
            {
                filter.PageSize = Convert.ToInt32(glob.Value);
            }
            else
            {
                filter.PageSize = 10;
            }
            if (filter.PageNo == null || filter.PageNo == 0)
            {
                filter.PageNo = 1;
            }
            bool IsPaid = true;
            if (filter.IsPaid.HasValue && filter.IsPaid.Value == false)
            {
                IsPaid = false;
            }
            ViewBag.IsPaid = IsPaid;

            List<string> listmemberperson = new List<string>();
            if (!string.IsNullOrWhiteSpace(filter.MemberPersonList))
            {
                string[] splituser = filter.MemberPersonList.Split(',');
                if (splituser.Length > 0)
                {
                    filter.MemberPersonList = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        listmemberperson.Add(item);
                    }
                }
            }
            //EmpTechCommisionReport model = _Util.Facade.EmployeeFacade.GetAllTechCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid);
            if (!PermissionChekcer.IsPermitted(Permissions.CustomerPermissions.ShowAllPayroll))
            {
                filter.UserId = CurrentUser.UserId;
            }

            if (filter.GetReport == true)
            {
                DataTable dt;
                if (FilterStartDate != new DateTime() && FilterEndDate != new DateTime())
                {
                    dt = _Util.Facade.TicketFacade.GetDownLoadAllMemberCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.MemberPersonList);

                }
                else
                {
                    dt = _Util.Facade.TicketFacade.GetDownLoadAllMemberCommisionReport(new DateTime(), new DateTime(), filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.MemberPersonList);
                }


                int[] colarray = { 6, 7, 8 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "PayrollAddedMembers", rowarray, colarray);
            }



            MemberCommisionReport model = _Util.Facade.TicketFacade.GetAllMemberCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.MemberPersonList);
            ViewBag.order = filter.order; ;
            if (model.PayrollTotalCount.CountTotal == 0)
            {
                filter.PageNo = 1;
            }

            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;


            if (model.PayrollReportList.Count() > 0)
            {
                ViewBag.OutOfNumber = model.PayrollTotalCount.CountTotal;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize.Value);

            return View(model);
        }

        public ActionResult LoadServiceCallReportList(PayrollFilterModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            ViewBag.BatchNO = _Util.Facade.TicketFacade.GetLastServiceCallBatchNo();
            DateTime FilterStartDate = filter.StartDate;
            DateTime FilterEndDate = filter.EndDate;

            GlobalSetting glob = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CustomerListPageSize");
            if (glob != null)
            {
                filter.PageSize = Convert.ToInt32(glob.Value);
            }
            else
            {
                filter.PageSize = 10;
            }
            if (filter.PageNo == null || filter.PageNo == 0)
            {
                filter.PageNo = 1;
            }
            bool IsPaid = true;
            if (filter.IsPaid.HasValue && filter.IsPaid.Value == false)
            {
                IsPaid = false;
            }
            ViewBag.IsPaid = IsPaid;

            List<string> listserviceperson = new List<string>();
            if (!string.IsNullOrWhiteSpace(filter.ServicePersonList))
            {
                string[] splituser = filter.ServicePersonList.Split(',');
                if (splituser.Length > 0)
                {
                    filter.ServicePersonList = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        listserviceperson.Add(item);
                    }
                }
            }
            //EmpTechCommisionReport model = _Util.Facade.EmployeeFacade.GetAllTechCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid);
            if (!PermissionChekcer.IsPermitted(Permissions.CustomerPermissions.ShowAllPayroll))
            {
                filter.UserId = CurrentUser.UserId;
            }
            if (filter.GetReport == true)
            {
                DataTable dt;
                if (FilterStartDate != new DateTime() && FilterEndDate != new DateTime())
                {
                    dt = _Util.Facade.TicketFacade.GetDownLoadServiceCallCommReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.MemberPersonList);

                }
                else
                {
                    dt = _Util.Facade.TicketFacade.GetDownLoadServiceCallCommReport(new DateTime(), new DateTime(), filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.MemberPersonList);
                }


                int[] colarray = { 6, 7, 8 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "PayrollServiceCallCommission", rowarray, colarray);
            }

            ServiceCallCommisionReport model = _Util.Facade.TicketFacade.GetAllServiceCallCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.ServicePersonList);
            ViewBag.order = filter.order; ;
            if (model.PayrollTotalCount.CountTotal == 0)
            {
                filter.PageNo = 1;
            }

            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;


            if (model.PayrollReportList.Count() > 0)
            {
                ViewBag.OutOfNumber = model.PayrollTotalCount.CountTotal;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize.Value);

            return View(model);
        }

        public ActionResult LoadFollowUpReportList(PayrollFilterModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            ViewBag.BatchNO = _Util.Facade.TicketFacade.GetLastServiceCallBatchNo();
            DateTime FilterStartDate = filter.StartDate;
            DateTime FilterEndDate = filter.EndDate;

            GlobalSetting glob = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CustomerListPageSize");
            if (glob != null)
            {
                filter.PageSize = Convert.ToInt32(glob.Value);
            }
            else
            {
                filter.PageSize = 10;
            }
            if (filter.PageNo == null || filter.PageNo == 0)
            {
                filter.PageNo = 1;
            }
            bool IsPaid = true;
            if (filter.IsPaid.HasValue && filter.IsPaid.Value == false)
            {
                IsPaid = false;
            }
            ViewBag.IsPaid = IsPaid;
            List<string> listfollowupperson = new List<string>();
            if (!string.IsNullOrWhiteSpace(filter.FollowUpPersonList))
            {
                string[] splituser = filter.FollowUpPersonList.Split(',');
                if (splituser.Length > 0)
                {
                    filter.FollowUpPersonList = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        listfollowupperson.Add(item);
                    }
                }
            }
            if (!PermissionChekcer.IsPermitted(Permissions.CustomerPermissions.ShowAllPayroll))
            {
                filter.UserId = CurrentUser.UserId;
            }
            if (filter.GetReport == true)
            {
                DataTable dt;
                if (FilterStartDate != new DateTime() && FilterEndDate != new DateTime())
                {
                    dt = _Util.Facade.TicketFacade.GetDownLoadAllFollowUpCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.MemberPersonList);

                }
                else
                {
                    dt = _Util.Facade.TicketFacade.GetDownLoadAllFollowUpCommisionReport(new DateTime(), new DateTime(), filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.MemberPersonList);
                }


                int[] colarray = { 6, 7, 8 };
                int[] rowarray = { dt.Rows.Count + 2 };

                return MakeExcelFromDataTable(dt, "PayrollFollowUpCommission", rowarray, colarray);
            }
            //    if (CurrentUser.UserRole == "Installation" || CurrentUser.UserRole == "Technician")
            //{

            //}
            //EmpTechCommisionReport model = _Util.Facade.EmployeeFacade.GetAllTechCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid);
            FollowUpCommisionReport model = _Util.Facade.TicketFacade.GetAllFollowUpCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.FollowUpPersonList);
            ViewBag.order = filter.order; ;
            if (model.PayrollTotalCount.CountTotal == 0)
            {
                filter.PageNo = 1;
            }

            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;


            if (model.PayrollReportList.Count() > 0)
            {
                ViewBag.OutOfNumber = model.PayrollTotalCount.CountTotal;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize.Value);

            return View(model);
        }

        public ActionResult LoadRescheduleReportList(PayrollFilterModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            ViewBag.BatchNO = _Util.Facade.TicketFacade.GetLastServiceCallBatchNo();
            DateTime FilterStartDate = filter.StartDate;
            DateTime FilterEndDate = filter.EndDate;

            GlobalSetting glob = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CustomerListPageSize");
            if (glob != null)
            {
                filter.PageSize = Convert.ToInt32(glob.Value);
            }
            else
            {
                filter.PageSize = 10;
            }
            if (filter.PageNo == null || filter.PageNo == 0)
            {
                filter.PageNo = 1;
            }
            bool IsPaid = true;

            List<string> listreschedule = new List<string>();
            if (!string.IsNullOrWhiteSpace(filter.RescheduleTech))
            {
                string[] splituser = filter.RescheduleTech.Split(',');
                if (splituser.Length > 0)
                {
                    filter.RescheduleTech = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        listreschedule.Add(item);
                    }
                }
            }
            if (filter.IsPaid.HasValue && filter.IsPaid.Value == false)
            {
                IsPaid = false;
            }
            ViewBag.IsPaid = IsPaid;

            if (!PermissionChekcer.IsPermitted(Permissions.CustomerPermissions.ShowAllPayroll))
            {
                filter.UserId = CurrentUser.UserId;
            }
            if (filter.GetReport == true)
            {
                DataTable dt;
                if (FilterStartDate != new DateTime() && FilterEndDate != new DateTime())
                {
                    dt = _Util.Facade.TicketFacade.GetDownLoadRescheduleCommReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.RescheduleTech);

                }
                else
                {
                    dt = _Util.Facade.TicketFacade.GetDownLoadRescheduleCommReport(new DateTime(), new DateTime(), filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.RescheduleTech);
                }

                int[] colarray = { 6, 7, 8 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "PayrollRescheduleCommission", rowarray, colarray);
            }

            //EmpTechCommisionReport model = _Util.Facade.EmployeeFacade.GetAllTechCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid);
            RescheduleCommisionReport model = _Util.Facade.TicketFacade.GetAllRescheduleCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, filter.UserId, filter.SearchText, filter.RescheduleTech);
            ViewBag.order = filter.order; ;
            if (model.PayrollTotalCount.CountTotal == 0)
            {
                filter.PageNo = 1;
            }

            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;


            if (model.PayrollReportList.Count() > 0)
            {
                ViewBag.OutOfNumber = model.PayrollTotalCount.CountTotal;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize.Value);

            return View(model);
        }
        public ActionResult LoadFundedReportCluster(PayrollFilterModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            DateTime FilterStartDate = filter.StartDate;
            DateTime FilterEndDate = filter.EndDate;

            GlobalSetting glob = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CustomerListPageSize");
            if (glob != null)
            {
                filter.PageSize = 500;
            }
            else
            {
                filter.PageSize = 500;
            }
            if (filter.PageNo == null || filter.PageNo == 0)
            {
                filter.PageNo = 1;
            }
            bool IsPaid = true;
            if (filter.IsPaid.HasValue && filter.IsPaid.Value == false)
            {
                IsPaid = false;
            }
            ViewBag.IsPaid = IsPaid;
            string FilterText = filter.FilterText;
            string TicketType = "";
            if (filter.TicketType != null)
            {
                foreach (var item in filter.TicketType)
                {
                    TicketType += string.Format("'{0}',", item);
                }
                TicketType = TicketType.Remove(TicketType.Length - 1, 1);
            }
            FundedCommisionReportCluster model = _Util.Facade.TicketFacade.GetAllFundedCommisionCluster(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, filter.SearchText, IsPaid, FilterText, "", TicketType);

            ViewBag.order = filter.order; ;
            if (model.PayrollTotalCount.CountTotal == 0)
            {
                filter.PageNo = 1;
            }
            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;
            if (model.PayrollReportCluster.Count() > 0)
            {
                ViewBag.OutOfNumber = model.PayrollTotalCount.CountTotal;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize.Value);

            return View(model);
        }

        public JsonResult MakeRemoveFromQueue(List<int> RemoveFromQueueList)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;

            bool result = false;
            string message = "";
            try
            {
                foreach (var item in RemoveFromQueueList)
                {
                    CustomerCancellationQueue cancellationQue = _Util.Facade.CustomerFacade.GetCustomerCancellationQueueById(item);
                    if (cancellationQue != null)
                    {
                        Customer cus = _Util.Facade.CustomerFacade.GetCustomerByCustomerGuidId(cancellationQue.CustomerId);

                        if (cus != null)
                        {
                            cus.CancellationDate = new DateTime();
                            cus.CancellationSignature = "";
                            cus.IsActive = true;

                            cus.CustomerStatus = "6";
                            _Util.Facade.CustomerFacade.UpdateCustomer(cus);
                        }
                        _Util.Facade.CustomerFacade.DeleteCustomerCancellationQueueById(cancellationQue.Id);
                        _Util.Facade.CustomerFacade.DeleteCustomerCancellationReasonByCustomerId(cancellationQue.CustomerId);
                        base.AddUserActivityForCustomer("Customer Is Removed From Queue By " + (CurrentUser.FirstName + " " + CurrentUser.LastName), LabelHelper.ActivityAction.Update, cancellationQue.CustomerId, null, null);

                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                result = false;
                message = "Internal Error!";
            }
            return Json(new { result = result, message = message });
        }
        public ActionResult LoadFundedReportList(PayrollFilterModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            ViewBag.BatchNO = _Util.Facade.CommissionFacade.GetLastBatchNo();
            ViewBag.TicketId = filter.TicketId;
            DateTime FilterStartDate = filter.StartDate;
            DateTime FilterEndDate = filter.EndDate;

            GlobalSetting glob = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CustomerListPageSize");
            if (glob != null)
            {
                filter.PageSize = Convert.ToInt32(glob.Value);
            }
            else
            {
                filter.PageSize = 10;
            }
            if (filter.PageNo == null || filter.PageNo == 0)
            {
                filter.PageNo = 1;
            }
            bool IsPaid = true;
            if (filter.IsPaid.HasValue && filter.IsPaid.Value == false)
            {
                IsPaid = false;
            }
            ViewBag.IsPaid = IsPaid;
            string FilterText = filter.FilterText;
            string TicketType = "";
            if (filter.TicketType != null)
            {
                foreach (var item in filter.TicketType)
                {
                    TicketType += string.Format("'{0}',", item);
                }
                TicketType = TicketType.Remove(TicketType.Length - 1, 1);
            }
            if (filter.GetReport == true)
            {
                DataTable dt;
                if (FilterStartDate != new DateTime() && FilterEndDate != new DateTime())
                {
                    dt = _Util.Facade.TicketFacade.GetDownLoadFundedCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, filter.SearchText, IsPaid, FilterText, "", "", TicketType);
                    // dt = _Util.Facade.TicketFacade.GetDownLoadAdjustmentFundingReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, FilterText);

                }
                else
                {
                    dt = _Util.Facade.TicketFacade.GetDownLoadFundedCommisionReport(new DateTime(), new DateTime(), filter.order, filter.PageNo.Value, filter.PageSize.Value, filter.SearchText, IsPaid, FilterText, "", "", TicketType);
                }

                int[] colarray = { 8, 9, 10, 11, 12, 13, 14, 15, 16 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "Weekly Payroll", rowarray, colarray);
            }

            //EmpTechCommisionReport model = _Util.Facade.EmployeeFacade.GetAllTechCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid);
            FundedCommisionReport model = _Util.Facade.TicketFacade.GetAllFundedCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, filter.SearchText, IsPaid, FilterText, "", "", filter.TicketId);
            ViewBag.order = filter.order; ;
            if (model.PayrollTotalCount.CountTotal == 0)
            {
                filter.PageNo = 1;
            }

            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;


            if (model.PayrollReportList.Count() > 0)
            {
                ViewBag.OutOfNumber = model.PayrollTotalCount.CountTotal;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize.Value);

            return View(model);
        }

        public ActionResult AddAdjustment(int? Id)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            AdjustmentFunding model = new AdjustmentFunding();
            if (Id.HasValue && Id > 0)
            {
                model = _Util.Facade.PayrollFacade.GetAdjustmentFundingById(Id.Value);
            }
            #region Viewbag
            List<SelectListItem> EmpList = new List<SelectListItem>();
            EmpList.Add(new SelectListItem()
            {
                Text = "Select Employee",
                Value = "-1"
            });
            List<Employee> EmployeeDropDown = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value);
            if (EmployeeDropDown != null && EmployeeDropDown.Count > 0)
            {
                EmpList.AddRange(EmployeeDropDown.OrderBy(x => x.FirstName).Select(x => new SelectListItem()
                {
                    Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                    Value = x.UserId.ToString()
                }).ToList());
            }
            ViewBag.EmpList = EmpList;
            #endregion
            return View(model);
        }
        [Authorize]
        [HttpPost]
        public JsonResult AddAdjustment(AdjustmentFunding _funding)
        {
            var result = false;
            string message = "";
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            try
            {
                if (_funding.Id > 0)
                {
                    var adjustmentFundingDetails = _Util.Facade.PayrollFacade.GetAdjustmentFundingById(_funding.Id);
                    if (adjustmentFundingDetails != null)
                    {
                        adjustmentFundingDetails.UserId = _funding.UserId;
                        adjustmentFundingDetails.Reason = _funding.Reason;
                        adjustmentFundingDetails.Amount = _funding.Amount;
                        adjustmentFundingDetails.Date = _funding.Date;
                        result = _Util.Facade.TicketFacade.UpdateAddjustmentFunding(adjustmentFundingDetails) > 0;
                    }
                }
                else
                {
                    _funding.AdjustmentId = Guid.NewGuid();
                    _funding.CreatedBy = currentLoggedIn.UserId;
                    _funding.CreatedDate = DateTime.Now.UTCCurrentTime();
                    _funding.IsPaid = false;
                    result = _Util.Facade.TicketFacade.InsertAddjustmentFunding(_funding) > 0;
                    message = "Added Successfully.";
                }
            }
            catch (Exception ex)
            {
                message = "Adding Failed!";
            }

            return Json(new { result = result, message = message });
        }
        public JsonResult DeleteAdjustment(int Id)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            bool result = false;
            if (Id > 0)
            {
                result = _Util.Facade.PayrollFacade.DeleteAdjustmentFunding(Id);
            }
            return Json(new { result = result });
        }
        public ActionResult LoadAdjustmentFundingList(PayrollFilterModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            ViewBag.BatchNO = _Util.Facade.CommissionFacade.GetLastBatchNo();
            DateTime FilterStartDate = filter.StartDate;
            DateTime FilterEndDate = filter.EndDate;

            GlobalSetting glob = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CustomerListPageSize");
            if (glob != null)
            {
                filter.PageSize = Convert.ToInt32(glob.Value);
            }
            else
            {
                filter.PageSize = 10;
            }
            if (filter.PageNo == null || filter.PageNo == 0)
            {
                filter.PageNo = 1;
            }
            bool IsPaid = true;
            if (filter.IsPaid.HasValue && filter.IsPaid.Value == false)
            {
                IsPaid = false;
            }
            ViewBag.IsPaid = IsPaid;
            string FilterText = filter.FilterText;
            string SearchText = filter.SearchText;
            if (filter.GetReport == true)
            {
                DataTable dt;
                if (FilterStartDate != new DateTime() && FilterEndDate != new DateTime())
                {
                    dt = _Util.Facade.TicketFacade.GetDownloadAdjustmentReport(FilterStartDate, FilterEndDate, filter.order, IsPaid, FilterText, SearchText);

                }
                else
                {
                    dt = _Util.Facade.TicketFacade.GetDownloadAdjustmentReport(new DateTime(), new DateTime(), filter.order, IsPaid, FilterText, SearchText);
                }

                dt.Columns.Remove("Id");
                int[] colarray = { 2 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "Adjustment", rowarray, colarray);
            }
            AdjustmentFundingReport model = _Util.Facade.TicketFacade.GetAllAdjustmentFundingReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, FilterText, SearchText);
            ViewBag.order = filter.order; ;
            if (model.PayrollTotalCount.CountTotal == 0)
            {
                filter.PageNo = 1;
            }

            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;


            if (model.PayrollReportList.Count() > 0)
            {
                ViewBag.OutOfNumber = model.PayrollTotalCount.CountTotal;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize.Value);

            return View(model);
        }
        public ActionResult LoadUserPaymentList(PayrollFilterModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;

            DateTime FilterStartDate = filter.StartDate;
            DateTime FilterEndDate = filter.EndDate;

            GlobalSetting glob = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "CustomerListPageSize");
            if (glob != null)
            {
                filter.PageSize = Convert.ToInt32(glob.Value);
            }
            else
            {
                filter.PageSize = 10;
            }
            if (filter.PageNo == null || filter.PageNo == 0)
            {
                filter.PageNo = 1;
            }
            bool IsPaid = true;

            ViewBag.IsPaid = IsPaid;
            string FilterText = filter.FilterText;
            string UserGroup = filter.UserGroup;
            string TicketType = "";
            if (filter.TicketType != null)
            {
                foreach (var item in filter.TicketType)
                {
                    TicketType += string.Format("'{0}',", item);
                }
                TicketType = TicketType.Remove(TicketType.Length - 1, 1);
            }
            if (filter.GetReport == true)
            {
                DataTable dt;
                if (FilterStartDate != new DateTime() && FilterEndDate != new DateTime())
                {
                    dt = _Util.Facade.TicketFacade.GetDownLoadFundedCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, filter.SearchText, IsPaid, FilterText, "UserPayment", UserGroup, TicketType);

                }
                else
                {
                    dt = _Util.Facade.TicketFacade.GetDownLoadFundedCommisionReport(new DateTime(), new DateTime(), filter.order, filter.PageNo.Value, filter.PageSize.Value, filter.SearchText, IsPaid, FilterText, "UserPayment", UserGroup, TicketType);
                }


                return MakeExcelFromDataTable(dt, "UserPayment", null, null);
            }
            //EmpTechCommisionReport model = _Util.Facade.EmployeeFacade.GetAllTechCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid);
            FundedCommisionReport model = _Util.Facade.TicketFacade.GetAllFundedCommisionReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, filter.SearchText, IsPaid, FilterText, UserGroup, TicketType, filter.TicketId);
            ViewBag.order = filter.order; ;
            if (model.PayrollTotalCount.CountTotal == 0)
            {
                filter.PageNo = 1;
            }

            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;


            if (model.PayrollReportList.Count() > 0)
            {
                ViewBag.OutOfNumber = model.PayrollTotalCount.CountTotal;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize.Value);

            return View(model);
        }
        [Authorize]
        public ActionResult GetAllEmploployeePayrollReport(string StrStartDate, string StrEndDate, string FilterWeek, string order, string CurrentEmployee)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            CultureInfo ci = new CultureInfo("en-US");
            //2018 / 32
            int Year = 2018;
            int Week = 33;
            Guid userid = new Guid();

            #region Date Offset
            string FirstDayOfWeek = _Util.Facade.GlobalSettingsFacade.GetStartDayOfWeek(CurrentUser.CompanyId.Value);
            int DateOffset = 0;
            if (FirstDayOfWeek == "Saturday")
            {
                DateOffset = -1;
            }
            else if (FirstDayOfWeek == "Monday")
            {
                DateOffset = 1;
            }

            #endregion

            if (FilterWeek.Split('/').Length == 2)
            {
                int.TryParse(FilterWeek.Split('/')[0], out Year);
                int.TryParse(FilterWeek.Split('/')[1], out Week);
            }
            Week = Week - 2;
            DateTime FilterStartDate = FirstDateOfWeek(Year, Week, ci, DateOffset);
            DateTime FilterEndDate = FilterStartDate.AddDays(6).SetMaxHour();
            FilterStartDate = Convert.ToDateTime(StrStartDate);
            FilterEndDate = Convert.ToDateTime(StrEndDate);
            if (!IsPermitted(UserPermissions.CustomerPermissions.ShowAllPayroll))
            {
                userid = CurrentUser.UserId;
            }
            PayrollFilterModel payrolFilter = new PayrollFilterModel();
            payrolFilter.StartDate = FilterStartDate;
            payrolFilter.EndDate = FilterEndDate;
            payrolFilter.CurrentEmployee = CurrentEmployee;
            EmpPayrollFilters model = _Util.Facade.TimeClockFacade.GetAllPayrollReportForReports(CurrentUser.UserId, FilterStartDate, FilterEndDate, order, 1, 1000, userid, CurrentEmployee);
            if (model.ListEmpPayrollReport.Count > 0)
            {
                foreach (var item in model.ListEmpPayrollReport)
                {
                    if (item.OTOHours < 0)
                    {
                        item.OTOHours = 0;
                    }
                }
            }

            ListtoDataTableConverter converter = new ListtoDataTableConverter();

            DataTable table = converter.ToDataTable(model.ListEmpPayrollReport);
            table.Columns.Remove("Id");
            table.Columns["UserId"].ColumnName = "Id";
            table.Columns["EmpName"].ColumnName = "Name of Employee";
            table.Columns["RegularHours"].ColumnName = "Regular Hours";
            table.Columns["OTOHours"].ColumnName = "OT Hours";
            table.Columns["PTOHours"].ColumnName = "PTO Hours";
            table.Columns["HourlyRate"].ColumnName = "Hourly Rate";
            table.Columns["totalpay"].ColumnName = "Total Pay";

            DataTable dtCloned = table.Clone();
            dtCloned.Columns["Total Pay"].DataType = typeof(double);
            dtCloned.Columns["Hourly Rate"].DataType = typeof(double);
            if (table.Rows.Count > 0)
            {
                foreach (DataRow row in table.Rows)
                {
                    dtCloned.ImportRow(row);
                }

            }


            int[] colarray = { 6, 7 };
            int[] rowarray = { dtCloned.Rows.Count + 2 };
            return MakeExcelFromDataTableForPayroll(dtCloned, "Payroll", FilterStartDate, rowarray, colarray);
        }

        public class ListtoDataTableConverter
        {

            public DataTable ToDataTable<T>(List<T> items)

            {

                DataTable dataTable = new DataTable(typeof(T).Name);

                //Get all the properties

                PropertyInfo[] Props = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);

                foreach (PropertyInfo prop in Props)

                {

                    //Setting column names as Property names

                    dataTable.Columns.Add(prop.Name);

                }

                foreach (T item in items)

                {

                    var values = new object[Props.Length];

                    for (int i = 0; i < Props.Length; i++)

                    {

                        //inserting property values to datatable rows

                        values[i] = Props[i].GetValue(item, null);

                    }

                    dataTable.Rows.Add(values);

                }

                //put a breakpoint here and check datatable

                return dataTable;

            }

        }


        public ActionResult GetAllEmploployeeTimeClockReport(string userId, DateTime WeekStr, DateTime WeekEnd)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;

            DateTime StartDate = WeekStr;
            DateTime EndDate = WeekEnd;
            List<EmployeeTimeClock> dt = new List<EmployeeTimeClock>();
            //StartDate = StartDate.ClientToUTCTime();
            //EndDate = EndDate.ClientToUTCTime();

            if (!string.IsNullOrWhiteSpace(userId) && userId != "null")
            {
                string[] splituser = userId.Split(',');
                if (splituser.Length > 0)
                {
                    if (splituser[0] == "All")
                    {
                        splituser[0] = new Guid().ToString();
                    }
                    userId = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
                dt = _Util.Facade.TimeClockFacade.GetAllEmploployeeTimeClockReport(userId, StartDate, EndDate);
            }
            else
            {

                dt = _Util.Facade.TimeClockFacade.GetAllEmploployeeTimeClockReport(CurrentUser.UserId.ToString(), StartDate, EndDate);
            }
            List<TimeClockReport> report = new List<TimeClockReport>();
            TimeClockReport timeReport;
            string answer = "00:00:00";
            string thour = "00.00 hrs";
            foreach (var item in dt)
            {
                timeReport = new TimeClockReport();

                if (item.ClockedInSeconds > 0)
                {
                    TimeSpan t = TimeSpan.FromSeconds(Convert.ToDouble(item.ClockedInSeconds));
                    answer = string.Format("{0:D2}:{1:D2}:{2:D2}",
                                        ((t.Days * 24) + t.Hours),
                                        t.Minutes,
                                        t.Seconds);
                    thour = string.Format("{0:00.00}", (t.TotalHours + (t.Minutes > 0 ? t.Minutes / 60 : 0)));
                    timeReport.TimeSpent = answer;
                    timeReport.TotalHours = thour;
                }

                timeReport.Name = item.LastUpdatedName;
                timeReport.ClockInDate = item.ClockInTime.UTCToClientTime().ToString("MM/dd/yy");
                timeReport.ClockInTime = LabelHelper.TimeFormatUsingDateTime.For12Hours(item.ClockInTime.UTCToClientTime());
                timeReport.ClockInNote = item.ClockInNote;
                timeReport.ClockOutDate = item.ClockOutTime.HasValue && item.ClockOutTime.Value != new DateTime() ? item.ClockOutTime.Value.UTCToClientTime().ToString("MM/dd/yy") : "";
                timeReport.ClockOuTime = item.ClockOutTime.HasValue && item.ClockOutTime.Value != new DateTime() ? LabelHelper.TimeFormatUsingDateTime.For12Hours(item.ClockOutTime.Value.UTCToClientTime()) : "";
                timeReport.ClockOutNote = item.ClockOutNote;
                //timeReport.Note = item.ClockInNote;
                //timeReport.ClockInOut = item.Type;
                report.Add(timeReport);

            }
            ListtoDataTableConverter converter = new ListtoDataTableConverter();

            DataTable table = converter.ToDataTable(report);

            //table.Columns["ClockInOut"].ColumnName = "Clock In/Out";
            table.Columns["TimeSpent"].ColumnName = "Time Spent";
            return MakeExcelFromDataTable(table, "TimeClock", null, null);
        }

        public ActionResult GetAllSalesReport()
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            AllSalesInfoModel SalesInfo = _Util.Facade.TransactionFacade.GetAllTransactionsByCompanyIdForReport(CurrentUser.CompanyId.Value);

            ListtoDataTableConverter converter = new ListtoDataTableConverter();
            DataTable table = converter.ToDataTable(SalesInfo.TransactionList);
            return MakeExcelFromDataTable(table, "Sales", null, null);
        }

        public ActionResult GetAllARBReport(AllInvoicesFilter filter, string BillicycleIdList, string InvoicestatusIdList)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            filter.CompanyId = CurrentUser.CompanyId.Value;

            //AllInvoicesModel SalesARBInfo = _Util.Facade.InvoiceFacade.GetAllInvoiceByCompanyIdForReport(filter); 
            //ListtoDataTableConverter converter = new ListtoDataTableConverter();
            //DataTable table = converter.ToDataTable(SalesARBInfo.InvoiceList);
            List<string> billcycle = new List<string>();

            if (!string.IsNullOrWhiteSpace(BillicycleIdList))
            {
                string[] BillList = BillicycleIdList.Split(',');
                if (BillList != null)
                {
                    foreach (var item in BillList)
                    {
                        billcycle.Add(item);
                    }
                }

            }
            ViewBag.BilCycleList = billcycle;

            List<string> invoicestatus = new List<string>();

            if (!string.IsNullOrWhiteSpace(InvoicestatusIdList))
            {
                string[] InvList = InvoicestatusIdList.Split(',');
                if (InvList != null)
                {
                    foreach (var item in InvList)
                    {
                        invoicestatus.Add(item);
                    }
                }

            }
            ViewBag.InvoiceStatusList = invoicestatus;
            filter.PageNo = 1;
            filter.PageSize = 50000;

            #region not in use
            //var Invoices = _Util.Facade.InvoiceFacade.DownLoadAllInvoicesByfilter(filter, BillicycleIdList, InvoicestatusIdList);
            //ListtoDataTableConverter converter = new ListtoDataTableConverter();
            //DataTable table2 = converter.ToDataTable(Invoices.ARBInvoiceDownLoadModelList);
            #endregion
            DataTable dt;
            dt = _Util.Facade.InvoiceFacade.DownloadArbInvoiceReport(filter, BillicycleIdList, InvoicestatusIdList);


            if (!string.IsNullOrWhiteSpace(filter.InvoiceFor) &&
                (filter.InvoiceFor == "SystemGenerated" || filter.InvoiceFor == "UnsettledCustomers"))
            {
                dt.Columns.Remove("TransactionId");
                dt.Columns[5].ColumnName = "Created Date";
                dt.Columns.Remove("Id");

            }
            else
            {
                dt.Columns.Remove("Id");

                dt.Columns.Remove("Status");
            }




            //table2.Columns[8].Caption = "Status";

            string fileName = "";
            if (!string.IsNullOrWhiteSpace(filter.InvoiceFor))
            {
                fileName = filter.InvoiceFor;
            }
            int[] colarray = { 4 };
            int[] rowarray = { dt.Rows.Count + 2 };
            return MakeExcelFromDataTable(dt, "SalesARB" + fileName, rowarray, colarray);
        }


        public ActionResult GetAllPtoReport(Guid? userId, DateTime WeekStr, DateTime WeekEnd, string status, string isOwnPto, bool? getreport)
        {
            PtoFilterModel model = new PtoFilterModel();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;

            DateTime StartDate = WeekStr;
            DateTime EndDate = WeekEnd;

            //StartDate = StartDate.ClientToUTCTime();
            //EndDate = EndDate.ClientToUTCTime();

            PayrollFilterModel payrolFilter = new PayrollFilterModel();
            payrolFilter.StartDate = StartDate;
            payrolFilter.EndDate = EndDate;
            payrolFilter.PtoStatus = status;
            List<EmpPtoReport> ptoReport = new List<EmpPtoReport>();
            EmpPtoReport report;

            List<Employee> empList = _Util.Facade.EmployeeFacade.GetEmployeeListBySupervisorId(CurrentUser.UserId);
            Employee em = _Util.Facade.EmployeeFacade.GetEmployeeByUserId(CurrentUser.UserId);

            double hrSum = 0;
            if (isOwnPto == "1")
            {
                model = _Util.Facade.PtoFacade.GetAllPtoByUserId(CurrentUser.UserId, payrolFilter, getreport);


                foreach (var item in model.ListPto)
                {
                    hrSum = 0;
                    if (item.UserId == CurrentUser.UserId)
                    {
                        if (item.Type == "FullDay")
                        {
                            hrSum = hrSum + 8;
                        }
                        else if (item.Type == "HalfDay")
                        {
                            hrSum = hrSum + 4;
                        }
                        else if (item.Type == "CustomTime" && !string.IsNullOrWhiteSpace(item.TimeTo) && !string.IsNullOrWhiteSpace(item.TimeFrom))
                        {
                            DateTime d1 = new DateTime();
                            d1 = Convert.ToDateTime(item.TimeTo);

                            DateTime d2 = new DateTime();
                            d2 = Convert.ToDateTime(item.TimeFrom);

                            TimeSpan ts = d1.Subtract(d2);
                            double customHour = Convert.ToDouble(ts.TotalMinutes) / 60;
                            //DateTime dt1 = DateTime.ParseExact(item.TimeTo, "HH:mm", new DateTimeFormatInfo());
                            //DateTime dt2 = DateTime.ParseExact(item.TimeFrom, "HH:mm", new DateTimeFormatInfo());
                            //TimeSpan ts = dt1.Subtract(dt2);
                            //double customHour = ts.TotalHours;
                            int TotalDays = (int)(Convert.ToDateTime(item.EndDate.Value) - Convert.ToDateTime(item.StartDate)).TotalDays;
                            if (TotalDays > 0)
                            {
                                customHour *= (TotalDays + 1);
                            }

                            hrSum = hrSum + customHour;
                        }
                        else if (item.Type == "MultipleDay")
                        {
                            int TotalDays = (int)(Convert.ToDateTime(item.EndDate.Value) - Convert.ToDateTime(item.StartDate)).TotalDays;
                            double customHour = (TotalDays + 1) * 8;
                            hrSum = hrSum + customHour;
                        }
                        report = new EmpPtoReport()
                        {
                            PtoHours = hrSum.ToString(),
                            PtoRates = em.PtoRate.ToString(),
                            TotalTime = em.PtoHour.ToString(),
                            User = em.FirstName + " " + em.LastName,
                        };
                        ptoReport.Add(report);
                    }



                }





            }

            else
            {
                bool isHrMgr = CurrentUser.UserTags.ToLower().IndexOf("hrmanager") != -1;
                model = _Util.Facade.PtoFacade.GetAllEmployeesPtoBySupervisorId(Guid.Empty, payrolFilter, isHrMgr, getreport);
                foreach (var emp in model.ListPto)
                {
                    hrSum = 0;

                    //if (emp.UserId == CurrentUser.UserId)
                    //{
                    if (emp.Type == "FullDay")
                    {
                        hrSum = hrSum + 8;
                    }
                    else if (emp.Type == "HalfDay")
                    {
                        hrSum = hrSum + 4;
                    }
                    else if (emp.Type == "CustomTime" && !string.IsNullOrWhiteSpace(emp.TimeTo) && !string.IsNullOrWhiteSpace(emp.TimeFrom))
                    {

                        DateTime d1 = new DateTime();
                        d1 = Convert.ToDateTime(emp.TimeTo);

                        DateTime d2 = new DateTime();
                        d2 = Convert.ToDateTime(emp.TimeFrom);

                        TimeSpan ts = d1.Subtract(d2);
                        double customHour = Convert.ToDouble(ts.TotalMinutes) / 60;

                        int TotalDays = (int)(Convert.ToDateTime(emp.EndDate.Value) - Convert.ToDateTime(emp.StartDate)).TotalDays;
                        if (TotalDays > 0)
                        {
                            customHour *= (TotalDays + 1);
                        }

                        hrSum = hrSum + customHour;
                    }

                    else if (emp.Type == "MultipleDay")
                    {
                        int TotalDays = (int)(Convert.ToDateTime(emp.EndDate.Value) - Convert.ToDateTime(emp.StartDate)).TotalDays;
                        double customHour = (TotalDays + 1) * 8;
                        hrSum = hrSum + customHour;
                    }
                    report = new EmpPtoReport()
                    {
                        PtoHours = hrSum.ToString(),
                        PtoRates = em.PtoRate.ToString(),
                        TotalTime = em.PtoHour.ToString(),
                        User = em.FirstName + em.LastName,
                    };
                    ptoReport.Add(report);
                    //}





                }
            }


            ListtoDataTableConverter converter = new ListtoDataTableConverter();

            DataTable table = converter.ToDataTable(ptoReport);
            //table.Columns.Add(new DataColumn
            //{
            //    ColumnName = "User"
            //});
            table.Columns["TotalTime"].ColumnName = "Total Time";
            table.Columns["PtoHours"].ColumnName = "Approved PTO Hours";
            table.Columns["PtoRates"].ColumnName = "PTO Rate";

            DataTable dtCloned = table.Clone();
            dtCloned.Columns["PTO Rate"].DataType = typeof(double);
            if (table.Rows.Count > 0)
            {
                foreach (DataRow row in table.Rows)
                {
                    dtCloned.ImportRow(row);
                }

            }


            int[] colarray = { 4 };
            int[] rowarray = { dtCloned.Rows.Count + 2 };
            return MakeExcelFromDataTable(dtCloned, "Pto", rowarray, colarray);
        }

        #region Make address
        private string MakeAddress(string street, string city, string state, string zipcode, string country)
        {
            string address = "";
            if (!string.IsNullOrWhiteSpace(street))
            {
                address += street + ",";
            }
            if (!string.IsNullOrWhiteSpace(city))
            {
                if (city != "-1")
                {
                    address += city + ",";
                }
            }
            if (!string.IsNullOrWhiteSpace(state))
            {
                if (state != "-1")
                {
                    address += state + ",";
                }
            }
            if (!string.IsNullOrWhiteSpace(zipcode))
            {
                address += zipcode + ",";
            }
            if (!string.IsNullOrWhiteSpace(country))
            {
                address += country + ",";
            }
            return address.TrimEnd(',');
        }
        #endregion
        #region MakeExcel
        private FileContentResult MakeExcelFromDataTable(DataTable dtResult, string ReportFor, int[] rowIndex, int[] coloumnIndex)
        {
            using (XLWorkbook wb = new XLWorkbook())
            {
                if (dtResult != null)
                {

                    var worksheet = wb.Worksheets.Add(dtResult);
                    if (ReportFor == "BrinksReport")
                    {
                        wb.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        wb.Style.Font.Bold = true;
                        worksheet.AutoFilter.Enabled = false;

                        /*/Excel Style /*/
                        //worksheet.Ranges("A1:D1").Style.Fill.PatternType = XLFillPatternValues.Solid;
                        //worksheet.Ranges("A1:D1").Style.Fill.BackgroundColor = XLColor.Yellow;
                        //worksheet.Style.Font.FontColor = XLColor.Black;
                        worksheet.Column(1).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(2).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(3).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(4).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(5).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(6).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(7).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(1).Style.Font.SetFontSize(12);
                        worksheet.Column(2).Style.Font.SetFontSize(12);
                        worksheet.Column(3).Style.Font.SetFontSize(12);
                        worksheet.Column(4).Style.Font.SetFontSize(12);
                        worksheet.Column(5).Style.Font.SetFontSize(12);
                        worksheet.Column(6).Style.Font.SetFontSize(12);
                        worksheet.Column(7).Style.Font.SetFontSize(12);

                        worksheet.Column(1).Width = 13.71;
                        worksheet.Column(2).Width = 13.71;
                        worksheet.Column(3).Width = 13.71;
                        worksheet.Column(4).Width = 13.71;
                        worksheet.Column(5).Width = 13.71;
                        worksheet.Column(6).Width = 13.71;
                        worksheet.Column(7).Width = 13.71;



                        worksheet.Column(1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        worksheet.Column(2).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        worksheet.Column(3).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        worksheet.Column(4).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Right;
                        worksheet.Column(5).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        worksheet.Column(6).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        worksheet.Column(7).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

                        worksheet.Ranges("A1:G1").Style.Font.Bold = true;
                        worksheet.Cells("A1:G1").Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        worksheet.Cells("A1:D1").Style.Font.SetFontSize(11);
                        worksheet.Cells("A1:D1").Style.Font.SetFontName("Calibri");
                        worksheet.Cells("A1:D1").Style.Font.SetBold();
                        worksheet.Cells("A1:G1").Style.Font.SetFontColor(XLColor.CoolBlack);
                        worksheet.Cells("A1:D1").Style.Fill.BackgroundColor = XLColor.Yellow;
                        worksheet.Cells("E1:G1").Style.Fill.BackgroundColor = XLColor.AshGrey;


                    }
                    var format = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey("CurrentCurrencyExcelFormat");
                    if (coloumnIndex != null && format != null && rowIndex != null)
                    {
                        foreach (int itemcol in coloumnIndex)
                        {
                            for (int i = 1; i < rowIndex[0]; i++)
                            {
                                worksheet.Cell(i, itemcol).Style.NumberFormat.Format = format.Value;

                            }
                        }
                    }



                    MemoryStream memorystreem = new MemoryStream();
                    wb.SaveAs(memorystreem);
                    var fName = string.Format("{0}-{1}.xlsx", ReportFor, DateTime.Now.UTCCurrentTime().ToString("MM/dd/yyyy"));

                    byte[] fileContents = memorystreem.ToArray();
                    var userAgent = HttpContext.Request.UserAgent.ToLower();
                    if (userAgent.Contains("iphone;") || userAgent.Contains("ipad;"))
                    {
                        //var newExFile= File(fileContents, Excel.Format("ExcelFormat"), fName);
                        //var excelApplicatiopn = new NsExcel.Application();
                        //excelApplicatiopn.Visible = true;
                        //NsExcel.Workbooks books = excelApplicatiopn.Workbooks;
                        //NsExcel.Workbook sheet = books.Open();
                        return File(fileContents, Excel.Format("ExcelFormat"), fName);
                    }
                    else
                    {
                        return File(fileContents, Excel.Format("ExcelFormat"), fName);
                    }
                }
                else
                {
                    byte[] fileContents = new byte[1];
                    return File(fileContents, Excel.Format("ExcelFormat"), "empty.xlsx");
                }
            }
        }
        private FileContentResult MakeExcelFromDataTableWithHeader(DataTable dtResult, string ReportFor, int[] rowIndex, int[] coloumnIndex, string businessName, string accountNumber, string estimatorNumber)
        {
            using (XLWorkbook wb = new XLWorkbook())
            {
                var worksheet = wb.Worksheets.Add("Estimate Report");

                worksheet.Cell(1, 1).Value = "Business Name:";
                worksheet.Cell(1, 2).Value = businessName;

                worksheet.Cell(2, 1).Value = "Acct Number:";
                worksheet.Cell(2, 2).Value = accountNumber;

                worksheet.Cell(3, 1).Value = "Estimate Number:";
                worksheet.Cell(3, 2).Value = estimatorNumber;

                worksheet.Range("A1:B3").Style.Font.SetBold();
                worksheet.Range("A1:A3").Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;

                worksheet.Cell(5, 1).InsertTable(dtResult);

                if (dtResult.Rows.Count > 0)
                {
                   
                    worksheet.Column(2).Style.NumberFormat.Format = "0"; 
                    worksheet.Column(6).Style.NumberFormat.Format = "0";

                    worksheet.Column(3).Style.NumberFormat.Format = "$#,##0.00";
                    worksheet.Column(4).Style.NumberFormat.Format = "$#,##0.00"; 
                    worksheet.Column(7).Style.NumberFormat.Format = "$#,##0.00";

                    worksheet.Column(5).Style.NumberFormat.Format = "$#,##0.00";
                    worksheet.Column(8).Style.NumberFormat.Format = "$#,##0.00";

                    for (int i = 2; i <= dtResult.Rows.Count + 1; i++)
                    {
                        worksheet.Cell(i, 2).Style.NumberFormat.Format = "0";
                        worksheet.Cell(i, 6).Style.NumberFormat.Format = "0";

                        worksheet.Cell(i, 7).Style.NumberFormat.Format = "$#,##0.00";

                        worksheet.Cell(i, 4).Style.NumberFormat.Format = "$#,##0.00";
                        worksheet.Cell(i, 5).Style.NumberFormat.Format = "$#,##0.00";
                        worksheet.Cell(i, 8).Style.NumberFormat.Format = "$#,##0.00";
                    }
                }

                var format = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey("CurrentCurrencyExcelFormat");
                if (coloumnIndex != null && format != null && rowIndex != null)
                {
                    foreach (int itemcol in coloumnIndex)
                    {
                        for (int i = 1; i < rowIndex[0]; i++)
                        {
                            worksheet.Cell(i + 5, itemcol).Style.NumberFormat.Format = format.Value;
                        }
                    }
                }

                MemoryStream memorystreem = new MemoryStream();
                wb.SaveAs(memorystreem);
                var fName = string.Format("{0}-{1}.xlsx", ReportFor, DateTime.UtcNow.ToString("yyyy-MM-dd"));

                byte[] fileContents = memorystreem.ToArray();
                return File(fileContents, Excel.Format("ExcelFormat"), fName);
            }
        }


        private FileContentResult MakeExcelFromDataTableForPayroll(DataTable dtResult, string ReportFor, DateTime? StartDate, int[] rowIndex, int[] coloumnIndex)
        {
            using (XLWorkbook wb = new XLWorkbook())
            {
                if (dtResult != null)
                {

                    var worksheet = wb.Worksheets.Add(dtResult);

                    var format = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey("CurrentCurrencyExcelFormat");
                    if (coloumnIndex != null && format != null && rowIndex != null)
                    {
                        foreach (int itemcol in coloumnIndex)
                        {
                            for (int i = 1; i < rowIndex[0]; i++)
                            {
                                var a = worksheet.Cell(i, itemcol).Style;
                                worksheet.Cell(i, itemcol).Style.NumberFormat.Format = format.Value;

                            }
                        }
                    }

                    MemoryStream memorystreem = new MemoryStream();
                    wb.SaveAs(memorystreem);
                    var fName = "";
                    if (StartDate.HasValue || StartDate != new DateTime())
                    {
                        fName = string.Format("{0}-{1}.xlsx", ReportFor, StartDate.Value.ToString("MM/dd/yyyy"));
                    }
                    else
                    {
                        fName = string.Format("{0}.xlsx", ReportFor);
                    }


                    byte[] fileContents = memorystreem.ToArray();
                    var userAgent = HttpContext.Request.UserAgent.ToLower();
                    if (userAgent.Contains("iphone;") || userAgent.Contains("ipad;"))
                    {
                        //var newExFile= File(fileContents, Excel.Format("ExcelFormat"), fName);
                        //var excelApplicatiopn = new NsExcel.Application();
                        //excelApplicatiopn.Visible = true;
                        //NsExcel.Workbooks books = excelApplicatiopn.Workbooks;
                        //NsExcel.Workbook sheet = books.Open();
                        return File(fileContents, Excel.Format("ExcelFormat"), fName);
                    }
                    else
                    {
                        return File(fileContents, Excel.Format("ExcelFormat"), fName);
                    }
                }
                else
                {
                    byte[] fileContents = new byte[1];
                    return File(fileContents, Excel.Format("ExcelFormat"), "empty.xlsx");
                }
            }
        }
        private FileContentResult MakeExcelFromDataSet(DataSet dsResult, string ReportFor)
        {
            using (XLWorkbook wb = new XLWorkbook())
            {
                if (dsResult != null)
                {
                    int cus = 0;
                    //wb.Worksheets.Add(dsResult.Tables[1]);
                    //wb.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    //wb.Style.Font.Bold = true;
                    for (int k = 0; k < dsResult.Tables.Count; k++)
                    {
                        DataTable dt = dsResult.Tables[k];
                        IXLWorksheet Sheet = wb.Worksheets.Add(dt.Columns[cus].ColumnName);

                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            for (int j = 0; j < dt.Columns.Count; j++)
                            {
                                Sheet.Cell((i + 2), (j + 1)).Value = dt.Rows[i][j].ToString();
                            }
                        }
                        cus = cus + 1;
                    }

                    MemoryStream memorystreem = new MemoryStream();
                    wb.SaveAs(memorystreem);
                    var fName = string.Format("{0}-{1}.xlsx", ReportFor, DateTime.Now.UTCCurrentTime().ToString("MM/dd/yyyy"));

                    byte[] fileContents = memorystreem.ToArray();

                    return File(fileContents, Excel.Format("ExcelFormat"), fName);

                }
                else
                {
                    byte[] fileContents = new byte[1];
                    return File(fileContents, Excel.Format("ExcelFormat"), "empty.xlsx");
                }
            }

        }

        private FileContentResult MakeExcelEstimatorFromDataTable(DataTable dtResult, DataTable dtResult2, string ReportFor, int[] rowIndex, int[] coloumnIndex)
        {
            using (XLWorkbook wb = new XLWorkbook())
            {
                if (dtResult != null)
                {

                    var worksheet = wb.Worksheets.Add(dtResult);
                    if (ReportFor == "BrinksReport")
                    {
                        wb.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        wb.Style.Font.Bold = true;
                        worksheet.AutoFilter.Enabled = false;

                        /*/Excel Style /*/
                        //worksheet.Ranges("A1:D1").Style.Fill.PatternType = XLFillPatternValues.Solid;
                        //worksheet.Ranges("A1:D1").Style.Fill.BackgroundColor = XLColor.Yellow;
                        //worksheet.Style.Font.FontColor = XLColor.Black;
                        worksheet.Column(1).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(2).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(3).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(4).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(5).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(6).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(7).Style.Font.SetFontName("Times New Roman");
                        worksheet.Column(1).Style.Font.SetFontSize(12);
                        worksheet.Column(2).Style.Font.SetFontSize(12);
                        worksheet.Column(3).Style.Font.SetFontSize(12);
                        worksheet.Column(4).Style.Font.SetFontSize(12);
                        worksheet.Column(5).Style.Font.SetFontSize(12);
                        worksheet.Column(6).Style.Font.SetFontSize(12);
                        worksheet.Column(7).Style.Font.SetFontSize(12);

                        worksheet.Column(1).Width = 13.71;
                        worksheet.Column(2).Width = 13.71;
                        worksheet.Column(3).Width = 13.71;
                        worksheet.Column(4).Width = 13.71;
                        worksheet.Column(5).Width = 13.71;
                        worksheet.Column(6).Width = 13.71;
                        worksheet.Column(7).Width = 13.71;



                        worksheet.Column(1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        worksheet.Column(2).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        worksheet.Column(3).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        worksheet.Column(4).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Right;
                        worksheet.Column(5).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        worksheet.Column(6).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        worksheet.Column(7).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

                        worksheet.Ranges("A1:G1").Style.Font.Bold = true;
                        worksheet.Cells("A1:G1").Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        worksheet.Cells("A1:D1").Style.Font.SetFontSize(11);
                        worksheet.Cells("A1:D1").Style.Font.SetFontName("Calibri");
                        worksheet.Cells("A1:D1").Style.Font.SetBold();
                        worksheet.Cells("A1:G1").Style.Font.SetFontColor(XLColor.CoolBlack);
                        worksheet.Cells("A1:D1").Style.Fill.BackgroundColor = XLColor.Yellow;
                        worksheet.Cells("E1:G1").Style.Fill.BackgroundColor = XLColor.AshGrey;


                    }
                    var format = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey("CurrentCurrencyExcelFormat");
                    if (coloumnIndex != null && format != null && rowIndex != null)
                    {
                        foreach (int itemcol in coloumnIndex)
                        {
                            for (int i = 1; i < rowIndex[0]; i++)
                            {
                                worksheet.Cell(i, itemcol).Style.NumberFormat.Format = format.Value;

                            }
                        }
                    }



                    MemoryStream memorystreem = new MemoryStream();
                    wb.SaveAs(memorystreem);
                    var fName = string.Format("{0}-{1}.xlsx", ReportFor, DateTime.Now.UTCCurrentTime().ToString("MM/dd/yyyy"));

                    byte[] fileContents = memorystreem.ToArray();
                    var userAgent = HttpContext.Request.UserAgent.ToLower();
                    if (userAgent.Contains("iphone;") || userAgent.Contains("ipad;"))
                    {
                        //var newExFile= File(fileContents, Excel.Format("ExcelFormat"), fName);
                        //var excelApplicatiopn = new NsExcel.Application();
                        //excelApplicatiopn.Visible = true;
                        //NsExcel.Workbooks books = excelApplicatiopn.Workbooks;
                        //NsExcel.Workbook sheet = books.Open();
                        return File(fileContents, Excel.Format("ExcelFormat"), fName);
                    }
                    else
                    {
                        return File(fileContents, Excel.Format("ExcelFormat"), fName);
                    }
                }
                else
                {
                    byte[] fileContents = new byte[1];
                    return File(fileContents, Excel.Format("ExcelFormat"), "empty.xlsx");
                }
            }
        }
        #endregion
        #region ListToDataTable
        //public DataTable ListToDataTable<T>(IList<T> data)
        //{

        //    PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(typeof(T));

        //    DataTable table = new DataTable("WorkSheet");

        //    foreach (PropertyDescriptor prop in properties)
        //    {
        //        table.Columns.Add(prop.Name, Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType);
        //    }
        //    foreach (T item in data)

        //    {

        //        DataRow row = table.NewRow();

        //        foreach (PropertyDescriptor prop in properties)

        //            row[prop.Name] = prop.GetValue(item) ?? DBNull.Value;

        //        table.Rows.Add(row);

        //    }

        //    return table;

        //}
        #endregion

        private static DateTime FirstDateOfWeek(int year, int weekOfYear, System.Globalization.CultureInfo ci, int DateOffSet = 0)
        {
            DateTime jan1 = new DateTime(year, 1, 1);
            int daysOffset = (int)ci.DateTimeFormat.FirstDayOfWeek - (int)jan1.DayOfWeek;
            DateTime firstWeekDay = jan1.AddDays(daysOffset);
            int firstWeek = ci.Calendar.GetWeekOfYear(jan1, ci.DateTimeFormat.CalendarWeekRule, ci.DateTimeFormat.FirstDayOfWeek);
            if ((firstWeek <= 1 || firstWeek >= 52) && daysOffset >= -3)
            {
                weekOfYear -= 1;
            }
            return firstWeekDay.AddDays(weekOfYear * 7).AddDays(DateOffSet);
        }

        public ActionResult GetLeadsServiceAndEquipment(Guid customerid)
        {
            LeadReportServiceAndEquipmentModel model = _Util.Facade.EquipmentFacade.GetAllSmartLeadServicesAndEquipmentsByCustomerId(customerid);
            return View(model);
        }

        public ActionResult GetLeadsServiceAndEquipmentCustomer(Guid customerid)
        {
            LeadReportServiceAndEquipmentModel model = _Util.Facade.EquipmentFacade.GetAllSmartLeadServicesAndEquipmentsByCustomerId(customerid);
            return View(model);
        }

        public ActionResult InventoryReportPartial()
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}
            List<string> eqcategory = new List<string>();
            List<string> manulist = new List<string>();

            List<string> listprimaryVendor = new List<string>();
            List<string> listproductType = new List<string>();



            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            string newCookie = "";







            List<SelectListItem> eqpCategory = new List<SelectListItem>();
            //eqpCategory.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            eqpCategory.AddRange(_Util.Facade.EquipmentFacade.GetAllEquipmentType().OrderBy(x => x.Id.ToString() != "-1").ThenBy(x => x.Name.ToString()).Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.Id.ToString()
            }).ToList());
            ViewBag.eqpCategory = eqpCategory;
            List<SelectListItem> manufacturer = new List<SelectListItem>();
            //manufacturer.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            manufacturer.AddRange(_Util.Facade.EquipmentFacade.GetAllManufacturer().OrderBy(x => x.ManufacturerId.ToString() != "-1").ThenBy(x => x.Name.ToString()).Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.ManufacturerId.ToString()
            }).ToList());

            List<SelectListItem> primaryVendor = new List<SelectListItem>();
            primaryVendor.AddRange(_Util.Facade.SupplierFacade.GetAllSupplier().OrderBy(x => x.CompanyName.ToString() != "-1").ThenBy(x => x.CompanyName.ToString()).Select(x => new SelectListItem()
            {
                Text = x.CompanyName.ToString(),
                Value = x.CompanyName.ToString()
            }).ToList());
            List<SelectListItem> productType = new List<SelectListItem>();
            productType.Add(new SelectListItem()
            {
                Text = "Equipment",
                Value = "1"
            });
            productType.Add(new SelectListItem()
            {
                Text = "Service",
                Value = "2"
            });
            //productType.AddRange(_Util.Facade.EquipmentFacade.GetAllManufacturer().Select(x => new SelectListItem()
            //{
            //    Text = x.Name.ToString(),
            //    Value = x.ManufacturerId.ToString()
            //}).ToList());

            ViewBag.productType = productType;
            ViewBag.primaryVendor = primaryVendor;
            ViewBag.manufacturer = manufacturer;
            ViewBag.listcategory = eqcategory;
            ViewBag.listmanu = manulist;


            ViewBag.listprimaryVendor = listprimaryVendor;
            ViewBag.listproductType = listproductType;


            return View();
        }

        public ActionResult InventoryReportPartialList(string Start, string End, bool? GetReport, string category, string manufact, int pageno, int pagesize, string SearchText, string ProductTypeID, string primaryVendorID, string order)
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}
            List<string> eqcategory = new List<string>();
            List<string> manulist = new List<string>();

            List<string> listprimaryVendor = new List<string>();
            List<string> listproductType = new List<string>();



            if (!string.IsNullOrWhiteSpace(category))
            {
                string[] splituser = category.Split(',');
                if (splituser.Length > 0)
                {
                    category = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {
                        eqcategory.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(manufact))
            {
                string[] splituser = manufact.Split(',');
                if (splituser.Length > 0)
                {
                    manufact = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        manulist.Add(item);
                    }
                }
            }

            if (!string.IsNullOrWhiteSpace(ProductTypeID))
            {
                string[] splituser = ProductTypeID.Split(',');
                if (splituser.Length > 0)
                {
                    ProductTypeID = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        listproductType.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(primaryVendorID))
            {
                string[] splituser = primaryVendorID.Split(',');
                if (splituser.Length > 0)
                {
                    primaryVendorID = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        listprimaryVendor.Add(item);
                    }
                }
            }



            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.InventoryFacade.GetGetEquipmentReportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, category, manufact, SearchText, ProductTypeID, primaryVendorID);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.InventoryFacade.GetGetEquipmentReportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, category, manufact, SearchText, ProductTypeID, primaryVendorID);
                    }
                    else
                    {
                        dt = _Util.Facade.InventoryFacade.GetGetEquipmentReportByCompanyId(CurrentUser.CompanyId.Value, new DateTime(), new DateTime(), category, manufact, SearchText, ProductTypeID, primaryVendorID);
                    }

                }
                int[] colarray = { 6 };
                int[] rowarray = { dt.Rows.Count + 2 };

                return MakeExcelFromDataTable(dt, "WarehouseInventoryReport", rowarray, colarray);
            }
            EquipmentListWithCountModel Model = new EquipmentListWithCountModel();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();

                Model = _Util.Facade.InventoryFacade.GetEquipmentListByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, category, manufact, pageno, pagesize, SearchText, ProductTypeID, primaryVendorID, order);
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.InventoryFacade.GetEquipmentListByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, category, manufact, pageno, pagesize, SearchText, ProductTypeID, primaryVendorID, order);
                }
                else
                {
                    Model = _Util.Facade.InventoryFacade.GetEquipmentListByCompanyId(CurrentUser.CompanyId.Value, new DateTime(), new DateTime(), category, manufact, pageno, pagesize, SearchText, ProductTypeID, primaryVendorID, order);
                }
            }
            ViewBag.TotalLeads = Model.TotalEquipmentCount.Counter;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            List<SelectListItem> eqpCategory = new List<SelectListItem>();
            //eqpCategory.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            eqpCategory.AddRange(_Util.Facade.EquipmentFacade.GetAllEquipmentType().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.Id.ToString()
            }).ToList());
            ViewBag.eqpCategory = eqpCategory;
            List<SelectListItem> manufacturer = new List<SelectListItem>();
            //manufacturer.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            manufacturer.AddRange(_Util.Facade.EquipmentFacade.GetAllManufacturer().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.ManufacturerId.ToString()
            }).ToList());

            List<SelectListItem> primaryVendor = new List<SelectListItem>();
            primaryVendor.AddRange(_Util.Facade.SupplierFacade.GetAllSupplier().Select(x => new SelectListItem()
            {
                Text = x.CompanyName.ToString(),
                Value = x.CompanyName.ToString()
            }).ToList());
            List<SelectListItem> productType = new List<SelectListItem>();
            productType.Add(new SelectListItem()
            {
                Text = "Equipment",
                Value = "1"
            });
            productType.Add(new SelectListItem()
            {
                Text = "Service",
                Value = "2"
            });
            //productType.AddRange(_Util.Facade.EquipmentFacade.GetAllManufacturer().Select(x => new SelectListItem()
            //{
            //    Text = x.Name.ToString(),
            //    Value = x.ManufacturerId.ToString()
            //}).ToList());

            ViewBag.productType = productType;
            ViewBag.primaryVendor = primaryVendor;
            ViewBag.manufacturer = manufacturer;
            ViewBag.listcategory = eqcategory;
            ViewBag.listmanu = manulist;


            ViewBag.listprimaryVendor = listprimaryVendor;
            ViewBag.listproductType = listproductType;
            ViewBag.searchtext = SearchText;




            if (Model.EquipmentList.Count() == 0)
            {
                pageno = 1;
                //customerfilterlist = _Util.Facade.CustomerFacade.GetCustomerByFilter(filter);
            }

            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;


            if (Model.EquipmentList.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalEquipmentCount.Counter;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }

        public ActionResult TruckInventoryReportPartial()
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}
            List<string> eqcategory = new List<string>();
            List<string> manulist = new List<string>();
            List<string> listtech = new List<string>();

            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            List<SelectListItem> eqpCategory = new List<SelectListItem>();

            eqpCategory.AddRange(_Util.Facade.EquipmentFacade.GetAllEquipmentType().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.Id.ToString()
            }).OrderBy(item => item.Text).ToList());
            ViewBag.eqpCategory = eqpCategory;
            List<SelectListItem> manufacturer = new List<SelectListItem>();
            //manufacturer.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            manufacturer.AddRange(_Util.Facade.EquipmentFacade.GetAllManufacturer().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.ManufacturerId.ToString()
            }).OrderBy(item => item.Text).ToList());
            List<SelectListItem> techlist = new List<SelectListItem>();
            //techlist.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            techlist.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTagTechnician(CurrentUser.CompanyId.Value, LabelHelper.UserTags.Technicians, new Guid()).Select(x => new SelectListItem()
            {
                Text = $"{x.FirstName} {x.LastName} ({x.TechnicianCount})",
                Value = x.UserId.ToString()
            }).ToList());

            ViewBag.techlist = techlist;
            ViewBag.manufacturer = manufacturer;
            ViewBag.listcategory = eqcategory;
            ViewBag.listmanu = manulist;
            ViewBag.listtech = listtech;

            ViewBag.OutOfNumber = 0;
            return View();
        }

        public ActionResult TruckInventoryReportPartialList(FilterEquipment filter)
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}
            List<string> eqcategory = new List<string>();
            List<string> manulist = new List<string>();
            List<string> listtech = new List<string>();
            if (!string.IsNullOrWhiteSpace(filter.category))
            {
                string[] splituser = filter.category.Split(',');
                if (splituser.Length > 0)
                {
                    filter.category = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {
                        eqcategory.Add(item);
                    }
                }
            }

            if (!string.IsNullOrWhiteSpace(filter.manufact))
            {
                string[] splituser = filter.manufact.Split(',');
                if (splituser.Length > 0)
                {
                    filter.manufact = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        manulist.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.technician))
            {
                string[] splituser = filter.technician.Split(',');
                if (splituser.Length > 0)
                {
                    filter.technician = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        listtech.Add(item);
                    }
                }
            }
          
            filter.Transferred_Date_From = new DateTime(1, 1, 1, 0, 0, 0);
            filter.Transferred_Date_To = new DateTime(1, 1, 1, 0, 0, 0);


            if (filter.Transferred_Date_To != new DateTime())
            {
                filter.Transferred_Date_To = Convert.ToDateTime(filter.Transferred_Date_To).AddMinutes(1439);
            }
            ViewBag.StartDate = filter.Start;
            ViewBag.EndDate = filter.End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (filter.CompanyId == new Guid())
            {
                filter.CompanyId = CurrentUser.CompanyId.Value;
            }
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (filter.GetReport.HasValue && filter.GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(filter.Start) && !string.IsNullOrWhiteSpace(filter.End))
                {
                    StartDate = Convert.ToDateTime(filter.Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(filter.End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.InventoryFacade.GetEquipmentListReportByFilterTech(filter);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.InventoryFacade.GetEquipmentListReportByFilterTech(filter);
                    }
                    else
                    {
                        dt = _Util.Facade.InventoryFacade.GetEquipmentListReportByFilterTech(filter);
                    }

                }
                dt.Columns.Remove("LastUpdatedDate");
                int[] colarray = { 7, 8 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "TruckInventory", rowarray, colarray);
            }
            EquipmentListWithCountModel Model = new EquipmentListWithCountModel();
            if (!string.IsNullOrWhiteSpace(filter.Start) && !string.IsNullOrWhiteSpace(filter.End))
            {
                StartDate = Convert.ToDateTime(filter.Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(filter.End).SetMaxHour().ClientToUTCTime();

                Model = _Util.Facade.InventoryFacade.GetEquipmentListByFilterTechForReportOnlyTechnician(filter);
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.InventoryFacade.GetEquipmentListByFilterTechForReportOnlyTechnician(filter);
                }
                else
                {
                    Model = _Util.Facade.InventoryFacade.GetEquipmentListByFilterTechForReportOnlyTechnician(filter);
                }

            }
            ViewBag.TotalLeads = Model.TotalEquipmentCount.Counter;
            ViewBag.TotalAmt = Model.TotalAmt; 
            ViewBag.TotalQty = Model.TotalQty;

            if (!string.IsNullOrWhiteSpace(filter.Start))
            {
                ViewBag.Start = filter.Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(filter.End))
            {
                ViewBag.End = filter.End.Replace('_', '/');
            }
            List<SelectListItem> eqpCategory = new List<SelectListItem>();
            //eqpCategory.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            eqpCategory.AddRange(_Util.Facade.EquipmentFacade.GetAllEquipmentType().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.Id.ToString()
            }).ToList());
            ViewBag.eqpCategory = eqpCategory;
            List<SelectListItem> manufacturer = new List<SelectListItem>();
            //manufacturer.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            manufacturer.AddRange(_Util.Facade.EquipmentFacade.GetAllManufacturer().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.ManufacturerId.ToString()
            }).ToList());
            List<SelectListItem> techlist = new List<SelectListItem>();
            //techlist.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            techlist.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTagTechnician(CurrentUser.CompanyId.Value, LabelHelper.UserTags.Technicians, new Guid()).Select(x => new SelectListItem()
            {
                Text = $"{x.FirstName} {x.LastName} ({x.TechnicianCount})",
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.techlist = techlist;
            ViewBag.manufacturer = manufacturer;
            ViewBag.listcategory = eqcategory;
            ViewBag.listmanu = manulist;
            ViewBag.listtech = listtech;
            if (Model.EquipmentList.Count() == 0)
            {
                filter.PageNo = 1;
                //customerfilterlist = _Util.Facade.CustomerFacade.GetCustomerByFilter(filter);
            }

            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;


            if (Model.EquipmentList.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalEquipmentCount.Counter;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize);

            ViewBag.searchtext = filter.SearchText;

            return View(Model);
        }

        public ActionResult SaleReportPartial(string Start, string End, bool? GetReport)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string soldBy = "";
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.ShowAllReportData))
            {
                soldBy = CurrentUser.UserId.ToString();
            }
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetAllLeadsReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, soldBy);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllLeadsReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, soldBy);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllLeadsReportByCompany(CurrentUser.CompanyId.Value, null, null, soldBy);
                    }

                }
                return MakeExcelFromDataTable(dt, "LeadesReport", null, null);
            }
            CustomerListWithCountModel Model = new CustomerListWithCountModel();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                //EndDate = EndDate.AddHours(23).AddMinutes(59).AddSeconds(59);

                Model = _Util.Facade.CustomerFacade.GetAllLeadsByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, 1, 50, null, null, null, soldBy, null);
            }
            else
            {

                Model = _Util.Facade.CustomerFacade.GetAllLeadsByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, 1, 50, null, null, null, soldBy, null);



            }
            ViewBag.TotalLeads = Model.TotalCustomerCount.Counter;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            return View(Model);
        }

        public ActionResult TransferInventoryReportPartial()
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}
            List<string> eqcategory = new List<string>();
            List<string> manulist = new List<string>();
            List<string> listtech = new List<string>();

            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";

            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }




            List<SelectListItem> eqpCategory = new List<SelectListItem>();
            //eqpCategory.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            eqpCategory.AddRange(_Util.Facade.EquipmentFacade.GetAllEquipmentType().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.Id.ToString()
            }).OrderBy(item => item.Text).ToList());
            ViewBag.eqpCategory = eqpCategory;
            List<SelectListItem> manufacturer = new List<SelectListItem>();
            //manufacturer.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            manufacturer.AddRange(_Util.Facade.EquipmentFacade.GetAllManufacturer().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.ManufacturerId.ToString()
            }).OrderBy(item => item.Text).ToList());
            List<SelectListItem> techlist = new List<SelectListItem>();
            //techlist.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            techlist.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.Technicians, new Guid()).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.techlist = techlist;
            ViewBag.manufacturer = manufacturer;
            ViewBag.listcategory = eqcategory;
            ViewBag.listmanu = manulist;
            ViewBag.listtech = listtech;


            ViewBag.OutOfNumber = 0;

            return View();
        }

        public ActionResult TransferInventoryReportPartialList(FilterEquipment filter)
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}

            //if (filter.Transferred_Date_From != new DateTime())
            //{
            //    filter.Transferred_Date_From = Convert.ToDateTime(filter.Transferred_Date_From).SetZeroHour().ClientToUTCTime();
            //}
            if (filter.Transferred_Date_To != new DateTime())
            {
                filter.Transferred_Date_To = Convert.ToDateTime(filter.Transferred_Date_To).AddMinutes(1439);
            }
            List<string> eqcategory = new List<string>();
            List<string> manulist = new List<string>();
            List<string> listtech = new List<string>();
            if (!string.IsNullOrWhiteSpace(filter.category))
            {
                string[] splituser = filter.category.Split(',');
                if (splituser.Length > 0)
                {
                    filter.category = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {
                        eqcategory.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.manufact))
            {
                string[] splituser = filter.manufact.Split(',');
                if (splituser.Length > 0)
                {
                    filter.manufact = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        manulist.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.technician))
            {
                string[] splituser = filter.technician.Split(',');
                if (splituser.Length > 0)
                {
                    filter.technician = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        listtech.Add(item);
                    }
                }
            }
            ViewBag.StartDate = filter.Start;
            ViewBag.EndDate = filter.End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (filter.CompanyId == new Guid())
            {
                filter.CompanyId = CurrentUser.CompanyId.Value;
            }
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (filter.GetReport.HasValue && filter.GetReport == true)
            {
                DataTable dt;
                if ((filter.Transferred_Date_From != null && filter.Transferred_Date_To != null && filter.Transferred_Date_From != new DateTime() && filter.Transferred_Date_To != new DateTime()))
                {
                    //StartDate = Convert.ToDateTime(filter.Start).SetZeroHour().ClientToUTCTime();
                    //EndDate = Convert.ToDateTime(filter.End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.InventoryFacade.GetTranferListReportByFilterTech(filter);
                }
                else
                {
                    if (filter.Transferred_Date_From != new DateTime() && filter.Transferred_Date_To != new DateTime())
                    {
                        dt = _Util.Facade.InventoryFacade.GetTranferListReportByFilterTech(filter);
                    }
                    else
                    {
                        dt = _Util.Facade.InventoryFacade.GetTranferListReportByFilterTech(filter);
                    }

                }
                dt.Columns.Remove("ReceivedDate");
                return MakeExcelFromDataTable(dt, "TransferInventoryReport", null, null);
            }
            EquipmentListWithCountModel Model = new EquipmentListWithCountModel();
            if (!string.IsNullOrWhiteSpace(filter.Start) && !string.IsNullOrWhiteSpace(filter.End))
            {
                StartDate = Convert.ToDateTime(filter.Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(filter.End).SetMaxHour().ClientToUTCTime();

                Model = _Util.Facade.InventoryFacade.GetEquipmentListByFilterTechForReportOnly(filter);
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.InventoryFacade.GetEquipmentListByFilterTechForReportOnly(filter);
                }
                else
                {
                    Model = _Util.Facade.InventoryFacade.GetEquipmentListByFilterTechForReportOnly(filter);
                }

            }
            ViewBag.TotalLeads = Model.TotalEquipmentCount.Counter;
            ViewBag.TotalQty = Model.TotalQty;

            if (!string.IsNullOrWhiteSpace(filter.Start))
            {
                ViewBag.Start = filter.Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(filter.End))
            {
                ViewBag.End = filter.End.Replace('_', '/');
            }
            List<SelectListItem> eqpCategory = new List<SelectListItem>();
            //eqpCategory.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            eqpCategory.AddRange(_Util.Facade.EquipmentFacade.GetAllEquipmentType().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.Id.ToString()
            }).ToList());
            ViewBag.eqpCategory = eqpCategory;
            List<SelectListItem> manufacturer = new List<SelectListItem>();
            //manufacturer.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            manufacturer.AddRange(_Util.Facade.EquipmentFacade.GetAllManufacturer().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.ManufacturerId.ToString()
            }).ToList());
            List<SelectListItem> techlist = new List<SelectListItem>();
            //techlist.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            techlist.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.Technicians, new Guid()).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.techlist = techlist;
            ViewBag.manufacturer = manufacturer;
            ViewBag.listcategory = eqcategory;
            ViewBag.listmanu = manulist;
            ViewBag.listtech = listtech;
            if (Model.EquipmentList.Count() == 0)
            {
                filter.PageNo = 1;
                //customerfilterlist = _Util.Facade.CustomerFacade.GetCustomerByFilter(filter);
            }

            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;


            if (Model.EquipmentList.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalEquipmentCount.Counter;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize);
            return View(Model);
        }

        public ActionResult PendingInventoryReportPartial()
        {
            List<string> eqcategory = new List<string>();
            List<string> manulist = new List<string>();
            List<string> listtech = new List<string>();

            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";

            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            List<SelectListItem> eqpCategory = new List<SelectListItem>();
            eqpCategory.AddRange(_Util.Facade.EquipmentFacade.GetAllEquipmentType().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.Id.ToString()
            }).OrderBy(item => item.Text).ToList());
            ViewBag.eqpCategory = eqpCategory;
            List<SelectListItem> manufacturer = new List<SelectListItem>();
            manufacturer.AddRange(_Util.Facade.EquipmentFacade.GetAllManufacturer().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.ManufacturerId.ToString()
            }).OrderBy(item => item.Text).ToList());
            List<SelectListItem> techlist = new List<SelectListItem>();
            techlist.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.Technicians, new Guid()).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.techlist = techlist;
            ViewBag.manufacturer = manufacturer;
            ViewBag.listcategory = eqcategory;
            ViewBag.listmanu = manulist;
            ViewBag.listtech = listtech;


            ViewBag.OutOfNumber = 0;

            return View();
        }

        public ActionResult PendingInventoryReportPartialList(FilterEquipment filter)
        {
            if (filter.Transferred_Date_To != new DateTime())
            {
                filter.Transferred_Date_To = Convert.ToDateTime(filter.Transferred_Date_To).AddMinutes(1439);
            }
            List<string> eqcategory = new List<string>();
            List<string> manulist = new List<string>();
            List<string> listtech = new List<string>();
            if (!string.IsNullOrWhiteSpace(filter.category))
            {
                string[] splituser = filter.category.Split(',');
                if (splituser.Length > 0)
                {
                    filter.category = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {
                        eqcategory.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.manufact))
            {
                string[] splituser = filter.manufact.Split(',');
                if (splituser.Length > 0)
                {
                    filter.manufact = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        manulist.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.technician))
            {
                string[] splituser = filter.technician.Split(',');
                if (splituser.Length > 0)
                {
                    filter.technician = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        listtech.Add(item);
                    }
                }
            }
            ViewBag.StartDate = filter.Start;
            ViewBag.EndDate = filter.End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (filter.CompanyId == new Guid())
            {
                filter.CompanyId = CurrentUser.CompanyId.Value;
            }
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (filter.GetReport.HasValue && filter.GetReport == true)
            {
                DataTable dt;
                if ((filter.Transferred_Date_From != null && filter.Transferred_Date_To != null && filter.Transferred_Date_From != new DateTime() && filter.Transferred_Date_To != new DateTime()))
                {
                    dt = _Util.Facade.InventoryFacade.GetPendingListReportByFilterTech(filter);
                }
                else
                {
                    if (filter.Transferred_Date_From != new DateTime() && filter.Transferred_Date_To != new DateTime())
                    {
                        dt = _Util.Facade.InventoryFacade.GetPendingListReportByFilterTech(filter);
                    }
                    else
                    {
                        dt = _Util.Facade.InventoryFacade.GetPendingListReportByFilterTech(filter);
                    }

                }
                dt.Columns.Remove("ReceivedDate");
                return MakeExcelFromDataTable(dt, "PendingInventoryReport", null, null);
            }
            EquipmentListWithCountModel Model = new EquipmentListWithCountModel();
            if (!string.IsNullOrWhiteSpace(filter.Start) && !string.IsNullOrWhiteSpace(filter.End))
            {
                StartDate = Convert.ToDateTime(filter.Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(filter.End).SetMaxHour().ClientToUTCTime();

                Model = _Util.Facade.InventoryFacade.GetEquipmentListByFilterTechForPendingReport(filter);
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.InventoryFacade.GetEquipmentListByFilterTechForPendingReport(filter);
                }
                else
                {
                    Model = _Util.Facade.InventoryFacade.GetEquipmentListByFilterTechForPendingReport(filter);
                }

            }
            ViewBag.TotalLeads = Model.TotalEquipmentCount.Counter;

            if (!string.IsNullOrWhiteSpace(filter.Start))
            {
                ViewBag.Start = filter.Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(filter.End))
            {
                ViewBag.End = filter.End.Replace('_', '/');
            }
            List<SelectListItem> eqpCategory = new List<SelectListItem>();
            eqpCategory.AddRange(_Util.Facade.EquipmentFacade.GetAllEquipmentType().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.Id.ToString()
            }).ToList());
            ViewBag.eqpCategory = eqpCategory;
            List<SelectListItem> manufacturer = new List<SelectListItem>();
            manufacturer.AddRange(_Util.Facade.EquipmentFacade.GetAllManufacturer().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.ManufacturerId.ToString()
            }).ToList());
            List<SelectListItem> techlist = new List<SelectListItem>();
            techlist.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.Technicians, new Guid()).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.techlist = techlist;
            ViewBag.manufacturer = manufacturer;
            ViewBag.listcategory = eqcategory;
            ViewBag.listmanu = manulist;
            ViewBag.listtech = listtech;
            if (Model.EquipmentList.Count() == 0)
            {
                filter.PageNo = 1;
            }

            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;


            if (Model.EquipmentList.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalEquipmentCount.Counter;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize);
            return View(Model);
        }

        public ActionResult SummaryReportPartial()
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}
            List<string> eqcategory = new List<string>();
            List<string> manulist = new List<string>();
            List<string> listtech = new List<string>();

            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";

            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }





            List<SelectListItem> eqpCategory = new List<SelectListItem>();
            //eqpCategory.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            eqpCategory.AddRange(_Util.Facade.EquipmentFacade.GetAllEquipmentType().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.Id.ToString()
            }).ToList());
            ViewBag.eqpCategory = eqpCategory;
            List<SelectListItem> manufacturer = new List<SelectListItem>();
            //manufacturer.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            manufacturer.AddRange(_Util.Facade.EquipmentFacade.GetAllManufacturer().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.ManufacturerId.ToString()
            }).ToList());
            List<SelectListItem> techlist = new List<SelectListItem>();
            //techlist.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            techlist.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.Technicians, new Guid()).OrderBy(x => x.UserId.ToString() != "-1").ThenBy(x => x.FirstName.ToString() + " " + x.LastName.ToString()).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.techlist = techlist;
            ViewBag.manufacturer = manufacturer;
            ViewBag.listcategory = eqcategory;
            ViewBag.listmanu = manulist;
            ViewBag.listtech = listtech;

            ViewBag.OutOfNumber = 0;



            return View();
        }

        public ActionResult SummaryReportPartialList(FilterEquipment filter)
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}
            List<string> eqcategory = new List<string>();
            List<string> manulist = new List<string>();
            List<string> listtech = new List<string>();
            //if (filter.Transferred_Date_From != new DateTime())
            //{
            //    filter.Transferred_Date_From = Convert.ToDateTime(filter.Transferred_Date_From).SetZeroHour().ClientToUTCTime();
            //}
            //if (filter.Transferred_Date_To != new DateTime())
            //{
            //    filter.Transferred_Date_To = Convert.ToDateTime(filter.Transferred_Date_To).SetMaxHour().ClientToUTCTime();
            //}
            if (!string.IsNullOrWhiteSpace(filter.category))
            {
                string[] splituser = filter.category.Split(',');
                if (splituser.Length > 0)
                {
                    filter.category = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {
                        eqcategory.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.manufact))
            {
                string[] splituser = filter.manufact.Split(',');
                if (splituser.Length > 0)
                {
                    filter.manufact = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        manulist.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.technician))
            {
                string[] splituser = filter.technician.Split(',');
                if (splituser.Length > 0)
                {
                    filter.technician = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        listtech.Add(item);
                    }
                }
            }
            ViewBag.StartDate = filter.Start;
            ViewBag.EndDate = filter.End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (filter.CompanyId == new Guid())
            {
                filter.CompanyId = CurrentUser.CompanyId.Value;
            }
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (filter.GetReport.HasValue && filter.GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(filter.Start) && !string.IsNullOrWhiteSpace(filter.End))
                {
                    StartDate = Convert.ToDateTime(filter.Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(filter.End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.InventoryFacade.GetEquipmentListByFilterTechSummaryReport(filter);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.InventoryFacade.GetEquipmentListByFilterTechSummaryReport(filter);
                    }
                    else
                    {
                        dt = _Util.Facade.InventoryFacade.GetEquipmentListByFilterTechSummaryReport(filter);
                    }

                }
                return MakeExcelFromDataTable(dt, "SummaryInventory", null, null);
            }
            //    List<InventoryTech> Model = new List<InventoryTech>();
            InventoryTechModel Model = new InventoryTechModel();
            if (!string.IsNullOrWhiteSpace(filter.Start) && !string.IsNullOrWhiteSpace(filter.End))
            {
                StartDate = Convert.ToDateTime(filter.Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(filter.End).SetMaxHour().ClientToUTCTime();

                Model = _Util.Facade.InventoryFacade.GetEquipmentListReportByFilterTechSummary1(filter);
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.InventoryFacade.GetEquipmentListReportByFilterTechSummary1(filter);
                }
                else
                {
                    Model = _Util.Facade.InventoryFacade.GetEquipmentListReportByFilterTechSummary1(filter);
                }

            }
            //    ViewBag.TotalLeads = Model.Count;
            ViewBag.TotalLeads = Model.TotalCount;

            if (!string.IsNullOrWhiteSpace(filter.Start))
            {
                ViewBag.Start = filter.Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(filter.End))
            {
                ViewBag.End = filter.End.Replace('_', '/');
            }
            List<SelectListItem> eqpCategory = new List<SelectListItem>();
            //eqpCategory.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            eqpCategory.AddRange(_Util.Facade.EquipmentFacade.GetAllEquipmentType().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.Id.ToString()
            }).ToList());
            ViewBag.eqpCategory = eqpCategory;
            List<SelectListItem> manufacturer = new List<SelectListItem>();
            //manufacturer.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            manufacturer.AddRange(_Util.Facade.EquipmentFacade.GetAllManufacturer().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.ManufacturerId.ToString()
            }).ToList());
            List<SelectListItem> techlist = new List<SelectListItem>();
            //techlist.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
            techlist.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.Technicians, new Guid()).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.techlist = techlist;
            ViewBag.manufacturer = manufacturer;
            ViewBag.listcategory = eqcategory;
            ViewBag.listmanu = manulist;
            ViewBag.listtech = listtech;
            //if (Model.Count == 0)
            //{
            //    filter.PageNo = 1;
            //}
            if (Model.TotalCount == 0)
            {
                filter.PageNo = 1;
            }
            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;


            //if (Model.Count > 0)
            //{
            //    ViewBag.OutOfNumber = Model.Count;
            //}
            if (Model.TotalCount > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }
            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize);


            //ViewBag.PageNumber = pageno;
            //ViewBag.OutOfNumber = 0;

            //if (Model.CustomerList.Count > 0)
            //{
            //    ViewBag.OutOfNumber = Model.TotalCustomerCount.Counter;
            //}

            //if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            //{
            //    ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            //}
            //else
            //{
            //    ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            //}
            //ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }

        public ActionResult TicketReportPartialInstall(bool? GetReport, string Start, string End, TicketFilter Filters, string RepType, FilterReportModel filter)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                if (RepType == "DateReference")
                {
                    DataTable dt;
                    if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                    {
                        StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                        EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                        dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                    }
                    else
                    {
                        if (StartDate != new DateTime() && EndDate != new DateTime())
                        {
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                        }
                        else
                        {
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompany(CurrentUser.CompanyId.Value, null, null, Filters, filter);
                        }

                    }
                    return MakeExcelFromDataTable(dt, "Security Work Orders Install Equipments", null, null);
                }
                else if (RepType == "AppointmentDate")
                {
                    DataTable dt;
                    if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                    {
                        StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                        EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                        dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompanyForAppointmentDate(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                    }
                    else
                    {
                        if (StartDate != new DateTime() && EndDate != new DateTime())
                        {
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompanyForAppointmentDate(CurrentUser.CompanyId.Value, StartDate, EndDate, Filters, filter);
                        }
                        else
                        {
                            dt = _Util.Facade.CustomerFacade.GetAllTicketReportByCompanyForAppointmentDate(CurrentUser.CompanyId.Value, null, null, Filters, filter);
                        }

                    }
                    return MakeExcelFromDataTable(dt, "Security Work Orders by Appointment Date", null, null);
                }
            }
            return View();
        }

        public ActionResult LoadTicketReportListInstall(TicketFilter Filters)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            TicketListModel Model = new TicketListModel();
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            List<string> eqcategory = new List<string>();
            List<string> manulist = new List<string>();
            List<string> technicianlist = new List<string>();
            //List<string> EquipmentStatus = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.TicketType))
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus))
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(item);
                    }
                }
            }
            if (Filters.TicketStatusArr != null && Filters.TicketStatusArr.Count() > 0)
            {
                string[] splituser = Filters.TicketStatusArr;
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket))
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.category))
            {
                string[] splituser = Filters.category.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.category = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {
                        eqcategory.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.manufact))
            {
                string[] splituser = Filters.manufact.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.manufact = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        manulist.Add(item);
                    }
                }
            }
            if (Filters.technicianlist != null)
            {
                //string[] splituser = Filters.technician.Split(',');
                //if (splituser.Length > 0)
                //{
                //Filters.technician = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                foreach (var item in Filters.technicianlist)
                {
                    technicianlist.Add(item);
                }
                //}
            }
            //if (!string.IsNullOrWhiteSpace(Filters.EquipmentStatus))
            //{
            //    string[] splituser = Filters.EquipmentStatus.Split(',');
            //    if (splituser.Length > 0)
            //    {
            //        Filters.EquipmentStatus = string.Format("{0}", string.Join(",", splituser));
            //        foreach (var item in splituser)
            //        {

            //            EquipmentStatus.Add(item);
            //        }
            //    }
            //}
            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }
            Filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            Filters.UserId = CurrentUser.UserId;

            if (Filters.Generate == true)
            {
                bool result = false;
                result = _Util.Facade.CustomerFacade.InsertInIndividualInstalledEquipment(CurrentUser.CompanyId.Value);
            }

            Model = _Util.Facade.EmployeeFacade.GetTicketListInstallByFilter(Filters);
            ViewBag.PageNumber = Filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = Filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Tickets != null && Model.Tickets.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);


            #region Viewbags

            List<SelectListItem> Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketStatus").OrderBy(x => x.DataOrder).ToList().Select(x =>
                 new SelectListItem()
                 {
                     Text = x.DisplayText.ToString(),
                     Value = x.DataValue.ToString()
                 }).ToList();

            Items.RemoveAt(0);

            ViewBag.TicketStatus = Items;

            Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketType").OrderBy(x => x.DataValue.ToString() != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            Items.RemoveAt(0);
            ViewBag.TicketType = Items;

            Items = _Util.Facade.LookupFacade.GetLookupByKey("EquipmentStatus").OrderBy(x => x.DataValue.ToString() != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            Items.RemoveAt(0);
            ViewBag.EquipmentStatus = Items;

            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();

            ViewBag.EmployeeList = emplst;

            List<SelectListItem> MyTicketList = new List<SelectListItem>();

            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Other Filters",
                    Value = "-1"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Created By Me",
                    Value = "Created"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Assigned to Me",
                    Value = "Assigned"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Both",
                    Value = "Both"
                });
            MyTicketList.Add(
               new SelectListItem
               {
                   Text = "None",
                   Value = "None"
               });
            ViewBag.MyTicketList = MyTicketList;

            #endregion
            ViewBag.tikettype = typeticket;
            ViewBag.statustiket = statusticket;
            ViewBag.assignticket = assignticket;
            //ViewBag.Equipment = EquipmentStatus;
            List<SelectListItem> eqpCategory = new List<SelectListItem>();
            eqpCategory.Add(new SelectListItem()
            {
                Text = "Select One",
                Value = "-1"
            });
            eqpCategory.AddRange(_Util.Facade.EquipmentFacade.GetAllEquipmentType().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.Id.ToString()
            }).ToList());
            ViewBag.eqpCategory = eqpCategory.OrderBy(x => x.Text != "Select One").ThenBy(x => x.Text).ToList();
            List<SelectListItem> manufacturer = new List<SelectListItem>();
            manufacturer.Add(new SelectListItem()
            {
                Text = "Select One",
                Value = "-1"
            });
            List<SelectListItem> technician = new List<SelectListItem>();

            technician.AddRange(_Util.Facade.EmployeeFacade.GetTechnicianlist(Filters).Select(x => new SelectListItem()
            {
                Text = x.EmpUser.ToString(),
                Value = x.EmpUser.ToString()
            }).ToList());
            manufacturer.AddRange(_Util.Facade.EquipmentFacade.GetAllManufacturer().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.ManufacturerId.ToString()
            }).ToList());
            ViewBag.manufacturer = manufacturer.OrderBy(x => x.Text != "Select One").ThenBy(x => x.Text).ToList();
            ViewBag.listcategory = eqcategory;
            ViewBag.listtechnician = emplst;
            ViewBag.tech = technicianlist;
            ViewBag.listmanu = manulist;
            return View(Model);
        }

        public ActionResult TicketReportListInstall(TicketFilter Filters)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            List<string> eqcategory = new List<string>();
            List<string> manulist = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.TicketType))
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus))
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket))
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.category))
            {
                string[] splituser = Filters.category.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.category = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {
                        eqcategory.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.manufact))
            {
                string[] splituser = Filters.manufact.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.manufact = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        manulist.Add(item);
                    }
                }
            }
            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }
            Filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            Filters.UserId = CurrentUser.UserId;

            TicketListModel Model = _Util.Facade.EmployeeFacade.GetTicketListInstallByFilter(Filters);
            ViewBag.PageNumber = Filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = Filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Tickets != null && Model.Tickets.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);


            #region Viewbags
            List<SelectListItem> Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketStatus").OrderBy(x => x.DataOrder).ToList().Select(x =>
                 new SelectListItem()
                 {
                     Text = x.DisplayText.ToString(),
                     Value = x.DataValue.ToString()
                 }).ToList();

            Items.RemoveAt(0);

            ViewBag.TicketStatus = Items;

            Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketType").OrderBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            Items.RemoveAt(0);
            ViewBag.TicketType = Items;
            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();

            ViewBag.EmployeeList = emplst;

            List<SelectListItem> MyTicketList = new List<SelectListItem>();

            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Other Filters",
                    Value = "-1"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Created By Me",
                    Value = "Created"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Assigned to Me",
                    Value = "Assigned"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Both",
                    Value = "Both"
                });
            MyTicketList.Add(
               new SelectListItem
               {
                   Text = "None",
                   Value = "None"
               });
            ViewBag.MyTicketList = MyTicketList;

            #endregion
            ViewBag.tikettype = typeticket;
            ViewBag.statustiket = statusticket;
            ViewBag.assignticket = assignticket;

            List<SelectListItem> eqpCategory = new List<SelectListItem>();
            eqpCategory.Add(new SelectListItem()
            {
                Text = "Select One",
                Value = "-1"
            });
            eqpCategory.AddRange(_Util.Facade.EquipmentFacade.GetAllEquipmentType().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.Id.ToString()
            }).ToList());
            ViewBag.eqpCategory = eqpCategory.OrderBy(x => x.Text != "Select One").ThenBy(x => x.Text).ToList();
            List<SelectListItem> manufacturer = new List<SelectListItem>();
            manufacturer.Add(new SelectListItem()
            {
                Text = "Select One",
                Value = "-1"
            });
            manufacturer.AddRange(_Util.Facade.EquipmentFacade.GetAllManufacturer().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.ManufacturerId.ToString()
            }).ToList());
            ViewBag.manufacturer = manufacturer.OrderBy(x => x.Text != "Select One").ThenBy(x => x.Text).ToList();
            ViewBag.listcategory = eqcategory;
            ViewBag.listmanu = manulist;
            return View(Model);
        }

        public ActionResult SalesInvoiceList(Guid? customerid, CustomerFilter filter, string invtype)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<Invoice> model = new List<Entities.Invoice>();
            if (customerid.HasValue && customerid.Value != new Guid())
            {
                bool isDeclinedAdded = true;
                GlobalSetting isDeclined = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "IsDeclinedInvoiceAddedInUnpaidAmount");
                if (isDeclined != null)
                {
                    isDeclinedAdded = !string.IsNullOrWhiteSpace(isDeclined.Value) && isDeclined.Value.ToLower() == "false" ? false : true;
                }
                model = _Util.Facade.InvoiceFacade.GetAllInvoiceByCompanyIdAndCustomerId(CurrentUser.CompanyId.Value, customerid.Value, invtype, filter, isDeclinedAdded);
            }
            return View("_InvoiceListPartial", model);
        }

        public ActionResult LoadTransferInventoryForTechAndDateFilter(Guid techid, string transferdate)
        {
            string min = "";
            string max = "";
            if (!string.IsNullOrWhiteSpace(transferdate))
            {
                min = transferdate + " 00:00:00.000";
                max = transferdate + " 23:59:59.999";
            }
            List<InventoryTech> model = _Util.Facade.InventoryFacade.GetTransferInventoryForTechAndDateFilter(techid, min, max);
            return View(model);
        }

        public ActionResult BadInventoryReportPartial()
        {

            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            List<SelectListItem> TechnicianList = new List<SelectListItem>();
            TechnicianList.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.Technicians, new Guid(), "").Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());

            List<SelectListItem> StatusList = new List<SelectListItem>();
            StatusList.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("BadInventoryStatus").Where(x => x.DataValue != "-1").Select(x => new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());


            ViewBag.TechnicianList = TechnicianList;
            ViewBag.StatusList = StatusList;

            return View();
        }

        public ActionResult LoadBadInventoryReportPartial(BadInventoryFilter filters)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    filters.Start = CookieVals[0].ToDateTime();
                    filters.End = CookieVals[1].ToDateTime();
                }
            }

            //if (filters.Purchase_Date_From != new DateTime())
            //{
            //    filters.Purchase_Date_From = Convert.ToDateTime(filters.Purchase_Date_From).SetZeroHour().ClientToUTCTime();
            //}
            //if (filters.Purchase_Date_To != new DateTime())
            //{
            //    filters.Purchase_Date_To = Convert.ToDateTime(filters.Purchase_Date_To).SetMaxHour().ClientToUTCTime();
            //}


            if (!string.IsNullOrWhiteSpace(filters.StatusIDList))
            {
                string[] splituser = filters.StatusIDList.Split(',');
                if (splituser.Length > 0)
                {
                    filters.StatusIDList = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    //foreach (var item in splituser)
                    //{
                    //    manulist.Add(item);
                    //}
                }
            }
            if (!string.IsNullOrWhiteSpace(filters.TechnicianIDList))
            {
                string[] splituser = filters.TechnicianIDList.Split(',');
                if (splituser.Length > 0)
                {
                    filters.TechnicianIDList = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    //foreach (var item in splituser)
                    //{
                    //    manulist.Add(item);
                    //}
                }
            }

            if (filters.GetReport.HasValue && filters.GetReport == true)
            {
                if (filters.CompanyId == new Guid())
                {
                    filters.CompanyId = CurrentUser.CompanyId.Value;
                }

                DataTable dt;
                if (filters.Start != new DateTime() && filters.End != new DateTime())
                {
                    filters.Start = Convert.ToDateTime(filters.Start).SetZeroHour().ClientToUTCTime();
                    filters.End = Convert.ToDateTime(filters.End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.PurchaseOrderFacade.GetBadInventoryReportListFilters(filters);
                }
                else
                {
                    if (filters.Start != new DateTime() && filters.End != new DateTime())
                    {
                        dt = _Util.Facade.PurchaseOrderFacade.GetBadInventoryReportListFilters(filters);
                    }
                    else
                    {
                        dt = _Util.Facade.PurchaseOrderFacade.GetBadInventoryReportListFilters(filters);
                    }

                }
                return MakeExcelFromDataTable(dt, "Bad Inventory Reports", null, null);
            }
            #region Permission Check
            if (!base.IsPermitted(UserPermissions.InventoryPermissions.BadInventoryTab))
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            #endregion

            #region Inits
            if (filters == null)
            {
                filters = new BadInventoryFilter();
            }

            if (filters.PageNo == 0)
            {
                filters.PageNo = 1;
            }
            filters.CompanyId = CurrentUser.CompanyId.Value;
            filters.PageSize = Convert.ToInt32(_Util.Facade.GlobalSettingsFacade.GetGlobalsettingBySearchKeyAndCompanyId("BadInventoryPageLimit", CurrentUser.CompanyId.Value).Value);
            BIListModel Model = new BIListModel();
            #endregion

            if (CurrentUser.UserTags.ToLower().IndexOf("technician") != 0)
            {

                Model = _Util.Facade.PurchaseOrderFacade.GetBadInventoryListByFilters(filters, new Guid());

            }
            else
            {

                Model = _Util.Facade.PurchaseOrderFacade.GetBadInventoryListByFilters(filters, CurrentUser.UserId);


            }

            ViewBag.PageNumber = filters.PageNo;
            ViewBag.OutOfNumber = 0;

            if (Model.EquipmentReturnList.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filters.PageSize);
            ViewBag.order = filters.order;
            return View(Model);
        }

        public ActionResult AllSalesReportList(Guid customerid)
        {
            ViewBag.customerid = customerid;
            ViewBag.packageservice = _Util.Facade.EmployeeFacade.GetCustomerPackageServiceByCustomerId(customerid);
            ViewBag.packageeqp = _Util.Facade.EmployeeFacade.GetCustomerPackageEqpByCustomerId(customerid);
            return View();
        }

        public ActionResult RecurringBillingReportPartial(string Start, string End, bool GetReport = false, string billingmindate = null, string billingmaxdate = null)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport)
            {
                DataTable dt = _Util.Facade.CustomerFacade.GetCustomerRecurringBillingReportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, billingmindate, billingmaxdate);

                int[] colarray = { 3, 4, 6, 7, 9, 10 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "Recurring Billing", rowarray, colarray);
            }
            RecurringBillingCustomerModel model = _Util.Facade.CustomerFacade.GetCustomerRecurringBillingByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, billingmindate, billingmaxdate);
            if (model != null)
            {
                if (model.TotalCustomerRMRACHModel.TotalCustomerRMRACH > 0 && model.TotalAutomaticCustomerCountACHModel.TotalAutomaticCustomerCountACH > 0)
                {
                    ViewBag.ACHparcentage = (model.TotalCustomerBillAmountACHModel.TotalCustomerBillAmountACH * 100) / model.TotalBillAmountCountModel.TotalBillAmountCount;
                }
                else
                {
                    ViewBag.ACHparcentage = 0;
                }
                if (model.TotalCustomerRMRCCModel.TotalCustomerRMRCC > 0 && model.TotalAutomaticCustomerCountCCModel.TotalAutomaticCustomerCountCC > 0)
                {
                    ViewBag.CCparcentage = (model.TotalCustomerBillAmountCCModel.TotalCustomerBillAmountCC * 100) / model.TotalBillAmountCountModel.TotalBillAmountCount;
                }
                else
                {
                    ViewBag.CCparcentage = 0;
                }
                if (model.TotalCustomerRMRInvoiceModel.TotalCustomerRMRInvoice > 0 && model.TotalAutomaticCustomerCountInvoiceModel.TotalAutomaticCustomerCountInvoice > 0)
                {
                    ViewBag.Invoiceparcentage = (model.TotalCustomerBillAmountInvoiceModel.TotalCustomerBillAmountInvoice * 100) / model.TotalBillAmountCountModel.TotalBillAmountCount;
                }
                else
                {
                    ViewBag.Invoiceparcentage = 0;
                }
            }
            else
            {
                model = new RecurringBillingCustomerModel();
                ViewBag.ACHparcentage = 0;
                ViewBag.CCparcentage = 0;
                ViewBag.Invoiceparcentage = 0;
            }
            ViewBag.mindate = billingmindate;
            ViewBag.maxdate = billingmaxdate;
            return View(model);
        }
        public ActionResult BrinkSoldReportPartial(bool? GetReport, string Start, string End, string order)
        {
            if (Start == "01/01/0001")
            {
                Start = "";
            }
            if (End == "01/01/0001")
            {
                End = "";
            }
            //var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            //string newCookie = "";
            //if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            //{
            //    newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
            //    newCookie = Server.UrlDecode(newCookie);
            //    var CookieVals = newCookie.Split(',');

            //    if (CookieVals.Length == 3)
            //    {
            //        StartDate = CookieVals[0].ToDateTime();
            //        EndDate = CookieVals[1].ToDateTime();
            //    }
            //}
            //if (GetReport.HasValue && GetReport.Value == true)
            //{
            //    DataTable dt = _Util.Facade.CustomerFacade.GetCustomerRecurringBillingReportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, billingmindate, billingmaxdate);
            //    return MakeExcelFromDataTable(dt, "Recurring Billing");
            //}
            //RecurringBillingCustomerModel model = _Util.Facade.CustomerFacade.GetCustomerRecurringBillingByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, billingmindate, billingmaxdate);
            //if (model.TotalCustomerRMRACHModel.TotalCustomerRMRACH > 0 && model.TotalAutomaticCustomerCountACHModel.TotalAutomaticCustomerCountACH > 0)
            //{
            //    ViewBag.ACHparcentage = (model.TotalCustomerBillAmountACHModel.TotalCustomerBillAmountACH * 100) / model.TotalBillAmountCountModel.TotalBillAmountCount;
            //}
            //else
            //{
            //    ViewBag.ACHparcentage = 0;
            //}
            //if (model.TotalCustomerRMRCCModel.TotalCustomerRMRCC > 0 && model.TotalAutomaticCustomerCountCCModel.TotalAutomaticCustomerCountCC > 0)
            //{
            //    ViewBag.CCparcentage = (model.TotalCustomerBillAmountCCModel.TotalCustomerBillAmountCC * 100) / model.TotalBillAmountCountModel.TotalBillAmountCount;
            //}
            //else
            //{
            //    ViewBag.CCparcentage = 0;
            //}
            //if (model.TotalCustomerRMRInvoiceModel.TotalCustomerRMRInvoice > 0 && model.TotalAutomaticCustomerCountInvoiceModel.TotalAutomaticCustomerCountInvoice > 0)
            //{
            //    ViewBag.Invoiceparcentage = (model.TotalCustomerBillAmountInvoiceModel.TotalCustomerBillAmountInvoice * 100) / model.TotalBillAmountCountModel.TotalBillAmountCount;
            //}
            //else
            //{
            //    ViewBag.Invoiceparcentage = 0;
            //}
            //ViewBag.mindate = billingmindate;
            //ViewBag.maxdate = billingmaxdate;
            //return View(model);
            //List<ThirdPartyCustomer> soldBrinksList = new List<ThirdPartyCustomer>();
            //soldBrinksList = _Util.Facade.ThirdPartyCustomerFacade.GetThirdPartyCustomerByIsSold(true);
            ThirdPartyCustomer soldBrinksList = new ThirdPartyCustomer();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                soldBrinksList = _Util.Facade.ThirdPartyCustomerFacade.GetThirdPartyCustomersByIsSold(true, StartDate, EndDate, order);
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    soldBrinksList = _Util.Facade.ThirdPartyCustomerFacade.GetThirdPartyCustomersByIsSold(true, StartDate, EndDate, order);
                }
                else
                {
                    soldBrinksList = _Util.Facade.ThirdPartyCustomerFacade.GetThirdPartyCustomersByIsSold(true, StartDate, EndDate, order);
                }

            }
            //   soldBrinksList = _Util.Facade.ThirdPartyCustomerFacade.GetThirdPartyCustomersByIsSold(true);
            return View(soldBrinksList);
        }
        public ActionResult SalesSummaryReportPartial(bool? GetReport, string Start, string End, string searchtext, int pageno, int pagesize, string order)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";

            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport.Value == true)
            {
                DataTable dt = _Util.Facade.CustomerFacade.GetSalesSummaryReportsByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext);
                //dt.Columns.Remove("Id");
                dt.Columns.Remove("ConvertionDate");
                int[] colarray = { 2, 3, 4, 5, 6, 7, 8 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "Sales Summary", rowarray, colarray);
            }
            PackageCustomerModel model = new PackageCustomerModel();


            model = _Util.Facade.CustomerFacade.GetSalesSummaryReportALLByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, pageno, pagesize, order);


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            //ViewBag.order = Filters.order;
            //if (ViewBag.order == null)
            //{
            //    ViewBag.order = 0;
            //}
            if (model.Totalcount > 0)
            {
                ViewBag.OutOfNumber = model.Totalcount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            //      List<PackageCustomer> model = _Util.Facade.CustomerFacade.GetSalesSummaryReportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext);
            ViewBag.searchtext = searchtext;
            return View(model);
        }
        #region New Sales Report
        public ActionResult NewSalesReportPartial()
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();

            ViewBag.EmployeeList = emplst;
            return View();
        }

        //TASK: New Sales Report 2 - Partial View
        public ActionResult NewSales2ReportPartial()
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();



            ViewBag.LeadSourceList = _Util.Facade.LookupFacade.GetLookupByKey("LeadSource").OrderBy(x => x.DataValue != "-1").ThenBy(x => x.DataOrder).Select(x => new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList();
            
            ViewBag.LeadSourceTypeList = _Util.Facade.LookupFacade.GetLookupByKey("LeadSourceType").OrderBy(x => x.DisplayText != "Select One").ThenBy(x => x.DisplayText).Select(x =>
                                      new SelectListItem()
                                      {
                                          Text = x.DisplayText.ToString(),
                                          Value = x.DataValue.ToString()
                                      }).ToList();

            
            List<Lookup> SalesLocation = _Util.Facade.LookupFacade.GetLookupByKey("CommissionType").ToList();
            var salesLocationList = SalesLocation.Select(x =>
                                    new SelectListItem()
                                    {
                                        Text = x.DisplayText.ToString(),
                                        Value = x.DataValue.ToString()
                                    }).OrderBy(x => x.Text != "Please Select").ThenBy(x => x.Text).ToList();
            ViewBag.SalesLocationList = salesLocationList;

            ViewBag.InvoiceTypeList = _Util.Facade.LookupFacade.GetLookupByKey("InvoiceForList").Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();

            ViewBag.EmployeeList = emplst;
            return View();
        }
        public ActionResult NewSalesReportPartialList(bool? GetReport, string Start, string End, string searchtext, int pageno, int pagesize, string order, string SalesList)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";

            List<string> SalesPerson = new List<string>();
            if (!string.IsNullOrWhiteSpace(SalesList))
            {
                string[] splituser = SalesList.Split(',');
                if (splituser.Length > 0)
                {
                    SalesList = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {

                        SalesPerson.Add(item);
                    }
                }
            }


            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport.Value == true)
            {
                DataTable dt = _Util.Facade.CustomerFacade.GetNewSalesReportsByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, SalesPerson);
                int[] colarray = { 11, 12, 13, 14, 15, 16, 17, 18 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "New Sales", rowarray, colarray);
            }
            NewSalesCustomerModel model = new NewSalesCustomerModel();


            model = _Util.Facade.CustomerFacade.GetNewSalesReportALLByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, pageno, pagesize, order, SalesPerson);


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            //ViewBag.order = Filters.order;
            //if (ViewBag.order == null)
            //{
            //    ViewBag.order = 0;
            //}
            if (model.Totalcount > 0)
            {
                ViewBag.OutOfNumber = model.Totalcount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            //      List<PackageCustomer> model = _Util.Facade.CustomerFacade.GetSalesSummaryReportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext);
            //ViewBag.searchtext = searchtext;
            //List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            //var emplst = EmpList.Select(x =>
            //    new SelectListItem()
            //    {
            //        Text = x.FirstName + " " + x.LastName,
            //        Value = x.UserId.ToString(),
            //    }).ToList();

            //ViewBag.EmployeeList = emplst;
            return View(model);
        }

        //TASK: New Sales Report 2 - Partial List
        public ActionResult NewSales2ReportPartialList(bool? GetReport, string Start, string End, string searchtext, int pageno, int pagesize, string order, string SalesList,
            string SalesLocationList, string InvoiceTypeList, string LeadSourceList, string LeadSourceTypeList, string InstallFrom, string InstallTo)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            ViewBag.InstallFrom = InstallFrom;
            ViewBag.InstallTo = InstallTo;

            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            DateTime InstallFromDate = InstallFrom!="null" && !string.IsNullOrEmpty(InstallFrom)? DateTime.ParseExact(InstallFrom,"MM/dd/yyyy", CultureInfo.InvariantCulture) : new DateTime();
            DateTime InstallToDate = InstallTo != "null" && !string.IsNullOrEmpty(InstallTo) ? DateTime.ParseExact(InstallTo, "MM/dd/yyyy", CultureInfo.InvariantCulture) : new DateTime();

            string newCookie = "";

            List<string> SalesPerson = new List<string>();
            if (!string.IsNullOrWhiteSpace(SalesList))
            {
                string[] splituser = SalesList.Split(',');
                if (splituser.Length > 0)
                {
                    SalesList = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {

                        SalesPerson.Add(item);
                    }
                }
            }


            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport.Value == true)
            {
                //TODO: Make changes here
                DataTable dt = _Util.Facade.CustomerFacade.GetNewSalesReportsByInvoices1(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, 1, 5000, order,
                SalesPerson, SalesLocationList, InvoiceTypeList, LeadSourceList, LeadSourceTypeList, InstallFromDate, InstallToDate);
                int[] colarray = { 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "New Sales", rowarray, colarray);
            }
            NewSalesCustomerModel model = new NewSalesCustomerModel();


            model = _Util.Facade.CustomerFacade.GetNewSalesReportALLByInvoices(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, pageno, pagesize, order, 
                SalesPerson, SalesLocationList, InvoiceTypeList, LeadSourceList, LeadSourceTypeList, InstallFromDate, InstallToDate);


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            //ViewBag.order = Filters.order;
            //if (ViewBag.order == null)
            //{
            //    ViewBag.order = 0;
            //}
            if (model.Totalcount > 0)
            {
                ViewBag.OutOfNumber = model.Totalcount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            //      List<PackageCustomer> model = _Util.Facade.CustomerFacade.GetSalesSummaryReportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext);
            //ViewBag.searchtext = searchtext;
            //List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            //var emplst = EmpList.Select(x =>
            //    new SelectListItem()
            //    {
            //        Text = x.FirstName + " " + x.LastName,
            //        Value = x.UserId.ToString(),
            //    }).ToList();

            //ViewBag.EmployeeList = emplst;
            return View(model);
        }
        #endregion

        #region Variable Cost Report
        public ActionResult VariableCostPartial()
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();

            ViewBag.EmployeeList = emplst;

            List<SelectListItem> TicketTypeItems = _Util.Facade.LookupFacade.GetLookupByKey("TicketType").OrderBy(x => x.DataValue.ToString() != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            TicketTypeItems.RemoveAt(0);
            ViewBag.TicketType = TicketTypeItems;

            List<SelectListItem> CustomerStatusItems = _Util.Facade.LookupFacade.GetLookupByKey("CustomerStatus1").OrderBy(x => x.DataValue.ToString() != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
              new SelectListItem()
              {
                  Text = x.DisplayText.ToString(),
                  Value = x.DataValue.ToString()
              }).ToList();
            ViewBag.CustomerStatus = CustomerStatusItems;

            List<SelectListItem> LeadSourceItems = _Util.Facade.LookupFacade.GetLookupByKey("LeadSource").OrderBy(x => x.DataValue.ToString() != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
              new SelectListItem()
              {
                  Text = x.DisplayText.ToString(),
                  Value = x.DataValue.ToString()
              }).ToList();
            LeadSourceItems.RemoveAt(0);
            ViewBag.LeadSource = LeadSourceItems;

            return View();
        }
        public ActionResult VariableCostPartialList(SalesReportFilter salesReportFilter)
        {
            ViewBag.StartDate = salesReportFilter.StartDate;
            ViewBag.EndDate = salesReportFilter.EndDate;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string newCookie = "";

            salesReportFilter.CompanyId = CurrentUser.CompanyId.Value;
            if (!string.IsNullOrWhiteSpace(salesReportFilter.SalesPerson))
            {
                salesReportFilter.SalesPersonList = new List<string>();
                string[] splituser = salesReportFilter.SalesPerson.Split(',');
                if (splituser.Length > 0)
                {
                    salesReportFilter.SalesPerson = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {
                        salesReportFilter.SalesPersonList.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(salesReportFilter.TicketType) && salesReportFilter.TicketType != "null")
            {
                salesReportFilter.TicketTypeList = new List<string>();
                string[] splituser = salesReportFilter.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    salesReportFilter.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        salesReportFilter.TicketTypeList.Add(HttpUtility.UrlDecode(item));
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(salesReportFilter.LeadSource) && salesReportFilter.LeadSource != "null")
            {
                salesReportFilter.LeadSourceList = new List<string>();
                string[] splituser = salesReportFilter.LeadSource.Split(',');
                if (splituser.Length > 0)
                {
                    salesReportFilter.LeadSource = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        salesReportFilter.LeadSourceList.Add(HttpUtility.UrlDecode(item));
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(salesReportFilter.CustomerStatus) && salesReportFilter.CustomerStatus != "null")
            {
                salesReportFilter.CustomerStatusList = new List<string>();
                string[] splituser = salesReportFilter.CustomerStatus.Split(',');
                if (splituser.Length > 0)
                {
                    salesReportFilter.CustomerStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        salesReportFilter.CustomerStatusList.Add(HttpUtility.UrlDecode(item));
                    }
                }
            }

            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    salesReportFilter.StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    salesReportFilter.EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (salesReportFilter.GetReport.HasValue && salesReportFilter.GetReport.Value == true)
            {
                DataTable dt = _Util.Facade.CustomerFacade.GetVariableCostReportExportByCompanyId(salesReportFilter);
                int[] colarray = { 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "Variable Cost", rowarray, colarray);
            }
            VariableCostCustomerModel model = new VariableCostCustomerModel();


            model = _Util.Facade.CustomerFacade.GetVariableCostReportALLByCompanyId(salesReportFilter);


            ViewBag.PageNumber = salesReportFilter.pageno;
            ViewBag.OutOfNumber = 0;
            if (model.Totalcount > 0)
            {
                ViewBag.OutOfNumber = model.Totalcount;
            }

            if ((int)ViewBag.PageNumber * salesReportFilter.pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * salesReportFilter.pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / salesReportFilter.pagesize);
            return View(model);
        }
        #endregion

        #region Tech Up-Sales Report
        public ActionResult TechUpSalesPartial()
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();

            ViewBag.EmployeeList = emplst;
            return View();
        }
        public ActionResult TechUpSalesPartialList(bool? GetReport, string Start, string End, string searchtext, int pageno, int pagesize, string order, string SalesList)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";

            List<string> SalesPerson = new List<string>();
            if (!string.IsNullOrWhiteSpace(SalesList))
            {
                string[] splituser = SalesList.Split(',');
                if (splituser.Length > 0)
                {
                    SalesList = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {

                        SalesPerson.Add(item);
                    }
                }
            }
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport.Value == true)
            {
                DataTable dt = _Util.Facade.CustomerFacade.GetNewSalesReportsByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, SalesPerson);
                int[] colarray = { 11, 12, 13, 14, 15, 16, 17, 18 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "New Sales", rowarray, colarray);
            }
            TechUpSalesModel model = new TechUpSalesModel();


            model = _Util.Facade.CustomerFacade.GetTechUpSalesReportALLByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, pageno, pagesize, order, SalesPerson);


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            if (model.Totalcount > 0)
            {
                ViewBag.OutOfNumber = model.Totalcount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(model);
        }
        #endregion

        public ActionResult LoadRecurringBillingList(string billingdate, string searchtext, string methodtype)
        {
            string min = billingdate + " 00:00:00.000";
            string max = billingdate + " 23:59:59.000";
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            List<SelectListItem> invoicefor = new List<SelectListItem>();
            invoicefor.Add(new SelectListItem()
            {
                Text = "Select Method",
                Value = ""
            });
            invoicefor.Add(new SelectListItem()
            {
                Text = "ACH",
                Value = "ACH"
            });
            invoicefor.Add(new SelectListItem()
            {
                Text = "Credit Card",
                Value = "Credit Card"
            });
            invoicefor.Add(new SelectListItem()
            {
                Text = "Invoice",
                Value = "SystemGenerated"
            });
            ViewBag.invoicefor = invoicefor;
            List<Customer> model = _Util.Facade.CustomerFacade.GetRecurringBillingDetailsByCompanyId(CurrentUser.CompanyId.Value, max, min, searchtext, methodtype);
            ViewBag.billingdate = billingdate;
            ViewBag.searchtext = searchtext;
            ViewBag.methodtype = methodtype;
            return View(model);
        }

        public ActionResult GetTimeClockReport(bool? GetReport, string Start, string End)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetAllTimeClockReport(StartDate, EndDate);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllTimeClockReport(StartDate, EndDate);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllTimeClockReport(null, null);
                    }

                }
                return MakeExcelFromDataTable(dt, "TimeClockReport", null, null);
            }
            return View();
        }

        public ActionResult HudsonLeadsReportPartial()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuHudsonLeadsReport))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }
            return View();
        }

        public ActionResult LoadHudsonLeadsReport(string Start, string End, bool? GetReport, int pageno, int pagesize, string status, string market, string leads, string order)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string soldBy = "";
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.ShowAllReportData))
            {
                soldBy = CurrentUser.UserId.ToString();
            }
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            List<string> csmarket = new List<string>();
            if (!string.IsNullOrWhiteSpace(market) && market.ToLower() == "null")
            {
                market = null;
            }
            if (!string.IsNullOrWhiteSpace(market) && market != "undefined")
            {
                string[] spmarket = market.Split(',');
                if (spmarket.Length > 0)
                {
                    market = string.Format("'{0}'", string.Join("','", spmarket));
                    foreach (var item in spmarket)
                    {
                        csmarket.Add(item);

                    }
                }
            }
            List<string> csstatus = new List<string>();

            if (!string.IsNullOrWhiteSpace(status))
            {
                string[] StatusList = status.Split(',');
                if (StatusList != null)
                {
                    foreach (var item in StatusList)
                    {
                        csstatus.Add(item);
                    }
                }

            }
            List<string> csleads = new List<string>();

            if (!string.IsNullOrWhiteSpace(leads))
            {
                string[] LeadsList = leads.Split(',');
                if (LeadsList != null)
                {
                    foreach (var item in LeadsList)
                    {
                        csleads.Add(item);
                    }
                }

            }
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";

            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetAllHudsonLeadsReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, status, market, leads, soldBy);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllHudsonLeadsReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, status, market, leads, soldBy);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllHudsonLeadsReportByCompany(CurrentUser.CompanyId.Value, null, null, status, market, leads, soldBy);
                    }

                }
                return MakeExcelFromDataTable(dt, "LeadesReport", null, null);
            }
            CustomerListWithCountModel Model = new CustomerListWithCountModel();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                //EndDate = EndDate.AddHours(23).AddMinutes(59).AddSeconds(59);

                Model = _Util.Facade.CustomerFacade.GetAllLeadsByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, status, market, leads, soldBy, order);
            }
            else
            {
                //if (StartDate != new DateTime() && EndDate != new DateTime())
                //{
                Model = _Util.Facade.CustomerFacade.GetAllLeadsByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, status, market, leads, soldBy, order);
                //}
                //else
                //{
                //    Model = _Util.Facade.CustomerFacade.GetAllLeadsByCompany(CurrentUser.CompanyId.Value);
                //}

            }
            ViewBag.TotalLeads = Model.TotalCustomerCount.Counter;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;

            if (Model.CustomerList.Count > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCustomerCount.Counter;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            List<SelectListItem> leadstatus = new List<SelectListItem>();
            leadstatus.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("LeadStatus").OrderBy(x => x.DisplayText).Select(x =>
            new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            ViewBag.leadstatus = leadstatus;
            List<SelectListItem> leadmarket = new List<SelectListItem>();
            leadmarket.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("LeadMarket").Where(x => x.DataValue != "-1").OrderBy(x => x.DisplayText).Select(x =>
            new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            ViewBag.leadmarket = leadmarket;
            List<SelectListItem> leadsource = new List<SelectListItem>();
            leadsource.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("LeadSource").OrderBy(x => x.DisplayText).Select(x =>
            new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            ViewBag.leadsource = leadsource;
            ViewBag.statusval = status;
            //ViewBag.marketval = market;
            ViewBag.valmarket = csmarket;
            ViewBag.valstatus = csstatus;
            ViewBag.valleads = csleads;

            ViewBag.leadval = leads;
            return View(Model.CustomerList);
        }
        public ActionResult LoadHudsonFollowupReport(string Start, string End, bool? GetReport, int pageno, int pagesize, string status, string market, string leads, string SearchText, string StatusIDList, string SalesopenerList, string LeadsourceIdList, string SalespersonList, string order)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string soldBy = "";
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.ShowAllReportData))
            {
                soldBy = CurrentUser.UserId.ToString();
            }
            if (SearchText == "undefined" || SearchText == null)
            {
                SearchText = "";
            }
            List<string> Status = new List<string>();

            if (!string.IsNullOrWhiteSpace(StatusIDList))
            {
                string[] StatusList = StatusIDList.Split(',');
                if (StatusList != null)
                {
                    foreach (var item in StatusList)
                    {
                        Status.Add(item);
                    }
                }

            }
            ViewBag.StatusList = Status;

            List<string> source = new List<string>();

            if (!string.IsNullOrWhiteSpace(LeadsourceIdList))
            {
                string[] SourceList = LeadsourceIdList.Split(',');
                if (SourceList != null)
                {
                    foreach (var item in SourceList)
                    {
                        source.Add(item);
                    }
                }

            }
            ViewBag.LeadSourceList = source;

            List<string> SalesOpen = new List<string>();

            if (!string.IsNullOrWhiteSpace(SalesopenerList))
            {
                string[] SalesList = SalesopenerList.Split(',');
                if (SalesList != null)
                {
                    foreach (var item in SalesList)
                    {
                        SalesOpen.Add(item);
                    }
                }

            }
            ViewBag.SalesList = SalesOpen;


            List<string> SalesPerson = new List<string>();

            if (!string.IsNullOrWhiteSpace(SalespersonList))
            {
                string[] SPList = SalespersonList.Split(',');
                if (SPList != null)
                {
                    foreach (var item in SPList)
                    {
                        SalesPerson.Add(item);
                    }
                }

            }
            ViewBag.SalesPersonList = SalesPerson;
            TempData["data"] = SearchText;
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            List<string> csmarket = new List<string>();
            if (!string.IsNullOrWhiteSpace(market) && market.ToLower() == "null")
            {
                market = null;
            }
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (!string.IsNullOrWhiteSpace(market))
            {
                string[] spmarket = market.Split(',');
                if (spmarket.Length > 0)
                {
                    market = string.Format("'{0}'", string.Join("','", spmarket));
                    foreach (var item in spmarket)
                    {
                        csmarket.Add(item);

                    }
                }
            }
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {


                    dt = _Util.Facade.CustomerFacade.GetAllHudsonFollowupReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, status, market, leads, soldBy, SearchText, StatusIDList, SalesopenerList, LeadsourceIdList, SalespersonList);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllHudsonFollowupReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, status, market, leads, soldBy, SearchText, StatusIDList, SalesopenerList, LeadsourceIdList, SalespersonList);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllHudsonFollowupReportByCompany(CurrentUser.CompanyId.Value, null, null, status, market, leads, soldBy, SearchText, StatusIDList, SalesopenerList, LeadsourceIdList, SalespersonList);
                    }

                }

                return MakeExcelFromDataTable(dt, "FollowupReport", null, null);
            }



            List<SelectListItem> StatussList = new List<SelectListItem>();
            StatussList.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("LeadStatus").OrderBy(x => x.DisplayText).Where(x => x.DataValue != "-1").Select(x => new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            ViewBag.StatussList = StatussList;
            List<SelectListItem> SalesOpener = new List<SelectListItem>();

            SalesOpener.AddRange(_Util.Facade.EmployeeFacade.GetEmployee().OrderBy(x => x.FirstName + " " + x.LastName != "Please Select One").ThenBy(x => x.FirstName + " " + x.LastName).Select(x =>
                  new SelectListItem()
                  {
                      Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                      Value = x.FirstName.ToString() + " " + x.LastName.ToString()
                  }).ToList());

            ViewBag.SalesopenerList = SalesOpener;

            List<SelectListItem> SalesPRList = new List<SelectListItem>();

            SalesPRList.AddRange(_Util.Facade.EmployeeFacade.Getfollowupsalesperson().OrderBy(x => x.FirstName + " " + x.LastName != "Please Select One").ThenBy(x => x.FirstName + " " + x.LastName).Select(x =>
                  new SelectListItem()
                  {
                      Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                      Value = x.FirstName.ToString() + " " + x.LastName.ToString()
                  }).ToList());

            ViewBag.SalesPRList = SalesPRList;
            CustomerListWithCountModel Model = new CustomerListWithCountModel();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour();
                EndDate = Convert.ToDateTime(End).SetMaxHour();

                Model = _Util.Facade.CustomerFacade.GetAllFollowupByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, status, market, leads, soldBy, SearchText, StatusIDList, SalesopenerList, LeadsourceIdList, SalespersonList, order);
            }
            else
            {
                //if (StartDate != new DateTime() && EndDate != new DateTime())
                //{
                Model = _Util.Facade.CustomerFacade.GetAllFollowupByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, status, market, leads, soldBy, SearchText, StatusIDList, SalesopenerList, LeadsourceIdList, SalespersonList, order);
                //}
                //else
                //{
                //    Model = _Util.Facade.CustomerFacade.GetAllLeadsByCompany(CurrentUser.CompanyId.Value);
                //}

            }
            ViewBag.TotalLeads = Model.TotalCustomerCount.Counter;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;

            if (Model.CustomerList.Count > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCustomerCount.Counter;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            List<SelectListItem> leadstatus = new List<SelectListItem>();
            leadstatus.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("LeadStatus").Select(x =>
            new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            ViewBag.leadstatus = leadstatus;
            //List<SelectListItem> leadmarket = new List<SelectListItem>();
            //leadmarket.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("LeadMarket").Where(x => x.DataValue != "-1").Select(x =>
            //new SelectListItem()
            //{
            //    Text = x.DisplayText.ToString(),
            //    Value = x.DataValue.ToString()
            //}).ToList());
            //ViewBag.leadmarket = leadmarket;
            List<SelectListItem> leadsource = new List<SelectListItem>();
            leadsource.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("LeadSource").OrderBy(x => x.DisplayText).Select(x =>
            new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            ViewBag.leadsource = leadsource;
            ViewBag.statusval = status;
            //ViewBag.marketval = market;
            ViewBag.valmarket = csmarket;
            ViewBag.leadval = leads;
            return View(Model.CustomerList);
        }
        public ActionResult LoadLeadsReportOnlyForHudson(string Start, string End, bool? GetReport, int pageno, int pagesize, string status, string market, string leads, string order, string salesperson)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string soldBy = "";
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.ShowAllReportData))
            {
                soldBy = CurrentUser.UserId.ToString();
            }
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            List<string> csmarket = new List<string>();
            if (!string.IsNullOrWhiteSpace(market) && market.ToLower() == "null")
            {
                market = null;
            }
            if (!string.IsNullOrWhiteSpace(market))
            {
                string[] spmarket = market.Split(',');
                if (spmarket.Length > 0)
                {
                    market = string.Format("'{0}'", string.Join("','", spmarket));
                    foreach (var item in spmarket)
                    {
                        csmarket.Add(item);

                    }
                }
            }
            List<string> csstatus = new List<string>();

            if (!string.IsNullOrWhiteSpace(status))
            {
                string[] StatusList = status.Split(',');
                if (StatusList != null)
                {
                    foreach (var item in StatusList)
                    {
                        csstatus.Add(item);
                    }
                }

            }
            List<string> csleads = new List<string>();

            if (!string.IsNullOrWhiteSpace(leads))
            {
                string[] LeadsList = leads.Split(',');
                if (LeadsList != null)
                {
                    foreach (var item in LeadsList)
                    {
                        csleads.Add(item);
                    }
                }

            }
            List<string> cssalespr = new List<string>();

            if (!string.IsNullOrWhiteSpace(salesperson))
            {
                string[] SalesPrList = salesperson.Split(',');
                if (SalesPrList != null)
                {
                    foreach (var item in SalesPrList)
                    {
                        cssalespr.Add(item);
                    }
                }

            }
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";

            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour();
                    EndDate = Convert.ToDateTime(End).SetMaxHour();
                    dt = _Util.Facade.CustomerFacade.GetAllLeadsReportByCompanyForHudsonOnly(CurrentUser.CompanyId.Value, StartDate, EndDate, status, market, leads, soldBy, salesperson);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllLeadsReportByCompanyForHudsonOnly(CurrentUser.CompanyId.Value, StartDate, EndDate, status, market, leads, soldBy, salesperson);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllLeadsReportByCompanyForHudsonOnly(CurrentUser.CompanyId.Value, null, null, status, market, leads, soldBy, salesperson);
                    }

                }
                return MakeExcelFromDataTable(dt, "LeadsReport", null, null);
            }
            CustomerListWithCountModel Model = new CustomerListWithCountModel();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                //EndDate = EndDate.AddHours(23).AddMinutes(59).AddSeconds(59);

                Model = _Util.Facade.CustomerFacade.GetAllLeadsByCompanyAndDatesForHudsonOnly(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, status, market, leads, soldBy, order, salesperson);
            }
            else
            {
                //if (StartDate != new DateTime() && EndDate != new DateTime())
                //{
                Model = _Util.Facade.CustomerFacade.GetAllLeadsByCompanyAndDatesForHudsonOnly(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, status, market, leads, soldBy, order, salesperson);
                //}
                //else
                //{
                //    Model = _Util.Facade.CustomerFacade.GetAllLeadsByCompany(CurrentUser.CompanyId.Value);
                //}

            }
            ViewBag.TotalLeads = Model.TotalCustomerCount.Counter;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;

            if (Model.CustomerList.Count > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCustomerCount.Counter;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            List<SelectListItem> leadstatus = new List<SelectListItem>();
            leadstatus.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("LeadStatus").OrderBy(x => x.DisplayText).Select(x =>
            new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            ViewBag.leadstatus = leadstatus;
            List<SelectListItem> leadmarket = new List<SelectListItem>();
            leadmarket.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("LeadMarket").Where(x => x.DataValue != "-1").OrderBy(x => x.DisplayText).Select(x =>
            new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            ViewBag.leadmarket = leadmarket;
            List<SelectListItem> leadsource = new List<SelectListItem>();
            leadsource.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("LeadSource").OrderBy(x => x.DisplayText).Select(x =>
            new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            ViewBag.leadsource = leadsource;
            List<SelectListItem> SalesPerson = new List<SelectListItem>();

            SalesPerson.AddRange(_Util.Facade.EmployeeFacade.GetSalesPerson().OrderBy(x => x.FirstName + " " + x.LastName != "Please Select One").ThenBy(x => x.FirstName + " " + x.LastName).Select(x =>
                  new SelectListItem()
                  {
                      Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                      Value = x.FirstName.ToString() + " " + x.LastName.ToString()
                  }).ToList());

            ViewBag.SalespersonList = SalesPerson;
            ViewBag.statusval = status;
            //ViewBag.marketval = market;
            ViewBag.valmarket = csmarket;
            ViewBag.valstatus = csstatus;
            ViewBag.valleads = csleads;
            ViewBag.valsalespr = cssalespr;

            ViewBag.leadval = leads;
            return View(Model.CustomerList);
        }
        public ActionResult DownloadManufacturer(string name)
        {
            DataTable dt;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));


            dt = _Util.Facade.ManufacturerFacade.GetAllManufacturersExport(CurrentUser.CompanyId.Value, name);

            return MakeExcelFromDataTable(dt, "Manufacturers", null, null);
        }
        public ActionResult DownloadClusterMassRestock(string idlist)
        {
            string filefullpath = "";



            List<int> idList = new List<int>();
            if (!string.IsNullOrWhiteSpace(idlist))
            {
                var sidlist = idlist.Split(',');
                if (sidlist.Length > 0)
                {

                    foreach (var item in sidlist)
                    {
                        int val;
                        if (Int32.TryParse(item, out val))
                        {
                            idList.Add(val);
                        }
                        //idList.Add(Convert.ToInt32(item));
                    }

                }
            }

            try
            {
                if (idList.Count > 0)
                {

                }
                DataTable dt;


                dt = _Util.Facade.EquipmentFacade.GetClusterEquipmentListByCompanyIdTechnicianIdForReport(idlist);



                return MakeExcelFromDataTable(dt, "MassRestock", null, null);
            }
            catch (Exception)
            {
                return PartialView("~/Views/Shared/_FileNotFound.cshtml");
            }
        }
        public ActionResult LoadFinanceDealsReport(string Start, string End, bool? GetReport, int pageno, int pagesize, string status, string market, string leads, string SearchText, string FundingCompany, double? FinanceTerm, string StatusIDList, string order)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string soldBy = "";
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.ShowAllReportData))
            {
                soldBy = CurrentUser.UserId.ToString();
            }
            if (SearchText == "undefined" || SearchText == null)
            {
                SearchText = "";
            }
            List<string> Status = new List<string>();

            if (!string.IsNullOrWhiteSpace(StatusIDList))
            {
                string[] StatusList = StatusIDList.Split(',');
                if (StatusList != null)
                {
                    foreach (var item in StatusList)
                    {
                        Status.Add(item);
                    }
                }

            }
            ViewBag.StatusList = Status;

            TempData["data"] = SearchText;
            TempData["FundingCompany"] = FundingCompany;
            TempData["FinanceTerm"] = FinanceTerm;
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            List<string> csmarket = new List<string>();
            if (!string.IsNullOrWhiteSpace(market) && market.ToLower() == "null")
            {
                market = null;
            }
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (!string.IsNullOrWhiteSpace(market))
            {
                string[] spmarket = market.Split(',');
                if (spmarket.Length > 0)
                {
                    market = string.Format("'{0}'", string.Join("','", spmarket));
                    foreach (var item in spmarket)
                    {
                        csmarket.Add(item);

                    }
                }
            }
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetAllFinancedDealsReportCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, status, market, leads, soldBy, SearchText, FundingCompany, FinanceTerm, StatusIDList);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllFinancedDealsReportCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, status, market, leads, soldBy, SearchText, FundingCompany, FinanceTerm, StatusIDList);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllFinancedDealsReportCompany(CurrentUser.CompanyId.Value, null, null, status, market, leads, soldBy, SearchText, FundingCompany, FinanceTerm, StatusIDList);
                    }

                }

                int[] colarray = { 5 };
                int[] rowarray = { dt.Rows.Count + 2 };

                return MakeExcelFromDataTable(dt, "FinanceDeals", rowarray, colarray);
            }




            CustomerListWithCountModel Model = new CustomerListWithCountModel();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                //EndDate = EndDate.AddHours(23).AddMinutes(59).AddSeconds(59);

                Model = _Util.Facade.CustomerFacade.GetAllFinanceDealsBycustomerIdandCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, status, market, leads, soldBy, SearchText, FundingCompany, FinanceTerm, StatusIDList, order);
            }
            else
            {
                //if (StartDate != new DateTime() && EndDate != new DateTime())
                //{
                Model = _Util.Facade.CustomerFacade.GetAllFinanceDealsBycustomerIdandCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, status, market, leads, soldBy, SearchText, FundingCompany, FinanceTerm, StatusIDList, order);
                //}
                //else
                //{
                //    Model = _Util.Facade.CustomerFacade.GetAllLeadsByCompany(CurrentUser.CompanyId.Value);
                //}

            }
            ViewBag.TotalLeads = Model.TotalCustomerCount.Counter;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;

            if (Model.CustomerList.Count > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCustomerCount.Counter;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);

            List<SelectListItem> ticketstatus = new List<SelectListItem>();
            ticketstatus.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("TicketStatus").OrderBy(x => x.DisplayText != "Ticket Status").Select(x =>
           new SelectListItem()
           {
               Text = x.DisplayText.ToString(),
               Value = x.DataValue.ToString()
           }).ToList());
            ViewBag.TicketStatus = ticketstatus;

            return View(Model);
        }
        public ActionResult LoadFinancedReport(string Start, string End, bool? GetReport, int pageno, int pagesize, string status, string FinRep, string leads, string SearchText, string FundingCompany, double? FinanceTerm, string SalesRep, string order, FilterReportModel filter)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string soldBy = "";
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.ShowAllReportData))
            {
                soldBy = CurrentUser.UserId.ToString();
            }
            if (SearchText == "undefined" || SearchText == null)
            {
                SearchText = "";
            }
            List<string> SalesRepList = new List<string>();

            if (!string.IsNullOrWhiteSpace(SalesRep))
            {
                string[] StatusList = SalesRep.Split(',');
                if (StatusList != null)
                {
                    foreach (var item in StatusList)
                    {
                        SalesRepList.Add(item);
                    }
                }

            }
            ViewBag.SalesRepList = SalesRepList;

            List<string> FinRepList = new List<string>();

            if (!string.IsNullOrWhiteSpace(FinRep))
            {
                string[] StatusList = FinRep.Split(',');
                if (StatusList != null)
                {
                    foreach (var item in StatusList)
                    {
                        FinRepList.Add(item);
                    }
                }

            }
            ViewBag.FinRepList = FinRepList;
            TempData["data"] = SearchText;
            ViewBag.InstallMinDate = filter.installmindate;
            ViewBag.InstallMaxDate = filter.installmaxdate;
            ViewBag.SoldMaxDate = filter.soldmaxdate;
            ViewBag.SoldMinDate = filter.soldmindate;
            ViewBag.ScheduleMinDate = filter.schedulemindate;
            ViewBag.ScheduleMaxDate = filter.schedulemaxdate;


            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;

            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";

            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetAllFinancedReportCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, status, FinRep, leads, soldBy, SearchText, FundingCompany, FinanceTerm, SalesRep, filter);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllFinancedReportCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, status, FinRep, leads, soldBy, SearchText, FundingCompany, FinanceTerm, SalesRep, filter);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllFinancedReportCompany(CurrentUser.CompanyId.Value, null, null, status, FinRep, leads, soldBy, SearchText, FundingCompany, FinanceTerm, SalesRep, filter);
                    }

                }

                int[] colarray = { 5 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "Financed", rowarray, colarray);
            }




            CustomerListWithCountModel Model = new CustomerListWithCountModel();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();

                Model = _Util.Facade.CustomerFacade.GetAllFinancedBycustomerIdandCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, status, FinRep, leads, soldBy, SearchText, FundingCompany, FinanceTerm, SalesRep, order, filter);
            }
            else
            {
                //if (StartDate != new DateTime() && EndDate != new DateTime())
                //{
                Model = _Util.Facade.CustomerFacade.GetAllFinancedBycustomerIdandCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, status, FinRep, leads, soldBy, SearchText, FundingCompany, FinanceTerm, SalesRep, order, filter);
                //}
                //else
                //{
                //    Model = _Util.Facade.CustomerFacade.GetAllLeadsByCompany(CurrentUser.CompanyId.Value);
                //}

            }


            ViewBag.TotalLeads = Model.TotalCustomerCount.Counter;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;

            if (Model.CustomerList.Count > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCustomerCount.Counter;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);

            //List<Employee> EmployeelistFin = _Util.Facade.EmployeeFacade.GetAllEmployeeByCompanyId(CurrentUser.CompanyId.Value).ToList();

            //EmployeelistFin.Insert(0, new Employee()
            //{
            //    FirstName = "Please Select",
            //    LastName = "One",
            //    UserId = Guid.Empty
            //});


            //ViewBag.EmployeeListFin = EmployeelistFin.OrderBy(x => x.FirstName + " " + x.LastName != "Please Select One").ThenBy(x => x.FirstName + " " + x.LastName).ToList();

            List<SelectListItem> financereplist = new List<SelectListItem>();
            financereplist.Add(new SelectListItem()
            {
                Text = "Select Finance Rep",
                Value = "-1"
            });

            financereplist.AddRange(_Util.Facade.EmployeeFacade.GetAllEmployeeByCompanyIdForFinanced(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).Select(x => new SelectListItem()
            {
                Text = x.FirstName + " " + x.LastName,
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.financereplist = financereplist;

            List<SelectListItem> userlist = new List<SelectListItem>();
            userlist.Add(new SelectListItem()
            {
                Text = "Select Sales Rep",
                Value = "-1"
            });
            userlist.AddRange(_Util.Facade.EmployeeFacade.GetAllEmployeeByCompanyIdForFinanced(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).Select(x => new SelectListItem()
            {
                Text = x.FirstName + " " + x.LastName,
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.userlist = userlist;

            List<SelectListItem> ticketstatus = new List<SelectListItem>();
            ticketstatus.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("TicketStatus").OrderBy(x => x.DisplayText != "Ticket Status").Select(x =>
           new SelectListItem()
           {
               Text = x.DisplayText.ToString(),
               Value = x.DataValue.ToString()
           }).ToList());
            ViewBag.TicketStatus = ticketstatus;

            return View(Model);
        }
        public ActionResult ActivitiesReportPartial()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuActivitiesReport))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }

            return View();
        }

        public ActionResult LoadActivitiesReportPartial(string Start, string End, bool? GetReport, int pageno, int pagesize, string type, string status, string actorigin)
        {
            ActivityListFilterModel Model = new ActivityListFilterModel();
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string soldBy = "";
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.ShowAllReportData))
            {
                soldBy = CurrentUser.UserId.ToString();
            }
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.ActivityFacade.GetAllActivitiesReportExport(StartDate, EndDate, type, status, actorigin, soldBy);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.ActivityFacade.GetAllActivitiesReportExport(StartDate, EndDate, type, status, actorigin, soldBy);
                    }
                    else
                    {
                        dt = _Util.Facade.ActivityFacade.GetAllActivitiesReportExport(null, null, type, status, actorigin, soldBy);
                    }

                }
                return MakeExcelFromDataTable(dt, "ActivitiesReport", null, null);
            }
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                Model = _Util.Facade.ActivityFacade.GetAllActivitiesReport(pageno, pagesize, StartDate, EndDate, type, status, actorigin, soldBy);
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.ActivityFacade.GetAllActivitiesReport(pageno, pagesize, StartDate, EndDate, type, status, actorigin, soldBy);
                }
                else
                {
                    Model = _Util.Facade.ActivityFacade.GetAllActivitiesReport(pageno, pagesize, null, null, type, status, actorigin, soldBy);
                }
            }
            ViewBag.TotalLeads = Model.TotalActivityCountModel.TotalCount;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;

            if (Model.ListActivity.Count > 0)
            {
                ViewBag.OutOfNumber = Model.TotalActivityCountModel.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            List<SelectListItem> activitytype = new List<SelectListItem>();
            activitytype.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("ActivityType").Select(x =>
            new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            ViewBag.activitytype = activitytype;
            List<SelectListItem> activitystatus = new List<SelectListItem>();
            activitystatus.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("ActivityStatus").Select(x =>
            new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            ViewBag.activitystatus = activitystatus;
            ViewBag.typeval = type;
            ViewBag.statusval = status;
            List<SelectListItem> origin = new List<SelectListItem>();
            origin.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("ActivityOrigin").Select(x =>
            new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            ViewBag.origin = origin;
            ViewBag.actorigin = actorigin;
            return View(Model);
        }

        public ActionResult AccountsReportPartial()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuAccountsReport))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }
            return View();
        }

        public ActionResult LoadAccountsReportPartial(string Start, string End, bool? GetReport, int pageno, int pagesize, string Status, string market, string acctype, string servicetype)
        {
            List<string> CuStatus = new List<string>();
            List<string> csmarket = new List<string>();
            List<string> accountTypeSelected = new List<string>();
            List<string> ServiceTypeSelected = new List<string>();
            if (!string.IsNullOrWhiteSpace(market) && market.ToLower() == "null")
            {
                market = null;
            }
            string acctypeval = "";
            string servicetypeval = "";
            if (!string.IsNullOrEmpty(acctype))
            {
                string[] acctypeValList = acctype.Split(',');
                if (acctypeValList != null)
                {
                    foreach (var item in acctypeValList)
                    {
                        acctypeval += string.Format("'{0}',", item);
                        accountTypeSelected.Add(item);
                    }
                    acctypeval = acctypeval.Remove(acctypeval.Length - 1, 1);
                }

            }
            if (!string.IsNullOrEmpty(servicetype))
            {
                string[] servicetypeValList = servicetype.Split(',');
                if (servicetypeValList != null)
                {
                    foreach (var item in servicetypeValList)
                    {
                        servicetypeval += string.Format("'{0}',", item);
                        ServiceTypeSelected.Add(item);
                    }
                    servicetypeval = servicetypeval.Remove(servicetypeval.Length - 1, 1);
                }

            }
            ViewBag.SelectedAccType = accountTypeSelected;
            ViewBag.SelectedServiceType = ServiceTypeSelected;
            if (Status != null)
            {
                string[] spCuStatus = Status.Split(',');
                if (spCuStatus.Length > 0)
                {
                    foreach (var item in spCuStatus)
                    {
                        CuStatus.Add(item);
                    }

                }
            }
            if (!string.IsNullOrWhiteSpace(market))
            {
                string[] spmarket = market.Split(',');
                if (spmarket.Length > 0)
                {
                    market = string.Format("'{0}'", string.Join("','", spmarket));
                    foreach (var item in spmarket)
                    {
                        csmarket.Add(item);

                    }
                }
            }

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string soldBy = "";
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.ShowAllReportData))
            {
                soldBy = CurrentUser.UserId.ToString();
            }
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetAllHudsonCustomerReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, CuStatus, market, soldBy, acctypeval, servicetypeval);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllHudsonCustomerReportByCompany(CurrentUser.CompanyId.Value, StartDate, EndDate, CuStatus, market, soldBy, acctypeval, servicetypeval);

                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllHudsonCustomerReportByCompany(CurrentUser.CompanyId.Value, null, null, CuStatus, market, soldBy, acctypeval, servicetypeval);
                    }

                }

                return MakeExcelFromDataTable(dt, "AccountsReport", null, null);
            }
            List<Customer> Model = new List<Entities.Customer>();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                //EndDate = EndDate.AddHours(23).AddMinutes(59).AddSeconds(59);

                Model = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, CuStatus, market, soldBy, acctype, servicetypeval);
                ViewBag.TotalLeads = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate, CuStatus, market, soldBy, acctypeval, servicetypeval).Count;
                ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate, CuStatus, market, soldBy, acctypeval, servicetypeval).Count;
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, CuStatus, market, soldBy, acctypeval, servicetypeval);
                    ViewBag.TotalLeads = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate, CuStatus, market, soldBy, acctypeval, servicetypeval).Count;
                    ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate, CuStatus, market, soldBy, acctypeval, servicetypeval).Count;
                }
                else
                {
                    Model = _Util.Facade.CustomerFacade.GetAllCustomerByCompany(CurrentUser.CompanyId.Value, pageno, pagesize, CuStatus, market, soldBy, acctypeval, servicetypeval);
                    ViewBag.TotalLeads = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyCount(CurrentUser.CompanyId.Value, null, null, CuStatus, market, soldBy, acctypeval, servicetypeval).Count;
                    ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllCustomerByCompanyCount(CurrentUser.CompanyId.Value, null, null, CuStatus, market, soldBy, acctypeval, servicetypeval).Count;
                }

            }


            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }

            if (Model.Count() == 0)
            {
                pageno = 1;
                //customerfilterlist = _Util.Facade.CustomerFacade.GetCustomerByFilter(filter);
            }

            ViewBag.CustomerStatus = _Util.Facade.LookupFacade.GetLookupByKeyForReport("CustomerStatus").Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString(),

                           }).ToList();

            ViewBag.PageNumber = pageno;
            //ViewBag.OutOfNumber = 0;




            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            ViewBag.statuscustomer = CuStatus;
            List<SelectListItem> marketval = new List<SelectListItem>();
            marketval.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("LeadMarket").Where(x => x.DataValue != "-1").Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList());
            ViewBag.marketval = marketval;
            ViewBag.valmarket = csmarket;

            List<SelectListItem> servicetypeList = new List<SelectListItem>();
            servicetypeList.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("CustomerType").Where(x => x.DataValue != "-1").Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList());
            ViewBag.ServiceType = servicetypeList;


            List<SelectListItem> acctypeList = new List<SelectListItem>();
            acctypeList.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("CustomerAccountType").Where(x => x.DataValue != "-1").Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList());

            ViewBag.AccountType = acctypeList;
            return View(Model);
        }

        public ActionResult OpportunitiesReportPartial()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuOpportunitiesReport))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }
            return View();
        }

        public ActionResult LoadOpportunitiesReportPartial(string Start, string End, bool? GetReport, int pageno, int pagesize)
        {
            OpportunityListFilterModel Model = new OpportunityListFilterModel();
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string soldBy = "";
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.ShowAllReportData))
            {
                soldBy = CurrentUser.UserId.ToString();
            }
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportExport(StartDate, EndDate, null, null, null, null, null, soldBy, "");
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportExport(StartDate, EndDate, null, null, null, null, null, soldBy, "");
                    }
                    else
                    {
                        dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportExport(null, null, null, null, null, null, null, soldBy, "");
                    }

                }
                return MakeExcelFromDataTable(dt, "OpportunitiesReport", null, null);
            }
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReport(pageno, pagesize, StartDate, EndDate, null, null, null, null, null, soldBy, "");
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReport(pageno, pagesize, StartDate, EndDate, null, null, null, null, null, soldBy, "");
                }
                else
                {
                    Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReport(pageno, pagesize, null, null, null, null, null, null, null, soldBy, "");
                }
            }
            ViewBag.TotalLeads = Model.TotalOpportunityCountModel.TotalCount;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;

            if (Model.ListOpportunity.Count > 0)
            {
                ViewBag.OutOfNumber = Model.TotalOpportunityCountModel.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }

        public ActionResult SoftBacklogReportPartial()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuSoftBacklogReport))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }
            return View();
        }
        public ActionResult PartnerReports()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuPartnerReports))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<Partner> Partners = _Util.Facade.EmployeeFacade.GetEmployeeByPartnerId(CurrentUser.UserId);
            return View("_PartnerReports", Partners);
        }
        public ActionResult LeadSourceReports()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuLeadSourceReports))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<EmployeeLeadSource> EmployeeLeadSources = _Util.Facade.EmployeeFacade.GetEmployeeLeadSourceByEmployeeId(CurrentUser.UserId);

            ViewBag.LeadSourcesList = _Util.Facade.LookupFacade.GetLookupByKeyWithParent("LeadSource").Where(x => x.DataValue != "-1")
                .Where(product => EmployeeLeadSources
                                            .Select(ptp => ptp.LeadSource)
                                            .Contains(product.DataValue)
                           )
               .OrderBy(x => x.DisplayText).Select(x =>
                         new SelectListItem()
                         {
                             Text = x.DisplayText.ToString(),
                             Value = x.DataValue.ToString(),
                             //Selected = EmployeeLeadSources.Where(y => y.LeadSource == x.DataValue).Count() > 0
                         }).ToList();

            return View("_LeadSourceReports", EmployeeLeadSources);
        }
        public ActionResult LoadSoftBacklogReportPartial(string Start, string End, bool? GetReport, int pageno, int pagesize, string OppType, string delivery, string accountOwner)
        {
            List<string> valdeli = new List<string>();
            List<string> csmarket = new List<string>();
            if (!string.IsNullOrWhiteSpace(accountOwner) && accountOwner.ToLower() == "null")
            {
                accountOwner = null;
            }
            if (!string.IsNullOrWhiteSpace(accountOwner))
            {
                string[] spmarket = accountOwner.Split(',');
                if (spmarket.Length > 0)
                {
                    accountOwner = string.Format("'{0}'", string.Join("','", spmarket));
                    foreach (var item in spmarket)
                    {
                        csmarket.Add(item);

                    }
                }
            }
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string soldBy = "";
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.ShowAllReportData))
            {
                soldBy = CurrentLoggedInUser.UserId.ToString();
            }
            if (!string.IsNullOrWhiteSpace(delivery) && delivery.ToLower() == "null")
            {
                delivery = null;
            }

            if (!string.IsNullOrWhiteSpace(delivery))
            {
                string[] spdeli = delivery.Split(',');
                if (spdeli.Length > 0)
                {
                    delivery = string.Format("'{0}'", string.Join("','", spdeli));
                    foreach (var item in spdeli)
                    {
                        valdeli.Add(item);
                    }
                }
            }
            OpportunityListFilterModel Model = new OpportunityListFilterModel();
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportExport(StartDate, EndDate, OppType, null, delivery, null, accountOwner, soldBy, "SoftBackLog");
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportExport(StartDate, EndDate, OppType, null, delivery, null, accountOwner, soldBy, "SoftBackLog");
                    }
                    else
                    {
                        dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportExport(null, null, OppType, null, delivery, null, accountOwner, soldBy, "SoftBackLog");
                    }

                }
                return MakeExcelFromDataTable(dt, "SoftBacklogReport", null, null);
            }
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportSoft(pageno, pagesize, StartDate, EndDate, OppType, null, delivery, null, accountOwner, soldBy, "SoftBackLog");
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportSoft(pageno, pagesize, StartDate, EndDate, OppType, null, delivery, null, accountOwner, soldBy, "SoftBackLog");
                }
                else
                {
                    Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportSoft(pageno, pagesize, null, null, OppType, null, delivery, null, accountOwner, soldBy, "SoftBackLog");
                }
            }
            ViewBag.TotalLeads = Model.TotalOpportunityCountModel.TotalCount;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;

            if (Model.ListOpportunity.Count > 0)
            {
                ViewBag.OutOfNumber = Model.TotalOpportunityCountModel.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            List<SelectListItem> deliveryday = new List<SelectListItem>();
            deliveryday.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("OpportunityDeliveryDays").Where(x => x.DataValue != "-1").Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList());
            List<SelectListItem> Emplist = new List<SelectListItem>();

            Emplist = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentLoggedInUser.CompanyId.Value).Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();

            //Emplist.Insert(0, new SelectListItem()
            //{
            //    Text = "Select Account Owner",
            //    Value = ""
            //});
            ViewBag.EmployeeList = Emplist.OrderBy(x => x.Text).ToList();
            ViewBag.deliveryday = deliveryday;
            ViewBag.delivery = valdeli;
            ViewBag.empval = csmarket;
            return View(Model);
        }
        public ActionResult LoadClosedWonReportPartial(string Start, string End, bool? GetReport, int pageno, int pagesize, string OppType, string delivery, string accountOwner)
        {
            List<string> valdeli = new List<string>();
            List<string> csmarket = new List<string>();
            if (!string.IsNullOrWhiteSpace(accountOwner) && accountOwner.ToLower() == "null")
            {
                accountOwner = null;
            }
            if (!string.IsNullOrWhiteSpace(accountOwner))
            {
                string[] spmarket = accountOwner.Split(',');
                if (spmarket.Length > 0)
                {
                    accountOwner = string.Format("'{0}'", string.Join("','", spmarket));
                    foreach (var item in spmarket)
                    {
                        csmarket.Add(item);

                    }
                }
            }
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string soldBy = "";
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.ShowAllReportData))
            {
                soldBy = CurrentLoggedInUser.UserId.ToString();
            }
            if (!string.IsNullOrWhiteSpace(delivery) && delivery.ToLower() == "null")
            {
                delivery = null;
            }

            if (!string.IsNullOrWhiteSpace(delivery))
            {
                string[] spdeli = delivery.Split(',');
                if (spdeli.Length > 0)
                {
                    delivery = string.Format("'{0}'", string.Join("','", spdeli));
                    foreach (var item in spdeli)
                    {
                        valdeli.Add(item);
                    }
                }
            }
            OpportunityListFilterModel Model = new OpportunityListFilterModel();
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportExport(StartDate, EndDate, OppType, null, delivery, null, accountOwner, soldBy, "ClosedWon");
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportExport(StartDate, EndDate, OppType, null, delivery, null, accountOwner, soldBy, "ClosedWon");
                    }
                    else
                    {
                        dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportExport(null, null, OppType, null, delivery, null, accountOwner, soldBy, "ClosedWon");
                    }

                }
                return MakeExcelFromDataTable(dt, "SoftBacklogReport", null, null);
            }
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportSoft(pageno, pagesize, StartDate, EndDate, OppType, null, delivery, null, accountOwner, soldBy, "ClosedWon");
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportSoft(pageno, pagesize, StartDate, EndDate, OppType, null, delivery, null, accountOwner, soldBy, "ClosedWon");
                }
                else
                {
                    Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportSoft(pageno, pagesize, null, null, OppType, null, delivery, null, accountOwner, soldBy, "ClosedWon");
                }
            }
            ViewBag.TotalLeads = Model.TotalOpportunityCountModel.TotalCount;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;

            if (Model.ListOpportunity.Count > 0)
            {
                ViewBag.OutOfNumber = Model.TotalOpportunityCountModel.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            List<SelectListItem> deliveryday = new List<SelectListItem>();
            deliveryday.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("OpportunityDeliveryDays").Where(x => x.DataValue != "-1").Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList());
            List<SelectListItem> Emplist = new List<SelectListItem>();

            Emplist = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentLoggedInUser.CompanyId.Value).Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();

            //Emplist.Insert(0, new SelectListItem()
            //{
            //    Text = "Select Account Owner",
            //    Value = ""
            //});
            ViewBag.EmployeeList = Emplist.OrderBy(x => x.Text).ToList();
            ViewBag.deliveryday = deliveryday;
            ViewBag.delivery = valdeli;
            ViewBag.empval = csmarket;
            return View(Model);
        }
        public ActionResult LoadClosedLostReportPartial(string Start, string End, bool? GetReport, int pageno, int pagesize, string OppType, string delivery, string accountOwner)
        {
            List<string> valdeli = new List<string>();
            List<string> csmarket = new List<string>();
            if (!string.IsNullOrWhiteSpace(accountOwner) && accountOwner.ToLower() == "null")
            {
                accountOwner = null;
            }
            if (!string.IsNullOrWhiteSpace(accountOwner))
            {
                string[] spmarket = accountOwner.Split(',');
                if (spmarket.Length > 0)
                {
                    accountOwner = string.Format("'{0}'", string.Join("','", spmarket));
                    foreach (var item in spmarket)
                    {
                        csmarket.Add(item);

                    }
                }
            }
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string soldBy = "";
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.ShowAllReportData))
            {
                soldBy = CurrentLoggedInUser.UserId.ToString();
            }
            if (!string.IsNullOrWhiteSpace(delivery) && delivery.ToLower() == "null")
            {
                delivery = null;
            }

            if (!string.IsNullOrWhiteSpace(delivery))
            {
                string[] spdeli = delivery.Split(',');
                if (spdeli.Length > 0)
                {
                    delivery = string.Format("'{0}'", string.Join("','", spdeli));
                    foreach (var item in spdeli)
                    {
                        valdeli.Add(item);
                    }
                }
            }
            OpportunityListFilterModel Model = new OpportunityListFilterModel();
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportExport(StartDate, EndDate, OppType, null, delivery, null, accountOwner, soldBy, "ClosedLost");
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportExport(StartDate, EndDate, OppType, null, delivery, null, accountOwner, soldBy, "ClosedLost");
                    }
                    else
                    {
                        dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportExport(null, null, OppType, null, delivery, null, accountOwner, soldBy, "ClosedLost");
                    }

                }
                return MakeExcelFromDataTable(dt, "SoftBacklogReport", null, null);
            }
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportSoft(pageno, pagesize, StartDate, EndDate, OppType, null, delivery, null, accountOwner, soldBy, "ClosedLost");
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportSoft(pageno, pagesize, StartDate, EndDate, OppType, null, delivery, null, accountOwner, soldBy, "ClosedLost");
                }
                else
                {
                    Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportSoft(pageno, pagesize, null, null, OppType, null, delivery, null, accountOwner, soldBy, "ClosedLost");
                }
            }
            ViewBag.TotalLeads = Model.TotalOpportunityCountModel.TotalCount;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;

            if (Model.ListOpportunity.Count > 0)
            {
                ViewBag.OutOfNumber = Model.TotalOpportunityCountModel.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            List<SelectListItem> deliveryday = new List<SelectListItem>();
            deliveryday.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("OpportunityDeliveryDays").Where(x => x.DataValue != "-1").Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList());
            List<SelectListItem> Emplist = new List<SelectListItem>();

            Emplist = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentLoggedInUser.CompanyId.Value).Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();

            //Emplist.Insert(0, new SelectListItem()
            //{
            //    Text = "Select Account Owner",
            //    Value = ""
            //});
            ViewBag.EmployeeList = Emplist.OrderBy(x => x.Text).ToList();
            ViewBag.deliveryday = deliveryday;
            ViewBag.delivery = valdeli;
            ViewBag.empval = csmarket;
            return View(Model);
        }
        public ActionResult LoadAgedReportPartial(string Start, string End, bool? GetReport, int pageno, int pagesize, string OppType, string delivery, string accountOwner)
        {
            List<string> valdeli = new List<string>();
            List<string> csmarket = new List<string>();
            if (!string.IsNullOrWhiteSpace(accountOwner) && accountOwner.ToLower() == "null")
            {
                accountOwner = null;
            }
            if (!string.IsNullOrWhiteSpace(accountOwner))
            {
                string[] spmarket = accountOwner.Split(',');
                if (spmarket.Length > 0)
                {
                    accountOwner = string.Format("'{0}'", string.Join("','", spmarket));
                    foreach (var item in spmarket)
                    {
                        csmarket.Add(item);

                    }
                }
            }
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string soldBy = "";
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.ShowAllReportData))
            {
                soldBy = CurrentLoggedInUser.UserId.ToString();
            }
            if (!string.IsNullOrWhiteSpace(delivery) && delivery.ToLower() == "null")
            {
                delivery = null;
            }

            if (!string.IsNullOrWhiteSpace(delivery))
            {
                string[] spdeli = delivery.Split(',');
                if (spdeli.Length > 0)
                {
                    delivery = string.Format("'{0}'", string.Join("','", spdeli));
                    foreach (var item in spdeli)
                    {
                        valdeli.Add(item);
                    }
                }
            }
            OpportunityListFilterModel Model = new OpportunityListFilterModel();
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportExport(StartDate, EndDate, OppType, null, delivery, null, accountOwner, soldBy, "Aged");
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportExport(StartDate, EndDate, OppType, null, delivery, null, accountOwner, soldBy, "Aged");
                    }
                    else
                    {
                        dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportExport(null, null, OppType, null, delivery, null, accountOwner, soldBy, "Aged");
                    }

                }
                return MakeExcelFromDataTable(dt, "SoftBacklogReport", null, null);
            }
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportSoft(pageno, pagesize, StartDate, EndDate, OppType, null, delivery, null, accountOwner, soldBy, "Aged");
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportSoft(pageno, pagesize, StartDate, EndDate, OppType, null, delivery, null, accountOwner, soldBy, "Aged");
                }
                else
                {
                    Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportSoft(pageno, pagesize, null, null, OppType, null, delivery, null, accountOwner, soldBy, "Aged");
                }
            }
            ViewBag.TotalLeads = Model.TotalOpportunityCountModel.TotalCount;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;

            if (Model.ListOpportunity.Count > 0)
            {
                ViewBag.OutOfNumber = Model.TotalOpportunityCountModel.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            List<SelectListItem> deliveryday = new List<SelectListItem>();
            deliveryday.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("OpportunityDeliveryDays").Where(x => x.DataValue != "-1").Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList());
            List<SelectListItem> Emplist = new List<SelectListItem>();

            Emplist = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentLoggedInUser.CompanyId.Value).Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();
            ViewBag.EmployeeList = Emplist.OrderBy(x => x.Text).ToList();
            ViewBag.deliveryday = deliveryday;
            ViewBag.delivery = valdeli;
            ViewBag.empval = csmarket;
            return View(Model);
        }

        public ActionResult HardBacklogReportPartial()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuHardBacklogReport))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }
            return View();
        }

        public ActionResult LoadHardBacklogReportPartial(bool? GetReport, int pageno, int pagesize, string OppType, string year, string month, string accountOwner)
        {
            List<string> csmarket = new List<string>();
            if (!string.IsNullOrWhiteSpace(accountOwner) && accountOwner.ToLower() == "null")
            {
                accountOwner = null;
            }
            if (!string.IsNullOrWhiteSpace(accountOwner))
            {
                string[] spmarket = accountOwner.Split(',');
                if (spmarket.Length > 0)
                {
                    accountOwner = string.Format("'{0}'", string.Join("','", spmarket));
                    foreach (var item in spmarket)
                    {
                        csmarket.Add(item);

                    }
                }
            }

            OpportunityListFilterModel Model = new OpportunityListFilterModel();
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string soldBy = "";
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.ShowAllReportData))
            {
                soldBy = CurrentLoggedInUser.UserId.ToString();
            }
            //ViewBag.StartDate = Start;
            //ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            //DateTime StartDate = new DateTime();
            //DateTime EndDate = new DateTime();
            //string newCookie = "";
            //if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            //{
            //    newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
            //    newCookie = Server.UrlDecode(newCookie);
            //    var CookieVals = newCookie.Split(',');

            //    if (CookieVals.Length == 3)
            //    {
            //        StartDate = CookieVals[0].ToDateTime();
            //        EndDate = CookieVals[1].ToDateTime();
            //    }
            //}

            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                //if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                //{
                //    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                //    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                //    dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesForHardBacklogReportExport(StartDate, EndDate, OppType, year, null, month, accountOwner);
                //}
                //else
                //{
                //if (StartDate != new DateTime() && EndDate != new DateTime())
                //{
                //    dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesForHardBacklogReportExport(StartDate, EndDate, OppType, year, null, month, accountOwner);
                //}
                //else
                //{
                dt = _Util.Facade.OpportunityFacade.GetAllOpportunitiesForHardBacklogReportExport(OppType, year, null, month, accountOwner, soldBy);
                //}

                //}
                dt.Columns.Remove("CreatedMonth");
                return MakeExcelFromDataTable(dt, "HardBacklogReport", null, null);
            }
            //if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            //{
            //    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
            //    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
            //    Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportHard(pageno, pagesize, StartDate, EndDate, OppType, year, null, month, accountOwner);
            //}
            //else
            //{
            //if (StartDate != new DateTime() && EndDate != new DateTime())
            //{
            //    Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportHard(pageno, pagesize, StartDate, EndDate, OppType, year, null, month, accountOwner);
            //}
            //else
            //{
            Model = _Util.Facade.OpportunityFacade.GetAllOpportunitiesReportHard(pageno, pagesize, OppType, year, null, month, accountOwner, soldBy);
            //}
            //}

            var listyear = Enumerable.Range(0, 6).Select(i => DateTime.Now.AddYears(i - 6)).Select(date => date.ToString("yyyy"));
            List<SelectListItem> YearList = new List<SelectListItem>();
            YearList.AddRange(listyear.Select(x => new SelectListItem()
            {
                Text = x,
                Value = x
            }).ToList());
            YearList.Add(new SelectListItem()
            {
                Text = DateTime.Now.Year.ToString(),
                Value = DateTime.Now.Year.ToString(),
                Selected = true
            });

            List<SelectListItem> Emplist = new List<SelectListItem>();

            Emplist = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentLoggedInUser.CompanyId.Value).Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();

            //Emplist.Insert(0, new SelectListItem()
            //{
            //    Text = "Select Account Owner",
            //    Value = ""
            //});
            ViewBag.EmployeeList = Emplist.OrderBy(x => x.Text).ToList();
            ViewBag.YearList = YearList;
            ViewBag.year = year;
            ViewBag.monthval = month;
            ViewBag.empval = csmarket;
            return View(Model);
        }

        public ActionResult CancellationCue()
        {
            //if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuCancellationCue))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            return View("_CancellationCue");
        }
        public ActionResult CancellationCuePartial(string Start, string End, int pageno, int pagesize, string reason, string contractSigned, bool? GetReport, string order, string employeereason, string effectivemindate, string effectivemaxdate, string name)
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            //}
            //pagesize = 1000;
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            List<string> CancellReason = new List<string>();

            if (!string.IsNullOrWhiteSpace(reason))
            {
                string[] Reasonlist = reason.Split(',');
                if (Reasonlist != null)
                {
                    foreach (var item in Reasonlist)
                    {
                        CancellReason.Add(item);
                    }
                }

            }
            ViewBag.CancellReason = CancellReason;

            CustomerCancellationQueueListWithCount Model = new CustomerCancellationQueueListWithCount();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
            }
            if (GetReport.HasValue && GetReport.Value == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetAllCustomerCancellationQueueExport(StartDate, EndDate, pageno, pagesize, reason, contractSigned, employeereason, effectivemindate, effectivemaxdate, name);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllCustomerCancellationQueueExport(StartDate, EndDate, pageno, pagesize, reason, contractSigned, employeereason, effectivemindate, effectivemaxdate, name);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllCustomerCancellationQueueExport(StartDate, EndDate, pageno, pagesize, reason, contractSigned, employeereason, effectivemindate, effectivemaxdate, name);
                    }

                }
                int[] colarray = { 8 };
                int[] rowarray = { dt.Rows.Count + 2 };

                return MakeExcelFromDataTable(dt, "CancellationQueueReport", rowarray, colarray);
            }
            Model = _Util.Facade.CustomerFacade.GetAllCustomerCancellationQueue(StartDate, EndDate, pageno, pagesize, reason, contractSigned, order, employeereason, effectivemindate, effectivemaxdate, name);

            ViewBag.TotalLeads = Model.TotalCustomerCancellationCount.TotalCount;
            ViewBag.OutOfNumber = Model.TotalCustomerCancellationCount.TotalCount;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            if (Model.TotalCustomerCancellationCount.TotalCount == 0)
            {
                pageno = 1;
            }
            ViewBag.CancellationReason = _Util.Facade.LookupFacade.GetLookupByKeyForReport("CancellationReason").OrderBy(x => x.DisplayText != "Cancellation Reason").ThenBy(x => x.DisplayText).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString(),

                           }).ToList();
            ViewBag.ContractSigned = _Util.Facade.LookupFacade.GetLookupByKeyForReport("ContractSigned").OrderBy(x => x.DisplayText != "Select One").ThenBy(x => x.DisplayText).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.DFWCancelReasonList = _Util.Facade.LookupFacade.GetLookupByKey("DFWCancellationReason").OrderBy(x => x.DisplayText != "Contract Reason").Select(x =>
                     new SelectListItem()
                     {
                         Text = x.DisplayText.ToString(),
                         Value = x.DataValue.ToString()
                     }).ToList();

            #region CancellationRegion
            bool IsCancellReason = false;
            GlobalSetting GlobalSet = _Util.Facade.GlobalSettingsFacade.GetGlobalsettingBySearchKeyAndCompanyId("ShowDFWCancellationReason", CurrentUser.CompanyId.Value);
            if (GlobalSet != null && !string.IsNullOrWhiteSpace(GlobalSet.Value))
            {
                if (GlobalSet.Value == "true")
                {
                    IsCancellReason = true;
                }
            }
            ViewBag.CancellationEmployeeReason = IsCancellReason;


            #endregion
            ViewBag.PageNumber = pageno;
            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            if (reason == "undefined")
            {
                reason = "";
            }
            if (employeereason == "undefined")
            {
                employeereason = "";
            }
            if (contractSigned == "undefined")
            {
                contractSigned = "";
            }
            if (effectivemindate == "undefined")
            {
                effectivemindate = "";
            }
            if (effectivemaxdate == "undefined")
            {
                effectivemaxdate = "";
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            ViewBag.CancellationReasonValue = reason;
            ViewBag.ContractSignedValue = contractSigned;
            ViewBag.DFWCancellationReasonValue = employeereason;
            ViewBag.effectivemindate = effectivemindate;
            ViewBag.effectivemaxdate = effectivemaxdate;
            ViewBag.name = name;


            return View("_CancellationCuePartial", Model);
        }
        public JsonResult MakeCancelCustomer(List<CustomerCancellationList> CancellationList)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;

            foreach (var item in CancellationList)
            {
                CustomerCancellationQueue cancellationQueue = _Util.Facade.CustomerFacade.GetCustomerCancellationQueueByCustomerId(item.CustomerId);
                cancellationQueue.IsCancelled = true;
                cancellationQueue.IsInvoiceOff = item.IsInvoiceOff;
                cancellationQueue.IsBillingOff = item.IsBillingOff;
                cancellationQueue.IsAlarmOff = item.IsAlarmOff;
                _Util.Facade.CustomerFacade.UpdateCustomerCancellationQueue(cancellationQueue);

                Customer cus = _Util.Facade.CustomerFacade.GetCustomerByCustomerId(item.CustomerId);
                cus.IsActive = false;
                cus.CustomerStatus = "9";
                _Util.Facade.CustomerFacade.UpdateCustomer(cus);

                base.AddUserActivityForCustomer("Customer Is Cancelled By " + (CurrentUser.FirstName + CurrentUser.LastName), LabelHelper.ActivityAction.Update, item.CustomerId, null, null);
            }
            return Json(new { result = true });
        }
        public ActionResult CancelledCustomerPartial(string Start, string End, int pageno, int pagesize, bool? GetReport, string order, string SearchText)
        {
            //if (!base.IsPermitted(UserPermissions.ReportsPermissions.LeadsReport))
            //{
            //    return PartialView("~/Views/Shared/_AonvertedcessDenied.cshtml");
            //}
            ViewBag.SearchText = SearchText;
            List<string> CuStatus = new List<string>();
            CuStatus.Add("Cancel");
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string soldBy = "";
            if (!base.IsPermitted(UserPermissions.ReportsPermissions.ShowAllReportData))
            {
                soldBy = CurrentUser.UserId.ToString();
            }
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            List<Customer> Model = new List<Entities.Customer>();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                //StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                //EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();

                Model = _Util.Facade.CustomerFacade.GetAllCancelCustomerByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, order, SearchText);
                ViewBag.TotalLeads = _Util.Facade.CustomerFacade.GetAllCancelCustomerByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate).Count;
                ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllCancelCustomerByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate).Count;
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    Model = _Util.Facade.CustomerFacade.GetAllCancelCustomerByCompanyAndDates(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, order, SearchText);
                    ViewBag.TotalLeads = _Util.Facade.CustomerFacade.GetAllCancelCustomerByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate).Count;
                    ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllCancelCustomerByCompanyCount(CurrentUser.CompanyId.Value, StartDate, EndDate).Count;
                }
                else
                {
                    Model = _Util.Facade.CustomerFacade.GetAllCancelCustomerByCompany(CurrentUser.CompanyId.Value, pageno, pagesize, order, SearchText);
                    ViewBag.TotalLeads = _Util.Facade.CustomerFacade.GetAllCancelCustomerByCompanyCount(CurrentUser.CompanyId.Value, null, null).Count;
                    ViewBag.OutOfNumber = _Util.Facade.CustomerFacade.GetAllCancelCustomerByCompanyCount(CurrentUser.CompanyId.Value, null, null).Count;
                }

            }
            if (GetReport.HasValue && GetReport.Value == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.CustomerFacade.GetAllCancelCustomerByCompanyCancelReport(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, SearchText);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllCancelCustomerByCompanyCancelReport(CurrentUser.CompanyId.Value, StartDate, EndDate, pageno, pagesize, SearchText);
                    }
                    else
                    {
                        dt = _Util.Facade.CustomerFacade.GetAllCancelCustomerByCompanyCancelReport(CurrentUser.CompanyId.Value, null, null, pageno, pagesize, SearchText);
                    }

                }
                return MakeExcelFromDataTable(dt, "CancelledCustomerReport", null, null);
            }
            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }

            if (Model.Count() == 0)
            {
                pageno = 1;
            }

            ViewBag.PageNumber = pageno;
            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageSize = Model.Count;

            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return PartialView("_CancelledCustomerPartial", Model);
        }
        #region Aging Report
        public ActionResult AgingReport()
        {
            return PartialView("_AgingReport");
        }
        public ActionResult Aging()
        {
            ViewBag.EndDate = DateTime.Now;
            List<CustomerPaymentMethod> filterList = new List<CustomerPaymentMethod>(){
                new CustomerPaymentMethod(){ Paymentmethod = "All"},
                new CustomerPaymentMethod(){ Paymentmethod = "Recurring Bill"}
            };
            List<SelectListItem> List = new List<SelectListItem>();
            List.Add(new SelectListItem() { Text = "All", Value = "All" });
            List.Add(new SelectListItem() { Text = "Recurring Bill", Value = "RecurringBill" });
            ViewBag.Filter = List;
            return PartialView("_Aging");
        }
        public ActionResult AgingPartial(string End, string SearchText, int pageno, int pagesize, bool? GetReport, string reportFor, string order)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            ViewBag.EndDate = End;
            ViewBag.CompanyName = CurrentUser.CompanyName;
            DateTime EndDate = new DateTime();
            CustomerListAgingWithCount Model = new CustomerListAgingWithCount();
            if (!string.IsNullOrWhiteSpace(End) && End != "undefined")
            {
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
            }
            if (GetReport.HasValue && GetReport.Value == true)
            {
                DataTable dt;
                dt = _Util.Facade.CustomerFacade.GetCustomerListAgingExport(EndDate, SearchText, pageno, pagesize, reportFor);
                int[] colarray = { 3, 4, 5, 6, 7, 8 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "AgingReport", rowarray, colarray);
            }
            Model = _Util.Facade.CustomerFacade.GetCustomerListAgingWithCount(EndDate, SearchText, pageno, pagesize, reportFor, order);

            ViewBag.TotalLeads = Model.TotalCustomerAgingCount.TotalCount;
            ViewBag.OutOfNumber = Model.TotalCustomerAgingCount.TotalCount;

            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            if (Model.TotalCustomerAgingCount.TotalCount == 0)
            {
                pageno = 1;
            }
            ViewBag.PageNumber = pageno;
            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            ViewBag.SearchText = SearchText;
            return View("_AgingPartial", Model);
        }
        public ActionResult OpenAgingInvoiceList(Guid CustomerId, string Type, string End)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime EndDate = new DateTime();
            if (!string.IsNullOrWhiteSpace(End) && End != "undefined")
            {
                EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
            }
            List<Invoice> invoiceList = new List<Invoice>();
            invoiceList = _Util.Facade.CustomerFacade.GetAgingInvoiceListByCustomerId(CustomerId, Type, EndDate);
            return PartialView("_OpenAgingInvoiceList", invoiceList);
        }
        #endregion

        public ActionResult SalesMatrixReports()
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            #region Sales matrix effective week
            GlobalSetting glob = _Util.Facade.GlobalSettingsFacade.GetGlobalSettingsByKey(CurrentUser.CompanyId.Value, "SalesMatrixEffectiveFilterWeek");
            string effectiveWeekToDay = "6";
            if (glob != null && !string.IsNullOrWhiteSpace(glob.Value) && glob.Value != "-1")
            {
                effectiveWeekToDay = (Convert.ToInt32(glob.Value) * 7).ToString();
            }
            ViewBag.SalesMatrixEffectiveWeek = effectiveWeekToDay;
            #endregion

            return View("_SalesMatrixReports");
        }


        public ActionResult FirstCallClose()
        {
            WeeklyViewBag();
            return PartialView("_FirstCallClose");
        }
        public ActionResult FirstCallClosePartial_Old(string Start, string End, int pageno, int pagesize, string order, bool? GetReport)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();

            EmployeeListMatrixWithCount Model = new EmployeeListMatrixWithCount();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End) && Start != "undefined" && End != "undefined")
            {
                StartDate = Convert.ToDateTime(Start);
                EndDate = Convert.ToDateTime(End);
            }
            if (GetReport == true)
            {
                DataTable dt;
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadFirstCallCloseReport(StartDate, EndDate);
                    // dt = _Util.Facade.TicketFacade.GetDownLoadAdjustmentFundingReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, FilterText);

                }
                else
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadFirstCallCloseReport(new DateTime(), new DateTime());
                }


                return MakeExcelFromDataTable(dt, "First Call Close", null, null);
            }

            _Util.Facade.ErrorFacade.InsertErrorLog(new ErrorLog() { ErrorId = Guid.NewGuid(), ErrorFor = "Controller|Report|FirstCallClosePartial", Message = string.Format("{0} | {1} | {2} | {3}", Start, End, pageno, order), TimeUtc=DateTime.Now });
            Model = _Util.Facade.EmployeeFacade.GetFirsCallCloseMatrixWithCount(StartDate.SetZeroHour().ClientToUTCTime(), EndDate.SetMaxHour().ClientToUTCTime(), pageno, pagesize, order);

            ViewBag.TotalLeads = Model.TotalEmployeeCount.TotalCount;
            ViewBag.OutOfNumber = Model.TotalEmployeeCount.TotalCount;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            if (Model.TotalEmployeeCount.TotalCount == 0)
            {
                pageno = 1;
            }
            ViewBag.CancellationReason = _Util.Facade.LookupFacade.GetLookupByKeyForReport("CancellationReason").OrderBy(x => x.DisplayText).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.ContractSigned = _Util.Facade.LookupFacade.GetLookupByKeyForReport("ContractSigned").OrderBy(x => x.DisplayText).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.PageNumber = pageno;
            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View("_FirstCallClosePartial", Model);
        }

        public ActionResult FirstCallClosePartial(string Start, string End, int pageno, int pagesize, string order, bool? GetReport)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();

            EmployeeListMatrixWithCount Model = new EmployeeListMatrixWithCount();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End) && Start != "undefined" && End != "undefined")
            {
                StartDate = Convert.ToDateTime(Start);
                EndDate = Convert.ToDateTime(End);
            }
            if (GetReport == true)
            {
                DataTable dt;
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadFirstCallCloseReport(StartDate, EndDate);
                    // dt = _Util.Facade.TicketFacade.GetDownLoadAdjustmentFundingReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, FilterText);

                }
                else
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadFirstCallCloseReport(new DateTime(), new DateTime());
                }


                return MakeExcelFromDataTable(dt, "First Call Close", null, null);
            }

            _Util.Facade.ErrorFacade.InsertErrorLog(new ErrorLog() { ErrorId = Guid.NewGuid(), ErrorFor = "Controller|Report|FirstCallClosePartial", Message = string.Format("{0} | {1} | {2} | {3}", Start, End, pageno, order), TimeUtc = DateTime.Now });
            Model = _Util.Facade.EmployeeFacade.GetFirsCallCloseMatrixWithCount(StartDate.SetZeroHour(), EndDate.SetMaxHour(), pageno, pagesize, order);

            ViewBag.TotalLeads = Model.TotalEmployeeCount.TotalCount;
            ViewBag.OutOfNumber = Model.TotalEmployeeCount.TotalCount;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            if (Model.TotalEmployeeCount.TotalCount == 0)
            {
                pageno = 1;
            }
            ViewBag.CancellationReason = _Util.Facade.LookupFacade.GetLookupByKeyForReport("CancellationReason").OrderBy(x => x.DisplayText).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.ContractSigned = _Util.Facade.LookupFacade.GetLookupByKeyForReport("ContractSigned").OrderBy(x => x.DisplayText).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.PageNumber = pageno;
            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View("_FirstCallClosePartial", Model);
        }
        public ActionResult FirstCallClosePartialT1(string Start, string End, int pageno, int pagesize, string order, bool? GetReport)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();

            EmployeeListMatrixWithCount Model = new EmployeeListMatrixWithCount();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End) && Start != "undefined" && End != "undefined")
            {
                StartDate = Convert.ToDateTime(Start);
                EndDate = Convert.ToDateTime(End);
            }
            if (GetReport == true)
            {
                DataTable dt;
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadFirstCallCloseReport(StartDate, EndDate);
                    // dt = _Util.Facade.TicketFacade.GetDownLoadAdjustmentFundingReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, FilterText);

                }
                else
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadFirstCallCloseReport(new DateTime(), new DateTime());
                }


                return MakeExcelFromDataTable(dt, "First Call Close", null, null);
            }

            _Util.Facade.ErrorFacade.InsertErrorLog(new ErrorLog() { ErrorId = Guid.NewGuid(), ErrorFor = "Controller|Report|FirstCallClosePartial", Message = string.Format("{0} | {1} | {2} | {3}", Start, End, pageno, order), TimeUtc = DateTime.Now });
            Model = _Util.Facade.EmployeeFacade.GetFirsCallCloseMatrixWithCountT1(Start, End, pageno, pagesize, order);

            ViewBag.TotalLeads = Model.TotalEmployeeCount.TotalCount;
            ViewBag.OutOfNumber = Model.TotalEmployeeCount.TotalCount;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            if (Model.TotalEmployeeCount.TotalCount == 0)
            {
                pageno = 1;
            }
            ViewBag.CancellationReason = _Util.Facade.LookupFacade.GetLookupByKeyForReport("CancellationReason").OrderBy(x => x.DisplayText).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.ContractSigned = _Util.Facade.LookupFacade.GetLookupByKeyForReport("ContractSigned").OrderBy(x => x.DisplayText).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.PageNumber = pageno;
            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View("_FirstCallClosePartial", Model);
        }
        public ActionResult SalesMatrixCustomerListPertial(Guid EmployeeId, string from)
        {
            ViewBag.EmployeeId = EmployeeId;
            ViewBag.From = from;
            ViewBag.TodayDate = DateTime.Now.ToString("MM/dd/yyyy");
            return View();
        }

        public ActionResult DownloadSalesMatrixCustomerListReport(string Start, string End, Guid EmpId, string from)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End) && Start != "undefined" && End != "undefined")
            {
                StartDate = Convert.ToDateTime(Start);
                EndDate = Convert.ToDateTime(End);
            }
            DataTable dt;
            ViewBag.from = from;
            if (from == "SoldFunded" || from == "Appointment" || from == "Sales")
            {
                dt = _Util.Facade.EmployeeFacade.GetSoldFundedMatrixCustomerDataDownload(StartDate, EndDate, EmpId, from);

            }
            else if (from == "FirstCallClose" || from == "OverallClose" || from == "CustomerFunded" || from == "AppointmentCustomer" || from == "AssignTo" || from == "ApptSet" || from == "TotalLead" || from == "BadLead" || from == "GoodLead")
            {
                dt = _Util.Facade.EmployeeFacade.GetFirsCallCloseCustomerDataDownload(StartDate, EndDate, EmpId, from);
            }
            else
            {
                dt = _Util.Facade.EmployeeFacade.GetFirsCallCustomerDataDownload(StartDate, EndDate, EmpId);
            }

            dt.Columns.Remove("Id");
            return MakeExcelFromDataTable(dt, "Customer Data", null, null);
        }
        public ActionResult SalesMatrixCustomerList(string Start, string End, Guid EmpId, int pageno, int pagesize, string from)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End) && Start != "undefined" && End != "undefined")
            {
                StartDate = Convert.ToDateTime(Start);
                EndDate = Convert.ToDateTime(End);
            }
            EmployeeListMatrixCustomerModel Model = new EmployeeListMatrixCustomerModel();
            ViewBag.from = from;
            if (from == "SoldFunded" || from == "Appointment" || from == "Sales")
            {
                Model = _Util.Facade.EmployeeFacade.GetSoldFundedMatrixCustomerData(StartDate, EndDate, EmpId, pageno, pagesize, from);

            }
            else if (from == "FirstCallClose" || from == "OverallClose" || from == "CustomerFunded" || from == "AppointmentCustomer" || from == "AssignTo" || from == "ApptSet" || from == "TotalLead" || from == "BadLead" || from == "GoodLead")
            {
                Model = _Util.Facade.EmployeeFacade.GetFirsCallCloseCustomerData(StartDate, EndDate, EmpId, pageno, pagesize, from);
            }
            else
            {
                Model = _Util.Facade.EmployeeFacade.GetFirsCallCustomerData(StartDate, EndDate, EmpId, pageno, pagesize);
            }

            ViewBag.OutOfNumber = Model.TotalCustomerCount.TotalCount;
            ViewBag.PageNumber = pageno;
            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);

            return View(Model);
        }
        public ActionResult OverAllClose()
        {
            WeeklyViewBag();
            return PartialView("_OverAllClose");
        }
        public ActionResult OverAllClosePartial(string Start, string End, int pageno, int pagesize, string order, bool? GetReport)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();

            EmployeeListMatrixWithCount Model = new EmployeeListMatrixWithCount();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End) && Start != "undefined" && End != "undefined")
            {
                StartDate = Convert.ToDateTime(Start);
                EndDate = Convert.ToDateTime(End);
            }
            if (GetReport == true)
            {
                DataTable dt;
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadOverallCloseReport(StartDate, EndDate);
                    // dt = _Util.Facade.TicketFacade.GetDownLoadAdjustmentFundingReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, FilterText);

                }
                else
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadOverallCloseReport(new DateTime(), new DateTime());
                }


                return MakeExcelFromDataTable(dt, "Overall Close", null, null);
            }
            Model = _Util.Facade.EmployeeFacade.GetOverAllCloseMatrixWithCount(StartDate.SetZeroHour(), EndDate.SetMaxHour(), pageno, pagesize, order);

            ViewBag.TotalLeads = Model.TotalEmployeeCount.TotalCount;
            ViewBag.OutOfNumber = Model.TotalEmployeeCount.TotalCount;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            if (Model.TotalEmployeeCount.TotalCount == 0)
            {
                pageno = 1;
            }
            ViewBag.CancellationReason = _Util.Facade.LookupFacade.GetLookupByKeyForReport("CancellationReason").OrderBy(x => x.DisplayText).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.ContractSigned = _Util.Facade.LookupFacade.GetLookupByKeyForReport("ContractSigned").OrderBy(x => x.DisplayText).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();

            ViewBag.PageNumber = pageno;
            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            WeeklyViewBag();
            return View("_OverAllClosePartial", Model);
        }

        #region HR Reports
        public ActionResult HrReports()
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            ViewBag.SelectDepartmentData = _Util.Facade.LookupFacade.GetLookupByKey("Department").OrderBy(x => x.DisplayText != "Department").ThenBy(x => x.DisplayText).Select(x =>
                new SelectListItem()
                {
                    Text = x.DisplayText.ToString(),
                    Value = x.DataValue.ToString()
                }).ToList();
            List<SelectListItem> empStatus = _Util.Facade.LookupFacade.GetDropdownsByKey("EmployeeStatus");
            ViewBag.EmployeeStatus = empStatus;
            return View();
        }
        public ActionResult Employee()
        {
            return View();
        }
        public ActionResult EmployeePartial(string Start, string End, string Search, string[] DeptFilter, string[] StatusFilter, string InsuranceFilter, int pageno, int pagesize, string order, bool? GetReport)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();

            EmployeeListWithCustomerModel Model = new EmployeeListWithCustomerModel();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End) && Start != "undefined" && End != "undefined")
            {
                StartDate = Convert.ToDateTime(Start);
                EndDate = Convert.ToDateTime(End);
            }
            if (GetReport == true)
            {
                DataTable dt;
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadGetAllEmployeeForReport(StartDate, EndDate, Search, DeptFilter, StatusFilter, InsuranceFilter);
                    // dt = _Util.Facade.TicketFacade.GetDownLoadAdjustmentFundingReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, FilterText);

                }
                else
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadGetAllEmployeeForReport(new DateTime(), new DateTime(), Search, DeptFilter, StatusFilter, InsuranceFilter);
                }


                return MakeExcelFromDataTable(dt, "Employee", null, null);
            }
            Model = _Util.Facade.EmployeeFacade.GetAllEmployeeForReport(StartDate, EndDate, Search, DeptFilter, StatusFilter, InsuranceFilter, pageno, pagesize, order);

            ViewBag.TotalLeads = Model.TotalEmployeeCount.TotalCount;
            ViewBag.OutOfNumber = Model.TotalEmployeeCount.TotalCount;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            if (Model.TotalEmployeeCount.TotalCount == 0)
            {
                pageno = 1;
            }
            ViewBag.CancellationReason = _Util.Facade.LookupFacade.GetLookupByKeyForReport("CancellationReason").OrderBy(x => x.DisplayText).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.ContractSigned = _Util.Facade.LookupFacade.GetLookupByKeyForReport("ContractSigned").OrderBy(x => x.DisplayText).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.PageNumber = pageno;
            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }

        public ActionResult Insurance()
        {
            return View();
        }
        public ActionResult InsurancePartial(string Start, string End, string Search, string[] DeptFilter, string[] StatusFilter, string InsuranceFilter, int pageno, int pagesize, string order, bool? GetReport)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();

            EmployeeListWithCustomerModel Model = new EmployeeListWithCustomerModel();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End) && Start != "undefined" && End != "undefined")
            {
                StartDate = Convert.ToDateTime(Start);
                EndDate = Convert.ToDateTime(End);
            }
            if (GetReport == true)
            {
                DataTable dt;
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    dt = _Util.Facade.EmployeeFacade.GetAllEmployeeInsuranceForReportDownload(StartDate, EndDate, Search, DeptFilter, StatusFilter, InsuranceFilter);
                    // dt = _Util.Facade.TicketFacade.GetDownLoadAdjustmentFundingReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, FilterText);

                }
                else
                {
                    dt = _Util.Facade.EmployeeFacade.GetAllEmployeeInsuranceForReportDownload(new DateTime(), new DateTime(), Search, DeptFilter, StatusFilter, InsuranceFilter);
                }


                return MakeExcelFromDataTable(dt, "Insurance", null, null);
            }
            Model = _Util.Facade.EmployeeFacade.GetAllEmployeeForReport(StartDate, EndDate, Search, DeptFilter, StatusFilter, InsuranceFilter, pageno, pagesize, order);

            ViewBag.TotalLeads = Model.TotalEmployeeCount.TotalCount;
            ViewBag.OutOfNumber = Model.TotalEmployeeCount.TotalCount;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            if (Model.TotalEmployeeCount.TotalCount == 0)
            {
                pageno = 1;
            }
            ViewBag.CancellationReason = _Util.Facade.LookupFacade.GetLookupByKeyForReport("CancellationReason").OrderBy(x => x.DisplayText).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.ContractSigned = _Util.Facade.LookupFacade.GetLookupByKeyForReport("ContractSigned").OrderBy(x => x.DisplayText).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.PageNumber = pageno;
            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }
        #endregion 
        public ActionResult SoldToFunded()
        {
            WeeklyViewBag();
     
            return PartialView("_SoldToFunded");
        }
        public ActionResult SoldToFundedPartial(string Start, string End, int pageno, int pagesize, string order, bool? GetReport)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();

            EmployeeListMatrixWithCount Model = new EmployeeListMatrixWithCount();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End) && Start != "undefined" && End != "undefined")
            {
                StartDate = Convert.ToDateTime(Start);
                EndDate = Convert.ToDateTime(End);
            }
            if (GetReport == true)
            {
                DataTable dt;
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadSoldtofundedReport(StartDate, EndDate);
                    // dt = _Util.Facade.TicketFacade.GetDownLoadAdjustmentFundingReport(FilterStartDate, FilterEndDate, filter.order, filter.PageNo.Value, filter.PageSize.Value, IsPaid, FilterText);

                }
                else
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadSoldtofundedReport(new DateTime(), new DateTime());
                }

                dt.Columns.Remove("Id");
                return MakeExcelFromDataTable(dt, "Sold To Funded", null, null);
            }
            Model = _Util.Facade.EmployeeFacade.GetSoldToFundedMatrixWithCount(StartDate.SetZeroHour(), EndDate.SetMaxHour(), pageno, pagesize, order);

            ViewBag.TotalLeads = Model.TotalEmployeeCount.TotalCount;
            ViewBag.OutOfNumber = Model.TotalEmployeeCount.TotalCount;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            if (Model.TotalEmployeeCount.TotalCount == 0)
            {
                pageno = 1;
            }
            ViewBag.CancellationReason = _Util.Facade.LookupFacade.GetLookupByKeyForReport("CancellationReason").OrderBy(x => x.DisplayText).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.ContractSigned = _Util.Facade.LookupFacade.GetLookupByKeyForReport("ContractSigned").Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.PageNumber = pageno;
            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View("_SoldToFundedPartial", Model);
        }
        public ActionResult NumberOfSales()
        {
            WeeklyViewBag();
            return PartialView("_NumberOfSales");
        }
        public ActionResult NumberOfSalesPartial(string Start, string End, int pageno, int pagesize, string order, bool? GetReport)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();

            EmployeeListMatrixWithCount Model = new EmployeeListMatrixWithCount();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
            {
                StartDate = Convert.ToDateTime(Start);
                EndDate = Convert.ToDateTime(End);
            }
            if (GetReport == true)
            {
                DataTable dt;
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadNumberofsalesReport(StartDate, EndDate);

                }
                else
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadNumberofsalesReport(new DateTime(), new DateTime());
                }

                dt.Columns.Remove("Id");
                return MakeExcelFromDataTable(dt, "Number Of Sales", null, null);
            }
            Model = _Util.Facade.EmployeeFacade.GetNumberOfSalesMatrixWithCount(StartDate.SetZeroHour(), EndDate.SetMaxHour(), pageno, pagesize, order);

            ViewBag.TotalLeads = Model.TotalEmployeeCount.TotalCount;
            ViewBag.OutOfNumber = Model.TotalEmployeeCount.TotalCount;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            if (Model.TotalEmployeeCount.TotalCount == 0)
            {
                pageno = 1;
            }
            ViewBag.CancellationReason = _Util.Facade.LookupFacade.GetLookupByKeyForReport("CancellationReason").OrderBy(x => x.DisplayText).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.ContractSigned = _Util.Facade.LookupFacade.GetLookupByKeyForReport("ContractSigned").Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();

            ViewBag.PageNumber = pageno;
            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            WeeklyViewBag();
            return View("_NumberOfSalesPartial", Model);
        }
        public ActionResult AppointmentSet()
        {
            WeeklyViewBag();
            return PartialView("_AppointmentSet");
        }
        public ActionResult AppointmentSetPartial(string Start, string End, int pageno, int pagesize, string order, bool? GetReport)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();

            EmployeeListMatrixWithCount Model = new EmployeeListMatrixWithCount();
            if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End) && Start != "undefined" && End != "undefined")
            {
                StartDate = Convert.ToDateTime(Start);
                EndDate = Convert.ToDateTime(End);
            }
            if (GetReport == true)
            {
                DataTable dt;
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadAppointmentSetReport(StartDate, EndDate);

                }
                else
                {
                    dt = _Util.Facade.EmployeeFacade.GetDownLoadAppointmentSetReport(new DateTime(), new DateTime());
                }


                return MakeExcelFromDataTable(dt, "Appointment Set", null, null);
            }
            Model = _Util.Facade.EmployeeFacade.GetAppointmentSetMatrixWithCount(StartDate.SetZeroHour(), EndDate.SetMaxHour(), pageno, pagesize, order);

            ViewBag.TotalLeads = Model.TotalEmployeeCount.TotalCount;
            ViewBag.OutOfNumber = Model.TotalEmployeeCount.TotalCount;

            if (!string.IsNullOrWhiteSpace(Start))
            {
                ViewBag.Start = Start.Replace('_', '/');
            }
            if (!string.IsNullOrWhiteSpace(End))
            {
                ViewBag.End = End.Replace('_', '/');
            }
            if (Model.TotalEmployeeCount.TotalCount == 0)
            {
                pageno = 1;
            }
            ViewBag.CancellationReason = _Util.Facade.LookupFacade.GetLookupByKeyForReport("CancellationReason").OrderBy(x => x.DisplayText).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.ContractSigned = _Util.Facade.LookupFacade.GetLookupByKeyForReport("ContractSigned").Select(x =>
                           new SelectListItem()
                           {
                               Text = x.DisplayText.ToString(),
                               Value = x.DataValue.ToString()
                           }).ToList();
            ViewBag.PageNumber = pageno;
            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View("_AppointmentSetPartial", Model);
        }

        public ActionResult TechInventoryReports()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            List<Employee> TechnicianList = new List<Employee>();
            if (currentLoggedIn.UserRole == LabelHelper.UserTypes.Technician || currentLoggedIn.UserRole == LabelHelper.UserTypes.Installation)
            {
                TechnicianList = _Util.Facade.EmployeeFacade.GetSingleTechnicianList(currentLoggedIn.UserId);
            }
            if (TechnicianList != null && TechnicianList.Count > 0)
            {
                ViewBag.UserId = TechnicianList.FirstOrDefault().UserId;
            }
            else
            {
                ViewBag.UserId = null;
            }


            return View();
        }
        [Authorize]
        public ActionResult TechnicianInventoryPartialForReport()
        {

            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuTechInventoryReports))
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }

            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (currentLoggedIn == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            return PartialView("_TechnicianInventoryPartialForReport");
        }
        [Authorize]
        public ActionResult TechnicianListInventoryPartialForReport()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            List<Employee> TechnicianList = new List<Employee>();
            if (currentLoggedIn == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            if (base.IsPermitted(UserPermissions.InventoryPermissions.TechAllInventory))
            {
                if (currentLoggedIn.UserRole.ToLower().IndexOf("technician") != 0 && currentLoggedIn.UserRole.ToLower().IndexOf("installation") != 0)
                {
                    TechnicianList = _Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(currentLoggedIn.CompanyId.Value, LabelHelper.UserTags.Technicians, new Guid());
                    ViewBag.TechnicianList = TechnicianList.Select(x =>
                                               new SelectListItem()
                                               {
                                                   Text = x.FirstName + " " + x.LastName,
                                                   Value = x.UserId.ToString(),
                                                   Selected = true
                                               }).ToList();
                }
                else
                {
                    TechnicianList = _Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(currentLoggedIn.CompanyId.Value, LabelHelper.UserTags.Technicians, currentLoggedIn.UserId);
                    ViewBag.TechnicianList = TechnicianList.Select(x =>
                                               new SelectListItem()
                                               {
                                                   Text = x.FirstName + " " + x.LastName,
                                                   Value = x.UserId.ToString(),
                                                   Selected = true
                                               }).ToList();
                }
            }
            else if (currentLoggedIn.UserRole == LabelHelper.UserTypes.Technician || currentLoggedIn.UserRole == LabelHelper.UserTypes.Installation)
            {
                TechnicianList = _Util.Facade.EmployeeFacade.GetSingleTechnicianList(currentLoggedIn.UserId);
            }


            if (TechnicianList != null && TechnicianList.Count > 0)
            {
                ViewBag.UserId = TechnicianList.FirstOrDefault().UserId;
            }
            else
            {
                ViewBag.UserId = null;
            }



            return PartialView("_TechnicianListInventoryPartialForReport", TechnicianList);
        }

        [Authorize]
        public PartialViewResult TechEquipmentsListPartialForReport()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuTechInventoryReports))
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            ViewBag.EquipmentTypeList = GetEquipmentTypeList();

            List<SelectListItem> ListItems = new List<SelectListItem>();
            ListItems.Add(new SelectListItem()
            {
                Text = "Please Select",
                Value = "-1"
            });
            ListItems.AddRange(_Util.Facade.EquipmentFacade
                .GetAllEquipmentClassByCompanyId(CurrentUser.CompanyId.Value).Select(x =>
                           new SelectListItem()
                           {
                               Text = x.Name.ToString(),
                               Value = x.Id.ToString()
                           }).ToList());
            ViewBag.EquipmentClassTypeList = ListItems;

            ViewBag.EquipmentActiveStatus = _Util.Facade.LookupFacade.GetLookupByKey("EquipmentActiveStatus").Select(x =>
                       new SelectListItem()
                       {
                           Text = x.DisplayText.ToString(),
                           Value = x.DataValue.ToString()
                       }).ToList();

            ViewBag.StockStatus = _Util.Facade.LookupFacade.GetLookupByKey("StockStatus").Select(x =>
                      new SelectListItem()
                      {
                          Text = x.DisplayText.ToString(),
                          Value = x.DataValue.ToString()
                      }).ToList();

            Employee Technician = new Employee();
            if (CurrentUser.UserRole == LabelHelper.UserTypes.Technician || CurrentUser.UserRole == LabelHelper.UserTypes.Installation)
            {
                Technician = _Util.Facade.EmployeeFacade.GetSingleTechnicianList(CurrentUser.UserId).FirstOrDefault();
            }


            if (Technician != null)
            {
                ViewBag.UserId = Technician.UserId;
            }
            else
            {
                ViewBag.UserId = null;
            }



            return PartialView("_TechEuipmentListForReport");
        }

        [Authorize]
        public PartialViewResult TechFilterEquipmentsListPartialForReport(FilterEquipment _FilterEquipment)
        {
            if (!base.IsPermitted(UserPermissions.InventoryPermissions.InventoryTechTab))
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (_FilterEquipment.UserId == Guid.Empty)
            {
                _FilterEquipment.UserId = currentLoggedIn.UserId;
            }
            int PageLimit = 0;
            _FilterEquipment.EmployeeRole = "";
            if (string.IsNullOrWhiteSpace(currentLoggedIn.UserRole) && currentLoggedIn.UserId != new Guid())
            {
                var objEmpRole = _Util.Facade.EmployeeFacade.GetEmployeeRoleByEmployeeIdAndCompanyId(currentLoggedIn.UserId, currentLoggedIn.CompanyId.Value);
                _FilterEquipment.EmployeeRole = objEmpRole.Name;
            }
            else if (!string.IsNullOrWhiteSpace(currentLoggedIn.UserRole))
            {
                _FilterEquipment.EmployeeRole = currentLoggedIn.UserRole;
            }
            PageLimit = _Util.Facade.GlobalSettingsFacade.GetInventoryPagingLimit(currentLoggedIn.CompanyId.Value);
            EquipmentListWithCountModel equipmentfilterlist = new EquipmentListWithCountModel();
            ViewBag.InventoryGridSettings = _Util.Facade.GridSettingsFacade.GetByKey("InventoryGrid", currentLoggedIn.CompanyId.Value);
            _FilterEquipment.CompanyId = currentLoggedIn.CompanyId.Value;

            if (_FilterEquipment.PageNo == 0)
            {
                _FilterEquipment.PageNo = 1;
            }

            if (_FilterEquipment.PageSize < PageLimit)
            {
                _FilterEquipment.PageSize = PageLimit;
            }

            equipmentfilterlist = _Util.Facade.InventoryFacade.GetEquipmentByFilterTech(_FilterEquipment);

            if (equipmentfilterlist.EquipmentList.Count() == 0)
            {
                _FilterEquipment.PageNo = 1;
                //customerfilterlist = _Util.Facade.CustomerFacade.GetCustomerByFilter(filter);
            }

            ViewBag.PageNumber = _FilterEquipment.PageNo;
            ViewBag.OutOfNumber = 0;


            if (equipmentfilterlist.EquipmentList.Count() > 0)
            {
                ViewBag.OutOfNumber = equipmentfilterlist.TotalEquipmentCount.Counter;
            }

            if ((int)ViewBag.PageNumber * _FilterEquipment.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * _FilterEquipment.PageSize;
            }





            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / _FilterEquipment.PageSize);
            return PartialView("_TechFilteredEquipmentListForReport", equipmentfilterlist);
        }

        [Authorize]
        public ActionResult DownloadTechEquipmentReport(bool? GetReport, string Start, string End, string searchtxt, int ActiveStatus, int EquipmentClass, int EquipmentCategory, int StockStatus, Guid TechnicianId)
        {
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> invstatus = new List<string>();

            if (TechnicianId == Guid.Empty)
            {
                TechnicianId = CurrentUser.UserId;
            }


            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport == true)
            {
                DataTable dt;
                if (!string.IsNullOrWhiteSpace(Start) && !string.IsNullOrWhiteSpace(End))
                {
                    StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
                    EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
                    dt = _Util.Facade.EmployeeFacade.GetTechEquipmentListReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtxt, TechnicianId, ActiveStatus, EquipmentClass, EquipmentCategory);
                }
                else
                {
                    if (StartDate != new DateTime() && EndDate != new DateTime())
                    {
                        dt = _Util.Facade.EmployeeFacade.GetTechEquipmentListReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtxt, TechnicianId, ActiveStatus, EquipmentClass, EquipmentCategory);
                    }
                    else
                    {
                        dt = _Util.Facade.EmployeeFacade.GetTechEquipmentListReportExportByCompanyId(CurrentUser.CompanyId.Value, null, null, searchtxt, TechnicianId, ActiveStatus, EquipmentClass, EquipmentCategory);
                    }

                }
                return MakeExcelFromDataTable(dt, "TechEquipmentReport", null, null);
            }
            return null;
        }



        private List<SelectListItem> GetEquipmentTypeList()
        {
            var currentLoggedIn = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<SelectListItem> EquipentTypeList = new List<SelectListItem>();
            EquipentTypeList.Add(new SelectListItem()
            {
                Text = "Please Select",
                Value = "-1"
            });
            EquipentTypeList.AddRange(ViewBag.EquipmentTypeList = _Util.Facade.EquipmentTypeFacade
              .GetAllEquipmentCategoryWithSubCategoryByCompanyId(currentLoggedIn.CompanyId.Value).OrderBy(x => x.Text).ToList());
            return EquipentTypeList;
        }

        [Authorize]
        public ActionResult FinishdJob()
        {
            return View();
        }
        [Authorize]
        public ActionResult FinishedJobResult(FinishedJobFilter filter)
        {
            if (filter == null)
            {
                filter = new FinishedJobFilter();
            }
            if (filter.PageSize < 10)
            {
                filter.PageSize = 50;
            }
            if (filter.PageNO < 1)
            {
                filter.PageNO = 1;
            }
            if (filter.IsDownload.HasValue && filter.IsDownload.Value == true)
            {
                DataTable dt = _Util.Facade.BookingFacade.GetFinishedJobReportListForDownload(filter);
                return MakeExcelFromDataTable(dt, "Finished Job", null, null);
            }
            FinishedJobReportModel FinishedJobReports = new FinishedJobReportModel();
            FinishedJobReports = _Util.Facade.BookingFacade.GetFinishedJobreportsByFilter(filter);

            ViewBag.PageNumber = filter.PageNO;
            ViewBag.OutOfNumber = 0;


            if (FinishedJobReports.FinishedJobReportList.Count() > 0)
            {
                TempData["OutOfNumber"] = FinishedJobReports.PayrollTotalCount.CountTotal;
                ViewBag.OutOfNumber = FinishedJobReports.PayrollTotalCount.CountTotal;

                double Total = 0;
                foreach (var item in FinishedJobReports.FinishedJobReportList)
                {
                    Total += item.TotalPrice;
                }
                TempData["TotalAmount"] = Total.ToString("N2");
            }


            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }

            ViewBag.order = filter.order;
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize);
            return View(FinishedJobReports);
        }

        [Authorize]
        public ActionResult PackageSummary()
        {
            return View();
        }
        [Authorize]
        public ActionResult PackageSummaryResult(PackageSummaryFilter filter)
        {
            if (filter == null)
            {
                filter = new PackageSummaryFilter();
            }
            if (filter.PageSize < 10)
            {
                filter.PageSize = 50;
            }
            if (filter.PageNO < 1)
            {
                filter.PageNO = 1;
            }
            List<PackageSummaryModel> FinishedJobReports = new List<PackageSummaryModel>();
            //FinishedJobReports = _Util.Facade.BookingFacade.GetPackageSummaryreportsByFilter(filter);

            return View();
        }
        #region Estimate Report Start
        public ActionResult EstimateReports()
        {
            return View();
        }
        public ActionResult LoadEstimateReportPartial()
        {
             
            return View();
        }
        public ActionResult EstimateReportList(string mindate, string maxdate, string searchtxt, bool? getreport)
        {
            Guid userid = new Guid();
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();

            if(!string.IsNullOrWhiteSpace(mindate) && !string.IsNullOrWhiteSpace(maxdate) && mindate  !="undefined" && maxdate != "undefined")
            {
                 StartDate = DateTime.ParseExact(mindate, "MM_dd_yyyy", null);
                 EndDate = DateTime.ParseExact(maxdate, "MM_dd_yyyy", null);
            }
            
            var currentLoggedIn = (HS.Web.UI.Helper.CustomPrincipal)User; 
            
            if (getreport.HasValue && getreport.Value)
            {
                DataTable dt;
                dt = _Util.Facade.InvoiceFacade.GetAllExportEstimateSentByCompanyId(currentLoggedIn.CompanyId.Value, StartDate, EndDate, searchtxt);
                int[] colarray = {  };
                int[] rowarray = { dt.Rows.Count + 2 };
                 
                return MakeExcelFromDataTable(dt, "Estimates Report", rowarray, colarray);
            }
            EstimateReportModel model = _Util.Facade.InvoiceFacade.GetAllEstimateSentByCompanyId(currentLoggedIn.CompanyId.Value, StartDate, EndDate, searchtxt);
            return View(model);
        }
        public ActionResult EstimateActionView(string EstimatorId)
        {
            if(!string.IsNullOrWhiteSpace(EstimatorId))
            {
                var EstimatorFile = _Util.Facade.EstimatorFacade.GetEstimatorFileByEstimatorId(EstimatorId);
                var estimator = _Util.Facade.EstimatorFacade.GetEstimatorByEstimatorId(EstimatorId);
                if(EstimatorFile != null)
                {
                    ViewBag.PdfLocation = EstimatorFile.FileDescription;
                    ViewBag.EstimatorId = estimator.EstimatorId;
                    ViewBag.EstimatorIntId = estimator.Id;
                }
                else
                {
                    ViewBag.PdfLocation = "";
                    ViewBag.EstimatorId = estimator.EstimatorId;
                    ViewBag.EstimatorIntId = estimator.Id;
                }
            }
            else
            {
                ViewBag.PdfLocation = "";
                ViewBag.EstimatorIntId = 0;
            }
                return View();
        }

        #endregion Estimate Report End
        public ActionResult UpsellsReports()
        {
            return View();
        }

        public ActionResult UpsellsReportPartial()
        {
            ViewBag.PTOFilterOptions = _Util.Facade.LookupFacade.GetLookupByKey("PTOFilterOptions").Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            return View();
        }

        public ActionResult UpsellsReportList(string mindate, string maxdate, string searchtxt, bool? getreport)
        {
            Guid userid = new Guid();
            mindate = Convert.ToDateTime(mindate).ToString("yyyy-MM-dd");
            maxdate = Convert.ToDateTime(maxdate).ToString("yyyy-MM-dd");
            var currentLoggedIn = (HS.Web.UI.Helper.CustomPrincipal)User;
            var ispermit = IsPermitted(UserPermissions.ReportsPermissions.ShowAllUserUpsellsReport);
            if (!ispermit)
            {
                userid = currentLoggedIn.UserId;
            }
            UpsellUserReportModel model = _Util.Facade.EmployeeFacade.GetUpsellTechnicianList(userid, mindate, maxdate, searchtxt);
            if (getreport.HasValue && getreport.Value)
            {
                DataTable dt;
                dt = _Util.Facade.EmployeeFacade.GetUpsellTechnicianListExport(userid, mindate, maxdate, searchtxt);
                int[] colarray = { 3, 5, 6, 7, 8 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "Upsells Report", rowarray, colarray);
            }
            return View(model);
        }

        #region Private Region
        private void WeeklyViewBag()
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            string FirstDayOfWeek = _Util.Facade.GlobalSettingsFacade.GetStartDayOfWeek(CurrentUser.CompanyId.Value);
            int DateOffset = 0;
            if (FirstDayOfWeek == "Saturday")
            {
                DateOffset = -1;
            }
            else if (FirstDayOfWeek == "Monday")
            {
                DateOffset = 1;
            }
            CultureInfo ci = new CultureInfo("en-US");
            DateTime CompanyStartDate = new DateTime(2018, 7, 1);
            int Week = GetIso8601WeekOfYear(CompanyStartDate);
            int CurrentWeek = GetIso8601WeekOfYear(DateTime.Now);
            CompanyStartDate = FirstDateOfWeek(CompanyStartDate.Year, Week, ci, DateOffset);
            List<SelectListItem> WeekList = new List<SelectListItem>();
            while (CompanyStartDate < DateTime.Now)
            {
                string suffix = "th";
                if (CompanyStartDate.Day == 1 || CompanyStartDate.Day % 20 == 1 || CompanyStartDate.Day % 30 == 1)
                {
                    suffix = "st";
                }
                else if (CompanyStartDate.Day == 2 || CompanyStartDate.Day % 20 == 2)
                {
                    suffix = "nd";
                }
                else if (CompanyStartDate.Day == 3 || CompanyStartDate.Day % 20 == 3)
                {
                    suffix = "rd";
                }

                WeekList.Add(new SelectListItem()
                {
                    Text = string.Format(CompanyStartDate.ToString("dd{0} MMMM yy"), suffix),
                    Value = CompanyStartDate.Year + "/" + Week,
                    Selected = Week == CurrentWeek
                });
                CompanyStartDate = CompanyStartDate.AddDays(7);
                Week = GetIso8601WeekOfYear(CompanyStartDate);
            }
            ViewBag.WeekList = WeekList;
            ViewBag.FirstDayOfWeek = FirstDayOfWeek;

            ViewBag.EndDate = CompanyStartDate.AddDays(-1);
            ViewBag.StartDate = CompanyStartDate.AddDays(-7);
        }
        private static int GetIso8601WeekOfYear(DateTime time)
        {
            DayOfWeek day = CultureInfo.InvariantCulture.Calendar.GetDayOfWeek(time);
            if (day >= DayOfWeek.Monday && day <= DayOfWeek.Wednesday)
            {
                time = time.AddDays(3);
            }

            return CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(time, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
        }
        #endregion

        #region Download Mass Restock Report
        public ActionResult DownloadMassRestockReport(Guid TechnicianId,bool IsShowAll)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DataTable model;
            model = _Util.Facade.EquipmentFacade.GetEquipmentListByCompanyIdTechnicianIdForReport(TechnicianId, IsShowAll);

            if (model != null)
            {
                DataTable dt;
                dt = _Util.Facade.EquipmentFacade.GetEquipmentListByCompanyIdTechnicianIdForReport(TechnicianId, IsShowAll);
                return MakeExcelFromDataTable(dt, "MassRestockReport", null, null);
            }
            return View("_AddMassRestock");
        }
        #endregion

        #region PO Report

        public ActionResult POReportPartial(PurchaseOrderFilter filters)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            return View("POReportPartial");
        }

        public ActionResult CreatedPOReport(PurchaseOrderFilter filters)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            return View("CreatedPOReport");
        }
        public ActionResult CreatedPOReportPartial(PurchaseOrderFilter filters, DateTime? Start, DateTime? End)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            #region Inits
            if (filters == null)
            {
                filters = new PurchaseOrderFilter();
            }

            if (filters.PageNo == 0)
            {
                filters.PageNo = 1;
            }
            filters.CompanyId = currentLoggedIn.CompanyId.Value;
            filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetPOPageLimit(currentLoggedIn.CompanyId.Value);
            POListModel Model = new POListModel();
            #endregion
            Model = _Util.Facade.PurchaseOrderFacade.GetCreatedPurchaseOrderListByFilters(filters, StartDate, EndDate);

            ViewBag.PageNumber = filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.TotalCount > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filters.PageSize);

            return View(Model);
        }

        public ActionResult POReportNew(PurchaseOrderFilter filters)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            //DataTable table = _Util.Facade.PurchaseOrderFacade.GETSKU();

            
            
            List<SelectListItem> EstimatorIdList = new List<SelectListItem>();

            EstimatorIdList.Add(new SelectListItem()
            {
                Text = "Select Estimate Id",
                Value = "-1"
            });
            EstimatorIdList.AddRange(_Util.Facade.PurchaseOrderFacade.GetEstimatorIdListOfPurchaseOrder().Select(x =>
                                       new SelectListItem()
                                       {
                                           Text = x.Id,
                                           Value = x.Id
                                       }).ToList());
            ViewBag.EstimatorIdList = EstimatorIdList;
            List<SelectListItem> POStatus = new List<SelectListItem>();

            POStatus.Add(
                new SelectListItem
                {
                    Text = LabelHelper.PurchaseOrderStatus.Received,
                    Value = "1"
                });
            POStatus.Add(
                new SelectListItem
                {
                    Text = LabelHelper.PurchaseOrderStatus.ReceivedPartially,
                    Value = "2"
                });
            POStatus.Add(
               new SelectListItem
               {
                   Text = LabelHelper.PurchaseOrderStatus.Created,
                   Value = "3"
               });
            POStatus.Add(
            new SelectListItem
            {
                Text = LabelHelper.PurchaseOrderStatus.SentToVendor,
                Value = "4"
            });
            POStatus.Add(
               new SelectListItem
               {
                   Text = LabelHelper.PurchaseOrderStatus.BillCreated,
                   Value = "5"
               });
            ViewBag.POStatus = POStatus;


            List<SelectListItem> supList = _Util.Facade.SupplierFacade.GetAllSupplier().OrderBy(m => m.Name).Select(x =>
                new SelectListItem()
                {
                    Text = x.CompanyName.ToString(),
                    Value = x.SupplierId.ToString()
                }).ToList();
            supList.Insert(0, new SelectListItem()
            {
                Text = "Select One",
                Value = new Guid().ToString()
            });

            ViewBag.SupplierList = supList.OrderBy(x => x.Text != "Select One").ThenBy(x => x.Text).ToList();

            List<SelectListItem> eqpCategory = new List<SelectListItem>();
            eqpCategory.Add(new SelectListItem()
            {
                Text = "Select One ",
                Value = "-1"
            });
            eqpCategory.AddRange(_Util.Facade.EquipmentFacade.GetAllEquipmentType().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.Id.ToString()
            }).ToList());
            ViewBag.eqpCategory = eqpCategory.OrderBy(x => x.Text == "Select One" ? "" : x.Text).ToList();



            List<SelectListItem> manufacturer = new List<SelectListItem>();
            manufacturer.Add(new SelectListItem()
            {
                Text = "Select One",
                Value = "-1"
            });
           
            manufacturer.AddRange(_Util.Facade.EquipmentFacade.GetAllManufacturer().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.ManufacturerId.ToString()
            }).ToList());
            ViewBag.manufacturer = manufacturer.OrderBy(x => x.Text != "Select One").ThenBy(x => x.Text).ToList();
           

            List<string> selectsts = new List<string>();
            if (!string.IsNullOrWhiteSpace(filters.selectsts) && filters.selectsts.ToLower() != "null")
            {
                string[] splituser = filters.selectsts.Split(',');
                if (splituser.Length > 0)
                {
                    filters.selectsts = string.Format("{0}", string.Join(",", splituser.Select(i => i.Replace("'", ""))));
                    foreach (var item in splituser)
                    {
                        selectsts.Add(item);
                    }
                }
            }
             ViewBag.selectsts = selectsts;
            ViewBag.EstimatorId = filters.EstimatorId;

            List<SelectListItem> EquipmentSKUs = new List<SelectListItem>();
            EquipmentSKUs.Add(new SelectListItem()
            {
                Text = "Select One",
                Value = "-1"
            });
            EquipmentSKUs.AddRange(_Util.Facade.EquipmentFacade.GetAllEquipmentIdByCompanyId(currentLoggedIn.CompanyId.Value).Select(x => new SelectListItem()
            {
                Text = x.SKU.ToString(),
                Value = x.Id.ToString()
            }).ToList());

            ViewBag.EquipmentSKU = EquipmentSKUs;

            return View("POReportNew");
        }
        public ActionResult POReportInventory(PurchaseOrderFilter filters)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            //DataTable table = _Util.Facade.PurchaseOrderFacade.GETSKU();



            List<SelectListItem> EstimatorIdList = new List<SelectListItem>();

            EstimatorIdList.Add(new SelectListItem()
            {
                Text = "Select Estimate Id",
                Value = "-1"
            });
            EstimatorIdList.AddRange(_Util.Facade.PurchaseOrderFacade.GetEstimatorIdListOfPurchaseOrder().Select(x =>
                                       new SelectListItem()
                                       {
                                           Text = x.Id,
                                           Value = x.Id
                                       }).ToList());
            ViewBag.EstimatorIdList = EstimatorIdList;
            List<SelectListItem> POStatus = new List<SelectListItem>();

            POStatus.Add(
                new SelectListItem
                {
                    Text = LabelHelper.PurchaseOrderStatus.Received,
                    Value = "1"
                });
            POStatus.Add(
                new SelectListItem
                {
                    Text = LabelHelper.PurchaseOrderStatus.ReceivedPartially,
                    Value = "2"
                });
            POStatus.Add(
               new SelectListItem
               {
                   Text = LabelHelper.PurchaseOrderStatus.Created,
                   Value = "3"
               });
            POStatus.Add(
            new SelectListItem
            {
                Text = LabelHelper.PurchaseOrderStatus.SentToVendor,
                Value = "4"
            });
            POStatus.Add(
               new SelectListItem
               {
                   Text = LabelHelper.PurchaseOrderStatus.BillCreated,
                   Value = "5"
               });
            ViewBag.POStatus = POStatus;


            List<SelectListItem> supList = _Util.Facade.SupplierFacade.GetAllSupplier().OrderBy(m => m.Name).Select(x =>
                new SelectListItem()
                {
                    Text = x.CompanyName.ToString(),
                    Value = x.SupplierId.ToString()
                }).ToList();
            supList.Insert(0, new SelectListItem()
            {
                Text = "Select One",
                Value = new Guid().ToString()
            });

            ViewBag.SupplierList = supList.OrderBy(x => x.Text != "Select One").ThenBy(x => x.Text).ToList();

            List<SelectListItem> eqpCategory = new List<SelectListItem>();
            eqpCategory.Add(new SelectListItem()
            {
                Text = "Select One ",
                Value = "-1"
            });
            eqpCategory.AddRange(_Util.Facade.EquipmentFacade.GetAllEquipmentType().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.Id.ToString()
            }).ToList());
            ViewBag.eqpCategory = eqpCategory.OrderBy(x => x.Text == "Select One" ? "" : x.Text).ToList();



            List<SelectListItem> manufacturer = new List<SelectListItem>();
            manufacturer.Add(new SelectListItem()
            {
                Text = "Select One",
                Value = "-1"
            });

            manufacturer.AddRange(_Util.Facade.EquipmentFacade.GetAllManufacturer().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.ManufacturerId.ToString()
            }).ToList());
            ViewBag.manufacturer = manufacturer.OrderBy(x => x.Text != "Select One").ThenBy(x => x.Text).ToList();


            List<string> selectsts = new List<string>();
            if (!string.IsNullOrWhiteSpace(filters.selectsts) && filters.selectsts.ToLower() != "null")
            {
                string[] splituser = filters.selectsts.Split(',');
                if (splituser.Length > 0)
                {
                    filters.selectsts = string.Format("{0}", string.Join(",", splituser.Select(i => i.Replace("'", ""))));
                    foreach (var item in splituser)
                    {
                        selectsts.Add(item);
                    }
                }
            }
            ViewBag.selectsts = selectsts;
            ViewBag.EstimatorId = filters.EstimatorId;

            List<SelectListItem> EquipmentSKUs = new List<SelectListItem>();
            EquipmentSKUs.Add(new SelectListItem()
            {
                Text = "Select One",
                Value = "-1"
            });
            EquipmentSKUs.AddRange(_Util.Facade.EquipmentFacade.GetAllEquipmentIdByCompanyId(currentLoggedIn.CompanyId.Value).Select(x => new SelectListItem()
            {
                Text = x.SKU.ToString(),
                Value = x.Id.ToString()
            }).ToList());

            ViewBag.EquipmentSKU = EquipmentSKUs;

            return View("POReportInventory");
        }

        public ActionResult POReportInventoryPartial(PurchaseOrderFilter filters, DateTime? Start, DateTime? End, string supplier, string Category, string Manufeturelist, string Searchtext, string SKU)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            #region Inits
            if (filters == null)
            {
                filters = new PurchaseOrderFilter();
            }

            if (filters.PageNo == 0)
            {
                filters.PageNo = 1;
            }
            filters.CompanyId = currentLoggedIn.CompanyId.Value;
            filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetPOPageLimit(currentLoggedIn.CompanyId.Value);
            POListModel Model = new POListModel();
            #endregion
            Model = _Util.Facade.PurchaseOrderFacade.GetPurchaseOrderNewListPOReportInventory(filters, StartDate, EndDate, Category, supplier, Manufeturelist, Searchtext, SKU);

            //List<SelectListItem> equipmentSKU = Model.equipmentSKUs.Select(sku => new SelectListItem
            //{
            //    Text = sku.text, 
            //    Value = sku.value
            //}).ToList();
            //equipmentSKU.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});

            //ViewBag.EquipmentSKU = equipmentSKU;


            ViewBag.PageNumber = filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.TotalCount > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filters.PageSize);

            return View(Model);

        }

        public ActionResult POReportNewPartial(PurchaseOrderFilter filters, DateTime? Start, DateTime? End ,string supplier, string Category ,string Manufeturelist ,string Searchtext, string SKU)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            #region Inits
            if (filters == null)
            {
                filters = new PurchaseOrderFilter();
            }

            if (filters.PageNo == 0)
            {
                filters.PageNo = 1;
            }
            filters.CompanyId = currentLoggedIn.CompanyId.Value;
            filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetPOPageLimit(currentLoggedIn.CompanyId.Value);
            POListModel Model = new POListModel();
            #endregion
            Model = _Util.Facade.PurchaseOrderFacade.GetPurchaseOrderNewListByFilters(filters, StartDate, EndDate, Category , supplier, Manufeturelist , Searchtext, SKU);

            //List<SelectListItem> equipmentSKU = Model.equipmentSKUs.Select(sku => new SelectListItem
            //{
            //    Text = sku.text, 
            //    Value = sku.value
            //}).ToList();
            //equipmentSKU.Add(new SelectListItem()
            //{
            //    Text = "Select One",
            //    Value = "-1"
            //});
           
            //ViewBag.EquipmentSKU = equipmentSKU;
            
            
            ViewBag.PageNumber = filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.TotalCount > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filters.PageSize);

            return View(Model);

        }
        public ActionResult DownloadCreatedPOReport(PurchaseOrderFilter filters, DateTime? Start, DateTime? End)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            DataTable dt;
            dt = _Util.Facade.PurchaseOrderFacade.GetCreatedPurchaseOrderListByFiltersForReport(filters, StartDate, EndDate );
            return MakeExcelFromDataTable(dt, "CreatedPOReport", null, null);
        }
      
        public ActionResult DownloadCreatedPOReportnew(PurchaseOrderFilter filters, DateTime? Start, DateTime? End,string serchtext, string SKU,string Category,string Manufeturelist,string supplier)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            DataTable dt = _Util.Facade.PurchaseOrderFacade.GetCreatedPurchaseOrderListByFiltersForReportnew(filters, StartDate, EndDate, serchtext, SKU ,Category, Manufeturelist, supplier);
            return MakeExcelFromDataTable(dt, "PurchaseOrderReport_Finance", null, null);
        }
        public ActionResult POReportInventoryDownload(PurchaseOrderFilter filters, DateTime? Start, DateTime? End, string serchtext, string SKU, string Category, string Manufeturelist, string supplier)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            DataTable dt = _Util.Facade.PurchaseOrderFacade.GetCreatedPurchaseOrderListPOReportInventoryDownload(filters, StartDate, EndDate, serchtext, SKU, Category, Manufeturelist, supplier);
            foreach (DataRow row in dt.Rows)
            {
                if (row["OrderDate"] != DBNull.Value)
                {
                    DateTime orderDate = (DateTime)row["OrderDate"];
                     
                    row["OrderDate"] = orderDate.UTCToClientTime().ToString("M/d/yyyy");
                }
          
                if (row["SKU Received Date"] != DBNull.Value)
                {
                    DateTime receivedDate = (DateTime)row["SKU Received Date"];
                    row["SKU Received Date"] = receivedDate.UTCToClientTime().ToString("M/d/yyyy");

                }
            }

            return MakeExcelFromDataTable(dt, "PurchaseOrderReport_Inventory", null, null);
        }

        public ActionResult ReceivedPOReport(PurchaseOrderFilter filters)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            return View("ReceivedPOReport");
        }
        public ActionResult ReceivedPOReportPartial(PurchaseOrderFilter filters, DateTime? Start, DateTime? End)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            #region Inits
            if (filters == null)
            {
                filters = new PurchaseOrderFilter();
            }

            if (filters.PageNo == 0)
            {
                filters.PageNo = 1;
            }
            filters.CompanyId = currentLoggedIn.CompanyId.Value;
            filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetPOPageLimit(currentLoggedIn.CompanyId.Value);
            POListModel Model = new POListModel();
            #endregion
            Model = _Util.Facade.PurchaseOrderFacade.GetReceivedPurchaseOrderListByFilters(filters, StartDate, EndDate);

            ViewBag.PageNumber = filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = filters.order;
            //ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.TotalCount > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filters.PageSize);

            return View(Model);
        }
        public ActionResult DownloadReceivedPOReport(PurchaseOrderFilter filters, DateTime? Start, DateTime? End)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            DataTable dt;
            dt = _Util.Facade.PurchaseOrderFacade.GetReceivedPurchaseOrderListByFiltersForReport(filters, StartDate, EndDate);
            return MakeExcelFromDataTable(dt, "ReceivedPOReport", null, null);
        }

        #endregion

        #region Ticket Summary Report

        public ActionResult TicketSummaryReport()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            return View("TicketSummaryReport");
        }
        public ActionResult TicketSummaryReportPartial(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;

            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = System.Web.HttpUtility.UrlDecode(Filters.SearchText);
            }
            Filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            Filters.UserId = CurrentUser.UserId;

            TicketListModel Model = _Util.Facade.TicketFacade.GetTicketSummaryList(Filters, filter);
            ViewBag.PageNumber = Filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = Filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.TotalCount > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);

            return View(Model);
        }
        public ActionResult DownloadTicketSummaryReport(TicketFilter Filters, FilterReportModel filter)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DataTable dt;
            dt = _Util.Facade.TicketFacade.GetTicketSummaryListForReport(Filters, filter);
            return MakeExcelFromDataTable(dt, "TicketSummaryReport", null, null);
        }

        #endregion

        #region Inventory Count Report
        public ActionResult InventoryCountReport()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            return View("InventoryCountReport");
        }
        public ActionResult InventoryCountReportPartial(DateTime? Start, DateTime? End, int pageno, int pagesize, string searchtext, string order)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            InventoryCount Model = new InventoryCount();
            Model = _Util.Facade.EquipmentFacade.GetInventoryCountReport(StartDate, EndDate, pageno, pagesize, searchtext, order);

            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Count.TotalCount > 0)
            {
                ViewBag.OutOfNumber = Model.Count.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }
        public ActionResult InventoryCountDetailsOnStartDate(Guid Id, DateTime? Start)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            DateTime StartDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime();
                }
            }
            InventoryCount Model = new InventoryCount();
            Model = _Util.Facade.EquipmentFacade.GetInventoryCountOnStartDate(StartDate, Id);

            return View(Model);
        }
        public ActionResult InventoryCountDetailsOnEndDate(Guid Id, DateTime? End)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.EndDate = End;
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            InventoryCount Model = new InventoryCount();
            Model = _Util.Facade.EquipmentFacade.GetInventoryCountOnEndDate(EndDate, Id);

            return View(Model);
        }
        public ActionResult UsedInventoryCountDetails(Guid Id, DateTime? Start, DateTime? End)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            UsedInventoryCount Model = new UsedInventoryCount();
            Model = _Util.Facade.EquipmentFacade.UsedInventoryCountDetails(Id, StartDate, EndDate);
            return View(Model);
        }
        public ActionResult PurchaseInventoryCountDetails(Guid Id, DateTime? Start, DateTime? End)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            PurchaseInventoryCount Model = new PurchaseInventoryCount();
            Model = _Util.Facade.EquipmentFacade.PurchaseInventoryCountDetails(Id, StartDate, EndDate);
            return View(Model);
        }
        public ActionResult RMADetailsOfInventoryCount(Guid Id, DateTime? Start, DateTime? End)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            RMADetails Model = new RMADetails();
            Model = _Util.Facade.EquipmentFacade.RMADetailsOfInventoryCount(Id, StartDate, EndDate);
            return View(Model);
        }
        public ActionResult DownloadInventoryCountReport(DateTime? Start, DateTime? End, string searchtext)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            DataTable dt;
            dt = _Util.Facade.EquipmentFacade.GetInventoryCountReportForDownload(StartDate, EndDate, searchtext);
            dt.Columns.Remove("EquipmentId");
            return MakeExcelFromDataTable(dt, "InventoryCountReport", null, null);
        }

        #endregion

        #region Inventory Tech Truck Report
        public ActionResult InventoryTechTruckReport()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            return View("InventoryTechTruckReport");
        }

        public ActionResult InventoryTechTruckReportPartial(DateTime? Start, DateTime? End, int pageno, int pagesize, string searchtext, string order)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            EmployeeListModel Model = new EmployeeListModel();
            if (currentLoggedIn == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime();
                    EndDate = CookieVals[1].ToDateTime();
                }
            }

            Model = _Util.Facade.EmployeeFacade.GetTechnicianByCompanyIdAndTagAndSearch(currentLoggedIn.CompanyId.Value, StartDate, EndDate, pageno, pagesize, searchtext, order, LabelHelper.UserTags.Technicians);
            //ViewBag.TechnicianList = TechnicianList.Select(x =>
            //                           new SelectListItem()
            //                           {
            //                               Text = x.FirstName + " " + x.LastName,
            //                               Value = x.UserId.ToString(),
            //                               Selected = true
            //                           }).ToList();

            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.TotalCount > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }
        public ActionResult DownloadInventoryTechTruckReport(DateTime? Start, DateTime? End, string searchtext)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            DataTable dt;
            dt = _Util.Facade.EmployeeFacade.GetInventoryTechTruckReportForDownload(currentLoggedIn.CompanyId.Value, StartDate, EndDate, searchtext, LabelHelper.UserTags.Technicians);
            dt.Columns.Remove("UserId");
            return MakeExcelFromDataTable(dt, "InventoryTechTruckReport", null, null);
        }
        #endregion

        #region Inventory Tech Used Report
        public ActionResult InventoryTechUsedReport()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            return View("InventoryTechUsedReport");
        }

        public ActionResult InventoryTechUsedReportPartial(DateTime? Start, DateTime? End, int pageno, int pagesize, string searchtext, string order)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            EmployeeListModel Model = new EmployeeListModel();
            if (currentLoggedIn == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime();
                    EndDate = CookieVals[1].ToDateTime();
                }
            }

            Model = _Util.Facade.EmployeeFacade.GetTechnicianByCompanyIdAndTagAndSearch(currentLoggedIn.CompanyId.Value, StartDate, EndDate, pageno, pagesize, searchtext, order, LabelHelper.UserTags.Technicians);
            //ViewBag.TechnicianList = TechnicianList.Select(x =>
            //                           new SelectListItem()
            //                           {
            //                               Text = x.FirstName + " " + x.LastName,
            //                               Value = x.UserId.ToString(),
            //                               Selected = true
            //                           }).ToList();

            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.TotalCount > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }
        public ActionResult DownloadInventoryTechUsedReport(DateTime? Start, DateTime? End, string searchtext)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            DataTable dt;
            dt = _Util.Facade.EmployeeFacade.GetInventoryTechUsedReportForDownload(currentLoggedIn.CompanyId.Value, StartDate, EndDate, searchtext, LabelHelper.UserTags.Technicians);
            dt.Columns.Remove("UserId");
            return MakeExcelFromDataTable(dt, "InventoryTechUsedReport", null, null);
        }
        #endregion

        #region Inventory Tech Order Report
        public ActionResult InventoryTechOrderReport()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            return View("InventoryTechOrderReport");
        }

        public ActionResult InventoryTechOrderReportPartial(DateTime? Start, DateTime? End, int pageno, int pagesize, string searchtext, string order)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            EmployeeListModel Model = new EmployeeListModel();
            if (currentLoggedIn == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime();
                    EndDate = CookieVals[1].ToDateTime();
                }
            }

            Model = _Util.Facade.EmployeeFacade.GetTechnicianByCompanyIdAndTagAndSearch(currentLoggedIn.CompanyId.Value, StartDate, EndDate, pageno, pagesize, searchtext, order, LabelHelper.UserTags.Technicians);
            //ViewBag.TechnicianList = TechnicianList.Select(x =>
            //                           new SelectListItem()
            //                           {
            //                               Text = x.FirstName + " " + x.LastName,
            //                               Value = x.UserId.ToString(),
            //                               Selected = true
            //                           }).ToList();

            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.TotalCount > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }
        public ActionResult DownloadInventoryTechOrderReport(DateTime? Start, DateTime? End, string searchtext)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            DataTable dt;
            dt = _Util.Facade.EmployeeFacade.GetInventoryTechOrderReportForDownload(currentLoggedIn.CompanyId.Value, StartDate, EndDate, searchtext, LabelHelper.UserTags.Technicians);
            dt.Columns.Remove("UserId");
            return MakeExcelFromDataTable(dt, "InventoryOrderReport", null, null);
        }
        #endregion

        #region PR Report -> Ticket Summary Report
        public ActionResult PRReport()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            return View("PRReport");
        }
        public ActionResult PRReportPartial(DateTime? Start, DateTime? End, int pageno, int pagesize, string SearchText, string order)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            PRReport Model = new PRReport();
            Model = _Util.Facade.TicketFacade.GetPRReportList(StartDate, EndDate, pageno, pagesize, SearchText, order);

            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Count.Count > 0)
            {
                ViewBag.OutOfNumber = Model.Count.Count;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }
        public ActionResult GetPRReportListForDownload(DateTime? Start, DateTime? End, string searchtext)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            DataTable dt;
            dt = _Util.Facade.TicketFacade.GetPRReportListForDownload(StartDate, EndDate, searchtext);
            return MakeExcelFromDataTable(dt, "PRReport", null, null);
        }
        #endregion

        #region Usage by Account
        public ActionResult UsagebyAccountReport()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            return View("UsageByAccountReport");
        }
        public ActionResult UsagebyAccountReportPartial(DateTime? Start, DateTime? End, int pageno, int pagesize, string SearchText, string order)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            UsagebyAccount Model = new UsagebyAccount();
            Model = _Util.Facade.InventoryFacade.GetUsagebyAccountReportList(StartDate, EndDate, pageno, pagesize, SearchText, order);

            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Count.Counter > 0)
            {
                ViewBag.OutOfNumber = Model.Count.Counter;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }
        public ActionResult UsagebyAccountReportPartialList(Guid CustomerId, DateTime? Start, DateTime? End)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            UsageEquipmentList Model = new UsageEquipmentList();
            Model = _Util.Facade.InventoryFacade.GetUsagebyAccountReportEquipmentList(CustomerId, StartDate, EndDate);
            return View(Model);
        }
        public ActionResult UsagebyAccountReportPartialServiceList(Guid CustomerId, DateTime? Start, DateTime? End)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            UsageEquipmentList Model = new UsageEquipmentList();
            Model = _Util.Facade.InventoryFacade.GetUsagebyAccountReportServiceEquipmentList(CustomerId, StartDate, EndDate);
            return View(Model);
        }
        public ActionResult DownloadUsagebyAccountReportPartialList(DateTime? Start, DateTime? End, string searchtext)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            DataTable dt;
            dt = _Util.Facade.InventoryFacade.DownloadUsagebyAccountReportPartialList(StartDate, EndDate, searchtext);
            return MakeExcelFromDataTable(dt, "UsageByAccountReport", null, null);
        }
        #endregion

        #region RMA Report
        public ActionResult RMAReport()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            return View("RMAReport");
        }
        public ActionResult RMAReportPartial(DateTime? Start, DateTime? End, int pageno, int pagesize, string SearchText, string order)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            RMAEquipment Model = new RMAEquipment();
            Model = _Util.Facade.InventoryFacade.GetRMAEquipmentList(StartDate, EndDate, pageno, pagesize, SearchText, order);

            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Count.Counter > 0)
            {
                ViewBag.OutOfNumber = Model.Count.Counter;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }
        public ActionResult DownloadRMAReport(DateTime? Start, DateTime? End, string searchtext)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            DataTable dt;
            dt = _Util.Facade.InventoryFacade.DownloadRMAReport(StartDate, EndDate, searchtext);
            return MakeExcelFromDataTable(dt, "RMAReport", null, null);
        }
        #endregion

        #region Purchase Order Report
        public ActionResult PurchaseOrderReport()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            List<SelectListItem> StatussList = new List<SelectListItem>();
            //StatussList.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("LeadStatus").OrderBy(x => x.DisplayText).Where(x => x.DataValue != "-1").Select(x => new SelectListItem()
            //{
            //    Text = x.DisplayText.ToString(),
            //    Value = x.DataValue.ToString()
            //}).ToList());
            StatussList.AddRange(_Util.Facade.InventoryFacade.GetPurchaseOrderStatus().OrderBy(X => X.Status).Select(x =>
        new SelectListItem()
        {
            Text = x.Status.ToString(),
            Value = x.Status.ToString()
        }).ToList());
            ViewBag.StatussList = StatussList;
            return View("PurchaseOrderReport");
        }
        public ActionResult PurchaseOrderPartial(DateTime? Start, DateTime? End, int pageno, int pagesize, string SearchText, string StatusIDList, string order)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            List<string> Status = new List<string>();

            if (!string.IsNullOrWhiteSpace(StatusIDList))
            {
                string[] StatusList = StatusIDList.Split(',');
                if (StatusList != null)
                {
                    foreach (var item in StatusList)
                    {
                        Status.Add(item);
                    }
                }

            }
            ViewBag.StatusList = Status;
            PurchaseOrderReportList Model = new PurchaseOrderReportList();
            Model = _Util.Facade.InventoryFacade.GetPurchaseOrderList(StartDate, EndDate, pageno, pagesize, SearchText, StatusIDList, order);

            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Count.Counter > 0)
            {
                ViewBag.OutOfNumber = Model.Count.Counter;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }
        public ActionResult PurchaseOrderPartialList(string Id, DateTime? Start, DateTime? End)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            PurchaseOrderItemList Model = new PurchaseOrderItemList();
            Model = _Util.Facade.InventoryFacade.GetPurchaseOrderItemList(Id, StartDate, EndDate);
            return View(Model);
        }
        public ActionResult DownloadPurchaseOrderReport(DateTime? Start, DateTime? End, string searchtext, string StatusIDList)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            DataTable dt;
            dt = _Util.Facade.InventoryFacade.DownloadPurchaseOrderReport(StartDate, EndDate, searchtext, StatusIDList);
            dt.Columns.Remove("Id");
            return MakeExcelFromDataTable(dt, "PurchaseOrder", null, null);
        }
        #endregion

        #region RWS Report
        public ActionResult RWSReport()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            List<SelectListItem> CustomerStatus = new List<SelectListItem>();
            //CustomerStatus.Add(new SelectListItem()
            //{
            //    Text = "Please Select One",
            //    Value = "-1"
            //});
            CustomerStatus.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("LeadStatus").OrderBy(x => x.DataValue.ToString() != "-1").ThenBy(x => x.DisplayText).Select(x => new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            ViewBag.CustomerStatus = CustomerStatus;

            //List<SelectListItem> SalesPersonList = new List<SelectListItem>();
            //SalesPersonList.Add(new SelectListItem()
            //{
            //    Text = "Please Select",
            //    Value = ""
            //});
            //List<Employee> EmployeeDropdown = _Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(currentLoggedIn.CompanyId.Value, LabelHelper.UserTags.SalesPerson, new Guid());
            //if (EmployeeDropdown != null && EmployeeDropdown.Count > 0)
            //{
            //    SalesPersonList.AddRange(EmployeeDropdown.OrderBy(x => x.FirstName).Select(x =>
            //               new SelectListItem()
            //               {
            //                   Text = x.FirstName + " " + x.LastName,
            //                   Value = x.UserId.ToString()
            //               }).ToList());
            //}
            //SalesPersonList.AddRange(_Util.Facade.EmployeeFacade.GetSalesPersonCustomer().OrderBy(x => x.FirstName + " " + x.LastName != "Please Select One").ThenBy(x => x.FirstName + " " + x.LastName).Select(x =>
            //    new SelectListItem()
            //    {
            //        Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
            //        Value = x.FirstName.ToString() + " " + x.LastName.ToString()
            //    }).ToList());
            //ViewBag.SalesPersonList = SalesPersonList;

            return View("RWSReport");
        }
        public ActionResult RWSReportPartial(DateTime? Start, DateTime? End, int pageno, int pagesize, string SearchText, string Status, string SalesPerson, string order)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            List<string> statuslist = new List<string>();
            //List<string> salespersonlist = new List<string>();

            if (!string.IsNullOrWhiteSpace(Status))
            {
                string[] splituser = Status.Split(',');
                if (splituser.Length > 0)
                {
                    Status = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        statuslist.Add(item);
                    }
                }
            }
            //if (!string.IsNullOrWhiteSpace(SalesPerson))
            //{
            //    string[] splituser = SalesPerson.Split(',');
            //    if (splituser.Length > 0)
            //    {
            //        SalesPerson = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
            //        foreach (var item in splituser)
            //        {
            //            salespersonlist.Add(item);
            //        }
            //    }
            //}


            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            RWSTList Model = new RWSTList();
            Model = _Util.Facade.CustomerFacade.GetRWSTList(StartDate, EndDate, pageno, pagesize, SearchText, Status, SalesPerson, order);

            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.CustomerCount.TotalCustomer > 0)
            {
                ViewBag.OutOfNumber = Model.CustomerCount.TotalCustomer;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);

            return View(Model);
        }
        public ActionResult DownloadRWSReportData(DateTime? Start, DateTime? End, string SearchText, string Status, string SalesPerson)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            List<string> statuslist = new List<string>();
            List<string> salespersonlist = new List<string>();

            if (!string.IsNullOrWhiteSpace(Status))
            {
                string[] splituser = Status.Split(',');
                if (splituser.Length > 0)
                {
                    Status = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        statuslist.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(SalesPerson))
            {
                string[] splituser = SalesPerson.Split(',');
                if (splituser.Length > 0)
                {
                    SalesPerson = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        salespersonlist.Add(item);
                    }
                }
            }

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            DataTable dt;
            dt = _Util.Facade.CustomerFacade.DownloadRWSReportData(StartDate, EndDate, SearchText, Status, SalesPerson);
            return MakeExcelFromDataTable(dt, "RWSReport", null, null);
        }
        #endregion

        #region Installed Ticket Report
        public ActionResult InstalledTicketReport()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            List<SelectListItem> PaymentMethod = new List<SelectListItem>();

            PaymentMethod.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("PaymentMethod").OrderBy(x => x.DataValue.ToString() != "-1").ThenBy(x => x.DisplayText).Select(x => new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            ViewBag.PaymentMethods = PaymentMethod;

            List<SelectListItem> FundedStatus = new List<SelectListItem>();

            FundedStatus.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("FundedStatus").OrderBy(x => x.DataValue.ToString() != "-1").ThenBy(x => x.DisplayText).Select(x => new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            ViewBag.FundedStatus = FundedStatus;


            return View("InstalledTicketReport");
        }
        public ActionResult InstalledTicketReportPartial(DateTime? Start, DateTime? End, int pageno, int pagesize, string SearchText, string PaymentMethod, string FundedStatus, string order)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            //StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
            //EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
            InstalledTicket Model = new InstalledTicket();
            Model = _Util.Facade.TicketFacade.InstalledTicketReportList(StartDate, EndDate, pageno, pagesize, SearchText, PaymentMethod, FundedStatus, currentLoggedIn.UserId, order);
            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Count.Count > 0)
            {
                ViewBag.OutOfNumber = Model.Count.Count;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }
        public ActionResult GetInstalledTicketReportListForDownload(DateTime? Start, DateTime? End, string searchtext, string PaymentMethod, string FundedStatus)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            //StartDate = Convert.ToDateTime(Start).SetZeroHour().ClientToUTCTime();
            //EndDate = Convert.ToDateTime(End).SetMaxHour().ClientToUTCTime();
            DataTable dt;
            dt = _Util.Facade.TicketFacade.InstalledTicketReportListForDownload(StartDate, EndDate, searchtext, PaymentMethod, FundedStatus, currentLoggedIn.UserId);
            dt.Columns.Remove("Id");

            //dt.Columns.Remove("Installed");
            return MakeExcelFromDataTable(dt, "InstalledTicketReport", null, null);
        }
        #endregion

        #region AppointMent Date Report
        public ActionResult AppointmentDateReport(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            TicketListModel Model = new TicketListModel();
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            List<string> statuscustomer = new List<string>();

            if (!string.IsNullOrWhiteSpace(Filters.TicketType))
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus))
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket))
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }

            if (!string.IsNullOrWhiteSpace(Filters.CustomerStatus))
            {
                string[] splituser = Filters.CustomerStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.CustomerStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statuscustomer.Add(item);
                    }
                }
            }
            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }
            ViewBag.OutOfNumber = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);



            #region Viewbags
            List<SelectListItem> Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketStatus")
                .OrderBy(x => x.DisplayText)
                .Where(x => x.DataValue != "-1")
                .ToList().Select(x =>
                 new SelectListItem()
                 {
                     Text = x.DisplayText.ToString(),
                     Value = x.DataValue.ToString()
                 }).ToList();



            ViewBag.TicketStatus = Items;

            Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketType").OrderBy(x => x.DataValue.ToString() != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            Items.RemoveAt(0);

            ViewBag.TicketType = Items;


            Items = _Util.Facade.LookupFacade.GetLookupByKey("CustomerStatus1").OrderBy(x => x.DataValue.ToString() != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            ViewBag.CustomerStatus = Items;


            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployeeByTicketUserIsprimary(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();

            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),

                }).ToList();

            if (emplst.Where(x => x.Text == "System User").Count() < 1)
            {

                emplst.Add(new SelectListItem()
                {
                    Text = "System User",
                    Value = "22222222-2222-2222-2222-222222222222"
                });
            }
            emplst = emplst.OrderBy(x => x.Text).ToList();
            ViewBag.EmployeeList = emplst;

            List<SelectListItem> MyTicketList = new List<SelectListItem>();

            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Other Filters",
                    Value = "-1"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Created By Me",
                    Value = "Created"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Assigned to Me",
                    Value = "Assigned"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Both",
                    Value = "Both"
                });
            MyTicketList.Add(
               new SelectListItem
               {
                   Text = "None",
                   Value = "None"
               });
            ViewBag.MyTicketList = MyTicketList;

            #endregion
            ViewBag.tikettype = typeticket;
            ViewBag.statustiket = statusticket;
            ViewBag.assignticket = assignticket;
            ViewBag.statuscustomer = statuscustomer;

            List<SelectListItem> sales = new List<SelectListItem>();
            sales.Add(new SelectListItem()
            {
                Text = "Please Select",
                Value = "-1"
            });
            sales.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.SalesPerson, new Guid(), LabelHelper.UserTags.Partner).OrderBy(x => x.FirstName + " " + x.LastName).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.salesperson = sales;
            return View(Model);
        }
        [Authorize]
        public ActionResult AppointmentDateReportList(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            List<string> statuscustomer = new List<string>();

            if (!string.IsNullOrWhiteSpace(Filters.TicketType) && Filters.TicketType != "null")
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(HttpUtility.UrlDecode(item));
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus) && Filters.TicketStatus != "null")
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(HttpUtility.UrlDecode(item));
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket) && Filters.AssignedUserTicket != "null")
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.CustomerStatus) && Filters.CustomerStatus != "null")
            {
                string[] splituser = Filters.CustomerStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.CustomerStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statuscustomer.Add(HttpUtility.UrlDecode(item));
                    }
                }
            }
            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = System.Web.HttpUtility.UrlDecode(Filters.SearchText);
            }
            Filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            Filters.UserId = CurrentUser.UserId;


            TicketListModel Model = _Util.Facade.EmployeeFacade.GetAllAppointmentDateReport(Filters, filter);
            ViewBag.PageNumber = Filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = Filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Tickets != null && Model.Tickets.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);

            return View(Model);
        }
        public ActionResult AppointmentDateReportListForDownload(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            List<string> statuscustomer = new List<string>();

            if (!string.IsNullOrWhiteSpace(Filters.TicketType) && Filters.TicketType != "null")
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(HttpUtility.UrlDecode(item));
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus) && Filters.TicketStatus != "null")
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(HttpUtility.UrlDecode(item));
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket) && Filters.AssignedUserTicket != "null")
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.CustomerStatus) && Filters.CustomerStatus != "null")
            {
                string[] splituser = Filters.CustomerStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.CustomerStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statuscustomer.Add(HttpUtility.UrlDecode(item));
                    }
                }
            }
            if (string.IsNullOrWhiteSpace(Filters.StartDate.ToString()) && string.IsNullOrWhiteSpace(Filters.EndDate.ToString()))
            {
                Filters.StartDate = StartDate;
                Filters.EndDate = EndDate;
            }


            DataTable dt;

            if (!string.IsNullOrWhiteSpace(Filters.StartDate.ToString()) && !string.IsNullOrWhiteSpace(Filters.EndDate.ToString()))
            {

                dt = _Util.Facade.EmployeeFacade.AppointmentDateReportListForDownload(Filters, filter);

            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {

                    dt = _Util.Facade.EmployeeFacade.AppointmentDateReportListForDownload(Filters, filter);

                }
                else
                {
                    dt = _Util.Facade.EmployeeFacade.AppointmentDateReportListForDownload(Filters, filter);

                }

            }


            int[] colarray = { 10 };
            int[] rowarray = { dt.Rows.Count + 2 };

            return MakeExcelFromDataTable(dt, "Appointment Date", rowarray, colarray);
        }
        #endregion

        #region Date Reference Report
        public ActionResult DateReferenceReport(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            TicketListModel Model = new TicketListModel();
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.TicketType))
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus))
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket))
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }
            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }
            ViewBag.OutOfNumber = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);



            #region Viewbags
            List<SelectListItem> Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketStatus")
                .OrderBy(x => x.DisplayText)
                .Where(x => x.DataValue != "-1")
                .ToList().Select(x =>
                 new SelectListItem()
                 {
                     Text = x.DisplayText.ToString(),
                     Value = x.DataValue.ToString()
                 }).ToList();



            ViewBag.TicketStatus = Items;

            Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketType").OrderBy(x => x.DataValue.ToString() != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            Items.RemoveAt(0);

            ViewBag.TicketType = Items;
            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployeeByTicketUserIsprimary(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),

                }).ToList();

            if (emplst.Where(x => x.Text == "System User").Count() < 1)
            {

                emplst.Add(new SelectListItem()
                {
                    Text = "System User",
                    Value = "22222222-2222-2222-2222-222222222222"
                });
            }
            emplst = emplst.OrderBy(x => x.Text).ToList();

            ViewBag.EmployeeList = emplst;

            List<SelectListItem> MyTicketList = new List<SelectListItem>();

            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Other Filters",
                    Value = "-1"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Created By Me",
                    Value = "Created"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Assigned to Me",
                    Value = "Assigned"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Both",
                    Value = "Both"
                });
            MyTicketList.Add(
               new SelectListItem
               {
                   Text = "None",
                   Value = "None"
               });
            ViewBag.MyTicketList = MyTicketList;

            #endregion
            ViewBag.tikettype = typeticket;
            ViewBag.statustiket = statusticket;
            ViewBag.assignticket = assignticket;
            List<SelectListItem> sales = new List<SelectListItem>();
            sales.Add(new SelectListItem()
            {
                Text = "Please Select",
                Value = "-1"
            });
            sales.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.SalesPerson, new Guid(), LabelHelper.UserTags.Partner).OrderBy(x => x.FirstName + " " + x.LastName).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.salesperson = sales;
            return View(Model);
        }
        [Authorize]
        public ActionResult DateReferenceReportList(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.TicketType) && Filters.TicketType != "null")
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(HttpUtility.UrlDecode(item));
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus) && Filters.TicketStatus != "null")
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(HttpUtility.UrlDecode(item));
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket) && Filters.AssignedUserTicket != "null")
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }
            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = System.Web.HttpUtility.UrlDecode(Filters.SearchText);
            }
            Filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            Filters.UserId = CurrentUser.UserId;


            TicketListModel Model = _Util.Facade.EmployeeFacade.GetAllDateReferenceReport(Filters, filter);
            ViewBag.PageNumber = Filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = Filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Tickets != null && Model.Tickets.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);

            return View(Model);
        }
        public ActionResult DateReferenceReportListForDownload(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.TicketType) && Filters.TicketType != "null")
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(HttpUtility.UrlDecode(item));
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus) && Filters.TicketStatus != "null")
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(HttpUtility.UrlDecode(item));
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket) && Filters.AssignedUserTicket != "null")
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }

            if (string.IsNullOrWhiteSpace(Filters.StartDate.ToString()) && string.IsNullOrWhiteSpace(Filters.EndDate.ToString()))
            {
                Filters.StartDate = StartDate;
                Filters.EndDate = EndDate;
            }

         

            DataTable dt;

            if (!string.IsNullOrWhiteSpace(Filters.StartDate.ToString()) && !string.IsNullOrWhiteSpace(Filters.EndDate.ToString()))
            {

                dt = _Util.Facade.EmployeeFacade.DateReferenceReportListForDownload(Filters, filter);

            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {

                    dt = _Util.Facade.EmployeeFacade.DateReferenceReportListForDownload(Filters, filter);

                }
                else
                {
                    dt = _Util.Facade.EmployeeFacade.DateReferenceReportListForDownload(Filters, filter);

                }

            }


            int[] colarray = { 10 };
            int[] rowarray = { dt.Rows.Count + 2 };


            return MakeExcelFromDataTable(dt, "Date Reference", rowarray, colarray);
        }
        #endregion

        #region Go Back Report
        public ActionResult GoBackReport(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            TicketListModel Model = new TicketListModel();
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.TicketType))
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus))
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket))
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }

            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }

            #region Viewbags
            List<SelectListItem> Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketStatus").OrderBy(x => x.DataOrder).ToList().Select(x =>
                 new SelectListItem()
                 {
                     Text = x.DisplayText.ToString(),
                     Value = x.DataValue.ToString()
                 }).ToList();

            Items.RemoveAt(0);

            ViewBag.TicketStatus = Items;

            Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketType").OrderBy(x => x.DataOrder).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            Items.RemoveAt(0);
            ViewBag.TicketType = Items;
            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();

            if (emplst.Where(x => x.Text == "System User").Count() < 1)
            {

                emplst.Add(new SelectListItem()
                {
                    Text = "System User",
                    Value = "22222222-2222-2222-2222-222222222222"
                });
            }
            emplst = emplst.OrderBy(x => x.Text).ToList();

            ViewBag.EmployeeList = emplst;

            List<SelectListItem> MyTicketList = new List<SelectListItem>();

            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Other Filters",
                    Value = "-1"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Created By Me",
                    Value = "Created"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Assigned to Me",
                    Value = "Assigned"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Both",
                    Value = "Both"
                });
            MyTicketList.Add(
               new SelectListItem
               {
                   Text = "None",
                   Value = "None"
               });
            ViewBag.MyTicketList = MyTicketList;

            #endregion
            ViewBag.tikettype = typeticket;
            ViewBag.statustiket = statusticket;
            ViewBag.assignticket = assignticket;
            List<SelectListItem> sales = new List<SelectListItem>();
            sales.Add(new SelectListItem()
            {
                Text = "Please Select",
                Value = "-1"
            });
            sales.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.SalesPerson, new Guid(), LabelHelper.UserTags.Partner).OrderBy(x => x.FirstName + " " + x.LastName).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.salesperson = sales;
            return View(Model);
        }

        public ActionResult GoBackReportList(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.TicketType))
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus))
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket))
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }

            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }
            Filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            Filters.UserId = CurrentUser.UserId;

            TicketListModel Model = _Util.Facade.EmployeeFacade.GetAllGoBackReport(Filters, filter);
            ViewBag.PageNumber = Filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = Filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Tickets != null && Model.Tickets.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);


            #region Viewbags
            List<SelectListItem> Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketStatus").OrderBy(x => x.DataOrder).ToList().Select(x =>
                 new SelectListItem()
                 {
                     Text = x.DisplayText.ToString(),
                     Value = x.DataValue.ToString()
                 }).ToList();

            Items.RemoveAt(0);

            ViewBag.TicketStatus = Items;

            Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketType").OrderBy(x => x.DataOrder).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            Items.RemoveAt(0);
            ViewBag.TicketType = Items;
            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();
            emplst = emplst.OrderBy(x => x.Text).ToList();

            ViewBag.EmployeeList = emplst;

            List<SelectListItem> MyTicketList = new List<SelectListItem>();

            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Other Filters",
                    Value = "-1"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Created By Me",
                    Value = "Created"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Assigned to Me",
                    Value = "Assigned"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Both",
                    Value = "Both"
                });
            MyTicketList.Add(
               new SelectListItem
               {
                   Text = "None",
                   Value = "None"
               });
            ViewBag.MyTicketList = MyTicketList;

            #endregion
            ViewBag.tikettype = typeticket;
            ViewBag.statustiket = statusticket;
            ViewBag.assignticket = assignticket;
            List<SelectListItem> sales = new List<SelectListItem>();
            sales.Add(new SelectListItem()
            {
                Text = "Please Select",
                Value = "-1"
            });
            sales.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.SalesPerson, new Guid(), LabelHelper.UserTags.Partner).OrderBy(x => x.FirstName + " " + x.LastName).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.salesperson = sales;
            return View(Model);
        }
        public ActionResult GoBackReportListForDownload(TicketFilter Filters, FilterReportModel filter)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.TicketType) && Filters.TicketType != "null")
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(HttpUtility.UrlDecode(item));
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus) && Filters.TicketStatus != "null")
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(HttpUtility.UrlDecode(item));
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket) && Filters.AssignedUserTicket != "null")
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }
            if (string.IsNullOrWhiteSpace(Filters.StartDate.ToString()) && string.IsNullOrWhiteSpace(Filters.EndDate.ToString()))
            {
                Filters.StartDate = StartDate;
                Filters.EndDate = EndDate;
            }
            DataTable dt;
            if (!string.IsNullOrWhiteSpace(Filters.StartDate.ToString()) && !string.IsNullOrWhiteSpace(Filters.EndDate.ToString()))
            {

                dt = _Util.Facade.EmployeeFacade.GoBackReportListForDownload(Filters, filter);
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {

                    dt = _Util.Facade.EmployeeFacade.GoBackReportListForDownload(Filters, filter);
                }
                else
                {
                    dt = _Util.Facade.EmployeeFacade.GoBackReportListForDownload(Filters, filter);
                }

            }
            return MakeExcelFromDataTable(dt, "Go Back", null, null);
        }
        #endregion

        #region Tax Collection Report
        public ActionResult TaxCollectionReport(TaxCollectionFilter Filters)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            TaxCollection Model = new TaxCollection();

            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }


            return View(Model);
        }
        public ActionResult TaxCollectionReportList(TaxCollectionFilter Filters)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;

            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }
            Filters.PageSize = 20;
            Filters.CompanyId = CurrentUser.CompanyId.Value;

            TaxCollection Model = _Util.Facade.CustomerFacade.GetAllTaxCollectionReport(Filters);
            ViewBag.PageNumber = Filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = Filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.TaxCollectionList != null && Model.TaxCollectionList.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);



            return View(Model);
        }
        public ActionResult TaxCollectionReportListForDownload(TaxCollectionFilter Filters)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }


            Filters.StartDate = StartDate;
            Filters.EndDate = EndDate;
            DataTable dt;
            if (!string.IsNullOrWhiteSpace(Filters.StartDate.ToString()) && !string.IsNullOrWhiteSpace(Filters.EndDate.ToString()))
            {

                dt = _Util.Facade.CustomerFacade.TaxCollectionReportListForDownload(Filters);
            }
            else
            {
                if (StartDate != new DateTime() && EndDate != new DateTime())
                {

                    dt = _Util.Facade.CustomerFacade.TaxCollectionReportListForDownload(Filters);
                }
                else
                {
                    dt = _Util.Facade.CustomerFacade.TaxCollectionReportListForDownload(Filters);
                }

            }
            return MakeExcelFromDataTable(dt, "Tax Collection", null, null);
        }
        #endregion

        #region Paid Commission Report
        public ActionResult PaidCommission()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            return View("PaidCommission");
        }
        public ActionResult PaidCommissionPartial(DateTime? Start, DateTime? End, int pageno, int pagesize, string SearchText, string order)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime();
                    EndDate = CookieVals[1].ToDateTime();
                }
            }

            PayrollDetailModel Model = new PayrollDetailModel();
            Model = _Util.Facade.TicketFacade.PaidCommissionReportList(StartDate, EndDate, pageno, pagesize, SearchText, order);

            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.TotalCount.TotalCount > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }
        public ActionResult PaidCommissionImportFile()
        {
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (CurrentLoggedInUser == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }

            return View("PaidCommissionImportFile");
        }
        public PartialViewResult PaidCommissionEditImportData(int Id)
        {
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            PayrollDetailModel Model = new PayrollDetailModel();
            Model = _Util.Facade.TicketFacade.GetPaidCommissionImoprtDataById(Id);
            return PartialView(Model);
        }
        public JsonResult PaidCommissionImportDataEdit(PayrollDetail PDM)
        {
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            bool result = false;

            if (CurrentLoggedInUser == null)
            {
                return Json(result);
            }
            PayrollDetail PaidCommission = new PayrollDetail();
            PaidCommission = _Util.Facade.EmployeeFacade.GetPayrollDetailById(PDM.Id);
            if (PaidCommission != null)
            {
                PayrollDetail PD = new PayrollDetail();
                PaidCommission.RepName = PDM.RepName;
                PaidCommission.RepCommission = PDM.RepCommission;
                PaidCommission.RepHoldback = PDM.RepHoldback;
                PaidCommission.OverrideRep1 = PDM.OverrideRep1;
                PaidCommission.Override1 = PDM.Override1;
                PaidCommission.OverrideRep2 = PDM.OverrideRep2;
                PaidCommission.Override2 = PDM.Override2;
                PaidCommission.RepPaidDate = PDM.RepPaidDate;
                PaidCommission.TechName = PDM.TechName;
                PaidCommission.TechPay = PDM.TechPay;
                PaidCommission.TechHoldback = PDM.TechHoldback;
                PaidCommission.TechPaidDate = PDM.TechPaidDate;
                PaidCommission.OpenerCommission = PDM.OpenerCommission;
                PaidCommission.MiscRep1 = PDM.MiscRep1;
                PaidCommission.MiscCommission1 = PDM.MiscCommission1;
                PaidCommission.MiscRep2 = PDM.MiscRep2;
                PaidCommission.MiscCommission2 = PDM.MiscCommission2;
                PaidCommission.MiscRep3 = PDM.MiscRep3;
                PaidCommission.MiscCommission3 = PDM.MiscCommission3;
                PaidCommission.MiscRep4 = PDM.MiscRep4;
                PaidCommission.MiscCommission4 = PDM.MiscCommission4;
                PaidCommission.MiscRep5 = PDM.MiscRep5;
                PaidCommission.MiscCommission5 = PDM.MiscCommission5;
                PaidCommission.MiscPaidDate = PDM.MiscPaidDate;
                result = _Util.Facade.EmployeeFacade.UpdatePaidCommissionData(PaidCommission);
            }
            return Json(result);
        }
        public ActionResult GetPaidCommissionReportListForDownload(DateTime? Start, DateTime? End, string searchtext)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime();
                    EndDate = CookieVals[1].ToDateTime();
                }
            }
            DataTable dt;
            dt = _Util.Facade.TicketFacade.PaidCommissionReportListForDownload(StartDate, EndDate, searchtext);
            return MakeExcelFromDataTable(dt, "PaidCommission", null, null);
        }
        #endregion

        #region Inside Commission Report
        public ActionResult InsideCommission()
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();

            ViewBag.EmployeeList = emplst;
            return View();
        }
        public ActionResult InsideCommissionPartialList(bool? GetReport, string Start, string End, string searchtext, int pageno, int pagesize, string SalesRep, string FinRep, DateTime? PayrollStartDate, DateTime? PayrollEndDate)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";

            List<string> SalesRepList = new List<string>();
            if (!string.IsNullOrWhiteSpace(SalesRep))
            {
                string[] splituser = SalesRep.Split(',');
                if (splituser.Length > 0)
                {
                    SalesRep = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {
                        SalesRepList.Add(item);
                    }
                }
            }
            List<string> FinRepList = new List<string>();
            if (!string.IsNullOrWhiteSpace(FinRep))
            {
                string[] splituser = FinRep.Split(',');
                if (splituser.Length > 0)
                {
                    FinRep = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {
                        FinRepList.Add(item);
                    }
                }
            }
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport.Value == true)
            {
                DataTable dt = _Util.Facade.PayrollFacade.GetInsideCommissionReportExportByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, SalesRepList, FinRepList, PayrollStartDate, PayrollEndDate);
                int[] colarray = { 5, 6, 7, 8, 9, 10, 11, 12 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "Inside Commission", rowarray, colarray);
            }
            InsideCommissionModel model = new InsideCommissionModel();


            model = _Util.Facade.PayrollFacade.GetInsideCommissionReportALLByCompanyId(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, pageno, pagesize, SalesRepList, FinRepList, PayrollStartDate, PayrollEndDate);


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            if (model.Totalcount > 0)
            {
                ViewBag.OutOfNumber = model.Totalcount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(model);
        }
        #endregion

        #region Vendor Account Report
        public ActionResult VendorAccount()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            return View("VendorAccount");
        }
        public ActionResult VendorAccountPartial(DateTime? Start, DateTime? End, int pageno, int pagesize, string SearchText)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            CustomerVendorAccount Model = new CustomerVendorAccount();
            Model = _Util.Facade.CustomerFacade.GetVendorAccountList(StartDate, EndDate, pageno, pagesize, SearchText);

            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Count.CountTotal > 0)
            {
                ViewBag.OutOfNumber = Model.Count.CountTotal;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }
        public ActionResult GetVendorAccountReportListForDownload(DateTime? Start, DateTime? End, string searchtext)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            DataTable dt;
            dt = _Util.Facade.CustomerFacade.GetVendorAccountListForDownload(StartDate, EndDate, searchtext);
            return MakeExcelFromDataTable(dt, "VendorAccount", null, null);
        }
        #endregion

        #region All Equipment Report
        public ActionResult AllEquipmentReport(bool? GetReport, string Start, string End, TicketFilter Filters, string RepType, FilterReportModel filter)
        {
            return View();
        }
        public ActionResult AllEquipmentReportPartial(TicketFilter Filters)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            TicketListModel Model = new TicketListModel();
            List<string> typeticket = new List<string>();
            List<string> statusticket = new List<string>();
            List<string> assignticket = new List<string>();
            List<string> eqcategory = new List<string>();
            List<string> manulist = new List<string>();
            List<string> technicianlist = new List<string>();
            List<string> EquipmentStatus = new List<string>();
            if (!string.IsNullOrWhiteSpace(Filters.TicketType))
            {
                string[] splituser = Filters.TicketType.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketType = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        typeticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus))
            {
                string[] splituser = Filters.TicketStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(item);
                    }
                }
            }
            if (Filters.TicketStatusArr != null && Filters.TicketStatusArr.Count() > 0)
            {
                string[] splituser = Filters.TicketStatusArr;
                if (splituser.Length > 0)
                {
                    Filters.TicketStatus = string.Format("{0}", string.Join("','", splituser));
                    foreach (var item in splituser)
                    {
                        statusticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket))
            {
                string[] splituser = Filters.AssignedUserTicket.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.AssignedUserTicket = string.Format("{0}", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        assignticket.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.category))
            {
                string[] splituser = Filters.category.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.category = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {
                        eqcategory.Add(item);
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(Filters.manufact))
            {
                string[] splituser = Filters.manufact.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.manufact = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                    foreach (var item in splituser)
                    {
                        manulist.Add(item);
                    }
                }
            }
            if (Filters.technicianlist != null)
            {
                //string[] splituser = Filters.technician.Split(',');
                //if (splituser.Length > 0)
                //{
                //Filters.technician = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                foreach (var item in Filters.technicianlist)
                {
                    technicianlist.Add(item);
                }
                //}
            }
            if (!string.IsNullOrWhiteSpace(Filters.EquipmentStatus))
            {
                string[] splituser = Filters.EquipmentStatus.Split(',');
                if (splituser.Length > 0)
                {
                    Filters.EquipmentStatus = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {

                        EquipmentStatus.Add(item);
                    }
                }
            }
            if (!Filters.PageNo.HasValue || Filters.PageNo.Value < 1)
            {
                Filters.PageNo = 1;
            }
            if (Filters.SearchText == "undefined" || Filters.SearchText == null)
            {
                Filters.SearchText = "";
            }
            else
            {
                Filters.SearchText = Filters.SearchText.Replace(" ", "");
            }
            Filters.PageSize = _Util.Facade.GlobalSettingsFacade.GetTicketPageLimit(CurrentUser.CompanyId.Value);
            Filters.CompanyId = CurrentUser.CompanyId.Value;
            Filters.UserId = CurrentUser.UserId;

            Model = _Util.Facade.EmployeeFacade.GetTicketListAllByFilter(Filters);
            ViewBag.PageNumber = Filters.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = Filters.order;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Tickets != null && Model.Tickets.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount;
            }

            if ((int)ViewBag.PageNumber * Filters.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filters.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filters.PageSize);


            #region Viewbags
            List<SelectListItem> Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketStatus").OrderBy(x => x.DataOrder).ToList().Select(x =>
                 new SelectListItem()
                 {
                     Text = x.DisplayText.ToString(),
                     Value = x.DataValue.ToString()
                 }).ToList();

            Items.RemoveAt(0);

            ViewBag.TicketStatus = Items;

            Items = _Util.Facade.LookupFacade.GetLookupByKey("TicketType").OrderBy(x => x.DataValue.ToString() != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            Items.RemoveAt(0);
            ViewBag.TicketType = Items;

            Items = _Util.Facade.LookupFacade.GetLookupByKey("EquipmentStatus").OrderBy(x => x.DataValue.ToString() != "-1").ThenBy(x => x.DisplayText).ToList().Select(x =>
               new SelectListItem()
               {
                   Text = x.DisplayText.ToString(),
                   Value = x.DataValue.ToString()
               }).ToList();
            Items.RemoveAt(0);
            ViewBag.EquipmentStatus = Items;

            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();

            ViewBag.EmployeeList = emplst;

            List<SelectListItem> MyTicketList = new List<SelectListItem>();

            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Other Filters",
                    Value = "-1"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Created By Me",
                    Value = "Created"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Assigned to Me",
                    Value = "Assigned"
                });
            MyTicketList.Add(
                new SelectListItem
                {
                    Text = "Both",
                    Value = "Both"
                });
            MyTicketList.Add(
               new SelectListItem
               {
                   Text = "None",
                   Value = "None"
               });
            ViewBag.MyTicketList = MyTicketList;

            #endregion
            ViewBag.tikettype = typeticket;
            ViewBag.statustiket = statusticket;
            ViewBag.assignticket = assignticket;
            ViewBag.Equipment = EquipmentStatus;
            List<SelectListItem> eqpCategory = new List<SelectListItem>();
            eqpCategory.Add(new SelectListItem()
            {
                Text = "Select One",
                Value = "-1"
            });
            eqpCategory.AddRange(_Util.Facade.EquipmentFacade.GetAllEquipmentType().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.Id.ToString()
            }).ToList());
            ViewBag.eqpCategory = eqpCategory.OrderBy(x => x.Text != "Select One").ThenBy(x => x.Text).ToList();
            List<SelectListItem> manufacturer = new List<SelectListItem>();
            manufacturer.Add(new SelectListItem()
            {
                Text = "Select One",
                Value = "-1"
            });
            List<SelectListItem> technician = new List<SelectListItem>();

            technician.AddRange(_Util.Facade.EmployeeFacade.GetTechnicianlist(Filters).Select(x => new SelectListItem()
            {
                Text = x.EmpUser.ToString(),
                Value = x.EmpUser.ToString()
            }).ToList());
            manufacturer.AddRange(_Util.Facade.EquipmentFacade.GetAllManufacturer().Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.ManufacturerId.ToString()
            }).ToList());
            ViewBag.manufacturer = manufacturer.OrderBy(x => x.Text != "Select One").ThenBy(x => x.Text).ToList();
            ViewBag.listcategory = eqcategory;
            ViewBag.listtechnician = emplst;
            ViewBag.tech = technicianlist;
            ViewBag.listmanu = manulist;
            return View(Model);
        }
        #endregion

        #region Brinks Report Upload
        public ActionResult ReportUpload()
        {
            if (!base.IsPermitted(UserPermissions.MenuPermissions.LeftMenuPayrollReports))
            {
                return View("~/Views/Shared/_AccessDenied.cshtml");
            }
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            //ViewBag.ispayroll = _Util.Facade.EmployeeFacade.GetEmployeeByUsername(CurrentUser.Identity.Name).IsPayroll;
            return View();
        }

        public ActionResult CancelQueue()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            return View();
        }

        public ActionResult CancelQueuePartial(DateTime? Start, DateTime? End, int pageno, int pagesize, string SearchText, string order)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            CancelQueueModels Model = new CancelQueueModels();
            Model = _Util.Facade.TicketFacade.CancelQueueReportList(StartDate, EndDate, pageno, pagesize, SearchText, order);

            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.TotalCount.TotalCount > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }

        public ActionResult BrinksReportImportFile(string ImportFrom)
        {
            ViewBag.ImportFrom = ImportFrom;
            var CurrentLoggedInUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (CurrentLoggedInUser == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }

            return View();
        }

        public ActionResult GetCancelQueueReportListForDownload(DateTime? Start, DateTime? End, string searchtext)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            DataTable dt;
            dt = _Util.Facade.TicketFacade.CancelQueueReportListForDownload(StartDate, EndDate, searchtext);
            return MakeExcelFromDataTable(dt, "CancelQueueReport", null, null);
        }

        public ActionResult BrinksCustomerList()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            return View();
        }

        public ActionResult CustomerListPartial(DateTime? Start, DateTime? End, int pageno, int pagesize, string SearchText, string order)
        {
            if (SearchText == "administrator")
            {
                SearchText = "";
            }
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            BrinksCustomerModels Model = new BrinksCustomerModels();
            Model = _Util.Facade.TicketFacade.BrinksCustomerReportList(StartDate, EndDate, pageno, pagesize, SearchText, order);

            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.TotalCount.TotalCount > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }
        public ActionResult GetCustomerListReportListForDownload(DateTime? Start, DateTime? End, string searchtext)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            DataTable dt;
            dt = _Util.Facade.TicketFacade.BrinksCustomerReportListForDownload(StartDate, EndDate, searchtext);
            return MakeExcelFromDataTable(dt, "CustomerListReport", null, null);
        }
        public ActionResult GetFundingVerificationListForDownload(DateTime? Start, DateTime? End, string searchtext)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            DataTable dt;
            dt = _Util.Facade.TicketFacade.BrinksFundingVerificationListForDownload(StartDate, EndDate, searchtext);
            return MakeExcelFromDataTable(dt, "FundingVerification", null, null);
        }

        public ActionResult FundingVerificationList()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            return View();
        }

        public ActionResult FundingVerificationPartial(DateTime? Start, DateTime? End, int pageno, int pagesize, string SearchText, string order)
        {
            if (SearchText == "administrator")
            {
                SearchText = "";
            }
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }

            FundingVerificationModels Model = new FundingVerificationModels();
            Model = _Util.Facade.TicketFacade.FundingVerificationReportList(StartDate, EndDate, pageno, pagesize, SearchText, order);

            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.TotalCount.TotalCount > 0)
            {
                ViewBag.OutOfNumber = Model.TotalCount.TotalCount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(Model);
        }

        #endregion

        #region Product & Services
        public ActionResult DownloadFilterProductList(FilterEquipment _FilterEquipment)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            int PageLimit = 0;
            if (CurrentUser == null)
            {
                return PartialView("~/Views/Shared/_AccessDenied.cshtml");
            }
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            _FilterEquipment.ActiveStatus = 1;
            _FilterEquipment.EmployeeRole = "";
            if (string.IsNullOrWhiteSpace(CurrentUser.UserRole) && CurrentUser.UserId != new Guid())
            {
                var objRole = _Util.Facade.EmployeeFacade.GetEmployeeRoleByEmployeeIdAndCompanyId(CurrentUser.UserId, CurrentUser.CompanyId.Value);
                _FilterEquipment.EmployeeRole = objRole.Name;
            }
            else if (!string.IsNullOrWhiteSpace(CurrentUser.UserRole))
            {
                _FilterEquipment.EmployeeRole = CurrentUser.UserRole;
            }
            PageLimit = _Util.Facade.GlobalSettingsFacade.GetInventoryPagingLimit(CurrentUser.CompanyId.Value);
            _FilterEquipment.CompanyId = CurrentUser.CompanyId.Value;

            if (_FilterEquipment.PageNo == 0)
            {
                _FilterEquipment.PageNo = 1;
            }

            if (_FilterEquipment.PageSize < PageLimit)
            {
                _FilterEquipment.PageSize = PageLimit;
            }

            DataTable dt;
            dt = _Util.Facade.InventoryFacade.DownloadGetProductListByFilter(_FilterEquipment, StartDate, EndDate);
            return MakeExcelFromDataTable(dt, "ProductsAndServices", null, null);
        }
        #endregion

        #region Estimate Download
        public ActionResult DownloadEstimatorList(Guid CustomerId, string SelectAllIds, EstimatorFilter filter)
        {
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;


            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            List<int> IdList = new List<int>();

            string[] ids = SelectAllIds.Split(',');

            for (int i = 0; i < ids.Length - 1; i++)
            {
                IdList.Add(Convert.ToInt32(ids[i]));
            }

            DataTable dt;
            dt = _Util.Facade.EstimatorFacade.GetEstimatorList(CustomerId, CurrentUser.CompanyId.Value, IdList.ToArray(), filter);
            int[] colarray = { 4 };
            int[] rowarray = { dt.Rows.Count + 2 };
            return MakeExcelFromDataTable(dt, "EstimatorReport", rowarray, colarray);
        }
        [Authorize]
        public ActionResult ExportEstimatorByEstimatorId(string EstimatorId)
        {
            
            DataSet dt = _Util.Facade.EstimatorFacade.GetExportEstimatorByEstimatorId(EstimatorId);
            DataTable businessInfoTable = dt.Tables[0];
            DataRow businessInfo = businessInfoTable.Rows[0];

            string businessName = businessInfo["Business Name"].ToString();
            string accountNumber = businessInfo["Account Number"].ToString();
            string estimatorNumber = businessInfo["Estimator Number"].ToString();

            DataTable estimatorDetailsTable = dt.Tables[1];

            if (estimatorDetailsTable != null && estimatorDetailsTable.Rows.Count > 0)
            {
                decimal totalPrice = estimatorDetailsTable.AsEnumerable().Sum(row => Convert.ToDecimal(row["Total"] ?? 0));
                decimal totalCost = estimatorDetailsTable.AsEnumerable().Sum(row => Convert.ToDecimal(row["Total Cost"] ?? 0));

                decimal totalProfit = estimatorDetailsTable.AsEnumerable().Sum(row => Convert.ToDecimal(row["Profit"] ?? 0));
       
                DataRow totalRow = estimatorDetailsTable.NewRow();
                totalRow["Equipment"] = "Total"; 
                totalRow["Total"] = totalPrice;
                totalRow["Total Cost"] = totalCost;
                totalRow["Profit"] = totalProfit;

                estimatorDetailsTable.Rows.Add(totalRow);
            }

            int[] colarray = { 4 };
            int[] rowarray = { estimatorDetailsTable.Rows.Count + 5 };

            return MakeExcelFromDataTableWithHeader(estimatorDetailsTable, "EstimateReport", rowarray, colarray, businessName, accountNumber, estimatorNumber);
        }

       


        #endregion

        #region RecurringBilling Download
        //public ActionResult DownloadRecurringBillingListPartial(int? CustomerId, string SearchText)
        //{
        //    DataTable dt;
        //    Customer CustomerInfo = new Customer();
        //    var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));

        //    if (CustomerId.HasValue)
        //    {
        //        CustomerInfo = _Util.Facade.CustomerFacade.GetCustomersById(CustomerId.Value);
        //    }
        //    dt = _Util.Facade.CustomerFacade.GetRecurringBillingList(CustomerInfo.CustomerId, CurrentUser.CompanyId.Value, SearchText);
        //    return MakeExcelFromDataTable(dt, "RecurringBillingReport");
        //}
        #endregion

        #region Job Costing Section
        public ActionResult JobCostingReports()
        {
            //if (!base.IsPermitted(UserPermissions.MenuPermissions.JobCostingReport))
            //{
            //    return View("~/Views/Shared/_AccessDenied.cshtml");
            //}
            return View();
        }
        #region Job Costing Report
        public ActionResult JobCostingPartial()
        {
            return View();
        }
        public ActionResult JobCostingPartialList()
        {
            return View();
        }
        #endregion
        #region Labour Costing
        public ActionResult LaborCostingPartial()
        {
            return View();
        }
        public ActionResult LaborCostingPartialList()
        {
            return View();
        }
        #endregion
        #region Labour Costing
        public ActionResult MaterialCostingPartial()
        {
            return View();
        }
        public ActionResult MaterialCostingPartialList()
        {
            return View();
        }
        #endregion
        #region Customer Costing
        public ActionResult CustomerCostingPartial()
        {
            return View();
        }
        public ActionResult CustomerCostingPartialList()
        {
            return View();
        }
        #endregion
        #endregion

        #region Recurring Billing Report
        public ActionResult RecurringBillingReport()
        {
            List<SelectListItem> CycleList = new List<SelectListItem>();
            CycleList.Add(new SelectListItem()
            {
                Text = "Select Cycle",
                Value = "-1"
            });
            CycleList.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("RecurringBillingCycle").OrderBy(x => x.DisplayText != "Select One").ThenBy(x => x.DisplayText).Select(x =>
                          new SelectListItem()
                          {
                              Text = x.DisplayText.ToString(),
                              Value = x.DataValue.ToString()
                          }).ToList());
            ViewBag.Cycle = CycleList;

            List<SelectListItem> PaymentMethodList = new List<SelectListItem>();
            //CycleList.Add(new SelectListItem()
            //{
            //    Text = "Select Cycle",
            //    Value = "-1"
            //});
            PaymentMethodList.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("PaymentMethod").OrderBy(x => x.DisplayText != "Select One").ThenBy(x => x.DataValue).Select(x =>
                          new SelectListItem()
                          {
                              Text = x.DisplayText.ToString(),
                              Value = x.DataValue.ToString()
                          }).ToList());
            PaymentMethodList.RemoveAt(0);
            ViewBag.PaymentMethod = PaymentMethodList;

            return View();
        }
        public ActionResult RecurringBillingReportList(string SearchText, string Cycle, string Method, DateTime? Start, DateTime? End, int PageNo, int PageSize, string Order)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (!string.IsNullOrWhiteSpace(Method))
            {
                string[] splituser = Method.Split(',');
                if (splituser.Length > 0)
                {
                    Method = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime();
                    EndDate = CookieVals[1].ToDateTime();
                }
            }

            RecurringBillingScheduleReportModel Model = new RecurringBillingScheduleReportModel();
            Model = _Util.Facade.CustomerFacade.GetRecurringBilliingScheduleForReport(SearchText, Cycle, Method, Start, End, PageNo, PageSize, Order);

            ViewBag.PageNumber = PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Count.TotalRecurringBillingSchedule > 0)
            {
                ViewBag.OutOfNumber = Model.Count.TotalRecurringBillingSchedule;
            }

            if ((int)ViewBag.PageNumber * PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / PageSize);

            return View(Model);
        }
        public ActionResult DownloadRecurringBillingReport(string SearchText, string Cycle, string Method, DateTime? Start, DateTime? End, int PageNo, int PageSize, string Order)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            if (!string.IsNullOrWhiteSpace(Method))
            {
                string[] splituser = Method.Split(',');
                if (splituser.Length > 0)
                {
                    Method = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }

            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime();
                    EndDate = CookieVals[1].ToDateTime();
                }
            }

            DataTable dt;
            dt = _Util.Facade.CustomerFacade.DownloadRecurringBillingReport(SearchText, Cycle, Method, Start, End, PageNo, PageSize, Order);
            return MakeExcelFromDataTable(dt, "RecurringBillingReport", null, null);
        }
        #endregion

        #region All Records Report
        public ActionResult AllRecordsReport()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));


            List<SelectListItem> ParentSourceList = new List<SelectListItem>();
            ParentSourceList.AddRange(_Util.Facade.CustomerFacade.GetParentSourceByDataKey("LeadSource").OrderBy(x => x.Name.ToString() != "-1").ThenBy(x => string.Format("{0}", x.Name.ToString())).Select(x => new SelectListItem()
            {
                Text = x.Name.ToString(),
                Value = x.Name.ToString()
            }).ToList());
            ParentSourceList.RemoveAt(0);
            ViewBag.ParentSource = ParentSourceList;

            List<SelectListItem> IsLeadList = new List<SelectListItem>();
            IsLeadList.Add(new SelectListItem()
            {
                Text = "Select One",
                Value = "-1"
            });
            IsLeadList.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("IsLead").Select(x =>
                          new SelectListItem()
                          {
                              Text = x.DisplayText.ToString(),
                              Value = x.DataValue.ToString()
                          }).ToList());
            ViewBag.IsLead = IsLeadList;

            List<SelectListItem> LeadSourceList = new List<SelectListItem>();
            LeadSourceList.AddRange(_Util.Facade.LookupFacade.GetLookupByKeyWithParent("LeadSource").Select(x => new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DataValue.ToString()
            }).ToList());
            LeadSourceList.RemoveAt(0);
            ViewBag.LeadSource = LeadSourceList;

            List<SelectListItem> LeadSourceTypeList = new List<SelectListItem>();
            LeadSourceTypeList.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("LeadSourceType").OrderBy(x => x.DisplayText != "Select One").ThenBy(x => x.DisplayText).Select(x =>
                          new SelectListItem()
                          {
                              Text = x.DisplayText.ToString(),
                              Value = x.DataValue.ToString()
                          }).ToList());
            LeadSourceTypeList.RemoveAt(0);
            ViewBag.LeadSourceType = LeadSourceTypeList;

            List<SelectListItem> StatusList = new List<SelectListItem>();
            StatusList.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("LeadStatus").Select(x => new SelectListItem()
            {
                Text = x.DisplayText.ToString(),
                Value = x.DisplayText.ToString()
            }).ToList());
            ViewBag.LeadStatus = StatusList;

            List<SelectListItem> SalesPersonList = new List<SelectListItem>();
            SalesPersonList.AddRange(_Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(currentLoggedIn.CompanyId.Value, LabelHelper.UserTags.SalesPerson, new Guid()).OrderBy(x => x.UserId.ToString() != "-1").ThenBy(x => string.Format("{0}", x.FirstName.ToString() + " " + x.LastName.ToString())).Select(x => new SelectListItem()
            {
                Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                Value = x.UserId.ToString()
            }).ToList());
            ViewBag.SalesPerson = SalesPersonList;

            List<SelectListItem> CustomerStatus = new List<SelectListItem>();
            CustomerStatus.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("CustomerStatus1").Select(x =>
                          new SelectListItem()
                          {
                              Text = x.DisplayText.ToString(),
                              Value = x.DataValue.ToString(),

                          }).ToList());
            ViewBag.CustomerStatus = CustomerStatus;

            List<SelectListItem> SalesCommisssion = new List<SelectListItem>();
            SalesCommisssion.AddRange(_Util.Facade.LookupFacade.GetLookupByKey("CommissionType").Select(x =>
                        new SelectListItem()
                        {
                            Text = x.DisplayText.ToString(),
                            Value = x.DataValue.ToString()
                        }).ToList());
            SalesCommisssion.RemoveAt(0);
            ViewBag.SalesLocation = SalesCommisssion;

            return View();
        }
        public ActionResult AllRecordsReportList(AllRecords filter)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (!string.IsNullOrWhiteSpace(filter.LeadSource))
            {
                string[] splituser = filter.LeadSource.Split(',');
                if (splituser.Length > 0)
                {
                    filter.LeadSource = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.LeadSourceType))
            {
                string[] splituser = filter.LeadSourceType.Split(',');
                if (splituser.Length > 0)
                {
                    filter.LeadSourceType = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.LeadStatus))
            {
                string[] splituser = filter.LeadStatus.Split(',');
                if (splituser.Length > 0)
                {
                    filter.LeadStatus = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.CustomerStatus))
            {
                string[] splituser = filter.CustomerStatus.Split(',');
                if (splituser.Length > 0)
                {
                    filter.CustomerStatus = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.SalesLocation))
            {
                string[] splituser = filter.SalesLocation.Split(',');
                if (splituser.Length > 0)
                {
                    filter.SalesLocation = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.SalesPerson))
            {
                string[] splituser = filter.SalesPerson.Split(',');
                if (splituser.Length > 0)
                {
                    filter.SalesPerson = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.ParentSource))
            {
                string[] splituser = filter.ParentSource.Split(',');
                if (splituser.Length > 0)
                {
                    filter.ParentSource = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }
            ViewBag.StartDate = filter.Start;
            ViewBag.EndDate = filter.End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime();
                    EndDate = CookieVals[1].ToDateTime();
                }
            }

            AllRecordsReportModel Model = new AllRecordsReportModel();
            Model = _Util.Facade.CustomerFacade.GetAllRecordsForReport(filter);

            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Total.TotalRecord > 0)
            {
                ViewBag.OutOfNumber = Model.Total.TotalRecord;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize);

            return View(Model);
        }
        public ActionResult DownloadAllRecordsReport(AllRecords filter)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            if (!string.IsNullOrWhiteSpace(filter.LeadSource))
            {
                string[] splituser = filter.LeadSource.Split(',');
                if (splituser.Length > 0)
                {
                    filter.LeadSource = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.LeadSourceType))
            {
                string[] splituser = filter.LeadSourceType.Split(',');
                if (splituser.Length > 0)
                {
                    filter.LeadSourceType = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.LeadStatus))
            {
                string[] splituser = filter.LeadStatus.Split(',');
                if (splituser.Length > 0)
                {
                    filter.LeadStatus = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.CustomerStatus))
            {
                string[] splituser = filter.CustomerStatus.Split(',');
                if (splituser.Length > 0)
                {
                    filter.CustomerStatus = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.SalesLocation))
            {
                string[] splituser = filter.SalesLocation.Split(',');
                if (splituser.Length > 0)
                {
                    filter.SalesLocation = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.SalesPerson))
            {
                string[] splituser = filter.SalesPerson.Split(',');
                if (splituser.Length > 0)
                {
                    filter.SalesPerson = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.ParentSource))
            {
                string[] splituser = filter.ParentSource.Split(',');
                if (splituser.Length > 0)
                {
                    filter.ParentSource = string.Format("'{0}'", string.Join("','", splituser.Select(i => i.Replace("'", "''"))));
                }
            }
            ViewBag.StartDate = filter.Start;
            ViewBag.EndDate = filter.End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime();
                    EndDate = CookieVals[1].ToDateTime();
                }
            }

            DataTable dt;
            dt = _Util.Facade.CustomerFacade.DownloadAllRecordsReport(filter);
            return MakeExcelFromDataTable(dt, "AllRecordsReport", null, null);
        }
        #endregion

        #region Move Customer Report
        public ActionResult MoveCustomerReportPartial()
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            return View();
        }
        public ActionResult MoveCustomerReportList(MoveCustomer filter)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = filter.Start;
            ViewBag.EndDate = filter.End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime();
                    EndDate = CookieVals[1].ToDateTime();
                }
            }

            MoveCustomerReportModel Model = new MoveCustomerReportModel();
            Model = _Util.Facade.CustomerFacade.GetAllMoveCustomerRecordsForReport(filter);

            ViewBag.PageNumber = filter.PageNo;
            ViewBag.OutOfNumber = 0;
            ViewBag.order = null;
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }
            if (Model.Total.TotalRecord > 0)
            {
                ViewBag.OutOfNumber = Model.Total.TotalRecord;
            }

            if ((int)ViewBag.PageNumber * filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / filter.PageSize);

            return View(Model);
        }
        public ActionResult DownloadAllMoveCustomerRecord(MoveCustomer filter)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            ViewBag.StartDate = filter.Start;
            ViewBag.EndDate = filter.End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime();
                    EndDate = CookieVals[1].ToDateTime();
                }
            }

            DataTable dt;
            dt = _Util.Facade.CustomerFacade.DownloadAllMoveCustomerRecordsReport(filter);
            return MakeExcelFromDataTable(dt, "MoveCustomerReport", null, null);
        }
        [HttpPost]
        public JsonResult UnlinkCustomer(int Id, string Value)
        {
            bool result = false;
            var CurrentUser = (HS.Web.UI.Helper.CustomPrincipal)User;
            Customer Customer = _Util.Facade.CustomerFacade.GetCustomerById(Id);
            if (Customer != null)
            {
                CustomerExtended CustomerEx = _Util.Facade.CustomerFacade.GetCustomerExtendedByCustomerId(Customer.CustomerId);
                if (CustomerEx != null)
                {
                    CustomerEx.UnlinkCustomer = Value.ToBool();
                    result = _Util.Facade.CustomerFacade.UpdateCustomerExtended(CustomerEx);
                }
            }
            return Json(result);
        }
        #endregion

        #region Inventory Download
        public ActionResult FilterEquipmentsListDownload(FilterEquipment _FilterEquipment)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            _FilterEquipment.EmployeeRole = "";
            List<string> activestatus = new List<string>();
            if (!string.IsNullOrWhiteSpace(_FilterEquipment.ActiveInactiveStatus))
            {
                string[] splituser = _FilterEquipment.ActiveInactiveStatus.Split(',');
                if (splituser.Length > 0)
                {
                    _FilterEquipment.ActiveInactiveStatus = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {
                        activestatus.Add(item);
                    }
                }
            }
            if (string.IsNullOrWhiteSpace(currentLoggedIn.UserRole) && currentLoggedIn.UserId != new Guid())
            {
                var objEmpRole = _Util.Facade.EmployeeFacade.GetEmployeeRoleByEmployeeIdAndCompanyId(currentLoggedIn.UserId, currentLoggedIn.CompanyId.Value);
                _FilterEquipment.EmployeeRole = objEmpRole.Name;
            }
            else if (!string.IsNullOrWhiteSpace(currentLoggedIn.UserRole))
            {
                _FilterEquipment.EmployeeRole = currentLoggedIn.UserRole;
            }
            _FilterEquipment.CompanyId = currentLoggedIn.CompanyId.Value;
            _FilterEquipment.GridList = _Util.Facade.GridSettingsFacade.GetByKey("InventoryGrid", currentLoggedIn.CompanyId.Value);
            DataTable dt;
            dt = _Util.Facade.InventoryFacade.FilterEquipmentsListDownload(_FilterEquipment);
            #region currency
            int[] colarray = new int[] { };
            var tempList = colarray.ToList();

            var gridSettings = _Util.Facade.GridSettingsFacade.GetByKey("InventoryGrid", currentLoggedIn.CompanyId.Value).Where(x => x.IsActive == true).ToList();
            if (gridSettings != null && gridSettings.Count > 0)
            {
                int counter = 2;
                for (int i = 1; i < gridSettings.Count; i++)
                {

                    if (gridSettings[i].SelectedColumn == "Primary Vendor Cost")
                    {
                        tempList.Add(i + counter);
                        colarray = tempList.ToArray();
                    }
                    if (gridSettings[i].SelectedColumn == "Rep Cost")
                    {
                        tempList.Add(i + counter);
                        colarray = tempList.ToArray();
                    }
                    if (gridSettings[i].SelectedColumn == "Retail Price")
                    {
                        tempList.Add(i + counter);
                        colarray = tempList.ToArray();
                    }
                    if (gridSettings[i].SelectedColumn == "On Hand Qty")
                    {
                        counter = counter + 8;
                    }
                }
            }

            int[] rowarray = { dt.Rows.Count + 2 };
            return MakeExcelFromDataTable(dt, "InventoryRecords", rowarray, colarray);
            #endregion
        }
        #endregion

        #region Activity Download
        public ActionResult DownloadAllCustomerActivity(ActivityFilter filter)
        {
            var currentLoggedIn = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            //ViewBag.StartDate = filter.Start;
            //ViewBag.EndDate = filter.End;
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime();
                    EndDate = CookieVals[1].ToDateTime();
                }
            }

            DataTable dt;
            if (!currentLoggedIn.UserTags.Contains("admin"))
            {
                filter.AssignToId = currentLoggedIn.UserId;
                dt = _Util.Facade.ActivityFacade.GetAllActivityForExport(filter);
            }
            else
            {
                dt = _Util.Facade.ActivityFacade.GetAllActivityForExport(filter);
            }

            return MakeExcelFromDataTable(dt, "Activities", null, null);
        }

        #endregion

        #region Installed Deals
        public ActionResult InstalledDealsReport()
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            List<Employee> EmpList = _Util.Facade.EmployeeFacade.GetAllEmployee(CurrentUser.CompanyId.Value).OrderBy(x => x.FirstName).ToList();
            var emplst = EmpList.Select(x =>
                new SelectListItem()
                {
                    Text = x.FirstName + " " + x.LastName,
                    Value = x.UserId.ToString(),
                }).ToList();

            ViewBag.EmployeeList = emplst;

            List<SelectListItem> Technician = new List<SelectListItem>();
            var TechnicianList = _Util.Facade.EmployeeFacade.GetEmployeeByCompanyIdAndTag(CurrentUser.CompanyId.Value, LabelHelper.UserTags.Technicians, new Guid());
            if (TechnicianList != null && TechnicianList.Count > 0)
            {
                Technician.AddRange(TechnicianList.OrderBy(x => x.FirstName).Select(x => new SelectListItem()
                {
                    Text = x.FirstName.ToString() + " " + x.LastName.ToString(),
                    Value = x.UserId.ToString()
                }).ToList());
            }
            ViewBag.TechnicianList = Technician;
            return View();
        }

        public ActionResult InstalledDealsReportList(bool? GetReport, string Start, string End, string searchtext, int pageno, int pagesize, string order, string SalesList, string InstallerList)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";

            List<string> SalesPerson = new List<string>();
            if (!string.IsNullOrWhiteSpace(SalesList))
            {
                string[] splituser = SalesList.Split(',');
                if (splituser.Length > 0)
                {
                    SalesList = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {

                        SalesPerson.Add(item);
                    }
                }
            }
            List<string> Installer = new List<string>();
            if (!string.IsNullOrWhiteSpace(InstallerList))
            {
                string[] splituser = InstallerList.Split(',');
                if (splituser.Length > 0)
                {
                    InstallerList = string.Format("{0}", string.Join(",", splituser));
                    foreach (var item in splituser)
                    {

                        Installer.Add(item);
                    }
                }
            }

            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            if (GetReport.HasValue && GetReport.Value == true)
            {
                DataTable dt = _Util.Facade.CustomerFacade.GetInstalledDealReportsListForDownload(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, SalesPerson, Installer);
                dt.Columns.Remove("Id");
                dt.Columns.Remove("TotalSales");
                int[] colarray = { 10, 11, 12, 13, 14, 15, 16, 17 };
                int[] rowarray = { dt.Rows.Count + 2 };
                return MakeExcelFromDataTable(dt, "Installed Deals", rowarray, colarray);
            }
            NewSalesCustomerModel model = new NewSalesCustomerModel();


            model = _Util.Facade.CustomerFacade.GetInstalledDealReportList(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, pageno, pagesize, order, SalesPerson, Installer);


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            if (model.Totalcount > 0)
            {
                ViewBag.OutOfNumber = model.Totalcount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(model);
        }

        #endregion
        #region Service Sales Tab
        public ActionResult LoadServiceSalesReport()
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            ViewBag.PackageTypeList = _Util.Facade.LookupFacade.GetDropdownsByKey("SmartPackageType");

            return View();
        }

        public ActionResult ServiceSalesReportList(bool? GetReport, string Start, string End, string searchtext, string filtertext, int pageno, int pagesize, string order, string SalesList, string InstallerList)
        {
            ViewBag.StartDate = Start;
            ViewBag.EndDate = End;
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            string newCookie = "";

            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime().SetZeroHour();
                    EndDate = CookieVals[1].ToDateTime().SetMaxHour();
                }
            }
            //if (GetReport.HasValue && GetReport.Value == true)
            //{
            //    DataTable dt = _Util.Facade.CustomerFacade.GetInstalledDealReportsListForDownload(CurrentUser.CompanyId.Value, StartDate, EndDate, searchtext, SalesPerson, Installer);
            //    dt.Columns.Remove("Id");
            //    dt.Columns.Remove("TotalSales");
            //    int[] colarray = { 10, 11, 12, 13, 14, 15, 16, 17 };
            //    int[] rowarray = { dt.Rows.Count + 2 };
            //    return MakeExcelFromDataTable(dt, "Installed Deals", rowarray, colarray);
            //}
            ServiceSalesModel model = new ServiceSalesModel();


            model = _Util.Facade.CustomerFacade.GetServiceSalesReportList(StartDate, EndDate, searchtext, filtertext, pageno, pagesize);


            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            if (model.Totalcount > 0)
            {
                ViewBag.OutOfNumber = model.Totalcount;
            }

            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);
            return View(model);
        }
        #endregion
        #region RMR Report Section
        public ActionResult RMRReports()
        {
            return View();
        }
        #region RMR History Report
        public ActionResult RMRAuditPartial()
        {
            ViewBag.EndDate = DateTime.Now;
            return View();
        }
        public ActionResult RMRAuditPartialList(RMRAuditFilter Filter)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            Filter.CompanyId = CurrentUser.CompanyId.Value;

            if (Filter.GetReport.HasValue && Filter.GetReport.Value == true)
            {
                //DataTable dt = _Util.Facade.CustomerFacade.DownloadRMRAuditListByCompanyId(Filter);
                //dt.Columns.Remove("Id");
                //dt.Columns.Remove("CustomerIntId");
                //return MakeExcelFromDataTable(dt, "RMR History", null, null);
            }

            RMRAuditModel model = new RMRAuditModel();
            model = _Util.Facade.CustomerFacade.GetRMRAuditList(Filter);


            ViewBag.PageNumber = Filter.PageNo;
            ViewBag.OutOfNumber = 0;
            if (model.Totalcount > 0)
            {
                ViewBag.OutOfNumber = model.Totalcount;
            }

            if ((int)ViewBag.PageNumber * Filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filter.PageSize);
            return View(model);
        }
        #endregion

        #region RMR Invoice Report
        public ActionResult RMRInvoicePartial()
        {
            return View();
        }
        public ActionResult RMRInvoicePartialList(RMRFilter Filter)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            Filter.CompanyId = CurrentUser.CompanyId.Value;

            if (Filter.GetReport.HasValue && Filter.GetReport.Value == true)
            {
                DataTable dt = _Util.Facade.CustomerFacade.DownloadRMRInvoiceListByCompanyId(Filter);
                dt.Columns.Remove("Id");
                dt.Columns.Remove("CustomerIntId");
                return MakeExcelFromDataTable(dt, "RMR Invoice", null, null);
            }

            RMRInvoiceModel model = new RMRInvoiceModel();
            model = _Util.Facade.CustomerFacade.GetRMRInvoiceListByCompanyId(Filter);


            ViewBag.PageNumber = Filter.PageNo;
            ViewBag.OutOfNumber = 0;
            if (model.Total > 0)
            {
                ViewBag.OutOfNumber = model.Total;
            }

            if ((int)ViewBag.PageNumber * Filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filter.PageSize);
            return View(model);
        }
        #endregion

        #region RMR History Report
        public ActionResult RMRHistoryPartial()
        {
            return View();
        }
        public ActionResult RMRHistoryPartialList(RMRFilter Filter)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            Filter.CompanyId = CurrentUser.CompanyId.Value;

            if (Filter.GetReport.HasValue && Filter.GetReport.Value == true)
            {
                DataTable dt = _Util.Facade.CustomerFacade.DownloadRMRHistoryListByCompanyId(Filter);
                dt.Columns.Remove("Id");
                dt.Columns.Remove("CustomerIntId");
                return MakeExcelFromDataTable(dt, "RMR History", null, null);
            }

            RMRHistoryModel model = new RMRHistoryModel();
            model = _Util.Facade.CustomerFacade.GetRMRHistoryListByCompanyId(Filter);


            ViewBag.PageNumber = Filter.PageNo;
            ViewBag.OutOfNumber = 0;
            if (model.Total > 0)
            {
                ViewBag.OutOfNumber = model.Total;
            }

            if ((int)ViewBag.PageNumber * Filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filter.PageSize);
            return View(model);
        }
        #endregion

        #region RMR Log Report
        public ActionResult RMRLogPartial()
        {
            return View();
        }
        public ActionResult RMRLogPartialList(RMRFilter Filter, string order, string logstartdate, string logenddate, int pageno, int pagesize, string SearchText)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            List<string> invstatus = new List<string>();

            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime();
                    EndDate = CookieVals[1].ToDateTime();
                }
            }

            UserActivityCustomerModel Model = _Util.Facade.CustomerFacade.GetAllUserActivityForRMRCustomerList(pageno, pagesize, StartDate, EndDate, SearchText, order, logstartdate, logenddate);

            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.orderval = order;
            ViewBag.Logstartdate = logstartdate;
            ViewBag.Logenddate = logenddate;
            if (!string.IsNullOrWhiteSpace(SearchText) && SearchText != "undefined")
            {
                ViewBag.searchtxt = SearchText;
            }
            else
            {
                ViewBag.searchtxt = "";
            }
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }

            if (Model.ListUserActivity != null && Model.ListUserActivity.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.InvoiceReportCountModel.TotalCount;
            }


            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.Totalpagesize = (int)ViewBag.PageNumber * pagesize;
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);

            List<SelectListItem> statusinv = new List<SelectListItem>();
            statusinv.Add(new SelectListItem()
            {
                Text = "Paid",
                Value = "Paid"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Open",
                Value = "Open"
            });
            statusinv.Add(new SelectListItem()
            {
                Text = "Partial",
                Value = "Partial"
            });
            ViewBag.statusinv = statusinv;
            return View("RMRLogPartialList", Model);
        }
        public ActionResult DownloadRMRLogPartialList(string order, DateTime? logstartdate, DateTime? logenddate, string SearchText)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            DataTable dt;


            if (logstartdate != new DateTime() && logenddate != new DateTime())
            {
                dt = _Util.Facade.CustomerFacade.GetAllUserActivityForRMRCustomerListExport(CurrentUser.CompanyId.Value, SearchText, logstartdate, logenddate);
            }
            else
            {
                dt = _Util.Facade.CustomerFacade.GetAllUserActivityForRMRCustomerListExport(CurrentUser.CompanyId.Value, SearchText, logstartdate, logenddate);
            }



            return MakeExcelFromDataTable(dt, "RMRLogReport", null, null);
        }
        #endregion

        #region RMR Credit Report
        public ActionResult RMRCreditPartial()
        {
            return View();
        }
        public ActionResult RMRCreditPartialList(RMRFilter Filter, string order, string logstartdate, string logenddate, int pageno, int pagesize, string SearchText)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            DateTime StartDate = new DateTime();
            DateTime EndDate = new DateTime();
            List<string> invstatus = new List<string>();

            string newCookie = "";
            if (Request.Cookies[CookieKeys.DateViewFilter] != null && !string.IsNullOrWhiteSpace(Request.Cookies[CookieKeys.DateViewFilter].Value))
            {
                newCookie = Request.Cookies[CookieKeys.DateViewFilter].Value;
                newCookie = Server.UrlDecode(newCookie);
                var CookieVals = newCookie.Split(',');

                if (CookieVals.Length == 3)
                {
                    StartDate = CookieVals[0].ToDateTime();
                    EndDate = CookieVals[1].ToDateTime();
                }
            }

            RMRCreditModel Model = _Util.Facade.CustomerFacade.GetAllRMRCreditList(pageno, pagesize, StartDate, EndDate, SearchText, order, logstartdate, logenddate); ;

            ViewBag.PageNumber = pageno;
            ViewBag.OutOfNumber = 0;
            ViewBag.orderval = order;
            ViewBag.Logstartdate = logstartdate;
            ViewBag.Logenddate = logenddate;
            if (!string.IsNullOrWhiteSpace(SearchText) && SearchText != "undefined")
            {
                ViewBag.searchtxt = SearchText;
            }
            else
            {
                ViewBag.searchtxt = "";
            }
            if (ViewBag.order == null)
            {
                ViewBag.order = 0;
            }

            if (Model.RMRCreditList != null && Model.RMRCreditList.Count() > 0)
            {
                ViewBag.OutOfNumber = Model.TotalRMRCredit.TotalCount;
            }


            if ((int)ViewBag.PageNumber * pagesize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * pagesize;
            }
            ViewBag.Totalpagesize = (int)ViewBag.PageNumber * pagesize;
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / pagesize);

           
            return View(Model);
        }

        public ActionResult DownloadRMRCreditPartialList(string order, DateTime? logstartdate, DateTime? logenddate, string SearchText)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            DataTable dt;


            if (logstartdate != new DateTime() && logenddate != new DateTime())
            {
                dt = _Util.Facade.CustomerFacade.GetAllRMRCreditListExport(CurrentUser.CompanyId.Value, SearchText, logstartdate, logenddate);
            }
            else
            {
                dt = _Util.Facade.CustomerFacade.GetAllRMRCreditListExport(CurrentUser.CompanyId.Value, SearchText, logstartdate, logenddate);
            }



            return MakeExcelFromDataTable(dt, "RMRLogReport", null, null);
        }
        #endregion

        #endregion

        #region History Report Section
        public ActionResult HistoryReports()
        {
            return View();
        }

        #region Credit History Report
        public ActionResult CreditHistoryPartial()
        {
            return View();
        }
        public ActionResult CreditHistoryPartialList(CreditHistoryFilter Filter)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            Filter.CompanyId = CurrentUser.CompanyId.Value;

            if (Filter.GetReport.HasValue && Filter.GetReport.Value == true)
            {
                DataTable dt = _Util.Facade.CustomerFacade.DownloadCreditHistoryListByCompanyId(Filter);
                dt.Columns.Remove("Id");
                return MakeExcelFromDataTable(dt, "Credit History", null, null);
            }

            CreditHistoryModel model = new CreditHistoryModel();
            model = _Util.Facade.CustomerFacade.GetCreditHistoryListByCompanyId(Filter);


            ViewBag.PageNumber = Filter.PageNo;
            ViewBag.OutOfNumber = 0;
            if (model.Total > 0)
            {
                ViewBag.OutOfNumber = model.Total;
            }

            if ((int)ViewBag.PageNumber * Filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filter.PageSize);
            return View(model);
        }
        #endregion

        #region SMS History Report
        public ActionResult SMSHistoryPartial()
        {
            return View();
        }
        public ActionResult SMSHistoryPartialList(SMSHistoryFilter Filter)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            Filter.CompanyId = CurrentUser.CompanyId.Value;

            if (Filter.GetReport.HasValue && Filter.GetReport.Value == true)
            {
                DataTable dt = _Util.Facade.CustomerFacade.DownloadSMSHistoryListByCompanyId(Filter);
                return MakeExcelFromDataTable(dt, "SMS History", null, null);
            }

            SMSHistoryReportModel model = new SMSHistoryReportModel();
            model = _Util.Facade.CustomerFacade.GetSMSHistoryListByCompanyId(Filter);


            ViewBag.PageNumber = Filter.PageNo;
            ViewBag.OutOfNumber = 0;
            if (model.Total > 0)
            {
                ViewBag.OutOfNumber = model.Total;
            }

            if ((int)ViewBag.PageNumber * Filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filter.PageSize);
            return View(model);
        }
        #endregion

        #endregion

        #region Sales Person
        public ActionResult SalesPersonReport()
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));

            return View();
        }
        public ActionResult SalesPersonReportList(SalesPersonFilter Filter)
        {
            var CurrentUser = ((HS.Web.UI.Helper.CustomPrincipal)(User));
            Filter.CompanyId = CurrentUser.CompanyId.Value;

            if (Filter.GetReport.HasValue && Filter.GetReport.Value == true)
            {
                DataTable dt = _Util.Facade.CustomerFacade.DownloadSalesPersonListByCompanyId(Filter);
                return MakeExcelFromDataTable(dt, "Sales Person Report", null, null);
            }

            SalesPersonReportModel model = new SalesPersonReportModel();
            model = _Util.Facade.CustomerFacade.GetSalesPersonListByCompanyId(Filter);


            ViewBag.PageNumber = Filter.PageNo;
            ViewBag.OutOfNumber = 0;
            if (model.Total > 0)
            {
                ViewBag.OutOfNumber = model.Total;
            }

            if ((int)ViewBag.PageNumber * Filter.PageSize > (int)ViewBag.OutOfNumber)
            {
                ViewBag.CurrentNumber = (int)ViewBag.OutOfNumber;
            }
            else
            {
                ViewBag.CurrentNumber = (int)ViewBag.PageNumber * Filter.PageSize;
            }
            ViewBag.PageCount = Math.Ceiling((double)ViewBag.OutOfNumber / Filter.PageSize);
            return View(model);
        }
        #endregion
    }
}