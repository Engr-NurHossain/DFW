using HS.Entities;
using HS.Framework;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;

namespace HS.DataAccess
{
    public partial class CustomerDataAccess
    {
        public CustomerDataAccess(string ConnectionStr) : base(ConnectionStr) { }
        public CustomerDataAccess() { }
        public DataTable GetLeadNameByLeadId(int leadid)
        {
            string sqlQuery = @"select cus.FirstName+' '+cus.LastName LeadName
                                from customer cus
                                join CustomerCompany cc
                                on cc.CustomerId=cus.CustomerId
                                where cus.Id='{0}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, leadid);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public List<Customer> GetBilledCustomer(int InvoicePullingDays = 5)
        {
            string sqlQuery = @"select * from Customer where CustomerId in 
                                (
                                select customerid
                                from Invoice
                                where Status !='Paid' and Status != 'Declined' and Status != 'Init'
                                and CreatedDate > '{0}'
                                and IsARBInvoice = 1
                                )";
            try
            {
                sqlQuery = string.Format(sqlQuery, DateTime.Today.AddDays((InvoicePullingDays * -1)).ToString("yyyy-MM-dd 00:00:00"));
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    return GetList(cmd, -1);
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public List<Customer> GetACHAndCCSubscribedCustomer()
        {

            int MonthVal = DateTime.Now.Month;
            int DateVal = DateTime.Now.Day;

            string DaysToPull = DateTime.Now.Day.ToString();

            if (MonthVal == 2 && DateVal == 28)
            {
                //For February we will pull all customer with start date 28,29,30,31
                DaysToPull = "28,29,30,31";
            }
            else if (MonthVal == 2 && DateVal == 28)
            {
                return null;
                // as we handled 29th february on the last line
            }
            if ((MonthVal == 4 || MonthVal == 6 || MonthVal == 9 || MonthVal == 11) && DateVal == 30)
            {
                //For April, June,September, November we will generate 31st invoice on the 30th
                DaysToPull = "30,31";
            }


            #region WeekDay
            int WeekDay = 1;
            if (DateTime.Now.DayOfWeek == DayOfWeek.Sunday)
            {
                WeekDay = 1;
            }
            else if (DateTime.Now.DayOfWeek == DayOfWeek.Monday)
            {
                WeekDay = 2;
            }
            else if (DateTime.Now.DayOfWeek == DayOfWeek.Tuesday)
            {
                WeekDay = 3;
            }
            else if (DateTime.Now.DayOfWeek == DayOfWeek.Wednesday)
            {
                WeekDay = 4;
            }
            else if (DateTime.Now.DayOfWeek == DayOfWeek.Thursday)
            {
                WeekDay = 5;
            }
            else if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
            {
                WeekDay = 6;
            }
            else if (DateTime.Now.DayOfWeek == DayOfWeek.Saturday)
            {
                WeekDay = 7;
            }

            #endregion

            string sqlQuery = @"select 
                                --JoinDate,
                                --DAY(JoinDate) Day,
                                --DATEPART(dw,JoinDate) as WeekDate,
                                --DATENAME(dw,JoinDate) as [WeekDay],
                                --BillCycle,
                                * from Customer
	                                where (PaymentMethod = 'ACH' OR PaymentMethod = 'CreditCard' OR PaymentMethod = 'Credit Card')
	                                and FirstBilling is not null
                                    and FirstBilling <= '{2}'
	                                and BillAmount is not null
	                                and BillAmount > 0
                                    and MonthlyMonitoringFee != ''
                                    and SubscriptionStatus = 'active'
	                                and ((BillCycle in ('Monthly','Bi-Monthly','Quarterly','Semi-Annually','Annually') and  DAY(FirstBilling) in({0}) )
		                                OR ( BillCycle in('Weekly') AND DATEPART(dw,FirstBilling) = {1} ))
	                                and (CustomerToken != ''   OR AuthorizeRefId != '' ) ";
            try
            {
                sqlQuery = string.Format(sqlQuery, DaysToPull, WeekDay, DateTime.Now.ToString("yyyy-MM-dd"));
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    return GetList(cmd, -1);
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public Customer GetCustomerByPhoneNumberAndEmail(string primaryPhone, string secondaryPhone, string cellNo, string email)
        {
            //string sqlQuery = @" (REPLACE(PrimaryPhone,'-','') = '{0}' OR
            //                    REPLACE(SecondaryPhone,'-','') = '{1}' OR 
            //                    REPLACE(CellNo,'-','') = '{2}')  ";

            string MainQuery = "";
            if (string.IsNullOrWhiteSpace(primaryPhone)
                && string.IsNullOrWhiteSpace(secondaryPhone)
                && string.IsNullOrWhiteSpace(cellNo) || string.IsNullOrWhiteSpace(email))
            {
                return null;
            }
            if (!string.IsNullOrWhiteSpace(primaryPhone))
            {
                MainQuery += string.Format(" REPLACE(PrimaryPhone,'-','') = '{0}'", primaryPhone.Replace("-", ""));
            }
            if (!string.IsNullOrWhiteSpace(secondaryPhone))
            {
                if (MainQuery != "")
                {
                    MainQuery += " OR ";
                }

                MainQuery += string.Format(" REPLACE(SecondaryPhone,'-','') = '{0}'", secondaryPhone.Replace("-", ""));
            }
            if (!string.IsNullOrWhiteSpace(cellNo))
            {
                if (MainQuery != "")
                {
                    MainQuery += " OR ";
                }
                MainQuery += string.Format(" REPLACE(CellNo,'-','') = '{0}'", cellNo.Replace("-", ""));
            }
            if (!string.IsNullOrWhiteSpace(email))
            {
                MainQuery += string.Format(" AND EmailAddress = '{0}' ", email);
            }

            try
            {
                return GetByQuery(MainQuery).FirstOrDefault();
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public bool ReseedCustomerTable()
        {
            string SqlQuery = @"
                                Delete from Customer
                                DBCC CHECKIDENT('Customer', RESEED, 0) 
                                ";
            try
            {
                using (SqlCommand cmd = GetSQLCommand(SqlQuery))
                {

                    ExecuteCommand(cmd);
                }
            }
            catch (Exception ex)
            {
                return false;
            }
            return true;
        }

        public DataTable GetMMRValueListByCompanyId(Guid companyid, int max, int min)
        {
            string sqlQuery = @"select *
                                from MMR mmr
                                where mmr.CompanyId = '{0}'
                                and mmr.Value <= {1} and mmr.Value >= {2}";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyid, max, min);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetCompanyByCustomerId(Guid CustomerID)
        {
            string sqlQuery = @"select top 1 Com.* from CustomerCompany CC
                                    left join Company Com
                                    on Com.CompanyId = cc.CompanyId
                                    where cc.CustomerId = '{0}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, CustomerID);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        //[Shariful-26-9-19]
        public DataTable GetCustomerInfoWithCompanyByCustomerId(Guid CustomerID)
        {
            string sqlQuery = @"select top 1
                                Cus.Id as CusId,Cus.FirstName,Cus.LastName,Cus.EmailAddress as CustomerEmailAddress,
                                Cus.Address as CustomerAddress,Cus.PrimaryPhone,Cus.SecondaryPhone,
                                Cus.Street as CustomerStreet,Cus.City as CustomerCity,Cus.State as CustomerState,Cus.ZipCode as CustomerZipCode,
                                Com.Address as CompanyAddress,Com.CompanyName,Com.CompanyLogo,
                                Com.Street as CompanyStreet,Com.City as CompanyCity,Com.State as CompanyState,Com.ZipCode as CompanyZipCode,
                                Com.EmailAdress as CompanyEmailAddress,Com.Fax,Com.Phone,Com.Website
                                from Customer Cus
									left join CustomerCompany CusCom
									on Cus.CustomerId=CusCom.CustomerId
									left join Company Com
									on CusCom.CompanyId=Com.CompanyId
                                    where Cus.CustomerId = '{0}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, CustomerID);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        //[~Shariful-26-9-19]
        public DataTable IsCustomerAlarmIdExistCheck(int AlarmRefId)
        {
            string sqlQuery = @"select * from customer cus where alarmrefid = '{0}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, AlarmRefId);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable IsCustomerUccExistCheck(string UccRefId)
        {
            string sqlQuery = @"select * from customer cus where UccRefId = '{0}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, UccRefId);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable IsCustomerBrinksExistCheck(string BrinksRefId)
        {
            string sqlQuery = @"select * from customer cus where brinksRefId = '{0}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, BrinksRefId);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public long InsertAgemniCustomer(Customer cus)
        {
            string sqlQuery = @"INSERT [Customer] ( CustomerId, FirstName, LastName, EmailAddress, PrimaryPhone, BusinessName, City, State,ZipCode,Street,Country,HomeVerified,DateofBirth,SecondaryPhone,CellNo,CreatedDate,LastUpdatedDate,CSProvider,RenewalTerm,Website,CreatedByUid,ChildOf,AccessGivenTo,DuplicateCustomer,SoldBy2,SoldBy3,LastUpdatedBy,LastUpdatedByUid,IsActive,JoinDate,ReferringCustomer,BestTimeToCall,SalesDate,MoveCustomerId,SoldBy1,LeadSource,SalesLocation) 
                VALUES ('{1}', N'{2}', N'{3}', N'{4}', '{5}', '{6}', '{7}', '{8}', '{9}', '{10}', '{11}',{12},'{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}','{22}','{23}','{24}','{25}','{26}','{27}','{28}',1,'{29}','{30}','{31}','{32}','{33}','{34}','{35}','{36}')";
            var HomeVerified = 0;

            if (cus.HomeVerified == true)
            {
                HomeVerified = 1;
            }
            if (cus.DateofBirth == new DateTime())
            {
                cus.DateofBirth = null;
            }
            if (cus.SalesDate == new DateTime())
            {
                cus.SalesDate = null;
            }
            if (cus.LastUpdatedDate == new DateTime())
            {
                cus.LastUpdatedDate = cus.CreatedDate;
            }
            try
            {
                sqlQuery = string.Format(sqlQuery,
                    cus.Id,
                    cus.CustomerId,
                    cus.FirstName.ReplaceSpecialQuotation(),
                    cus.LastName.ReplaceSpecialQuotation(),
                    cus.EmailAddress.ReplaceSpecialQuotation(),
                    cus.PrimaryPhone,
                    cus.BusinessName.ReplaceSpecialQuotation(),
                    cus.City,
                    cus.State,
                    cus.ZipCode,
                    cus.Street.ReplaceSpecialQuotation(),
                    cus.Country,
                    HomeVerified,
                    cus.DateofBirth,
                    cus.SecondaryPhone,
                    cus.CellNo,
                    cus.CreatedDate,
                    cus.LastUpdatedDate,
                    cus.CSProvider,
                    cus.RenewalTerm,
                    cus.Website,
                    cus.CreatedByUid,
                    cus.ChildOf,
                    cus.AccessGivenTo,
                    cus.DuplicateCustomer,
                    cus.SoldBy2,
                    cus.SoldBy3,
                    cus.LastUpdatedBy,
                    cus.LastUpdatedByUid,
                    cus.CreatedDate,
                    cus.ReferringCustomer,
                    cus.BestTimeToCall,
                    cus.SalesDate,
                    Guid.Empty,
                    Guid.Empty,
                    cus.LeadSource,
                    cus.SalesLocation);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    cmd.Connection.Open();
                    cmd.ExecuteNonQuery();
                    cmd.Connection.Close();
                    return 1;
                }
            }
            catch (Exception ex)
            {
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    cmd.Connection.Close();
                }
                return 0;
            }
        }

        public DataTable CheckCustomerQueueCancellationById(int id)
        {
            DateTime StartDate = DateTime.Now.UTCCurrentTime();
            DateTime EndDate = DateTime.Now.UTCCurrentTime().AddDays(7);

            string sqlQuery = @"select * from CustomerCancellationQueue 
                                    where Id = '{0}' and (cast(CreatedDate as date) between '{1}' and '{2}') and IsSigned = 1";
            try
            {
                sqlQuery = string.Format(sqlQuery, id, StartDate, EndDate);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetLeadByPaymentinfoID(int ID)
        {
            string sqlQuery = @"select cus.*, cus.PaymentMethod as BillMethod
                                from customer cus
                                join PaymentInfoCustomer pc
                                on pc.CustomerId=cus.CustomerId
                                join PaymentInfo info
                                on pc.PaymentInfoId=info.Id
                                where info.Id='{0}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, ID);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<Customer> GetSubscribedCustomerList(Guid CompanyId)
        {


            string sqlQuery = @"select * FROM Customer cus
                                left join CustomerCompany cc 
                                on cus.CustomerId =cc.CustomerId

                                WHERE 
                                (cus.MonthlyMonitoringFee is not null and CONVERT(float,cus.MonthlyMonitoringFee) > 0)
                                and cus.IsActive =1
                                and cc.IsLead =0
                                and PaymentMethod ='Invoice' 
                                --and PaymentMethod != 'credit card'
                                and cc.CompanyId ='{0}'
                                and cus.BillAmount > 0
                                and (cus.BillCycle is not null and cus.BillCycle != '' and cus.BillCycle !='-1')
                                --and (cus.BillDay is not null and cus.BillDay > 0 and cus.BillDay <32)
                                and (cus.BillDay is not null and cus.BillDay={1})
                                ";
            try
            {
                sqlQuery = string.Format(sqlQuery, CompanyId
                    , DateTime.Today.AddDays(-1).Day);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {

                    return GetList(cmd, -1);
                    //DataSet dsResult = GetDataSet(cmd);
                    //return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public List<Customer> GetCustomerListForRecurringBillingByCompanyId(Guid CompanyId)
        {


            string sqlQuery = @"select * FROM Customer cus
                                join CustomerCompany cc 
                                on cus.CustomerId =cc.CustomerId
                                WHERE 
                                cus.MonthlyMonitoringFee is not null
                                and cus.IsActive =1
                                and cc.CompanyId ='{0}'
                                and cc.IsLead = 0
                                and  ISNULL(cus.BillAmount, 0) > 0
                                and (cus.BillCycle is not null and cus.BillCycle != '' and cus.BillCycle !='-1')
                                ";
            try
            {
                sqlQuery = string.Format(sqlQuery, CompanyId);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {

                    return GetList(cmd, -1);
                    //DataSet dsResult = GetDataSet(cmd);
                    //return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllCustomerForAPI(int id, Guid customerid)
        {

            string IdFilter = " where cc.IsLead = 0";
            if (id > 0)
            {
                IdFilter = "WHERE cus.ID = " + id;
            }
            else if (customerid != Guid.Empty)
            {
                IdFilter = string.Format(" WHERE cus.CustomerId = '{0}' ", customerid);
            }

            string sqlQuery = @"select 
                                cus.id,
                                cus.CustomerId as [guid],
                                firstName, 
                                lastName, 
                                businessName,
                                [type],
                                primaryPhone,
                                secondaryPhone,
                                emailAddress,
                                street,city,[state],zipCode,
                                streetPrevious as street2, CityPrevious as city2, StatePrevious as state2, zipCodePrevious as zipCode2
                                from Customer cus 
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                {0}";


            try
            {
                sqlQuery = string.Format(sqlQuery, IdFilter);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<Customer> GetForteSubscribedCustomerList(Guid CompanyId)
        {


            string sqlQuery = @"select * FROM Customer cus
                                left join CustomerCompany cc 
                                on cus.CustomerId =cc.CustomerId

                                WHERE cus.IsActive =1
                                and cc.IsLead =0
                                and cus.CustomerToken IS Not NULL and cus.CustomerToken  != ''
                              
                                
                                ";
            try
            {
                sqlQuery = string.Format(sqlQuery, CompanyId, DateTime.Today.AddDays(-1).Day);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {

                    return GetList(cmd, -1);
                    //DataSet dsResult = GetDataSet(cmd);
                    //return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }



        public List<Customer> GetARBSubscribedCustomerList()
        {
            int TodaysDate = DateTime.Now.Day;

            string BillDaySql = TodaysDate.ToString();
            if (TodaysDate == 1)
            {
                BillDaySql += " or BillDay is null";
            }

            string sqlQuery = @"select * FROM Customer cus
                                left join CustomerCompany cc 
                                on cus.CustomerId =cc.CustomerId

                                WHERE 
                                (cus.PaymentMethod ='ach' or cus.PaymentMethod = 'credit card')
                                and (cus.BillAmount is not null and cus.BillAmount > 0)
                                --and cus.IsActive =1
                                and cc.IsLead =0
                                --and (BillCycle is not null and BillCycle != '' and BillCycle !='-1')
                                and (AuthorizeRefId is not null and AuthorizeRefId !='')
                                --and (BillDay ={0})
                                ";
            try
            {
                sqlQuery = string.Format(sqlQuery, BillDaySql);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    return GetList(cmd, -1);
                    //DataSet dsResult = GetDataSet(cmd);
                    //return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetDashboardSalesAreaChartData(Guid CompanyId, DateTime Start, DateTime End, string labelvalue, string tag, Guid empid)
        {
            string sqlQuery = @"select 0 as TotalSaleAmount , CAST(cus.CreatedDate AS DATE) as SaleDate, Count(cus.Id) as SaleQuantity 
                                from Customer cus
                                left join CustomerCompany cc
                                on cc.CustomerId = cus.CustomerId
                                where cc.CompanyId = '{0}'
                                {1}
                                {2}
                                {3}
                                group by CAST(cus.CreatedDate AS DATE)
                                order by CAST(cus.CreatedDate AS DATE) asc
                                ";
            string DateRange = "";
            string subquery = "";
            string IsSales = "";
            if (Start != null && End != null)
            {
                DateRange = string.Format("and cus.CreatedDate between '{0}' and '{1}'", Start, End);
            }
            if (!string.IsNullOrWhiteSpace(labelvalue) && labelvalue == "lead")
            {
                subquery = string.Format("and cc.IsLead = 1");
            }
            else if (!string.IsNullOrWhiteSpace(labelvalue) && labelvalue == "customer")
            {
                subquery = string.Format("and cc.IsLead = 0");
            }

            else if (!string.IsNullOrWhiteSpace(labelvalue) && labelvalue == "mmr")
            {
                subquery = string.Format("and cus.MonthlyMonitoringFee is not null and cus.MonthlyMonitoringFee != ''");
            }

            if (!string.IsNullOrWhiteSpace(tag) && tag.ToLower().IndexOf("admin") == -1 && tag != "Sales Manager")
            {
                IsSales = string.Format("and (cus.LastUpdatedByUid = '{0}' or cus.CreatedByUid = '{0}')", empid);
            }
            try
            {
                sqlQuery = string.Format(sqlQuery, CompanyId, DateRange, subquery, IsSales);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public Customer GetCustomersByIdAPI(int Id)
        {

            string sqlQuery = @"select cus.*
                                ,emp.FirstName+' '+emp.LastName as CreatedByVal 
                                ,(select ISNULL(SUM(amount),0.00) from CustomerCredit where CustomerId = cus.CustomerId and (IsDeleted != 1 or IsDeleted is null)) as CreditBalance
                                ,ISNULL(lk.DisplayText,'') as LeadSourceVal 
                                ,lk.ParentDataKey as LeadSourceParentVal 
                                ,ISNULL(lkmarket.DisplayText,'') as MarketVal
                                ,ISNULL(CusAcType.DisplayText,'') as CustomerAccountTypeVal  
                                ,{1} as DisplayName
                                ,cusEx.RemainingContractTerm
                                ,cusEx.ContractStartDate
                                from Customer cus
                                left join [Lookup] lk on lk.DataKey = 'LeadSource' and lk.DataValue = cus.LeadSource
                                left join [Lookup] lkmarket on lkmarket.DataKey = 'LeadMarket' and lkmarket.DataValue = cus.Market
                                left join [Lookup] CusAcType on CusAcType.DataKey = 'CustomerAccountType' and CusAcType.DataValue = cus.CustomerAccountType
                                left join Employee emp on emp.UserId = cus.CreatedByUid 
                                left join CustomerExtended cusEx on cusEx.CustomerId = cus.CustomerId
                                where cus.Id={0}";
            #region Naming Condition
            string NamingSql = "''";
            //GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            //GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            //if (gs != null)
            //{
            //    NamingSql = gs.Value;
            //}
            #endregion
            try
            {
                sqlQuery = string.Format(sqlQuery, Id, NamingSql);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    SqlDataReader reader;
                    long rows = SelectRecords(cmd, out reader);
                    using (reader)
                    {
                        if (reader.Read())
                        {
                            Customer Customer = new Customer();
                            Customer.CustomerExtended = new CustomerExtended();
                            FillObject(Customer, reader);
                            Customer.CreatedByVal = reader["CreatedByVal"].ToString();
                            Customer.CreditBalance = double.Parse(reader["CreditBalance"].ToString());
                            Customer.LeadSourceVal = reader["LeadSourceVal"].ToString();
                            Customer.LeadSourceParentVal = reader["LeadSourceParentVal"].ToString();
                            Customer.MarketVal = reader["MarketVal"].ToString();
                            Customer.CustomerAccountTypeVal = reader["CustomerAccountTypeVal"].ToString();
                            Customer.DisplayName = reader["DisplayName"].ToString();
                            Customer.CustomerExtended.ContractStartDate = reader["ContractStartDate"] != DBNull.Value ? Convert.ToDateTime(reader["ContractStartDate"]) : new DateTime();
                            Customer.CustomerExtended.RemainingContractTerm = reader["RemainingContractTerm"].ToString();
                            return Customer;
                        }
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public Customer GetCustomersById(int Id)
        {

            string sqlQuery = @"select cus.*
                                ,emp.FirstName+' '+emp.LastName as CreatedByVal 
                                ,(select ISNULL(SUM(amount),0.00) from CustomerCredit where CustomerId = cus.CustomerId and (IsDeleted != 1 or IsDeleted is null)) as CreditBalance
                                ,ISNULL(lk.DisplayText,'') as LeadSourceVal 
                                ,lk.ParentDataKey as LeadSourceParentVal 
                                ,ISNULL(lkmarket.DisplayText,'') as MarketVal
                                ,ISNULL(CusAcType.DisplayText,'') as CustomerAccountTypeVal  
                                ,{1} as DisplayName
                                ,cusEx.RemainingContractTerm
                                ,cusEx.ContractStartDate
                                from Customer cus
                                left join [Lookup] lk on lk.DataKey = 'LeadSource' and lk.DataValue = cus.LeadSource
                                left join [Lookup] lkmarket on lkmarket.DataKey = 'LeadMarket' and lkmarket.DataValue = cus.Market
                                left join [Lookup] CusAcType on CusAcType.DataKey = 'CustomerAccountType' and CusAcType.DataValue = cus.CustomerAccountType
                                left join Employee emp on emp.UserId = cus.CreatedByUid 
                                left join CustomerExtended cusEx on cusEx.CustomerId = cus.CustomerId
                                where cus.Id={0}";
            #region Naming Condition
            string NamingSql = "''";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            if (gs != null)
            {
                NamingSql = gs.Value;
            }
            #endregion
            try
            {
                sqlQuery = string.Format(sqlQuery, Id, NamingSql);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    SqlDataReader reader;
                    long rows = SelectRecords(cmd, out reader);
                    using (reader)
                    {
                        if (reader.Read())
                        {
                            Customer Customer = new Customer();
                            Customer.CustomerExtended = new CustomerExtended();
                            FillObject(Customer, reader);
                            Customer.CreatedByVal = reader["CreatedByVal"].ToString();
                            Customer.CreditBalance = double.Parse(reader["CreditBalance"].ToString());
                            Customer.LeadSourceVal = reader["LeadSourceVal"].ToString();
                            Customer.LeadSourceParentVal = reader["LeadSourceParentVal"].ToString();
                            Customer.MarketVal = reader["MarketVal"].ToString();
                            Customer.CustomerAccountTypeVal = reader["CustomerAccountTypeVal"].ToString();
                            Customer.DisplayName = reader["DisplayName"].ToString();
                            Customer.CustomerExtended.ContractStartDate = reader["ContractStartDate"] != DBNull.Value ? Convert.ToDateTime(reader["ContractStartDate"]) : new DateTime();
                            Customer.CustomerExtended.RemainingContractTerm = reader["RemainingContractTerm"].ToString();
                            return Customer;
                        }
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public Customer GetCustomerByGuidId(Guid Id)
        {

            string sqlQuery = @"select cus.*
                                ,{1} as DisplayName
                                from Customer cus
                                where cus.CustomerId='{0}'";
            #region Naming Condition
            string NamingSql = "''";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            if (gs != null)
            {
                NamingSql = gs.Value;
            }
            #endregion
            try
            {
                sqlQuery = string.Format(sqlQuery, Id, NamingSql);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    SqlDataReader reader;
                    long rows = SelectRecords(cmd, out reader);
                    using (reader)
                    {
                        if (reader.Read())
                        {
                            Customer Customer = new Customer();
                            FillObject(Customer, reader);
                            Customer.DisplayName = reader["DisplayName"].ToString();
                            return Customer;
                        }
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public Customer GetCustomersByIdAndSoldBy(int Id, Guid SoldBy, string EmployeeRole, string userRole)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string sqlQuery = @"
                                select cus.*,{2} [customerName]
                                ,emp.FirstName+' '+emp.LastName as CreatedByVal 
                                ,empSoldBy2.FirstName+' '+empSoldBy2.LastName as SoldBy2Text 
								,empSoldBy3.FirstName+' '+empSoldBy3.LastName as SoldBy3Text 
                                ,(select ISNULL(SUM(amount),0.00) from CustomerCredit where CustomerId = cus.CustomerId and (IsDeleted != 1 or IsDeleted is null)) as CreditBalance
                                -- ,((select cast(ISNULL(SUM(amount),0.00) as decimal(10,2)) from CustomerCredit where CustomerId = cus.CustomerId AND Type = 'Credit') - (select cast(ISNULL(SUM(amount),0.00) as decimal(10,2)) from CustomerCredit where CustomerId = cus.CustomerId AND Type = 'Debit')) as CreditBalance
                                ,ISNULL(lk.DisplayText,'') as LeadSourceVal
                                ,ISNULL(lkCustomerStatus.DisplayText,'') as CustomerStatusVal 
                                ,lk.ParentDataKey as LeadSourceParentVal 
                                ,ISNULL(lkmarket.DisplayText,'') as MarketVal
                                ,ISNULL(CusAcType.DisplayText,'') as CustomerAccountTypeVal,
                                ISNULL(selerloc.DisplayText,'') as SelesLocationVal,
                                ISNULL(taxloc.DisplayText,'') as TaxExemptionVal,
                                ISNULL(appointmentloc.DisplayText,'') as AppointmentSetVal,
                                iif(cusType.DataValue = '-1', '', cusType.DisplayText) as LeadSiteType,
                                empAccess.FirstName+' '+empAccess.LastName as AccessGivenToVal,
                                lkleadstatus.DisplayText as StatusVal
                                ,cus2.Id as ParentId,creditGrade.Grade as CreditGrade
                                ,lkbat.DisplayText as BusinessAccountTypeVal                                
                                from Customer cus
								left  join Lookup lkbat on lkbat.DataValue=cus.BusinessAccountType and lkbat.DataKey='BussinessAccountType'
                                left join [Lookup] lk on lk.DataKey = 'LeadSource' and lk.DataValue = cus.LeadSource
                                left join [Lookup] lkCustomerStatus on lkCustomerStatus.DataKey = 'CustomerStatus1' and lkCustomerStatus.DataValue = cus.CustomerStatus
                                left join [Lookup] lkmarket on lkmarket.DataKey = 'LeadMarket' and lkmarket.DataValue = cus.Market
                                left join [Lookup] CusAcType on CusAcType.DataKey = 'CustomerAccountType' and CusAcType.DataValue = cus.CustomerAccountType
                                left join [Lookup] cusType on cusType.DataKey = 'CustomerType' and cusType.DataValue = cus.[Type]
                                left join [Lookup] selerloc on selerloc.DataKey = 'CommissionType' and selerloc.DataValue = cus.[SalesLocation]
                                left join [Lookup] taxloc on taxloc.DataKey = 'TaxExemption' and taxloc.DataValue = cus.[TaxExemption]
                                left join [Lookup] appointmentloc on appointmentloc.DataKey = 'AppoinmentSet' and appointmentloc.DataValue = cus.[AppoinmentSet]
                                left join Employee emp on emp.UserId = cus.CreatedByUid 
                                left join Employee empAccess on empAccess.UserId = cus.AccessGivenTo
                                left join Employee empSoldBy2 on empSoldBy2.UserId = cus.SoldBy2
								left join Employee empSoldBy3 on empSoldBy3.UserId = cus.SoldBy3
                                left join [Lookup] lkleadstatus on lkleadstatus.DataKey = 'LeadStatus' and lkleadstatus.DataValue = iif(cus.[Status] != '-1', cus.[Status], '')

                                left join CreditScoreGrade creditGrade on creditGrade.ID = cus.CreditScore
                                left join Customer cus2 on cus2.CustomerId = cus.ChildOf
                                where cus.Id={0}{1}";
            string filterbyUser = "";
            //if (!string.IsNullOrEmpty(EmployeeRole) && EmployeeRole.ToLower().IndexOf("admin") == -1 && !string.IsNullOrEmpty(userRole) && userRole != "Sales Manager" && userRole != "Technician")
            //{

            //    filterbyUser = string.Format("AND (cus.Soldby='{0}' or cus.AccessGivenTo='{0}' or tk.AssignTo = '{0}')", SoldBy);
            //}
            try
            {
                sqlQuery = string.Format(sqlQuery, Id, filterbyUser, NameSql);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    SqlDataReader reader;
                    long rows = SelectRecords(cmd, out reader);
                    using (reader)
                    {
                        if (reader.Read())
                        {
                            Customer Customer = new Customer();
                            FillObject(Customer, reader);
                            Customer.customerName = reader["customerName"].ToString();
                            Customer.CreatedByVal = reader["CreatedByVal"].ToString();
                            Customer.AccessGivenToVal = reader["AccessGivenToVal"].ToString();
                            Customer.CreditBalance = double.Parse(reader["CreditBalance"].ToString());
                            Customer.LeadSourceVal = reader["LeadSourceVal"].ToString();
                            Customer.CustomerStatusVal = reader["CustomerStatusVal"].ToString();
                            Customer.LeadSourceParentVal = reader["LeadSourceParentVal"].ToString();
                            Customer.MarketVal = reader["MarketVal"].ToString();
                            Customer.CustomerAccountTypeVal = reader["CustomerAccountTypeVal"].ToString();
                            Customer.LeadSiteType = reader["LeadSiteType"].ToString();
                            Customer.SelesLocationVal = reader["SelesLocationVal"].ToString();
                            Customer.TaxExemptionVal = reader["TaxExemptionVal"].ToString();
                            Customer.AppointmentSetVal = reader["AppointmentSetVal"].ToString();
                            Customer.StatusVal = reader["StatusVal"].ToString();
                            Customer.SoldBy2Text = reader["SoldBy2Text"].ToString();
                            Customer.SoldBy3Text = reader["SoldBy3Text"].ToString();
                            Customer.CreditGrade = reader["CreditGrade"].ToString();
                            Customer.ParentId = reader["ParentId"] != DBNull.Value ? Convert.ToInt32(reader["ParentId"]) : 0;
                            Customer.BusinessAccountType = reader["BusinessAccountType"].ToString();
                            return Customer;
                        }
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllCustomerList(string query)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string sqlQuery = @"SELECT *
                                FROM
                                  ( SELECT top(50) cus.Id, {1} as CustomerName,cus.CustomerId, IsDirect, FirstName, LastName, Address, CustomerNo, Street, AccountNo, BusinessName
                                    FROM Customer cus
									left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
									WHERE (FirstName +' '+ LastName like '%{0}%' OR FirstName like '%{0}%' OR LastName like '%{0}%' 
                                       OR Street like '%{0}%' OR CustomerNo like '%{0}%' OR AccountNo like '%{0}%'
                                       OR cus.Id Like '%{0}%' or BusinessName like '%{0}%' or DBA like '%{0}%')
									   and cc.IsLead = 0
                                       and cus.IsActive = 1
                                  ) tmp";


            try
            {
                sqlQuery = string.Format(sqlQuery, query, NameSql);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllLeadList(string query)
        {
            string sqlQuery = @"SELECT *
                                FROM
                                  ( SELECT cus.Id, FirstName +' '+ LastName as CustomerName,cus.CustomerId, IsDirect, FirstName, LastName, Address, CustomerNo, Street, AccountNo, BusinessName
                                    FROM Customer cus
									left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
									WHERE (FirstName +' '+ LastName like '%{0}%' OR FirstName like '%{0}%' OR LastName like '%{0}%' 
                                       OR Street like '%{0}%' OR CustomerNo like '%{0}%' OR AccountNo like '%{0}%'
                                       OR cus.Id Like '%{0}%' or BusinessName like '%{0}%')
									   and cc.IsLead = 1
                                  ) tmp";


            try
            {
                sqlQuery = string.Format(sqlQuery, query);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetLeadIdByCompanyIdAndCustomerId(Guid Companyid, int ID)
        {
            string sqlQuery = @"select cus.*
                                from  Customer cus
                                join CustomerCompany cc
                                on cc.CustomerId = cus.CustomerId
                                where cc.CompanyId ='{0}'
                                --and cc.IsLead=1
								and cus.Id='{1}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, Companyid, ID);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public Customer GetIndividualCustomerByCustomerId(Guid CustomerId)
        {
            return this.GetByQuery(string.Format("CustomerId ='{0}'", CustomerId)).FirstOrDefault(); ;
        }
        public DataSet GetCustomerDashboardReprot(DashboardReportDateFilter filter)
        {
            var TodayDateQuery = "";
            var TodaySalesDateQuery = "";
            var YesterdayDateQuery = "";
            var YesterdaySalesDateQuery = "";

            var ThisWeekDateQuery = "";
            var ThisWeekSalesDateQuery = "";
            var LastWeekDateQuery = "";
            var LastWeekSalesDateQuery = "";

            var ThisMonthDateQuery = "";
            var ThisMonthSalesDateQuery = "";
            var LastMonthDateQuery = "";
            var LastMonthSalesDateQuery = "";

            var ThisYearDateQuery = "";
            var ThisYearSalesDateQuery = "";
            var LastYearDateQuery = "";
            var LastYearSalesDateQuery = "";

            var SoldbyQuery = " and (cus.SoldBy1 in (select * from #TempEmployee) or cus.AppoinmentSetBy in (select * from #TempEmployee))";
            var SoldbyQuery1 = "and IsLead = 0 and (cus.SoldBy1 in (select * from #TempEmployee) )";
            var AptSetQuery = "  and (cus.AppoinmentSetBy in (select * from #TempEmployee) )";
            if (!string.IsNullOrEmpty(filter.EmpId) && filter.EmpId != "-1")
            {
                SoldbyQuery = string.Format(" and (cus.SoldBy1 in ('{0}') or cus.AppoinmentSetBy in ('{0}'))", filter.EmpId);
                SoldbyQuery1 = string.Format("and IsLead = 0 and (cus.SoldBy1 in ('{0}') )", filter.EmpId);
                AptSetQuery = string.Format("  and (cus.AppoinmentSetBy in ('{0}') )", filter.EmpId);
            }
            if (filter.StartdateToday != new DateTime() && filter.EndDateToday != new DateTime())
            {
                TodayDateQuery = string.Format(" where CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartdateToday.SetZeroHour(), filter.EndDateToday.SetMaxHour());
                TodaySalesDateQuery = string.Format(" where CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartdateToday.SetZeroHour(), filter.EndDateToday.SetMaxHour());
                YesterdayDateQuery = string.Format(" where CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateYesterday.SetZeroHour(), filter.EndDateYesterday.SetMaxHour());
                YesterdaySalesDateQuery = string.Format(" where CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateYesterday.SetZeroHour(), filter.StartDateYesterday.SetMaxHour());
            }

            if (filter.StartDateThisWeek != new DateTime() && filter.EndDateThisWeek != new DateTime())
            {
                ThisWeekDateQuery = string.Format(" where  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateThisWeek.SetZeroHour(), filter.EndDateThisWeek.SetMaxHour());
                ThisWeekSalesDateQuery = string.Format(" where CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateThisWeek.SetZeroHour(), filter.EndDateThisWeek.SetMaxHour());
                LastWeekDateQuery = string.Format(" where  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateLastWeek.SetZeroHour(), filter.EndDateLastWeek.SetMaxHour());
                LastWeekSalesDateQuery = string.Format(" where CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateLastWeek.SetZeroHour(), filter.EndDateLastWeek.SetMaxHour());
            }

            if (filter.StartDateThisMonth != new DateTime() && filter.EndDateThisMonth != new DateTime())
            {
                ThisMonthDateQuery = string.Format(" where  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateThisMonth.SetZeroHour(), filter.EndDateThisMonth.SetMaxHour());
                ThisMonthSalesDateQuery = string.Format(" where CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateThisMonth.SetZeroHour(), filter.EndDateThisMonth.SetMaxHour());
                LastMonthDateQuery = string.Format(" where  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateLastMonth.SetZeroHour(), filter.EndDateLastMonth.SetMaxHour());
                LastMonthSalesDateQuery = string.Format(" where CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateLastMonth.SetZeroHour(), filter.EndDateLastMonth.SetMaxHour());
            }

            if (filter.StartDateThisYear != new DateTime() && filter.EndDateThisYear != new DateTime())
            {
                ThisYearDateQuery = string.Format(" where  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateThisYear.SetZeroHour(), filter.EndDateThisYear.SetMaxHour());
                ThisYearSalesDateQuery = string.Format(" where CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateThisYear.SetZeroHour(), filter.EndDateThisYear.SetMaxHour());
                LastYearDateQuery = string.Format(" where CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateLastYear.SetZeroHour(), filter.EndDateLastYear.SetMaxHour());
                LastYearSalesDateQuery = string.Format(" where CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateLastYear.SetZeroHour(), filter.EndDateLastYear.SetMaxHour());
            }
            string rawQuery;
            if (filter.EmpId == null)
            {
                rawQuery = @" select cus.Id,cus.MonthlyMonitoringFee, cus.CustomerId, cus.Soldby1,cus.Status, CE.AppoinmentSetBy,CE.CreatedDay,ccclosing.IsLead,cus.CreatedDate,ccclosing.ConvertionDate,cus.JoinDate,cus.SalesDate
								into #TempCustomer
								from customer cus 
								left join CustomerExtended CE on CE.Customerid = cus.Customerid
								LEFT JOIN CustomerCompany ccclosing on ccclosing.CustomerId=cus.CustomerId
								LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=cus.Status and lkLStatus.DataKey='LeadStatus'
								where lkLStatus.AlterDisplayText !='' and CE.IsTestAccount != 1

								select #tc.* into #TempCustomerBad
								From #TempCustomer #tc
								LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=#tc.Status and lkLStatus.DataKey='LeadStatus'
								where lkLStatus.AlterDisplayText = 'Bad' 

								select #tc.* into #TempCustomerGood
								From #TempCustomer #tc
								LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=#tc.Status and lkLStatus.DataKey='LeadStatus'
								where lkLStatus.AlterDisplayText = 'Good'
								
					            select emp.UserId  into #TempEmployee From Employee emp
								left join UserPermission up on up.UserId = emp.UserId
								left join UserLogin u on u.UserId=up.UserId
								left join PermissionGroup pg on pg.Id = up.PermissionGroupId
								where emp.IsSalesMatrix=1 --and emp.IsCurrentEmployee=1

								select 
							    (Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {0} {8})  as Leads ,  
                                (Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {10} {8})  as PriodLeads ,  

								(Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
						        {0} {8} AND (cus.Soldby1=emp.UserId or cus.AppoinmentSetBy=emp.UserId) )  as Good  , 
                                (Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {10} {8})  as PriodGood, 

								(Select COUNT(cus.Id) from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {0} {8})  as Remove, 
								(Select COUNT(cus.Id) from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {10} {8})  as PriodRemove, 

							    (Select COUNT(cus.Id) from #TempCustomer cus {1} {9} ) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus {11} {9} ) as PriodSales,

							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {0} {8}  and cus.monthlymonitoringfee != '')  as RMR , 
							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {10} {8} and cus.monthlymonitoringfee != '')  as PriorRMR , 

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {0} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {0} {8}) , 0)),0) as GoodLeadsPercentage,
	                            ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {10} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {10} {8}) , 0)),0) as PriodGoodLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {0} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {0} {8}) , 0)),0) as BadLeadsPercentage,
		                        ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {10} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {10} {8}) , 0)),0) as PriodBadLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {1} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {0} {8}) , 0)),0) as GoodSalesPercentage,
			                    ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {11} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {10} {8}) , 0)),0) as PriodGoodSalesPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {1} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {0} {8}) , 0)),0) as OverallSalesPercentage,
								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {11} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {10} {8}) , 0)),0) as PriodOverallSalesPercentage,


					            (Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
								{1} AND CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9}) as  FirstCall,
                                (Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
								{11} AND CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9}) as  PriodFirstCall,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {1} and   CAST(cus.CreatedDate as date) = CAST(cus.SalesDate as date)  {9}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {0} {8}) , 0)),0) as FirstCallPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {11} {9}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {10} {8}) , 0)),0) as PriodFirstCallPercentage,

								(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {0} {18})  as AptSet,
								(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {10}  {18})  as PriodAptSet,

                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {0} {18}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {0} and cus.IsLead = 1   {8}),0)),0)  as AptSetPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {10} {18} ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1      {10} and cus.IsLead = 1  {8}),0)),0)  as PriodAptSetPercentage
								into #CustomerDashboardReportToday

                                select 
							    (Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
						         {2} {8} AND (cus.Soldby1=emp.UserId or cus.AppoinmentSetBy=emp.UserId))  as Leads ,  
                                (Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {12} {8})  as PriodLeads , 

								(Select COUNT(cus.Id)from #TempCustomerGood cus  join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {2} {8})  as Good  , 
		                        (Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {12} {8})  as PriodGood  , 

								(Select COUNT(cus.Id) from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {2} {8})  as Remove, 
								(Select COUNT(cus.Id) from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {12} {8})  as PriodRemove, 

							    (Select COUNT(cus.Id) from #TempCustomer cus  {3}  {9} ) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus  {13}   {9}) as PriodSales,

							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {2} {8}  and cus.monthlymonitoringfee != '')  as RMR , 
							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {12} {8}   and cus.monthlymonitoringfee != '')  as PriorRMR , 

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {2} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {2} {8}) , 0)),0) as GoodLeadsPercentage,
								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {12} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {12} {8}) , 0)),0) as PriodGoodLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {2} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {2} {8}) , 0)),0) as BadLeadsPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {12} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {12} {8}) , 0)),0) as PriodBadLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {3} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {2} {8}) , 0)),0) as GoodSalesPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {13} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {12} {8}) , 0)),0) as PriodGoodSalesPercentage,


								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {3} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {2} {8}) , 0)),0) as OverallSalesPercentage,
								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {13} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {12} {8}) , 0)),0) as PriodOverallSalesPercentage,

					            (Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
								{3} AND CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9} ) as  FirstCall,
                                (Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
								{13} AND CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9} ) as  PriodFirstCall,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {3} {9} and   CAST(cus.CreatedDate as date) = CAST(cus.SalesDate as date) ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {2} {8}) , 0)),0) as FirstCallPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {13} {9}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {12} {8}) , 0)),0) as PriodFirstCallPercentage,

								(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {2} {18} )  as AptSet,
								(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {12} {18} )  as PriodAptSet,

                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {2} {18}  ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1    {2} and cus.IsLead =1  {8}),0)),0)  as AptSetPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {12} {18} ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {12} and cus.IsLead =1   {8}),0)),0)  as PriodAptSetPercentage
							

								into #CustomerDashboardReportThisWeek

                                select 
							    (Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {4} {8})  as Leads , 
	                            (Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {14} {8})  as PriodLeads , 

								(Select COUNT(cus.Id)from #TempCustomerGood cus  join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {4} {8} AND (cus.Soldby1=emp.UserId or cus.AppoinmentSetBy=emp.UserId))  as Good  , 
	                            (Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {14} {8})  as PriodGood  ,

								(Select COUNT(cus.Id) from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {4} {8})  as Remove, 
								(Select COUNT(cus.Id) from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {14} {8})  as PriodRemove, 

							    (Select COUNT(cus.Id) from #TempCustomer cus  {5}  {9}) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus  {15}   {9}) as PriodSales,

					            (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {4} {8}  and cus.monthlymonitoringfee != '')  as RMR , 
							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {14} {8}  and cus.monthlymonitoringfee != '')  as PriorRMR ,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {4} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {4} {8}) , 0)),0) as GoodLeadsPercentage,
								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {14} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {14} {8}) , 0)),0) as PriodGoodLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {4} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {4} {8}) , 0)),0) as BadLeadsPercentage,
				                ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {14} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {14} {8}) , 0)),0) as PriodBadLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {5} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {4} {8}) , 0)),0) as GoodSalesPercentage,
								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {15} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {14} {8}) , 0)),0) as PriodGoodSalesPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {5} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {4} {8}) , 0)),0) as OverallSalesPercentage,
		                        ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {15} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {14} {8}) , 0)),0) as PriodOverallSalesPercentage,

					           	(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
								{5} AND CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9}) as  FirstCall,
	                            (Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
								{15} AND CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9}) as  PriodFirstCall,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {5} {9} and   CAST(cus.CreatedDate as date) = CAST(cus.SalesDate as date) ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {4} {8}) , 0)),0) as FirstCallPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {15} {9}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {14} {8}) , 0)),0) as PriodFirstCallPercentage,

								(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {4} {18} )  as AptSet,
								(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {14} {18})  as PriodAptSet,

                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {4} {18}  ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {4}  and cus.IsLead =1 {8}),0)),0)  as AptSetPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {14} {18}  ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {14} and cus.IsLead =1  {8}) ,0)),0)  as PriodAptSetPercentage
								into #CustomerDashboardReportThisMonth

                                select 
							    (Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {6} {8})  as Leads ,  
                                (Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {16} {8})  as PriodLeads ,  

								(Select COUNT(cus.Id)from #TempCustomerGood cus  join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {6} {8} AND (cus.Soldby1=emp.UserId or cus.AppoinmentSetBy=emp.UserId))  as Good  , 
	                            (Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {16} {8})  as PriodGood  , 

								(Select COUNT(cus.Id) from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {6} {8})  as Remove, 
								(Select COUNT(cus.Id) from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {16} {8})  as PriodRemove, 

							    (Select COUNT(cus.Id) from #TempCustomer cus  {7} {9}) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus  {17}    {9}) as PriodSales,

					            (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {6} {8} and cus.monthlymonitoringfee != '' )  as RMR , 
							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {16} {8}   and cus.monthlymonitoringfee != '' )  as PriorRMR ,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {6} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {6} {8}) , 0)),0) as GoodLeadsPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {16} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {16} {8}) , 0)),0) as PriodGoodLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {6} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {6} {8}) , 0)),0) as BadLeadsPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {16} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {16} {8}) , 0)),0) as PriodBadLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {7} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {6} {8}) , 0)),0) as GoodSalesPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {17} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {16} {8}) , 0)),0) as PriodGoodSalesPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {7} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {6} {8}) , 0)),0) as OverallSalesPercentage,
			                    ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {17} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {16} {8}) , 0)),0) as PriodOverallSalesPercentage,

					           	(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
								{7} AND CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9}) as  FirstCall,
	                            (Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
								{17} AND CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9} ) as  PriodFirstCall,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {7} {9} and   CAST(cus.CreatedDate as date) = CAST(cus.SalesDate as date)) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {6} {8}) , 0)),0) as FirstCallPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {17} {9}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {16} {8}) , 0)),0) as PriodFirstCallPercentage,

								(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {6} {18}  )  as AptSet,
	                            (Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {16} {18})  as PriodAptSet,

 								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {6}  {18})  * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {6} and cus.IsLead =1  {8}),0)),0)  as AptSetPercentage,
 								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {16}  {18})* 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1    {16} and cus.IsLead =1  {8}),0)),0)  as PriodAptSetPercentage
								into #CustomerDashboardReportThisYear
                                
                                UPDATE #CustomerDashboardReportToday
                                SET FirstCallPercentage = ISNULL(CAST((FirstCall * 100) / NULLIF(CAST(Good AS DECIMAL(18, 2)), 0) AS decimal(18,2)),0),
                                GoodSalesPercentage = ISNULL(CAST((Sales * 100) / NULLIF(CAST(Good AS DECIMAL(18, 2)), 0) AS decimal(18,2)),0)
                                UPDATE #CustomerDashboardReportThisWeek
                                SET FirstCallPercentage = ISNULL(CAST((FirstCall * 100) / NULLIF(CAST(Good AS DECIMAL(18, 2)), 0) AS decimal(18,2)),0),
                                GoodSalesPercentage = ISNULL(CAST((Sales * 100) / NULLIF(CAST(Good AS DECIMAL(18, 2)), 0) AS decimal(18,2)),0)
                                UPDATE #CustomerDashboardReportThisMonth
                                SET FirstCallPercentage = ISNULL(CAST((FirstCall * 100) / NULLIF(CAST(Good AS DECIMAL(18, 2)), 0) AS decimal(18,2)),0),
                                GoodSalesPercentage =ISNULL( CAST((Sales * 100) / NULLIF(CAST(Good AS DECIMAL(18, 2)), 0) AS decimal(18,2)),0)
                                UPDATE #CustomerDashboardReportThisYear
                                SET FirstCallPercentage = ISNULL(CAST((FirstCall * 100) / NULLIF(CAST(Good AS DECIMAL(18, 2)), 0) AS decimal(18,2)),0),
                                GoodSalesPercentage = ISNULL(CAST((Sales * 100) / NULLIF(CAST(Good AS DECIMAL(18, 2)), 0) AS decimal(18,2)),0)
								
                                select * from #CustomerDashboardReportToday
								select * from #CustomerDashboardReportThisWeek
	                            select * from #CustomerDashboardReportThisMonth
	                            select * from #CustomerDashboardReportThisYear

								drop table #TempCustomer
								drop table #TempCustomerBad
								drop table #TempCustomerGood
								drop table #CustomerDashboardReportToday
                                drop table #CustomerDashboardReportThisWeek
                                drop table #CustomerDashboardReportThisMonth
                                drop table #CustomerDashboardReportThisYear
                                drop table #TempEmployee"
;

            }
            else
            {
                rawQuery = @" select cus.Id,cus.MonthlyMonitoringFee, cus.CustomerId, cus.Soldby1,cus.Status, CE.AppoinmentSetBy,CE.CreatedDay,ccclosing.IsLead,cus.CreatedDate,ccclosing.ConvertionDate,cus.JoinDate,cus.SalesDate
								into #TempCustomer
								from customer cus 
								left join CustomerExtended CE on CE.Customerid = cus.Customerid
								LEFT JOIN CustomerCompany ccclosing on ccclosing.CustomerId=cus.CustomerId
								LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=cus.Status and lkLStatus.DataKey='LeadStatus'
								where lkLStatus.AlterDisplayText !='' and CE.IsTestAccount != 1

								select #tc.* into #TempCustomerBad
								From #TempCustomer #tc
								LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=#tc.Status and lkLStatus.DataKey='LeadStatus'
								where lkLStatus.AlterDisplayText = 'Bad' 

								select #tc.* into #TempCustomerGood
								From #TempCustomer #tc
								LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=#tc.Status and lkLStatus.DataKey='LeadStatus'
								where lkLStatus.AlterDisplayText = 'Good'
								
					            select emp.UserId  into #TempEmployee From Employee emp
								left join UserPermission up on up.UserId = emp.UserId
								left join UserLogin u on u.UserId=up.UserId
								left join PermissionGroup pg on pg.Id = up.PermissionGroupId
								where emp.IsSalesMatrix=1 --and emp.IsCurrentEmployee=1

								select 
							    (Select COUNT(cus.Id)  from #TempCustomer cus {0} {8})  as Leads ,  
                                (Select COUNT(cus.Id)  from #TempCustomer cus {10} {8})  as PriodLeads ,  

								(Select COUNT(cus.Id)from #TempCustomerGood cus
						        {0} {8})  as Good  , 
                                (Select COUNT(cus.Id)from #TempCustomerGood cus {10} {8})  as PriodGood, 

								(Select COUNT(cus.Id) from #TempCustomerBad cus {0} {8})  as Remove, 
								(Select COUNT(cus.Id) from #TempCustomerBad cus {10} {8})  as PriodRemove, 

							    (Select COUNT(cus.Id) from #TempCustomer cus {1} {9} ) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus {11} {9} ) as PriodSales,

							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {0} {8}  and cus.monthlymonitoringfee != '')  as RMR , 
							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {10} {8} and cus.monthlymonitoringfee != '')  as PriorRMR , 

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {0} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {0} {8}) , 0)),0) as GoodLeadsPercentage,
	                            ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {10} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {10} {8}) , 0)),0) as PriodGoodLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {0} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {0} {8}) , 0)),0) as BadLeadsPercentage,
		                        ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {10} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {10} {8}) , 0)),0) as PriodBadLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {1} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {0} {8}) , 0)),0) as GoodSalesPercentage,
			                    ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {11} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {10} {8}) , 0)),0) as PriodGoodSalesPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {1} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {0} {8}) , 0)),0) as OverallSalesPercentage,
								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {11} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {10} {8}) , 0)),0) as PriodOverallSalesPercentage,


					            (Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
								{1} AND CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9}) as  FirstCall,
                                (Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
								{11} AND CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9}) as  PriodFirstCall,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {1} and   CAST(cus.CreatedDate as date) = CAST(cus.SalesDate as date)  {9}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {0} {8}) , 0)),0) as FirstCallPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {11} {9}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {10} {8}) , 0)),0) as PriodFirstCallPercentage,

								(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {0} {18})  as AptSet,
								(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {10}  {18})  as PriodAptSet,

                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {0} {18}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {0} and cus.IsLead = 1   {8}),0)),0)  as AptSetPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {10} {18} ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1      {10} and cus.IsLead = 1  {8}),0)),0)  as PriodAptSetPercentage
								into #CustomerDashboardReportToday

                                select 
							    (Select COUNT(cus.Id)  from #TempCustomer cus
						         {2} {8})  as Leads ,  
                                (Select COUNT(cus.Id)  from #TempCustomer cus {12} {8})  as PriodLeads , 

								(Select COUNT(cus.Id)from #TempCustomerGood cus {2} {8})  as Good  , 
		                        (Select COUNT(cus.Id)from #TempCustomerGood cus {12} {8})  as PriodGood  , 

								(Select COUNT(cus.Id) from #TempCustomerBad cus {2} {8})  as Remove, 
								(Select COUNT(cus.Id) from #TempCustomerBad cus {12} {8})  as PriodRemove, 

							    (Select COUNT(cus.Id) from #TempCustomer cus  {3}  {9} ) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus  {13}   {9}) as PriodSales,

							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {2} {8}  and cus.monthlymonitoringfee != '')  as RMR , 
							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {12} {8}   and cus.monthlymonitoringfee != '')  as PriorRMR , 

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {2} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {2} {8}) , 0)),0) as GoodLeadsPercentage,
								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {12} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {12} {8}) , 0)),0) as PriodGoodLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {2} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {2} {8}) , 0)),0) as BadLeadsPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {12} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {12} {8}) , 0)),0) as PriodBadLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {3} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {2} {8}) , 0)),0) as GoodSalesPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {13} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {12} {8}) , 0)),0) as PriodGoodSalesPercentage,


								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {3} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {2} {8}) , 0)),0) as OverallSalesPercentage,
								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {13} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {12} {8}) , 0)),0) as PriodOverallSalesPercentage,

					            (Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
								{3} AND CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9} ) as  FirstCall,
                                (Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
								{13} AND CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9} ) as  PriodFirstCall,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {3} {9} and   CAST(cus.CreatedDate as date) = CAST(cus.SalesDate as date) ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {2} {8}) , 0)),0) as FirstCallPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {13} {9}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {12} {8}) , 0)),0) as PriodFirstCallPercentage,

								(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {2} {18} )  as AptSet,
								(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {12} {18} )  as PriodAptSet,

                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {2} {18}  ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1    {2} and cus.IsLead =1  {8}),0)),0)  as AptSetPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {12} {18} ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {12} and cus.IsLead =1   {8}),0)),0)  as PriodAptSetPercentage
							

								into #CustomerDashboardReportThisWeek

                                select 
							    (Select COUNT(cus.Id)  from #TempCustomer cus {4} {8})  as Leads , 
	                            (Select COUNT(cus.Id)  from #TempCustomer cus {14} {8})  as PriodLeads , 

								(Select COUNT(cus.Id)from #TempCustomerGood cus {4} {8})  as Good  , 
	                            (Select COUNT(cus.Id)from #TempCustomerGood cus {14} {8})  as PriodGood  ,

								(Select COUNT(cus.Id) from #TempCustomerBad cus {4} {8})  as Remove, 
								(Select COUNT(cus.Id) from #TempCustomerBad cus {14} {8})  as PriodRemove, 

							    (Select COUNT(cus.Id) from #TempCustomer cus  {5}  {9}) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus  {15}   {9}) as PriodSales,

					            (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {4} {8}  and cus.monthlymonitoringfee != '')  as RMR , 
							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {14} {8}  and cus.monthlymonitoringfee != '')  as PriorRMR ,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {4} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {4} {8}) , 0)),0) as GoodLeadsPercentage,
								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {14} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {14} {8}) , 0)),0) as PriodGoodLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {4} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {4} {8}) , 0)),0) as BadLeadsPercentage,
				                ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {14} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {14} {8}) , 0)),0) as PriodBadLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {5} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {4} {8}) , 0)),0) as GoodSalesPercentage,
								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {15} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {14} {8}) , 0)),0) as PriodGoodSalesPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {5} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {4} {8}) , 0)),0) as OverallSalesPercentage,
		                        ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {15} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {14} {8}) , 0)),0) as PriodOverallSalesPercentage,

					           	(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
								{5} AND CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9}) as  FirstCall,
	                            (Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
								{15} AND CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9}) as  PriodFirstCall,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {5} {9} and   CAST(cus.CreatedDate as date) = CAST(cus.SalesDate as date) ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {4} {8}) , 0)),0) as FirstCallPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {15} {9}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {14} {8}) , 0)),0) as PriodFirstCallPercentage,

								(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {4} {18} )  as AptSet,
								(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {14} {18})  as PriodAptSet,

                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {4} {18}  ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {4}  and cus.IsLead =1 {8}),0)),0)  as AptSetPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {14} {18}  ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {14} and cus.IsLead =1  {8}) ,0)),0)  as PriodAptSetPercentage
								into #CustomerDashboardReportThisMonth

                                select 
							    (Select COUNT(cus.Id)  from #TempCustomer cus  {6} {8})  as Leads ,  
                                (Select COUNT(cus.Id)  from #TempCustomer cus {16} {8})  as PriodLeads ,  

								(Select COUNT(cus.Id)from #TempCustomerGood cus {6} {8})  as Good  , 
	                            (Select COUNT(cus.Id)from #TempCustomerGood cus{16} {8})  as PriodGood  , 

								(Select COUNT(cus.Id) from #TempCustomerBad cus {6} {8})  as Remove, 
								(Select COUNT(cus.Id) from #TempCustomerBad cus {16} {8})  as PriodRemove, 

							    (Select COUNT(cus.Id) from #TempCustomer cus  {7} {9}) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus  {17}    {9}) as PriodSales,

					            (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {6} {8} and cus.monthlymonitoringfee != '' )  as RMR , 
							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {16} {8}   and cus.monthlymonitoringfee != '' )  as PriorRMR ,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {6} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {6} {8}) , 0)),0) as GoodLeadsPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {16} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {16} {8}) , 0)),0) as PriodGoodLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {6} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {6} {8}) , 0)),0) as BadLeadsPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {16} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {16} {8}) , 0)),0) as PriodBadLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {7} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {6} {8}) , 0)),0) as GoodSalesPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {17} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {16} {8}) , 0)),0) as PriodGoodSalesPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {7} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {6} {8}) , 0)),0) as OverallSalesPercentage,
			                    ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {17} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1 {16} {8}) , 0)),0) as PriodOverallSalesPercentage,

					           	(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
								{7} AND CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9}) as  FirstCall,
	                            (Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1
								{17} AND CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9} ) as  PriodFirstCall,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {7} {9} and   CAST(cus.CreatedDate as date) = CAST(cus.SalesDate as date)) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {6} {8}) , 0)),0) as FirstCallPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {17} {9}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {16} {8}) , 0)),0) as PriodFirstCallPercentage,

								(Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {6} {18}  )  as AptSet,
	                            (Select COUNT(cus.Id) from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1  {16} {18})  as PriodAptSet,

 								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {6}  {18})  * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {6} and cus.IsLead =1  {8}),0)),0)  as AptSetPercentage,
 								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1   {16}  {18})* 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus join #TempEmployee emp on emp.UserId = cus.AppoinmentSetBy or emp.UserId = cus.Soldby1    {16} and cus.IsLead =1  {8}),0)),0)  as PriodAptSetPercentage
								into #CustomerDashboardReportThisYear
                                
                                UPDATE #CustomerDashboardReportToday
                                SET FirstCallPercentage = ISNULL(CAST((FirstCall * 100) / NULLIF(CAST(Good AS DECIMAL(18, 2)), 0) AS decimal(18,2)),0),
                                GoodSalesPercentage = ISNULL(CAST((Sales * 100) / NULLIF(CAST(Good AS DECIMAL(18, 2)), 0) AS decimal(18,2)),0)
                                UPDATE #CustomerDashboardReportThisWeek
                                SET FirstCallPercentage = ISNULL(CAST((FirstCall * 100) / NULLIF(CAST(Good AS DECIMAL(18, 2)), 0) AS decimal(18,2)),0),
                                GoodSalesPercentage = ISNULL(CAST((Sales * 100) / NULLIF(CAST(Good AS DECIMAL(18, 2)), 0) AS decimal(18,2)),0)
                                UPDATE #CustomerDashboardReportThisMonth
                                SET FirstCallPercentage = ISNULL(CAST((FirstCall * 100) / NULLIF(CAST(Good AS DECIMAL(18, 2)), 0) AS decimal(18,2)),0),
                                GoodSalesPercentage =ISNULL( CAST((Sales * 100) / NULLIF(CAST(Good AS DECIMAL(18, 2)), 0) AS decimal(18,2)),0)
                                UPDATE #CustomerDashboardReportThisYear
                                SET FirstCallPercentage = ISNULL(CAST((FirstCall * 100) / NULLIF(CAST(Good AS DECIMAL(18, 2)), 0) AS decimal(18,2)),0),
                                GoodSalesPercentage = ISNULL(CAST((Sales * 100) / NULLIF(CAST(Good AS DECIMAL(18, 2)), 0) AS decimal(18,2)),0)
								
                                select * from #CustomerDashboardReportToday
								select * from #CustomerDashboardReportThisWeek
	                            select * from #CustomerDashboardReportThisMonth
	                            select * from #CustomerDashboardReportThisYear

								drop table #TempCustomer
								drop table #TempCustomerBad
								drop table #TempCustomerGood
								drop table #CustomerDashboardReportToday
                                drop table #CustomerDashboardReportThisWeek
                                drop table #CustomerDashboardReportThisMonth
                                drop table #CustomerDashboardReportThisYear
                                drop table #TempEmployee"
;
            }


            try
            {

                rawQuery = string.Format(rawQuery, TodayDateQuery, TodaySalesDateQuery, ThisWeekDateQuery,
                      ThisWeekSalesDateQuery, ThisMonthDateQuery, ThisMonthSalesDateQuery, ThisYearDateQuery, ThisYearSalesDateQuery, SoldbyQuery, SoldbyQuery1, YesterdayDateQuery, YesterdaySalesDateQuery
              , LastWeekDateQuery, LastWeekSalesDateQuery, LastMonthDateQuery, LastMonthSalesDateQuery, LastYearDateQuery, LastYearSalesDateQuery, AptSetQuery
                      );

                using (SqlCommand cmd = GetSQLCommand(rawQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        public DataSet GetCustomerDashboardReprotNew(DashboardReportDateFilter filter)
        {
            var TodayDateQuery = "";
            var TodaySalesDateQuery = "";
            var YesterdayDateQuery = "";
            var YesterdaySalesDateQuery = "";

            var ThisWeekDateQuery = "";
            var ThisWeekSalesDateQuery = "";
            var LastWeekDateQuery = "";
            var LastWeekSalesDateQuery = "";

            var ThisMonthDateQuery = "";
            var ThisMonthSalesDateQuery = "";
            var LastMonthDateQuery = "";
            var LastMonthSalesDateQuery = "";

            var ThisYearDateQuery = "";
            var ThisYearSalesDateQuery = "";
            var LastYearDateQuery = "";
            var LastYearSalesDateQuery = "";

            var SoldbyQuery = " and (cus.SoldBy1 in (select * from #TempEmployee) or cus.AppoinmentSetBy in (select * from #TempEmployee))";
            var SoldbyQuery1 = "and IsLead = 0 and (cus.SoldBy1 in (select * from #TempEmployee) )";
            var AptSetQuery = "  and (cus.AppoinmentSetBy in (select * from #TempEmployee) )";
            if (!string.IsNullOrEmpty(filter.EmpId) && filter.EmpId != "-1")
            {
                SoldbyQuery = string.Format(" and (cus.SoldBy1 in ('{0}') or cus.AppoinmentSetBy in ('{0}'))", filter.EmpId);
                SoldbyQuery1 = string.Format("and cus.IsLead = 0  and (cus.SoldBy1 in ('{0}') )", filter.EmpId);
                AptSetQuery = string.Format("  and (cus.AppoinmentSetBy in ('{0}') )", filter.EmpId);
            }
            if (filter.StartdateToday != new DateTime() && filter.EndDateToday != new DateTime())
            {
                TodayDateQuery = string.Format(" where   cus.CreatedDate  between '{0}' and '{1}'", filter.StartdateToday.SetZeroHour().ClientToUTCTime(), filter.EndDateToday.SetMaxHour().ClientToUTCTime());
                TodaySalesDateQuery = string.Format(" where cus.IsLead = 0 and cus.SalesDate between '{0}' and '{1}'", filter.StartdateToday.SetZeroHour().ClientToUTCTime(), filter.EndDateToday.SetMaxHour().ClientToUTCTime());
                YesterdayDateQuery = string.Format(" where   cus.IsLead = 1 and cus.CreatedDate  between '{0}' and '{1}'", filter.StartDateYesterday.SetZeroHour().ClientToUTCTime(), filter.EndDateYesterday.SetMaxHour().ClientToUTCTime());
                YesterdaySalesDateQuery = string.Format(" where cus.IsLead = 0 and cus.SalesDate between '{0}' and '{1}'", filter.StartDateYesterday.SetZeroHour().ClientToUTCTime(), filter.StartDateYesterday.SetMaxHour().ClientToUTCTime());
            }

            if (filter.StartDateThisWeek != new DateTime() && filter.EndDateThisWeek != new DateTime())
            {
                ThisWeekDateQuery = string.Format(" where    cus.CreatedDate  between '{0}' and '{1}'", filter.StartDateThisWeek.SetZeroHour().ClientToUTCTime(), filter.EndDateThisWeek.SetMaxHour().ClientToUTCTime());
                ThisWeekSalesDateQuery = string.Format(" where IsLead = 0 and cus.SalesDate between '{0}' and '{1}'", filter.StartDateThisWeek.SetZeroHour().ClientToUTCTime(), filter.EndDateThisWeek.SetMaxHour().ClientToUTCTime());
                LastWeekDateQuery = string.Format(" where  cus.IsLead = 1 and cus.CreatedDate  between '{0}' and '{1}'", filter.StartDateLastWeek.SetZeroHour().ClientToUTCTime(), filter.EndDateLastWeek.SetMaxHour().ClientToUTCTime());
                LastWeekSalesDateQuery = string.Format(" where cus.IsLead = 0 and cus.SalesDate between '{0}' and '{1}'", filter.StartDateLastWeek.SetZeroHour().ClientToUTCTime(), filter.EndDateLastWeek.SetMaxHour().ClientToUTCTime());
            }

            if (filter.StartDateThisMonth != new DateTime() && filter.EndDateThisMonth != new DateTime())
            {
                ThisMonthDateQuery = string.Format(" where    cus.CreatedDate  between '{0}' and '{1}'", filter.StartDateThisMonth.SetZeroHour().ClientToUTCTime(), filter.EndDateThisMonth.SetMaxHour().ClientToUTCTime());
                ThisMonthSalesDateQuery = string.Format(" where IsLead = 0 and cus.SalesDate between '{0}' and '{1}'", filter.StartDateThisMonth.SetZeroHour().ClientToUTCTime(), filter.EndDateThisMonth.SetMaxHour().ClientToUTCTime());
                LastMonthDateQuery = string.Format(" where  cus.IsLead = 1 and cus.CreatedDate  between '{0}' and '{1}'", filter.StartDateLastMonth.SetZeroHour().ClientToUTCTime(), filter.EndDateLastMonth.SetMaxHour().ClientToUTCTime());
                LastMonthSalesDateQuery = string.Format(" where cus.IsLead = 0 and cus.SalesDate between '{0}' and '{1}'", filter.StartDateLastMonth.SetZeroHour().ClientToUTCTime(), filter.EndDateLastMonth.SetMaxHour().ClientToUTCTime());
            }

            if (filter.StartDateThisYear != new DateTime() && filter.EndDateThisYear != new DateTime())
            {
                ThisYearDateQuery = string.Format(" where    cus.CreatedDate  between '{0}' and '{1}'", filter.StartDateThisYear.SetZeroHour().ClientToUTCTime(), filter.EndDateThisYear.SetMaxHour().ClientToUTCTime());
                ThisYearSalesDateQuery = string.Format(" where cus.IsLead = 0 and cus.SalesDate between '{0}' and '{1}'", filter.StartDateThisYear.SetZeroHour().ClientToUTCTime(), filter.EndDateThisYear.SetMaxHour().ClientToUTCTime());
                LastYearDateQuery = string.Format(" where  cus.IsLead = 1 and cus.CreatedDate  between '{0}' and '{1}'", filter.StartDateLastYear.SetZeroHour().ClientToUTCTime(), filter.EndDateLastYear.SetMaxHour().ClientToUTCTime());
                LastYearSalesDateQuery = string.Format(" where IsLead = 0 and cus.SalesDate between '{0}' and '{1}'", filter.StartDateLastYear.SetZeroHour().ClientToUTCTime(), filter.EndDateLastYear.SetMaxHour().ClientToUTCTime());
            }

            string rawQuery = @" select cus.Id,cus.MonthlyMonitoringFee, cus.CustomerId,CE.CreatedDay, cus.Soldby1,cus.Status, CE.AppoinmentSetBy,ccclosing.IsLead,cus.CreatedDate,ccclosing.ConvertionDate,cus.JoinDate,cus.SalesDate
								into #TempCustomer
								from customer cus 
								left join CustomerExtended CE on CE.Customerid = cus.Customerid
								LEFT JOIN CustomerCompany ccclosing on ccclosing.CustomerId=cus.CustomerId and ccclosing.IsActive=1
								LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=cus.Status and lkLStatus.DataKey='LeadStatus' where  cus.IsActive = 1 and cus.JoinDate is not null
								

								select #tc.* into #TempCustomerBad
								From #TempCustomer #tc
								LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=#tc.Status and lkLStatus.DataKey='LeadStatus'
								where lkLStatus.AlterDisplayText = 'Bad' and #tc.IsLead = 1

								select #tc.* into #TempCustomerGood
								From #TempCustomer #tc
								LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=#tc.Status and lkLStatus.DataKey='LeadStatus'
								where lkLStatus.AlterDisplayText = 'Good' and #tc.IsLead = 1
								
					            select emp.UserId  into #TempEmployee From Employee emp
								left join UserPermission up on up.UserId = emp.UserId
								left join UserLogin u on u.UserId=up.UserId
								left join PermissionGroup pg on pg.Id = up.PermissionGroupId
								

								select 
							    (Select COUNT(cus.Id)  from #TempCustomer cus {0} and  cus.IsLead=1 {8})  as Leads ,  
                                (Select COUNT(cus.Id)  from #TempCustomer cus {10}  and  cus.IsLead=1 {8})  as PriodLeads ,  

								(Select COUNT(cus.Id)from #TempCustomerGood cus {0}  and  cus.IsLead=1 {8})  as Good  , 
                                (Select COUNT(cus.Id)from #TempCustomerGood cus {10}  and  cus.IsLead=1 {8})  as PriodGood, 

								(Select COUNT(cus.Id) from #TempCustomerBad cus {0}  and  cus.IsLead=1 {8})  as Remove, 
								(Select COUNT(cus.Id) from #TempCustomerBad cus {10}  and  cus.IsLead=1 {8})  as PriodRemove, 

							    (Select COUNT(cus.Id) from #TempCustomer cus  {1} {9} ) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus  {11} {9} ) as PriodSales,

							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus {0} {8}  and cus.monthlymonitoringfee != '')  as RMR , 
							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus   {10} {8} and cus.monthlymonitoringfee != '')  as PriorRMR , 

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus {0}  and  cus.IsLead=1 {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {0}  and  cus.IsLead=1 {8}) , 0)),0) as GoodLeadsPercentage,
	                            ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus {10}  and  cus.IsLead=1 {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {10}  and  cus.IsLead=1 {8}) , 0)),0) as PriodGoodLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus {0}  and  cus.IsLead=1 {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {0}  and  cus.IsLead=1 {8}) , 0)),0) as BadLeadsPercentage,
		                        ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus {10}  and  cus.IsLead=1 {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {10}  and  cus.IsLead=1 {8}) , 0)),0) as PriodBadLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus {1} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus {0} {8}) , 0)),0) as GoodSalesPercentage,
			                    ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus {11} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus {10} {8}) , 0)),0) as PriodGoodSalesPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus {1} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {0} {8}) , 0)),0) as OverallSalesPercentage,
								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus {11} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {10} {8}) , 0)),0) as PriodOverallSalesPercentage,


					            (Select COUNT(cus.Id) from #TempCustomer cus 
								{1} and    CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9}) as  FirstCall,
                                (Select COUNT(cus.Id) from #TempCustomer cus 
								{11} and    CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) {9}) as  PriodFirstCall,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus  {1} and    CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date)  {9}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus  {0} {8}) , 0)),0) as FirstCallPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus  {11} and    CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date)  {9}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus  {10} {8}) , 0)),0) as PriodFirstCallPercentage,

								(Select COUNT(cus.Id) from #TempCustomer cus  {0} {18})  as AptSet,
								(Select COUNT(cus.Id) from #TempCustomer cus  {10}  {18})  as PriodAptSet,

                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus   {0} {18}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus   {0} and cus.IsLead = 1   {8}),0)),0)  as AptSetPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus   {10} {18} ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus      {10} and cus.IsLead = 1  {8}),0)),0)  as PriodAptSetPercentage
								into #CustomerDashboardReportToday

                                select 
							    (Select COUNT(cus.Id)  from #TempCustomer cus {2}  and  cus.IsLead=1 {8})  as Leads ,  
                                (Select COUNT(cus.Id)  from #TempCustomer cus {12}  and  cus.IsLead=1 {8})  as PriodLeads , 

								(Select COUNT(cus.Id)from #TempCustomerGood cus {2}  and  cus.IsLead=1 {8})  as Good  , 
		                        (Select COUNT(cus.Id)from #TempCustomerGood cus {12}  and  cus.IsLead=1 {8})  as PriodGood  , 

								(Select COUNT(cus.Id) from #TempCustomerBad cus {2}  and  cus.IsLead=1 {8})  as Remove, 
								(Select COUNT(cus.Id) from #TempCustomerBad cus {12}  and  cus.IsLead=1 {8})  as PriodRemove, 

							    (Select COUNT(cus.Id) from #TempCustomer cus  {3}   {9} ) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus  {13}   {9}) as PriodSales,

							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus  {2} {8}  and cus.monthlymonitoringfee != '')  as RMR , 
							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus {12} {8}   and cus.monthlymonitoringfee != '')  as PriorRMR , 

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus {2}  and  cus.IsLead=1 {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {2}  and  cus.IsLead=1 {8}) , 0)),0) as GoodLeadsPercentage,
								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus {12}  and  cus.IsLead=1 {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {12}  and  cus.IsLead=1 {8}) , 0)),0) as PriodGoodLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus {2}  and  cus.IsLead=1 {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {2}  and  cus.IsLead=1 {8}) , 0)),0) as BadLeadsPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus {12}  and  cus.IsLead=1 {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {12}  and  cus.IsLead=1 {8}) , 0)),0) as PriodBadLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus {3} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus {2} {8}) , 0)),0) as GoodSalesPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus {13} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus {12} {8}) , 0)),0) as PriodGoodSalesPercentage,


								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus {3} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {2} {8}) , 0)),0) as OverallSalesPercentage,
								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus {13} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {12} {8}) , 0)),0) as PriodOverallSalesPercentage,

					            (Select COUNT(cus.Id) from #TempCustomer cus 
								{3} {9} and    CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) ) as  FirstCall,
                                (Select COUNT(cus.Id) from #TempCustomer cus 
								{13} {9} and    CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date)) as  PriodFirstCall,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus  {3} {9} and    CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus  {2} {8}) , 0)),0) as FirstCallPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus  {13} {9} and    CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus  {12} {8}) , 0)),0) as PriodFirstCallPercentage,

								(Select COUNT(cus.Id) from #TempCustomer cus  {2} {18} )  as AptSet,
								(Select COUNT(cus.Id) from #TempCustomer cus  {12} {18} )  as PriodAptSet,

                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus   {2} {18}  ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus    {2} and cus.IsLead =1  {8}),0)),0)  as AptSetPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus   {12} {18} ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus  {12} and cus.IsLead =1   {8}),0)),0)  as PriodAptSetPercentage
							

								into #CustomerDashboardReportThisWeek

                                select 
							    (Select COUNT(cus.Id)  from #TempCustomer cus {4}  and  cus.IsLead=1 {8})  as Leads , 
	                            (Select COUNT(cus.Id)  from #TempCustomer cus {14}  and  cus.IsLead=1 {8})  as PriodLeads , 

								(Select COUNT(cus.Id)from #TempCustomerGood cus {4}  and  cus.IsLead=1 {8})  as Good  , 
	                            (Select COUNT(cus.Id)from #TempCustomerGood cus {14}  and  cus.IsLead=1 {8})  as PriodGood  ,

								(Select COUNT(cus.Id) from #TempCustomerBad cus {4}  and  cus.IsLead=1 {8})  as Remove, 
								(Select COUNT(cus.Id) from #TempCustomerBad cus {14}  and  cus.IsLead=1 {8})  as PriodRemove, 

							    (Select COUNT(cus.Id) from #TempCustomer cus  {5}   {9}) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus  {15}   {9}) as PriodSales,

					            (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus  {4} {8}  and cus.monthlymonitoringfee != '')  as RMR , 
							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus  {14} {8}  and cus.monthlymonitoringfee != '')  as PriorRMR ,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus {4}  and  cus.IsLead=1 {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {4}  and  cus.IsLead=1 {8}) , 0)),0) as GoodLeadsPercentage,
								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus {14}  and  cus.IsLead=1 {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {14}  and  cus.IsLead=1 {8}) , 0)),0) as PriodGoodLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus {4}  and  cus.IsLead=1 {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {4}  and  cus.IsLead=1 {8}) , 0)),0) as BadLeadsPercentage,
				                ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus {14}  and  cus.IsLead=1 {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {14}  and  cus.IsLead=1 {8}) , 0)),0) as PriodBadLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus {5} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus {4} {8}) , 0)),0) as GoodSalesPercentage,
								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus {15} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus {14} {8}) , 0)),0) as PriodGoodSalesPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus {5} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {4} {8}) , 0)),0) as OverallSalesPercentage,
		                        ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus {15} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {14} {8}) , 0)),0) as PriodOverallSalesPercentage,

					           	(Select COUNT(cus.Id) from #TempCustomer cus 
								{5} {9} and    CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date)) as  FirstCall,
	                            (Select COUNT(cus.Id) from #TempCustomer cus 
								{15} {9} and    CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date)) as  PriodFirstCall,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus  {5} {9} and   CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus  {4} {8}) , 0)),0) as FirstCallPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus  {15} {9} and    CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date) ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus  {14} {8}) , 0)),0) as PriodFirstCallPercentage,

								(Select COUNT(cus.Id) from #TempCustomer cus  {4} {18} )  as AptSet,
								(Select COUNT(cus.Id) from #TempCustomer cus  {14} {18})  as PriodAptSet,

                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus   {4} {18}  ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus    {4}  and cus.IsLead =1 {8}),0)),0)  as AptSetPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus   {14} {18}  ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus    {14} and cus.IsLead =1  {8}) ,0)),0)  as PriodAptSetPercentage
								into #CustomerDashboardReportThisMonth

                                select 
							    (Select COUNT(cus.Id)  from #TempCustomer cus {6}  and  cus.IsLead=1 {8})  as Leads ,  
                                (Select COUNT(cus.Id)  from #TempCustomer cus {16}   and  cus.IsLead=1 {8})  as PriodLeads ,  

								(Select COUNT(cus.Id)from #TempCustomerGood cus {6}  and  cus.IsLead=1 {8})  as Good  , 
	                            (Select COUNT(cus.Id)from #TempCustomerGood cus {16}  and  cus.IsLead=1 {8})  as PriodGood  , 

								(Select COUNT(cus.Id) from #TempCustomerBad cus {6}  and  cus.IsLead=1 {8})  as Remove, 
								(Select COUNT(cus.Id) from #TempCustomerBad cus {16}  and  cus.IsLead=1 {8})  as PriodRemove, 

							    (Select COUNT(cus.Id) from #TempCustomer cus  {7}    {9}) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus  {17}    {9}) as PriodSales,

					            (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus   {6} {8} and cus.monthlymonitoringfee != '' )  as RMR , 
							    (select SUM(CAST(monthlymonitoringfee as float)) from #TempCustomer cus {16} {8}   and cus.monthlymonitoringfee != '' )  as PriorRMR ,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus {6}  and  cus.IsLead=1 {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {6}  and  cus.IsLead=1 {8}) , 0)),0) as GoodLeadsPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomerGood cus {16}  and  cus.IsLead=1 {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {16}  and  cus.IsLead=1 {8}) , 0)),0) as PriodGoodLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus {6}  and  cus.IsLead=1 {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {6}  and  cus.IsLead=1 {8}) , 0)),0) as BadLeadsPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomerBad cus {16}  and  cus.IsLead=1 {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {16}  and  cus.IsLead=1 {8}) , 0)),0) as PriodBadLeadsPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus {7} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus {6} {8}) , 0)),0) as GoodSalesPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus {17} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus {16} {8}) , 0)),0) as PriodGoodSalesPercentage,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus {7} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {6} {8}) , 0)),0) as OverallSalesPercentage,
			                    ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus {17} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {16} {8}) , 0)),0) as PriodOverallSalesPercentage,

					           	(Select COUNT(cus.Id) from #TempCustomer cus 
								{7} {9} and    CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date)) as  FirstCall,
	                            (Select COUNT(cus.Id) from #TempCustomer cus 
								{17} {9} and    CAST(cus.CreatedDay as date) = CAST(cus.SalesDate as date)) as  PriodFirstCall,

								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus  {7} {9} and    cus.CreatedDate  = cus.SalesDate) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus  {6} {8}) , 0)),0) as FirstCallPercentage,
                                ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus  {17} {9} and    cus.CreatedDate  =cus.SalesDate ) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus  {16} {8}) , 0)),0) as PriodFirstCallPercentage,

								(Select COUNT(cus.Id) from #TempCustomer cus  {6} {18}  )  as AptSet,
	                            (Select COUNT(cus.Id) from #TempCustomer cus  {16} {18})  as PriodAptSet,

 								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus   {6}  {18})  * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus   {6} and cus.IsLead =1  {8}),0)),0)  as AptSetPercentage,
 								ISNULL(((Select COUNT(cus.Id)  from #TempCustomer cus   {16}  {18})* 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomerGood cus    {16} and cus.IsLead =1  {8}),0)),0)  as PriodAptSetPercentage
								into #CustomerDashboardReportThisYear

								select * from #CustomerDashboardReportToday
								select * from #CustomerDashboardReportThisWeek
	                            select * from #CustomerDashboardReportThisMonth
	                            select * from #CustomerDashboardReportThisYear

								drop table #TempCustomer
								drop table #TempCustomerBad
								drop table #TempCustomerGood
								drop table #CustomerDashboardReportToday
                                drop table #CustomerDashboardReportThisWeek
                                drop table #CustomerDashboardReportThisMonth
                                drop table #CustomerDashboardReportThisYear"
;

            try
            {

                rawQuery = string.Format(rawQuery, TodayDateQuery, TodaySalesDateQuery, ThisWeekDateQuery,
                      ThisWeekSalesDateQuery, ThisMonthDateQuery, ThisMonthSalesDateQuery, ThisYearDateQuery, ThisYearSalesDateQuery, SoldbyQuery, SoldbyQuery1, YesterdayDateQuery, YesterdaySalesDateQuery
              , LastWeekDateQuery, LastWeekSalesDateQuery, LastMonthDateQuery, LastMonthSalesDateQuery, LastYearDateQuery, LastYearSalesDateQuery, AptSetQuery
                      );

                using (SqlCommand cmd = GetSQLCommand(rawQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }

        }
        public DataTable GetTotalUnassignedLeadsCount(Guid CompanyId, DateTime Start, DateTime End)
        {
            string filterbydaterange = string.Empty;
            if (Start != new DateTime() && End != new DateTime())
            {
                var StartDate = Start.SetZeroHour().ClientToUTCTime();
                var EndDate = End.SetMaxHour().ClientToUTCTime();
                filterbydaterange = string.Format(@"AND cus.CreatedDate between '{0}' and '{1}'", StartDate, EndDate);
            }
            string sqlQuery = @"select count(*) as Total FROM Customer cus
                                LEFT JOIN CustomerCompany Ccom ON cus.CustomerId = Ccom.CustomerId
                                        WHERE Ccom.CompanyId = '{0}' 
                                        AND Ccom.IsLead = 1
                                        and Ccom.IsActive = 1
                                        and cus.IsActive = 1
										and (installer is null Or installer ='' Or installer='00000000-0000-0000-0000-000000000000')
                                        {1}";
            try
            {
                sqlQuery = string.Format(sqlQuery, CompanyId, filterbydaterange);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataSet GetCustomerFundedDashboardReprot(DateTime StartDate, DateTime EndDate, string EmployeeId)
        {
            var DateQuery = "";
            var SalesDateQuery = "";

            var SoldbyQuery = " and (cus.SoldBy1 in (select * from #TempEmployee) or cus.AppoinmentSetBy in (select * from #TempEmployee))";
            var SoldbyQuery1 = "and IsLead = 0 and (cus.SoldBy1 in (select * from #TempEmployee) )";

            if (!string.IsNullOrEmpty(EmployeeId) && EmployeeId != "-1")
            {
                SoldbyQuery = string.Format(" and (cus.SoldBy1 in ('{0}') or cus.AppoinmentSetBy in ('{0}'))", EmployeeId);
                SoldbyQuery1 = string.Format("and IsLead = 0 and (cus.SoldBy1 in ('{0}') )", EmployeeId);

            }
            if (StartDate != new DateTime() && EndDate != new DateTime())
            {
                DateQuery = string.Format(" and  CAST(cus.CustomerFundedDate AS date) between '{0}' and '{1}'", StartDate.SetZeroHour(), EndDate.SetMaxHour());
                SalesDateQuery = string.Format(" and CAST(cus.SalesDate as date) between '{0}' and '{1}'", StartDate.SetZeroHour(), EndDate.SetMaxHour());

            }
            string empIdQuery = "";
            if (!string.IsNullOrEmpty(EmployeeId) && EmployeeId != "-1")
            {
                empIdQuery = string.Format(" and emp.UserId = '{0}'", EmployeeId);
            }
            string rawQuery = @" select cus.Id, cus.CustomerId, cus.Soldby1,cus.Status, CE.AppoinmentSetBy,cus.CustomerFunded,ccclosing.IsLead,cus.CreatedDate,ccclosing.ConvertionDate,cus.JoinDate,cus.SalesDate,cus.CustomerFundedDate 
								into #TempCustomer
								from customer cus 
								left join CustomerExtended CE on CE.Customerid = cus.Customerid
								LEFT JOIN CustomerCompany ccclosing on ccclosing.CustomerId=cus.CustomerId
								LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=cus.Status and lkLStatus.DataKey='LeadStatus'
								where lkLStatus.AlterDisplayText !='' and CE.IsTestAccount != 1

					            select emp.UserId  into #TempEmployee From Employee emp
								left join UserPermission up on up.UserId = emp.UserId
								left join UserLogin u on u.UserId=up.UserId
								left join PermissionGroup pg on pg.Id = up.PermissionGroupId
								where emp.IsSalesMatrix=1 and emp.IsCurrentEmployee=1 {4}

								select 
							    (Select COUNT(cus.Id)  from #TempCustomer cus   where 1=1 {3} {1})  as Sales ,  
                   

				                (Select COUNT(cus.Id) from #TempCustomer cus
						        where  cus.IsLead=0 and cus.CustomerFunded=1  {3}{0}) Funded,


                                ISNULL(((Select COUNT(cus.Id) from #TempCustomer cus
                                where  cus.IsLead=0 and cus.CustomerFunded=1  {3}{0})* 100.0 /
                                NULLIF((Select COUNT(cus.Id) from #TempCustomer cus
                                where  cus.IsLead=0  {3}{1}), 0)),0) as FundedPercentage,

                                (Select UserX from SalesMatrix sm where sm.Type='Soldtofunded' and 
                                ISNULL((Select COUNT(cus.Id) from #TempCustomer cus 
                               where cus.IsLead=0 and cus.CustomerFunded=1  {3}{0})* 100.0 /
                                (NULLIF((Select COUNT(cus.Id) from #TempCustomer cus 
                                where  cus.IsLead=0  {3}{1}), 0)),0) between sm.Min and sm.Max
                                ) as UserX
								"
;

            try
            {

                rawQuery = string.Format(rawQuery, DateQuery, SalesDateQuery, SoldbyQuery, SoldbyQuery1, empIdQuery);

                using (SqlCommand cmd = GetSQLCommand(rawQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }

        }
        public DataSet GetAllLeadForDashboard(DateTime StartDate, DateTime EndDate, int pageno, int pagesize)
        {

            var DateQuery = "";
            var SoldbyQuery = " and (cus.SoldBy1 in (select * from #TempEmployee) or cus.AppoinmentSetBy in (select * from #TempEmployee))";
            var SoldbyQuery1 = "and IsLead = 0 and (cus.SoldBy1 in (select * from #TempEmployee) )";

            DateQuery = string.Format(" where (CAST(cus.CreatedDate AS date) between '{0}' and '{1}')", StartDate.SetZeroHour(), StartDate.SetMaxHour());





            string rawQuery = @" declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

                                select cus.Id,cus.FirstName,cus.LastName,cus.AccountNo,cus.LeadSource, cus.PrimaryPhone,cus.EmailAddress, cus.CustomerId, cus.City,cus.State,cus.ZipCode,cus.Status, CE.AppoinmentSetBy,ccclosing.IsLead,cus.CreatedDate,
                                ccclosing.ConvertionDate,cus.JoinDate,cus.SalesDate,cus.SoldBy1
								into #TempCustomer
								from customer cus 
								left join CustomerExtended CE on CE.Customerid = cus.Customerid
								LEFT JOIN CustomerCompany ccclosing on ccclosing.CustomerId=cus.CustomerId
								LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=cus.Status and lkLStatus.DataKey='LeadStatus'
								where lkLStatus.AlterDisplayText !='' and CE.IsTestAccount != 1

								select #tc.* into #TempCustomerBad
								From #TempCustomer #tc
								LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=#tc.Status and lkLStatus.DataKey='LeadStatus'
								where lkLStatus.AlterDisplayText = 'Bad' 

								select #tc.* into #TempCustomerGood
								From #TempCustomer #tc
								LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=#tc.Status and lkLStatus.DataKey='LeadStatus'
								where lkLStatus.AlterDisplayText = 'Good'
								
					            select emp.UserId  into #TempEmployee From Employee emp
								left join UserPermission up on up.UserId = emp.UserId
								left join UserLogin u on u.UserId=up.UserId
								left join PermissionGroup pg on pg.Id = up.PermissionGroupId
								where emp.IsSalesMatrix=1 and emp.IsCurrentEmployee=1

							    Select *  into #CusData  from #TempCustomer cus {0} {1}  
                                
                                select top(@pagesize) * from #CusData
                                where Id not in (Select TOP (@pagestart)  Id from #CusData #cd order by #cd.Id desc)
                                order by Id desc
                                select COUNT(*) TotalCustomer from #CusData
                                drop table #CusData
							    

								drop table #TempCustomer
								drop table #TempCustomerBad
								drop table #TempCustomerGood
                                ";

            try
            {

                rawQuery = string.Format(rawQuery, DateQuery, SoldbyQuery);

                using (SqlCommand cmd = GetSQLCommand(rawQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }


        }
        public DataSet GetPackageDashboardReprot(DashboardReportDateFilter filter)
        {
            var TodayDateQuery = "";
            var TodaySalesDateQuery = "";
            var YesterdayDateQuery = "";
            var YesterdaySalesDateQuery = "";

            var ThisWeekDateQuery = "";
            var ThisWeekSalesDateQuery = "";
            var LastWeekDateQuery = "";
            var LastWeekSalesDateQuery = "";

            var ThisMonthDateQuery = "";
            var ThisMonthSalesDateQuery = "";
            var LastMonthDateQuery = "";
            var LastMonthSalesDateQuery = "";

            var ThisYearDateQuery = "";
            var ThisYearSalesDateQuery = "";
            var LastYearDateQuery = "";
            var LastYearSalesDateQuery = "";


            var SoldbyQuery1 = "and IsLead = 0 and (cus.SoldBy1 in (select * from #TempEmployee) )";
            if (!string.IsNullOrEmpty(filter.EmpId) && filter.EmpId != "-1")
            {
                SoldbyQuery1 = string.Format("and IsLead = 0 and (cus.SoldBy1 in ('{0}') )", filter.EmpId);
            }
            if (filter.StartdateToday != new DateTime() && filter.EndDateToday != new DateTime())
            {
                TodayDateQuery = string.Format(" and CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartdateToday.SetZeroHour(), filter.EndDateToday.SetMaxHour());
                TodaySalesDateQuery = string.Format(" and CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartdateToday.SetZeroHour(), filter.EndDateToday.SetMaxHour());
                YesterdayDateQuery = string.Format(" and CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateYesterday.SetZeroHour(), filter.EndDateYesterday.SetMaxHour());
                YesterdaySalesDateQuery = string.Format(" and CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateYesterday.SetZeroHour(), filter.StartDateYesterday.SetMaxHour());
            }

            if (filter.StartDateThisWeek != new DateTime() && filter.EndDateThisWeek != new DateTime())
            {
                ThisWeekDateQuery = string.Format(" and  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateThisWeek.SetZeroHour(), filter.EndDateThisWeek.SetMaxHour());
                ThisWeekSalesDateQuery = string.Format(" and CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateThisWeek.SetZeroHour(), filter.EndDateThisWeek.SetMaxHour());
                LastWeekDateQuery = string.Format(" and  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateLastWeek.SetZeroHour(), filter.EndDateLastWeek.SetMaxHour());
                LastWeekSalesDateQuery = string.Format(" and CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateLastWeek.SetZeroHour(), filter.EndDateLastWeek.SetMaxHour());
            }

            if (filter.StartDateThisMonth != new DateTime() && filter.EndDateThisMonth != new DateTime())
            {
                ThisMonthDateQuery = string.Format(" and  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateThisMonth.SetZeroHour(), filter.EndDateThisMonth.SetMaxHour());
                ThisMonthSalesDateQuery = string.Format(" and CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateThisMonth.SetZeroHour(), filter.EndDateThisMonth.SetMaxHour());
                LastMonthDateQuery = string.Format(" and  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateLastMonth.SetZeroHour(), filter.EndDateLastMonth.SetMaxHour());
                LastMonthSalesDateQuery = string.Format(" and CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateLastMonth.SetZeroHour(), filter.EndDateLastMonth.SetMaxHour());
            }

            if (filter.StartDateThisYear != new DateTime() && filter.EndDateThisYear != new DateTime())
            {
                ThisYearDateQuery = string.Format(" and  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateThisYear.SetZeroHour(), filter.EndDateThisYear.SetMaxHour());
                ThisYearSalesDateQuery = string.Format(" and CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateThisYear.SetZeroHour(), filter.EndDateThisYear.SetMaxHour());
                LastYearDateQuery = string.Format(" and  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateLastYear.SetZeroHour(), filter.EndDateLastYear.SetMaxHour());
                LastYearSalesDateQuery = string.Format(" and CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateLastYear.SetZeroHour(), filter.EndDateLastYear.SetMaxHour());
            }

            string rawQuery = @" select cus.Id, cus.CustomerId, cus.Soldby1,cus.Status, CE.AppoinmentSetBy,ccclosing.IsLead,cus.CreatedDate,ccclosing.ConvertionDate,cus.JoinDate,cus.SalesDate
								into #TempCustomer
								from customer cus 
								left join CustomerExtended CE on CE.Customerid = cus.Customerid
								LEFT JOIN CustomerCompany ccclosing on ccclosing.CustomerId=cus.CustomerId
								LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=cus.Status and lkLStatus.DataKey='LeadStatus'
								where lkLStatus.AlterDisplayText !='' and CE.IsTestAccount != 1

					            select emp.UserId  into #TempEmployee From Employee emp
								left join UserPermission up on up.UserId = emp.UserId
								left join UserLogin u on u.UserId=up.UserId
								left join PermissionGroup pg on pg.Id = up.PermissionGroupId
								where emp.IsSalesMatrix=1 and emp.IsCurrentEmployee=1

                            
                                select  cusapp.Id as appId,cus.Id,cusapp.EquipName,pk.SmartSystemTypeId ,ccclosing.IsLead,cus.SoldBy1,cus.CreatedDate into #TempPackageCustomer from PackageCustomer pk
								LEFT JOIN CustomerCompany ccclosing on ccclosing.CustomerId=pk.CustomerId
                                left join customer cus on cus.CustomerId = pk.CustomerId
                                left join customerpackageservice pkgservice on pkgservice.CustomerId = cus.CustomerId
                                left join CustomerAppointmentEquipment cusapp on cusapp.Id = pkgservice.AppointmentEquipmentIntId
                                
                                SELECT a.* into #PackageCustomer
                                FROM #TempPackageCustomer a
                                INNER JOIN 
                                  (SELECT Id,
                                    MIN(appId) as appId
                                  FROM #TempPackageCustomer 
                                  GROUP BY Id 
                                ) AS b
                                  ON a.Id = b.Id 
                                  AND a.appId = b.appId
                                  order by Id desc

								select 
							    (Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {1} {8} ) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {10} {8} ) as PriorSales,

                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Cellular Communicator' and cus.SmartSystemTypeId = 2   {0} {8} ) as Cellular,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Cellular Communicator' and cus.SmartSystemTypeId = 2   {9} {8} ) as PriorCellular,


								ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Cellular Communicator' and cus.SmartSystemTypeId = 2   {0} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {1} {8}) , 0)),0) as CellularPercentage,
			                    ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Cellular Communicator' and cus.SmartSystemTypeId = 2   {9} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {10} {8}) , 0)),0) as PriorCellularPercentage,

                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.SmartSystemTypeId = 3    {0} {8} ) as Smart,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.SmartSystemTypeId = 3    {9} {8} ) as PriorSmart,

								ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.SmartSystemTypeId = 3   {0} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {1} {8}) , 0)),0) as SmartPercentage,
			                    ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.SmartSystemTypeId = 3    {9} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {10} {8}) , 0)),0) as PriorSmartPercentage,

                                (Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName != 'Cellular Communicator' and cus.SmartSystemTypeId = 2    {0} {8} ) as Standard,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName != 'Cellular Communicator' and cus.SmartSystemTypeId = 2     {9} {8} ) as PriorStandard,

								ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName != 'Cellular Communicator' and cus.SmartSystemTypeId = 2    {0} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {1} {8}) , 0)),0) as StandardPercentage,
			                    ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName != 'Cellular Communicator' and cus.SmartSystemTypeId = 2   {9} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {10} {8}) , 0)),0) as PriorStandardPercentage,


                                (Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Platinum Service Plan' {0} {8} ) as PSP,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Platinum Service Plan'   {9} {8} ) as PriorPSP,

								ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Platinum Service Plan'     {0} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {1} {8}) , 0)),0) as PSPPercentage,
			                    ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Platinum Service Plan'     {9} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {10} {8}) , 0)),0) as PriorPSPPercentage,

                                (Select COUNT(cus.Id) from #PackageCustomer cus where   cus.EquipName = 'Gold Service Plan'    {0} {8} ) as GSP,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where   cus.EquipName = 'Gold Service Plan'     {9} {8} ) as PriorGSP,

								ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Gold Service Plan'    {0} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {1} {8}) , 0)),0) as GSPPercentage,
			                    ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where   cus.EquipName = 'Gold Service Plan'   {9} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {10} {8}) , 0)),0) as PriorGSPPercentage
								into #CustomerDashboardReportToday

                                select 
							    (Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {3} {8} ) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {12} {8} ) as PriorSales,

                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Cellular Communicator' and cus.SmartSystemTypeId = 2   {2} {8} ) as Cellular,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Cellular Communicator' and cus.SmartSystemTypeId = 2   {11} {8} ) as PriorCellular,

	                            ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Cellular Communicator' and cus.SmartSystemTypeId = 2   {2} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {3} {8}) , 0)),0) as CellularPercentage,
			                    ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Cellular Communicator' and cus.SmartSystemTypeId = 2   {11} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {12} {8}) , 0)),0) as PriorCellularPercentage,


                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.SmartSystemTypeId = 3     {2} {8} ) as Smart,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.SmartSystemTypeId = 3     {11} {8} ) as PriorSmart,

	                            ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.SmartSystemTypeId = 3    {2} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {3} {8}) , 0)),0) as SmartPercentage,
			                    ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.SmartSystemTypeId = 3    {11} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {12} {8}) , 0)),0) as PriorSmartPercentage,

                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName != 'Cellular Communicator' and cus.SmartSystemTypeId = 2      {2} {8} ) as Standard,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName != 'Cellular Communicator' and cus.SmartSystemTypeId = 2      {11} {8} ) as PriorStandard,

	                            ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName != 'Cellular Communicator' and cus.SmartSystemTypeId = 2     {2} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {3} {8}) , 0)),0) as StandardPercentage,
			                    ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName != 'Cellular Communicator' and cus.SmartSystemTypeId = 2    {11} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {12} {8}) , 0)),0) as PriorStandardPercentage,

                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Platinum Service Plan'    {2} {8} ) as PSP,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Platinum Service Plan'     {11} {8} ) as PriorPSP,

	                            ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Platinum Service Plan'   {2} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {3} {8}) , 0)),0) as PSPPercentage,
			                    ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Platinum Service Plan'   {11} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {12} {8}) , 0)),0) as PriorPSPPercentage,    

                                (Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Gold Service Plan'   {2} {8} ) as GSP,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Gold Service Plan'     {11} {8} ) as PriorGSP,

	                            ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Gold Service Plan'     {2} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {3} {8}) , 0)),0) as GSPPercentage,
			                    ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Gold Service Plan'    {11} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {12} {8}) , 0)),0) as PriorGSPPercentage  
								into #CustomerDashboardReportThisWeek

                                select 
							    (Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {5} {8} ) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {14} {8} ) as PriorSales,

                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Cellular Communicator' and cus.SmartSystemTypeId = 2   {4} {8} ) as Cellular,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Cellular Communicator' and cus.SmartSystemTypeId = 2   {13} {8} ) as PriorCellular,

	                            ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Cellular Communicator' and cus.SmartSystemTypeId = 2   {4} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {5} {8}) , 0)),0) as CellularPercentage,
			                    ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Cellular Communicator' and cus.SmartSystemTypeId = 2   {13} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {14} {8}) , 0)),0) as PriorCellularPercentage,

                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.SmartSystemTypeId = 3   {4} {8} ) as Smart,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.SmartSystemTypeId = 3   {13} {8} ) as PriorSmart,

	                            ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where  cus.SmartSystemTypeId = 3   {4} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {5} {8}) , 0)),0) as SmartPercentage,
			                    ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.SmartSystemTypeId = 3    {13} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {14} {8}) , 0)),0) as PriorSmartPercentage,

                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName != 'Cellular Communicator' and cus.SmartSystemTypeId = 2     {4} {8} ) as Standard,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName != 'Cellular Communicator' and cus.SmartSystemTypeId = 2     {13} {8} ) as PriorStandard,

	                            ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName != 'Cellular Communicator' and cus.SmartSystemTypeId = 2     {4} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {5} {8}) , 0)),0) as StandardPercentage,
			                    ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName != 'Cellular Communicator' and cus.SmartSystemTypeId = 2      {13} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {14} {8}) , 0)),0) as PriorStandardPercentage,

                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Platinum Service Plan'    {4} {8} ) as PSP,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Platinum Service Plan'     {13} {8} ) as PriorPSP,

	                            ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Platinum Service Plan'     {4} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {5} {8}) , 0)),0) as PSPPercentage,
			                    ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Platinum Service Plan'     {13} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {14} {8}) , 0)),0) as PriorPSPPercentage,

                                (Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Gold Service Plan'   {4} {8} ) as GSP,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Gold Service Plan'   {13} {8} ) as PriorGSP,

	                            ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Gold Service Plan'    {4} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {5} {8}) , 0)),0) as GSPPercentage,
			                    ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Gold Service Plan'     {13} {8}) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {14} {8}) , 0)),0) as PriorGSPPercentage
								into #CustomerDashboardReportThisMonth

                                select 
							    (Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {7} {8} ) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {16} {8} ) as PriorSales,

                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Cellular Communicator' and cus.SmartSystemTypeId = 2   {6} {8} ) as Cellular,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Cellular Communicator' and cus.SmartSystemTypeId = 2   {15} {8} ) as PriorCellular,

                                ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Cellular Communicator' and cus.SmartSystemTypeId = 2   {6} {8}) * 100.0 /
                                NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {7} {8}) , 0)),0) as CellularPercentage,
                                ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.EquipName = 'Cellular Communicator' and cus.SmartSystemTypeId = 2   {15} {8}) * 100.0 /
                                NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {16} {8}) , 0)),0) as PriorCellularPercentage,

                 (Select COUNT(cus.Id) from #PackageCustomer cus where cus.SmartSystemTypeId = 3   {6} {8} ) as Smart,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where  cus.SmartSystemTypeId = 3   {15} {8} ) as PriorSmart,

                                ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.SmartSystemTypeId = 3   {6} {8}) * 100.0 /
                                NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {7} {8}) , 0)),0) as SmartPercentage,
                                ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where cus.SmartSystemTypeId = 3   {15} {8}) * 100.0 /
                                NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {16} {8}) , 0)),0) as PriorSmartPercentage,

                          (Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName != 'Cellular Communicator' and cus.SmartSystemTypeId = 2     {6} {8} ) as Standard,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName != 'Cellular Communicator' and cus.SmartSystemTypeId = 2      {15} {8} ) as PriorStandard,

                                ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName != 'Cellular Communicator' and cus.SmartSystemTypeId = 2     {6} {8}) * 100.0 /
                                NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {7} {8}) , 0)),0) as StandardPercentage,
                                ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName != 'Cellular Communicator' and cus.SmartSystemTypeId = 2      {15} {8}) * 100.0 /
                                NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {16} {8}) , 0)),0) as PriorStandardPercentage,

                                (Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Platinum Service Plan'    {6} {8} ) as PSP,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Platinum Service Plan'    {15} {8} ) as PriorPSP,

                                ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Platinum Service Plan'    {6} {8}) * 100.0 /
                                NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {7} {8}) , 0)),0) as PSPPercentage,
                                ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Platinum Service Plan'      {15} {8}) * 100.0 /
                                NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {16} {8}) , 0)),0) as PriorPSPPercentage,

                                (Select COUNT(cus.Id) from #PackageCustomer cus where   cus.EquipName = 'Gold Service Plan'     {6} {8} ) as GSP,
                                (Select COUNT(cus.Id) from #PackageCustomer cus where   cus.EquipName = 'Gold Service Plan'   {15} {8} ) as PriorGSP,

                                ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where  cus.EquipName = 'Gold Service Plan' {6} {8}) * 100.0 /
                                NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {7} {8}) , 0)),0) as GSPPercentage,
                                ISNULL(((Select COUNT(cus.Id) from #PackageCustomer cus where   cus.EquipName = 'Gold Service Plan'    {15} {8}) * 100.0 /
                                NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {16} {8}) , 0)),0) as PriorGSPPercentage
								into #CustomerDashboardReportThisYear

								select * from #CustomerDashboardReportToday
								select * from #CustomerDashboardReportThisWeek
	                            select * from #CustomerDashboardReportThisMonth
	                            select * from #CustomerDashboardReportThisYear

								drop table #TempCustomer
						
								drop table #CustomerDashboardReportToday
                                drop table #CustomerDashboardReportThisWeek
                                drop table #CustomerDashboardReportThisMonth
                                drop table #CustomerDashboardReportThisYear
			                    drop table #TempEmployee
                                drop table #TempPackageCustomer
								drop table #PackageCustomer"
;

            try
            {

                rawQuery = string.Format(rawQuery, TodayDateQuery, TodaySalesDateQuery, ThisWeekDateQuery,
                      ThisWeekSalesDateQuery, ThisMonthDateQuery, ThisMonthSalesDateQuery, ThisYearDateQuery, ThisYearSalesDateQuery, SoldbyQuery1, YesterdayDateQuery, YesterdaySalesDateQuery
              , LastWeekDateQuery, LastWeekSalesDateQuery, LastMonthDateQuery, LastMonthSalesDateQuery, LastYearDateQuery, LastYearSalesDateQuery
                      );

                using (SqlCommand cmd = GetSQLCommand(rawQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        public DataSet GetPaymentDashboardReprot(DashboardReportDateFilter filter)
        {
            var TodayDateQuery = "";
            var TodaySalesDateQuery = "";
            var YesterdayDateQuery = "";
            var YesterdaySalesDateQuery = "";

            var ThisWeekDateQuery = "";
            var ThisWeekSalesDateQuery = "";
            var LastWeekDateQuery = "";
            var LastWeekSalesDateQuery = "";

            var ThisMonthDateQuery = "";
            var ThisMonthSalesDateQuery = "";
            var LastMonthDateQuery = "";
            var LastMonthSalesDateQuery = "";

            var ThisYearDateQuery = "";
            var ThisYearSalesDateQuery = "";
            var LastYearDateQuery = "";
            var LastYearSalesDateQuery = "";


            var SoldbyQuery1 = "and IsLead = 0 and (cus.SoldBy1 in (select * from #TempEmployee) )";
            if (!string.IsNullOrEmpty(filter.EmpId) && filter.EmpId != "-1")
            {
                SoldbyQuery1 = string.Format("and IsLead = 0 and (cus.SoldBy1 in ('{0}') )", filter.EmpId);
            }
            if (filter.StartdateToday != new DateTime() && filter.EndDateToday != new DateTime())
            {
                TodayDateQuery = string.Format(" and CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartdateToday.SetZeroHour(), filter.EndDateToday.SetMaxHour());
                TodaySalesDateQuery = string.Format(" and CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartdateToday.SetZeroHour(), filter.EndDateToday.SetMaxHour());
                YesterdayDateQuery = string.Format(" and CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateYesterday.SetZeroHour(), filter.EndDateYesterday.SetMaxHour());
                YesterdaySalesDateQuery = string.Format(" and CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateYesterday.SetZeroHour(), filter.StartDateYesterday.SetMaxHour());
            }

            if (filter.StartDateThisWeek != new DateTime() && filter.EndDateThisWeek != new DateTime())
            {
                ThisWeekDateQuery = string.Format(" and  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateThisWeek.SetZeroHour(), filter.EndDateThisWeek.SetMaxHour());
                ThisWeekSalesDateQuery = string.Format(" and CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateThisWeek.SetZeroHour(), filter.EndDateThisWeek.SetMaxHour());
                LastWeekDateQuery = string.Format(" and  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateLastWeek.SetZeroHour(), filter.EndDateLastWeek.SetMaxHour());
                LastWeekSalesDateQuery = string.Format(" and CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateLastWeek.SetZeroHour(), filter.EndDateLastWeek.SetMaxHour());
            }

            if (filter.StartDateThisMonth != new DateTime() && filter.EndDateThisMonth != new DateTime())
            {
                ThisMonthDateQuery = string.Format(" and  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateThisMonth.SetZeroHour(), filter.EndDateThisMonth.SetMaxHour());
                ThisMonthSalesDateQuery = string.Format(" and CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateThisMonth.SetZeroHour(), filter.EndDateThisMonth.SetMaxHour());
                LastMonthDateQuery = string.Format(" and  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateLastMonth.SetZeroHour(), filter.EndDateLastMonth.SetMaxHour());
                LastMonthSalesDateQuery = string.Format(" and CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateLastMonth.SetZeroHour(), filter.EndDateLastMonth.SetMaxHour());
            }

            if (filter.StartDateThisYear != new DateTime() && filter.EndDateThisYear != new DateTime())
            {
                ThisYearDateQuery = string.Format(" and  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateThisYear.SetZeroHour(), filter.EndDateThisYear.SetMaxHour());
                ThisYearSalesDateQuery = string.Format(" and CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateThisYear.SetZeroHour(), filter.EndDateThisYear.SetMaxHour());
                LastYearDateQuery = string.Format(" and  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateLastYear.SetZeroHour(), filter.EndDateLastYear.SetMaxHour());
                LastYearSalesDateQuery = string.Format(" and CAST(cus.SalesDate as date) between '{0}' and '{1}'", filter.StartDateLastYear.SetZeroHour(), filter.EndDateLastYear.SetMaxHour());
            }

            string rawQuery = @" select cus.Id, cus.CustomerId, cus.Soldby1,cus.Status, CE.AppoinmentSetBy,ccclosing.IsLead,cus.CreatedDate,ccclosing.ConvertionDate,cus.JoinDate,cus.SalesDate
								into #TempCustomer
								from customer cus 
								left join CustomerExtended CE on CE.Customerid = cus.Customerid
								LEFT JOIN CustomerCompany ccclosing on ccclosing.CustomerId=cus.CustomerId
								LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=cus.Status and lkLStatus.DataKey='LeadStatus'
								where lkLStatus.AlterDisplayText !='' and CE.IsTestAccount != 1

					            select emp.UserId  into #TempEmployee From Employee emp
								left join UserPermission up on up.UserId = emp.UserId
								left join UserLogin u on u.UserId=up.UserId
								left join PermissionGroup pg on pg.Id = up.PermissionGroupId
								where emp.IsCurrentEmployee=1

                            
                                select  paycus.Payfor ,inv.TotalAmount,paycus.InvoiceId,payProfile.Type, cus.Id,ccclosing.IsLead,cus.SoldBy1,cus.CreatedDate into #PaymentCustomer 
                                from paymentinfocustomer paycus
                                LEFT JOIN CustomerCompany ccclosing on ccclosing.CustomerId=paycus.CustomerId
                                left join customer cus on cus.CustomerId = paycus.CustomerId
                                left join paymentprofilecustomer payProfile on payProfile.PaymentInfoId = paycus.PaymentInfoId
                                left join Invoice inv on inv.InvoiceId = paycus.InvoiceId
                                where  (payProfile.Type like  'CC%' or payProfile.Type =  'Financed' )   and inv.InvoiceId != ''  

								select 
							    (Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {1} {8} ) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {10} {8} ) as PriorSales,

                                (select COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {0} {8} ) as TotalUpfront,
                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {9} {8} ) as PriorTotalUpfront,

                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {0} {8} ) as CreditCard,
                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%' {9} {8} ) as PriorCreditCard,


                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed'  {0} {8} ) as Financed,
                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed' {9} {8} ) as PriorFinanced,

                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {0} {8} ) as CreditCardAmount,
                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {9} {8} ) as PriorCreditCardAmount,

                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed'  {0} {8} ) as FinancedAmount,
                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed' {9} {8} ) as PriorFinancedAmount,


                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {0} {8} ) as TotalUpfrontAmount,
                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') {9} {8} ) as PriorTotalUpfrontAmount,

								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {0} {8} ) * 100.0 /
								NULLIF( (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {0} {8} ), 0)),0) as CreditCardPercentage,
								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {9} {8} ) * 100.0 /
								NULLIF( (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {9} {8} ), 0)),0) as PriorCreditCardPercentage,

								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed'  {0} {8} ) * 100.0 /
								NULLIF( (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {0} {8} ), 0)),0) as FinancedPercentage,
								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed'  {9} {8} ) * 100.0 /
								NULLIF( (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {9} {8} ), 0)),0) as PriorFinancedPercentage,

                                
								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') {0} {8} ) * 100.0 /
								NULLIF( (Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {1} {8} ), 0)),0) as TotalUpfrontPercentage,
								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {9} {8} ) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {10} {8} ), 0)),0) as PriorTotalUpfrontPercentage

								into #CustomerDashboardReportToday

                                select 
							    (Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {3} {8} ) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {12} {8} ) as PriorSales,

                                (select COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {2} {8} ) as TotalUpfront,
                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {11} {8} ) as PriorTotalUpfront,

                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {2} {8} ) as CreditCard,
                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%' {11} {8} ) as PriorCreditCard,

                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed'  {2} {8} ) as Financed,
                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed' {11} {8} ) as PriorFinanced,

                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {2} {8} ) as CreditCardAmount,
                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {11} {8} ) as PriorCreditCardAmount,

                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed'  {2} {8} ) as FinancedAmount,
                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed' {11} {8} ) as PriorFinancedAmount,


                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {2} {8} ) as TotalUpfrontAmount,
                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') {11} {8} ) as PriorTotalUpfrontAmount,

								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {2} {8} ) * 100.0 /
								NULLIF( (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {2} {8} ), 0)),0) as CreditCardPercentage,
								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {11} {8} ) * 100.0 /
								NULLIF( (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {11} {8} ), 0)),0) as PriorCreditCardPercentage,

								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed'  {2} {8} ) * 100.0 /
								NULLIF( (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {2} {8} ), 0)),0) as FinancedPercentage,
								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed'  {11} {8} ) * 100.0 /
								NULLIF( (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {11} {8} ), 0)),0) as PriorFinancedPercentage,

                                
								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') {2} {8} ) * 100.0 /
								NULLIF( (Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {3} {8} ), 0)),0) as TotalUpfrontPercentage,
								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {11} {8} ) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {12} {8} ), 0)),0) as PriorTotalUpfrontPercentage

								into #CustomerDashboardReportThisWeek

                                select 
							    (Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {5} {8} ) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {14} {8} ) as PriorSales,

                                (select COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {4} {8} ) as TotalUpfront,
                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {13} {8} ) as PriorTotalUpfront,

                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {4} {8} ) as CreditCard,
                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%' {13} {8} ) as PriorCreditCard,

                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed'  {4} {8} ) as Financed,
                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed' {13} {8} ) as PriorFinanced,


                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {4} {8} ) as CreditCardAmount,
                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {13} {8} ) as PriorCreditCardAmount,

                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed'  {4} {8} ) as FinancedAmount,
                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed' {13} {8} ) as PriorFinancedAmount,


                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {4} {8} ) as TotalUpfrontAmount,
                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') {13} {8} ) as PriorTotalUpfrontAmount,

								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {4} {8} ) * 100.0 /
								NULLIF( (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {4} {8} ), 0)),0) as CreditCardPercentage,
								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {13} {8} ) * 100.0 /
								NULLIF( (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {13} {8} ), 0)),0) as PriorCreditCardPercentage,

								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed'  {4} {8} ) * 100.0 /
								NULLIF( (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {4} {8} ), 0)),0) as FinancedPercentage,
								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed'  {13} {8} ) * 100.0 /
								NULLIF( (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {13} {8} ), 0)),0) as PriorFinancedPercentage,

                                
								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') {4} {8} ) * 100.0 /
								NULLIF( (Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {5} {8} ), 0)),0) as TotalUpfrontPercentage,
								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {13} {8} ) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {14} {8} ), 0)),0) as PriorTotalUpfrontPercentage
								into #CustomerDashboardReportThisMonth

                                select 
							    (Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {7} {8} ) as Sales,
                                (Select COUNT(cus.Id) from #TempCustomer cus where 1=1 {16} {8} ) as PriorSales,

                                (select COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {6} {8} ) as TotalUpfront,
                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {15} {8} ) as PriorTotalUpfront,

                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {6} {8} ) as CreditCard,
                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%' {15} {8} ) as PriorCreditCard,

                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed'  {6} {8} ) as Financed,
                                (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed' {15} {8} ) as PriorFinanced,

                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {6} {8} ) as CreditCardAmount,
                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {15} {8} ) as PriorCreditCardAmount,

                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed'  {6} {8} ) as FinancedAmount,
                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed' {15} {8} ) as PriorFinancedAmount,


                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {6} {8} ) as TotalUpfrontAmount,
                                (select Sum(cus.TotalAmount) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') {15} {8} ) as PriorTotalUpfrontAmount,

								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {6} {8} ) * 100.0 /
								NULLIF( (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {6} {8} ), 0)),0) as CreditCardPercentage,
								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type like  'CC%'  {15} {8} ) * 100.0 /
								NULLIF( (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {15} {8} ), 0)),0) as PriorCreditCardPercentage,

								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed'  {6} {8} ) * 100.0 /
								NULLIF( (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {6} {8} ), 0)),0) as FinancedPercentage,
								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') and cus.Type =  'Financed'  {15} {8} ) * 100.0 /
								NULLIF( (select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {15} {8} ), 0)),0) as PriorFinancedPercentage,

                                
								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment') {6} {8} ) * 100.0 /
								NULLIF( (Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {7} {8} ), 0)),0) as TotalUpfrontPercentage,
								ISNULL(((select  COUNT(cus.Id) from #PaymentCustomer cus where (cus.payfor = 'Activation Fee' or cus.payfor = 'Equipment')  {15} {8} ) * 100.0 /
								NULLIF((Select COUNT(cus.Id) from #TempCustomer cus where 1=1  {16} {8} ), 0)),0) as PriorTotalUpfrontPercentage
								into #CustomerDashboardReportThisYear

								select * from #CustomerDashboardReportToday
								select * from #CustomerDashboardReportThisWeek
	                            select * from #CustomerDashboardReportThisMonth
	                            select * from #CustomerDashboardReportThisYear

								drop table #TempCustomer
						
								drop table #CustomerDashboardReportToday
                                drop table #CustomerDashboardReportThisWeek
                                drop table #CustomerDashboardReportThisMonth
                                drop table #CustomerDashboardReportThisYear
			                    drop table #TempEmployee
                    
								drop table #PaymentCustomer"
;

            try
            {

                rawQuery = string.Format(rawQuery, TodayDateQuery, TodaySalesDateQuery, ThisWeekDateQuery,
                      ThisWeekSalesDateQuery, ThisMonthDateQuery, ThisMonthSalesDateQuery, ThisYearDateQuery, ThisYearSalesDateQuery, SoldbyQuery1, YesterdayDateQuery, YesterdaySalesDateQuery
              , LastWeekDateQuery, LastWeekSalesDateQuery, LastMonthDateQuery, LastMonthSalesDateQuery, LastYearDateQuery, LastYearSalesDateQuery
                      );

                using (SqlCommand cmd = GetSQLCommand(rawQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }

        }
        public DataSet GetCustomerFinancedReprot(DashboardReportDateFilter filter)
        {
            var TodayDateQuery = "";
            var TodaySalesDateQuery = "";

            var ThisWeekDateQuery = "";
            var ThisWeekSalesDateQuery = "";

            var ThisMonthDateQuery = "";
            var ThisMonthSalesDateQuery = "";

            var ThisYearDateQuery = "";
            var ThisYearSalesDateQuery = "";

            if (filter.StartdateToday != new DateTime() && filter.EndDateToday != new DateTime())
            {
                TodayDateQuery = string.Format(" where CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartdateToday.SetZeroHour(), filter.EndDateToday.SetMaxHour());
                TodaySalesDateQuery = string.Format(" where CAST(cus.ConvertionDate as date) between '{0}' and '{1}'", filter.StartdateToday.SetZeroHour(), filter.EndDateToday.SetMaxHour());
            }

            if (filter.StartDateThisWeek != new DateTime() && filter.EndDateThisWeek != new DateTime())
            {
                ThisWeekDateQuery = string.Format(" where  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateThisWeek.SetZeroHour(), filter.EndDateThisWeek.SetMaxHour());
                ThisWeekSalesDateQuery = string.Format(" where CAST(cus.ConvertionDate as date) between '{0}' and '{1}'", filter.StartDateThisWeek.SetZeroHour(), filter.EndDateThisWeek.SetMaxHour());
            }

            if (filter.StartDateThisMonth != new DateTime() && filter.EndDateThisMonth != new DateTime())
            {
                ThisMonthDateQuery = string.Format(" where  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateThisMonth.SetZeroHour(), filter.EndDateThisMonth.SetMaxHour());
                ThisMonthSalesDateQuery = string.Format(" where CAST(cus.ConvertionDate as date) between '{0}' and '{1}'", filter.StartDateThisMonth.SetZeroHour(), filter.EndDateThisMonth.SetMaxHour());
            }

            if (filter.StartDateThisYear != new DateTime() && filter.EndDateThisYear != new DateTime())
            {
                ThisYearDateQuery = string.Format(" where  CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", filter.StartDateThisYear.SetZeroHour(), filter.EndDateThisYear.SetMaxHour());
                ThisYearSalesDateQuery = string.Format(" where CAST(cus.ConvertionDate as date) between '{0}' and '{1}'", filter.StartDateThisYear.SetZeroHour(), filter.EndDateThisYear.SetMaxHour());
            }

            string rawQuery = @" select cus.Id, cus.CustomerId, cus.Soldby1,cus.Status, CE.AppoinmentSetBy,ccclosing.IsLead,cus.CreatedDate,ccclosing.ConvertionDate,cus.JoinDate
								into #TempCustomer
								from customer cus 
								left join CustomerExtended CE on CE.Customerid = cus.Customerid
								LEFT JOIN CustomerCompany ccclosing on ccclosing.CustomerId=cus.CustomerId
								LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=cus.Status and lkLStatus.DataKey='LeadStatus'
								where lkLStatus.AlterDisplayText !=''

                                select cus.Id, cus.CustomerId,inv.TotalAmount,inv.status,paycus.type,ccclosing.IsLead,cus.CreatedDate,ccclosing.ConvertionDate,cus.JoinDate
                                into #TempCCCustomer
                                from customer cus 
                                left join CustomerExtended CE on CE.Customerid = cus.Customerid
                                LEFT JOIN CustomerCompany ccclosing on ccclosing.CustomerId=cus.CustomerId
                                LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=cus.Status and lkLStatus.DataKey='LeadStatus'
                                LEFT JOIN PaymentProfileCustomer paycus on paycus.CustomerId = cus.CustomerId
                                left join invoice inv on inv.customerId = cus.customerid
                                where lkLStatus.AlterDisplayText !=''
                                and paycus.Type like 'CC%'
                                and inv.InvoiceFor = 'Equipment'
                                and inv.Status != 'Init'

                                select cus.Id, cus.CustomerId,inv.TotalAmount,inv.status,paycus.type,ccclosing.IsLead,cus.CreatedDate,ccclosing.ConvertionDate,cus.JoinDate
                                into #TempFinancedCustomer
                                from customer cus 
                                left join CustomerExtended CE on CE.Customerid = cus.Customerid
                                LEFT JOIN CustomerCompany ccclosing on ccclosing.CustomerId=cus.CustomerId
                                LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=cus.Status and lkLStatus.DataKey='LeadStatus'
                                LEFT JOIN PaymentProfileCustomer paycus on paycus.CustomerId = cus.CustomerId
                                left join invoice inv on inv.customerId = cus.customerid
                                where lkLStatus.AlterDisplayText !=''
                                and paycus.Type = 'Financed'
                                and inv.InvoiceFor= 'Equipment'
                                and inv.Status != 'Init'

                                select cus.Id, cus.CustomerId,inv.TotalAmount,inv.status,ccclosing.IsLead,cus.CreatedDate,ccclosing.ConvertionDate,cus.JoinDate
                                into #TempUpfrontCustomer
                                from customer cus 
                                left join CustomerExtended CE on CE.Customerid = cus.Customerid
                                LEFT JOIN CustomerCompany ccclosing on ccclosing.CustomerId=cus.CustomerId
                                LEFT JOIN Lookup lkLStatus on lkLStatus.DataValue=cus.Status and lkLStatus.DataKey='LeadStatus'

                                left join invoice inv on inv.customerId = cus.customerid
                                where lkLStatus.AlterDisplayText !=''

                                and inv.InvoiceFor = 'ActivationNonConforming'
                                and inv.Status != 'Init'
                                and inv.TotalAmount > 0







								
								select 
							    (select SUM(CAST(monthlymonitoringfee as float)) from customer cus {0} and monthlymonitoringfee != '')  as RMR ,  
								(Select COUNT(cus.Id)from #TempCCCustomer cus {0})  as CC, 

							    ISNULL(((Select COUNT(cus.Id)  from #TempCCCustomer cus {0}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {1}) , 0)),0) as CCPercentage,

                                (select SUM(TotalAmount) from #TempCCCustomer cus {0})  as CCAmount  , 

	                            (Select COUNT(cus.Id)from #TempFinancedCustomer cus {0})  as Financed , 

								ISNULL(((Select COUNT(cus.Id)  from #TempFinancedCustomer cus {0}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {1}) , 0)),0) as FinancedPercentage,

                                (select SUM(TotalAmount) from #TempFinancedCustomer cus {0})  as FinancedAmount,

								(Select COUNT(cus.Id)from #TempUpfrontCustomer cus {0})  as Upfront , 

                                ISNULL(((Select COUNT(cus.Id)  from #TempUpfrontCustomer cus {0}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {1}) , 0)),0) as UpfrontPercentage,

						        (select SUM(TotalAmount) from #TempUpfrontCustomer cus {0})  as UpfrontAmount  
                                into #CustomerFinancedReportToday
					          

                                select 
							    (select SUM(CAST(monthlymonitoringfee as float)) from customer cus  {2} and monthlymonitoringfee != '')  as RMR ,  
								(Select COUNT(cus.Id)from #TempCCCustomer cus {2})  as CC, 

							    ISNULL(((Select COUNT(cus.Id)  from #TempCCCustomer cus {2}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {3}) , 0)),0) as CCPercentage,

                                (select SUM(TotalAmount) from #TempCCCustomer cus {2})  as CCAmount  , 

	                            (Select COUNT(cus.Id)from #TempFinancedCustomer cus {2})  as Financed , 

								ISNULL(((Select COUNT(cus.Id)  from #TempFinancedCustomer cus {2}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {3}) , 0)),0) as FinancedPercentage,

                                (select SUM(TotalAmount) from #TempFinancedCustomer cus {0})  as FinancedAmount,

								(Select COUNT(cus.Id)from #TempUpfrontCustomer cus {2})  as Upfront , 

                                ISNULL(((Select COUNT(cus.Id)  from #TempUpfrontCustomer cus {2}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {3}) , 0)),0) as UpfrontPercentage,

						        (select SUM(TotalAmount) from #TempUpfrontCustomer cus {2})  as UpfrontAmount  
                                into #CustomerFinancedReportThisWeek

                                select 
							    (select SUM(CAST(monthlymonitoringfee as float)) from customer cus  {4} and monthlymonitoringfee != '')  as RMR ,  
								(Select COUNT(cus.Id)from #TempCCCustomer cus {4})  as CC, 

							    ISNULL(((Select COUNT(cus.Id)  from #TempCCCustomer cus {4}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {5}) , 0)),0) as CCPercentage,

                                (select SUM(TotalAmount) from #TempCCCustomer cus {4})  as CCAmount  , 

	                            (Select COUNT(cus.Id)from #TempFinancedCustomer cus {4})  as Financed , 

								ISNULL(((Select COUNT(cus.Id)  from #TempFinancedCustomer cus {4}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {5}) , 0)),0) as FinancedPercentage,

                                (select SUM(TotalAmount) from #TempFinancedCustomer cus {0})  as FinancedAmount,

								(Select COUNT(cus.Id)from #TempUpfrontCustomer cus {4})  as Upfront , 

                                ISNULL(((Select COUNT(cus.Id)  from #TempUpfrontCustomer cus {4}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {5}) , 0)),0) as UpfrontPercentage,

						        (select SUM(TotalAmount) from #TempUpfrontCustomer cus {4})  as UpfrontAmount  
                                into #CustomerFinancedReportThisMonth

                               select 
							    (select SUM(CAST(monthlymonitoringfee as float)) from customer cus {6} and monthlymonitoringfee != '')  as RMR ,  
								(Select COUNT(cus.Id)from #TempCCCustomer cus {6})  as CC, 

							    ISNULL(((Select COUNT(cus.Id)  from #TempCCCustomer cus {6}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {7}) , 0)),0) as CCPercentage,

                                (select SUM(TotalAmount) from #TempCCCustomer cus {6})  as CCAmount  , 

	                            (Select COUNT(cus.Id)from #TempFinancedCustomer cus {6})  as Financed , 

								ISNULL(((Select COUNT(cus.Id)  from #TempFinancedCustomer cus {6}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {7}) , 0)),0) as FinancedPercentage,

                                (select SUM(TotalAmount) from #TempFinancedCustomer cus {0})  as FinancedAmount,

								(Select COUNT(cus.Id)from #TempUpfrontCustomer cus {6})  as Upfront , 

                                ISNULL(((Select COUNT(cus.Id)  from #TempUpfrontCustomer cus {6}) * 100.0 /
								NULLIF((Select COUNT(cus.Id)from #TempCustomer cus {7}) , 0)),0) as UpfrontPercentage,

						        (select SUM(TotalAmount) from #TempUpfrontCustomer cus {6})  as UpfrontAmount  
                                into #CustomerFinancedReportThisYear

								select * from #CustomerFinancedReportToday
								select * from #CustomerFinancedReportThisWeek
	                            select * from #CustomerFinancedReportThisMonth
	                            select * from #CustomerFinancedReportThisYear

								drop table #TempCustomer
                                drop table #TempCCCustomer
                                drop table #TempFinancedCustomer
                                drop table #TempUpfrontCustomer

							    drop table #CustomerFinancedReportToday
                                drop table #CustomerFinancedReportThisWeek
                                drop table #CustomerFinancedReportThisMonth
                                drop table #CustomerFinancedReportThisYear";

            try
            {

                rawQuery = string.Format(rawQuery, TodayDateQuery, TodaySalesDateQuery, ThisWeekDateQuery,
                    ThisWeekSalesDateQuery, ThisMonthDateQuery, ThisMonthSalesDateQuery, ThisYearDateQuery, ThisYearSalesDateQuery
                    );
                using (SqlCommand cmd = GetSQLCommand(rawQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        public DataSet GetServiceSalesReportList(DateTime? start, DateTime? end, string searchtext, string filtertext, int pageno, int pagesize)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            var DateQuery = "";

            if (start != new DateTime() && end != new DateTime())
            {
                DateQuery = string.Format(" and CAST(cus.CreatedDate AS date) between '{0}' and '{1}'", start.Value.SetZeroHour(), end.Value.SetMaxHour());

            }
            string searchquery = "";
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                searchquery += string.Format(" and (cus.FirstName like '%{0}%' or cus.LastName like '%{0}%' or cus.FirstName + ' ' + cus.LastName like '%{0}%' or cus.BusinessName like '%{0}%' or cus.DBA like '%{0}%')", searchtext);
            }
            string filterquery = "";
            if (!string.IsNullOrWhiteSpace(filtertext) && filtertext != "-1")
            {
                if (filtertext == "Standard")
                {
                    filterquery = " and cus.Standard = 1";
                }
                if (filtertext == "Smart")
                {
                    filterquery = " and cus.Smart = 1";
                }
                if (filtertext == "LandLine")
                {
                    filterquery = " and cus.Standard = 1";
                }
                if (filtertext == "Cellular")
                {
                    filterquery = " and cus.Cellular = 1";
                }
                if (filtertext == "PSP")
                {
                    filterquery = " and cus.PSP = 1";
                }
                if (filtertext == "GSP")
                {
                    filterquery = " and cus.GSP = 1";
                }

            }
            string sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                SET @pagestart=(@pageno-1)* @pagesize 
                                SET @pageend = @pagesize

                                select emp.UserId  into #TempEmployee From Employee emp
                                left join UserPermission up on up.UserId = emp.UserId
                                left join UserLogin u on u.UserId=up.UserId
                                left join PermissionGroup pg on pg.Id = up.PermissionGroupId
                                where emp.IsSalesMatrix=1 and emp.IsCurrentEmployee=1

	
                            
                                select  cusapp.Id as appId,{0} as CustomerName, cus.Id,
                                Case When cusapp.EquipName = 'Cellular Communicator' and pk.SmartSystemTypeId = 2 then 1 Else 0 End As Cellular,
                                Case When pk.SmartSystemTypeId = 3 then 1 Else 0 End As Smart,
                                Case When cusapp.EquipName != 'Cellular Communicator' and pk.SmartSystemTypeId = 2 then 1 Else 0 End As Standard,
                                Case When cusapp.EquipName = 'Platinum Service Plan' then 1 Else 0 End As PSP,
                                Case When cusapp.EquipName = 'Gold Service Plan'  then 1 Else 0 End As GSP,
                                ccclosing.IsLead,cus.SoldBy1,cus.CreatedDate into #TempPackageCustomer from PackageCustomer pk
                                LEFT JOIN CustomerCompany ccclosing on ccclosing.CustomerId=pk.CustomerId
                                left join customer cus on cus.CustomerId = pk.CustomerId
                                left join customerpackageservice pkgservice on pkgservice.CustomerId = cus.CustomerId
                                left join CustomerAppointmentEquipment cusapp on cusapp.Id = pkgservice.AppointmentEquipmentIntId
            
			

                                SELECT a.* into #PackageCustomer
                                FROM #TempPackageCustomer a
                                INNER JOIN 
	                                (SELECT Id,
	                                MIN(appId) as appId
	                                FROM #TempPackageCustomer 
	                                GROUP BY Id 
                                ) AS b
	                                ON a.Id = b.Id 
	                                AND a.appId = b.appId
	                                order by Id desc

                                select * into #TempPackageTable from #PackageCustomer cus where IsLead = 0 and (cus.SoldBy1 in (select * from #TempEmployee)) {1} {2} {3}

								select top(@pagesize)
								* into #TempServiceTable from #TempPackageTable
								where Id not in(select top(@pagestart) Id from #TempPackageTable #cd order by #cd.Id desc)
                                order by Id desc

								select * from #TempServiceTable				

		                        select count(*) TotalCount,sum(Smart) SmartTotal,sum(Standard) StandardTotal,sum(cellular) CellularTotal,sum(PSP) PSPTotal,
                                sum(GSP) GSPTotal
                                from #TempPackageTable

                                drop table #TempPackageTable
	                            drop table #TempServiceTable
								drop table #TempEmployee
								drop table #PackageCustomer
								drop table #TempPackageCustomer";
            try
            {
                sqlQuery = string.Format(sqlQuery, NameSql, DateQuery, searchquery, filterquery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {

                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    if (!string.IsNullOrWhiteSpace(searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(searchtext.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllAccountActivityByCustomerId(Guid customerid)
        {
            string sqlQuery = @"select 
                                cs.*,
                                SP.FirstName+' '+Sp.LastName as InstallerName,
                                emp.FirstName+' '+emp.LastName as SellerName,
								employ.FirstName+' '+employ.LastName as QualityAssurance1,
								amp.FirstName+' '+amp.LastName as QualityAssurance2,
                                createdby.FirstName + ' ' + createdby.LastName as CreatedByVal
                                from Customer cs 
                                left Join Employee SP 
                                on convert(nvarchar(50), SP.UserId )= cs.Installer
                                left Join Employee emp
                                on convert(nvarchar(50), emp.UserId)= cs.Soldby
                                left join Employee employ
								on convert(nvarchar(50), employ.UserId) = cs.QA1
								left join Employee amp
								on convert(nvarchar(50), amp.UserId) = cs.QA2
                                left join Employee createdby on createdby.UserId = cs.CreatedByUid
                                where cs.CustomerId = '{0}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, customerid);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<Customer> GetCustomerListBySubscriptionIdList(string cCSubscriptionList)
        {
            string sqlQuery = @"select * from Customer where AuthorizeRefId in ({0})";
            try
            {
                sqlQuery = string.Format(sqlQuery, cCSubscriptionList);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    return GetList(cmd, -1);
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetCustomerListByCustomerIdList(string CustomerIdList)
        {
            string sqlQuery = @"select cu.*,CASE WHEN cu.BusinessName IS NULL OR cu.BusinessName = '' THEN  cu.FirstName +' '+cu.LastName 
                                ELSE cu.BusinessName
                                END
                                [Name],cc.IsLead from Customer cu 
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId where cu.CustomerId in ({0})
                               ";
            try
            {
                sqlQuery = string.Format(sqlQuery, CustomerIdList);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public bool UpdateBrinksFundingStatusByCustomerIdList(List<string> CustomerIdList)
        {
            string IdList = "";
            if (CustomerIdList.Count != 0)
            {
                foreach (var item in CustomerIdList)
                {
                    IdList += string.Format("'{0}',", item);
                }
                IdList = IdList.Remove(IdList.Length - 1, 1);
            }
            string sqlQuery = @"Update CustomerExtended set BrinksFundingStatus = 'Submitted-Pending' where CustomerId in ({0})
                               ";
            try
            {
                sqlQuery = string.Format(sqlQuery, IdList);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    //DataSet dsResult = GetDataSet(cmd);
                    cmd.Connection.Open();
                    cmd.ExecuteNonQuery();
                    cmd.Connection.Close();
                    return true;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public DataTable GetCustomerNameByCompanyIdandCustomerId(Guid companyid, Guid customerid)
        {
            string sqlQuery = @"select cus.FirstName+' '+cus.LastName as customerName
                                from Customer cus
                                join CustomerCompany cc
                                on cc.CustomerId=cus.CustomerId
                                where cc.CompanyId='{0}'
                                and cc.CustomerId='{1}'
                                and cc.IsLead=0";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyid, customerid);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<Customer> GetAllCustomerWithSystemNo()
        {
            string sqlQuery = @"select * from customer 
                                where (CustomerNo is not null and CustomerNo <>'')
                                or (SecondCustomerNo is not null and SecondCustomerNo <>'')
                                or (AdditionalCustomerNo is not null and AdditionalCustomerNo<>'' )";
            try
            {
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    return GetList(cmd, -1);
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        public List<Customer> GetAllCustomerByCompanyId(Guid companyid)
        {
            string sqlQuery = @"select cus.*
                                from  Customer cus
                                join CustomerCompany cc
                                on cc.CustomerId = cus.CustomerId
                                where cc.CompanyId ='{0}'
                                and cc.IsLead=0
                                and cus.JoinDate is not null";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyid);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    return GetList(cmd, -1);
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<Customer> GetAllLeadByCompanyId(Guid companyid)
        {
            string sqlQuery = @"select cus.*
--select cus.Id,cus.CustomerId,cus.CustomerNo,cus.Title,cus.FirstName,cus.LastName,cus.SSN,cus.Type,cus.BusinessName,cus.DateofBirth,cus.PrimaryPhone,cus.SecondaryPhone,
--cus.CellNo,cus.Fax,cus.EmailAddress,cus.CallingTime,cus.Address,cus.Address2,cus.Street,cus.city,cus.state,cus.ZipCode,cus.Country,cus.StreetPrevious,cus.CityPrevious,cus.StatePrevious,
--cus.ZipCodePrevious,cus.CountryPrevious,cus.AccountNo,cus.IsAlarmCom,cus.CreditScore,cus.CreditScoreValue,cus.ContractTeam,cus.FundingCompany,cus.MonthlyMonitoringFee,
--cus.CellularBackup,ISNULL(lk.DisplayText,'') as LeadSource,cus.CustomerFunded,cus.Maintenance,cus.Note,CONVERT(VARCHAR(10),cus.SalesDate,101) as SalesDate,CONVERT(VARCHAR(10),cus.InstallDate,101) as InstallDate,
--CONVERT(VARCHAR(10),cus.CutInDate,101) as CutInDate,cus.Installer,cus.Soldby,cus.FundingDate,cus.MiddleName,CONVERT(VARCHAR(10),cus.JoinDate,101) as JoinDate,CONVERT(VARCHAR(10),cus.ReminderDate,101) as ReminderDate,
--cus.QA1,CONVERT(VARCHAR(10),cus.QA1Date,101) as QA1Date,cus.QA2,CONVERT(VARCHAR(10),cus.QA2Date,101) as QA2Date,cus.Status,cus.BillAmount,cus.PaymentMethod,cus.BillCycle,cus.BillDay,cus.BillNotes,cus.BillTax,cus.BillOutStanding,
--CONVERT(VARCHAR(10),cus.ServiceDate,101) as ServiceDate,cus.Area,cus.StreetType,cus.Appartment,cus.Latlng,cus.SecondCustomerNo,cus.AdditionalCustomerNo,cus.IsTechCallPassed,cus.IsDirect,cus.AuthorizeRefId,cus.AuthorizeCusProfileId,cus.AuthorizeCusPaymentProfileId,
--cus.AuthorizeDescription,cus.IsRequiredCsvSync,cus.Passcode,cus.ActivationFee,cus.FirstBilling,cus.ActivationFeePaymentMethod,cus.IsActive,cus.LastGeneratedInvoice,cus.Singature,cus.CrossStreet,cus.DBA,cus.AlarmRefId,cus.TransunionRefId,cus.MonitronicsRefId,cus.CentralStationRefId,
--cus.CmsRefId,cus.PreferedEmail,cus.PreferedSms,cus.IsAgreement,cus.IsFireAccount,cus.CreatedByUid,CONVERT(VARCHAR(10),cus.CreatedDate,101) as CreatedDate,cus.LastUpdatedBy,cus.LastUpdatedByUid,CONVERT(VARCHAR(10),cus.LastUpdatedDate,101) as LastUpdatedDate,cus.BusinessAccountType,
--cus.PhoneType,cus.Carrier,cus.ReferringCustomer,cus.EsistingPanel,cus.Ownership,cus.PurchasePrice,cus.ContractValue,cus.ChildOf,cus.EmailVerified,cus.HomeVerified,cus.County,cus.CustomerToken,cus.PaymentToken,cus.ScheduleToken,CONVERT(VARCHAR(10),cus.EstCloseDate,101) as EstCloseDate,
--CONVERT(VARCHAR(10),cus.ProjectWalkDate,101) as ProjectWalkDate,cus.BranchId,cus.SubscriptionStatus,cus.AnnualRevenue,cus.Website,cus.Market,cus.Passengers,cus.Budget,cus.SmartSetUpStep,cus.CustomerAccountType,cus.IsPrimaryPhoneVerified,cus.IsSecondaryPhoneVerified,cus.IsCellNoVerified,
--cus.HomeOwner,cus.AccessGivenTo,cus.DoNotCall,cus.PreferredContactMethod,cus.SalesLocation,cus.IsReceivePaymentMail,cus.BestTimeToCall,cus.CSProvider,cus.RenewalTerm,cus.PreferedCall,cus.IsAgreementSend,cus.IsACHDiscount,cus.CustomerStatus,cus.TransferCustomerId,cus.CancellationSignature,
--CONVERT(VARCHAR(10),cus.OriginalContactDate,101) as OriginalContactDate,cus.DuplicateCustomer,cus.InspectionCompany,cus.SoldBy2,cus.SoldBy3,cus.ContactedPerviously,CONVERT(VARCHAR(10),cus.MovingDate,101) as MovingDate,cus.InstalledStatus,cus.AcquiredFrom,CONVERT(VARCHAR(10),cus.FollowUpDate,101) as FollowUpDate,
--cus.BuyoutAmountByADS,cus.FinancedTerm,cus.FinancedAmount,cus.Levels,cus.SoldAmount,cus.AgreementEmail,cus.AgreementPhoneNo,cus.TaxExemption,cus.AppoinmentSet,cus.BillingEmail,cus.BillingPhone,cus.BillingContact,CONVERT(VARCHAR(10),cus.LastOpenedDate,101) as LastOpenedDate,CONVERT(VARCHAR(10),cus.DisconnectServiceDate,101) as DisconnectServiceDate,
--cus.UCCRefId,cus.PlatformId,cus.RecommendedLevel,cus.ProfileImage,cus.BrinksRefId,cus.MapscoNo,CONVERT(VARCHAR(10),cus.CustomerSignatureDate,101) as CustomerSignatureDate,cus.LeadSourceType,cus.MoveCustomerId,cus.EcontractId,cus.EcontractEnvlobeId,cus.Soldby1,cus.SearchText,cus.IsContractSign
                                from  Customer cus
                             left join [Lookup] lk on lk.DataKey = 'LeadSource' and lk.DataValue = cus.LeadSource
                                left join CustomerCompany cc
                             
                                on cc.CustomerId = cus.CustomerId
                                where cc.CompanyId ='{0}'
                                and cc.IsLead=1
                                and cus.JoinDate is not null";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyid);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    return GetList(cmd, -1);
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        //        public DataTable GetAllleadByCompany(Guid companyId)

        //        {
        //            string sqlQuery = @"--select cus.*,ISNULL(lk.DisplayText,'') as LeadSource
        //select cus.Id,cus.CustomerId,cus.CustomerNo,cus.Title,cus.FirstName,cus.LastName,cus.SSN,cus.Type,cus.BusinessName,cus.DateofBirth,cus.PrimaryPhone,cus.SecondaryPhone,
        //cus.CellNo,cus.Fax,cus.EmailAddress,cus.CallingTime,cus.Address,cus.Address2,cus.Street,cus.city,cus.ZipCode,cus.Country,cus.StreetPrevious,cus.CityPrevious,cus.StatePrevious,
        //cus.ZipCodePrevious,cus.CountryPrevious,cus.AccountNo,cus.IsAlarmCom,cus.CreditScore,cus.CreditScoreValue,cus.ContractTeam,cus.FundingCompany,cus.MonthlyMonitoringFee,
        //cus.CellularBackup,lk.DisplayText as LeadSource,cus.CustomerFunded,cus.Maintenance,cus.Note,CONVERT(VARCHAR(10),cus.SalesDate,101) as SalesDate,CONVERT(VARCHAR(10),cus.InstallDate,101) as InstallDate,
        //CONVERT(VARCHAR(10),cus.CutInDate,101) as CutInDate,cus.Installer,cus.Soldby,cus.FundingDate,cus.MiddleName,CONVERT(VARCHAR(10),cus.JoinDate,101) as JoinDate,CONVERT(VARCHAR(10),cus.ReminderDate,101) as ReminderDate,
        //cus.QA1,CONVERT(VARCHAR(10),cus.QA1Date,101) as QA1Date,cus.QA2,CONVERT(VARCHAR(10),cus.QA2Date,101) as QA2Date,cus.Status,cus.BillAmount,cus.PaymentMethod,cus.BillCycle,cus.BillDay,cus.BillNotes,cus.BillTax,cus.BillOutStanding,
        //CONVERT(VARCHAR(10),cus.ServiceDate,101) as ServiceDate,cus.Area,cus.StreetType,cus.Appartment,cus.Latlng,cus.SecondCustomerNo,cus.AdditionalCustomerNo,cus.IsTechCallPassed,cus.IsDirect,cus.AuthorizeRefId,cus.AuthorizeCusProfileId,cus.AuthorizeCusPaymentProfileId,
        //cus.AuthorizeDescription,cus.IsRequiredCsvSync,cus.Passcode,cus.ActivationFee,cus.FirstBilling,cus.ActivationFeePaymentMethod,cus.IsActive,cus.LastGeneratedInvoice,cus.Singature,cus.CrossStreet,cus.DBA,cus.AlarmRefId,cus.TransunionRefId,cus.MonitronicsRefId,cus.CentralStationRefId,
        //cus.CmsRefId,cus.PreferedEmail,cus.PreferedSms,cus.IsAgreement,cus.IsFireAccount,cus.CreatedByUid,CONVERT(VARCHAR(10),cus.CreatedDate,101) as CreatedDate,cus.LastUpdatedBy,cus.LastUpdatedByUid,CONVERT(VARCHAR(10),cus.LastUpdatedDate,101) as LastUpdatedDate,cus.BusinessAccountType,
        //cus.PhoneType,cus.Carrier,cus.ReferringCustomer,cus.EsistingPanel,cus.Ownership,cus.PurchasePrice,cus.ContractValue,cus.ChildOf,cus.EmailVerified,cus.HomeVerified,cus.County,cus.CustomerToken,cus.PaymentToken,cus.ScheduleToken,CONVERT(VARCHAR(10),cus.EstCloseDate,101) as EstCloseDate,
        //CONVERT(VARCHAR(10),cus.ProjectWalkDate,101) as ProjectWalkDate,cus.BranchId,cus.SubscriptionStatus,cus.AnnualRevenue,cus.Website,cus.Market,cus.Passengers,cus.Budget,cus.SmartSetUpStep,cus.CustomerAccountType,cus.IsPrimaryPhoneVerified,cus.IsSecondaryPhoneVerified,cus.IsCellNoVerified,
        //cus.HomeOwner,cus.AccessGivenTo,cus.DoNotCall,cus.PreferredContactMethod,cus.SalesLocation,cus.IsReceivePaymentMail,cus.BestTimeToCall,cus.CSProvider,cus.RenewalTerm,cus.PreferedCall,cus.IsAgreementSend,cus.IsACHDiscount,cus.CustomerStatus,cus.TransferCustomerId,cus.CancellationSignature,
        //CONVERT(VARCHAR(10),cus.OriginalContactDate,101) as OriginalContactDate,cus.DuplicateCustomer,cus.InspectionCompany,cus.SoldBy2,cus.SoldBy3,cus.ContactedPerviously,CONVERT(VARCHAR(10),cus.MovingDate,101) as MovingDate,cus.InstalledStatus,cus.AcquiredFrom,CONVERT(VARCHAR(10),cus.FollowUpDate,101) as FollowUpDate,
        //cus.BuyoutAmountByADS,cus.FinancedTerm,cus.FinancedAmount,cus.Levels,cus.SoldAmount,cus.AgreementEmail,cus.AgreementPhoneNo,cus.TaxExemption,cus.AppoinmentSet,cus.BillingEmail,cus.BillingPhone,cus.BillingContact,CONVERT(VARCHAR(10),cus.LastOpenedDate,101) as LastOpenedDate,CONVERT(VARCHAR(10),cus.DisconnectServiceDate,101) as DisconnectServiceDate,
        //cus.UCCRefId,cus.PlatformId,cus.RecommendedLevel,cus.ProfileImage,cus.BrinksRefId,cus.MapscoNo,CONVERT(VARCHAR(10),cus.CustomerSignatureDate,101) as CustomerSignatureDate,cus.LeadSourceType,cus.MoveCustomerId,cus.EcontractId,cus.EcontractEnvlobeId,cus.Soldby1,cus.SearchText,cus.IsContractSigned
        //                                from  Customer cus
        //                             left join [Lookup] lk on lk.DataKey = 'LeadSource' and lk.DataValue = cus.LeadSource
        //                                left join CustomerCompany cc

        //                                on cc.CustomerId = cus.CustomerId
        //                                where cc.CompanyId ='{0}'
        //                                and cc.IsLead=1
        //                                and cus.JoinDate is not null";

        //            try
        //            {

        //                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
        //                {

        //                    DataSet dsResult = GetDataSet(cmd);
        //                    return dsResult;
        //                }
        //            }
        //            catch (Exception ex)
        //            {
        //                return null;
        //            }
        //        }
        public List<Customer> GetAllLeadByCompanyIdByCustomerStatus(Guid companyid)
        {
            string sqlQuery = @"select cus.*
                                from  Customer cus
                                join CustomerCompany cc
                                on cc.CustomerId = cus.CustomerId
                                where cc.CompanyId ='{0}'
                                and cc.IsLead=1
                                and cus.[Status] = 'New'
                                and cus.JoinDate is not null";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyid);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    return GetList(cmd, -1);
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetDuplicateCustomer(string type, string value, int CustomerId)
        {
            string SearchQuery = "";
            if (type == "BusinessName")
            {
                SearchQuery = " And BusinessName = '{0}'";
            }
            else if (type == "Phone")
            {
                SearchQuery = " And PrimaryPhone = '{0}' or SecondaryPhone= '{0}'";
            }
            else if (type == "Email")
            {
                SearchQuery = " And EmailAddress = '{0}'";
            }
            SearchQuery = string.Format(SearchQuery, value.Replace("'", "''"));
            string sqlQuery = @"select 
                                Id,
                                FirstName +' '+LastName as Name
                                from customer where Id!={0} {1}";
            try
            {
                sqlQuery = string.Format(sqlQuery, CustomerId, SearchQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllCustomerBillInfoByCompanyId(Guid companyID, Guid customerID)
        {
            string sqlQuery = @"select  cus.BillCycle
                                        , cus.BillAmount
                                        , cus.BillDay
                                        , cus.AuthorizeRefId
                                        , cus.PaymentMethod
                                        , cus.BillNotes
                                        , cus.FirstBilling
                                        , cus.ContractTeam
                                        , cus.Id as CusID
                                        , cus.CreditScore
                                        , cus.CustomerFunded
                                        , cus.MonthlyMonitoringFee
                                        , cus.FundingCompany
                                        , cus.Maintenance
                                        , cus.BillOutStanding
                                        , cus.BillTax
                                        , cus.SubscriptionStatus
                                        , pinfo.AccountName as PayAccountName
                                        , pinfo.CardNumber as PayCardNumber
                                        , pinfo.CardExpireDate as PayCardExpireDate
                                        , pinfo.BankAccountType as PayBAccountType
                                        , pinfo.AcountNo as PayAccountNo
                                        , pinfo.RoutingNo as PayRoutingNo
							    ,CASE WHEN cus.PaymentMethod = '-1' THEN ' ' else( Case when cus.PaymentMethod = 'ACH' or cus.PaymentMethod = 'Invoice' or cus.PaymentMethod = 'Credit Card' or cus.PaymentMethod = 'Due at Install' or cus.PaymentMethod = 'Financed' then cus.PaymentMethod  else (select top (1) pp.Type from PaymentProfileCustomer pp where convert(nvarchar(100),pp.PaymentInfoId) = cus.PaymentMethod order by pp.Id desc )  end) End as PaymentMethodVal

                                from customer cus
                                join CustomerCompany cc
                                on cc.CustomerId=cus.CustomerId

                                left join PaymentInfoCustomer pic
								on pic.CustomerId = cus.CustomerId and pic.Payfor = 'MMR'

								left join PaymentInfo pinfo
								on pinfo.Id = pic.PaymentInfoId
						

                                where cc.CompanyId='{0}'
                                and cc.CustomerId='{1}'
                                and cc.IsLead=0";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyID, customerID);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /*public DataTable GetAllCustomerResponsibleByCustomerId(Guid customerID)
        {
            string sqlQuery = @"select cus.ResponsiblePerson1, cus.ResponsiblePerson2, cus.ResponsiblePerson3, cus.ResponsiblePerson4,
                                cus.ResponsiblePersonContact1, cus.ResponsiblePersonContact2, cus.ResponsiblePersonContact3, cus.ResponsiblePersonContact4,
                                cus.ResponsiblePersonEmail1, cus.ResponsiblePersonEmail2, cus.ResponsiblePersonEmail3, cus.ResponsiblePersonEmail4, cus.Id
                                from customer cus
                                where cus.CustomerId='{0}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, customerID);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }*/

        public DataTable GetAllCustomerCountByCompanyId(Guid companyID)
        {
            string sqlQuery = @"select COUNT(*) count from Customer cu 
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                where cc.IsLead=0
                                and cc.CompanyId='{0}'
                                and cu.IsActive = 1
								and cu.JoinDate is not null";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyID);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        public DataTable GetAllCustomerCountTotalRMREstimateAmountByCompanyId(Guid companyID, string tag, Guid empid, bool ispermit)
        {
            #region TotalRMR
            string TotalRMRsqlQuery = @"DECLARE @CompanyId uniqueidentifier
                                Set @CompanyId = '{0}'

                                DECLARE @EmployeeId uniqueidentifier
                                Set @EmployeeId = '{2}'

                                select c.Id,
								c.MonthlyMonitoringFee,
								c.IsActive,
								c.Soldby,
								c.Installer,
								c.QA1,
								c.QA2
								into #customer from  Customer c 
                                where customerid in (select customerid from CustomerCompany where islead =0)  
								--AND c.IsActive = 1
								and c.JoinDate is not null
                                {4}
                                {3}
                                
								select
                                (select sum(CONVERT(float, MonthlyMonitoringFee)) from #Customer2 
                                where MonthlyMonitoringFee != '-1'
                                and MonthlyMonitoringFee is not null
                                and IsActive = 1) TotalRMR,

                                (select COUNT(Id) from #Customer2
                                where MonthlyMonitoringFee != '-1'
                                and MonthlyMonitoringFee is not null
								and MonthlyMonitoringFee != ''
                                and IsActive = 1) TotalRMRCount,

                                (SELECT SUM([TotalAmount]) FROM Invoice WHERE [Status] = 'Open') as EstimateAmount, 

                                (SELECT SUM([BalanceDue]) FROM Invoice WHERE [Status] = 'Open' or  [Status] = 'Partial') as DueAmount,  

                                ISNULL((SELECT SUM([TotalAmount]) FROM Invoice WHERE [Status]='Paid'),0) as PaidAmount,

                                (select COUNT(Id) count from #customer) as CustomerCount

								 
                                drop table #Customer2
                                drop table #customer ";
            string TotalRMRsubquery = "";
            string filterByUserNameCount = "";
            if (tag.ToLower().IndexOf("admin") == -1)
            {
                TotalRMRsubquery = @"select cs.Id,cs.MonthlyMonitoringFee,
								cs.IsActive  into #Customer2 from #customer cs
                             left join Employee emp on CONVERT(nvarchar(50), emp.UserId) = cs.Soldby AND emp.UserId = @EmployeeId
                             left join Employee emp1 on CONVERT(nvarchar(50), emp1.UserId) = cs.Installer AND emp1.UserId = @EmployeeId
                             left join Employee emp2 on CONVERT(nvarchar(50), emp2.UserId) = cs.QA1 AND emp2.UserId = @EmployeeId
                             left join Employee emp3 on CONVERT(nvarchar(50), emp3.UserId) = cs.QA2 AND emp3.UserId = @EmployeeId
                             where emp.UserId IS NOT NULL OR emp1.UserId  IS NOT NULL OR emp2.UserId  IS NOT NULL OR  emp3.UserId   IS NOT NULL";
            }
            else
            {
                TotalRMRsubquery = @"select cs.Id,cs.MonthlyMonitoringFee,
								cs.IsActive into #Customer2 from #customer cs"; ;
            }
            if (ispermit)
            {
                filterByUserNameCount = "";
            }
            else
            {
                filterByUserNameCount = string.Format("and (c.Installer='{0}' or c.Soldby='{0}' or c.AccessGivenTo = '{0}')", empid);
            }
            TotalRMRsqlQuery = string.Format(TotalRMRsqlQuery, companyID, tag, empid, TotalRMRsubquery, filterByUserNameCount);


            #endregion

            try
            {

                using (SqlCommand cmd = GetSQLCommand(TotalRMRsqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }

        }





        public DataSet GetAllLeadTabCountByCompanyId(Guid companyID, bool ShowBookingCount, bool ShowEstimateCount)
        {
            string sqlQuery = @"(select COUNT(*) LeadCount from Customer cu 
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                where cc.IsLead=1
                                and cc.CompanyId='{0}'
                                and cu.IsActive = 1
								and cu.JoinDate is not null)
								
                                
                                --(select COUNT(*) EstimateCount,
                                --SUM(inv.TotalAmount) LeadEstimateAmount
                                --from Invoice inv
								--left join Customer cus on cus.CustomerId = inv.CustomerId
								--left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
								--where cc.IsLead=1
                                --and cc.CompanyId='{0}'
                                --and cus.IsActive = 1
								--and cus.JoinDate is not null
								--and inv.IsEstimate = 1)
                                  {2}
								
                                (select COUNT(*) LeadThisMonthCount from Customer cu 
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                where cc.IsLead=1
                                and cc.CompanyId='{0}'
                                and cu.IsActive = 1
								and MONTH(cu.JoinDate) = MONTH(GETDATE())
								AND YEAR(cu.JoinDate) = YEAR(GETDATE()))
								

                                (select COUNT(*) LeadLastMonthCount from Customer cu 
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                where cc.IsLead=1
                                and cc.CompanyId='{0}'
                                and cu.IsActive = 1
								and DATEPART(m, cu.JoinDate) = DATEPART(m, DATEADD(m, -1, getdate()))
								AND DATEPART(yyyy, cu.JoinDate) = DATEPART(yyyy, DATEADD(m, -1, getdate())))
								

                                --(select SUM(inv.TotalAmount) LeadEstimateAmount from Invoice inv
								--left join Customer cus on cus.CustomerId = inv.CustomerId
								--left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
								---where cc.IsLead=1
                                --and cc.CompanyId='{0}'
                                --and cus.IsActive = 1
								--and cus.JoinDate is not null
								--and inv.IsEstimate = 1)
                                
                                {1} ";

            #region Booking SQL
            string BookingSQL = "(select 0 as BookingCount, 0 as LeadBookingAmount)";
            if (ShowBookingCount)
            {
                BookingSQL = @"(select COUNT(Bking.Id) as BookingCount,
								SUM(Bking.TotalAmount) as LeadBookingAmount 
								from Booking Bking 
								left join Customer cu on Bking.CustomerId = cu.CustomerId
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                where cc.IsLead=1 
                                and cu.IsActive = 1)";
            }
            #endregion

            #region Estimate SQL
            string EstimateSQL = "(select 0 as LeadEstimateAmount, 0 as LeadEstimateAmount)";
            if (ShowEstimateCount)
            {
                EstimateSQL = @" (select COUNT(*) EstimateCount,
                                SUM(inv.TotalAmount) LeadEstimateAmount
                                from Invoice inv
								left join Customer cus on cus.CustomerId = inv.CustomerId
								left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
								where cc.IsLead=1
                                and cc.CompanyId='{0}'
                                and cus.IsActive = 1
								and cus.JoinDate is not null
								and inv.IsEstimate = 1)";
                EstimateSQL = String.Format(EstimateSQL, companyID);

            }
            #endregion
            try
            {
                sqlQuery = string.Format(sqlQuery, companyID, BookingSQL, EstimateSQL);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetTotalRMRByCompanyId(Guid CompanyId, string tag, Guid empid)
        {
            string sqlQuery = @"DECLARE @CompanyId uniqueidentifier
                                Set @CompanyId = '{0}'

                                DECLARE @EmployeeId uniqueidentifier
                                Set @EmployeeId = '{2}'

                                select c.* into #customer from  Customer c
                                Left Join CustomerCompany cc on cc.CustomerId = c.CustomerId
                                where cc.CompanyId = @CompanyId AND c.IsActive = 1 and cc.IsLead = 0
                                {3}
								select
                                (select sum(CONVERT(float, cs3.MonthlyMonitoringFee)) from #Customer2 cs3
                                where cs3.MonthlyMonitoringFee != '-1'
                                and cs3.MonthlyMonitoringFee is not null
                                and cs3.IsActive = 1) TotalRMR
                                into #FinalCustomer
                                from #Customer2 cs2

								select * from #FinalCustomer
								group by TotalRMR

                                drop table #Customer2
                                drop table #customer
								drop table #FinalCustomer";
            string subquery = "";
            if (tag.ToLower().IndexOf("admin") == -1)
            {
                subquery = @"select cs.* into #Customer2 from #customer cs
                             left join Employee emp on CONVERT(nvarchar(50), emp.UserId) = cs.Soldby AND emp.UserId = @EmployeeId
                             left join Employee emp1 on CONVERT(nvarchar(50), emp1.UserId) = cs.Installer AND emp1.UserId = @EmployeeId
                             left join Employee emp2 on CONVERT(nvarchar(50), emp2.UserId) = cs.QA1 AND emp2.UserId = @EmployeeId
                             left join Employee emp3 on CONVERT(nvarchar(50), emp3.UserId) = cs.QA2 AND emp3.UserId = @EmployeeId
                             where emp.UserId IS NOT NULL OR emp1.UserId  IS NOT NULL OR emp2.UserId  IS NOT NULL OR  emp3.UserId   IS NOT NULL";
            }
            else
            {
                subquery = @"select cs.* into #Customer2 from #customer cs"; ;
            }
            try
            {
                sqlQuery = string.Format(sqlQuery, CompanyId, tag, empid, subquery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetLeadTotalRMRByCustomerId(Guid customerid)
        {
            string sqlQuery = @"Select sum(cps.Total) as TotalRMR from CustomerPackageService cps
                                LEFT JOIN Equipment eqp on eqp.EquipmentId=cps.EquipmentId
                                where cps.CustomerId='{0}' and eqp.IsARBEnabled=1";

            try
            {
                sqlQuery = string.Format(sqlQuery, customerid);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetCollectedAmountByCustomerId(Guid customerid)
        {
            string sqlQuery = @"select SUM(TotalAmount) as CollectedAmount from Invoice where CustomerId='{0}' and Status='Paid'";

            try
            {
                sqlQuery = string.Format(sqlQuery, customerid);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetSalesGroupBySoldby(Guid soldby)
        {
            string sqlQuery = @"Select pg.Name as SalesGroup,e.FirstName+' '+e.LastName as SalesPerson,e.Email,e.Phone,e.UserName from Employee e
                                left join UserPermission up on up.UserId=e.UserId
                                left join PermissionGroup pg on up.PermissionGroupId=pg.Id
                                where e.UserId='{0}'
                                ";

            try
            {
                sqlQuery = string.Format(sqlQuery, soldby);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetTotalRMRCountByCompanyId(Guid CompanyId, string tag, Guid empid)
        {
            string sqlQuery = @"DECLARE @CompanyId uniqueidentifier
                                Set @CompanyId = '{0}'

                                DECLARE @EmployeeId uniqueidentifier
                                Set @EmployeeId = '{2}'

                                select c.* into #customer from  Customer c
                                Left Join CustomerCompany cc on cc.CustomerId = c.CustomerId
                                where cc.CompanyId = @CompanyId AND c.IsActive = 1 and cc.IsLead = 0
                                {3}
								select
                                (select COUNT(cs3.Id) from #Customer2 cs3
                                where cs3.MonthlyMonitoringFee != '-1'
                                and cs3.MonthlyMonitoringFee is not null
								and cs3.MonthlyMonitoringFee != ''
                                and cs3.IsActive = 1) RmrCount
                                into #FinalCustomer
                                from #Customer2 cs2

								select * from #FinalCustomer
								group by RmrCount

                                drop table #Customer2
                                drop table #customer
								drop table #FinalCustomer";
            string subquery = "";
            if (tag.ToLower().IndexOf("admin") == -1)
            {
                subquery = @"select cs.* into #Customer2 from #customer cs
                             left join Employee emp on CONVERT(nvarchar(50), emp.UserId) = cs.Soldby AND emp.UserId = @EmployeeId
                             left join Employee emp1 on CONVERT(nvarchar(50), emp1.UserId) = cs.Installer AND emp1.UserId = @EmployeeId
                             left join Employee emp2 on CONVERT(nvarchar(50), emp2.UserId) = cs.QA1 AND emp2.UserId = @EmployeeId
                             left join Employee emp3 on CONVERT(nvarchar(50), emp3.UserId) = cs.QA2 AND emp3.UserId = @EmployeeId
                             where emp.UserId IS NOT NULL OR emp1.UserId  IS NOT NULL OR emp2.UserId  IS NOT NULL OR  emp3.UserId   IS NOT NULL";
            }
            else
            {
                subquery = @"select cs.* into #Customer2 from #customer cs"; ;
            }
            try
            {
                sqlQuery = string.Format(sqlQuery, CompanyId, tag, empid, subquery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetMonthlyFeeFromContractByCustomerId(Guid customerId, Guid comId)
        {
            string sqlQuery = @"
                                select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0)) as MonthlyFee from CustomerPackageService where CustomerId = '{0}' and CompanyId='{1}'
                                 ";

            try
            {
                sqlQuery = string.Format(sqlQuery, customerId, comId);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllLeadsNotConvertedLeadToCustomer()
        {
            string sqlQuery = @"select c.*, c.FirstName+' '+c.LastName,  DATEDIFF(day,c.JoinDate,GETDATE()) AS DiffDate from Customer c
                                Left join CustomerCompany cc on cc.CustomerId = c.CustomerId
                                where ISLead=1 and DATEDIFF(day,c.JoinDate,GETDATE())>7";
            try
            {
                sqlQuery = string.Format(sqlQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataSet GetTaskReportByFilter(TicketFilter TicketFilters, FilterReportModel filter, string Start, string End, Guid companyId, Guid empId, bool allTask)
        {
            //    string sqlQuery = @"";
            //    string searchQuery = @"";
            //    string DateQuery = @"";
            //    string filterqueryactive = "";
            //    string orderquery = "";
            //    string orderquery1 = "";
            //    #region Order
            //    if (!string.IsNullOrWhiteSpace(TicketFilters.order))
            //    {
            //        if (TicketFilters.order == "ascending/taskid")
            //        {
            //            orderquery = "order by #e.[Id] asc";
            //            orderquery1 = "order by [Id] asc";
            //        }
            //        else if (TicketFilters.order == "descending/taskid")
            //        {
            //            orderquery = "order by #e.[Id] desc";
            //            orderquery1 = "order by [Id] desc";
            //        }

            //        else
            //        {
            //            orderquery = "order by #e.[ReminderDate]  asc";
            //            orderquery1 = "order by ReminderDate asc";
            //        }

            //    }
            //    else
            //    {
            //        orderquery = "order by #e.[ReminderDate] asc";
            //        orderquery1 = "order by ReminderDate asc";
            //    }
            //    #endregion

            //    if (TicketFilters.salesperson == "null")
            //    {
            //        TicketFilters.salesperson = TicketFilters.salesperson.Substring(0, TicketFilters.salesperson.Length - 4);

            //    }

            //    if (!string.IsNullOrWhiteSpace(TicketFilters.salesperson))
            //    {
            //        filterqueryactive += string.Format("and InstallerTechnician in ('{0}')", TicketFilters.salesperson);
            //    }
            //    if (!string.IsNullOrWhiteSpace(TicketFilters.SearchText))
            //    {
            //        searchQuery = string.Format(" and CustomerName like '%{0}%'", TicketFilters.SearchText);
            //    }

            //    //DateQuery = string.Format(" and ScheduledServiceDate between '{0}' and '{1}'", Start, End);
            //    //#region AppointmentDateQuery
            //    if (TicketFilters.StartDate != new DateTime() && TicketFilters.EndDate != new DateTime())
            //    {
            //        var StartDate = TicketFilters.StartDate.ToString("yyyy-MM-dd HH:mm:ss.fff");
            //        var EndDate = TicketFilters.EndDate.ToString("yyyy-MM-dd HH:mm:ss.fff");
            //        DateQuery = string.Format(" and ScheduledServiceDate between '{0}' and '{1}'", StartDate, EndDate);
            //    }

            //    GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            //    GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            //    string NameSql = "";
            //    if (gs != null)
            //    {
            //        NameSql = gs.Value;
            //        //NameSql = NameSql.Replace("cus.", "cu.");
            //    }

            //    sqlQuery = @"declare @pagestart int
            //                        declare @pageend int
            //                        set @pagestart=(@pageno-1)*@pagesize
            //                        set @pageend = @pagesize

            //                         select * into #TaskData from CustomerNote

            //                        select *,IDENTITY(INT, 1, 1) AS paginationid into #TaskDataFilter
            //from #TaskData
            //                        where CompanyId={0}
            //select top(@pagesize)
            //* from #TaskData
            //where paginationid not in(select top(@pagestart) paginationid from #TaskDataFilter #e {4}) {5}

            //select count(*) TotalCount
            //                        from #TaskData
            //drop table #TaskData
            //drop table #TaskDataFilter";

            string SearchQuery = "";
            string DateFilterQuery = "";
            string subquery = "";
            string subquery1 = "";
            string userQuery = "";
            if (allTask == false)
            {
                userQuery = string.Format("And emp1.UserId='{0}'", empId);
            }
            if (!string.IsNullOrWhiteSpace(TicketFilters.seletActive) && TicketFilters.seletActive.ToLower() != "null")
            {
                subquery = string.Format(" AND CN.IsShedule in ({0})", TicketFilters.seletActive);
            }
            if (!string.IsNullOrWhiteSpace(TicketFilters.salesperson) && TicketFilters.salesperson.ToLower() != "null" && TicketFilters.salesperson != "" && allTask == true)
            {
                subquery1 = string.Format(" AND emp1.UserId in ('{0}')", TicketFilters.salesperson);
            }
            if (!string.IsNullOrEmpty(TicketFilters.SearchText))
            {
                //SearchQuery = string.Format(" and CN.Notes like '%{0}%'", TicketFilters.SearchText);
                SearchQuery = (" and CN.Notes like @SearchText");

            }
            if ((TicketFilters.StartDate != null && TicketFilters.StartDate != new DateTime()) && (TicketFilters.EndDate != null && TicketFilters.EndDate != new DateTime()))
            {
                var StartDateValue = TicketFilters.StartDate.SetZeroHour().ClientToUTCTime();
                var EndDateValue = TicketFilters.EndDate.SetMaxHour().ClientToUTCTime();
                DateFilterQuery = string.Format(" and CN.CreatedDate between '{0}' and '{1}'", StartDateValue, EndDateValue);
            }

            string sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                set @pagestart=({2}-1)* {3}
                                set @pageend = {3}

                                Select distinct CN.Id,CN.Notes,CN.ReminderDate,CN.ReminderEndDate,CN.CustomerId,CN.CompanyId,CN.CreatedByUid,CN.CreatedDate,
                                  CN.IsEmail,CN.IsText,CN.IsShedule,CN.IsFollowUp,CN.IsActive,CN.IsClose,CN.IsAllDay,CN.IsPin,CN.CreatedBy,CN.IsOverview,
                                lkNType.AlterDisplayText as Color,
                                lkNType.DisplayText as NoteTypeValue,
                                emp.FirstName + ' '+emp.LastName as empName,
                                (select CAST(FirstName + ' '+LastName + ', ' AS VARCHAR(200))  from Employee  where UserId in (select na.EmployeeId from NoteAssign na where CN.Id = na.NoteId) FOR XML PATH ('')) as AssignName
                                --,(select COUNT(*) from CustomerNote CN where CustomerId = '{0}' and CompanyId='{1}' {4} {5}) as TotalNoteCount
                                into #ReminderData
                                from CustomerNote CN
                                left join Customer cus on cus.CustomerId=CN.CustomerId
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                LEFT JOIN Lookup lkNType on lkNType.DataValue=CN.NoteType and lkNType.DataKey='NoteType' and CN.NoteType!='-1'
                                left join Employee emp 
                                on emp.UserId = CN.CreatedByUid
                                left join NoteAssign na on na.NoteId = CN.Id
                                left join Employee emp1 
                                on emp1.UserId = na.EmployeeId
                                Where CN.CompanyId='{1}' and CN.IsFollowUp = 1 and ce.IsTestAccount != 1
                                {4} {5} {0} {6} {7}
                                
                                select * into #ReminderDataFilter from #ReminderData
								
								select TOP({3}) * from #ReminderDataFilter where Id not in (select TOP(@pagestart) Id from #ReminderData #rd order by #rd.CreatedDate desc)
								 order by CreatedDate desc

								 select count(Id) TotalCount
                                 from #ReminderData

                                drop table #ReminderData   
								drop table #ReminderDataFilter";

            try
            {
                sqlQuery = string.Format(sqlQuery, subquery, companyId, TicketFilters.PageNo, TicketFilters.PageSize, SearchQuery, DateFilterQuery, userQuery, subquery1);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(TicketFilters.SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(TicketFilters.SearchText.Trim())));

                    //AddParameter(cmd, pInt32("pageno", TicketFilters.PageNo));
                    //AddParameter(cmd, pInt32("pagesize", TicketFilters.PageSize));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllCustomerNotSetCustomerBilling()
        {
            string sqlQuery = @"select c.* from Customer c
                                Left join CustomerCompany cc on cc.CustomerId = c.CustomerId
                                where cc.IsLead=0 and
                                c.PaymentMethod='-1' and c.BillCycle='-1'";
            try
            {
                sqlQuery = string.Format(sqlQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        #region Leads Report
        public DataSet GetAllLeadsByCompany(Guid companyId, DateTime? Start, DateTime? End, int pageno, int pagesize, string status, string market, string leads, string soldBy, string order)
        {

            string sqlQuery = @"";
            string DateQuery = "";
            string subquery = "";
            if (status == "null")
            {
                status = status.Substring(0, status.Length - 4);


            }
            var array = status.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }
            if (leads == "null")
            {
                leads = leads.Substring(0, leads.Length - 4);


            }
            var array1 = leads.Split(",");
            string query1 = "";
            if (array1 != null)
            {
                foreach (var item in array1)
                {
                    query1 += string.Format("'{0}',", item);
                }
                query1 = query1.Remove(query1.Length - 1, 1);
            }
            if ((Start.HasValue && End.HasValue) && (Start != new DateTime() && End != new DateTime()))
            {
                DateQuery = string.Format("and cu.JoinDate between '{0}' and '{1}'", Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            if (!string.IsNullOrWhiteSpace(query))
            {
                subquery += string.Format("and cu.[Status] in ({0})", query);
            }
            if (!string.IsNullOrWhiteSpace(market) && market != "-1" && market != "undefined")
            {
                subquery += string.Format("and cu.[Market] in ({0})", market);
            }
            if (!string.IsNullOrWhiteSpace(query1))
            {
                subquery += string.Format("and cu.[LeadSource] in ({0})", query1);
            }
            if (!string.IsNullOrWhiteSpace(soldBy))
            {
                subquery += string.Format("and cu.Soldby='{0}'", soldBy);
            }
            string orderquery = "";
            string orderquery1 = "";
            #region Order
            if (!string.IsNullOrWhiteSpace(order))
            {
                if (order == "ascending/dba")
                {
                    orderquery = "order by #cd.[FirstName] asc";
                    orderquery1 = "order by [FirstName] asc";
                }
                else if (order == "descending/dba")
                {
                    orderquery = "order by #cd.[FirstName] desc";
                    orderquery1 = "order by [FirstName] desc";
                }
                else if (order == "ascending/lead")
                {
                    orderquery = "order by #cd.FirstName asc";
                    orderquery1 = "order by FirstName asc";
                }
                else if (order == "descending/lead")
                {
                    orderquery = "order by #cd.FirstName desc";
                    orderquery1 = "order by FirstName desc";
                }
                else if (order == "ascending/status")
                {
                    orderquery = "order by #cd.[StatusVal] asc";
                    orderquery1 = "order by [StatusVal] asc";
                }
                else if (order == "descending/status")
                {
                    orderquery = "order by #cd.[StatusVal] desc";
                    orderquery1 = "order by [StatusVal] desc";
                }
                else if (order == "ascending/market")
                {
                    orderquery = "order by #cd.[MarketVal] asc";
                    orderquery1 = "order by [MarketVal] asc";
                }
                else if (order == "descending/market")
                {
                    orderquery = "order by #cd.[MarketVal] desc";
                    orderquery1 = "order by [MarketVal] desc";
                }
                else if (order == "ascending/leadsource")
                {
                    orderquery = "order by #cd.[LeadSourceVal] asc";
                    orderquery1 = "order by [LeadSourceVal] asc";
                }
                else if (order == "descending/leadsource")
                {
                    orderquery = "order by #cd.[LeadSourceVal] desc";
                    orderquery1 = "order by [LeadSourceVal] desc";
                }
                else if (order == "ascending/leadowner")
                {
                    orderquery = "order by #cd.[PersonSales] asc";
                    orderquery1 = "order by [PersonSales] asc";
                }
                else if (order == "descending/leadowner")
                {
                    orderquery = "order by #cd.[PersonSales] desc";
                    orderquery1 = "order by [PersonSales] desc";
                }
                else if (order == "ascending/createdon")
                {
                    orderquery = "order by #cd.[CreatedName] asc";
                    orderquery1 = "order by [CreatedName] asc";
                }
                else if (order == "descending/createdon")
                {
                    orderquery = "order by #cd.[CreatedName] desc";
                    orderquery1 = "order by [CreatedName] desc";
                }
                else if (order == "ascending/firstname")
                {
                    orderquery = "order by #cd.[FirstName] asc";
                    orderquery1 = "order by [FirstName] asc";
                }
                else if (order == "descending/firstname")
                {
                    orderquery = "order by #cd.[FirstName] desc";
                    orderquery1 = "order by [FirstName] desc";
                }
                else if (order == "ascending/lastname")
                {
                    orderquery = "order by #cd.[LastName] asc";
                    orderquery1 = "order by [LastName] asc";
                }
                else if (order == "descending/lastname")
                {
                    orderquery = "order by #cd.[LastName] desc";
                    orderquery1 = "order by [LastName] desc";
                }
                else if (order == "ascending/passengers")
                {
                    orderquery = "order by #cd.[Passengers] asc";
                    orderquery1 = "order by [Passengers] asc";
                }
                else if (order == "descending/passengers")
                {
                    orderquery = "order by #cd.[Passengers] desc";
                    orderquery1 = "order by [Passengers] desc";
                }
                else if (order == "ascending/budget")
                {
                    orderquery = "order by #cd.[Budget] asc";
                    orderquery1 = "order by [Budget] asc";
                }
                else if (order == "descending/budget")
                {
                    orderquery = "order by #cd.[Budget] desc";
                    orderquery1 = "order by [Budget] desc";
                }
                else
                {
                    orderquery = "order by #cd.[Id]  desc";
                    orderquery1 = "order by Id desc";
                }

            }
            else
            {
                orderquery = "order by #cd.[Id] desc";
                orderquery1 = "order by Id desc";
            }
            #endregion
            sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

								select cu.Id,  cc.IsLead 
								into #CustomerData
								from Customer cu
                                left join CustomerExtended ce on ce.CustomerId=cu.CustomerId
								left join CustomerCompany cc on cc.CustomerId = cu.CustomerId
								where cc.CompanyId = '{0}'
                               and cc.IsLead = 1
                               and ce.IsTestAccount != 1
								{1}
                                {2}
								 
								select top(@pagesize) *  into #customerFilterdata from #CustomerData
								where Id not in (Select TOP (@pagestart)  Id from #customerData #cd order by #cd.Id desc)
								order by Id desc

								 
								select cu.*,lkstatus.DisplayText as StatusVal,lk.DisplayText as LeadSourceVal, lkmarket.DisplayText as MarketVal,
                                salesperson.FirstName + ' ' + salesperson.LastName as PersonSales, createdon.FirstName + ' ' + createdon.LastName as CreatedName,cf.IsLead
								from #customerFilterdata  cf

                                left join Customer cu
                                on cu.Id = cf.Id
                                left join Lookup lkstatus on lkstatus.DataValue = iif(cu.[Status] != '-1', cu.[Status], '') and lkstatus.DataKey = 'LeadStatus'
                                left join Lookup lk on lk.DataValue = iif(cu.LeadSource != '-1', cu.LeadSource, '') and lk.DataKey = 'LeadSource'
                                left join Lookup lkmarket on lkmarket.DataValue = iif(cu.Market != '-1', cu.Market, '') and lkmarket.DataKey = 'LeadMarket'
                                left join Employee salesperson on salesperson.UserId  = cu.Soldby1 --iif(cu.Soldby != '' and cu.Soldby is not null, convert(uniqueidentifier, cu.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                left Join Employee createdon on cu.CreatedByUid = createdon.UserId

                                {4}
                                  

                                select Count(Id) As TotalCount from #customerData
                                select Count(Id) as CountCustomer from #customerData Where IsLead = 1

								drop table #customerData
								drop table #customerFilterdata";
            sqlQuery = string.Format(sqlQuery, companyId, DateQuery, subquery, orderquery, orderquery1);

            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataSet GetAllFollowupByCompany(Guid companyId, DateTime? Start, DateTime? End, int pageno, int pagesize, string status, string market, string leads, string soldBy, string searchText, string StatusIDList, string SalesopenerList, string LeadsourceIdList, string SalespersonList, string order)

        {
            if (StatusIDList == "null")
            {
                StatusIDList = StatusIDList.Substring(0, StatusIDList.Length - 4);


            }
            if (SalesopenerList == "null")
            {
                SalesopenerList = SalesopenerList.Substring(0, SalesopenerList.Length - 4);

            }
            if (LeadsourceIdList == "null")
            {
                LeadsourceIdList = LeadsourceIdList.Substring(0, LeadsourceIdList.Length - 4);

            }
            if (SalespersonList == "null")
            {
                SalespersonList = SalespersonList.Substring(0, SalespersonList.Length - 4);

            }
            var array = StatusIDList.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }
            var array1 = SalesopenerList.Split(",");
            string query1 = "";
            if (array1 != null)
            {
                foreach (var item in array1)
                {
                    query1 += string.Format("'{0}',", item);
                }
                query1 = query1.Remove(query1.Length - 1, 1);
            }
            var array2 = LeadsourceIdList.Split(",");
            string query2 = "";
            if (array2 != null)
            {
                foreach (var item in array2)
                {
                    query2 += string.Format("'{0}',", item);
                }
                query2 = query2.Remove(query2.Length - 1, 1);
            }
            var array3 = SalespersonList.Split(",");
            string query3 = "";
            if (array3 != null)
            {
                foreach (var item in array3)
                {
                    query3 += string.Format("'{0}',", item);
                }
                query3 = query3.Remove(query3.Length - 1, 1);
            }
            string searchQuery = "";
            string sqlQuery = "";
            string filterquery = "";
            string DateQuery = "";
            int pagestart = (pageno - 1) * pagesize;
            int pageend = pagesize;
            string subquery = "";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            if (!string.IsNullOrWhiteSpace(searchText))
            {
                searchQuery = string.Format("and cus.BusinessName like '%{0}%' or (cus.FirstName +' '+cus.LastName) like '%{0}%'", searchText);
            }
            if (!string.IsNullOrWhiteSpace(query))
            {
                filterquery += string.Format("and cus.Status in ({0})", query);
            }
            if (!string.IsNullOrWhiteSpace(query1))
            {
                filterquery += string.Format("and (ee.FirstName +' '+ ee.LastName) in ({0})", query1);
            }
            if (!string.IsNullOrWhiteSpace(query3))
            {
                filterquery += string.Format("and (emp.FirstName +' '+ emp.LastName) in ({0})", query3);
            }
            if (!string.IsNullOrWhiteSpace(query2))
            {
                filterquery += string.Format("and  lk.DisplayText in ({0})", query2);
            }
            if ((Start.HasValue && End.HasValue) && (Start != new DateTime() && End != new DateTime()))
            {
                DateQuery = string.Format("and cus.FollowUpDate between '{0}' and '{1}'", Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            string orderquery = "";
            string orderquery1 = "";
            #region Order
            if (!string.IsNullOrWhiteSpace(order))
            {
                if (order == "ascending/leads")
                {
                    orderquery = "order by #cd.[Name] asc";
                    orderquery1 = "order by [Name] asc";
                }
                else if (order == "descending/leads")
                {
                    orderquery = "order by #cd.[Name] desc";
                    orderquery1 = "order by [Name] desc";
                }
                else if (order == "ascending/status")
                {
                    orderquery = "order by #cd.Status asc";
                    orderquery1 = "order by Status asc";
                }
                else if (order == "descending/status")
                {
                    orderquery = "order by #cd.Status desc";
                    orderquery1 = "order by Status desc";
                }
                else if (order == "ascending/leadsource")
                {
                    orderquery = "order by #cd.[LeadSource] asc";
                    orderquery1 = "order by [LeadSource] asc";
                }
                else if (order == "descending/leadsource")
                {
                    orderquery = "order by #cd.[LeadSource] desc";
                    orderquery1 = "order by [LeadSource] desc";
                }
                else if (order == "ascending/salesopenar")
                {
                    orderquery = "order by #cd.[SalesOpenar] asc";
                    orderquery1 = "order by [SalesOpenar] asc";
                }
                else if (order == "descending/salesopenar")
                {
                    orderquery = "order by #cd.[SalesOpenar] desc";
                    orderquery1 = "order by [SalesOpenar] desc";
                }
                else if (order == "ascending/salesperson")
                {
                    orderquery = "order by #cd.[SalesPerson] asc";
                    orderquery1 = "order by [SalesPerson] asc";
                }
                else if (order == "descending/salesperson")
                {
                    orderquery = "order by #cd.[SalesPerson] desc";
                    orderquery1 = "order by [SalesPerson] desc";
                }
                else if (order == "ascending/followupdate")
                {
                    orderquery = "order by #cd.[FollowUpDate] asc";
                    orderquery1 = "order by [FollowUpDate] asc";
                }
                else if (order == "descending/followupdate")
                {
                    orderquery = "order by #cd.[FollowUpDate] desc";
                    orderquery1 = "order by [FollowUpDate] desc";
                }
                else if (order == "ascending/leadtype")
                {
                    orderquery = "order by #cd.[LeadSourceType] asc";
                    orderquery1 = "order by [LeadSourceType] asc";
                }
                else if (order == "descending/leadtype")
                {
                    orderquery = "order by #cd.[LeadSourceType] desc";
                    orderquery1 = "order by [LeadSourceType] desc";
                }
                else
                {
                    orderquery = "order by #cd.[FollowUpDate]  desc";
                    orderquery1 = "order by FollowUpDate desc";
                }

            }
            else
            {
                orderquery = "order by #cd.[FollowUpDate] desc";
                orderquery1 = "order by FollowUpDate desc";
            }
            #endregion
            sqlQuery = @"
                                

								select cus.Id, 
                                        {8} as Name ,
                                        
                                         (ee.FirstName +' '+ ee.LastName) as SalesOpenar,
                                         lk.DisplayText as LeadSource,
                                         lktype.DisplayText as LeadSourceType,
                                         cus.Status,
                                         (emp.FirstName +' '+ emp.LastName) as SalesPerson,
                                         cus.FollowUpDate
								into #CAData
								from Customer cus
								left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                left join Employee ee on cus.SoldBy2 = ee.UserId
                                left join Employee emp on cus.SoldBy = emp.UserId
                                left join LookUp lk on lk.DataValue = cus.LeadSource  and lk.DataKey='LeadSource' 
                                left join LookUp lktype on lktype.DataValue = cus.Type  and lktype.DataKey='CustomerType' 


                              where 
							 cc.CompanyId = '{0}'
                             and cus.FollowUpDate != ''
                               

                                  {7}
                                  {9}
                              
								{1}
                                
								 select * into #CustomerIdData from #CAData
								select top({4}) *  from #CustomerIdData
								where Id not in (Select TOP ({5}) Id from #CAData #cd {10} )
							    {11}

								 
							
                                  

                                select Count(Id) As TotalCount from #CAData
                                select Count(Id) as CountCustomer from #CAData 

								drop table #CAData
								drop table #CustomerIdData";
            sqlQuery = string.Format(sqlQuery, companyId, DateQuery, subquery, pageno, pagesize, pagestart, pageend, searchQuery, NameSql, filterquery, orderquery, orderquery1);

            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataSet GetAllLeadsByCompanyForHudsonOnly(Guid companyId, DateTime? Start, DateTime? End, int pageno, int pagesize, string status, string market, string leads, string soldBy, string order, string salesperson)
        {

            string sqlQuery = @"";
            string DateQuery = "";
            string subquery = "";
            string leadownerquery = "";
            if (status == "null")
            {
                status = status.Substring(0, status.Length - 4);


            }
            var array = status.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }
            if (leads == "null")
            {
                leads = leads.Substring(0, leads.Length - 4);


            }
            var array1 = leads.Split(",");
            string query1 = "";
            if (array1 != null)
            {
                foreach (var item in array1)
                {
                    query1 += string.Format("'{0}',", item);
                }
                query1 = query1.Remove(query1.Length - 1, 1);
            }
            if (salesperson == "null")
            {
                salesperson = salesperson.Substring(0, salesperson.Length - 4);

            }
            var array3 = salesperson.Split(",");
            string query3 = "";
            if (array3 != null)
            {
                foreach (var item in array3)
                {
                    query3 += string.Format("'{0}',", item);
                }
                query3 = query3.Remove(query3.Length - 1, 1);
            }
            if ((Start.HasValue && End.HasValue) && (Start != new DateTime() && End != new DateTime()))
            {
                DateQuery = string.Format("and cu.JoinDate between '{0}' and '{1}'", Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            if (!string.IsNullOrWhiteSpace(query))
            {
                subquery += string.Format("and cu.[Status] in ({0})", query);
            }
            if (!string.IsNullOrWhiteSpace(market) && market != "-1")
            {
                subquery += string.Format("and cu.[Market] in ({0})", market);
            }
            if (!string.IsNullOrWhiteSpace(query1))
            {
                subquery += string.Format("and cu.[LeadSource] in ({0})", query1);
            }
            if (!string.IsNullOrWhiteSpace(soldBy))
            {
                subquery += string.Format("and cu.Soldby='{0}'", soldBy);
            }
            if (!string.IsNullOrWhiteSpace(query3))
            {
                leadownerquery = string.Format("and (salesperson.FirstName +' '+ salesperson.LastName) in ({0})", query3);
            }
            string orderquery = "";
            string orderquery1 = "";
            #region Order
            if (!string.IsNullOrWhiteSpace(order))
            {
                if (order == "ascending/dba")
                {
                    orderquery = "order by #cd.[FirstName] asc";
                    orderquery1 = "order by [FirstName] asc";
                }
                else if (order == "descending/dba")
                {
                    orderquery = "order by #cd.[FirstName] desc";
                    orderquery1 = "order by [FirstName] desc";
                }
                else if (order == "ascending/lead")
                {
                    orderquery = "order by #cd.FirstName asc";
                    orderquery1 = "order by FirstName asc";
                }
                else if (order == "descending/lead")
                {
                    orderquery = "order by #cd.FirstName desc";
                    orderquery1 = "order by FirstName desc";
                }
                else if (order == "ascending/status")
                {
                    orderquery = "order by #cd.[StatusVal] asc";
                    orderquery1 = "order by [StatusVal] asc";
                }
                else if (order == "descending/status")
                {
                    orderquery = "order by #cd.[StatusVal] desc";
                    orderquery1 = "order by [StatusVal] desc";
                }
                else if (order == "ascending/market")
                {
                    orderquery = "order by #cd.[MarketVal] asc";
                    orderquery1 = "order by [MarketVal] asc";
                }
                else if (order == "descending/market")
                {
                    orderquery = "order by #cd.[MarketVal] desc";
                    orderquery1 = "order by [MarketVal] desc";
                }
                else if (order == "ascending/leadsource")
                {
                    orderquery = "order by #cd.[LeadSourceVal] asc";
                    orderquery1 = "order by [LeadSourceVal] asc";
                }
                else if (order == "descending/leadsource")
                {
                    orderquery = "order by #cd.[LeadSourceVal] desc";
                    orderquery1 = "order by [LeadSourceVal] desc";
                }
                else if (order == "ascending/leadowner")
                {
                    orderquery = "order by #cd.[PersonSales] asc";
                    orderquery1 = "order by [PersonSales] asc";
                }
                else if (order == "descending/leadowner")
                {
                    orderquery = "order by #cd.[PersonSales] desc";
                    orderquery1 = "order by [PersonSales] desc";
                }
                else if (order == "ascending/createdon")
                {
                    orderquery = "order by #cd.[CreatedName] asc";
                    orderquery1 = "order by [CreatedName] asc";
                }
                else if (order == "descending/createdon")
                {
                    orderquery = "order by #cd.[CreatedName] desc";
                    orderquery1 = "order by [CreatedName] desc";
                }
                else if (order == "ascending/firstname")
                {
                    orderquery = "order by #cd.[FirstName] asc";
                    orderquery1 = "order by [FirstName] asc";
                }
                else if (order == "descending/firstname")
                {
                    orderquery = "order by #cd.[FirstName] desc";
                    orderquery1 = "order by [FirstName] desc";
                }
                else if (order == "ascending/lastname")
                {
                    orderquery = "order by #cd.[LastName] asc";
                    orderquery1 = "order by [LastName] asc";
                }
                else if (order == "descending/lastname")
                {
                    orderquery = "order by #cd.[LastName] desc";
                    orderquery1 = "order by [LastName] desc";
                }
                else if (order == "ascending/passengers")
                {
                    orderquery = "order by #cd.[Passengers] asc";
                    orderquery1 = "order by [Passengers] asc";
                }
                else if (order == "descending/passengers")
                {
                    orderquery = "order by #cd.[Passengers] desc";
                    orderquery1 = "order by [Passengers] desc";
                }
                else if (order == "ascending/budget")
                {
                    orderquery = "order by #cd.[Budget] asc";
                    orderquery1 = "order by [Budget] asc";
                }
                else if (order == "descending/budget")
                {
                    orderquery = "order by #cd.[Budget] desc";
                    orderquery1 = "order by [Budget] desc";
                }
                else
                {
                    orderquery = "order by #cd.[Id]  desc";
                    orderquery1 = "order by Id desc";
                }

            }
            else
            {
                orderquery = "order by #cd.[Id] desc";
                orderquery1 = "order by Id desc";
            }
            #endregion
            sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

								select cu.Id,  cc.IsLead 
								into #CustomerData
								from Customer cu
								left join CustomerCompany cc on cc.CustomerId = cu.CustomerId
                                left join Employee salesperson on salesperson.UserId = iif(cu.Soldby != '' and cu.Soldby is not null, convert(uniqueidentifier, cu.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))

								where cc.CompanyId = '{0}'
                               and cc.IsLead = 1
								{1}
                                {2}
                                {5}
								 
								select top(@pagesize) *  into #customerFilterdata from #CustomerData
								where Id not in (Select TOP (@pagestart)  Id from #customerData #cd order by #cd.Id desc)
								order by Id desc

								 
								select cu.*,lkstatus.DisplayText as StatusVal,lk.DisplayText as LeadSourceVal, lkmarket.DisplayText as MarketVal,
                                salesperson.FirstName + ' ' + salesperson.LastName as PersonSales, createdon.FirstName + ' ' + createdon.LastName as CreatedName,cf.IsLead
								from #customerFilterdata  cf

                                left join Customer cu
                                on cu.Id = cf.Id
                                left join Lookup lkstatus on lkstatus.DataValue = iif(cu.[Status] != '-1', cu.[Status], '') and lkstatus.DataKey = 'LeadStatus'
                                left join Lookup lk on lk.DataValue = iif(cu.LeadSource != '-1', cu.LeadSource, '') and lk.DataKey = 'LeadSource'
                                left join Lookup lkmarket on lkmarket.DataValue = iif(cu.Market != '-1', cu.Market, '') and lkmarket.DataKey = 'LeadMarket'
                                left join Employee salesperson on salesperson.UserId = iif(cu.Soldby != '' and cu.Soldby is not null, convert(uniqueidentifier, cu.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                left Join Employee createdon on cu.CreatedByUid = createdon.UserId
                           
                                {4}
                                  

                                select Count(Id) As TotalCount from #customerData
                                select Count(Id) as CountCustomer from #customerData Where IsLead = 1

								drop table #customerData
								drop table #customerFilterdata";
            sqlQuery = string.Format(sqlQuery, companyId, DateQuery, subquery, orderquery, orderquery1, leadownerquery);

            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataSet GetAllFinanceDealsByCompanyandCustomer(Guid companyId, DateTime? Start, DateTime? End, int pageno, int pagesize, string status, string market, string leads, string soldBy, string searchText, string FundingCompany, double? FinanceTerm, string StatusIDList, string order)

        {
            if (StatusIDList == "null")
            {
                StatusIDList = StatusIDList.Substring(0, StatusIDList.Length - 4);

            }
            var array = StatusIDList.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }

            string searchQuery = "";
            string sqlQuery = "";
            string filterquery = "";
            string DateQuery = "";
            int pagestart = (pageno - 1) * pagesize;
            int pageend = pagesize;
            string subquery = "";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            if (!string.IsNullOrWhiteSpace(searchText))
            {
                searchQuery = string.Format("and Name like @SearchText", searchText);
            }

            if ((Start.HasValue && End.HasValue) && (Start != new DateTime() && End != new DateTime()))
            {
                DateQuery = string.Format("and cus.JoinDate between '{0}' and '{1}'", Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            if (!string.IsNullOrWhiteSpace(FundingCompany))
            {
                subquery += string.Format("and cus.[FundingCompany] like '%{0}%'", FundingCompany);
            }

            if (FinanceTerm != null)
            {
                subquery += string.Format("and (cus.[FinancedTerm] = {0}/12)", FinanceTerm);
            }

            if (!string.IsNullOrWhiteSpace(query))
            {
                subquery += string.Format("and tk.Status in ({0})", query);
            }
            string orderquery = "";
            string orderquery1 = "";
            #region Order
            if (!string.IsNullOrWhiteSpace(order))
            {
                if (order == "ascending/name")
                {
                    orderquery = "order by #cd.[Name] asc";
                    orderquery1 = "order by [Name] asc";
                }
                else if (order == "descending/name")
                {
                    orderquery = "order by #cd.[Name] desc";
                    orderquery1 = "order by [Name] desc";
                }
                else if (order == "ascending/csaccount")
                {
                    orderquery = "order by #cd.CustomerNo asc";
                    orderquery1 = "order by CustomerNo asc";
                }
                else if (order == "descending/csaccount")
                {
                    orderquery = "order by #cd.CustomerNo desc";
                    orderquery1 = "order by CustomerNo desc";
                }
                else if (order == "ascending/status")
                {
                    orderquery = "order by #cd.[Status] asc";
                    orderquery1 = "order by [Status] asc";
                }
                else if (order == "descending/status")
                {
                    orderquery = "order by #cd.[Status] desc";
                    orderquery1 = "order by [Status] desc";
                }
                else if (order == "ascending/financed")
                {
                    orderquery = "order by #cd.[FinancedAmount] asc";
                    orderquery1 = "order by [FinancedAmount] asc";
                }
                else if (order == "descending/financed")
                {
                    orderquery = "order by #cd.[FinancedAmount] desc";
                    orderquery1 = "order by [FinancedAmount] desc";
                }
                else if (order == "ascending/company")
                {
                    orderquery = "order by #cd.[FundingCompany] asc";
                    orderquery1 = "order by [FundingCompany] asc";
                }
                else if (order == "descending/company")
                {
                    orderquery = "order by #cd.[FundingCompany] desc";
                    orderquery1 = "order by [FundingCompany] desc";
                }
                else if (order == "ascending/term")
                {
                    orderquery = "order by #cd.[FinancedTerm] asc";
                    orderquery1 = "order by [FinancedTerm] asc";
                }
                else if (order == "descending/term")
                {
                    orderquery = "order by #cd.[FinancedTerm] desc";
                    orderquery1 = "order by [FinancedTerm] desc";
                }

                else
                {
                    orderquery = "order by #cd.[Id]  desc";
                    orderquery1 = "order by Id desc";
                }

            }
            else
            {
                orderquery = "order by #cd.[Id] desc";
                orderquery1 = "order by Id desc";
            }
            #endregion
            sqlQuery = @"
                                

								select distinct cus.Id, 
                                       cus.CustomerNo,
                                        {8} as Name ,
                             cast(cus.FinancedAmount as decimal(10,2)) as FinancedAmount ,
                                           
                           cus.FundingCompany,
                           cast(cus.FinancedTerm as decimal(10,2)) as FinancedTerm,
                           tk.Status
                                        
                                       
								into #CAData
								from Customer cus
								left join CustomerExtended ce on ce.CustomerId = cus.CustomerId
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
								left join Ticket tk on tk.CustomerId = cus.CustomerId


                              where cus.Id>0
                                
                               and ce.IsFinanced = 1
                              
                             and cus.FinancedAmount > 0 
							 and cc.CompanyId = '{0}'
                           
                               
                                   
                           
                                 
                              {2}
								{1}
                                
								 select * into #CustomerIdData from #CAData where Id> 0 {7}
								select top({4}) * into #Testtable from #CustomerIdData
								where Id not in (Select TOP ({5}) Id from #CAData #cd {10} )
							    {11}

							    select *  from #Testtable
							   select sum(FinancedAmount) as TotalAmountByPage from #TestTable 
							
                                  

                                select Count(Id) As TotalCount from #CustomerIdData
                                select Count(Id) as CountCustomer from #Testtable

								drop table #CAData
								drop table #CustomerIdData
                                drop table #Testtable
                                                           ";
            sqlQuery = string.Format(sqlQuery, companyId, DateQuery, subquery, pageno, pagesize, pagestart, pageend, searchQuery, NameSql, filterquery, orderquery, orderquery1);

            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    if (!string.IsNullOrWhiteSpace(searchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(searchText.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataSet GetAllFinancedByCompanyandCustomer(Guid companyId, DateTime? Start, DateTime? End, int pageno, int pagesize, string status, string FinRep, string leads, string soldBy, string searchText, string FundingCompany, double? FinanceTerm, string SalesRep, string order, FilterReportModel filter)

        {
            if (SalesRep == "null")
            {
                SalesRep = SalesRep.Substring(0, SalesRep.Length - 4);

            }
            if (SalesRep == "-1")
            {
                SalesRep = "";

            }
            var array = SalesRep.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }
            if (FinRep == "null")
            {
                FinRep = FinRep.Substring(0, FinRep.Length - 4);

            }
            if (FinRep == "-1")
            {
                FinRep = "";

            }
            var array1 = FinRep.Split(",");
            string query1 = "";
            if (array1 != null)
            {
                foreach (var item in array1)
                {
                    query1 += string.Format("'{0}',", item);
                }
                query1 = query1.Remove(query1.Length - 1, 1);
            }
            string searchQuery = "";
            string sqlQuery = "";
            string filterquery = "";
            string DateQuery = "";
            int pagestart = (pageno - 1) * pagesize;
            int pageend = pagesize;
            string subquery = "";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            if (!string.IsNullOrWhiteSpace(searchText))
            {
                searchQuery = string.Format("and Name like @SearchText", searchText);
            }

            if ((Start.HasValue && End.HasValue) && (Start != new DateTime() && End != new DateTime()))
            {
                DateQuery = string.Format("and cus.JoinDate between '{0}' and '{1}'", Start.Value, End.Value);
            }
            //if (!string.IsNullOrWhiteSpace(FundingCompany))
            //{
            //    subquery += string.Format("and cus.[FundingCompany] like '%{0}%'", FundingCompany);
            //}

            //if (FinanceTerm != null)
            //{
            //    subquery += string.Format("and (cus.[FinancedTerm] = {0}/12)", FinanceTerm);
            //}

            if (!string.IsNullOrWhiteSpace(query))
            {
                subquery += string.Format("and cus.Soldby in ({0})", query);
            }
            if (!string.IsNullOrWhiteSpace(query1))
            {
                subquery += string.Format("and ce.FinanceRep in ({0})", query1);
            }
            if (!string.IsNullOrWhiteSpace(filter.installmaxdate) && !string.IsNullOrWhiteSpace(filter.installmindate))
            {
                var date = Convert.ToDateTime(filter.installmaxdate).SetMaxHour();
                var datemin = Convert.ToDateTime(filter.installmindate).SetZeroHour();
                subquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", datemin, date);
            }
            else if (!string.IsNullOrWhiteSpace(filter.installmindate))
            {
                var datemin = Convert.ToDateTime(filter.installmindate).SetMaxHour();
                var date = Convert.ToDateTime(filter.installmindate).SetZeroHour();

                subquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", datemin, date);
            }
            else if (!string.IsNullOrWhiteSpace(filter.installmaxdate))
            {
                var date = Convert.ToDateTime(filter.installmaxdate).SetZeroHour();
                var datemax = Convert.ToDateTime(filter.installmaxdate).SetMaxHour();
                subquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", date, datemax);
            }
            if (!string.IsNullOrWhiteSpace(filter.soldmaxdate) && !string.IsNullOrWhiteSpace(filter.soldmindate))
            {
                var date = Convert.ToDateTime(filter.soldmaxdate).SetMaxHour();
                var datemin = Convert.ToDateTime(filter.soldmindate).SetZeroHour();
                subquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", datemin, date);
            }
            else if (!string.IsNullOrWhiteSpace(filter.soldmindate))
            {
                var datemin = Convert.ToDateTime(filter.soldmindate).SetZeroHour();
                var date = Convert.ToDateTime(filter.soldmindate).SetMaxHour();

                subquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", datemin, date);
            }
            else if (!string.IsNullOrWhiteSpace(filter.soldmaxdate))
            {
                var date = Convert.ToDateTime(filter.soldmaxdate).SetZeroHour();
                var datemax = Convert.ToDateTime(filter.soldmaxdate).SetMaxHour();
                subquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date, datemax);
            }
            if (!string.IsNullOrWhiteSpace(filter.schedulemaxdate) && !string.IsNullOrWhiteSpace(filter.schedulemindate))
            {
                var date = Convert.ToDateTime(filter.schedulemaxdate).SetMaxHour();
                var datemin = Convert.ToDateTime(filter.schedulemindate).SetZeroHour();
                subquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", datemin, date);
            }
            else if (!string.IsNullOrWhiteSpace(filter.schedulemindate))
            {
                var datemin = Convert.ToDateTime(filter.schedulemindate).SetZeroHour();
                var date = Convert.ToDateTime(filter.schedulemindate).SetMaxHour();

                subquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", datemin, date);
            }
            else if (!string.IsNullOrWhiteSpace(filter.schedulemaxdate))
            {
                var date = Convert.ToDateTime(filter.schedulemaxdate).SetZeroHour();
                var datemax = Convert.ToDateTime(filter.schedulemaxdate).SetMaxHour();
                subquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", date, datemax);
            }
            string orderquery = "";
            string orderquery1 = "";
            #region Order
            if (!string.IsNullOrWhiteSpace(order))
            {
                if (order == "ascending/name")
                {
                    orderquery = "order by #cd.[Name] asc";
                    orderquery1 = "order by [Name] asc";
                }
                else if (order == "descending/name")
                {
                    orderquery = "order by #cd.[Name] desc";
                    orderquery1 = "order by [Name] desc";
                }
                else if (order == "ascending/salesrep")
                {
                    orderquery = "order by #cd.SoldbyVal asc";
                    orderquery1 = "order by SoldbyVal asc";
                }
                else if (order == "descending/salesrep")
                {
                    orderquery = "order by #cd.SoldbyVal desc";
                    orderquery1 = "order by SoldbyVal desc";
                }
                else if (order == "ascending/financerep")
                {
                    orderquery = "order by #cd.[FinancerepVal] asc";
                    orderquery1 = "order by [FinancerepVal] asc";
                }
                else if (order == "descending/financerep")
                {
                    orderquery = "order by #cd.[FinancerepVal] desc";
                    orderquery1 = "order by [FinancerepVal] desc";
                }
                else if (order == "ascending/amount")
                {
                    orderquery = "order by #cd.[FinancedAmount] asc";
                    orderquery1 = "order by [FinancedAmount] asc";
                }
                else if (order == "descending/amount")
                {
                    orderquery = "order by #cd.[FinancedAmount] desc";
                    orderquery1 = "order by [FinancedAmount] desc";
                }
                else if (order == "ascending/solddate")
                {
                    orderquery = "order by #cd.[SalesDate] asc";
                    orderquery1 = "order by [SalesDate] asc";
                }
                else if (order == "descending/solddate")
                {
                    orderquery = "order by #cd.[SalesDate] desc";
                    orderquery1 = "order by [SalesDate] desc";
                }
                else if (order == "ascending/scheduledate")
                {
                    orderquery = "order by #cd.[SalesDate] asc";
                    orderquery1 = "order by [SalesDate] asc";
                }
                else if (order == "descending/scheduledate")
                {
                    orderquery = "order by #cd.[SalesDate] desc";
                    orderquery1 = "order by [SalesDate] desc";
                }
                else if (order == "ascending/installdate")
                {
                    orderquery = "order by #cd.[InstallDate] asc";
                    orderquery1 = "order by [InstallDate] asc";
                }
                else if (order == "descending/installdate")
                {
                    orderquery = "order by #cd.[InstallDate] desc";
                    orderquery1 = "order by [InstallDate] desc";
                }
                else
                {
                    orderquery = "order by #cd.[Id]  desc";
                    orderquery1 = "order by Id desc";
                }

            }
            else
            {
                orderquery = "order by #cd.[Id] desc";
                orderquery1 = "order by Id desc";
            }
            #endregion
            sqlQuery = @"
                                

								select distinct cus.Id, 
                                       cus.CustomerNo,
                                        {8} as Name ,
                             cast(cus.FinancedAmount as decimal(10,2)) as FinancedAmount ,
                                 ce.IsFinanced
						   ,ce.FinanceRep
						   ,cus.Soldby
						   ,emp.FirstName + ' '+emp.LastName AS SoldbyVal
						 ,empfinance.FirstName + ' '+empfinance.LastName AS FinancerepVal
						 ,cus.InstallDate
						 ,cus.SalesDate      
						 ,tk.CompletionDate as ScheduleDate

                           --cus.FundingCompany,
                           --cast(cus.FinancedTerm as decimal(10,2)) as FinancedTerm,
                           --tk.Status
                                        
                                       
								into #CAData
								from Customer cus
								left join CustomerExtended ce on ce.CustomerId = cus.CustomerId
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
								--left join Ticket tk on tk.CustomerId = cus.CustomerId
								left join Ticket tk on tk.CustomerId = cus.CustomerId and tk.TicketType ='Installation'

                           LEFT JOIN Employee emp on convert(nvarchar(50), emp.UserId) = cus.Soldby
						   left join Employee empfinance on empfinance.UserId = ce.FinanceRep

                              where cus.Id>0
                                
                          
							 and cc.CompanyId = '{0}'
                            and (cus.FinancedAmount > 0 or ce.IsFinanced = 1)
                            and ce.IsTestAccount != 1
                               
                                   
                           
                                 
                              {2}
								{1}
                                
								 select * into #CustomerIdData from #CAData where Id> 0 {7}
								select top({4}) * into #Testtable from #CustomerIdData
								where Id not in (Select TOP ({5}) Id from #CAData #cd {10} )
							    {11}

							    select *  from #Testtable {11}
							   select sum(FinancedAmount) as TotalAmountByPage from #TestTable 
							
                                  

                                select Count(Id) As TotalCount from #CustomerIdData
                                select Count(Id) as CountCustomer from #Testtable

								drop table #CAData
								drop table #CustomerIdData
                                drop table #Testtable
                                                           ";
            sqlQuery = string.Format(sqlQuery, companyId, DateQuery, subquery, pageno, pagesize, pagestart, pageend, searchQuery, NameSql, filterquery, orderquery, orderquery1);

            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    if (!string.IsNullOrWhiteSpace(searchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(searchText.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllCustomerByCompany(Guid companyId, DateTime? Start, DateTime? End, int pageno, int pagesize, List<string> Status, string market, string soldBy, string acctype, string servicetype)
        {
            //if (Status == "null")
            //{
            //    Status = Status.Substring(0, Status.Length - 4);


            //}

            string query2 = "";
            if (Status.Count != 0)
            {
                foreach (var item in Status)
                {
                    query2 += string.Format("'{0}',", item);
                }
                query2 = query2.Remove(query2.Length - 1, 1);
            }
            string filterquery = "";
            string sqlQuery = @"";
            string statusQuery = "";
            string marketquery = "";
            string status = "";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            if (Status.Count > 0)
            {
                if (!string.IsNullOrWhiteSpace(query2))
                {
                    status = string.Format("and lkstatus.DisplayText in ({0})", query2);
                }
            }
            if (Status.Count > 0)
            {
                if (Status.Count == 1 && Status.Contains("Active"))
                {
                    statusQuery = " and cu.IsActive = 1";
                }
                else if (Status.Count == 1 && Status.Contains("Cancel"))
                {
                    statusQuery = " and cu.IsActive = 0";
                }
                else if (Status.Count == 2)
                {
                    statusQuery = "";
                }
            }
            if (!string.IsNullOrWhiteSpace(market))
            {
                marketquery += string.Format("and cu.Market in ({0}) ", market);
            }
            if (!string.IsNullOrWhiteSpace(servicetype) && servicetype != "-1" && servicetype != "'null'")
            {
                marketquery += string.Format("and cu.Type in ({0}) ", servicetype);
            }
            if (!string.IsNullOrWhiteSpace(acctype) && acctype != "-1" && acctype != "'null'")
            {
                marketquery += string.Format("and cu.CustomerAccountType in ({0}) ", acctype);
            }

            //if (!string.IsNullOrWhiteSpace(query2))
            //{
            //    filterquery += string.Format("and lkstatus.DisplayText in ({0})", query2);
            //}

            if (!string.IsNullOrWhiteSpace(soldBy))
            {
                marketquery += string.Format("and cu.Soldby='{0}' ", soldBy);
            }
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

								select distinct cu.Id, cu.CustomerId, cu.FirstName, cu.LastName, cu.BusinessName, cu.DBA,CusType.DisplayText as CustomerType,
								cu.PrimaryPhone, cu.EmailAddress, cu.JoinDate, lkstatus.DisplayText as Status, cu.IsActive, cu.CustomerNo,
                                dbo.MakeAddress(cu.Street,cu.StreetType,cu.Appartment,cu.City,cu.[State],cu.ZipCode) as [Address], cu.Street, cu.ZipCode, cu.City, cu.[State], format(cu.AnnualRevenue,'N2') as [AnnualRevenue], lk.DisplayText as AccountType, salesperson.FirstName + ' ' + salesperson.LastName as PersonSales, Market.DisplayText as MarketVal
                                ,convert(Date,ccq.CancellationDate)	as CancellationDate							
                                into #customerData from Customer cu 
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'
                                left join Lookup lk on lk.DataValue = iif(cu.CustomerAccountType != '-1', cu.CustomerAccountType, '') and lk.DataKey = 'CustomerAccountType'
                                left join Lookup Market on Market.DataValue = iif(cu.Market != '-1', cu.Market, '') and Market.DataKey = 'LeadMarket'
                                left join Lookup CusType on CusType.DataValue = cu.Type and CusType.DataKey = 'CustomerType'
                                left join Employee salesperson on salesperson.UserId = iif(cu.Soldby != '' and cu.Soldby is not null, TRY_Convert(uniqueidentifier, cu.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                LEFT JOIN Lookup lkstatus on lkstatus.DataValue=cu.Status and lkstatus.DataKey='LeadStatus'  
                                LEFT JOIN CustomerCancellationQueue ccq on ccq.CustomerId=cu.CustomerId and ccq.IsActive=1                              
                                where cc.IsLead=0
                                   {3}
								and cu.JoinDate between '{1}' and '{2}'
                               
                   
                                 {6}
         
								select * into #customerFilterdata from #customerData

								select top(@pagesize) * from #customerFilterdata
								where Id not in (Select TOP (@pagestart)  Id from #customerData #cd order by #cd.Id desc)
								order by Id desc

								drop table #customerData
								drop table #customerFilterdata";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), statusQuery, marketquery, NameSql, filterquery, soldBy);
            }
            else
            {
                sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

								select distinct cu.Id, cu.CustomerId, cu.FirstName, cu.LastName, cu.BusinessName, cu.DBA,CusType.DisplayText as CustomerType,
								cu.PrimaryPhone, cu.EmailAddress, cu.JoinDate, lkstatus.DisplayText as Status, cu.IsActive, cu.CustomerNo,
                                dbo.MakeAddress(cu.Street,cu.StreetType,cu.Appartment,cu.City,cu.[State],cu.ZipCode) as [Address], cu.Street, cu.ZipCode, cu.City, cu.[State], format(cu.AnnualRevenue,'N2') as [AnnualRevenue], lk.DisplayText as AccountType, salesperson.FirstName + ' ' + salesperson.LastName as PersonSales, Market.DisplayText as MarketVal
                                ,convert(Date,ccq.CancellationDate)	as CancellationDate								
                                into #customerData from Customer cu 
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'
                                left join Lookup lk on lk.DataValue = iif(cu.CustomerAccountType != '-1', cu.CustomerAccountType, '') and lk.DataKey = 'CustomerAccountType'
                                left join Lookup Market on Market.DataValue = iif(cu.Market != '-1', cu.Market, '') and Market.DataKey = 'LeadMarket'
                                left join Lookup CusType on CusType.DataValue = cu.Type and CusType.DataKey = 'CustomerType'
                                left join Employee salesperson on salesperson.UserId = iif(cu.Soldby != '' and cu.Soldby is not null, TRY_Convert(uniqueidentifier, cu.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                LEFT JOIN Lookup lkstatus on lkstatus.DataValue=cu.Status and lkstatus.DataKey='LeadStatus'                                
                                LEFT JOIN CustomerCancellationQueue ccq on ccq.CustomerId=cu.CustomerId and ccq.IsActive=1                    
                                where cc.IsLead=0
                                {1}
                                --{5}
                                 
                     
								select * into #customerFilterdata from #customerData

								select top(@pagesize) * from #customerFilterdata
								where Id not in (Select TOP (@pagestart)  Id from #customerData #cd order by #cd.Id desc)
								order by Id desc

								drop table #customerData
								drop table #customerFilterdata";

                sqlQuery = string.Format(sqlQuery, companyId, statusQuery, marketquery, filterquery, soldBy, status);
            }
            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllCancelCustomerByCompany(Guid companyId, DateTime? Start, DateTime? End, int pageno, int pagesize, string order, string SearchText)
        {
            //if (Status == "null")
            //{
            //    Status = Status.Substring(0, Status.Length - 4);


            //}

            //string query2 = "";
            //if (Status.Count != 0)
            //{
            //    foreach (var item in Status)
            //    {
            //        query2 += string.Format("'{0}',", item);
            //    }
            //    query2 = query2.Remove(query2.Length - 1, 1);
            //}
            string filterquery = "";
            string sqlQuery = @"";
            string statusQuery = "";
            string marketquery = "";
            string searchQuery = "";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string orderquery = "";
            string orderquery1 = "";

            if (!string.IsNullOrEmpty(SearchText))
            {
                searchQuery = string.Format(" AND (REPLACE(REPLACE(cu.FirstName, '  ', ' '), '  ', ' ') LIKE '%{0}%' " +
                             "OR REPLACE(REPLACE(cu.LastName, '  ', ' '), '  ', ' ') LIKE '%{0}%' " +
                             "OR REPLACE(REPLACE(cu.FirstName + ' ' + cu.LastName, '  ', ' '), '  ', ' ') LIKE '%{0}%' " +
                             "OR REPLACE(REPLACE(cu.BusinessName, '  ', ' '), '  ', ' ') LIKE '%{0}%')",
                            SearchText
                        );
            }
            #region Order
            if (!string.IsNullOrWhiteSpace(order))
            {
                if (order == "ascending/name")
                {
                    orderquery = "order by #cd.[FirstName] asc";
                    orderquery1 = "order by [FirstName] asc";
                }
                else if (order == "descending/name")
                {
                    orderquery = "order by #cd.[FirstName] desc";
                    orderquery1 = "order by [FirstName] desc";
                }
                else if (order == "ascending/address")
                {
                    orderquery = "order by #cd.Address asc";
                    orderquery1 = "order by Address asc";
                }
                else if (order == "descending/address")
                {
                    orderquery = "order by #cd.Address desc";
                    orderquery1 = "order by Address desc";
                }
                else if (order == "ascending/date")
                {
                    orderquery = "order by #cd.[CancellationDate] asc";
                    orderquery1 = "order by [CancellationDate] asc";
                }
                else if (order == "descending/date")
                {
                    orderquery = "order by #cd.[CancellationDate] desc";
                    orderquery1 = "order by [CancellationDate] desc";
                }
                else if (order == "ascending/status")
                {
                    orderquery = "order by #cd.[Status] asc";
                    orderquery1 = "order by [Status] asc";
                }
                else if (order == "descending/status")
                {
                    orderquery = "order by #cd.[Status] desc";
                    orderquery1 = "order by [Status] desc";
                }



                else
                {
                    orderquery = "order by #cd.[Id]  desc";
                    orderquery1 = "order by Id desc";
                }

            }
            else
            {
                orderquery = "order by #cd.[Id] desc";
                orderquery1 = "order by Id desc";
            }
            #endregion
            //if (Status.Count > 0)
            //{
            //    if (Status.Count == 1 && Status.Contains("Active"))
            //    {
            //        statusQuery = " and cu.IsActive = 1";
            //    }
            //    else if (Status.Count == 1 && Status.Contains("Cancel"))
            //    {
            //        statusQuery = " and cu.IsActive = 0";
            //    }
            //    else if (Status.Count == 2)
            //    {
            //        statusQuery = "";
            //    }
            //}
            //if (!string.IsNullOrWhiteSpace(market))
            //{
            //    marketquery += string.Format("and cu.Market in ({0}) ", market);
            //}
            //if (!string.IsNullOrWhiteSpace(servicetype) && servicetype != "-1" && servicetype != "'null'")
            //{
            //    marketquery += string.Format("and cu.Type in ({0}) ", servicetype);
            //}
            //if (!string.IsNullOrWhiteSpace(acctype) && acctype != "-1" && acctype != "'null'")
            //{
            //    marketquery += string.Format("and cu.CustomerAccountType in ({0}) ", acctype);
            //}

            //if (!string.IsNullOrWhiteSpace(query2))
            //{
            //    filterquery += string.Format("and lkstatus.DisplayText in ({0})", query2);
            //}

            //if (!string.IsNullOrWhiteSpace(soldBy))
            //{
            //    marketquery += string.Format("and cu.Soldby='{0}' ", soldBy);
            //}
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

								select distinct cu.Id, cu.CustomerId,ccq.Id as CancellationId, cu.FirstName, cu.LastName, cu.BusinessName, cu.DBA,
								cu.PrimaryPhone, cu.EmailAddress, cu.JoinDate, lkstatus.DisplayText as Status, cu.IsActive, cu.CustomerNo,
                                dbo.MakeAddress(cu.Street,cu.StreetType,cu.Appartment,cu.City,cu.[State],cu.ZipCode) as [Address], cu.Street, cu.ZipCode, cu.City, cu.[State]
                                ,convert(Date,ccq.CancellationDate)	as CancellationDate
                                ,SUBSTRING((
									SELECT ', ' + lpreason.DisplayText
									FROM CustomerCancellationReason ccr
									left join Lookup lpreason on lpreason.DataValue=ccr.CancellationReason and lpreason.DataKey='CancellationReason'
									WHERE ccr.CustomerId=cu.CustomerId
									FOR XML PATH('')
								), 2, 1000000) as CancellationReason
                                into #customerData from
                                CustomerCancellationQueue ccq
                                left join Customer cu on cu.CustomerId=ccq.CustomerId
                                left join CustomerExtended ce on ce.CustomerId=cu.CustomerId
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'
                                --left join Lookup lk on lk.DataValue = iif(cu.CustomerAccountType != '-1', cu.CustomerAccountType, '') and lk.DataKey = 'CustomerAccountType'
                                --left join Lookup Market on Market.DataValue = iif(cu.Market != '-1', cu.Market, '') and Market.DataKey = 'LeadMarket'
                                --left join Lookup CusType on CusType.DataValue = cu.Type and CusType.DataKey = 'CustomerType'
                                --left join Employee salesperson on salesperson.UserId = iif(cu.Soldby != '' and cu.Soldby is not null, TRY_Convert(uniqueidentifier, cu.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                LEFT JOIN Lookup lkstatus on lkstatus.DataValue=cu.Status and lkstatus.DataKey='LeadStatus'  
                                --LEFT JOIN CustomerCancellationQueue ccq on ccq.CustomerId=cu.CustomerId and ccq.IsActive=1                              
                                where cu.IsActive=0 and ce.IsTestAccount != 1 and  ccq.IsActive = 1
								and ccq.CancellationDate between '{1}' and '{2}' {5}
                                
                   
         
								select * into #customerFilterdata from #customerData

								select top(@pagesize) * from #customerFilterdata
								where Id not in (Select TOP (@pagestart)  Id from #customerData #cd {3})
								--order by Id desc
                                {4}

								drop table #customerData
								drop table #customerFilterdata";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), orderquery, orderquery1, searchQuery);
            }
            else
            {
                sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

								select distinct cu.Id, cu.CustomerId,ccq.Id as CancellationId, cu.FirstName, cu.LastName, cu.BusinessName, cu.DBA,
								cu.PrimaryPhone, cu.EmailAddress, cu.JoinDate, lkstatus.DisplayText as Status, cu.IsActive, cu.CustomerNo,
                                dbo.MakeAddress(cu.Street,cu.StreetType,cu.Appartment,cu.City,cu.[State],cu.ZipCode) as [Address], cu.Street, cu.ZipCode, cu.City, cu.[State]
                                ,convert(Date,ccq.CancellationDate)	as CancellationDate
                                ,SUBSTRING((
									SELECT ', ' + lpreason.DisplayText
									FROM CustomerCancellationReason ccr
									left join Lookup lpreason on lpreason.DataValue=ccr.CancellationReason and lpreason.DataKey='CancellationReason'
									WHERE ccr.CustomerId=cu.CustomerId
									FOR XML PATH('')
								), 2, 1000000) as CancellationReason
                                into #customerData from CustomerCancellationQueue ccq
                                left join Customer cu on cu.CustomerId=ccq.CustomerId
                                left join CustomerExtended ce on ce.CustomerId=cu.CustomerId
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'
                                --left join Lookup lk on lk.DataValue = iif(cu.CustomerAccountType != '-1', cu.CustomerAccountType, '') and lk.DataKey = 'CustomerAccountType'
                                --left join Lookup Market on Market.DataValue = iif(cu.Market != '-1', cu.Market, '') and Market.DataKey = 'LeadMarket'
                                --left join Lookup CusType on CusType.DataValue = cu.Type and CusType.DataKey = 'CustomerType'
                                --left join Employee salesperson on salesperson.UserId = iif(cu.Soldby != '' and cu.Soldby is not null, TRY_Convert(uniqueidentifier, cu.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                LEFT JOIN Lookup lkstatus on lkstatus.DataValue=cu.Status and lkstatus.DataKey='LeadStatus'                                
                                --LEFT JOIN CustomerCancellationQueue ccq on ccq.CustomerId=cu.CustomerId and ccq.IsActive=1                    
                                where cu.IsActive=0  AND ccq.IsCancelled = 1 and ccq.IsActive=1   {3}
                         
                                 
                     
								select * into #customerFilterdata from #customerData

								select top(@pagesize) * from #customerFilterdata
								where Id not in (Select TOP (@pagestart)  Id from #customerData #cd {1})
								--order by Id desc
                                {2}

								drop table #customerData
								drop table #customerFilterdata";

                sqlQuery = string.Format(sqlQuery, companyId, orderquery, orderquery1, searchQuery);
            }
            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllInactiveCustomerByCompany(Guid companyId, DateTime? Start, DateTime? End, int pageno, int pagesize)
        {
            string sqlQuery = @"";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }

            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

								select distinct cus.Id, cus.CustomerId, {3} as Name,
								cus.PrimaryPhone, cus.EmailAddress,
                                dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.ZipCode,cus.City,cus.[State]) as [Address]								
                                into #customerData from Customer cus 
                                left join CustomerCompany cc
                                on cus.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'                              
                                where cc.IsLead=0
                                and cus.IsActive=0
								and cus.JoinDate between '{1}' and '{2}'

								select * into #customerFilterdata from #customerData

								select top(@pagesize) * from #customerFilterdata
								where Id not in (Select TOP (@pagestart)  Id from #customerData #cd order by #cd.Id desc)
								order by Id desc

								drop table #customerData
								drop table #customerFilterdata";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), NameSql);
            }
            else
            {
                sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

								select distinct cus.Id, cus.CustomerId, {1} as Name,
								cus.PrimaryPhone, cus.EmailAddress,
                                dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.ZipCode,cus.City,cus.[State]) as [Address]								
                                into #customerData from Customer cus 
                                left join CustomerCompany cc
                                on cus.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'                    
                                where cc.IsLead=0
                                and cus.IsActive=0

								select * into #customerFilterdata from #customerData

								select top(@pagesize) * from #customerFilterdata
								where Id not in (Select TOP (@pagestart)  Id from #customerData #cd order by #cd.Id desc)
								order by Id desc

								drop table #customerData
								drop table #customerFilterdata";

                sqlQuery = string.Format(sqlQuery, companyId, NameSql);
            }
            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllCustomerByCompanyCancelReport(Guid companyId, DateTime? Start, DateTime? End, int pageno, int pagesize, List<string> Status, string market)
        {
            string sqlQuery = @"";
            string statusQuery = "";
            string marketquery = "";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            if (Status.Count > 0)
            {
                if (Status.Count == 1 && Status.Contains("Active"))
                {
                    statusQuery = " and cus.IsActive = 1";
                }
                else if (Status.Count == 1 && Status.Contains("Cancel"))
                {
                    statusQuery = " and cus.IsActive = 0";
                }
                else if (Status.Count == 2)
                {
                    statusQuery = "";
                }
            }
            if (!string.IsNullOrWhiteSpace(market))
            {
                marketquery = string.Format("and cus.Market in ({0})", market);
            }
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select cus.Id, {5} as [Name], dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.ZipCode,cus.City,cus.[State]) as [Address], lkstatus.DisplayText as Status
                                ,convert(Date,ccq.CancellationDate)	as CancellationDate								
                                from Customer cus
                                left join CustomerCompany cc
                                on cus.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'
                                left join Lookup lk on lk.DataValue = iif(cus.CustomerAccountType != '-1', cus.CustomerAccountType, '') and lk.DataKey = 'CustomerAccountType'
                                left join Lookup Market on Market.DataValue = iif(cus.Market != '-1', cus.Market, '') and Market.DataKey = 'LeadMarket'
                                left join Employee salesperson on salesperson.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, TRY_Convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                LEFT JOIN Lookup lkstatus on lkstatus.DataValue=cus.Status and lkstatus.DataKey='LeadStatus'  
                                LEFT JOIN CustomerCancellationQueue ccq on ccq.CustomerId=cus.CustomerId and ccq.IsActive=1                              
                                where cc.IsLead=0
								and cus.JoinDate between '{1}' and '{2}'
                      --        {3}
                                {4}
                                group by cus.Id, {5}, dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.ZipCode,cus.City,cus.[State]), lkstatus.DisplayText, ccq.CancellationDate
								order by cus.Id desc";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), statusQuery, market, NameSql);
            }
            else
            {
                sqlQuery = @"select cus.Id, {3} as [Name], dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.ZipCode,cus.City,cus.[State]) as [Address], lkstatus.DisplayText as Status
                                ,convert(Date,ccq.CancellationDate)	as CancellationDate								
                                from Customer cus
                                left join CustomerCompany cc
                                on cus.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'
                                left join Lookup lk on lk.DataValue = iif(cus.CustomerAccountType != '-1', cus.CustomerAccountType, '') and lk.DataKey = 'CustomerAccountType'
                                left join Lookup Market on Market.DataValue = iif(cus.Market != '-1', cus.Market, '') and Market.DataKey = 'LeadMarket'
                                left join Employee salesperson on salesperson.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, TRY_Convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                LEFT JOIN Lookup lkstatus on lkstatus.DataValue=cus.Status and lkstatus.DataKey='LeadStatus'  
                                LEFT JOIN CustomerCancellationQueue ccq on ccq.CustomerId=cus.CustomerId and ccq.IsActive=1                              
                                where cc.IsLead=0
                              {1}
                                {2}
                                group by cus.Id, {3}, dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.ZipCode,cus.City,cus.[State]), lkstatus.DisplayText, ccq.CancellationDate
								order by cus.Id desc";

                sqlQuery = string.Format(sqlQuery, companyId, statusQuery, marketquery, NameSql);
            }
            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllCancelCustomerByCompanyCancelReport(Guid companyId, DateTime? Start, DateTime? End, int pageno, int pagesize, string SearchText)
        {
            string sqlQuery = @"";
            string statusQuery = "";
            string marketquery = "";
            string searchQuery = "";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }

            if (!string.IsNullOrEmpty(SearchText))
            {
                searchQuery = string.Format(" and cus.FirstName like '%{0}%' or cus.LastName like '%{0}%' or cus.FirstName+' '+cus.LastName like '%{0}%'", SearchText);
            }
            //if (Status.Count > 0)
            //{
            //    if (Status.Count == 1 && Status.Contains("Active"))
            //    {
            //        statusQuery = " and cus.IsActive = 1";
            //    }
            //    else if (Status.Count == 1 && Status.Contains("Cancel"))
            //    {
            //        statusQuery = " and cus.IsActive = 0";
            //    }
            //    else if (Status.Count == 2)
            //    {
            //        statusQuery = "";
            //    }
            //}
            //if (!string.IsNullOrWhiteSpace(market))
            //{
            //    marketquery = string.Format("and cus.Market in ({0})", market);
            //}
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select cus.Id, {3} as [Name], dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.ZipCode,cus.City,cus.[State]) as [Address], lkstatus.DisplayText as Status
                                ,format(ccq.CancellationDate,'M/d/yy') as CancellationDate
                                ,SUBSTRING((
									SELECT ', ' + lpreason.DisplayText
									FROM CustomerCancellationReason ccr
									left join Lookup lpreason on lpreason.DataValue=ccr.CancellationReason and lpreason.DataKey='CancellationReason'
									WHERE ccr.CustomerId=cus.CustomerId
									FOR XML PATH('')
								), 2, 1000000) as CancellationReason
                                from CustomerCancellationQueue ccq
                                left join Customer cus on cus.CustomerId=ccq.CustomerId
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                left join CustomerCompany cc
                                on cus.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'
                                --left join Lookup lk on lk.DataValue = iif(cus.CustomerAccountType != '-1', cus.CustomerAccountType, '') and lk.DataKey = 'CustomerAccountType'
                                --left join Lookup Market on Market.DataValue = iif(cus.Market != '-1', cus.Market, '') and Market.DataKey = 'LeadMarket'
                                --left join Employee salesperson on salesperson.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, TRY_Convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                LEFT JOIN Lookup lkstatus on lkstatus.DataValue=cus.Status and lkstatus.DataKey='LeadStatus'  
                                --LEFT JOIN CustomerCancellationQueue ccq on ccq.CustomerId=cus.CustomerId and ccq.IsActive=1                              
                                where cus.IsActive=0 and ce.IsTestAccount != 1 and ccq.IsActive=1 
								and ccq.CancellationDate between '{1}' and '{2}' {4}

								order by cus.Id desc";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), NameSql, searchQuery);
            }
            else
            {
                sqlQuery = @"select cus.Id, {1} as [Name], dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.ZipCode,cus.City,cus.[State]) as [Address], lkstatus.DisplayText as Status
                                ,convert(Date,ccq.CancellationDate)	as CancellationDate	
                                ,SUBSTRING((
									SELECT ', ' + lpreason.DisplayText
									FROM CustomerCancellationReason ccr
									left join Lookup lpreason on lpreason.DataValue=ccr.CancellationReason and lpreason.DataKey='CancellationReason'
									WHERE ccr.CustomerId=cus.CustomerId
									FOR XML PATH('')
								), 2, 1000000) as CancellationReason
                                from CustomerCancellationQueue ccq
                                left join Customer cus on cus.CustomerId=ccq.CustomerId
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                left join CustomerCompany cc
                                on cus.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'
                                --left join Lookup lk on lk.DataValue = iif(cus.CustomerAccountType != '-1', cus.CustomerAccountType, '') and lk.DataKey = 'CustomerAccountType'
                                --left join Lookup Market on Market.DataValue = iif(cus.Market != '-1', cus.Market, '') and Market.DataKey = 'LeadMarket'
                                --left join Employee salesperson on salesperson.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, TRY_Convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                LEFT JOIN Lookup lkstatus on lkstatus.DataValue=cus.Status and lkstatus.DataKey='LeadStatus'  
                                --LEFT JOIN CustomerCancellationQueue ccq on ccq.CustomerId=cus.CustomerId and ccq.IsActive=1                              
                                where cus.IsActive=0 and ce.IsTestAccount != 1 and ccq.IsActive=1  {2}

								order by cus.Id desc";

                sqlQuery = string.Format(sqlQuery, companyId, NameSql, searchQuery);
            }
            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataSet GetAllCustomerCancellationQueue(DateTime? StartDate, DateTime? EndDate, int pageno, int pagesize, string reason, string contractSigned, string order, string employeereason, string effectivemindate, string effectivemaxdate, string name)
        {
            string sqlQuery = @"";
            string dateSubQuery = "";
            string reasonSubQuery = "";
            string employeereasonSubQuery = "";
            string effectivedatequery = "";
            string contractSignedSubQuery = "";
            string orderquery = "";
            string orderquery1 = "";
            string nameSubQuery = "";

            if (!string.IsNullOrWhiteSpace(name))
            {
                //nameSubQuery = string.Format(" and CustomerName like '%{0}%'", name);
                nameSubQuery = @"
                AND (
                    CHARINDEX(@SearchText, REPLACE(REPLACE(LTRIM(RTRIM(CustomerName)), '  ', ' '), '  ', ' ')) > 0
                    OR CHARINDEX(@SearchText, REPLACE(REPLACE(LTRIM(RTRIM(FirstName)), '  ', ' '), '  ', ' ')) > 0
                    OR CHARINDEX(@SearchText, REPLACE(REPLACE(LTRIM(RTRIM(LastName)), '  ', ' '), '  ', ' ')) > 0
                    OR CHARINDEX(@SearchText, REPLACE(REPLACE(LTRIM(RTRIM(FirstName + ' ' + LastName)), '  ', ' '), '  ', ' ')) > 0
                )";

            }

            if (reason == "null" || reason == "undefined")
            {
                reason = "";

            }
            var array = reason.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }
            #region Order
            if (!string.IsNullOrWhiteSpace(order))
            {
                if (order == "ascending/customer")
                {
                    orderquery = "order by #customerData.[FirstName] asc";
                    orderquery1 = "order by [FirstName] asc";
                }
                else if (order == "descending/customer")
                {
                    orderquery = "order by #customerData.[FirstName] desc";
                    orderquery1 = "order by [FirstName] desc";
                }
                else if (order == "ascending/signed")
                {
                    orderquery = "order by #customerData.IsSigned asc";
                    orderquery1 = "order by IsSigned asc";
                }
                else if (order == "descending/signed")
                {
                    orderquery = "order by #customerData.IsSigned desc";
                    orderquery1 = "order by IsSigned desc";
                }
                else if (order == "ascending/date")
                {
                    orderquery = "order by #customerData.[CancellationDate] asc";
                    orderquery1 = "order by [CancellationDate] asc";
                }
                else if (order == "descending/date")
                {
                    orderquery = "order by #customerData.[CancellationDate] desc";
                    orderquery1 = "order by [CancellationDate] desc";
                }
                else if (order == "ascending/unpaid")
                {
                    orderquery = "order by #customerData.[RemainingBalance] asc";
                    orderquery1 = "order by [RemainingBalance] asc";
                }
                else if (order == "descending/unpaid")
                {
                    orderquery = "order by #customerData.[RemainingBalance] desc";
                    orderquery1 = "order by [RemainingBalance] desc";
                }
                else if (order == "ascending/cancelledby")
                {
                    orderquery = "order by #customerData.[CreatedByVal] asc";
                    orderquery1 = "order by [CreatedByVal] asc";
                }
                else if (order == "descending/cancelledby")
                {
                    orderquery = "order by #customerData.[CreatedByVal] desc";
                    orderquery1 = "order by [CreatedByVal] desc";
                }
                else if (order == "ascending/reason")
                {
                    orderquery = "order by #customerData.[ReasonDisplay] asc";
                    orderquery1 = "order by [ReasonDisplay] asc";
                }
                else if (order == "descending/reason")
                {
                    orderquery = "order by #customerData.[ReasonDisplay] desc";
                    orderquery1 = "order by [ReasonDisplay] desc";
                }
                else if (order == "ascending/empreason")
                {
                    orderquery = "order by #customerData.[EmpreasonDisplay] asc";
                    orderquery1 = "order by [EmpreasonDisplay] asc";
                }
                else if (order == "descending/empreason")
                {
                    orderquery = "order by #customerData.[EmpreasonDisplay] desc";
                    orderquery1 = "order by [EmpreasonDisplay] desc";
                }
                else
                {
                    orderquery = "order by #customerData.[Id]  desc";
                    orderquery1 = "order by Id desc";
                }

            }
            else
            {
                orderquery = "order by #customerData.[Id] desc";
                orderquery1 = "order by Id desc";
            }
            #endregion
            if (StartDate.HasValue && EndDate.HasValue && StartDate != new DateTime() && EndDate != new DateTime())
            {
                dateSubQuery = string.Format(" and ccq.CancellationDate between '{0}' and '{1}'", StartDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), EndDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            if (!string.IsNullOrEmpty(query) && query != "'-1'")
            {
                reasonSubQuery = string.Format(" and lpreason.DataValue in ({0})", query);
            }
            if (!string.IsNullOrEmpty(employeereason) && employeereason != "-1" && employeereason != "undefined")
            {
                employeereasonSubQuery = string.Format(" and lpdfwreason.DataValue='{0}'", employeereason);
            }
            if (!string.IsNullOrEmpty(contractSigned) && contractSigned != "-1" && contractSigned != "undefined")
            {
                bool reasonBool = false;
                if (contractSigned == "Yes")
                {
                    reasonBool = true;
                }
                contractSignedSubQuery = string.Format(" and ccq.IsSigned='{0}'", reasonBool);
            }
            if (!string.IsNullOrWhiteSpace(effectivemindate) && !string.IsNullOrWhiteSpace(effectivemaxdate) && effectivemindate != "undefined" && effectivemaxdate != "undefined")
            {
                var datemin = Convert.ToDateTime(effectivemindate);
                var date = Convert.ToDateTime(effectivemaxdate);
                effectivedatequery += string.Format("and ccq.CancellationDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(effectivemindate) && effectivemindate != "undefined")
            {
                var date = Convert.ToDateTime(effectivemindate);
                effectivedatequery += string.Format("and ccq.CancellationDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(effectivemaxdate) && effectivemaxdate != "undefined")
            {
                var date = Convert.ToDateTime(effectivemaxdate);
                effectivedatequery += string.Format("and ccq.CancellationDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            sqlQuery = @"declare @pagestart int
                        declare @pageend int
                        set @pagestart=(@pageno-1)* @pagesize 
                        set @pageend = @pagesize

						select ccq.*,c.FirstName,c.LastName,c.CustomerNo,CASE 
	                    WHEN (c.BusinessName = '' or c.BusinessName IS NULL) THEN c.FirstName +' '+c.LastName
	                    ELSE  c.BusinessName
                        END as CustomerName,dbo.MakeAddress(c.Street,c.StreetType,c.Appartment,c.City,c.[State],c.ZipCode) as [Address]
                        ,c.IsActive CustomerIsActive,c.Id as CustomerIdInt, lpdfwreason.DisplayText as EmpreasonDisplay,emp.FirstName+' '+emp.LastName as CreatedByVal
						,SUBSTRING((
							SELECT ', ' + lpreason.DisplayText
							FROM CustomerCancellationReason ccr
							left join Lookup lpreason on lpreason.DataValue=ccr.CancellationReason and lpreason.DataKey='CancellationReason'
							WHERE ccr.CustomerId=c.CustomerId
							FOR XML PATH('')
						), 2, 1000000) as CancellationReason
                        into #customerData from CustomerCancellationQueue ccq 
                        left join Customer c on c.CustomerId = ccq.CustomerId
                        left join CustomerExtended ce on ce.CustomerId=c.CustomerId
						left join Lookup lpdfwreason on lpdfwreason.DataValue=ccq.EmployeeReason and lpdfwreason.DataKey='DFWCancellationReason'

		                left join Employee emp on emp.UserId = ccq.CreatedBy
                        where ccq.IsActive=1 and c.IsActive=1  {0} {1} {2} {5} {6} 
                        select * into #CustomerIdData from #customerData where Id> 0 {7} order by Id desc
                        select top(@pagesize) * into #TestTable from #CustomerIdData
                        where Id not in (Select TOP (@pagestart)  Id from #customerData #cd order by #cd.id desc) --order by #cd.CancellationDate desc)
                        --order by CancellationDate desc
                        order by id desc

                        select COUNT(*) TotalCustomer from #CustomerIdData

                        select * from #TestTable {4}
						select sum(RemainingBalance) as TotalRemainingBalance from #TestTable

                        drop table #customerData
                        drop table #CustomerIdData

						drop table #TestTable";
            try
            {
                sqlQuery = string.Format(sqlQuery, dateSubQuery, reasonSubQuery, contractSignedSubQuery, orderquery, orderquery1, employeereasonSubQuery, effectivedatequery, nameSubQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(name))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(name.Trim())));

                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllCustomerCancellationQueueExport(DateTime? StartDate, DateTime? EndDate, int pageno, int pagesize, string reason, string contractSigned, string employeereason, string effectivemindate, string effectivemaxdate, string name)
        {
            string sqlQuery = @"";
            string dateSubQuery = "";
            string reasonSubQuery = "";
            string employeereasonSubQuery = "";
            string effectivedatequery = "";
            string contractSignedSubQuery = "";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            string nameSubQuery = "";

            if (!string.IsNullOrWhiteSpace(name))
            {
                //nameSubQuery = string.Format(" and [Customer] like '%{0}%'", name);
                nameSubQuery = " and CHARINDEX(@SearchText, Customer) > 0";

            }
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            if (reason == "null" || reason == "undefined")
            {
                reason = "";

            }
            var array = reason.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }
            if (StartDate.HasValue && EndDate.HasValue && StartDate != new DateTime() && EndDate != new DateTime())
            {
                dateSubQuery = string.Format(" and ccq.CancellationDate between '{0}' and '{1}'", StartDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), EndDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            if (!string.IsNullOrEmpty(query) && query != "'-1'")
            {
                reasonSubQuery = string.Format(" and lpreason.DataValue in ({0})", query);
            }
            if (!string.IsNullOrEmpty(employeereason) && employeereason != "-1" && employeereason != "undefined")
            {
                employeereasonSubQuery = string.Format(" and lpdfwreason.DataValue='{0}'", employeereason);
            }
            if (!string.IsNullOrEmpty(contractSigned) && contractSigned != "-1" && contractSigned != "undefined")
            {
                bool reasonBool = false;
                if (contractSigned == "Yes")
                {
                    reasonBool = true;
                }
                contractSignedSubQuery = string.Format(" and ccq.IsSigned='{0}'", reasonBool);
            }
            if (!string.IsNullOrWhiteSpace(effectivemindate) && !string.IsNullOrWhiteSpace(effectivemaxdate) && effectivemindate != "undefined" && effectivemaxdate != "undefined")
            {
                var datemin = Convert.ToDateTime(effectivemindate);
                var date = Convert.ToDateTime(effectivemaxdate);
                effectivedatequery += string.Format("and ccq.CancellationDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(effectivemindate) && effectivemindate != "undefined")
            {
                var date = Convert.ToDateTime(effectivemindate);
                effectivedatequery += string.Format("and ccq.CancellationDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(effectivemaxdate) && effectivemaxdate != "undefined")
            {
                var date = Convert.ToDateTime(effectivemaxdate);
                effectivedatequery += string.Format("and ccq.CancellationDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            sqlQuery = @"select cus.Id,cus.CustomerNo, {3} as [Customer], dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.City,cus.[State],cus.ZipCode) as [Address],
                        iif(ccq.IsSigned = 1, 'Yes', 'No') as [Signed], format(ccq.CancellationDate,'M/d/yy') as [Effective Date]
                        ,ccq.RemainingBalance as [Unpaid Invoice], emp.FirstName+' '+emp.LastName as [Cancellation By]
                        ,format(ccq.CreatedDate,'M/d/yy') as [Created Date]
                        ,SUBSTRING((
							SELECT ', ' + lpreason.DisplayText
							FROM CustomerCancellationReason ccr
							left join Lookup lpreason on lpreason.DataValue=ccr.CancellationReason and lpreason.DataKey='CancellationReason'
							WHERE ccr.CustomerId=cus.CustomerId
							FOR XML PATH('')
						), 2, 1000000) as CancellationReason
					    into #CustomerData

                        from CustomerCancellationQueue ccq 
                        left join Customer cus on cus.CustomerId = ccq.CustomerId
                        left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
						left join Lookup lpdfwreason on lpdfwreason.DataValue=ccq.EmployeeReason and lpdfwreason.DataKey='DFWCancellationReason'

		                left join Employee emp on emp.UserId = ccq.CreatedBy
                        where ccq.IsActive=1 and cus.IsActive=1 and ce.IsTestAccount != 1 {0} {1} {2} {4} {5} 
						--order by ccq.Id desc
                        select * from #CustomerData where Id>0 {6} order by Id desc
						drop table #CustomerData
";
            try
            {
                sqlQuery = string.Format(sqlQuery, dateSubQuery, reasonSubQuery, contractSignedSubQuery, NameSql, employeereasonSubQuery, effectivedatequery, nameSubQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(name))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(name.Trim())));


                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllCancellRequestedCustomer()
        {

            string sqlQuery = "";
            sqlQuery = @"Select * from CustomerCancellationQueue cq
                        left join customer cus on cus.CustomerId = cq.CustomerId
                        where cus.IsActive = 1 and cq.IsCancelled = 1  and cq.IsActive = 1";
            try
            {
                sqlQuery = string.Format(sqlQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllCustomerByCompanyCount(Guid companyId, DateTime? Start, DateTime? End, List<string> Status, string market, string soldBy, string acctype, string servicetype)
        {
            string query2 = "";
            if (Status.Count != 0)
            {
                foreach (var item in Status)
                {
                    query2 += string.Format("'{0}',", item);
                }
                query2 = query2.Remove(query2.Length - 1, 1);
            }
            string sqlQuery = @"";
            string statusQuery = "";
            string marketquery = "";
            string filterquery = "";
            string status = "";
            if (Status.Count > 0)
            {
                if (Status.Count == 1 && Status.Contains("Active"))
                {
                    statusQuery = " and cu.IsActive = 1";
                }
                else if (Status.Count == 1 && Status.Contains("Cancel"))
                {
                    statusQuery = " and cu.IsActive = 0";
                }
                else if (Status.Count == 2)
                {
                    statusQuery = "";
                }
            }
            if (Status.Count > 0)
            {
                if (!string.IsNullOrWhiteSpace(query2))
                {
                    status = string.Format("and lkstatus.DisplayText in ({0})", query2);
                }
            }
            //if (!string.IsNullOrWhiteSpace(query2))
            //{
            //    filterquery += string.Format("and lkstatus.DisplayText in ({0})", query2);
            //}
            if (!string.IsNullOrWhiteSpace(market) && market != "-1")
            {
                marketquery += string.Format("and cu.Market in ({0}) ", market);
            }

            if (!string.IsNullOrWhiteSpace(servicetype) && servicetype != "-1")
            {
                marketquery += string.Format("and cu.Type in ({0}) ", servicetype);
            }
            if (!string.IsNullOrWhiteSpace(acctype) && acctype != "-1")
            {
                marketquery += string.Format("and cu.CustomerAccountType in ({0}) ", acctype);
            }

            if (!string.IsNullOrWhiteSpace(soldBy))
            {
                marketquery += string.Format("and cu.Soldby='{0}' ", soldBy);
            }
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"

								select distinct cu.Id, cu.CustomerId, cu.FirstName, cu.LastName, cu.BusinessName, cu.DBA,
								cu.PrimaryPhone, cu.EmailAddress, cu.JoinDate, cu.[Address], lkstatus.DisplayText as Status, cu.IsActive, cu.CustomerNo,
                                cu.Street, cu.City, cu.State, cu.ZipCode, cu.AnnualRevenue, lk.DisplayText as AccountType, salesperson.FirstName + ' ' + salesperson.LastName as PersonSales, Market.DisplayText as MarketVal
								from Customer cu 
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'
                                left join Lookup lk on lk.DataValue = iif(cu.CustomerAccountType != '-1', cu.CustomerAccountType, '') and lk.DataKey = 'CustomerAccountType'
                                left join Lookup Market on Market.DataValue = iif(cu.Market != '-1', cu.Market, '') and Market.DataKey = 'LeadMarket'
                                left join Employee salesperson on salesperson.UserId = iif(cu.Soldby != '' and cu.Soldby is not null, convert(uniqueidentifier, cu.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                LEFT JOIN Lookup lkstatus on lkstatus.DataValue=cu.Status and lkstatus.DataKey='LeadStatus'
                                where cc.IsLead=0
                                {3}
                                {6}
								and cu.JoinDate between '{1}' and '{2}'
                                {5}
                                {4}
								";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), statusQuery, market, soldBy, filterquery);
            }
            else
            {
                sqlQuery = @"

								select distinct cu.Id, cu.CustomerId, cu.FirstName, cu.LastName, cu.BusinessName, cu.DBA,
								cu.PrimaryPhone, cu.EmailAddress, cu.JoinDate, cu.[Address], lkstatus.DisplayText as Status, cu.IsActive, cu.CustomerNo,
                                cu.Street, cu.City, cu.State, cu.ZipCode, cu.AnnualRevenue, lk.DisplayText as AccountType, salesperson.FirstName + ' ' + salesperson.LastName as PersonSales, Market.DisplayText as MarketVal
								from Customer cu 
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'
                                left join Lookup lk on lk.DataValue = iif(cu.CustomerAccountType != '-1', cu.CustomerAccountType, '') and lk.DataKey = 'CustomerAccountType'
                                left join Lookup Market on Market.DataValue = iif(cu.Market != '-1', cu.Market, '') and Market.DataKey = 'LeadMarket'
                                left join Employee salesperson on salesperson.UserId = iif(cu.Soldby != '' and cu.Soldby is not null, try_convert(uniqueidentifier, cu.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                LEFT JOIN Lookup lkstatus on lkstatus.DataValue=cu.Status and lkstatus.DataKey='LeadStatus'                                
                                where cc.IsLead=0
                                {4}
                                --{5}
                                {1}
                        
								";

                sqlQuery = string.Format(sqlQuery, companyId, statusQuery, marketquery, soldBy, filterquery, status);
            }
            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllCancelCustomerByCompanyCount(Guid companyId, DateTime? Start, DateTime? End)
        {
            string query2 = "";
            //if (Status.Count != 0)
            //{
            //    foreach (var item in Status)
            //    {
            //        query2 += string.Format("'{0}',", item);
            //    }
            //    query2 = query2.Remove(query2.Length - 1, 1);
            //}
            string sqlQuery = @"";
            string statusQuery = "";
            string marketquery = "";
            string filterquery = "";
            //if (Status.Count > 0)
            //{
            //    if (Status.Count == 1 && Status.Contains("Active"))
            //    {
            //        statusQuery = " and cu.IsActive = 1";
            //    }
            //    else if (Status.Count == 1 && Status.Contains("Cancel"))
            //    {
            //        statusQuery = " and cu.IsActive = 0";
            //    }
            //    else if (Status.Count == 2)
            //    {
            //        statusQuery = "";
            //    }
            //}
            //if (!string.IsNullOrWhiteSpace(query2))
            //{
            //    filterquery += string.Format("and lkstatus.DisplayText in ({0})", query2);
            //}
            //if (!string.IsNullOrWhiteSpace(market) && market != "-1")
            //{
            //    marketquery += string.Format("and cu.Market in ({0}) ", market);
            //}

            //if (!string.IsNullOrWhiteSpace(servicetype) && servicetype != "-1")
            //{
            //    marketquery += string.Format("and cu.Type in ({0}) ", servicetype);
            //}
            //if (!string.IsNullOrWhiteSpace(acctype) && acctype != "-1")
            //{
            //    marketquery += string.Format("and cu.CustomerAccountType in ({0}) ", acctype);
            //}

            //if (!string.IsNullOrWhiteSpace(soldBy))
            //{
            //    marketquery += string.Format("and cu.Soldby='{0}' ", soldBy);
            //}
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"

								select distinct cu.Id, cu.CustomerId,ccq.Id, cu.FirstName, cu.LastName, cu.BusinessName, cu.DBA,
								cu.PrimaryPhone, cu.EmailAddress, cu.JoinDate, cu.[Address], lkstatus.DisplayText as Status, cu.IsActive, cu.CustomerNo,
                                cu.Street, cu.City, cu.State, cu.ZipCode
								from CustomerCancellationQueue ccq
                                left join Customer cu on cu.CustomerId= ccq.CustomerId
                                left join CustomerExtended ce on ce.CustomerId=cu.CustomerId
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'
                                --left join Lookup lk on lk.DataValue = iif(cu.CustomerAccountType != '-1', cu.CustomerAccountType, '') and lk.DataKey = 'CustomerAccountType'
                                --left join Lookup Market on Market.DataValue = iif(cu.Market != '-1', cu.Market, '') and Market.DataKey = 'LeadMarket'
                                --left join Employee salesperson on salesperson.UserId = iif(cu.Soldby != '' and cu.Soldby is not null, convert(uniqueidentifier, cu.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                LEFT JOIN Lookup lkstatus on lkstatus.DataValue=cu.Status and lkstatus.DataKey='LeadStatus'
                                where cu.IsActive=0 and ce.IsTestAccount != 1 and ccq.IsActive = 1
								and ccq.CancellationDate between '{1}' and '{2}'

								";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            else
            {
                sqlQuery = @"

								select distinct cu.Id, cu.CustomerId,ccq.Id, cu.FirstName, cu.LastName, cu.BusinessName, cu.DBA,
								cu.PrimaryPhone, cu.EmailAddress, cu.JoinDate, cu.[Address], lkstatus.DisplayText as Status, cu.IsActive, cu.CustomerNo,
                                cu.Street, cu.City, cu.State, cu.ZipCode
								from CustomerCancellationQueue ccq
                                left join Customer cu on cu.CustomerId= ccq.CustomerId
                                left join CustomerExtended ce on ce.CustomerId=cu.CustomerId
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'
                                --left join Lookup lk on lk.DataValue = iif(cu.CustomerAccountType != '-1', cu.CustomerAccountType, '') and lk.DataKey = 'CustomerAccountType'
                                --left join Lookup Market on Market.DataValue = iif(cu.Market != '-1', cu.Market, '') and Market.DataKey = 'LeadMarket'
                                --left join Employee salesperson on salesperson.UserId = iif(cu.Soldby != '' and cu.Soldby is not null, try_convert(uniqueidentifier, cu.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                LEFT JOIN Lookup lkstatus on lkstatus.DataValue=cu.Status and lkstatus.DataKey='LeadStatus'                                
                                where cu.IsActive=0 and ce.IsTestAccount != 1 and ccq.IsActive = 1

								";

                sqlQuery = string.Format(sqlQuery, companyId);
            }
            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllInactiveCustomerByCompanyCount(Guid companyId, DateTime? Start, DateTime? End)
        {
            string sqlQuery = @"";

            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"

								select distinct cu.Id, cu.CustomerId, cu.FirstName, cu.LastName, cu.BusinessName, cu.DBA,
								cu.PrimaryPhone, cu.EmailAddress, cu.JoinDate, cu.[Address], cu.IsActive, cu.CustomerNo,
                                cu.Street, cu.City, cu.State, cu.ZipCode, cu.AnnualRevenue
								from Customer cu 
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'
                                where cc.IsLead=0
                                and cu.IsActive=0
								and cu.JoinDate between '{1}' and '{2}'
								";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            else
            {
                sqlQuery = @"

								select distinct cu.Id, cu.CustomerId, cu.FirstName, cu.LastName, cu.BusinessName, cu.DBA,
								cu.PrimaryPhone, cu.EmailAddress, cu.JoinDate, cu.[Address], cu.IsActive, cu.CustomerNo,
                                cu.Street, cu.City, cu.State, cu.ZipCode, cu.AnnualRevenue
								from Customer cu 
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'                                
                                where cc.IsLead=0
                                and cu.IsActive=0
								";

                sqlQuery = string.Format(sqlQuery, companyId);
            }
            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataSet GetAllConvertedCustomerByCompany(Guid companyId, DateTime? Start, DateTime? End, int pageno, int pagesize, FilterReportModel filter, string order)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
                NameSql = NameSql.Replace("cus.", "cu.");
            }

            string sqlQuery = @"";
            string subquery = "";
            string orderquery = "";
            string orderquery1 = "";
            #region Order
            if (!string.IsNullOrWhiteSpace(order))
            {
                if (order == "ascending/customer")
                {
                    orderquery = "order by #ConvertCustomerFilter.[Name] asc";
                    orderquery1 = "order by [Name] asc";
                }
                else if (order == "descending/customer")
                {
                    orderquery = "order by #ConvertCustomerFilter.[Name] desc";
                    orderquery1 = "order by [Name] desc";
                }
                else if (order == "ascending/convertiondate")
                {
                    orderquery = "order by #ConvertCustomerFilter.ConvertionDate asc";
                    orderquery1 = "order by ConvertionDate asc";
                }
                else if (order == "descending/convertiondate")
                {
                    orderquery = "order by #ConvertCustomerFilter.ConvertionDate desc";
                    orderquery1 = "order by ConvertionDate desc";
                }
                else if (order == "ascending/salesperson")
                {
                    orderquery = "order by #ConvertCustomerFilter.[CreatedByVal] asc";
                    orderquery1 = "order by [CreatedByVal] asc";
                }
                else if (order == "descending/salesperson")
                {
                    orderquery = "order by #ConvertCustomerFilter.[CreatedByVal] desc";
                    orderquery1 = "order by [CreatedByVal] desc";
                }
                else if (order == "ascending/leadsource")
                {
                    orderquery = "order by #ConvertCustomerFilter.[LeadSourceVal] asc";
                    orderquery1 = "order by [LeadSourceVal] asc";
                }
                else if (order == "descending/leadsource")
                {
                    orderquery = "order by #ConvertCustomerFilter.[LeadSourceVal] desc";
                    orderquery1 = "order by [LeadSourceVal] desc";
                }
                else if (order == "ascending/convertiontype")
                {
                    orderquery = "order by #ConvertCustomerFilter.[ConvertionType] asc";
                    orderquery1 = "order by [ConvertionType] asc";
                }
                else if (order == "descending/convertiontype")
                {
                    orderquery = "order by #ConvertCustomerFilter.[ConvertionType] desc";
                    orderquery1 = "order by [ConvertionType] desc";
                }
                else if (order == "ascending/creationdate")
                {
                    orderquery = "order by #ConvertCustomerFilter.[CreatedDate]  asc";
                    orderquery1 = "order by CreatedDate asc";
                }
                else if (order == "descending/creationdate")
                {
                    orderquery = "order by #ConvertCustomerFilter.[CreatedDate]  desc";
                    orderquery1 = "order by CreatedDate desc";
                }

                else
                {
                    orderquery = "order by #ConvertCustomerFilter.[ConvertionDate]  desc";
                    orderquery1 = "order by ConvertionDate desc";
                }

            }
            else
            {
                orderquery = "order by #ConvertCustomerFilter.[ConvertionDate] desc";
                orderquery1 = "order by ConvertionDate desc";
            }
            #endregion
            /*start filter query*/
            if (!string.IsNullOrWhiteSpace(filter.id))
            {
                subquery += string.Format("and cu.Id = '{0}'", filter.id);
            }
            if (!string.IsNullOrWhiteSpace(filter.searchtext))
            {
                subquery += string.Format("and (cu.FirstName like '%{0}%' or cu.LastName like '%{0}%' or cu.FirstName + ' ' + cu.LastName like '%{0}%' or cu.BusinessName like '%{0}%' or cu.DBA like '%{0}%' or cu.EmailAddress like '%{0}%')", filter.searchtext);
            }
            if (!string.IsNullOrWhiteSpace(filter.convertmaxdate) && !string.IsNullOrWhiteSpace(filter.convertmindate))
            {
                var date = Convert.ToDateTime(filter.convertmaxdate).SetClientMaxHourToUTC();
                var datemin = Convert.ToDateTime(filter.convertmindate).SetClientZeroHourToUTC();
                subquery += string.Format("and cc.ConvertionDate between '{0}' and '{1}'", datemin, date);
            }
            else if (!string.IsNullOrWhiteSpace(filter.convertmindate))
            {
                var date = Convert.ToDateTime(filter.convertmindate).SetClientZeroHourToUTC();
                var datemax = Convert.ToDateTime(filter.convertmindate).SetClientMaxHourToUTC();

                subquery += string.Format("and cc.ConvertionDate between '{0}' and '{1}'", date, datemax);
            }
            else if (!string.IsNullOrWhiteSpace(filter.convertmaxdate))
            {
                var date = Convert.ToDateTime(filter.convertmaxdate).SetClientZeroHourToUTC();
                var datemax = Convert.ToDateTime(filter.convertmaxdate).SetClientMaxHourToUTC();
                subquery += string.Format("and cc.ConvertionDate between '{0}' and '{1}'", date, datemax);
            }
            if (!string.IsNullOrWhiteSpace(filter.user) && filter.user != "-1")
            {
                subquery += string.Format("and cu.CreatedByUid = '{0}'", filter.user);
            }
            if (!string.IsNullOrWhiteSpace(filter.leadsource) && filter.leadsource != "-1")
            {
                subquery += string.Format("and cu.LeadSource = '{0}'", filter.leadsource);
            }
            if (!string.IsNullOrWhiteSpace(filter.type) && filter.type != "-1")
            {
                subquery += string.Format("and cc.ConvertionType = '{0}'", filter.type);
            }
            if (!string.IsNullOrWhiteSpace(filter.createmaxdate) && !string.IsNullOrWhiteSpace(filter.createmindate))
            {
                var date = Convert.ToDateTime(filter.createmaxdate).SetClientMaxHourToUTC();
                var datemin = Convert.ToDateTime(filter.createmindate).SetClientZeroHourToUTC();
                subquery += string.Format("and cu.CreatedDate between '{0}' and '{1}'", datemin, date);
            }
            else if (!string.IsNullOrWhiteSpace(filter.createmaxdate))
            {
                var date = Convert.ToDateTime(filter.createmaxdate).SetClientZeroHourToUTC();
                var datemax = Convert.ToDateTime(filter.createmaxdate).SetClientMaxHourToUTC();
                subquery += string.Format("and cu.CreatedDate between '{0}' and '{1}'", date, datemax);
            }
            else if (!string.IsNullOrWhiteSpace(filter.createmindate))
            {
                var date = Convert.ToDateTime(filter.createmindate).SetClientZeroHourToUTC();
                var datemax = Convert.ToDateTime(filter.createmindate).SetClientMaxHourToUTC();
                subquery += string.Format("and cu.CreatedDate between '{0}' and '{1}'", date, datemax);
            }
            //else if (Start != new DateTime() && Start != null && End != new DateTime() && End != new DateTime())
            //{

            //    subquery += string.Format("and cu.CreatedDate between '{0}' and '{1}'", Start.Value.ToString("yyyy-MM-dd 00:00:00.000"), End.Value.ToString("yyyy-MM-dd 23:59:59.999"));
            //}
            /*end filter query*/
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

                                select Distinct cu.Id, {3} Name, cu.CustomerId, cu.CreatedDate, cu.EmailAddress,emp.FirstName+' '+emp.LastName as CreatedByVal,lk.DisplayText as LeadSourceVal,cc.ConvertionDate,cc.ConvertionType into #ConvertCustomer from Customer cu  
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                and cc.ConvertionDate is not null
                                and cc.CompanyId = '{0}'
                                left join Employee emp on emp.UserId = cu.CreatedByUid
                                left join Lookup lk on lk.DataValue = cu.LeadSource and lk.DataKey = 'LeadSource'
                                where cc.IsLead=0
                                {4}
                                and cu.CreatedDate between '{1}' and '{2}'
								select * into #ConvertCustomerFilter from #ConvertCustomer

								select top(@pagesize) * from #ConvertCustomerFilter
								where Id not in (Select TOP (@pagestart)  Id from #ConvertCustomerFilter #cd {5})
                                {6}
								--order by Id desc

                                select COUNT(*) as TotalCount from #ConvertCustomerFilter

								drop table #ConvertCustomerFilter
								drop table #ConvertCustomer
                                ";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value, End.Value, NameSql, subquery, orderquery, orderquery1);
            }
            else
            {
                sqlQuery = @"   declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

                                select Distinct cu.Id, {1} Name, cu.CustomerId, cu.CreatedDate, cu.EmailAddress,emp.FirstName+' '+emp.LastName as CreatedByVal,lk.DisplayText as LeadSourceVal, cc.ConvertionDate,cc.ConvertionType into #ConvertCustomer from Customer cu  
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                and cc.ConvertionDate is not null
                                and cc.CompanyId = '{0}'
                                left join Employee emp on emp.UserId = cu.CreatedByUid
                                left join Lookup lk on lk.DataValue = cu.LeadSource and lk.DataKey = 'LeadSource'
                                where cc.IsLead=0
                                {2}

								select * into #ConvertCustomerFilter from #ConvertCustomer

								select top(@pagesize) * from #ConvertCustomerFilter
								where Id not in (Select TOP (@pagestart)  Id from #ConvertCustomerFilter #cd {3})
								--order by Id desc
                                {4}
                                select COUNT(*) as TotalCount from #ConvertCustomerFilter

								drop table #ConvertCustomerFilter
								drop table #ConvertCustomer
                                ";

                sqlQuery = string.Format(sqlQuery, companyId, NameSql, subquery, orderquery, orderquery1);
            }
            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataSet GetAllDelinquentCustomerByCompany(Guid companyId, DateTime? Start, DateTime? End, int pageno, int pagesize, string id, string searchtext, string unpaid, string order)
        {
            string sqlQuery = @"";
            string subquery = "";
            string balancequery = "";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            string orderquery = "";
            string orderquery1 = "";
            #region Order
            if (!string.IsNullOrWhiteSpace(order))
            {
                if (order == "ascending/customer")
                {
                    orderquery = "order by #customerFilterdata.[CustomerName] asc";
                    orderquery1 = "order by [CustomerName] asc";
                }
                else if (order == "descending/customer")
                {
                    orderquery = "order by #customerFilterdata.[CustomerName] desc";
                    orderquery1 = "order by [CustomerName] desc";
                }
                else if (order == "ascending/phoneno")
                {
                    orderquery = "order by #customerFilterdata.PhoneNo asc";
                    orderquery1 = "order by PhoneNo asc";
                }
                else if (order == "descending/phoneno")
                {
                    orderquery = "order by #customerFilterdata.PhoneNo desc";
                    orderquery1 = "order by PhoneNo desc";
                }
                else if (order == "ascending/email")
                {
                    orderquery = "order by #customerFilterdata.[Email] asc";
                    orderquery1 = "order by [Email] asc";
                }
                else if (order == "descending/email")
                {
                    orderquery = "order by #customerFilterdata.[Email] desc";
                    orderquery1 = "order by [Email] desc";
                }
                else if (order == "ascending/unpaid")
                {
                    orderquery = "order by #customerFilterdata.[Unpaid] asc";
                    orderquery1 = "order by [Unpaid] asc";
                }
                else if (order == "descending/unpaid")
                {
                    orderquery = "order by #customerFilterdata.[Unpaid] desc";
                    orderquery1 = "order by [Unpaid] desc";
                }
                else if (order == "ascending/address")
                {
                    orderquery = "order by #customerFilterdata.[Address] asc";
                    orderquery1 = "order by [Address] asc";
                }
                else if (order == "descending/address")
                {
                    orderquery = "order by #customerFilterdata.[Address] desc";
                    orderquery1 = "order by [Address] desc";
                }


                else
                {
                    orderquery = "order by #customerFilterdata.[Id]  desc";
                    orderquery1 = "order by Id desc";
                }

            }
            else
            {
                orderquery = "order by #customerFilterdata.[Id] desc";
                orderquery1 = "order by Id desc";
            }
            #endregion
            if (gs != null)
            {
                NameSql = gs.Value;
            }

            if (!string.IsNullOrWhiteSpace(id))
            {
                subquery += string.Format("and cus.Id = '{0}'", id);
            }
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                subquery += "and CHARINDEX(@SearchText, cus.SearchText) > 0";
            }
            if (!string.IsNullOrWhiteSpace(unpaid))
            {
                balancequery = string.Format("where Unpaid like '%{0}%'", unpaid);
            }

            if (Start.HasValue && End.HasValue && Start.Value != new DateTime() && End.Value != new DateTime())
            {
                sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

                            select cus.Id, cus.CustomerId, {3} CustomerName, cus.PrimaryPhone as PhoneNo, cus.EmailAddress as Email,
                            SUM(inv.BalanceDue) as Unpaid, cus.[Address] as [Address],cus.Street,cus.StreetType,cus.Appartment,cus.ZipCode,cus.City,cus.[State]
                            into #customerData from Invoice inv
                            left join Customer cus on cus.CustomerId = inv.CustomerId
                            left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                            left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                            where cc.CompanyId = '{0}'
                            and cc.IsLead = 0 and ce.IsTestAccount != 1
                            and (inv.[Status] = 'Open' or inv.[Status] = 'Partial')
                            and inv.CreatedDate between '{1}' and '{2}'
                            {4}
                            group by cus.Id, cus.CustomerId, {3}, cus.PrimaryPhone, cus.EmailAddress, cus.[Address], cus.CustomerId,cus.Street,cus.StreetType,cus.Appartment,cus.ZipCode,cus.City,cus.[State]

                               select * into #customerFilterdata from #customerData {5}

								select top(@pagesize) * into #Testtable from #customerFilterdata
								where Id not in (Select TOP (@pagestart)  Id from #customerFilterdata {6})
                                {7}
                                select *  from #Testtable
											select sum(Unpaid) as TotalUnpaid from #TestTable 
                                select Count(*) TotalCustomer from #customerData
								drop table #customerData
								drop table #customerFilterdata
                                drop table #Testtable";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value, End.Value, NameSql, subquery, balancequery, orderquery, orderquery1);
            }
            else
            {
                sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

                            select cus.Id, cus.CustomerId, {1} CustomerName, cus.PrimaryPhone as PhoneNo, cus.EmailAddress as Email,
                            SUM(inv.BalanceDue) as Unpaid
                            , cus.[Address] as [Address],cus.Street,cus.StreetType,cus.Appartment,cus.ZipCode,cus.City,cus.[State]
                            into #customerData from Invoice inv
                            left join Customer cus on cus.CustomerId = inv.CustomerId
                            left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                            left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                            where cc.CompanyId = '{0}'
                            and cc.IsLead = 0 and ce.IsTestAccount != 1
                            and (inv.[Status] = 'Open' or inv.[Status] = 'Partial')
                            {2}
                            group by cus.Id, cus.CustomerId, {1}, cus.PrimaryPhone, cus.EmailAddress, cus.[Address], cus.CustomerId,cus.Street,cus.StreetType,cus.Appartment,cus.ZipCode,cus.City,cus.[State]
                             
                                select * into #customerFilterdata from #customerData {3}

								select top(@pagesize) * into #Testtable from #customerFilterdata
								where Id not in (Select TOP (@pagestart)  Id from #customerFilterdata {4})
                                {5}
                                select *  from #Testtable
											select sum(Unpaid) as TotalUnpaid from #TestTable
                                select Count(*) TotalCustomer from #customerData
								drop table #customerData
								drop table #customerFilterdata
                                drop table #Testtable";

                sqlQuery = string.Format(sqlQuery, companyId, NameSql, subquery, balancequery, orderquery, orderquery1);
            }
            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    if (!string.IsNullOrWhiteSpace(searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(searchtext.Trim())));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllTestAccountByCompany(Guid companyId, DateTime? Start, DateTime? End, int pageno, int pagesize, FilterReportModel filter, string order)
        {
            string sqlQuery = @"";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string orderquery = "";
            string orderquery1 = "";
            #region Order
            if (!string.IsNullOrWhiteSpace(order))
            {
                if (order == "ascending/customer")
                {
                    orderquery = "order by #customerFilterdata.[CustomerName] asc";
                    orderquery1 = "order by [CustomerName] asc";
                }
                else if (order == "descending/customer")
                {
                    orderquery = "order by #customerFilterdata.[CustomerName] desc";
                    orderquery1 = "order by [CustomerName] desc";
                }
                else if (order == "ascending/phoneno")
                {
                    orderquery = "order by #customerFilterdata.PhoneNo asc";
                    orderquery1 = "order by PhoneNo asc";
                }
                else if (order == "descending/phoneno")
                {
                    orderquery = "order by #customerFilterdata.PhoneNo desc";
                    orderquery1 = "order by PhoneNo desc";
                }
                else if (order == "ascending/email")
                {
                    orderquery = "order by #customerFilterdata.[Email] asc";
                    orderquery1 = "order by [Email] asc";
                }
                else if (order == "descending/email")
                {
                    orderquery = "order by #customerFilterdata.[Email] desc";
                    orderquery1 = "order by [Email] desc";
                }

                else if (order == "ascending/address")
                {
                    orderquery = "order by #customerFilterdata.[Address] asc";
                    orderquery1 = "order by [Address] asc";
                }
                else if (order == "descending/address")
                {
                    orderquery = "order by #customerFilterdata.[Address] desc";
                    orderquery1 = "order by [Address] desc";
                }
                else if (order == "ascending/date")
                {
                    orderquery = "order by #customerFilterdata.[CreatedDate] asc";
                    orderquery1 = "order by [CreatedDate] asc";
                }
                else if (order == "descending/date")
                {
                    orderquery = "order by #customerFilterdata.[CreatedDate] desc";
                    orderquery1 = "order by [CreatedDate] desc";
                }
                else if (order == "ascending/oldcustomer")
                {
                    orderquery = "order by #customerFilterdata.[oldcustomer] asc";
                    orderquery1 = "order by [oldcustomer] asc";
                }
                else if (order == "descending/oldcustomer")
                {
                    orderquery = "order by #customerFilterdata.[oldcustomer] desc";
                    orderquery1 = "order by [oldcustomer] desc";
                }
                else
                {
                    orderquery = "order by #customerFilterdata.[Id]  desc";
                    orderquery1 = "order by Id desc";
                }

            }
            else
            {
                orderquery = "order by #customerFilterdata.[Id] desc";
                orderquery1 = "order by Id desc";
            }
            #endregion
            string subquery = "";
            if (!string.IsNullOrWhiteSpace(filter.id))
            {
                subquery += string.Format("and cus.Id = '{0}'", filter.id);
            }
            if (!string.IsNullOrWhiteSpace(filter.searchtext))
            {
                subquery += "and CHARINDEX(@SearchText, cus.SearchText) > 0";

                //subquery += string.Format("and (cus.FirstName like '%{0}%' or cus.LastName like '%{0}%' or cus.FirstName + ' ' + cus.LastName like '%{0}%' or cus.BusinessName like '%{0}%' or cus.DBA like '%{0}%' or cus.EmailAddress like '%{0}%' or cus.PrimaryPhone like '%{0}%' or cus.[Address] like '%{0}%' or cus.City like '%{0}%' or cus.[State] like '%{0}%' or cus.ZipCode like '%{0}%')", filter.searchtext);
            }

            if (Start != new DateTime() && Start != null && Start != new DateTime() && End != null)
            {

                subquery += string.Format("and cus.CreatedDate between '{0}' and '{1}'", Start.Value.SetClientZeroHourToUTC(), End.Value.SetClientMaxHourToUTC());
            }
            sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

                            select cus.Id, cus.CustomerId, {1} as CustomerName, 
                            cus.CellNo as PhoneNo, 
                            cus.EmailAddress as Email, ce.UnlinkCustomer,
                            cus.[Address] as [Address], cus.CreatedDate,cus.Street,cus.StreetType,cus.Appartment,cus.ZipCode,cus.City,cus.[State]
                            ,cus.TransferCustomerId,
						(select CASE 
	                     WHEN (cu.DBA = '' or cu.DBA IS NULL) AND  (cu.BusinessName = '' or cu.BusinessName IS NULL) THEN cu.FirstName +' '+cu.LastName
	                    WHEN (cu.DBA = '' or cu.DBA IS NULL)  THEN cu.BusinessName
	                     ELSE  cu.DBA
                        END from Customer cu where cu.Id = cus.TransferCustomerId) as oldcustomer
                            into #customerData from Customer cus
                            left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                            left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                            where cc.CompanyId = '{0}'
                         
                            and ce.IsTestAccount != 0
                        
                            {2}
                                select * into #customerFilterdata from #customerData

								select top(@pagesize) * from #customerFilterdata
								where Id not in (Select TOP (@pagestart)  Id from #customerFilterdata {3})
                                {4}
								--order by Id desc

								drop table #customerData
								drop table #customerFilterdata";
            sqlQuery = string.Format(sqlQuery, companyId, NameSql, subquery, orderquery, orderquery1);

            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    if (!string.IsNullOrWhiteSpace(filter.searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(filter.searchtext.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllTransferCustomerByCompany(Guid companyId, DateTime? Start, DateTime? End, int pageno, int pagesize, FilterReportModel filter, string order)
        {
            string sqlQuery = @"";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string orderquery = "";
            string orderquery1 = "";
            #region Order
            if (!string.IsNullOrWhiteSpace(order))
            {
                if (order == "ascending/customer")
                {
                    orderquery = "order by #customerFilterdata.[CustomerName] asc";
                    orderquery1 = "order by [CustomerName] asc";
                }
                else if (order == "descending/customer")
                {
                    orderquery = "order by #customerFilterdata.[CustomerName] desc";
                    orderquery1 = "order by [CustomerName] desc";
                }
                else if (order == "ascending/phoneno")
                {
                    orderquery = "order by #customerFilterdata.PhoneNo asc";
                    orderquery1 = "order by PhoneNo asc";
                }
                else if (order == "descending/phoneno")
                {
                    orderquery = "order by #customerFilterdata.PhoneNo desc";
                    orderquery1 = "order by PhoneNo desc";
                }
                else if (order == "ascending/email")
                {
                    orderquery = "order by #customerFilterdata.[Email] asc";
                    orderquery1 = "order by [Email] asc";
                }
                else if (order == "descending/email")
                {
                    orderquery = "order by #customerFilterdata.[Email] desc";
                    orderquery1 = "order by [Email] desc";
                }

                else if (order == "ascending/address")
                {
                    orderquery = "order by #customerFilterdata.[Address] asc";
                    orderquery1 = "order by [Address] asc";
                }
                else if (order == "descending/address")
                {
                    orderquery = "order by #customerFilterdata.[Address] desc";
                    orderquery1 = "order by [Address] desc";
                }
                else if (order == "ascending/date")
                {
                    orderquery = "order by #customerFilterdata.[CreatedDate] asc";
                    orderquery1 = "order by [CreatedDate] asc";
                }
                else if (order == "descending/date")
                {
                    orderquery = "order by #customerFilterdata.[CreatedDate] desc";
                    orderquery1 = "order by [CreatedDate] desc";
                }
                else if (order == "ascending/oldcustomer")
                {
                    orderquery = "order by #customerFilterdata.[oldcustomer] asc";
                    orderquery1 = "order by [oldcustomer] asc";
                }
                else if (order == "descending/oldcustomer")
                {
                    orderquery = "order by #customerFilterdata.[oldcustomer] desc";
                    orderquery1 = "order by [oldcustomer] desc";
                }
                else
                {
                    orderquery = "order by #customerFilterdata.[Id]  desc";
                    orderquery1 = "order by Id desc";
                }

            }
            else
            {
                orderquery = "order by #customerFilterdata.[Id] desc";
                orderquery1 = "order by Id desc";
            }
            #endregion
            string subquery = "";
            if (!string.IsNullOrWhiteSpace(filter.id))
            {
                subquery += string.Format("and cus.Id = '{0}'", filter.id);
            }
            if (!string.IsNullOrWhiteSpace(filter.searchtext))
            {
                subquery += "and CHARINDEX(@SearchText, cus.SearchText) > 0";

                //subquery += string.Format("and (cus.FirstName like '%{0}%' or cus.LastName like '%{0}%' or cus.FirstName + ' ' + cus.LastName like '%{0}%' or cus.BusinessName like '%{0}%' or cus.DBA like '%{0}%' or cus.EmailAddress like '%{0}%' or cus.PrimaryPhone like '%{0}%' or cus.[Address] like '%{0}%' or cus.City like '%{0}%' or cus.[State] like '%{0}%' or cus.ZipCode like '%{0}%')", filter.searchtext);
            }
            if (!string.IsNullOrWhiteSpace(filter.transfermaxdate) && !string.IsNullOrWhiteSpace(filter.transfermindate))
            {
                var date = Convert.ToDateTime(filter.transfermaxdate).SetClientMaxHourToUTC();
                var datemin = Convert.ToDateTime(filter.transfermindate).SetClientZeroHourToUTC();
                subquery += string.Format("and cus.CreatedDate between '{0}' and '{1}'", datemin, date);
            }
            else if (!string.IsNullOrWhiteSpace(filter.transfermindate))
            {
                var date = Convert.ToDateTime(filter.transfermindate).SetClientZeroHourToUTC();
                var datemax = Convert.ToDateTime(filter.transfermindate).SetClientMaxHourToUTC();
                subquery += string.Format("and cus.CreatedDate between '{0}' and '{1}'", date, datemax);
            }
            else if (!string.IsNullOrWhiteSpace(filter.transfermaxdate))
            {
                var date = Convert.ToDateTime(filter.transfermaxdate).SetClientZeroHourToUTC();
                var datemax = Convert.ToDateTime(filter.transfermaxdate).SetClientMaxHourToUTC();
                subquery += string.Format("and cus.CreatedDate between '{0}' and '{1}'", date, datemax);
            }
            if (Start != new DateTime() && Start != null && Start != new DateTime() && End != null)
            {

                subquery += string.Format("and cus.CreatedDate between '{0}' and '{1}'", Start.Value.SetClientZeroHourToUTC(), End.Value.SetClientMaxHourToUTC());
            }
            sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

                            select cus.Id, cus.CustomerId, {1} as CustomerName, 
                            cus.CellNo as PhoneNo, 
                            cus.EmailAddress as Email, ce.UnlinkCustomer,
                            cus.[Address] as [Address], cus.CreatedDate,cus.Street,cus.StreetType,cus.Appartment,cus.ZipCode,cus.City,cus.[State]
                            ,cus.TransferCustomerId,
						(select CASE 
	                     WHEN (cu.DBA = '' or cu.DBA IS NULL) AND  (cu.BusinessName = '' or cu.BusinessName IS NULL) THEN cu.FirstName +' '+cu.LastName
	                    WHEN (cu.DBA = '' or cu.DBA IS NULL)  THEN cu.BusinessName
	                     ELSE  cu.DBA
                        END from Customer cu where cu.Id = cus.TransferCustomerId) as oldcustomer
                            into #customerData from Customer cus
                            left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                            left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                            where cc.CompanyId = '{0}'
                            and cc.IsLead is not null
                            and cus.TransferCustomerId is not null
                            and ce.IsTestAccount != 1
                            and cus.TransferCustomerId > 0 
                            {2}
                                select * into #customerFilterdata from #customerData

								select top(@pagesize) * from #customerFilterdata
								where Id not in (Select TOP (@pagestart)  Id from #customerFilterdata {3})
                                {4}
								--order by Id desc

								drop table #customerData
								drop table #customerFilterdata";
            sqlQuery = string.Format(sqlQuery, companyId, NameSql, subquery, orderquery, orderquery1);

            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    if (!string.IsNullOrWhiteSpace(filter.searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(filter.searchtext.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //public DataSet GetAllTransferCustomerReportByCompany(Guid companyId, DateTime? Start, DateTime? End)
        //{
        //    string sqlQuery = @"";
        //    if (Start.HasValue && End.HasValue && Start.Value != new DateTime() && End.Value != new DateTime())
        //    {
        //        sqlQuery = @"select cus.Id, cus.CustomerId, cus.FirstName + ' ' + cus.LastName as CustomerName, cus.PrimaryPhone as PhoneNo, cus.EmailAddress as Email,
        //                    cus.[Address] as [Address], cus.CreatedDate
        //                    from Customer cus
        //                    left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
        //                    where cc.CompanyId = '{0}'
        //                    and cc.IsLead = 0
        //                    and cus.TransferCustomerId is not null
        //                    and cus.TransferCustomerId > 0";
        //        sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"));
        //    }
        //    else
        //    {
        //        sqlQuery = @"select cus.Id, cus.CustomerId, cus.FirstName + ' ' + cus.LastName as CustomerName, cus.PrimaryPhone as PhoneNo, cus.EmailAddress as Email,
        //                    cus.[Address] as [Address], cus.CreatedDate
        //                    from Customer cus
        //                    left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
        //                    where cc.CompanyId = '{0}'
        //                    and cc.IsLead = 0
        //                    and cus.TransferCustomerId is not null
        //                    and cus.TransferCustomerId > 0";

        //        sqlQuery = string.Format(sqlQuery, companyId);
        //    }
        //    try
        //    {

        //        using (SqlCommand cmd = GetSQLCommand(sqlQuery))
        //        {
        //            DataSet dsResult = GetDataSet(cmd);
        //            return dsResult;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}

        public DataTable GetAllTestAccountReportByCompany(Guid companyId, DateTime? Start, DateTime? End, FilterReportModel filter)
        {

            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }

            string subquery = "";
            if (!string.IsNullOrWhiteSpace(filter.id))
            {
                subquery += string.Format("and cus.Id = '{0}'", filter.id);
            }
            if (!string.IsNullOrWhiteSpace(filter.searchtext))
            {
                subquery += "and CHARINDEX(@SearchText, cus.SearchText) > 0";

                //subquery += string.Format("and (cus.FirstName like '%{0}%' or cus.LastName like '%{0}%' or cus.FirstName + ' ' + cus.LastName like '%{0}%' or cus.BusinessName like '%{0}%' or cus.DBA like '%{0}%' or cus.EmailAddress like '%{0}%' or cus.PrimaryPhone like '%{0}%' or cus.[Address] like '%{0}%' or cus.City like '%{0}%' or cus.[State] like '%{0}%' or cus.ZipCode like '%{0}%')", filter.searchtext);
            }

            if (Start != new DateTime() && Start != null && Start != new DateTime() && End != null)
            {
                subquery += string.Format("and cus.CreatedDate between '{0}' and '{1}'", Start.Value.SetClientZeroHourToUTC(), End.Value.SetClientMaxHourToUTC());
            }
            string sqlQuery = @"";
            if (Start.HasValue && End.HasValue && Start.Value != new DateTime() && End.Value != new DateTime())
            {
                sqlQuery = @"select cus.Id as ID, {3} as [Customer Name], dbo.PhoneNumFormat(cus.CellNo) as [Phone No], cus.EmailAddress as Email,
                            dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.City,cus.[State],cus.ZipCode) as [Address]
                            from Customer cus
                            left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                            left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                            where cc.CompanyId = '{0}'
                          
                            and ce.IsTestAccount != 0
                            {4}
                          order by cus.Id desc";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), NameSql, subquery);
            }
            else
            {
                sqlQuery = @"select cus.Id as ID, {1} as [Customer Name], dbo.PhoneNumFormat(cus.CellNo) as [Phone No], cus.EmailAddress as Email,
                            dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.City,cus.[State],cus.ZipCode) as [Address]
                            from Customer cus
                            left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                            left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                            where cc.CompanyId = '{0}'
                         
                            and ce.IsTestAccount != 0
                            {2}
                          order by cus.Id desc";

                sqlQuery = string.Format(sqlQuery, companyId, NameSql, subquery);
            }
            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(filter.searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(filter.searchtext.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllTransferCustomerReportByCompany(Guid companyId, DateTime? Start, DateTime? End, FilterReportModel filter)
        {

            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }

            string subquery = "";
            if (!string.IsNullOrWhiteSpace(filter.id))
            {
                subquery += string.Format("and cus.Id = '{0}'", filter.id);
            }
            if (!string.IsNullOrWhiteSpace(filter.searchtext))
            {
                subquery += "and CHARINDEX(@SearchText, cus.SearchText) > 0";

                //subquery += string.Format("and (cus.FirstName like '%{0}%' or cus.LastName like '%{0}%' or cus.FirstName + ' ' + cus.LastName like '%{0}%' or cus.BusinessName like '%{0}%' or cus.DBA like '%{0}%' or cus.EmailAddress like '%{0}%' or cus.PrimaryPhone like '%{0}%' or cus.[Address] like '%{0}%' or cus.City like '%{0}%' or cus.[State] like '%{0}%' or cus.ZipCode like '%{0}%')", filter.searchtext);
            }
            if (!string.IsNullOrWhiteSpace(filter.transfermaxdate) && !string.IsNullOrWhiteSpace(filter.transfermindate))
            {
                var date = Convert.ToDateTime(filter.transfermaxdate).SetClientMaxHourToUTC();
                var datemin = Convert.ToDateTime(filter.transfermindate).SetClientZeroHourToUTC();
                subquery += string.Format("and cus.CreatedDate between '{0}' and '{1}'", datemin, date);
            }
            else if (!string.IsNullOrWhiteSpace(filter.transfermindate))
            {
                var date = Convert.ToDateTime(filter.transfermindate).SetClientMaxHourToUTC();
                var datemin = Convert.ToDateTime(filter.transfermindate).SetClientZeroHourToUTC();
                subquery += string.Format("and cus.CreatedDate between '{0}' and '{1}'", datemin, date);
            }
            else if (!string.IsNullOrWhiteSpace(filter.transfermaxdate))
            {
                var date = Convert.ToDateTime(filter.transfermaxdate).SetClientMaxHourToUTC();
                var datemin = Convert.ToDateTime(filter.transfermaxdate).SetClientZeroHourToUTC();
                subquery += string.Format("and cus.CreatedDate between '{0}' and '{1}'", datemin, date);
            }
            if (Start != new DateTime() && Start != null && Start != new DateTime() && End != null)
            {
                subquery += string.Format("and cus.CreatedDate between '{0}' and '{1}'", Start.Value.SetClientZeroHourToUTC(), End.Value.SetClientMaxHourToUTC());
            }
            string sqlQuery = @"";
            if (Start.HasValue && End.HasValue && Start.Value != new DateTime() && End.Value != new DateTime())
            {
                sqlQuery = @"select cus.Id as ID, {3} as [Customer Name],(select CASE 
	                       WHEN (cu.DBA = '' or cu.DBA IS NULL) AND  (cu.BusinessName = '' or cu.BusinessName IS NULL) THEN cu.FirstName +' '+cu.LastName
	                      WHEN (cu.DBA = '' or cu.DBA IS NULL)  THEN cu.BusinessName
	                      ELSE  cu.DBA
                          END from Customer cu where cu.Id = cus.TransferCustomerId) as [Old Customer], dbo.PhoneNumFormat(cus.PrimaryPhone) as [Phone No], cus.EmailAddress as Email,
                            dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.City,cus.[State],cus.ZipCode) as [Address], format(cus.CreatedDate,'M/d/yy')  as [Transfer Date]
                            from Customer cus
                            left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                            left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                            where cc.CompanyId = '{0}'
                            and cc.IsLead is not null
                            and cus.TransferCustomerId is not null 
                            and ce.IsTestAccount != 1
                            {4}
                            and cus.TransferCustomerId > 0 order by cus.Id desc";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), NameSql, subquery);
            }
            else
            {
                sqlQuery = @"select cus.Id as ID, {1} as [Customer Name],(select CASE 
	                       WHEN (cu.DBA = '' or cu.DBA IS NULL) AND  (cu.BusinessName = '' or cu.BusinessName IS NULL) THEN cu.FirstName +' '+cu.LastName
	                      WHEN (cu.DBA = '' or cu.DBA IS NULL)  THEN cu.BusinessName
	                      ELSE  cu.DBA
                          END from Customer cu where cu.Id = cus.TransferCustomerId) as [Old Customer], dbo.PhoneNumFormat(cus.PrimaryPhone) as [Phone No], cus.EmailAddress as Email,
                            dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.City,cus.[State],cus.ZipCode) as [Address], format(cus.CreatedDate,'M/d/yy')  as [Transfer Date]
                            from Customer cus
                            left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                            left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                            where cc.CompanyId = '{0}'
                            and cc.IsLead is not null
                            and cus.TransferCustomerId is not null
                            and ce.IsTestAccount != 1
                            {2}
                            and cus.TransferCustomerId > 0 order by cus.Id desc";

                sqlQuery = string.Format(sqlQuery, companyId, NameSql, subquery);
            }
            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(filter.searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(filter.searchtext.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetCustomerTabCountsByCustomerId(Guid customerId, string techid, Guid companyid, Guid user, bool orderpermit)
        {
            string subquery = "";
            string ticketuserquery = "";
            string ticketuserjoinquery = "";
            string OrderQuery = "0 as OrderCount,";
            if (orderpermit == true)
            {
                OrderQuery = string.Format("(select count(Id) from ResturantOrder where CustomerId = @CustomerId and CompanyId = @CompanyId) as OrderCount,");
            }
            if (!string.IsNullOrWhiteSpace(techid))
            {
                subquery = string.Format("and CreatedBy = '{0}'", techid);
            }
            if (user != new Guid())
            {
                ticketuserquery = string.Format("and (tu.UserId = '{0}' or emp.UserId = '{0}')", user);
                ticketuserjoinquery = string.Format("left join TicketUser tu on tu.TiketId = TicketId and tu.IsPrimary = 1 left join Employee emp on tk.CreatedBy = emp.UserId");
            }
            string sqlQuery = @"Declare @CustomerId uniqueidentifier
                                Declare @CompanyId uniqueidentifier
                                set @CustomerId = '{0}'
                                set @CompanyId = '{2}'

                                select (select count(id) from Invoice where IsEstimate = 0 
                                and Status !='Init' 
                                and CustomerId =@CustomerId 
                                and [Status] != 'Decline' and [Status] != 'Cancelled' and [Status] != 'Cancel'
                                and CompanyId = @CompanyId) as InvoiceCount,

                                (select count(id) from Invoice where IsEstimate = 1
                                and [Status] !='Init' and CustomerId =@CustomerId and CompanyId = @CompanyId) as EstimateCount,


                                 (select count(id) from Estimator where  
                                 CustomerId =@CustomerId and CompanyId = @CompanyId  and [Status] !='Init' and [Status] != 'Completed' ) as EstimatorCount,

                                 (select count(id) from CustomerNote where  
                                 CustomerId =@CustomerId and CompanyId = @CompanyId) as NotesCount,

                                  (select count(id) from LeadCorrespondence where  
                                 CustomerId =@CustomerId and CompanyId = @CompanyId) as CorrespondenceCount,

                                  (select count(id) from CustomerFile where  
                                 CustomerId =@CustomerId and CompanyId = @CompanyId) as FilesCount,

                                 (select count(th.Id) from [TransactionHistory] th
								 left join [Transaction] tr  on tr.Id  = th.TransactionId where  
                                 tr.CustomerId =@CustomerId and th.Amout!=0) as FundingCount ,

		                         (select count(th.Id) from TransactionExpense th
								 where CustomerId =@CustomerId) as ExpenseCount ,

                                 (select count(id) from TechSchedule where  
                                 CustomerId =@CustomerId) as ScheduleCount ,
 
                                 (select count(id) from CustomerAppointment where  
                                 CustomerId =@CustomerId and AppointmentType='WorkOrder' and CompanyId = @CompanyId)  as WorkOrderCount ,

                                 (select count(id) from CustomerAppointment where  
                                 CustomerId =@CustomerId and AppointmentType='ServiceOrder' and CompanyId = @CompanyId)  as ServiceOrderCount,
                                
                                (select count(tk.Id) from Ticket tk
                                {4}
                                where tk.CustomerId =@CustomerId and tk.[Status] !='init' and tk.CompanyId = @CompanyId {3}) as TicketsCount,
                
                                (select count(id) from Booking where 
                                CustomerId = @CustomerId and Status !='Init' and CompanyId = @CompanyId) as BookingCount,

                                {5}

                                (select count(UserAC.Id) from UserActivityCustomer UserAC
                                left join UserActivity UserA on UserA.ActivityId = UserAC.ActivityId where 
                                UserAC.CustomerId = @CustomerId and UserA.Id is  not null) as LogCount,


                                (select ISNULL(SUM(amount),0.00) from CustomerCredit 
                                where CustomerId = @CustomerId and CompanyId = @CompanyId and (IsDeleted != 1 or IsDeleted is null)) as CustomerCredit,
                                
                                (select count(*) from Activity
                                where AssociatedWith = @CustomerId) as ActivityCustomer,

                                (select count(*) from Opportunity
                                where CustomerId = @CustomerId) as OpportunityCustomer,

                                (select count(contact.Id) from Contact contact
								left join UserContact uc on contact.ContactId = uc.ContactId
                                where uc.UserId = @CustomerId) as ContactCustomer,
                                
                                (select count(id) from RecurringBillingSchedule where [Status] !='Init' and CustomerId =@CustomerId and CompanyId = @CompanyId) as RecurringBillingCount,
                                (select count(id) from customerfile where CustomerId=@CustomerId  and Isactive=1) as ActiveFileStatusCount ,
								(select count(id)  from customerfile where CustomerId=@CustomerId  and Isactive=0) as InActiveFileStatusCount

	                            into #TempTable


								select *,(FundingCount+ExpenseCount) as TotalFunding from #TempTable

								drop table #TempTable
";
            //CustomerCredit
            try
            {
                sqlQuery = string.Format(sqlQuery, customerId, subquery, companyid, ticketuserquery, ticketuserjoinquery, OrderQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllLeadsReportByCompany(Guid companyId, DateTime? Start, DateTime? End, string soldBy)
        {
            string sqlQuery = @"";
            string subQuery = "";
            if (!string.IsNullOrWhiteSpace(soldBy))
            {
                subQuery = string.Format("and cus.Soldby='{0}'", soldBy);
            }
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select 
                            cus.[Status] as [Contact Status],'' as Priority,cus.FirstName as [Contact FirstName],
                            cus.LastName as [Contact LastName], ISNULL(cus.BusinessName,cus.DBA) as [BusinessName/DBA],cus.Address as [Contact Address],
                            cus.City as City, cus.State as State,cus.ZipCode as Zip,cus.PhoneType as [Phone Type],cus.PrimaryPhone as Phone1,cus.EmailAddress as Email,
                            '' as [Sales Location],sales.FirstName + ' ' + sales.LastName as [Sales Rep],'' as [Campaign Name],'' as [Monitoring Acct.]
                            from Customer cus
                            left join CustomerCompany cc 
                            on cc.CustomerId = cus.CustomerId
                            left join Employee emp on emp.UserId = cus.CreatedByUid
                            left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                            where cc.CompanyId = '{0}'
                            and cus.JoinDate between '{1}' and '{2}'
                            {3}
							order by cus.Id DESC
                            ";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), subQuery);
            }
            else
            {
                sqlQuery = @"select 
                            cus.[Status] as [Contact Status],'' as Priority,cus.FirstName as [Contact FirstName],
                            cus.LastName as [Contact LastName], ISNULL(cus.BusinessName,cus.DBA) as [BusinessName/DBA],cus.Address as [Contact Address],
                            cus.City as City, cus.State as State,cus.ZipCode as Zip,cus.PhoneType as [Phone Type],cus.PrimaryPhone as Phone1,cus.EmailAddress as Email,
                            '' as [Sales Location],sales.FirstName + ' ' + sales.LastName as [Sales Rep],'' as [Campaign Name],'' as [Monitoring Acct.]
                            from Customer cus
                            left join CustomerCompany cc 
                            on cc.CustomerId = cus.CustomerId
                            left join Employee emp on emp.UserId = cus.CreatedByUid
                            left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                            where cc.CompanyId = '{0}'
                            {1}
                            order by cus.Id DESC
                            ";
                sqlQuery = string.Format(sqlQuery, companyId, subQuery);
            }
            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllHudsonLeadsReportByCompany(Guid companyId, DateTime? Start, DateTime? End, string status, string market, string leads, string soldBy)

        {
            if (status == "null")
            {
                status = status.Substring(0, status.Length - 4);


            }
            if (leads == "null")
            {
                leads = leads.Substring(0, leads.Length - 4);

            }
            var array = status.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }
            var array1 = leads.Split(",");
            string query1 = "";
            if (array1 != null)
            {
                foreach (var item in array1)
                {
                    query1 += string.Format("'{0}',", item);
                }
                query1 = query1.Remove(query1.Length - 1, 1);
            }
            string sqlQuery = @"";
            string subquery = "";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            if (!string.IsNullOrWhiteSpace(query))
            {
                subquery += string.Format("and cu.[Status] in ({0})", query);
            }
            if (!string.IsNullOrWhiteSpace(market) && market != "-1" && market != "undefined")
            {
                subquery += string.Format("and cu.[Market] in ({0})", market);
            }
            if (!string.IsNullOrWhiteSpace(query1))
            {
                subquery += string.Format("and cu.[LeadSource] in ({0})", query1);
            }
            if (!string.IsNullOrWhiteSpace(soldBy))
            {
                subquery += string.Format("and cu.Soldby='{0}'", soldBy);
            }
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"		select CASE 
                                WHEN cu.DBA !='' THEN cu.DBA
		                   WHEN cu.BusinessName !='' THEN cu.BusinessName
                              ELSE cu.FirstName +''+cu.LastName
                           END as [Doing Business As (DBA)],('name:'+' '+ cu.FirstName +''+cu.LastName +cu.Street+' '+ cu.City+' '+cu.State+' '+cu.ZipCode) as [Lead],lkstatus.DisplayText as Status,lk.DisplayText as LeadSource, --lkmarket.DisplayText as Market,
                                salesperson.FirstName + ' ' + salesperson.LastName as [Lead Owner],
							(createdon.FirstName + ' ' + createdon.LastName +' on '+ CONVERT(varchar(10),cu.JoinDate, 121))+' at '+CONVERT(VARCHAR(10), CAST(cu.JoinDate AS TIME), 0) as [Created On]
							
                             from  Customer cu
                                left join CustomerExtended ce on ce.CustomerId=cu.CustomerId
                                left join CustomerCompany cc on cc.CustomerId = cu.CustomerId
                                left join Lookup lkstatus on lkstatus.DataValue = iif(cu.[Status] != '-1', cu.[Status], '') and lkstatus.DataKey = 'LeadStatus'
                                left join Lookup lk on lk.DataValue = iif(cu.LeadSource != '-1', cu.LeadSource, '') and lk.DataKey = 'LeadSource'
                                --left join Lookup lkmarket on lkmarket.DataValue = iif(cu.Market != '-1', cu.Market, '') and lkmarket.DataKey = 'LeadMarket'
                                left join Employee salesperson on salesperson.UserId = cu.Soldby1 --iif(cu.Soldby != '' and cu.Soldby is not null, convert(uniqueidentifier, cu.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                left Join Employee createdon on cu.CreatedByUid = createdon.UserId
                            where 
                             cc.CompanyId = '{0}'
                             and cc.IsLead = 1
                             and ce.IsTestAccount != 1
                            and cu.JoinDate between '{1}' and '{2}'
                            {3}
							order by cu.Id DESC
                            ";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), subquery, NameSql);
            }
            else
            {
                sqlQuery = @"		select CASE 
                                WHEN cu.DBA !='' THEN cu.DBA
		                        WHEN cu.BusinessName !='' THEN cu.BusinessName
                                ELSE cu.FirstName +''+cu.LastName
                              END as [Doing Business As (DBA)],('name:'+' '+ cu.FirstName +''+cu.LastName +cu.Street+' '+ cu.City+' '+cu.State+' '+cu.ZipCode) as [Lead],lkstatus.DisplayText as Status,lk.DisplayText as LeadSource, --lkmarket.DisplayText as Market,
                                salesperson.FirstName + ' ' + salesperson.LastName as [Lead Owner],
							  (createdon.FirstName + ' ' + createdon.LastName +' on '+ CONVERT(varchar(10),cu.JoinDate, 121))+' at '+CONVERT(VARCHAR(10), CAST(cu.JoinDate AS TIME), 0) as [Created On]
							
                             from  Customer cu
                                left join CustomerExtended ce on ce.CustomerId=cu.CustomerId
                                left join CustomerCompany cc on cc.CustomerId = cu.CustomerId
                                left join Lookup lkstatus on lkstatus.DataValue = iif(cu.[Status] != '-1', cu.[Status], '') and lkstatus.DataKey = 'LeadStatus'
                                left join Lookup lk on lk.DataValue = iif(cu.LeadSource != '-1', cu.LeadSource, '') and lk.DataKey = 'LeadSource'
                                --left join Lookup lkmarket on lkmarket.DataValue = iif(cu.Market != '-1', cu.Market, '') and lkmarket.DataKey = 'LeadMarket'
                                left join Employee salesperson on salesperson.UserId = cu.Soldby1 --iif(cu.Soldby != '' and cu.Soldby is not null, convert(uniqueidentifier, cu.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                left Join Employee createdon on cu.CreatedByUid = createdon.UserId
                            where 
                            cc.CompanyId = '{0}'
                             and cc.IsLead = 1
                             and ce.IsTestAccount != 1
                            {1}
                            order by cu.Id DESC
                            ";
                sqlQuery = string.Format(sqlQuery, companyId, subquery, NameSql);
            }
            try
            {
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllLeadsReportByCompanyForHudsonOnly(Guid companyId, DateTime? Start, DateTime? End, string status, string market, string leads, string soldBy, string salesperson)

        {
            if (status == "null")
            {
                status = status.Substring(0, status.Length - 4);


            }
            if (leads == "null")
            {
                leads = leads.Substring(0, leads.Length - 4);

            }
            if (salesperson == "null")
            {
                salesperson = salesperson.Substring(0, salesperson.Length - 4);

            }
            var array = status.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }
            var array1 = leads.Split(",");
            string query1 = "";
            if (array1 != null)
            {
                foreach (var item in array1)
                {
                    query1 += string.Format("'{0}',", item);
                }
                query1 = query1.Remove(query1.Length - 1, 1);
            }
            var array3 = salesperson.Split(",");
            string query3 = "";
            if (array3 != null)
            {
                foreach (var item in array3)
                {
                    query3 += string.Format("'{0}',", item);
                }
                query3 = query3.Remove(query3.Length - 1, 1);
            }
            string sqlQuery = @"";
            string subquery = "";
            string leadownerquery = "";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            if (!string.IsNullOrWhiteSpace(query))
            {
                subquery += string.Format("and cu.[Status] in ({0})", query);
            }
            if (!string.IsNullOrWhiteSpace(market) && market != "-1")
            {
                subquery += string.Format("and cu.[Market] in ({0})", market);
            }
            if (!string.IsNullOrWhiteSpace(query1))
            {
                subquery += string.Format("and cu.[LeadSource] in ({0})", query1);
            }
            if (!string.IsNullOrWhiteSpace(soldBy))
            {
                subquery += string.Format("and cu.Soldby='{0}'", soldBy);
            }
            if (!string.IsNullOrWhiteSpace(query3))
            {
                subquery += string.Format("and (salesperson.FirstName +' '+ salesperson.LastName) in ({0})", query3);
            }
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"		select cu.FirstName as [FirstName],
                                    cu.LastName as [LastName],
                                CASE 
                                WHEN cu.DBA !='' THEN cu.DBA
		                   WHEN cu.BusinessName !='' THEN cu.BusinessName
                              ELSE cu.FirstName +''+cu.LastName
                           END as [Doing Business As (DBA)],
                           cu.PrimaryPhone as [WorkPhone] ,cu.SecondaryPhone as [Secondary],
                          cu.EmailAddress as [Email],cu.Street,cu.City,cu.State,cu.ZipCode as Zip,
                        --('name:'+' '+ cu.FirstName +''+cu.LastName +cu.Street+' '+ cu.City+' '+cu.State+' '+cu.ZipCode) as [Lead],
                             lkstatus.DisplayText as Status,lk.DisplayText as LeadSource, lkmarket.DisplayText as Market,
                              cu.Passengers , FORMAT(cu.Budget,'N2') as Budget,
                                salesperson.FirstName + ' ' + salesperson.LastName as [Lead Owner],
							(createdon.FirstName + ' ' + createdon.LastName +' on '+ CONVERT(varchar(10),cu.JoinDate, 121)) as [Created On]
							
                             from  Customer cu
                                left join CustomerCompany cc on cc.CustomerId = cu.CustomerId
                                left join Lookup lkstatus on lkstatus.DataValue = iif(cu.[Status] != '-1', cu.[Status], '') and lkstatus.DataKey = 'LeadStatus'
                                left join Lookup lk on lk.DataValue = iif(cu.LeadSource != '-1', cu.LeadSource, '') and lk.DataKey = 'LeadSource'
                                left join Lookup lkmarket on lkmarket.DataValue = iif(cu.Market != '-1', cu.Market, '') and lkmarket.DataKey = 'LeadMarket'
                                left join Employee salesperson on salesperson.UserId = iif(cu.Soldby != '' and cu.Soldby is not null, convert(uniqueidentifier, cu.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                left Join Employee createdon on cu.CreatedByUid = createdon.UserId
                            where 
                             cc.CompanyId = '{0}'
                             and cc.IsLead = 1
                            and cu.JoinDate between '{1}' and '{2}'
                            {3}
							order by cu.Id DESC
                            ";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), subquery, NameSql);
            }
            else
            {
                sqlQuery = @"		select cu.FirstName as [FirstName],
                                    cu.LastName as [LastName],
                                CASE 
                                WHEN cu.DBA !='' THEN cu.DBA
		                   WHEN cu.BusinessName !='' THEN cu.BusinessName
                              ELSE cu.FirstName +''+cu.LastName
                           END as [Doing Business As (DBA)],
                           cu.PrimaryPhone as [WorkPhone] ,cu.SecondaryPhone as [Secondary],
                          cu.EmailAddress as [Email],cu.Street,cu.City,cu.State,cu.ZipCode as Zip,
                        --('name:'+' '+ cu.FirstName +''+cu.LastName +cu.Street+' '+ cu.City+' '+cu.State+' '+cu.ZipCode) as [Lead],
                             lkstatus.DisplayText as Status,lk.DisplayText as LeadSource, lkmarket.DisplayText as Market,
                              cu.Passengers , FORMAT(cu.Budget,'N2') as Budget,
                                salesperson.FirstName + ' ' + salesperson.LastName as [Lead Owner],
							(createdon.FirstName + ' ' + createdon.LastName +' on '+ CONVERT(varchar(10),cu.JoinDate, 121)) as [Created On]
							
                             from  Customer cu
                                left join CustomerCompany cc on cc.CustomerId = cu.CustomerId
                                left join Lookup lkstatus on lkstatus.DataValue = iif(cu.[Status] != '-1', cu.[Status], '') and lkstatus.DataKey = 'LeadStatus'
                                left join Lookup lk on lk.DataValue = iif(cu.LeadSource != '-1', cu.LeadSource, '') and lk.DataKey = 'LeadSource'
                                left join Lookup lkmarket on lkmarket.DataValue = iif(cu.Market != '-1', cu.Market, '') and lkmarket.DataKey = 'LeadMarket'
                                left join Employee salesperson on salesperson.UserId = iif(cu.Soldby != '' and cu.Soldby is not null, convert(uniqueidentifier, cu.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                left Join Employee createdon on cu.CreatedByUid = createdon.UserId
                            where 
                            cc.CompanyId = '{0}'
                             and cc.IsLead = 1
                            {1}
                            order by cu.Id DESC
                            ";
                sqlQuery = string.Format(sqlQuery, companyId, subquery, NameSql);
            }
            try
            {
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllHudsonFollowupReportByCompany(Guid companyId, DateTime? Start, DateTime? End, string status, string market, string leads, string soldBy, string SearchText, string StatusIdList, string SalesopenerList, string LeadsourceIdList, string SalespersonList)
        {
            if (StatusIdList == "null")
            {
                StatusIdList = StatusIdList.Substring(0, StatusIdList.Length - 4);


            }
            if (SalesopenerList == "null")
            {
                SalesopenerList = SalesopenerList.Substring(0, SalesopenerList.Length - 4);

            }
            if (LeadsourceIdList == "null")
            {
                LeadsourceIdList = LeadsourceIdList.Substring(0, LeadsourceIdList.Length - 4);

            }
            if (SalespersonList == "null")
            {
                SalespersonList = SalespersonList.Substring(0, SalespersonList.Length - 4);

            }
            var array = StatusIdList.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }
            var array1 = SalesopenerList.Split(",");
            string query1 = "";
            if (array1 != null)
            {
                foreach (var item in array1)
                {
                    query1 += string.Format("'{0}',", item);
                }
                query1 = query1.Remove(query1.Length - 1, 1);
            }
            var array2 = LeadsourceIdList.Split(",");
            string query2 = "";
            if (array2 != null)
            {
                foreach (var item in array2)
                {
                    query2 += string.Format("'{0}',", item);
                }
                query2 = query2.Remove(query2.Length - 1, 1);
            }
            var array3 = SalespersonList.Split(",");
            string query3 = "";
            if (array3 != null)
            {
                foreach (var item in array3)
                {
                    query3 += string.Format("'{0}',", item);
                }
                query3 = query3.Remove(query3.Length - 1, 1);
            }
            string sqlQuery = @"";
            string subquery = "";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            string searchQuery = "";

            string filterquery = "";
            string DateQuery = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            if (!string.IsNullOrWhiteSpace(SearchText))
            {
                searchQuery = string.Format("and cus.BusinessName like '%{0}%' or (cus.FirstName +' '+cus.LastName) like '%{0}%'", SearchText);
            }
            if (!string.IsNullOrWhiteSpace(query))
            {
                filterquery += string.Format("and cus.Status in ({0})", query);
            }
            if (!string.IsNullOrWhiteSpace(query1))
            {
                filterquery += string.Format("and (ee.FirstName +' '+ ee.LastName) in ({0})", query1);
            }
            if (!string.IsNullOrWhiteSpace(query3))
            {
                filterquery += string.Format("and (emp.FirstName +' '+ emp.LastName) in ({0})", query3);
            }
            if (!string.IsNullOrWhiteSpace(query2))
            {
                filterquery += string.Format("and lk.DisplayText in ({0})", query2);
            }
            if ((Start.HasValue && End.HasValue) && (Start != new DateTime() && End != new DateTime()))
            {
                DateQuery = string.Format("and cus.FollowUpDate between '{0}' and '{1}'", Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            //if (gs != null)
            //{
            //    NameSql = gs.Value;
            //}
            //if (!string.IsNullOrWhiteSpace(status) && status != "-1")
            //{
            //    subquery += string.Format("and cus.[Status] = '{0}'", status);
            //}
            //if (!string.IsNullOrWhiteSpace(market) && market != "-1")
            //{
            //    subquery += string.Format("and cus.[Market] in ({0})", market);
            //}
            //if (!string.IsNullOrWhiteSpace(leads) && leads != "-1")
            //{
            //    subquery += string.Format("and cus.[LeadSource] = '{0}'", leads);
            //}
            //if (!string.IsNullOrWhiteSpace(soldBy))
            //{
            //    subquery += string.Format("and cus.Soldby='{0}'", soldBy);
            //}
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select   
                                        
                                        {2} [Lead Name] ,
                                            cus.Id,
                                         cus.Status as [Lead Status],
                                         (ee.FirstName +' '+ ee.LastName) as [Sales Opener],
                                         lk.DisplayText  as [Lead Source],
                                        (emp.FirstName +' '+ emp.LastName) as [Sales Person],

                                        cast(cus.FollowUpDate as date)  as [Follow Up Date],
                                         lktype.DisplayText as [Lead Type]
					
								from Customer cus
								left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                left join Employee ee on cus.SoldBy2 = ee.UserId
                                left join Employee emp on cus.SoldBy = emp.UserId

                                left join LookUp lk on cus.LeadSource = lk.DataValue and lk.DataKey='LeadSource'
                                left join LookUp lktype on lktype.DataValue = cus.Type  and lktype.DataKey='CustomerType' 

								where cc.CompanyId = '{0}'
                                    and cus.FollowUpDate != ''
                                    {3}
                                   {4}
                                   {5}
                               order by cus.FollowUpDate Desc
                            ";
                sqlQuery = string.Format(sqlQuery, companyId, subquery, NameSql, searchQuery, filterquery, DateQuery);
                // sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), subquery, NameSql);
            }
            else
            {
                sqlQuery = @"select   
                                        
                                        {2} [Lead Name] ,
                                            cus.Id,
                                         cus.Status as [Lead Status],
                                         (ee.FirstName +' '+ ee.LastName) as [Sales Opener],
                                         lk.DisplayText  as [Lead Source],
                                        (emp.FirstName +' '+ emp.LastName) as [Sales Person],

                                      cast(cus.FollowUpDate as date)  as [Follow Up Date],
                                        lktype.DisplayText as [Lead Type]
					
								from Customer cus
								left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                 left join Employee ee on cus.SoldBy2 = ee.UserId
                                 left join Employee emp on cus.SoldBy = emp.UserId

                                 left join LookUp lk on lk.DataValue = cus.LeadSource  and lk.DataKey='LeadSource' 
                                 left join LookUp lktype on lktype.DataValue = cus.Type  and lktype.DataKey='CustomerType' 
								where cc.CompanyId = '{0}'
                                and cus.FollowUpDate != ''
                                    {3}
                                  {4}
                                     {5}
                               order by cus.FollowUpDate Desc
                            ";
                sqlQuery = string.Format(sqlQuery, companyId, subquery, NameSql, searchQuery, filterquery, DateQuery);
            }
            try
            {
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllFinancedDealsReportCompany(Guid companyId, DateTime? Start, DateTime? End, string status, string market, string leads, string soldBy, string SearchText, string FundingCompany, double? FinanceTerm, string StatusIDList)
        {
            if (StatusIDList == "null")
            {
                StatusIDList = StatusIDList.Substring(0, StatusIDList.Length - 4);

            }
            var array = StatusIDList.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }
            string sqlQuery = @"";
            string subquery = "";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            string searchQuery = "";

            string filterquery = "";
            string DateQuery = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            if (!string.IsNullOrWhiteSpace(SearchText))
            {
                searchQuery = string.Format("and Name like @SearchText", SearchText);
            }
            //if (!string.IsNullOrWhiteSpace(query))
            //{
            //    filterquery = string.Format("and cus.Status in ({0})", query);
            //}
            if ((Start.HasValue && End.HasValue) && (Start != new DateTime() && End != new DateTime()))
            {
                DateQuery = string.Format("and cus.JoinDate between '{0}' and '{1}'", Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            if (!string.IsNullOrWhiteSpace(FundingCompany))
            {
                subquery += string.Format("and cus.[FundingCompany] like '%{0}%'", FundingCompany);
            }
            if (FinanceTerm != null)
            {
                subquery += string.Format("and cus.[FinancedTerm] = {0}/12", FinanceTerm);
            }
            if (!string.IsNullOrWhiteSpace(query))
            {
                subquery += string.Format("and tk.Status in ({0})", query);
            }
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select distinct cus.Id, 
                                      {2} [Name],
                                       cus.CustomerNo as[CS Account],
                                            tk.Status as [Ticket Status],
                                    cast(cus.FinancedAmount as decimal(10,2)) as [Financed] ,
                                CASE
                                            when cus.FundingCompany = '-1' Then ''
											else cus.FundingCompany
                                        END     as [Funding Company],
                                case 
										when cus.FinancedTerm = 0 then ''
										else (cus.FinancedTerm*12)
										end  as [Finance Term]
                                    
                                        
                                       
				                into #CAData

								from Customer cus
								left join CustomerExtended ce on ce.CustomerId = cus.CustomerId
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                left join Ticket tk on tk.CustomerId = cus.CustomerId
                              
                           

                              where 
                              cus.Id >0
                                 
                               and ce.IsFinanced = 1
                          
                                 and cus.FinancedAmount > 0 
							 and cc.CompanyId = '{0}'
                                   {1}
                                   {5}
                               order by cus.Id Desc

                                select *  from #CAData
								 where Id> 0 {3}
								 drop table #CAData

                            ";
                sqlQuery = string.Format(sqlQuery, companyId, subquery, NameSql, searchQuery, filterquery, DateQuery);
                // sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), subquery, NameSql);
            }
            else
            {
                sqlQuery = @"select distinct cus.Id, 
                                      {2} [Name],
                                       cus.CustomerNo as[CS Account],
                                          tk.Status as [Ticket Status],
                                       cast(cus.FinancedAmount as decimal(10,2)) as [Financed] ,
                                           
                                              CASE
                                            when cus.FundingCompany = '-1' Then ''
											else cus.FundingCompany
                                        END     as [Funding Company],
                                     case 
										when cus.FinancedTerm = 0 then ''
										else (cus.FinancedTerm*12)
										end  as [Finance Term]

                                       
							    into #CAData

								from Customer cus
								left join CustomerExtended ce on ce.CustomerId = cus.CustomerId
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                left join Ticket tk on tk.CustomerId = cus.CustomerId


                              where 
                               cus.Id >0
                               
                               and ce.IsFinanced = 1
                           
                             and cus.FinancedAmount > 0 
							 and cc.CompanyId = '{0}'
                                  {1}
                                     {5}
                               order by cus.Id Desc

                               select *  from #CAData
								 where Id> 0 {3}

                            drop table #CAData

                            ";
                sqlQuery = string.Format(sqlQuery, companyId, subquery, NameSql, searchQuery, filterquery, DateQuery);
            }
            try
            {
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {

                    if (!string.IsNullOrWhiteSpace(SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(SearchText.Trim())));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllFinancedReportCompany(Guid companyId, DateTime? Start, DateTime? End, string status, string FinRep, string leads, string soldBy, string SearchText, string FundingCompany, double? FinanceTerm, string SalesRep, FilterReportModel filter)
        {
            if (SalesRep == "null")
            {
                SalesRep = SalesRep.Substring(0, SalesRep.Length - 4);

            }
            if (SalesRep == "-1")
            {
                SalesRep = "";

            }
            var array = SalesRep.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }
            if (FinRep == "null")
            {
                FinRep = FinRep.Substring(0, FinRep.Length - 4);

            }
            if (FinRep == "-1")
            {
                FinRep = "";

            }
            var array1 = FinRep.Split(",");
            string query1 = "";
            if (array1 != null)
            {
                foreach (var item in array1)
                {
                    query1 += string.Format("'{0}',", item);
                }
                query1 = query1.Remove(query1.Length - 1, 1);
            }
            string sqlQuery = @"";
            string subquery = "";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            string searchQuery = "";

            string filterquery = "";
            string DateQuery = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            if (!string.IsNullOrWhiteSpace(SearchText))
            {
                searchQuery = string.Format("and Name like @SearchText", SearchText);
            }
            //if (!string.IsNullOrWhiteSpace(query))
            //{
            //    filterquery = string.Format("and cus.Status in ({0})", query);
            //}
            if ((Start.HasValue && End.HasValue) && (Start != new DateTime() && End != new DateTime()))
            {
                DateQuery = string.Format("and cus.JoinDate between '{0}' and '{1}'", Start.Value, End.Value);
            }
            if (!string.IsNullOrWhiteSpace(filter.installmaxdate) && !string.IsNullOrWhiteSpace(filter.installmindate))
            {
                var date = Convert.ToDateTime(filter.installmaxdate).SetMaxHour();
                var datemin = Convert.ToDateTime(filter.installmindate).SetZeroHour();
                subquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", datemin, date);
            }
            else if (!string.IsNullOrWhiteSpace(filter.installmindate))
            {
                var datemin = Convert.ToDateTime(filter.installmindate).SetZeroHour();
                var date = Convert.ToDateTime(filter.installmindate).SetMaxHour();

                subquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", datemin, date);
            }
            else if (!string.IsNullOrWhiteSpace(filter.installmaxdate))
            {
                var date = Convert.ToDateTime(filter.installmaxdate).SetZeroHour();
                var datemax = Convert.ToDateTime(filter.installmaxdate).SetMaxHour();
                subquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", date, datemax);
            }
            if (!string.IsNullOrWhiteSpace(filter.soldmaxdate) && !string.IsNullOrWhiteSpace(filter.soldmindate))
            {
                var date = Convert.ToDateTime(filter.soldmaxdate).SetMaxHour();
                var datemin = Convert.ToDateTime(filter.soldmindate).SetZeroHour();
                subquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", datemin, date);
            }
            else if (!string.IsNullOrWhiteSpace(filter.soldmindate))
            {
                var date = Convert.ToDateTime(filter.soldmindate).SetZeroHour();
                var datemax = Convert.ToDateTime(filter.soldmindate).SetMaxHour();

                subquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date, datemax);
            }
            else if (!string.IsNullOrWhiteSpace(filter.soldmaxdate))
            {
                var date = Convert.ToDateTime(filter.soldmaxdate).SetZeroHour();
                var datemax = Convert.ToDateTime(filter.soldmaxdate).SetMaxHour();
                subquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date, datemax);
                //subquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
            }
            if (!string.IsNullOrWhiteSpace(filter.schedulemaxdate) && !string.IsNullOrWhiteSpace(filter.schedulemindate))
            {
                var date = Convert.ToDateTime(filter.schedulemaxdate).SetZeroHour();
                var datemin = Convert.ToDateTime(filter.schedulemindate).SetZeroHour();
                subquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", datemin, date);
                //subquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.schedulemindate))
            {
                var date = Convert.ToDateTime(filter.convertmindate).SetZeroHour();
                var datemax = Convert.ToDateTime(filter.schedulemindate).SetZeroHour();

                subquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", date, datemax);
            }
            else if (!string.IsNullOrWhiteSpace(filter.schedulemaxdate))
            {
                var date = Convert.ToDateTime(filter.schedulemaxdate).SetZeroHour();
                var datemax = Convert.ToDateTime(filter.schedulemaxdate).SetZeroHour();
                subquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", date, datemax);
            }
            //if (!string.IsNullOrWhiteSpace(FundingCompany))
            //{
            //    subquery += string.Format("and cus.[FundingCompany] like '%{0}%'", FundingCompany);
            //}
            //if (FinanceTerm != null)
            //{
            //    subquery += string.Format("and cus.[FinancedTerm] = {0}/12", FinanceTerm);
            //}
            if (!string.IsNullOrWhiteSpace(query))
            {
                subquery += string.Format("and cus.Soldby in ({0})", query);
            }
            if (!string.IsNullOrWhiteSpace(query1))
            {
                subquery += string.Format("and ce.FinanceRep in ({0})", query1);
            }
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select distinct cus.Id, 
                                      {2} [Name],
                                        emp.FirstName + ' '+emp.LastName AS [Sales Rep]
                                       ,empfinance.FirstName + ' '+empfinance.LastName as [Finance Rep],
 
                                    cast(cus.FinancedAmount as decimal(10,2)) as [Amount] ,
                                 format(cus.SalesDate,'M/d/yy') as [Sold Date],
                               format(tk.CompletionDate,'M/d/yy') as [Schedule Date],
                                 format(cus.InstallDate,'M/d/yy') as [Install Date]

                                    
                                        
                                       
				                into #CAData

								from Customer cus
								left join CustomerExtended ce on ce.CustomerId = cus.CustomerId
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                --left join Ticket tk on tk.CustomerId = cus.CustomerId
								left join Ticket tk on tk.CustomerId = cus.CustomerId and tk.TicketType ='Installation'

                              LEFT JOIN Employee emp on convert(nvarchar(50), emp.UserId) = cus.Soldby
						      left join Employee empfinance on empfinance.UserId = ce.FinanceRep
                              
                           

                              where 
                              cus.Id >0
                                 
                           
							 and cc.CompanyId = '{0}'
                             and (cus.FinancedAmount > 0 or ce.IsFinanced = 1)
                             and ce.IsTestAccount != 1
                                   {1}
                                   {5}

                                select *  from #CAData
								 where Id> 0 {3}
                                 order by Id desc

								 drop table #CAData

                            ";
                sqlQuery = string.Format(sqlQuery, companyId, subquery, NameSql, searchQuery, filterquery, DateQuery);
                // sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), subquery, NameSql);
            }
            else
            {
                sqlQuery = @"select distinct cus.Id, 
                                      {2} [Name],
                                                 emp.FirstName + ' '+emp.LastName AS [Sales Rep]
                                       ,empfinance.FirstName + ' '+empfinance.LastName as [Finance Rep],
 
                                    cast(cus.FinancedAmount as decimal(10,2)) as [Amount] ,
                                 format(cus.SalesDate,'M/d/yy') as [Sold Date],
                               format(tk.CompletionDate,'M/d/yy') as [Schedule Date],
                                 format(cus.InstallDate,'M/d/yy') as [Install Date]


                                    
                                        
                                       
				                into #CAData

								from Customer cus
								left join CustomerExtended ce on ce.CustomerId = cus.CustomerId
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                --left join Ticket tk on tk.CustomerId = cus.CustomerId
								left join Ticket tk on tk.CustomerId = cus.CustomerId and tk.TicketType ='Installation'

                              LEFT JOIN Employee emp on convert(nvarchar(50), emp.UserId) = cus.Soldby
						      left join Employee empfinance on empfinance.UserId = ce.FinanceRep
                              
                           

                              where 
                              cus.Id >0
                                 
                           
							 and cc.CompanyId = '{0}'
                             and (cus.FinancedAmount > 0 or ce.IsFinanced = 1)
                             and ce.IsTestAccount != 1
                                  {1}
                                     {5}
                              

                               select *  from #CAData
								 where Id> 0 {3}
                                 order by Id desc
                            drop table #CAData

                            ";
                sqlQuery = string.Format(sqlQuery, companyId, subquery, NameSql, searchQuery, filterquery, DateQuery);
            }
            try
            {
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(SearchText.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllCustomerReportByCompany(Guid companyId, DateTime? Start, DateTime? End, string status, string soldBy)
        {

            var array = status.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }
            string filterquery = "";
            if (!string.IsNullOrWhiteSpace(query))
            {
                filterquery += string.Format("and lkstatus.DisplayText in ({0})", query);
            }
            string sqlQuery = @"";
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select   cu.FirstName+' '+ cu.LastName as [Name], cu.CustomerNo as [CS ACCT#],cu.Id as ID,
                                    dbo.MakeAddress(cu.Street,cu.StreetType,cu.Appartment,cu.City,cu.[State],cu.ZipCode) as [Address],
								 lkstatus.DisplayText as Status, 
								 case
								 when cu.IsActive = 1 then 'yes'
								 else 'no'
								 end
								  as Active
                          --      dbo.MakeAddress(cu.Street,cu.StreetType,cu.Appartment,cu.ZipCode,cu.City,cu.[State]) as [Address], cu.Street, cu.ZipCode, cu.City, cu.[State], format(cu.AnnualRevenue,'N2') as [AnnualRevenue], lk.DisplayText as AccountType, salesperson.FirstName + ' ' + salesperson.LastName as PersonSales, Market.DisplayText as MarketVal
                           --     ,ccq.CancellationDate								
                                 from Customer cu 
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'
                                left join Lookup lk on lk.DataValue = iif(cu.CustomerAccountType != '-1', cu.CustomerAccountType, '') and lk.DataKey = 'CustomerAccountType'
                                left join Lookup Market on Market.DataValue = iif(cu.Market != '-1', cu.Market, '') and Market.DataKey = 'LeadMarket'
                                left join Lookup CusType on CusType.DataValue = cu.Type and CusType.DataKey = 'CustomerType'
                                left join Employee salesperson on salesperson.UserId = iif(cu.Soldby != '' and cu.Soldby is not null, TRY_Convert(uniqueidentifier, cu.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                LEFT JOIN Lookup lkstatus on lkstatus.DataValue=cu.Status and lkstatus.DataKey='LeadStatus'  
                                LEFT JOIN CustomerCancellationQueue ccq on ccq.CustomerId=cu.CustomerId and ccq.IsActive=1                              
                                where cc.IsLead=0
								and cu.JoinDate between '{1}' and '{2}'
             
                                 {3}
                            and cc.CompanyId = '{0}'
                           
							order by cu.Id DESC
                            ";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), filterquery, soldBy);
            }
            else
            {
                sqlQuery = @"select   cu.FirstName+' '+ cu.LastName as [Name], cu.CustomerNo as [CS ACCT#],cu.Id as ID,
                                  dbo.MakeAddress(cu.Street,cu.StreetType,cu.Appartment,cu.City,cu.[State],cu.ZipCode) as [Address],
								 lkstatus.DisplayText as Status, 
								 case
								 when cu.IsActive = 1 then 'yes'
								 else 'no'
								 end
								  as Active
                          --      dbo.MakeAddress(cu.Street,cu.StreetType,cu.Appartment,cu.ZipCode,cu.City,cu.[State]) as [Address], cu.Street, cu.ZipCode, cu.City, cu.[State], format(cu.AnnualRevenue,'N2') as [AnnualRevenue], lk.DisplayText as AccountType, salesperson.FirstName + ' ' + salesperson.LastName as PersonSales, Market.DisplayText as MarketVal
                           --     ,ccq.CancellationDate								
                                 from Customer cu 
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'
                                left join Lookup lk on lk.DataValue = iif(cu.CustomerAccountType != '-1', cu.CustomerAccountType, '') and lk.DataKey = 'CustomerAccountType'
                                left join Lookup Market on Market.DataValue = iif(cu.Market != '-1', cu.Market, '') and Market.DataKey = 'LeadMarket'
                                left join Lookup CusType on CusType.DataValue = cu.Type and CusType.DataKey = 'CustomerType'
                                left join Employee salesperson on salesperson.UserId = iif(cu.Soldby != '' and cu.Soldby is not null, TRY_Convert(uniqueidentifier, cu.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                                LEFT JOIN Lookup lkstatus on lkstatus.DataValue=cu.Status and lkstatus.DataKey='LeadStatus'  
                                LEFT JOIN CustomerCancellationQueue ccq on ccq.CustomerId=cu.CustomerId and ccq.IsActive=1                              
                                where cc.IsLead=0
								
                              
                                 {1}
                            and cc.CompanyId = '{0}'
      
							order by cu.Id DESC
                            ";
            }
            try
            {
                sqlQuery = string.Format(sqlQuery, companyId, filterquery, soldBy);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllInactiveCustomerReportByCompany(Guid companyId, DateTime? Start, DateTime? End)
        {
            string sqlQuery = @"";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select 
                            cus.Id as ID, {3} as [Name], cus.PrimaryPhone as [Contact Number], cus.EmailAddress as Email ,dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.ZipCode,cus.City,cus.[State]) as [Address]
                            from Customer cus
                            left join CustomerCompany cc 
                            on cc.CustomerId = cus.CustomerId
                            where cc.IsLead =0
                            and cc.CompanyId = '{0}'
                            and cus.IsActive=0
                            and cus.JoinDate between '{1}' and '{2}'
							order by cus.Id DESC
                            ";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), NameSql);
            }
            else
            {
                sqlQuery = @"select 
                            cus.Id as ID, {1} as [Name], cus.PrimaryPhone as [Contact Number], cus.EmailAddress as Email ,dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.ZipCode,cus.City,cus.[State]) as [Address]
                            from Customer cus
                            left join CustomerCompany cc 
                            on cc.CustomerId = cus.CustomerId
                            where cc.IsLead =0
                            and cc.CompanyId = '{0}'
                            and cus.IsActive=0
                            order by cus.Id DESC
                            ";
                sqlQuery = string.Format(sqlQuery, companyId, NameSql);
            }
            try
            {
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllHudsonCustomerReportByCompany(Guid companyId, DateTime? Start, DateTime? End, List<string> Status, string market, string soldBy, string acctype, string servicetype)
        {
            string sqlQuery = @"";
            string subquery = "";
            string statusQuery = "";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            if (!string.IsNullOrWhiteSpace(soldBy))
            {
                subquery += string.Format("and cus.Soldby='{0}' ", soldBy);
            }
            if (Status.Count > 0)
            {
                if (Status.Count == 1 && Status.Contains("Active"))
                {
                    statusQuery = " and cus.IsActive = 1";
                }
                else if (Status.Count == 1 && Status.Contains("Cancel"))
                {
                    statusQuery = " and cus.IsActive = 0";
                }
                else if (Status.Count == 2)
                {
                    statusQuery = "";
                }
            }
            if (Start.HasValue && End.HasValue)
            {
                if (!string.IsNullOrWhiteSpace(market) && market != "-1")
                {
                    subquery += string.Format("and cus.Market in ({0}) ", market);
                }
                if (!string.IsNullOrWhiteSpace(servicetype) && servicetype != "-1" && servicetype != "'null'")
                {
                    subquery += string.Format(" and cus.Type in ({0}) ", servicetype);
                }
                if (!string.IsNullOrWhiteSpace(acctype) && acctype != "-1" && acctype != "'null'")
                {
                    subquery += string.Format(" and cus.CustomerAccountType in ({0}) ", acctype);
                }
                sqlQuery = @"select 
                            {4} as [Doing Business As (DBA)], cus.Street, cus.City, cus.State, cus.ZipCode as [Zip],
                            lk.DisplayText as [Market], ISNULL(format(cus.AnnualRevenue,'N2'),0.00) as [Revenue], lkacc.DisplayText [Account Type],
                            sales.FirstName + ' ' + sales.LastName as [Account Owner],CusType.DisplayText as [Service Type],cus.Note
                            from Customer cus
                            left join CustomerCompany cc 
                            on cc.CustomerId = cus.CustomerId
                            left join Lookup lk on lk.DataValue = iif(cus.Market != '-1', cus.Market, '') and lk.DataKey = 'LeadMarket'
                            left join Lookup lkacc on lkacc.DataValue = iif(cus.CustomerAccountType != '-1', cus.CustomerAccountType, '') and lkacc.DataKey = 'CustomerAccountType'
                            left join Lookup CusType on CusType.DataValue = cus.Type and CusType.DataKey = 'CustomerType'
                            left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                            where cc.IsLead =0
                            and cc.CompanyId = '{0}'
                            {3}
                            {5}
                            and cus.JoinDate between '{1}' and '{2}'
							order by cus.Id DESC
                            ";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), subquery, NameSql, statusQuery);
            }
            else
            {
                if (!string.IsNullOrWhiteSpace(market) && market != "-1")
                {
                    subquery += string.Format("and cus.Market in ({0})", market);
                }
                if (!string.IsNullOrWhiteSpace(servicetype) && servicetype != "-1" && servicetype != "'null'")
                {
                    subquery += string.Format(" and cus.Type in ({0}) ", servicetype);
                }
                if (!string.IsNullOrWhiteSpace(acctype) && acctype != "-1" && acctype != "'null'")
                {
                    subquery += string.Format(" and cus.CustomerAccountType in ({0}) ", acctype);
                }
                sqlQuery = @"select 
                            {2} as [Doing Business As (DBA)], cus.Street, cus.City, cus.State, cus.ZipCode as [Zip],
                            lk.DisplayText as [Market], ISNULL(format(cus.AnnualRevenue,'N2'),0.00) as [Revenue], lkacc.DisplayText [Account Type],
                            sales.FirstName + ' ' + sales.LastName as [Account Owner],CusType.DisplayText as [Service Type],cus.Note
                        
                            from Customer cus
                            left join CustomerCompany cc 
                            on cc.CustomerId = cus.CustomerId
                            left join Lookup lk on lk.DataValue = iif(cus.Market != '-1', cus.Market, '') and lk.DataKey = 'LeadMarket'
                            left join Lookup lkacc on lkacc.DataValue = iif(cus.CustomerAccountType != '-1', cus.CustomerAccountType, '') and lkacc.DataKey = 'CustomerAccountType'
                            left join Lookup CusType on CusType.DataValue = cus.Type and CusType.DataKey = 'CustomerType'
                            left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                            where cc.IsLead =0
                            and cc.CompanyId = '{0}'
                            {1}
                            {3}
                            order by cus.Id DESC
                            ";
                sqlQuery = string.Format(sqlQuery, companyId, subquery, NameSql, statusQuery);
            }
            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllConvertCustomerReportByCompany(Guid companyId, DateTime? Start, DateTime? End, FilterReportModel filter)
        {
            string sqlQuery = @"";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string subquery = "";
            /*start filter query*/
            if (!string.IsNullOrWhiteSpace(filter.id))
            {
                subquery += string.Format("and cus.Id = '{0}'", filter.id);
            }
            if (!string.IsNullOrWhiteSpace(filter.searchtext))
            {
                subquery += string.Format("and (cus.FirstName like '%{0}%' or cus.LastName like '%{0}%' or cus.FirstName + ' ' + cus.LastName like '%{0}%' or cus.BusinessName like '%{0}%' or cus.DBA like '%{0}%' or cus.EmailAddress like '%{0}%')", filter.searchtext);
            }
            if (!string.IsNullOrWhiteSpace(filter.convertmaxdate) && !string.IsNullOrWhiteSpace(filter.convertmindate))
            {
                var date = Convert.ToDateTime(filter.convertmaxdate).SetClientMaxHourToUTC();
                var datemin = Convert.ToDateTime(filter.convertmindate).SetClientZeroHourToUTC();
                subquery += string.Format("and cc.ConvertionDate between '{0}' and '{1}'", datemin, date);
            }
            else if (!string.IsNullOrWhiteSpace(filter.convertmindate))
            {
                var datemin = Convert.ToDateTime(filter.convertmindate).SetClientZeroHourToUTC();
                var date = Convert.ToDateTime(filter.convertmindate).SetClientMaxHourToUTC();
                subquery += string.Format("and cc.ConvertionDate between '{0}' and '{1}'", datemin, date);
            }
            else if (!string.IsNullOrWhiteSpace(filter.convertmaxdate))
            {
                var date = Convert.ToDateTime(filter.convertmaxdate).SetClientZeroHourToUTC();
                var datemax = Convert.ToDateTime(filter.convertmaxdate).SetClientMaxHourToUTC();
                subquery += string.Format("and cc.ConvertionDate between '{0}' and '{1}'", date, datemax);
            }
            if (!string.IsNullOrWhiteSpace(filter.user) && filter.user != "-1")
            {
                subquery += string.Format("and cus.CreatedByUid = '{0}'", filter.user);
            }
            if (!string.IsNullOrWhiteSpace(filter.leadsource) && filter.leadsource != "-1")
            {
                subquery += string.Format("and cus.LeadSource = '{0}'", filter.leadsource);
            }
            if (!string.IsNullOrWhiteSpace(filter.type) && filter.type != "-1")
            {
                subquery += string.Format("and cc.ConvertionType = '{0}'", filter.type);
            }
            if (!string.IsNullOrWhiteSpace(filter.createmaxdate) && !string.IsNullOrWhiteSpace(filter.createmindate))
            {
                var date = Convert.ToDateTime(filter.createmaxdate).SetClientMaxHourToUTC();
                var datemin = Convert.ToDateTime(filter.createmindate).SetClientZeroHourToUTC();
                subquery += string.Format("and cus.CreatedDate between '{0}' and '{1}'", datemin, date);
            }
            else if (!string.IsNullOrWhiteSpace(filter.createmaxdate))
            {
                var date = Convert.ToDateTime(filter.createmaxdate).SetClientZeroHourToUTC();
                var datemax = Convert.ToDateTime(filter.createmaxdate).SetClientMaxHourToUTC();
                subquery += string.Format("and cus.CreatedDate between '{0}' and '{1}'", date, datemax);
            }
            else if (!string.IsNullOrWhiteSpace(filter.createmindate))
            {
                var date = Convert.ToDateTime(filter.createmindate).SetClientZeroHourToUTC();
                var datemax = Convert.ToDateTime(filter.createmindate).SetClientMaxHourToUTC();
                subquery += string.Format("and cus.CreatedDate between '{0}' and '{1}'", date, datemax);
            }
            /*end filter query*/

            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select distinct
                            cus.Id as ID,{3} [Name],convert(date,cc.ConvertionDate)as [Convertion Date],
							sales.FirstName + ' ' + sales.LastName as [Sales Person],
                            lk.DisplayText as [Lead Source]
                            ,cc.ConvertionType,convert(date,cus.CreatedDate)as [Creation Date]
                            from Customer cus
                            left join CustomerCompany cc 
                            on cc.CustomerId = cus.CustomerId
							left join Employee sales on sales.UserId = cus.CreatedByUid

                            --left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, try_convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                            left join Lookup lk on lk.DataValue = cus.LeadSource and lk.DataKey = 'LeadSource'
                            where cc.IsLead =0
                            and cc.ConvertionDate is not null
                            and cc.CompanyId = '{0}'
                            {4}
                            and cus.CreatedDate between '{1}' and '{2}'
							order by [Convertion Date] DESC
                            ";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value, End.Value, NameSql, subquery);
            }
            else
            {
                sqlQuery = @"select distinct
                            cus.Id as ID,{1} [Name],convert(date,cc.ConvertionDate)as [Convertion Date],
							sales.FirstName + ' ' + sales.LastName as [Sales Person],lk.DisplayText as [Lead Source],cc.ConvertionType,convert(date,cus.CreatedDate)as [Creation Date]
                            from Customer cus
                            left join CustomerCompany cc 
                            on cc.CustomerId = cus.CustomerId
							left join Employee sales on sales.UserId = cus.CreatedByUid

                            --left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, try_convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                            left join Lookup lk on lk.DataValue = cus.LeadSource and lk.DataKey = 'LeadSource'
                            where cc.IsLead =0
                            and cc.ConvertionDate is not null
                            and cc.CompanyId = '{0}'
                            {2}
                            order by [Convertion Date] DESC
                            ";
                sqlQuery = string.Format(sqlQuery, companyId, NameSql, subquery);
            }
            try
            {
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //public DataSet GetAllDelinquentCustomerReportByCompany(Guid companyId, DateTime? Start, DateTime? End)
        //{
        //    string sqlQuery = @"";
        //    if (Start.HasValue && End.HasValue)
        //    {
        //        sqlQuery = @"select cus.FirstName + ' ' + cus.LastName as CustomerName
        //                    from Invoice inv
        //                    left join Customer cus on cus.CustomerId = inv.CustomerId
        //                    left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
        //                    where cc.CompanyId = '{0}'
        //                    and cc.IsLead = 0
        //                    and (inv.[Status] = 'Open' or inv.[Status] = 'Partial')
        //                    and inv.CreatedDate between '{1}' and '{2}'
        //                    group by cus.FirstName + ' ' + cus.LastName, cus.PrimaryPhone, cus.EmailAddress, cus.[Address], cus.CustomerId
        //                    select cus.FirstName + ' ' + cus.LastName as CustomerName, cus.PrimaryPhone as PhoneNo, cus.EmailAddress as Email,
        //                    SUM(inv.BalanceDue) as Unpaid
        //                    , cus.[Address] as [Address]
        //                    from Invoice inv
        //                    left join Customer cus on cus.CustomerId = inv.CustomerId
        //                    left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
        //                    where cc.CompanyId = '{0}'
        //                    and cc.IsLead = 0
        //                    and (inv.[Status] = 'Open' or inv.[Status] = 'Partial')
        //                    and inv.CreatedDate between '{1}' and '{2}'
        //                    group by cus.FirstName + ' ' + cus.LastName, cus.PrimaryPhone, cus.EmailAddress, cus.[Address], cus.CustomerId
        //                    ";
        //        sqlQuery = string.Format(sqlQuery, companyId, Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"));
        //    }
        //    else
        //    {
        //        sqlQuery = @"select cus.FirstName + ' ' + cus.LastName as CustomerName
        //                    from Invoice inv
        //                    left join Customer cus on cus.CustomerId = inv.CustomerId
        //                    left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
        //                    where cc.CompanyId = '{0}'
        //                    and cc.IsLead = 0
        //                    and (inv.[Status] = 'Open' or inv.[Status] = 'Partial')
        //                    group by cus.FirstName + ' ' + cus.LastName, cus.PrimaryPhone, cus.EmailAddress, cus.[Address], cus.CustomerId
        //                    select cus.FirstName + ' ' + cus.LastName as CustomerName, cus.PrimaryPhone as PhoneNo, cus.EmailAddress as Email,
        //                    SUM(inv.BalanceDue) as Unpaid
        //                    , cus.[Address] as [Address]
        //                    from Invoice inv
        //                    left join Customer cus on cus.CustomerId = inv.CustomerId
        //                    left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
        //                    where cc.CompanyId = '{0}'
        //                    and cc.IsLead = 0
        //                    and (inv.[Status] = 'Open' or inv.[Status] = 'Partial')
        //                    group by cus.FirstName + ' ' + cus.LastName, cus.PrimaryPhone, cus.EmailAddress, cus.[Address], cus.CustomerId
        //                    ";
        //    }
        //    try
        //    {
        //        sqlQuery = string.Format(sqlQuery, companyId);
        //        using (SqlCommand cmd = GetSQLCommand(sqlQuery))
        //        {
        //            DataSet dsResult = GetDataSet(cmd);
        //            return dsResult;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}
        public DataTable GetAllDelinquentCustomerReportByCompany(Guid companyId, DateTime? Start, DateTime? End, string id, string searchtext, string unpaid)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }


            string sqlQuery = @"";
            string subquery = "";
            string balancequery = "";
            if (!string.IsNullOrWhiteSpace(id))
            {
                subquery += string.Format("and cus.Id = '{0}'", id);
            }
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                subquery += "and CHARINDEX(@SearchText, cus.SearchText) > 0";
            }
            if (!string.IsNullOrWhiteSpace(unpaid))
            {
                balancequery = string.Format("where Unpaid like '%{0}%'", unpaid);
            }
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select cus.Id as ID,{3} [Customer Name],
                             dbo.PhoneNumFormat(cus.PrimaryPhone) as [Phone No], cus.EmailAddress as Email,
                                        cast(SUM(inv.BalanceDue) as decimal(10,2)) as Unpaid
                            ,dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.City,cus.[State],cus.ZipCode) as [Address]
                            into #customerdata from Invoice inv
                            left join Customer cus on cus.CustomerId = inv.CustomerId
                            left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                            left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                            where cc.CompanyId = '{0}'
                            and cc.IsLead = 0 and ce.IsTestAccount != 1
                            and (inv.[Status] = 'Open' or inv.[Status] = 'Partial')
                            {4}
                            and inv.CreatedDate between '{1}' and '{2}'
                            group by cus.Id,{3}, cus.PrimaryPhone, cus.EmailAddress, cus.[Address], cus.CustomerId ,dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.City,cus.[State],cus.ZipCode)
                            select * from #customerdata order by Id desc {5}
                            drop table #customerdata
                            ";
                sqlQuery = string.Format(sqlQuery, companyId, Start.Value, End.Value, NameSql, subquery, balancequery);
            }
            else
            {
                sqlQuery = @"select cus.Id as ID,{1} [Customer Name],
                             dbo.PhoneNumFormat(cus.PrimaryPhone) as [Phone No], cus.EmailAddress as Email,  
                                        cast(SUM(inv.BalanceDue) as decimal(10,2))  as Unpaid
                            
                            , dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.City,cus.[State],cus.ZipCode) as [Address]
                            into #customerdata from Invoice inv
                            left join Customer cus on cus.CustomerId = inv.CustomerId
                            left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                            left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                            where cc.CompanyId = '{0}'
                            and cc.IsLead = 0 and ce.IsTestAccount != 1
                            and (inv.[Status] = 'Open' or inv.[Status] = 'Partial')
                            {2}
                            group by cus.Id,{1}, cus.PrimaryPhone, cus.EmailAddress, cus.[Address], cus.CustomerId,dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.City,cus.[State],cus.ZipCode)
                            select * from #customerdata order by Id desc {3}
                            drop table #customerdata
                            ";
                sqlQuery = string.Format(sqlQuery, companyId, NameSql, subquery, balancequery);
            }
            try
            {

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(searchtext.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //public DataTable GetAllTicketReportByCompany(Guid companyId, DateTime? Start, DateTime? End, TicketFilter Filters, FilterReportModel filter)
        //{
        //    string sqlQuery = @"";
        //    string qsearch = "";
        //    string sdate = "";
        //    string edate = "";
        //    string qtype = "";
        //    string qstatus = "";
        //    string qassigned = "";
        //    string qatechnician = "";
        //    string filterquery = "";
        //    if (!string.IsNullOrWhiteSpace(Filters.SearchText))
        //    {
        //        qsearch = string.Format("and (CONVERT(nvarchar(11), tk.CompletionDate, 101) like '%{0}%' or tk.[Status] like '%{0}%' or tk.[TicketType] like '%{0}%' or tk.Id like '%{0}%' or cus.Id like '%{0}%')", Filters.SearchText);
        //    }
        //    if (!string.IsNullOrWhiteSpace(Filters.TicketType) && Filters.TicketType != "-1" && Filters.TicketType != "null")
        //    {
        //        qtype = string.Format("and tk.TicketType in ('{0}')", Filters.TicketType);
        //    }
        //    if (!string.IsNullOrWhiteSpace(Filters.TicketStatus) && Filters.TicketStatus != "-1" && Filters.TicketStatus != "null")
        //    {
        //        qstatus = string.Format("and tk.[Status] in ('{0}')", Filters.TicketStatus);
        //    }
        //    //if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket) && Filters.AssignedUserTicket != "-1" && Filters.AssignedUserTicket != "null")
        //    //{
        //    //    qassigned = string.Format("and tuser.UserId in ('{0}')", Filters.AssignedUserTicket);
        //    //}

        //    GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
        //    GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
        //    string NameSql = "";
        //    if (gs != null)
        //    {
        //        NameSql = gs.Value;
        //    }
        //    #region Filter Query
        //    if (!string.IsNullOrWhiteSpace(filter.id))
        //    {
        //        filterquery += string.Format("and tk.Id = '{0}'", filter.id);
        //    }
        //    if (!string.IsNullOrWhiteSpace(filter.cusid))
        //    {
        //        filterquery += string.Format("and cus.Id = '{0}'", filter.cusid);
        //    }
        //    if (!string.IsNullOrWhiteSpace(filter.user) && filter.user != "-1")
        //    {
        //        filterquery += string.Format("and cus.Soldby = '{0}'", filter.user);
        //    }
        //    if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket) && Filters.AssignedUserTicket != "null")
        //    {
        //        filterquery += string.Format("and tuser.UserId in ('{0}')", Filters.AssignedUserTicket);
        //    }
        //    if (!string.IsNullOrWhiteSpace(filter.convertmindate) && !string.IsNullOrWhiteSpace(filter.convertmaxdate))
        //    {
        //        var datemin = Convert.ToDateTime(filter.convertmindate);
        //        var date = Convert.ToDateTime(filter.convertmaxdate);
        //        filterquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
        //    }
        //    else if (!string.IsNullOrWhiteSpace(filter.convertmindate))
        //    {
        //        var date = Convert.ToDateTime(filter.convertmindate);
        //        filterquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
        //    }
        //    else if (!string.IsNullOrWhiteSpace(filter.convertmaxdate))
        //    {
        //        var date = Convert.ToDateTime(filter.convertmaxdate);
        //        filterquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
        //    }
        //    if (!string.IsNullOrWhiteSpace(filter.createmindate) && !string.IsNullOrWhiteSpace(filter.createmaxdate))
        //    {
        //        var datemin = Convert.ToDateTime(filter.createmindate);
        //        var date = Convert.ToDateTime(filter.createmaxdate);
        //        filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
        //    }
        //    else if (!string.IsNullOrWhiteSpace(filter.createmindate))
        //    {
        //        var date = Convert.ToDateTime(filter.createmindate);
        //        filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
        //    }
        //    else if (!string.IsNullOrWhiteSpace(filter.createmaxdate))
        //    {
        //        var date = Convert.ToDateTime(filter.createmaxdate);
        //        filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
        //    }
        //    if (!string.IsNullOrWhiteSpace(filter.transfermindate) && !string.IsNullOrWhiteSpace(filter.transfermaxdate))
        //    {
        //        var datemin = Convert.ToDateTime(filter.transfermindate);
        //        var date = Convert.ToDateTime(filter.transfermaxdate);
        //        filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
        //    }
        //    else if (!string.IsNullOrWhiteSpace(filter.transfermindate))
        //    {
        //        var date = Convert.ToDateTime(filter.transfermindate);
        //        filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
        //    }
        //    else if (!string.IsNullOrWhiteSpace(filter.transfermaxdate))
        //    {
        //        var date = Convert.ToDateTime(filter.transfermaxdate);
        //        filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
        //    }
        //    #endregion
        //    if (Start.HasValue && End.HasValue)
        //    {
        //        sqlQuery = @"select tkk.Id,
        //                        tkk.BookingId, 
        //                        tkk.TicketId, 
        //                        tkk.CustomerId, 
        //                        tkk.TicketType, 
        //                        tkk.[Status], 
        //                        tkk.[Priority], 
        //                        tkk.CreatedBy, 
        //                        tkk.CompanyId, 
        //                        tkk.CompletionDate,
        //tkk.ReferenceTicketId,
        //tkk.RescheduleTicketId,
        //cus.Id as cusid,
        //                        tuser.UserId as UserId,
        //                        tkk.CreatedDate into #TicketIdData from Ticket tkk
        //                  left join TicketUser tuser on tuser.TiketId = tkk.TicketId
        //                        left join Customer cus on cus.CustomerId = tkk.CustomerId
        //where tkk.CompanyId = '{0}'
        //                        and tkk.CompletionDate between '{1}' and '{2}'

        //                    select tk.*, tk.Id as [Ticket Id],cus.Id as [Customer Id],{7} as [Customer Name], cus.BusinessName as [Business Name], cus.DBA,lkleadsource.DisplayText as [Lead Source], cus.DBA,lksalesloc.DisplayText as [Sales Location], 
        //                    isnull(salesperson.FirstName + ' ' + salesperson.LastName, '') as [Sales Person],(select CAST(firstname + ' '+LastName + ', ' AS VARCHAR(200))  from Employee  where UserId in (select UserId from TicketUser tulist where tulist.TiketId = tk.TicketId and IsPrimary = 1) FOR XML PATH ('') ) as [Installer],
        //                    cast(isnull((select SUM(cae.TotalPrice) from CustomerAppointmentEquipment cae
        //			LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId

        //			LEFT JOIN equipment eqp on eqp.EquipmentId=cae.EquipmentId
        //			where tk.CustomerId=cus.CustomerId
        //			and cae.IsService=1 and (cae.IsDefaultService is NULL or cae.IsDefaultService=0) 
        //			and (cae.IsCopied is NULL or cae.IsCopied=0) and eqp.IsArbEnabled=1),0) as decimal(10,2)) as [RMR]
        //                    ,tk.Status as [Ticket Status],CONVERT(date, tk.CompletionDate) as [Appointment Date], CONVERT(date, cus.SalesDate) as [Sale Date],CONVERT(date, cus.InstallDate) as [InstallDate]
        //                                ,iif(tk.ReferenceTicketId is not null and tk.ReferenceTicketId > 0, tk.ReferenceTicketId, '') as [Follow up From], iif(tk.RescheduleTicketId is not null and tk.RescheduleTicketId > 0, tk.RescheduleTicketId, '') as [Reschedule From]
        //                                ,lktype.DisplayText as [Ticket Type]

        //                                from #TicketIdData tk
        //                                LEFT JOIN Customer cus on cus.CustomerId=tk.CustomerId
        //                                left join TicketUser tuser on tuser.TiketId = tk.TicketId and tuser.IsPrimary = 1
        //                                left join Lookup lktype on  lktype.DataKey ='TicketType'  
        //                                and lktype.DataValue = tk.TicketType

        //                                left join CustomerAppointment CA on  CA.AppointmentId = tk.TicketId

        //                                left join Lookup lkStartTime on lkStartTime.DataKey = 'Arrival'
        //                                and lkStartTime.DataValue = CA.AppointmentStartTime
        //                                left join Lookup lksalesloc on  lksalesloc.DataKey ='CommissionType'  
        //                                and lksalesloc.DataValue = iif(cus.SalesLocation != '-1', cus.SalesLocation, null)                                        

        //                                left join Lookup lkEndTime on lkEndTime.DataKey = 'Arrival'
        //                                and lkEndTime.DataValue = CA.AppointmentEndTime

        //                                left join Lookup lkstatus on  lkstatus.DataKey ='TicketStatus'  
        //                                and lkstatus.DataValue = tk.[Status]

        //                                left join Lookup lkpriority on  lkpriority.DataKey ='TicketPriority'  
        //                                and lkpriority.DataValue = tk.[Priority]

        //                                left join Lookup lkleadsource on  lkleadsource.DataKey ='LeadSource'  
        //                                and lkleadsource.DataValue = iif(cus.LeadSource != '-1', cus.LeadSource, null)

        //                                left join Employee emp on tk.CreatedBy = emp.UserId
        //                                left join Employee salesperson on salesperson.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
        //                                left join Employee installperson on CONVERT(nvarchar(50), installperson.UserId) = cus.Soldby

        //                          where tk.CompanyId = '{0}'
        //                                and iif(cus.FirstName +' '+cus.LastName is null, cus.BusinessName, cus.DBA) is not null
        //                                and tk.CompletionDate between '{1}' and '{2}'
        //                                {3}
        //                                {4}
        //                                {5}
        //                                {6}
        //                                {8}

        //		order by tk.Id desc
        //                                drop table #TicketIdData
        //                    ";
        //        sdate = Start.Value.ToString("yyyy-MM-dd 00:00:00.000");
        //        edate = End.Value.ToString("yyyy-MM-dd 23:59:59.999");
        //    }
        //    else
        //    {
        //        sqlQuery = @"select tkk.Id,
        //                        tkk.BookingId, 
        //                        tkk.TicketId, 
        //                        tkk.CustomerId, 
        //                        tkk.TicketType, 
        //                        tkk.[Status], 
        //                        tkk.[Priority], 
        //                        tkk.CreatedBy, 
        //                        tkk.CompanyId, 
        //                        tkk.CompletionDate,
        //tkk.ReferenceTicketId,
        //tkk.RescheduleTicketId,
        //cus.Id as cusid,
        //                        tuser.UserId as UserId,
        //                        tkk.CreatedDate into #TicketIdData from Ticket tkk
        //                  left join TicketUser tuser on tuser.TiketId = tkk.TicketId
        //                        left join Customer cus on cus.CustomerId = tkk.CustomerId
        //where tkk.CompanyId = '{0}'

        //                    select tk.*, tk.Id as [Ticket Id],cus.Id as [Customer Id],{7} as [Customer Name], cus.BusinessName as [Business Name], cus.DBA,lkleadsource.DisplayText as [Lead Source], lksalesloc.DisplayText as [Sales Location],
        //                    isnull(salesperson.FirstName + ' ' + salesperson.LastName, '') as [Sales Person],(select CAST(firstname + ' '+LastName + ', ' AS VARCHAR(200))  from Employee  where UserId in (select UserId from TicketUser tulist where tulist.TiketId = tk.TicketId and IsPrimary = 1) FOR XML PATH ('') ) as [Installer],
        //                       cast(isnull((select SUM(cae.TotalPrice) from CustomerAppointmentEquipment cae
        //			LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId

        //			LEFT JOIN equipment eqp on eqp.EquipmentId=cae.EquipmentId
        //			where tk.CustomerId=cus.CustomerId
        //			and cae.IsService=1 and (cae.IsDefaultService is NULL or cae.IsDefaultService=0) 
        //			and (cae.IsCopied is NULL or cae.IsCopied=0) and eqp.IsArbEnabled=1),0) as decimal(10,2)) as [RMR]
        //                                ,tk.Status as [Ticket Status],CONVERT(date, tk.CompletionDate) as [Appointment Date], CONVERT(date, cus.SalesDate) as [Sale Date],CONVERT(date, cus.InstallDate) as [InstallDate]
        //                                ,iif(tk.ReferenceTicketId is not null and tk.ReferenceTicketId > 0, tk.ReferenceTicketId, '') as [Follow up From], iif(tk.RescheduleTicketId is not null and tk.RescheduleTicketId > 0, tk.RescheduleTicketId, '') as [Reschedule From]
        //                                ,lktype.DisplayText as [Ticket Type]

        //                                from #TicketIdData tk
        //                                LEFT JOIN Customer cus on cus.CustomerId=tk.CustomerId
        //                                left join TicketUser tuser on tuser.TiketId = tk.TicketId and tuser.IsPrimary = 1
        //                                left join Lookup lktype on  lktype.DataKey ='TicketType'  
        //                                and lktype.DataValue = tk.TicketType

        //                                left join CustomerAppointment CA on  CA.AppointmentId = tk.TicketId

        //                                left join Lookup lkStartTime on lkStartTime.DataKey = 'Arrival'
        //                                and lkStartTime.DataValue = CA.AppointmentStartTime
        //                                left join Lookup lksalesloc on  lksalesloc.DataKey ='CommissionType'  
        //                                and lksalesloc.DataValue = iif(cus.SalesLocation != '-1', cus.SalesLocation, null)                                        
        //                                left join Lookup lkEndTime on lkEndTime.DataKey = 'Arrival'
        //                                and lkEndTime.DataValue = CA.AppointmentEndTime

        //                                left join Lookup lkstatus on  lkstatus.DataKey ='TicketStatus'  
        //                                and lkstatus.DataValue = tk.[Status]

        //                                left join Lookup lkpriority on  lkpriority.DataKey ='TicketPriority'  
        //                                and lkpriority.DataValue = tk.[Priority]

        //                                left join Lookup lkleadsource on  lkleadsource.DataKey ='LeadSource'  
        //                                and lkleadsource.DataValue = iif(cus.LeadSource != '-1', cus.LeadSource, null)


        //                                left join Employee installperson on CONVERT(nvarchar(50), installperson.UserId) = cus.Soldby
        //                                left join Employee emp on tk.CreatedBy = emp.UserId
        //                                left join Employee salesperson on salesperson.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))

        //                          where tk.CompanyId = '{0}'
        //                                and iif(cus.FirstName +' '+cus.LastName is null, cus.BusinessName, cus.DBA) is not null
        //                                {3}
        //                                {4}
        //                                {5}
        //                                {6}
        //                                {8}

        //		order by tk.Id desc
        //                                drop table #TicketIdData
        //                    ";
        //    }
        //    try
        //    {
        //        sqlQuery = string.Format(sqlQuery, companyId, sdate, edate, qsearch, qtype, qstatus, qassigned, NameSql, filterquery);
        //        using (SqlCommand cmd = GetSQLCommand(sqlQuery))
        //        {
        //            DataSet dsResult = GetDataSet(cmd);
        //            return dsResult.Tables[0];
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}

        //DateReference Report
        public DataTable GetAllTicketReportByCompany(Guid companyId, DateTime? Start, DateTime? End, TicketFilter TicketFilters, FilterReportModel filter)
        {
            string sqlQuery = @"";
            string searchQuery = "";
            string myTicketQuery = "";
            string ticketStatusQuery = "";
            string ticketTypeQuery = "";
            string assignedQuery = "";
            string CreatedByMeQuery = "";
            string subquery = "";
            string subquery1 = "";
            string CreatedDateQuery = "";
            string AppointmentDateQuery = "";
            string ReportTypeQuery = "";
            string ReportQuery = "";
            string ReportColQuery = "";
            string ReportCountQuery = "";
            string filterquery = "";
            string ReportAgeQuery = "";
            string gobacksearchquery = "";
            string searchQueryupdated = "";
            int PageNo = 1;
            int PageSize = 20;

            if (Start != new DateTime() && End != new DateTime())
            {
                var StartDate = Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
                var EndDate = End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
                CreatedDateQuery += string.Format("and ticket.CompletionDate between '{0}' and '{1}'", StartDate, EndDate);
            }

            if (!string.IsNullOrWhiteSpace(TicketFilters.SearchText))
            {
                searchQueryupdated = string.Format("and ticket.id like '%{0}%' or cus.id like '%{0}%'", TicketFilters.SearchText);
            }
            //if (!string.IsNullOrWhiteSpace(TicketFilters.SearchText))
            //{
            //    searchQuery = @" where CustomerName like @SearchText";
            //}
            if (!string.IsNullOrWhiteSpace(TicketFilters.ReportTabType) && TicketFilters.ReportTabType == "GoBack")
            {
                //gobacksearchquery = string.Format("and ticket.Id like '{0}' or cus.Id like '{0}' or firstname+' '+lastname like '{0}'", TicketFilters.SearchText);
                //        and(select count(tik.Id) from ticket tik where convert(date, tik.CreatedDate) between convert(date, dateadd(day, -90, getdate() + 1)) and convert(date, getdate() + 1) and tik.CustomerId = cus.CustomerId) > 1

                //    ReportTypeQuery = string.Format("and convert(date, ticket.CreatedDate) between '{0}' and '{1}'", TicketFilters.StartDate, TicketFilters.EndDate);
                ReportTypeQuery = string.Format("and convert(date, ticket.CreatedDate) between convert(date, dateadd(day, -90, getdate() + 1)) and convert(date, getdate() + 1)");

                //ReportQuery = string.Format("and CountTicket > 1");
                ReportColQuery = string.Format("(select count(tik.Id) from ticket tik where convert(date, tik.CreatedDate) between '{0}' and '{1}' and tik.CustomerId=cus.CustomerId) as CountTicket", TicketFilters.StartDate, TicketFilters.EndDate);
                ReportCountQuery = string.Format("select  count(paginationid) as [TotalCount] from #TicketDataFilter");
                //ReportAgeQuery = string.Format("and (select count(tik.Id) from ticket tik where convert(date, tik.CreatedDate) between '{0}' and '{1}' and tik.CustomerId=cus.CustomerId) > 1", TicketFilters.StartDate, TicketFilters.EndDate);
                ReportAgeQuery = string.Format("and (select count(tik.Id) from ticket tik where convert(date, tik.CreatedDate) between convert(date, dateadd(day, -90, getdate() + 1)) and convert(date, getdate() + 1) and tik.CustomerId=cus.CustomerId) > 1", TicketFilters.StartDate, TicketFilters.EndDate);

            }
            else
            {
                ReportColQuery = string.Format("'' as CountTicket");
                ReportCountQuery = string.Format("select  count(Id) as [TotalCount] from #TicketIdData");
            }
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }

            #region TicketStatus
            if (!string.IsNullOrWhiteSpace(TicketFilters.TicketStatus)
                && TicketFilters.TicketStatus != "-1" && TicketFilters.TicketStatus != "null" && TicketFilters.TicketStatus != "undefined")
            {
                ticketStatusQuery = string.Format("and ticket.[Status] in ('{0}')", TicketFilters.TicketStatus);
            }
            #endregion

            //#region Assigned
            //if (!string.IsNullOrWhiteSpace(TicketFilters.AssignedUserTicket) && TicketFilters.AssignedUserTicket != "-1" && TicketFilters.AssignedUserTicket != "null" && TicketFilters.AssignedUserTicket != new Guid().ToString())
            //{
            //    assignedQuery = string.Format("and tuser.UserId in ('{0}')", TicketFilters.AssignedUserTicket);
            //}
            //#endregion


            #region TicketType
            if (!string.IsNullOrWhiteSpace(TicketFilters.TicketType)
                && TicketFilters.TicketType != "-1" && TicketFilters.TicketType != "null" && TicketFilters.TicketType != "undefined")
            {
                ticketTypeQuery = string.Format("and ticket.TicketType in ('{0}')", TicketFilters.TicketType);
            }
            #endregion
            //#region CreatedDateQuery
            //if (TicketFilters.StartDate != new DateTime() && TicketFilters.EndDate != new DateTime())
            //{
            //    var StartDate = TicketFilters.StartDate.SetZeroHour().UTCToClientTime();
            //    var EndDate = TicketFilters.EndDate.SetMaxHour().UTCToClientTime();
            //    CreatedDateQuery = string.Format("and ticket.CreatedDate between '{0}' and '{1}'", StartDate, EndDate);
            //}
            //#endregion
            #region AppointmentDateQuery
            if (TicketFilters.StartDate != new DateTime() && TicketFilters.EndDate != new DateTime())
            {
                var StartDate = TicketFilters.StartDate.ToString("yyyy-MM-dd HH:mm:ss.fff");
                var EndDate = TicketFilters.EndDate.ToString("yyyy-MM-dd HH:mm:ss.fff");
                AppointmentDateQuery = string.Format("and ticket.CompletionDate between '{0}' and '{1}'", StartDate, EndDate);
            }
            #endregion
            #region MyTicket
            if (!string.IsNullOrWhiteSpace(TicketFilters.MyTicket))
            {
                if (TicketFilters.MyTicket == "Created")
                {
                    CreatedByMeQuery = string.Format("and ticket.CreatedByUid = '{0}'", TicketFilters.UserId);

                }
                else if (TicketFilters.MyTicket == "Assigned")
                {
                    myTicketQuery = string.Format("and dbo.CheckTicktAssignedUser(ticket.TicketId,'{0}') = 1 ", TicketFilters.UserId);
                }
                else if (TicketFilters.MyTicket == "Both")
                {
                    CreatedByMeQuery = string.Format("and ticket.CreatedByUid = '{0}'", TicketFilters.UserId);
                    myTicketQuery = string.Format("and dbo.CheckTicktAssignedUser(ticket.TicketId,'{0}') = 1 ", TicketFilters.UserId);
                }
                else if (TicketFilters.MyTicket == "None")
                {
                    CreatedByMeQuery = string.Format("and ticket.CreatedByUid != '{0}'", TicketFilters.UserId);
                    myTicketQuery = string.Format("and dbo.CheckTicktAssignedUser(ticket.TicketId,'{0}') = 0 ", TicketFilters.UserId);

                }
            }

            #endregion
            #region Order
            if (!string.IsNullOrWhiteSpace(TicketFilters.order))
            {
                if (TicketFilters.order == "ascending/ticketid")
                {
                    subquery = "order by #tdf.[Id] asc";
                    subquery1 = "order by [Id] asc";
                }
                else if (TicketFilters.order == "descending/ticketid")
                {
                    subquery = "order by #tdf.[Id] desc";
                    subquery1 = "order by [Id] desc";
                }
                else if (TicketFilters.order == "ascending/customername")
                {
                    subquery = "order by #tdf.CustomerName asc";
                    subquery1 = "order by CustomerName asc";
                }
                else if (TicketFilters.order == "descending/customername")
                {
                    subquery = "order by #tdf.CustomerName desc";
                    subquery1 = "order by CustomerName desc";
                }
                else if (TicketFilters.order == "ascending/tickettype")
                {
                    subquery = "order by #tdf.[TicketTypeVal] asc";
                    subquery1 = "order by [TicketTypeVal] asc";
                }
                else if (TicketFilters.order == "descending/tickettype")
                {
                    subquery = "order by #tdf.[TicketTypeVal] desc";
                    subquery1 = "order by [TicketTypeVal] desc";
                }
                else if (TicketFilters.order == "ascending/appointmentdate")
                {
                    subquery = "order by #tdf.[CompletionDate] asc";
                    subquery1 = "order by [CompletionDate] asc";
                }
                else if (TicketFilters.order == "descending/appointmentdate")
                {
                    subquery = "order by #tdf.[CompletionDate] desc";
                    subquery1 = "order by [CompletionDate] desc";
                }
                else if (TicketFilters.order == "ascending/technician")
                {
                    subquery = "order by #tdf.[AssignedTo] asc";
                    subquery1 = "order by [AssignedTo] asc";
                }
                else if (TicketFilters.order == "descending/technician")
                {
                    subquery = "order by #tdf.[AssignedTo] desc";
                    subquery1 = "order by [AssignedTo] desc";
                }
                else if (TicketFilters.order == "ascending/installdate")
                {
                    subquery = "order by #tdf.[InstallDate]  asc";
                    subquery1 = "order by InstallDate asc";
                }
                else if (TicketFilters.order == "descending/installdate")
                {
                    subquery = "order by #tdf.[InstallDate]  desc";
                    subquery1 = "order by InstallDate desc";
                }
                else if (TicketFilters.order == "ascending/leadsource")
                {
                    subquery = "order by #tdf.[LeadSource]  asc";
                    subquery1 = "order by LeadSource asc";
                }
                else if (TicketFilters.order == "descending/leadsource")
                {
                    subquery = "order by #tdf.[LeadSource]  desc";
                    subquery1 = "order by LeadSource desc";
                }
                else if (TicketFilters.order == "ascending/saleslocation")
                {
                    subquery = "order by #tdf.[CusSalesLoc]  asc";
                    subquery1 = "order by CusSalesLoc asc";
                }
                else if (TicketFilters.order == "descending/saleslocation")
                {
                    subquery = "order by #tdf.[CusSalesLoc]  desc";
                    subquery1 = "order by CusSalesLoc desc";
                }
                else if (TicketFilters.order == "ascending/salesperson")
                {
                    subquery = "order by #tdf.[CusSalesPerson]  asc";
                    subquery1 = "order by CusSalesPerson asc";
                }
                else if (TicketFilters.order == "descending/salesperson")
                {
                    subquery = "order by #tdf.[CusSalesPerson]  desc";
                    subquery1 = "order by CusSalesPerson desc";
                }
                else if (TicketFilters.order == "ascending/RMR")
                {
                    subquery = "order by #tdf.[RMRAmount]  asc";
                    subquery1 = "order by RMRAmount asc";
                }
                else if (TicketFilters.order == "descending/RMR")
                {
                    subquery = "order by #tdf.[RMRAmount]  desc";
                    subquery1 = "order by RMRAmount desc";
                }

                else
                {
                    subquery = "order by #tdf.[Id]  desc";
                    subquery1 = "order by Id desc";
                }

            }
            else
            {
                subquery = "order by #tdf.[Id] desc";
                subquery1 = "order by Id desc";
            }
            #endregion

            #region Filter Query
            if (!string.IsNullOrWhiteSpace(filter.id))
            {
                filterquery += string.Format("and ticket.Id = '{0}'", filter.id);
            }
            if (!string.IsNullOrWhiteSpace(filter.cusid))
            {
                filterquery += string.Format("and cus.Id = '{0}'", filter.cusid);
            }
            if (!string.IsNullOrWhiteSpace(filter.user) && filter.user != "-1")
            {
                filterquery += string.Format("and cus.Soldby = '{0}'", filter.user);
            }
            if (!string.IsNullOrWhiteSpace(TicketFilters.AssignedUserTicket) && TicketFilters.AssignedUserTicket != "null")
            {
                filterquery += string.Format("and tuser.UserId in ('{0}')", TicketFilters.AssignedUserTicket);
            }
            if (!string.IsNullOrWhiteSpace(filter.convertmindate) && !string.IsNullOrWhiteSpace(filter.convertmaxdate))
            {
                var datemin = Convert.ToDateTime(filter.convertmindate);
                var date = Convert.ToDateTime(filter.convertmaxdate);
                filterquery += string.Format("and ticket.CompletionDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.convertmindate))
            {
                var date = Convert.ToDateTime(filter.convertmindate);
                filterquery += string.Format("and ticket.CompletionDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.convertmaxdate))
            {
                var date = Convert.ToDateTime(filter.convertmaxdate);
                filterquery += string.Format("and ticket.CompletionDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            if (!string.IsNullOrWhiteSpace(filter.createmindate) && !string.IsNullOrWhiteSpace(filter.createmaxdate))
            {
                var datemin = Convert.ToDateTime(filter.createmindate);
                var date = Convert.ToDateTime(filter.createmaxdate);
                filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.createmindate))
            {
                var date = Convert.ToDateTime(filter.createmindate);
                filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.createmaxdate))
            {
                var date = Convert.ToDateTime(filter.createmaxdate);
                filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            if (!string.IsNullOrWhiteSpace(filter.transfermindate) && !string.IsNullOrWhiteSpace(filter.transfermaxdate))
            {
                var datemin = Convert.ToDateTime(filter.transfermindate);
                var date = Convert.ToDateTime(filter.transfermaxdate);
                filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.transfermindate))
            {
                var date = Convert.ToDateTime(filter.transfermindate);
                filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.transfermaxdate))
            {
                var date = Convert.ToDateTime(filter.transfermaxdate);
                filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            if (!string.IsNullOrWhiteSpace(filter.ticketcreateddatemin) && !string.IsNullOrWhiteSpace(filter.ticketcreateddatemax))
            {
                var datemin = Convert.ToDateTime(filter.ticketcreateddatemin);
                var date = Convert.ToDateTime(filter.ticketcreateddatemax);
                filterquery += string.Format("and ticket.CreatedDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.ticketcreateddatemin))
            {
                var date = Convert.ToDateTime(filter.ticketcreateddatemin);
                filterquery += string.Format("and ticket.CreatedDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.ticketcreateddatemax))
            {
                var date = Convert.ToDateTime(filter.ticketcreateddatemax);
                filterquery += string.Format("and ticket.CreatedDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            #endregion
            sqlQuery = @"DECLARE @CompanyId uniqueidentifier
                                DECLARE @CustomerId uniqueidentifier
                                DECLARE @pagestart int
                                DECLARE @pageend int
                                DECLARE @pageno int
                                DECLARE @pagesize int
                                DECLARE @SearchText nvarchar(50) 

                                SET @SearchText = '%{0}%' 
                                SET @pageno = {1} --default 1
                                SET @pagesize = {2} --default 10
                                SET @CompanyId = '{3}' --97BCF758-A482-47EB-82B8-F88BF12293FF
                                SET @CustomerId = '{4}'

                                SET @pagestart=(@pageno-1)* @pagesize 
                                SET @pageend = @pagesize

 
                                select ticket.Id,
                                ticket.BookingId, 
                                ticket.TicketId, 
                                ticket.CustomerId, 
                                ticket.TicketType, 
                                ticket.[Status], 
                                ticket.[Priority], 
                                ticket.CreatedBy, 
                                ticket.CompanyId, 
                                ticket.CompletionDate, 
								cus.Id as cusid,
                                tuser.UserId as UserId,
                                convert(date,ticket.CreatedDate) as CreatedDate into #TicketIdData from Ticket ticket
		                        left join TicketUser tuser on tuser.TiketId = ticket.TicketId
                                left join Customer cus on cus.CustomerId = ticket.CustomerId
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                where ticket.CompanyId = @CompanyId
                                and ce.IsTestAccount != 1
                                {6}
                                        {7}
                                        {8}
                                        {9}
                                        {10}
                                        {13}
                                        {14}
                                        {19}
                                        {20}
                                        {23}
		                                select ticket.*,
                                       
	                                    cus.FirstName +' '+cus.LastName as CustomerName
	                                     
                                         
                                        ,convert(date,cus.SalesDate) as SalesDate
										,convert(date,cus.InstallDate) as InstallDate
                                        ,(select count(id) from TicketFile where TicketId = ticket.TicketId) as AttachmentsCount
                                        ,(select count(id) from TicketFile where TicketId = ticket.TicketId)
		                                        + (select count(id) from TicketReply where TicketId = ticket.TicketId) as RepliesCount
                                        ,lktype.DisplayText as TicketTypeVal
                                        ,lkstatus.DisplayText as StatusVal
                                        ,lkpriority.DisplayText as PriorityVal
                                        ,emp.FirstName + ' '+emp.LastName as CreatedByVal
                                        ,(select CAST(firstname + ' '+LastName + ' ' AS VARCHAR(200))  from Employee  where UserId in (select UserId from TicketUser tulist where tulist.TiketId = ticket.TicketId and IsPrimary = 1) FOR XML PATH ('') ) as AssignedTo
                                        --,(select CAST(firstname + ' '+LastName + ', ' AS VARCHAR(200))  from Employee  where UserId in (select UserId from TicketUser tualist where tualist.TiketId = ticket.TicketId and IsPrimary = 0) FOR XML PATH ('') ) as AdditionalMembers
	                                    --,lkStartTime.DisplayText as AppointmentStartTimeVal
                                        --,CA.AppointmentStartTime as AppointmentStartTime
                                        --,lkEndTime.DisplayText as AppointmentEndTimeVal
                                        --,CA.AppointmentEndTime as AppointmentEndTime
                                        --,(select COUNT(cae.Id)
                                        
										--from CustomerAppointmentEquipment cae
										--LEFT JOIN Ticket t on t.TicketId=cae.AppointmentId
										--LEFT JOIN TicketUser tu on tu.TiketId=t.TicketId and tu.IsPrimary=1
										--where cae.AppointmentId=CA.AppointmentId
                                        --AND cae.IsEquipmentRelease=0
										--AND cae.Quantity>(ISNULL((Select ISNULL(SUM(invinner.Quantity),0) from InventoryTech invinner where invinner.EquipmentId=CAE.EquipmentId and Type='Add'  And invinner.TechnicianId=tu.UserId)-(Select ISNULL(SUM(invinner.Quantity),0) from InventoryTech invinner where invinner.EquipmentId=CAE.EquipmentId and Type='Release'  And invinner.TechnicianId=tu.UserId),0))) as ExceedQuantity,
                                        ,cus.Id as CusIdInt
                                        ,(select sum(TotalAmount) from Invoice 
										    where bookingId = ticket.BookingId and bookingId != '' 
										        and (Status = 'Open' or Status = 'Partial' or Status ='Paid')) as BookingInvoiceAmount
                                        ,isnull(cus.BusinessName, '') as CusBusinessName,
                                        isnull(sales.FirstName + ' ' + sales.LastName, '') as CusSalesPerson,
                                        isnull(installer.FirstName + ' ' + installer.LastName, '') as CusInstaller,
                                        isnull((select SUM(cae.TotalPrice) from CustomerAppointmentEquipment cae
											LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
											LEFT JOIN equipment eqp on eqp.EquipmentId=cae.EquipmentId
											where tk.CustomerId=cus.CustomerId
											and cae.IsService=1 and (cae.IsDefaultService is NULL or cae.IsDefaultService=0) 
											and (cae.IsCopied is NULL or cae.IsCopied=0) and eqp.IsArbEnabled=1),0) as RMRAmount,
                                        {16}
                                        --,LAG(lktype.DisplayText) OVER (ORDER BY ticket.Id) as PrevTicketType
										--,LAG(ticket.CompletionDate) OVER (ORDER BY ticket.Id) as PrevAppointmentDate
										--,LAG(emp.FirstName + ' '+emp.LastName) OVER (ORDER BY ticket.Id) as PrevTechnician
                                        ,lksalesloc.DisplayText as CusSalesLoc
										,lkleadsource.DisplayText as LeadSource 
										into #TicketData
                                        from #TicketIdData ticket
                                        LEFT JOIN Customer cus on cus.CustomerId=ticket.CustomerId
                                        left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                        left join TicketUser tuser on tuser.TiketId = ticket.TicketId and tuser.IsPrimary = 1
                                        left join Lookup lktype on  lktype.DataKey ='TicketType'  
                                        and lktype.DataValue = ticket.TicketType

                                        left join CustomerAppointment CA on  CA.AppointmentId = ticket.TicketId

                                        left join Lookup lkStartTime on lkStartTime.DataKey = 'Arrival'
                                        and lkStartTime.DataValue = CA.AppointmentStartTime

                                        left join Lookup lkEndTime on lkEndTime.DataKey = 'Arrival'
                                        and lkEndTime.DataValue = CA.AppointmentEndTime

                                        left join Lookup lkstatus on  lkstatus.DataKey ='TicketStatus'  
                                        and lkstatus.DataValue = ticket.[Status]

                                        left join Lookup lkpriority on  lkpriority.DataKey ='TicketPriority'  
                                        and lkpriority.DataValue = ticket.[Priority]

                                        left join Lookup lksalesloc on  lksalesloc.DataKey ='CommissionType'  
                                        and lksalesloc.DataValue = iif(cus.SalesLocation != '-1', cus.SalesLocation, null)

										left join Lookup lkleadsource on  lkleadsource.DataKey ='LeadSource'  
                                        and lkleadsource.DataValue = iif(cus.LeadSource != '-1', cus.LeadSource, null)

                                        left join Employee emp on emp.UserId = ticket.CreatedBy
                                        left join Employee sales on CONVERT(nvarchar(50), sales.UserId) = cus.Soldby
                                        left join Employee installer on CONVERT(nvarchar(50), installer.UserId) = cus.Soldby
                                        
		                                where ticket.CompanyId = @CompanyId
                                        and ce.IsTestAccount != 1
                                        and iif(cus.FirstName +' '+cus.LastName is null, cus.BusinessName, cus.DBA) is not null
                                        {6}
                                        {7}
                                        {8}
                                        {9}
                                        {10}
                                        {13}
                                        {14}
                                        {19}
                                         {22}
                                        {23}
                                        order by ticket.Id desc
                                select *,IDENTITY(INT, 1, 1) AS paginationid into #TicketDataFilter from #TicketData{5}

                                SELECT #tdf.*, LAG(#tdf.TicketTypeVal) OVER (ORDER BY #tdf.Id) as PrevTicketType
                                , convert(date,LAG(#tdf.CompletionDate) OVER (ORDER BY #tdf.Id)) as PrevAppointmentDate
								 , LAG(#tdf.CreatedByVal) OVER (ORDER BY #tdf.Id) as PrevTechnician into #TestTable
                                FROM #TicketDataFilter #tdf
                                    where paginationid is NOT null --IN(Select TOP (@pagestart) paginationid from #TicketDataFilter ) 
                                    -- {15}
                                     {11}
	                           --select  count(Id) as [TotalCount] from #TicketIdData where Id>0 and Id is not null and cusid>0 and cusid is not null and Id like '%%' or cusid like '%%'

	                            select --*,
								 Id as [Ticket Id]
								,cusid as [Customer Id]
								,CustomerName as [Customer Name]
								,CusBusinessName as [Business Name]
								,LeadSource as [Lead Source]
								,TicketType as [Ticket Type]
								,CusSalesLoc as [Sales Location]
								,CusSalesPerson as [Sales Person]
								,AssignedTo as [Installer]
								,cast(RMRAmount as decimal(12,2)) as RMR
								,[Status] as [Ticket Status]
								,PrevAppointmentDate as [Appointment Date]
								,SalesDate as [Sales Date]
								,InstallDate as [Install Date]
                                ,CreatedDate as [Created Date]
								--,TicketType as [Ticket Type]
								from #TestTable
								--select sum(RMRAmount) as TotalRMR from #TestTable
                                
                                DROP TABLE #TicketData
								DROP TABLE #TicketDataFilter
								drop table #TicketIdData
								drop table #TestTable
                                    ";

            try
            {
                sqlQuery = string.Format(sqlQuery,
                                        TicketFilters.SearchText,//0
                                        PageNo,  //1
                                        PageSize, //2
                                        companyId, //3
                                        TicketFilters.CustomerId, //4
                                        searchQuery,//5
                                        ticketStatusQuery,//6
                                        ticketTypeQuery,//7
                                        assignedQuery,//8
                                        CreatedByMeQuery,//9
                                        myTicketQuery,//10
                                        subquery,//11
                                        subquery1,//12
                                                  //CreatedDateQuery,//13,
                                        AppointmentDateQuery,//13
                                        ReportTypeQuery,//14,
                                        ReportQuery,//15,
                                        ReportColQuery,//16
                                        ReportCountQuery,//17
                                        NameSql,//18
                                        filterquery,//19
                                        ReportAgeQuery,//20
                                        gobacksearchquery,//21
                                        searchQueryupdated,//22
                                        CreatedDateQuery//23

                                        );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllTicketReportAppointmentDateByCompany(Guid companyId, DateTime? Start, DateTime? End, TicketFilter TicketFilters, FilterReportModel filter)
        {
            string sqlQuery = @"";
            string searchQuery = "";
            string myTicketQuery = "";
            string ticketStatusQuery = "";
            string ticketTypeQuery = "";
            string assignedQuery = "";
            string CreatedByMeQuery = "";
            string subquery = "";
            string subquery1 = "";
            string CreatedDateQuery = "";
            string AppointmentDateQuery = "";
            string ReportTypeQuery = "";
            string ReportQuery = "";
            string ReportColQuery = "";
            string ReportCountQuery = "";
            string filterquery = "";
            string ReportAgeQuery = "";
            string gobacksearchquery = "";
            string searchQueryupdated = "";
            int PageNo = 1;
            int PageSize = 20;

            if (Start != new DateTime() && End != new DateTime())
            {
                var StartDate = Start.Value.ToString("yyyy-MM-dd 00:00:00.000");
                var EndDate = End.Value.ToString("yyyy-MM-dd 23:59:59.000");
                CreatedDateQuery += string.Format("and ticket.CompletionDate between '{0}' and '{1}'", StartDate, EndDate);
            }

            if (!string.IsNullOrWhiteSpace(TicketFilters.SearchText))
            {
                searchQueryupdated = string.Format("and ticket.id like '%{0}%' or cus.id like '%{0}%'", TicketFilters.SearchText);
            }
            //if (!string.IsNullOrWhiteSpace(TicketFilters.SearchText))
            //{
            //    searchQuery = @" where CustomerName like @SearchText";
            //}
            if (!string.IsNullOrWhiteSpace(TicketFilters.ReportTabType) && TicketFilters.ReportTabType == "GoBack")
            {
                //gobacksearchquery = string.Format("and ticket.Id like '{0}' or cus.Id like '{0}' or firstname+' '+lastname like '{0}'", TicketFilters.SearchText);
                //        and(select count(tik.Id) from ticket tik where convert(date, tik.CreatedDate) between convert(date, dateadd(day, -90, getdate() + 1)) and convert(date, getdate() + 1) and tik.CustomerId = cus.CustomerId) > 1

                //    ReportTypeQuery = string.Format("and convert(date, ticket.CreatedDate) between '{0}' and '{1}'", TicketFilters.StartDate, TicketFilters.EndDate);
                ReportTypeQuery = string.Format("and convert(date, ticket.CreatedDate) between convert(date, dateadd(day, -90, getdate() + 1)) and convert(date, getdate() + 1)");

                //ReportQuery = string.Format("and CountTicket > 1");
                ReportColQuery = string.Format("(select count(tik.Id) from ticket tik where convert(date, tik.CreatedDate) between '{0}' and '{1}' and tik.CustomerId=cus.CustomerId) as CountTicket", TicketFilters.StartDate, TicketFilters.EndDate);
                ReportCountQuery = string.Format("select  count(paginationid) as [TotalCount] from #TicketDataFilter");
                //ReportAgeQuery = string.Format("and (select count(tik.Id) from ticket tik where convert(date, tik.CreatedDate) between '{0}' and '{1}' and tik.CustomerId=cus.CustomerId) > 1", TicketFilters.StartDate, TicketFilters.EndDate);
                ReportAgeQuery = string.Format("and (select count(tik.Id) from ticket tik where convert(date, tik.CreatedDate) between convert(date, dateadd(day, -90, getdate() + 1)) and convert(date, getdate() + 1) and tik.CustomerId=cus.CustomerId) > 1", TicketFilters.StartDate, TicketFilters.EndDate);

            }
            else
            {
                ReportColQuery = string.Format("'' as CountTicket");
                ReportCountQuery = string.Format("select  count(Id) as [TotalCount] from #TicketIdData");
            }
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }

            #region TicketStatus
            if (!string.IsNullOrWhiteSpace(TicketFilters.TicketStatus)
                && TicketFilters.TicketStatus != "-1" && TicketFilters.TicketStatus != "null" && TicketFilters.TicketStatus != "undefined")
            {
                ticketStatusQuery = string.Format("and ticket.[Status] in ('{0}')", HttpUtility.UrlDecode(TicketFilters.TicketStatus));
            }
            #endregion

            //#region Assigned
            //if (!string.IsNullOrWhiteSpace(TicketFilters.AssignedUserTicket) && TicketFilters.AssignedUserTicket != "-1" && TicketFilters.AssignedUserTicket != "null" && TicketFilters.AssignedUserTicket != new Guid().ToString())
            //{
            //    assignedQuery = string.Format("and tuser.UserId in ('{0}')", TicketFilters.AssignedUserTicket);
            //}
            //#endregion


            #region TicketType
            if (!string.IsNullOrWhiteSpace(TicketFilters.TicketType)
                && TicketFilters.TicketType != "-1" && TicketFilters.TicketType != "null" && TicketFilters.TicketType != "undefined")
            {
                ticketTypeQuery = string.Format("and ticket.TicketType in ('{0}')", HttpUtility.UrlDecode(TicketFilters.TicketType));
            }
            #endregion
            //#region CreatedDateQuery
            //if (TicketFilters.StartDate != new DateTime() && TicketFilters.EndDate != new DateTime())
            //{
            //    var StartDate = TicketFilters.StartDate.SetZeroHour().UTCToClientTime();
            //    var EndDate = TicketFilters.EndDate.SetMaxHour().UTCToClientTime();
            //    CreatedDateQuery = string.Format("and ticket.CreatedDate between '{0}' and '{1}'", StartDate, EndDate);
            //}
            //#endregion
            #region AppointmentDateQuery
            if (TicketFilters.StartDate != new DateTime() && TicketFilters.EndDate != new DateTime())
            {
                var StartDate = TicketFilters.StartDate.ToString("yyyy-MM-dd 00:00:00.000");
                var EndDate = TicketFilters.EndDate.ToString("yyyy-MM-dd 23:59:59.000");
                AppointmentDateQuery = string.Format("and ticket.CompletionDate between '{0}' and '{1}'", StartDate, EndDate);
            }
            #endregion
            #region MyTicket
            if (!string.IsNullOrWhiteSpace(TicketFilters.MyTicket))
            {
                if (TicketFilters.MyTicket == "Created")
                {
                    CreatedByMeQuery = string.Format("and ticket.CreatedByUid = '{0}'", TicketFilters.UserId);

                }
                else if (TicketFilters.MyTicket == "Assigned")
                {
                    myTicketQuery = string.Format("and dbo.CheckTicktAssignedUser(ticket.TicketId,'{0}') = 1 ", TicketFilters.UserId);
                }
                else if (TicketFilters.MyTicket == "Both")
                {
                    CreatedByMeQuery = string.Format("and ticket.CreatedByUid = '{0}'", TicketFilters.UserId);
                    myTicketQuery = string.Format("and dbo.CheckTicktAssignedUser(ticket.TicketId,'{0}') = 1 ", TicketFilters.UserId);
                }
                else if (TicketFilters.MyTicket == "None")
                {
                    CreatedByMeQuery = string.Format("and ticket.CreatedByUid != '{0}'", TicketFilters.UserId);
                    myTicketQuery = string.Format("and dbo.CheckTicktAssignedUser(ticket.TicketId,'{0}') = 0 ", TicketFilters.UserId);

                }
            }

            #endregion
            #region Order
            if (!string.IsNullOrWhiteSpace(TicketFilters.order))
            {
                if (TicketFilters.order == "ascending/ticketid")
                {
                    subquery = "order by #tdf.[Id] asc";
                    subquery1 = "order by [Id] asc";
                }
                else if (TicketFilters.order == "descending/ticketid")
                {
                    subquery = "order by #tdf.[Id] desc";
                    subquery1 = "order by [Id] desc";
                }
                else if (TicketFilters.order == "ascending/customername")
                {
                    subquery = "order by #tdf.CustomerName asc";
                    subquery1 = "order by CustomerName asc";
                }
                else if (TicketFilters.order == "descending/customername")
                {
                    subquery = "order by #tdf.CustomerName desc";
                    subquery1 = "order by CustomerName desc";
                }
                else if (TicketFilters.order == "ascending/tickettype")
                {
                    subquery = "order by #tdf.[TicketTypeVal] asc";
                    subquery1 = "order by [TicketTypeVal] asc";
                }
                else if (TicketFilters.order == "descending/tickettype")
                {
                    subquery = "order by #tdf.[TicketTypeVal] desc";
                    subquery1 = "order by [TicketTypeVal] desc";
                }
                else if (TicketFilters.order == "ascending/appointmentdate")
                {
                    subquery = "order by #tdf.[CompletionDate] asc";
                    subquery1 = "order by [CompletionDate] asc";
                }
                else if (TicketFilters.order == "descending/appointmentdate")
                {
                    subquery = "order by #tdf.[CompletionDate] desc";
                    subquery1 = "order by [CompletionDate] desc";
                }
                else if (TicketFilters.order == "ascending/technician")
                {
                    subquery = "order by #tdf.[AssignedTo] asc";
                    subquery1 = "order by [AssignedTo] asc";
                }
                else if (TicketFilters.order == "descending/technician")
                {
                    subquery = "order by #tdf.[AssignedTo] desc";
                    subquery1 = "order by [AssignedTo] desc";
                }
                else if (TicketFilters.order == "ascending/installdate")
                {
                    subquery = "order by #tdf.[InstallDate]  asc";
                    subquery1 = "order by InstallDate asc";
                }
                else if (TicketFilters.order == "descending/installdate")
                {
                    subquery = "order by #tdf.[InstallDate]  desc";
                    subquery1 = "order by InstallDate desc";
                }
                else if (TicketFilters.order == "ascending/leadsource")
                {
                    subquery = "order by #tdf.[LeadSource]  asc";
                    subquery1 = "order by LeadSource asc";
                }
                else if (TicketFilters.order == "descending/leadsource")
                {
                    subquery = "order by #tdf.[LeadSource]  desc";
                    subquery1 = "order by LeadSource desc";
                }
                else if (TicketFilters.order == "ascending/saleslocation")
                {
                    subquery = "order by #tdf.[CusSalesLoc]  asc";
                    subquery1 = "order by CusSalesLoc asc";
                }
                else if (TicketFilters.order == "descending/saleslocation")
                {
                    subquery = "order by #tdf.[CusSalesLoc]  desc";
                    subquery1 = "order by CusSalesLoc desc";
                }
                else if (TicketFilters.order == "ascending/salesperson")
                {
                    subquery = "order by #tdf.[CusSalesPerson]  asc";
                    subquery1 = "order by CusSalesPerson asc";
                }
                else if (TicketFilters.order == "descending/salesperson")
                {
                    subquery = "order by #tdf.[CusSalesPerson]  desc";
                    subquery1 = "order by CusSalesPerson desc";
                }
                else if (TicketFilters.order == "ascending/RMR")
                {
                    subquery = "order by #tdf.[RMRAmount]  asc";
                    subquery1 = "order by RMRAmount asc";
                }
                else if (TicketFilters.order == "descending/RMR")
                {
                    subquery = "order by #tdf.[RMRAmount]  desc";
                    subquery1 = "order by RMRAmount desc";
                }

                else
                {
                    subquery = "order by #tdf.[Id]  desc";
                    subquery1 = "order by Id desc";
                }

            }
            else
            {
                subquery = "order by #tdf.[Id] desc";
                subquery1 = "order by Id desc";
            }
            #endregion

            #region Filter Query
            if (!string.IsNullOrWhiteSpace(filter.id))
            {
                filterquery += string.Format("and ticket.Id = '{0}'", filter.id);
            }
            if (!string.IsNullOrWhiteSpace(filter.cusid))
            {
                filterquery += string.Format("and cus.Id = '{0}'", filter.cusid);
            }
            if (!string.IsNullOrWhiteSpace(filter.user) && filter.user != "-1")
            {
                filterquery += string.Format("and cus.Soldby = '{0}'", filter.user);
            }
            if (!string.IsNullOrWhiteSpace(TicketFilters.AssignedUserTicket) && TicketFilters.AssignedUserTicket != "null")
            {
                filterquery += string.Format("and tuser.UserId in ('{0}')", TicketFilters.AssignedUserTicket);
            }
            if (!string.IsNullOrWhiteSpace(filter.convertmindate) && !string.IsNullOrWhiteSpace(filter.convertmaxdate))
            {
                var datemin = Convert.ToDateTime(filter.convertmindate);
                var date = Convert.ToDateTime(filter.convertmaxdate);
                filterquery += string.Format("and ticket.CompletionDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.convertmindate))
            {
                var date = Convert.ToDateTime(filter.convertmindate);
                filterquery += string.Format("and ticket.CompletionDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.convertmaxdate))
            {
                var date = Convert.ToDateTime(filter.convertmaxdate);
                filterquery += string.Format("and ticket.CompletionDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }


            if (!string.IsNullOrWhiteSpace(filter.createmindate) && !string.IsNullOrWhiteSpace(filter.createmaxdate))
            {
                var datemin = Convert.ToDateTime(filter.createmindate);
                var date = Convert.ToDateTime(filter.createmaxdate);
                filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.createmindate))
            {
                var date = Convert.ToDateTime(filter.createmindate);
                filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.createmaxdate))
            {
                var date = Convert.ToDateTime(filter.createmaxdate);
                filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }


            if (!string.IsNullOrWhiteSpace(filter.transfermindate) && !string.IsNullOrWhiteSpace(filter.transfermaxdate))
            {
                var datemin = Convert.ToDateTime(filter.transfermindate);
                var date = Convert.ToDateTime(filter.transfermaxdate);
                filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.transfermindate))
            {
                var date = Convert.ToDateTime(filter.transfermindate);
                filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.transfermaxdate))
            {
                var date = Convert.ToDateTime(filter.transfermaxdate);
                filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }


            if (!string.IsNullOrWhiteSpace(filter.ticketcreateddatemin) && !string.IsNullOrWhiteSpace(filter.ticketcreateddatemax))
            {
                var datemin = Convert.ToDateTime(filter.ticketcreateddatemin);
                var date = Convert.ToDateTime(filter.ticketcreateddatemax);
                filterquery += string.Format("and ticket.CreatedDate between '{0}' and '{1}'", datemin.SetZeroHour().ClientToUTCTime().ToString("yyyy-MM-dd HH:mm:ss.fff"), date.SetMaxHour().ClientToUTCTime().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.ticketcreateddatemin))
            {
                var date = Convert.ToDateTime(filter.ticketcreateddatemin);
                filterquery += string.Format("and ticket.CreatedDate between '{0}' and '{1}'", date.SetZeroHour().ClientToUTCTime().ToString("yyyy-MM-dd HH:mm:ss.fff"), date.SetMaxHour().ClientToUTCTime().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.ticketcreateddatemax))
            {
                var date = Convert.ToDateTime(filter.ticketcreateddatemax);
                filterquery += string.Format("and ticket.CreatedDate between '{0}' and '{1}'", date.SetZeroHour().ClientToUTCTime().ToString("yyyy-MM-dd HH:mm:ss.fff"), date.SetMaxHour().ClientToUTCTime().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            #endregion
            sqlQuery = @"DECLARE @CompanyId uniqueidentifier
                                DECLARE @CustomerId uniqueidentifier
                                DECLARE @pagestart int
                                DECLARE @pageend int
                                DECLARE @pageno int
                                DECLARE @pagesize int
                                DECLARE @SearchText nvarchar(50) 

                                SET @SearchText = '%{0}%' 
                                SET @pageno = {1} --default 1
                                SET @pagesize = {2} --default 10
                                SET @CompanyId = '{3}' --97BCF758-A482-47EB-82B8-F88BF12293FF
                                SET @CustomerId = '{4}'

                                SET @pagestart=(@pageno-1)* @pagesize 
                                SET @pageend = @pagesize

 
                                select ticket.Id,
                                ticket.BookingId, 
                                ticket.TicketId, 
                                ticket.CustomerId, 
                                ticket.TicketType, 
                                ticket.[Status], 
                                ticket.[Priority], 
                                ticket.CreatedBy, 
                                ticket.CompanyId, 
                                ticket.CompletionDate, 
								cus.Id as cusid,
                                tuser.UserId as UserId,
                                convert(date,ticket.CreatedDate) as CreatedDate into #TicketIdData from Ticket ticket
		                        left join TicketUser tuser on tuser.TiketId = ticket.TicketId
                                left join Customer cus on cus.CustomerId = ticket.CustomerId
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                where ticket.CompanyId = @CompanyId
                                and ce.IsTestAccount != 1
                                {6}
                                        {7}
                                        {8}
                                        {9}
                                        {10}
                                        {13}
                                        {14}
                                        {19}
                                        {20}
                                        {23}
		                                select ticket.*,
                                       -- CASE 
	                                       -- WHEN (cus.DBA = '' or cus.DBA IS NULL) AND  (cus.BusinessName = '' or cus.BusinessName IS NULL) THEN cus.FirstName +' '+cus.LastName
	                                       -- WHEN (cus.DBA = '' or cus.DBA IS NULL)  THEN cus.BusinessName
	                                        --ELSE  cus.DBA
                                        --END as CustomerName,
                                         cus.FirstName +' '+cus.LastName as CustomerName
                                        ,convert(date,cus.SalesDate) as SalesDate
										,convert(date,cus.InstallDate) as InstallDate
                                        ,(select count(id) from TicketFile where TicketId = ticket.TicketId) as AttachmentsCount
                                        ,(select count(id) from TicketFile where TicketId = ticket.TicketId)
		                                        + (select count(id) from TicketReply where TicketId = ticket.TicketId) as RepliesCount
                                        ,lktype.DisplayText as TicketTypeVal
                                        ,lkstatus.DisplayText as StatusVal
                                        ,lkpriority.DisplayText as PriorityVal
                                        ,emp.FirstName + ' '+emp.LastName as CreatedByVal
                                        ,(select CAST(firstname + ' '+LastName + ' ' AS VARCHAR(200))  from Employee  where UserId in (select UserId from TicketUser tulist where tulist.TiketId = ticket.TicketId and IsPrimary = 1) FOR XML PATH ('') ) as AssignedTo
                                        --,(select CAST(firstname + ' '+LastName + ', ' AS VARCHAR(200))  from Employee  where UserId in (select UserId from TicketUser tualist where tualist.TiketId = ticket.TicketId and IsPrimary = 0) FOR XML PATH ('') ) as AdditionalMembers
	                                    --,lkStartTime.DisplayText as AppointmentStartTimeVal
                                        --,CA.AppointmentStartTime as AppointmentStartTime
                                        --,lkEndTime.DisplayText as AppointmentEndTimeVal
                                        --,CA.AppointmentEndTime as AppointmentEndTime
                                        --,(select COUNT(cae.Id)
                                        
										--from CustomerAppointmentEquipment cae
										--LEFT JOIN Ticket t on t.TicketId=cae.AppointmentId
										--LEFT JOIN TicketUser tu on tu.TiketId=t.TicketId and tu.IsPrimary=1
										--where cae.AppointmentId=CA.AppointmentId
                                        --AND cae.IsEquipmentRelease=0
										--AND cae.Quantity>(ISNULL((Select ISNULL(SUM(invinner.Quantity),0) from InventoryTech invinner where invinner.EquipmentId=CAE.EquipmentId and Type='Add'  And invinner.TechnicianId=tu.UserId)-(Select ISNULL(SUM(invinner.Quantity),0) from InventoryTech invinner where invinner.EquipmentId=CAE.EquipmentId and Type='Release'  And invinner.TechnicianId=tu.UserId),0))) as ExceedQuantity,
                                        ,cus.Id as CusIdInt
                                        ,(select sum(TotalAmount) from Invoice 
										    where bookingId = ticket.BookingId and bookingId != '' 
										        and (Status = 'Open' or Status = 'Partial' or Status ='Paid')) as BookingInvoiceAmount
                                        ,isnull(cus.BusinessName, '') as CusBusinessName,
                                        isnull(sales.FirstName + ' ' + sales.LastName, '') as CusSalesPerson,
                                        isnull(installer.FirstName + ' ' + installer.LastName, '') as CusInstaller,
                                        isnull((select SUM(cae.TotalPrice) from CustomerAppointmentEquipment cae
											LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
											LEFT JOIN equipment eqp on eqp.EquipmentId=cae.EquipmentId
											where tk.CustomerId=cus.CustomerId
											and cae.IsService=1 and (cae.IsDefaultService is NULL or cae.IsDefaultService=0) 
											and (cae.IsCopied is NULL or cae.IsCopied=0) and eqp.IsArbEnabled=1),0) as RMRAmount,
                                        {16}
                                        --,LAG(lktype.DisplayText) OVER (ORDER BY ticket.Id) as PrevTicketType
										--,LAG(ticket.CompletionDate) OVER (ORDER BY ticket.Id) as PrevAppointmentDate
										--,LAG(emp.FirstName + ' '+emp.LastName) OVER (ORDER BY ticket.Id) as PrevTechnician
                                        ,lksalesloc.DisplayText as CusSalesLoc
										,lkleadsource.DisplayText as LeadSource 
										into #TicketData
                                        from #TicketIdData ticket
                                        LEFT JOIN Customer cus on cus.CustomerId=ticket.CustomerId
                                        left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                        left join TicketUser tuser on tuser.TiketId = ticket.TicketId and tuser.IsPrimary = 1
                                        left join Lookup lktype on  lktype.DataKey ='TicketType'  
                                        and lktype.DataValue = ticket.TicketType

                                        left join CustomerAppointment CA on  CA.AppointmentId = ticket.TicketId

                                        left join Lookup lkStartTime on lkStartTime.DataKey = 'Arrival'
                                        and lkStartTime.DataValue = CA.AppointmentStartTime

                                        left join Lookup lkEndTime on lkEndTime.DataKey = 'Arrival'
                                        and lkEndTime.DataValue = CA.AppointmentEndTime

                                        left join Lookup lkstatus on  lkstatus.DataKey ='TicketStatus'  
                                        and lkstatus.DataValue = ticket.[Status]

                                        left join Lookup lkpriority on  lkpriority.DataKey ='TicketPriority'  
                                        and lkpriority.DataValue = ticket.[Priority]

                                        left join Lookup lksalesloc on  lksalesloc.DataKey ='CommissionType'  
                                        and lksalesloc.DataValue = iif(cus.SalesLocation != '-1', cus.SalesLocation, null)

										left join Lookup lkleadsource on  lkleadsource.DataKey ='LeadSource'  
                                        and lkleadsource.DataValue = iif(cus.LeadSource != '-1', cus.LeadSource, null)

                                        left join Employee emp on emp.UserId = ticket.CreatedBy
                                        left join Employee sales on CONVERT(nvarchar(50), sales.UserId) = cus.Soldby
                                        left join Employee installer on CONVERT(nvarchar(50), installer.UserId) = cus.Soldby
                                        
		                                where ticket.CompanyId = @CompanyId
                                        and ce.IsTestAccount != 1
                                        and iif(cus.FirstName +' '+cus.LastName is null, cus.BusinessName, cus.DBA) is not null
                                        {6}
                                        {7}
                                        {8}
                                        {9}
                                        {10}
                                        {13}
                                        {14}
                                        {19}
                                         {22}
                                        {23}
                                        order by ticket.Id desc
                                select *,IDENTITY(INT, 1, 1) AS paginationid into #TicketDataFilter from #TicketData{5}

                                SELECT #tdf.*, LAG(#tdf.TicketTypeVal) OVER (ORDER BY #tdf.Id) as PrevTicketType
                                , convert(date,LAG(#tdf.CompletionDate) OVER (ORDER BY #tdf.Id)) as PrevAppointmentDate
								 , LAG(#tdf.CreatedByVal) OVER (ORDER BY #tdf.Id) as PrevTechnician into #TestTable
                                FROM #TicketDataFilter #tdf
                                    where paginationid is NOT null --IN(Select TOP (@pagestart) paginationid from #TicketDataFilter ) 
                                    -- {15}
                                     {11}
	                           --select  count(Id) as [TotalCount] from #TicketIdData where Id>0 and Id is not null and cusid>0 and cusid is not null and Id like '%%' or cusid like '%%'

	                            select --*,
								 Id as [Ticket Id]
								,cusid as [Customer Id]
								,CustomerName as [Customer Name]
								,CusBusinessName as [Business Name]
								,LeadSource as [Lead Source]
								,TicketType as [Ticket Type]
								,CusSalesLoc as [Sales Location]
								,CusSalesPerson as [Sales Person]
								,AssignedTo as [Installer]
								,cast(RMRAmount as decimal(12,2)) as RMR
								,[Status] as [Ticket Status]
								,PrevAppointmentDate as [Appointment Date]
								,SalesDate as [Sales Date]
								,InstallDate as [Install Date]
                                 ,CreatedDate as [Created Date]
								--,TicketType as [Ticket Type]
								from #TestTable
                                order by Id desc
								--select sum(RMRAmount) as TotalRMR from #TestTable
                                
                                DROP TABLE #TicketData
								DROP TABLE #TicketDataFilter
								drop table #TicketIdData
								drop table #TestTable
                                    ";

            try
            {
                sqlQuery = string.Format(sqlQuery,
                                        TicketFilters.SearchText,//0
                                        PageNo,  //1
                                        PageSize, //2
                                        companyId, //3
                                        TicketFilters.CustomerId, //4
                                        searchQuery,//5
                                        ticketStatusQuery,//6
                                        ticketTypeQuery,//7
                                        assignedQuery,//8
                                        CreatedByMeQuery,//9
                                        myTicketQuery,//10
                                        subquery,//11
                                        subquery1,//12
                                                  //CreatedDateQuery,//13,
                                        AppointmentDateQuery,//13
                                        ReportTypeQuery,//14,
                                        ReportQuery,//15,
                                        ReportColQuery,//16
                                        ReportCountQuery,//17
                                        NameSql,//18
                                        filterquery,//19
                                        ReportAgeQuery,//20
                                        gobacksearchquery,//21
                                        searchQueryupdated,//22
                                        CreatedDateQuery//23

                                        );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllTechCommissionReport(DateTime? Start, DateTime? End)
        {
            string sqlQuery = @"";
            string sdate = "";
            string edate = "";
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select emp.FirstName + ' ' + emp.LastName as [User Paid], cus.Id as [Contact Id], cus.FirstName + ' ' + cus.LastName as [Contact Name], cus.City as [Contact City],
                            ca.AppointmentDate as [Primary Appointment Date], tk.TicketType as [WO Type], tk.[Status] as [WO Status],'' as [Install Type],'' as [Total Paid],'' as [Total Adj],
                            '' as [(NEW) Labor - Appointment Setting Fee],'' as [(NEW) Labor - Base RMR (Smart)],'' as [(NEW) Labor - Base RMR (Standard)],'' as [(NEW) Labor - ESP $5 (Smart)],
                            '' as [(NEW) Labor - ESP $7 (Smart)],'' as [(NEW) Labor - Service/Trouble Call],'' as [(NEW) Labor - Smart Garage],'' as [(NEW) Labor - Smart Image Sensor],
                            '' as [(NEW) Labor - Smart Lights],'' as [(NEW) Labor - Smart Locks],'' as [(NEW) Labor - Smart SVR],'' as [(NEW) Labor - Smart Thermostat],'' as [(NEW) Labor - Smart Video (1-4 Cameras)],
                            '' as [3 Camera Package],'' as Chargeback,'' as [Labor - $39.99 Promo],'' as [Labor - Commission - Hardware],'' as [Labor - Monthly Monitoring Amount],'' as [Labor - Protect & Automate Promo],
                            '' as [Labor - Smart - Doorbell Camera], '' as [Labor - Tech - Trip Fee],'' as [Misc. Fee],'' as [Platinum Service Plan],tc.[Batch] as [Payroll Batch ID], '' as [Check #], sales.FirstName + ' ' + sales.LastName as [Sales Name]
                            from TechCommission tc
                            left join Customer cus on cus.CustomerId = tc.CustomerId
                            left join Employee emp on emp.UserId = tc.UserId
                            left join CustomerAppointment ca on ca.AppointmentId = tc.TicketId
                            left join Ticket tk on tk.TicketId = tc.TicketId
                            left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                            where tc.CreatedDate between '{0}' and '{1}'";
                sdate = Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
                edate = End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
            }
            else
            {
                sqlQuery = @"select emp.FirstName + ' ' + emp.LastName as [User Paid], cus.Id as [Contact Id], cus.FirstName + ' ' + cus.LastName as [Contact Name], cus.City as [Contact City],
                            ca.AppointmentDate as [Primary Appointment Date], tk.TicketType as [WO Type], tk.[Status] as [WO Status],'' as [Install Type],'' as [Total Paid],'' as [Total Adj],
                            '' as [(NEW) Labor - Appointment Setting Fee],'' as [(NEW) Labor - Base RMR (Smart)],'' as [(NEW) Labor - Base RMR (Standard)],'' as [(NEW) Labor - ESP $5 (Smart)],
                            '' as [(NEW) Labor - ESP $7 (Smart)],'' as [(NEW) Labor - Service/Trouble Call],'' as [(NEW) Labor - Smart Garage],'' as [(NEW) Labor - Smart Image Sensor],
                            '' as [(NEW) Labor - Smart Lights],'' as [(NEW) Labor - Smart Locks],'' as [(NEW) Labor - Smart SVR],'' as [(NEW) Labor - Smart Thermostat],'' as [(NEW) Labor - Smart Video (1-4 Cameras)],
                            '' as [3 Camera Package],'' as Chargeback,'' as [Labor - $39.99 Promo],'' as [Labor - Commission - Hardware],'' as [Labor - Monthly Monitoring Amount],'' as [Labor - Protect & Automate Promo],
                            '' as [Labor - Smart - Doorbell Camera], '' as [Labor - Tech - Trip Fee],'' as [Misc. Fee],'' as [Platinum Service Plan],tc.[Batch] as [Payroll Batch ID], '' as [Check #], sales.FirstName + ' ' + sales.LastName as [Sales Name]
                            from TechCommission tc
                            left join Customer cus on cus.CustomerId = tc.CustomerId
                            left join Employee emp on emp.UserId = tc.UserId
                            left join CustomerAppointment ca on ca.AppointmentId = tc.TicketId
                            left join Ticket tk on tk.TicketId = tc.TicketId
                            left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))";
            }
            try
            {
                sqlQuery = string.Format(sqlQuery, sdate, edate);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllAdditionalMemberCommissionReport(DateTime? Start, DateTime? End)
        {
            string sqlQuery = @"";
            string sdate = "";
            string edate = "";
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select emp.FirstName + ' ' + emp.LastName as [User Paid], cus.Id as [Contact Id], cus.FirstName + ' ' + cus.LastName as [Contact Name], cus.City as [Contact City],
                            ca.AppointmentDate as [Primary Appointment Date], tk.TicketType as [WO Type], tk.[Status] as [WO Status],'' as [Install Type],'' as [Total Paid],'' as [Total Adj],
                            '' as [(NEW) Labor - Appointment Setting Fee],'' as [(NEW) Labor - Base RMR (Smart)],'' as [(NEW) Labor - Base RMR (Standard)],'' as [(NEW) Labor - ESP $5 (Smart)],
                            '' as [(NEW) Labor - ESP $7 (Smart)],'' as [(NEW) Labor - Service/Trouble Call],'' as [(NEW) Labor - Smart Garage],'' as [(NEW) Labor - Smart Image Sensor],
                            '' as [(NEW) Labor - Smart Lights],'' as [(NEW) Labor - Smart Locks],'' as [(NEW) Labor - Smart SVR],'' as [(NEW) Labor - Smart Thermostat],'' as [(NEW) Labor - Smart Video (1-4 Cameras)],
                            '' as [3 Camera Package],'' as Chargeback,'' as [Labor - $39.99 Promo],'' as [Labor - Commission - Hardware],'' as [Labor - Monthly Monitoring Amount],'' as [Labor - Protect & Automate Promo],
                            '' as [Labor - Smart - Doorbell Camera], '' as [Labor - Tech - Trip Fee],'' as [Misc. Fee],'' as [Platinum Service Plan],tc.[Batch] as [Payroll Batch ID], '' as [Check #], sales.FirstName + ' ' + sales.LastName as [Sales Name]
                            from AddMemberCommission tc
                            left join Customer cus on cus.CustomerId = tc.CustomerId
                            left join Employee emp on emp.UserId = tc.UserId
                            left join CustomerAppointment ca on ca.AppointmentId = tc.TicketId
                            left join Ticket tk on tk.TicketId = tc.TicketId
                            left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                            where tc.CreatedDate between '{0}' and '{1}'";
                sdate = Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
                edate = End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
            }
            else
            {
                sqlQuery = @"select emp.FirstName + ' ' + emp.LastName as [User Paid], cus.Id as [Contact Id], cus.FirstName + ' ' + cus.LastName as [Contact Name], cus.City as [Contact City],
                            ca.AppointmentDate as [Primary Appointment Date], tk.TicketType as [WO Type], tk.[Status] as [WO Status],'' as [Install Type],'' as [Total Paid],'' as [Total Adj],
                            '' as [(NEW) Labor - Appointment Setting Fee],'' as [(NEW) Labor - Base RMR (Smart)],'' as [(NEW) Labor - Base RMR (Standard)],'' as [(NEW) Labor - ESP $5 (Smart)],
                            '' as [(NEW) Labor - ESP $7 (Smart)],'' as [(NEW) Labor - Service/Trouble Call],'' as [(NEW) Labor - Smart Garage],'' as [(NEW) Labor - Smart Image Sensor],
                            '' as [(NEW) Labor - Smart Lights],'' as [(NEW) Labor - Smart Locks],'' as [(NEW) Labor - Smart SVR],'' as [(NEW) Labor - Smart Thermostat],'' as [(NEW) Labor - Smart Video (1-4 Cameras)],
                            '' as [3 Camera Package],'' as Chargeback,'' as [Labor - $39.99 Promo],'' as [Labor - Commission - Hardware],'' as [Labor - Monthly Monitoring Amount],'' as [Labor - Protect & Automate Promo],
                            '' as [Labor - Smart - Doorbell Camera], '' as [Labor - Tech - Trip Fee],'' as [Misc. Fee],'' as [Platinum Service Plan],tc.[Batch] as [Payroll Batch ID], '' as [Check #], sales.FirstName + ' ' + sales.LastName as [Sales Name]
                            from AddMemberCommission tc
                            left join Customer cus on cus.CustomerId = tc.CustomerId
                            left join Employee emp on emp.UserId = tc.UserId
                            left join CustomerAppointment ca on ca.AppointmentId = tc.TicketId
                            left join Ticket tk on tk.TicketId = tc.TicketId
                            left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))";
            }
            try
            {
                sqlQuery = string.Format(sqlQuery, sdate, edate);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        public DataTable GetAllServiceCallCommissionReport(DateTime? Start, DateTime? End)
        {
            string sqlQuery = @"";
            string sdate = "";
            string edate = "";
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select emp.FirstName + ' ' + emp.LastName as [User Paid], cus.Id as [Contact Id], cus.FirstName + ' ' + cus.LastName as [Contact Name], cus.City as [Contact City],
                            ca.AppointmentDate as [Primary Appointment Date], tk.TicketType as [WO Type], tk.[Status] as [WO Status],'' as [Install Type],'' as [Total Paid],'' as [Total Adj],
                            '' as [(NEW) Labor - Appointment Setting Fee],'' as [(NEW) Labor - Base RMR (Smart)],'' as [(NEW) Labor - Base RMR (Standard)],'' as [(NEW) Labor - ESP $5 (Smart)],
                            '' as [(NEW) Labor - ESP $7 (Smart)],'' as [(NEW) Labor - Service/Trouble Call],'' as [(NEW) Labor - Smart Garage],'' as [(NEW) Labor - Smart Image Sensor],
                            '' as [(NEW) Labor - Smart Lights],'' as [(NEW) Labor - Smart Locks],'' as [(NEW) Labor - Smart SVR],'' as [(NEW) Labor - Smart Thermostat],'' as [(NEW) Labor - Smart Video (1-4 Cameras)],
                            '' as [3 Camera Package],'' as Chargeback,'' as [Labor - $39.99 Promo],'' as [Labor - Commission - Hardware],'' as [Labor - Monthly Monitoring Amount],'' as [Labor - Protect & Automate Promo],
                            '' as [Labor - Smart - Doorbell Camera], '' as [Labor - Tech - Trip Fee],'' as [Misc. Fee],'' as [Platinum Service Plan],tc.[Batch] as [Payroll Batch ID], '' as [Check #], sales.FirstName + ' ' + sales.LastName as [Sales Name]
                            from ServiceCallCommission tc
                            left join Customer cus on cus.CustomerId = tc.CustomerId
                            left join Employee emp on emp.UserId = tc.UserId
                            left join CustomerAppointment ca on ca.AppointmentId = tc.TicketId
                            left join Ticket tk on tk.TicketId = tc.TicketId
                            left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                            where tc.CreatedDate between '{0}' and '{1}'";
                sdate = Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
                edate = End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
            }
            else
            {
                sqlQuery = @"select emp.FirstName + ' ' + emp.LastName as [User Paid], cus.Id as [Contact Id], cus.FirstName + ' ' + cus.LastName as [Contact Name], cus.City as [Contact City],
                            ca.AppointmentDate as [Primary Appointment Date], tk.TicketType as [WO Type], tk.[Status] as [WO Status],'' as [Install Type],'' as [Total Paid],'' as [Total Adj],
                            '' as [(NEW) Labor - Appointment Setting Fee],'' as [(NEW) Labor - Base RMR (Smart)],'' as [(NEW) Labor - Base RMR (Standard)],'' as [(NEW) Labor - ESP $5 (Smart)],
                            '' as [(NEW) Labor - ESP $7 (Smart)],'' as [(NEW) Labor - Service/Trouble Call],'' as [(NEW) Labor - Smart Garage],'' as [(NEW) Labor - Smart Image Sensor],
                            '' as [(NEW) Labor - Smart Lights],'' as [(NEW) Labor - Smart Locks],'' as [(NEW) Labor - Smart SVR],'' as [(NEW) Labor - Smart Thermostat],'' as [(NEW) Labor - Smart Video (1-4 Cameras)],
                            '' as [3 Camera Package],'' as Chargeback,'' as [Labor - $39.99 Promo],'' as [Labor - Commission - Hardware],'' as [Labor - Monthly Monitoring Amount],'' as [Labor - Protect & Automate Promo],
                            '' as [Labor - Smart - Doorbell Camera], '' as [Labor - Tech - Trip Fee],'' as [Misc. Fee],'' as [Platinum Service Plan],tc.[Batch] as [Payroll Batch ID], '' as [Check #], sales.FirstName + ' ' + sales.LastName as [Sales Name]
                            from ServiceCallCommission tc
                            left join Customer cus on cus.CustomerId = tc.CustomerId
                            left join Employee emp on emp.UserId = tc.UserId
                            left join CustomerAppointment ca on ca.AppointmentId = tc.TicketId
                            left join Ticket tk on tk.TicketId = tc.TicketId
                            left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))";
            }
            try
            {
                sqlQuery = string.Format(sqlQuery, sdate, edate);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllRescheduleCommissionReport(DateTime? Start, DateTime? End)
        {
            string sqlQuery = @"";
            string sdate = "";
            string edate = "";
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select emp.FirstName + ' ' + emp.LastName as [User Paid], cus.Id as [Contact Id], cus.FirstName + ' ' + cus.LastName as [Contact Name], cus.City as [Contact City],
                            ca.AppointmentDate as [Primary Appointment Date], tk.TicketType as [WO Type], tk.[Status] as [WO Status],'' as [Install Type],'' as [Total Paid],'' as [Total Adj],
                            '' as [(NEW) Labor - Appointment Setting Fee],'' as [(NEW) Labor - Base RMR (Smart)],'' as [(NEW) Labor - Base RMR (Standard)],'' as [(NEW) Labor - ESP $5 (Smart)],
                            '' as [(NEW) Labor - ESP $7 (Smart)],'' as [(NEW) Labor - Service/Trouble Call],'' as [(NEW) Labor - Smart Garage],'' as [(NEW) Labor - Smart Image Sensor],
                            '' as [(NEW) Labor - Smart Lights],'' as [(NEW) Labor - Smart Locks],'' as [(NEW) Labor - Smart SVR],'' as [(NEW) Labor - Smart Thermostat],'' as [(NEW) Labor - Smart Video (1-4 Cameras)],
                            '' as [3 Camera Package],'' as Chargeback,'' as [Labor - $39.99 Promo],'' as [Labor - Commission - Hardware],'' as [Labor - Monthly Monitoring Amount],'' as [Labor - Protect & Automate Promo],
                            '' as [Labor - Smart - Doorbell Camera], '' as [Labor - Tech - Trip Fee],'' as [Misc. Fee],'' as [Platinum Service Plan],tc.[Batch] as [Payroll Batch ID], '' as [Check #], sales.FirstName + ' ' + sales.LastName as [Sales Name]
                            from RescheduleCommission tc
                            left join Customer cus on cus.CustomerId = tc.CustomerId
                            left join Employee emp on emp.UserId = tc.UserId
                            left join CustomerAppointment ca on ca.AppointmentId = tc.TicketId
                            left join Ticket tk on tk.TicketId = tc.TicketId
                            left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                            where tc.CreatedDate between '{0}' and '{1}'";
                sdate = Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
                edate = End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
            }
            else
            {
                sqlQuery = @"select emp.FirstName + ' ' + emp.LastName as [User Paid], cus.Id as [Contact Id], cus.FirstName + ' ' + cus.LastName as [Contact Name], cus.City as [Contact City],
                            ca.AppointmentDate as [Primary Appointment Date], tk.TicketType as [WO Type], tk.[Status] as [WO Status],'' as [Install Type],'' as [Total Paid],'' as [Total Adj],
                            '' as [(NEW) Labor - Appointment Setting Fee],'' as [(NEW) Labor - Base RMR (Smart)],'' as [(NEW) Labor - Base RMR (Standard)],'' as [(NEW) Labor - ESP $5 (Smart)],
                            '' as [(NEW) Labor - ESP $7 (Smart)],'' as [(NEW) Labor - Service/Trouble Call],'' as [(NEW) Labor - Smart Garage],'' as [(NEW) Labor - Smart Image Sensor],
                            '' as [(NEW) Labor - Smart Lights],'' as [(NEW) Labor - Smart Locks],'' as [(NEW) Labor - Smart SVR],'' as [(NEW) Labor - Smart Thermostat],'' as [(NEW) Labor - Smart Video (1-4 Cameras)],
                            '' as [3 Camera Package],'' as Chargeback,'' as [Labor - $39.99 Promo],'' as [Labor - Commission - Hardware],'' as [Labor - Monthly Monitoring Amount],'' as [Labor - Protect & Automate Promo],
                            '' as [Labor - Smart - Doorbell Camera], '' as [Labor - Tech - Trip Fee],'' as [Misc. Fee],'' as [Platinum Service Plan],tc.[Batch] as [Payroll Batch ID], '' as [Check #], sales.FirstName + ' ' + sales.LastName as [Sales Name]
                            from RescheduleCommission tc
                            left join Customer cus on cus.CustomerId = tc.CustomerId
                            left join Employee emp on emp.UserId = tc.UserId
                            left join CustomerAppointment ca on ca.AppointmentId = tc.TicketId
                            left join Ticket tk on tk.TicketId = tc.TicketId
                            left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))";
            }
            try
            {
                sqlQuery = string.Format(sqlQuery, sdate, edate);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllFollowUpCommissionReport(DateTime? Start, DateTime? End)
        {
            string sqlQuery = @"";
            string sdate = "";
            string edate = "";
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select emp.FirstName + ' ' + emp.LastName as [User Paid], cus.Id as [Contact Id], cus.FirstName + ' ' + cus.LastName as [Contact Name], cus.City as [Contact City],
                            ca.AppointmentDate as [Primary Appointment Date], tk.TicketType as [WO Type], tk.[Status] as [WO Status],'' as [Install Type],'' as [Total Paid],'' as [Total Adj],
                            '' as [(NEW) Labor - Appointment Setting Fee],'' as [(NEW) Labor - Base RMR (Smart)],'' as [(NEW) Labor - Base RMR (Standard)],'' as [(NEW) Labor - ESP $5 (Smart)],
                            '' as [(NEW) Labor - ESP $7 (Smart)],'' as [(NEW) Labor - Service/Trouble Call],'' as [(NEW) Labor - Smart Garage],'' as [(NEW) Labor - Smart Image Sensor],
                            '' as [(NEW) Labor - Smart Lights],'' as [(NEW) Labor - Smart Locks],'' as [(NEW) Labor - Smart SVR],'' as [(NEW) Labor - Smart Thermostat],'' as [(NEW) Labor - Smart Video (1-4 Cameras)],
                            '' as [3 Camera Package],'' as Chargeback,'' as [Labor - $39.99 Promo],'' as [Labor - Commission - Hardware],'' as [Labor - Monthly Monitoring Amount],'' as [Labor - Protect & Automate Promo],
                            '' as [Labor - Smart - Doorbell Camera], '' as [Labor - Tech - Trip Fee],'' as [Misc. Fee],'' as [Platinum Service Plan],tc.[Batch] as [Payroll Batch ID], '' as [Check #], sales.FirstName + ' ' + sales.LastName as [Sales Name]
                            from FollowUpCommission tc
                            left join Customer cus on cus.CustomerId = tc.CustomerId
                            left join Employee emp on emp.UserId = tc.UserId
                            left join CustomerAppointment ca on ca.AppointmentId = tc.TicketId
                            left join Ticket tk on tk.TicketId = tc.TicketId
                            left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                            where tc.CreatedDate between '{0}' and '{1}'";
                sdate = Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
                edate = End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
            }
            else
            {
                sqlQuery = @"select emp.FirstName + ' ' + emp.LastName as [User Paid], cus.Id as [Contact Id], cus.FirstName + ' ' + cus.LastName as [Contact Name], cus.City as [Contact City],
                            ca.AppointmentDate as [Primary Appointment Date], tk.TicketType as [WO Type], tk.[Status] as [WO Status],'' as [Install Type],'' as [Total Paid],'' as [Total Adj],
                            '' as [(NEW) Labor - Appointment Setting Fee],'' as [(NEW) Labor - Base RMR (Smart)],'' as [(NEW) Labor - Base RMR (Standard)],'' as [(NEW) Labor - ESP $5 (Smart)],
                            '' as [(NEW) Labor - ESP $7 (Smart)],'' as [(NEW) Labor - Service/Trouble Call],'' as [(NEW) Labor - Smart Garage],'' as [(NEW) Labor - Smart Image Sensor],
                            '' as [(NEW) Labor - Smart Lights],'' as [(NEW) Labor - Smart Locks],'' as [(NEW) Labor - Smart SVR],'' as [(NEW) Labor - Smart Thermostat],'' as [(NEW) Labor - Smart Video (1-4 Cameras)],
                            '' as [3 Camera Package],'' as Chargeback,'' as [Labor - $39.99 Promo],'' as [Labor - Commission - Hardware],'' as [Labor - Monthly Monitoring Amount],'' as [Labor - Protect & Automate Promo],
                            '' as [Labor - Smart - Doorbell Camera], '' as [Labor - Tech - Trip Fee],'' as [Misc. Fee],'' as [Platinum Service Plan],tc.[Batch] as [Payroll Batch ID], '' as [Check #], sales.FirstName + ' ' + sales.LastName as [Sales Name]
                            from FollowUpCommission tc
                            left join Customer cus on cus.CustomerId = tc.CustomerId
                            left join Employee emp on emp.UserId = tc.UserId
                            left join CustomerAppointment ca on ca.AppointmentId = tc.TicketId
                            left join Ticket tk on tk.TicketId = tc.TicketId
                            left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))";
            }
            try
            {
                sqlQuery = string.Format(sqlQuery, sdate, edate);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllSalesCommissionReport(DateTime? Start, DateTime? End)
        {
            string sqlQuery = @"";
            string sdate = "";
            string edate = "";
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select emp.FirstName + ' ' + emp.LastName as [User Paid], cus.Id as [Contact Id], cus.FirstName + ' ' + cus.LastName as [Contact Name], cus.City as [Contact City],
                            ca.AppointmentDate as [Primary Appointment Date], tk.TicketType as [WO Type], tk.[Status] as [WO Status],'' as [Install Type],'' as [Total Paid],'' as [Total Adj],
                            '' as [(NEW) Labor - Appointment Setting Fee],'' as [(NEW) Labor - Base RMR (Smart)],'' as [(NEW) Labor - Base RMR (Standard)],'' as [(NEW) Labor - ESP $5 (Smart)],
                            '' as [(NEW) Labor - ESP $7 (Smart)],'' as [(NEW) Labor - Service/Trouble Call],'' as [(NEW) Labor - Smart Garage],'' as [(NEW) Labor - Smart Image Sensor],
                            '' as [(NEW) Labor - Smart Lights],'' as [(NEW) Labor - Smart Locks],'' as [(NEW) Labor - Smart SVR],'' as [(NEW) Labor - Smart Thermostat],'' as [(NEW) Labor - Smart Video (1-4 Cameras)],
                            '' as [3 Camera Package],'' as Chargeback,'' as [Labor - $39.99 Promo],'' as [Labor - Commission - Hardware],'' as [Labor - Monthly Monitoring Amount],'' as [Labor - Protect & Automate Promo],
                            '' as [Labor - Smart - Doorbell Camera], '' as [Labor - Tech - Trip Fee],'' as [Misc. Fee],'' as [Platinum Service Plan],tc.[Batch] as [Payroll Batch ID], '' as [Check #], sales.FirstName + ' ' + sales.LastName as [Sales Name]
                            from SalesCommission tc
                            left join Customer cus on cus.CustomerId = tc.CustomerId
                            left join Employee emp on emp.UserId = tc.UserId
                            left join CustomerAppointment ca on ca.AppointmentId = tc.TicketId
                            left join Ticket tk on tk.TicketId = tc.TicketId
                            left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                            where tc.CreatedDate between '{0}' and '{1}'";
                sdate = Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
                edate = End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
            }
            else
            {
                sqlQuery = @"select emp.FirstName + ' ' + emp.LastName as [User Paid], cus.Id as [Contact Id], cus.FirstName + ' ' + cus.LastName as [Contact Name], cus.City as [Contact City],
                            ca.AppointmentDate as [Primary Appointment Date], tk.TicketType as [WO Type], tk.[Status] as [WO Status],'' as [Install Type],'' as [Total Paid],'' as [Total Adj],
                            '' as [(NEW) Labor - Appointment Setting Fee],'' as [(NEW) Labor - Base RMR (Smart)],'' as [(NEW) Labor - Base RMR (Standard)],'' as [(NEW) Labor - ESP $5 (Smart)],
                            '' as [(NEW) Labor - ESP $7 (Smart)],'' as [(NEW) Labor - Service/Trouble Call],'' as [(NEW) Labor - Smart Garage],'' as [(NEW) Labor - Smart Image Sensor],
                            '' as [(NEW) Labor - Smart Lights],'' as [(NEW) Labor - Smart Locks],'' as [(NEW) Labor - Smart SVR],'' as [(NEW) Labor - Smart Thermostat],'' as [(NEW) Labor - Smart Video (1-4 Cameras)],
                            '' as [3 Camera Package],'' as Chargeback,'' as [Labor - $39.99 Promo],'' as [Labor - Commission - Hardware],'' as [Labor - Monthly Monitoring Amount],'' as [Labor - Protect & Automate Promo],
                            '' as [Labor - Smart - Doorbell Camera], '' as [Labor - Tech - Trip Fee],'' as [Misc. Fee],'' as [Platinum Service Plan],tc.[Batch] as [Payroll Batch ID], '' as [Check #], sales.FirstName + ' ' + sales.LastName as [Sales Name]
                            from SalesCommission tc
                            left join Customer cus on cus.CustomerId = tc.CustomerId
                            left join Employee emp on emp.UserId = tc.UserId
                            left join CustomerAppointment ca on ca.AppointmentId = tc.TicketId
                            left join Ticket tk on tk.TicketId = tc.TicketId
                            left join Employee sales on sales.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))";
            }
            try
            {
                sqlQuery = string.Format(sqlQuery, sdate, edate);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllTimeClockReport(DateTime? Start, DateTime? End)
        {
            string sqlQuery = @"";
            string sdate = "";
            string edate = "";
            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select emp.Id,emp.UserId, emp.FirstName,emp.LastName,emp.HourlyRate,
                                (select  round((sum(Cast(ClockedInSeconds as float))/3600),2 )  from EmployeeTimeClock where UserId = emp.UserId)  as [RegularHours],
                                (select ( round((sum(Cast(ClockedInSeconds as float))/3600),2 ) - 40 )  from EmployeeTimeClock where UserId = emp.UserId) as [OTOHours],
                                (select round((sum(Cast(Minute as float))/60),2 )  from Pto where UserId = emp.UserId) as [PTOHours]
                                --into #emp
                                from Employee emp
                                left join EmployeeTimeClock tm on tm.UserId = emp.UserId
                                LEFT JOIN PTO pt on pt.UserId=emp.UserId and pt.Status='accepted' 
                                where emp.IsPayroll =1 	
                                and tm.LastUpdatedDate between '{0}' and '{1}'
                                group by emp.FirstName,emp.LastName,emp.UserId, emp.Id,emp.HourlyRate";
                sdate = Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
                edate = End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
            }
            else
            {
                sqlQuery = @"select emp.Id,emp.UserId, emp.FirstName,emp.LastName,emp.HourlyRate,
                                (select  round((sum(Cast(ClockedInSeconds as float))/3600),2 )  from EmployeeTimeClock where UserId = emp.UserId)  as [RegularHours],
                                (select ( round((sum(Cast(ClockedInSeconds as float))/3600),2 ) - 40 )  from EmployeeTimeClock where UserId = emp.UserId) as [OTOHours],
                                (select round((sum(Cast(Minute as float))/60),2 )  from Pto where UserId = emp.UserId) as [PTOHours]
                                --into #emp
                                from Employee emp
                                left join EmployeeTimeClock tm on tm.UserId = emp.UserId
                                LEFT JOIN PTO pt on pt.UserId=emp.UserId and pt.Status='accepted' 
                                where emp.IsPayroll =1 	
                                group by emp.FirstName,emp.LastName,emp.UserId, emp.Id,emp.HourlyRate";
            }
            try
            {
                sqlQuery = string.Format(sqlQuery, sdate, edate);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllTicketReportByCompanyForAppointmentDate(Guid companyId, DateTime? Start, DateTime? End, TicketFilter Filters, FilterReportModel filter)
        {
            string sqlQuery = @"";
            string qsearch = "";
            string sdate = "";
            string edate = "";
            string qtype = "";
            string qstatus = "";
            string qassigned = "";
            string filterquery = "";
            if (!string.IsNullOrWhiteSpace(Filters.SearchText))
            {
                qsearch = string.Format("and (CONVERT(nvarchar(11), tk.CompletionDate, 101) like '%{0}%' or tk.[Status] like '%{0}%' or tk.[TicketType] like '%{0}%' or tk.Id like '%{0}%' or cus.Id like '%{0}%')", Filters.SearchText);
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketType) && Filters.TicketType != "-1" && Filters.TicketType != "null")
            {
                qtype = string.Format("and tk.TicketType in ('{0}')", Filters.TicketType);
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus) && Filters.TicketStatus != "-1" && Filters.TicketStatus != "null")
            {
                qstatus = string.Format("and tk.[Status] in ('{0}')", Filters.TicketStatus);
            }
            //if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket) && Filters.AssignedUserTicket != "-1" && Filters.AssignedUserTicket != "null")
            //{
            //    qassigned = string.Format("and tuser.UserId in ('{0}')", Filters.AssignedUserTicket);
            //}


            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }

            #region Filter Query
            if (!string.IsNullOrWhiteSpace(filter.id))
            {
                filterquery += string.Format("and tk.Id = '{0}'", filter.id);
            }
            if (!string.IsNullOrWhiteSpace(filter.cusid))
            {
                filterquery += string.Format("and cus.Id = '{0}'", filter.cusid);
            }
            if (!string.IsNullOrWhiteSpace(filter.user) && filter.user != "-1")
            {
                filterquery += string.Format("and cus.Soldby = '{0}'", filter.user);
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket) && Filters.AssignedUserTicket != "null")
            {
                filterquery += string.Format("and tuser.UserId in ('{0}')", Filters.AssignedUserTicket);
            }
            if (!string.IsNullOrWhiteSpace(filter.convertmindate) && !string.IsNullOrWhiteSpace(filter.convertmaxdate))
            {
                var datemin = Convert.ToDateTime(filter.convertmindate);
                var date = Convert.ToDateTime(filter.convertmaxdate);
                filterquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.convertmindate))
            {
                var date = Convert.ToDateTime(filter.convertmindate);
                filterquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.convertmaxdate))
            {
                var date = Convert.ToDateTime(filter.convertmaxdate);
                filterquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            if (!string.IsNullOrWhiteSpace(filter.createmindate) && !string.IsNullOrWhiteSpace(filter.createmaxdate))
            {
                var datemin = Convert.ToDateTime(filter.createmindate);
                var date = Convert.ToDateTime(filter.createmaxdate);
                filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.createmindate))
            {
                var date = Convert.ToDateTime(filter.createmindate);
                filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.createmaxdate))
            {
                var date = Convert.ToDateTime(filter.createmaxdate);
                filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            if (!string.IsNullOrWhiteSpace(filter.transfermindate) && !string.IsNullOrWhiteSpace(filter.transfermaxdate))
            {
                var datemin = Convert.ToDateTime(filter.transfermindate);
                var date = Convert.ToDateTime(filter.transfermaxdate);
                filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.transfermindate))
            {
                var date = Convert.ToDateTime(filter.transfermindate);
                filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.transfermaxdate))
            {
                var date = Convert.ToDateTime(filter.transfermaxdate);
                filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            #endregion

            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select tk.Id as TicketId,cus.Id as [CustomerId],tk.tickettype as TicketType, {7} as [Customer Name], cus.BusinessName as [Business Name], cus.DBA, lkleadsource.DisplayText as [Lead Source], lksalesloc.DisplayText as [Sales Location],cus.[Address] as [Address],
                              isnull(salesperson.FirstName + ' ' + salesperson.LastName, '') as [Sales Person],(select CAST(firstname + ' '+LastName + ', ' AS VARCHAR(200))  from Employee  where UserId in (select UserId from TicketUser tulist where tulist.TiketId = tk.TicketId and IsPrimary = 1) FOR XML PATH ('') ) as [Installer],
                               cast(isnull((select SUM(cae.TotalPrice) from CustomerAppointmentEquipment cae
											LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
											LEFT JOIN equipment eqp on eqp.EquipmentId=cae.EquipmentId
											where tk.CustomerId=cus.CustomerId
											and cae.IsService=1 and (cae.IsDefaultService is NULL or cae.IsDefaultService=0) 
											and (cae.IsCopied is NULL or cae.IsCopied=0) and eqp.IsArbEnabled=1),0) as decimal(10,2)) as [RMR]
                                        ,tk.Status as [Ticket Status],CONVERT(date, tk.CompletionDate) as [Appointment Date],CONVERT(date, cus.SalesDate) as [Sale Date],CONVERT(date, cus.InstallDate) as [InstallDate]
                                        ,iif(tk.ReferenceTicketId is not null and tk.ReferenceTicketId > 0, tk.ReferenceTicketId, '') as [Follow up From], iif(tk.RescheduleTicketId is not null and tk.RescheduleTicketId > 0, tk.RescheduleTicketId, '') as [Reschedule From]
                                        from Ticket tk
                                        LEFT JOIN Customer cus on cus.CustomerId=tk.CustomerId
                                        left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                        left join TicketUser tuser on tuser.TiketId = tk.TicketId and tuser.IsPrimary = 1
                                        left join Lookup lktype on  lktype.DataKey ='TicketType'  
                                        and lktype.DataValue = tk.TicketType

                                        left join CustomerAppointment CA on  CA.AppointmentId = tk.TicketId

                                        left join Lookup lkStartTime on lkStartTime.DataKey = 'Arrival'
                                        and lkStartTime.DataValue = CA.AppointmentStartTime

                                        left join Lookup lkEndTime on lkEndTime.DataKey = 'Arrival'
                                        and lkEndTime.DataValue = CA.AppointmentEndTime

                                        left join Lookup lkstatus on  lkstatus.DataKey ='TicketStatus'  
                                        and lkstatus.DataValue = tk.[Status]

                                        left join Lookup lkpriority on  lkpriority.DataKey ='TicketPriority'  
                                        and lkpriority.DataValue = tk.[Priority]
                                        
                                       
                                        left join Lookup lksalesloc on  lksalesloc.DataKey ='CommissionType'  
                                        and lksalesloc.DataValue = iif(cus.SalesLocation != '-1', cus.SalesLocation, null)
                                         
                                        left join Lookup lkleadsource on  lkleadsource.DataKey ='LeadSource'  
                                        and lkleadsource.DataValue = iif(cus.LeadSource != '-1', cus.LeadSource, null)

                                        left join Employee emp on tk.CreatedBy = emp.UserId
                                        left join Employee salesperson on salesperson.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
										left join Employee installperson on installperson.UserId = iif(cus.Installer != '' and cus.Installer is not null, convert(uniqueidentifier, cus.Installer), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
		                                where tk.CompanyId = '{0}'
                                        and ce.IsTestAccount != 1
                                        and iif(cus.FirstName +' '+cus.LastName is null, cus.BusinessName, cus.DBA) is not null
                                        and tk.CompletionDate between '{1}' and '{2}'
                                        {3}
                                        {4}
                                        {5}
                                        {6}
                                        {8}
										order by tk.Id desc
                            ";
                sdate = Start.Value.ToString("yyyy-MM-dd 00:00:00.000");
                edate = End.Value.ToString("yyyy-MM-dd 23:59:59.999");
            }
            else
            {
                sqlQuery = @"select tk.Id as TicketId,cus.Id as [CustomerId],tk.tickettype as TicketType, {7} as [Customer Name], cus.BusinessName as [Business Name], cus.DBA, lkleadsource.DisplayText as [Lead Source], lksalesloc.DisplayText as [Sales Location],
                             isnull(salesperson.FirstName + ' ' + salesperson.LastName, '') as [Sales Person],(select CAST(firstname + ' '+LastName + ', ' AS VARCHAR(200))  from Employee  where UserId in (select UserId from TicketUser tulist where tulist.TiketId = tk.TicketId and IsPrimary = 1) FOR XML PATH ('') ) as [Installer],
                               cast(isnull((select SUM(cae.TotalPrice) from CustomerAppointmentEquipment cae
											LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
											LEFT JOIN equipment eqp on eqp.EquipmentId=cae.EquipmentId
											where tk.CustomerId=cus.CustomerId
											and cae.IsService=1 and (cae.IsDefaultService is NULL or cae.IsDefaultService=0) 
											and (cae.IsCopied is NULL or cae.IsCopied=0) and eqp.IsArbEnabled=1),0) as decimal(10,2)) as [RMR]
                                        ,tk.Status as [Ticket Status],CONVERT(date, tk.CompletionDate) as [Appointment Date], CONVERT(date, cus.SalesDate) as [Sale Date],CONVERT(date, cus.InstallDate) as [InstallDate]
                                        ,iif(tk.ReferenceTicketId is not null and tk.ReferenceTicketId > 0, tk.ReferenceTicketId, '') as [Follow up From], iif(tk.RescheduleTicketId is not null and tk.RescheduleTicketId > 0, tk.RescheduleTicketId, '') as [Reschedule From]
                                        from Ticket tk
                                        LEFT JOIN Customer cus on cus.CustomerId=tk.CustomerId
                                        left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                        left join TicketUser tuser on tuser.TiketId = tk.TicketId and tuser.IsPrimary = 1
                                        left join Lookup lktype on  lktype.DataKey ='TicketType'  
                                        and lktype.DataValue = tk.TicketType

                                        left join CustomerAppointment CA on  CA.AppointmentId = tk.TicketId

                                        left join Lookup lkStartTime on lkStartTime.DataKey = 'Arrival'
                                        and lkStartTime.DataValue = CA.AppointmentStartTime

                                        left join Lookup lkEndTime on lkEndTime.DataKey = 'Arrival'
                                        and lkEndTime.DataValue = CA.AppointmentEndTime

                                        left join Lookup lkstatus on  lkstatus.DataKey ='TicketStatus'  
                                        and lkstatus.DataValue = tk.[Status]

                                        left join Lookup lkpriority on  lkpriority.DataKey ='TicketPriority'  
                                        and lkpriority.DataValue = tk.[Priority]
                                          
                                        left join Lookup lksalesloc on  lksalesloc.DataKey ='CommissionType'  
                                        and lksalesloc.DataValue = iif(cus.SalesLocation != '-1', cus.SalesLocation, null)

                                         left join Lookup lkleadsource on  lkleadsource.DataKey ='LeadSource'  
                                        and lkleadsource.DataValue = iif(cus.LeadSource != '-1', cus.LeadSource, null)

                                        left join Employee emp on tk.CreatedBy = emp.UserId
                                        left join Employee salesperson on salesperson.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
										left join Employee installperson on installperson.UserId = iif(cus.Installer != '' and cus.Installer is not null, convert(uniqueidentifier, cus.Installer), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
		                                where tk.CompanyId = '{0}'
                                        and ce.IsTestAccount != 1
                                        and iif(cus.FirstName +' '+cus.LastName is null, cus.BusinessName, cus.DBA) is not null
                                        {3}
                                        {4}
                                        {5}
                                        {6}
                                        {8}
										order by tk.Id desc
                            ";
            }
            try
            {
                sqlQuery = string.Format(sqlQuery, companyId, sdate, edate, qsearch, qtype, qstatus, qassigned, NameSql, filterquery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetInstallationTrackerTicketReportByCompany(Guid companyId, DateTime? Start, DateTime? End, TicketFilter Filters, FilterReportModel filter)
        {
            string sqlQuery = @"";
            string qsearch = "";
            string sdate = "";
            string edate = "";
            string qtype = "";
            string qstatus = "";
            string qassigned = "";
            string filterquery = "";

            if (Filters.TicketStatus == "null")
            {
                Filters.TicketStatus = Filters.TicketStatus.Substring(0, Filters.TicketStatus.Length - 4);

            }
            if (Filters.OwnerShip == "null")
            {
                Filters.OwnerShip = Filters.OwnerShip.Substring(0, Filters.OwnerShip.Length - 4);

            }
            var array = Filters.TicketStatus.Split(",");
            var arrayOwnership = Filters.OwnerShip.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }
            string queryOwnership = "";
            if (arrayOwnership != null)
            {
                foreach (var item in arrayOwnership)
                {
                    queryOwnership += string.Format("'{0}',", item);
                }
                queryOwnership = queryOwnership.Remove(queryOwnership.Length - 1, 1);
            }

            string filterquerysalesperson = "";
            string filterquerystatus = "";
            string filterqueryownership = "";


            if (Filters.salesperson == "null")
            {
                Filters.salesperson = Filters.salesperson.Substring(0, Filters.salesperson.Length - 4);

            }


            if (!string.IsNullOrWhiteSpace(Filters.salesperson))
            {
                filterquerysalesperson += string.Format("and sales.FirstName + ' ' + sales.LastName in ('{0}')", Filters.salesperson);
            }
            if (!string.IsNullOrWhiteSpace(query) && query.ToLower() != "null")
            {
                filterquerystatus += string.Format("and ticket.Status in ({0})", query);
            }
            if (!string.IsNullOrWhiteSpace(queryOwnership) && queryOwnership.ToLower() != "null")
            {
                filterqueryownership += string.Format("and cus.Ownership in ({0})", queryOwnership);
            }
            //if (!string.IsNullOrWhiteSpace(Filters.TicketType) && Filters.TicketType != "-1" && Filters.TicketType != "null")
            //{
            //    qtype = string.Format("and tk.TicketType in ('{0}')", Filters.TicketType);
            //}
            //if (!string.IsNullOrWhiteSpace(Filters.TicketStatus) && Filters.TicketStatus != "-1" && Filters.TicketStatus != "null")
            //{
            //    qstatus = string.Format("and tk.[Status] in ('{0}')", Filters.TicketStatus);
            //}
            //if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket) && Filters.AssignedUserTicket != "-1" && Filters.AssignedUserTicket != "null")
            //{
            //    qassigned = string.Format("and tuser.UserId in ('{0}')", Filters.AssignedUserTicket);
            //}


            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            if (!string.IsNullOrWhiteSpace(Filters.SearchText))
            {
                qsearch = string.Format("and {1} like '%{0}%' or ticket.[Status] like '%{0}%' or cus.Id like '%{0}%'", Filters.SearchText, NameSql);
            }
            //#region Filter Query
            //if (!string.IsNullOrWhiteSpace(filter.id))
            //{
            //    filterquery += string.Format("and tk.Id = '{0}'", filter.id);
            //}
            //if (!string.IsNullOrWhiteSpace(filter.cusid))
            //{
            //    filterquery += string.Format("and cus.Id = '{0}'", filter.cusid);
            //}
            //if (!string.IsNullOrWhiteSpace(filter.user) && filter.user != "-1")
            //{
            //    filterquery += string.Format("and cus.Soldby = '{0}'", filter.user);
            //}
            //if (!string.IsNullOrWhiteSpace(filter.convertmindate) && !string.IsNullOrWhiteSpace(filter.convertmaxdate))
            //{
            //    var datemin = Convert.ToDateTime(filter.convertmindate);
            //    var date = Convert.ToDateTime(filter.convertmaxdate);
            //    filterquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //else if (!string.IsNullOrWhiteSpace(filter.convertmindate))
            //{
            //    var date = Convert.ToDateTime(filter.convertmindate);
            //    filterquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //else if (!string.IsNullOrWhiteSpace(filter.convertmaxdate))
            //{
            //    var date = Convert.ToDateTime(filter.convertmaxdate);
            //    filterquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //if (!string.IsNullOrWhiteSpace(filter.createmindate) && !string.IsNullOrWhiteSpace(filter.createmaxdate))
            //{
            //    var datemin = Convert.ToDateTime(filter.createmindate);
            //    var date = Convert.ToDateTime(filter.createmaxdate);
            //    filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //else if (!string.IsNullOrWhiteSpace(filter.createmindate))
            //{
            //    var date = Convert.ToDateTime(filter.createmindate);
            //    filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //else if (!string.IsNullOrWhiteSpace(filter.createmaxdate))
            //{
            //    var date = Convert.ToDateTime(filter.createmaxdate);
            //    filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //if (!string.IsNullOrWhiteSpace(filter.transfermindate) && !string.IsNullOrWhiteSpace(filter.transfermaxdate))
            //{
            //    var datemin = Convert.ToDateTime(filter.transfermindate);
            //    var date = Convert.ToDateTime(filter.transfermaxdate);
            //    filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //else if (!string.IsNullOrWhiteSpace(filter.transfermindate))
            //{
            //    var date = Convert.ToDateTime(filter.transfermindate);
            //    filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //else if (!string.IsNullOrWhiteSpace(filter.transfermaxdate))
            //{
            //    var date = Convert.ToDateTime(filter.transfermaxdate);
            //    filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //#endregion

            if (Start.HasValue && End.HasValue)
            {
                //      sqlQuery = @"
                //                      select tk.Id as TicketId,tk.BookingId,cus.Id as [CustomerId], {4} as [Customer Name], cus.QA1,
                //                    isnull(salesperson.FirstName + ' ' + salesperson.LastName, '') as [Sales Person],(select CAST(firstname + ' '+LastName + ', ' AS VARCHAR(200))  from Employee  where UserId in (select UserId from TicketUser tulist where tulist.TiketId = tk.TicketId and IsPrimary = 1) FOR XML PATH ('') ) as [Technician],
                //                     tk.Status as [Install Status],CONVERT(date, tk.CompletionDate) as [Install Date],CONVERT(date, tk.CreatedDate) as [Tech Onsite Date],CONVERT(date, cus.CustomerSignatureDate) as [Agreement Signed Date], '-' as [Is Cell Registered], bc.AccountOnlineDate as [Account Online Date], '-' as [Who Placed Account Online]
                //                              ,'$'+isNull(Convert(nvarchar(10),(Convert(decimal(10,2),(select sum(TotalAmount) from Invoice 
                //    where bookingId = tk.BookingId and bookingId != '' 
                //        and (Status ='Paid')))),2),'0.00') as [Total Money Collected]
                //                               ,cus.QA2
                //                              from Ticket tk
                //                              LEFT JOIN Customer cus on cus.CustomerId=tk.CustomerId
                //                              left join TicketUser tuser on tuser.TiketId = tk.TicketId and tuser.IsPrimary = 1
                //                              --left join Lookup lktype on  lktype.DataKey ='TicketType'  
                //                              --and lktype.DataValue = tk.TicketType

                //                              --left join CustomerAppointment CA on  CA.AppointmentId = tk.TicketId
                //                                left join BrinksCustomer bc on bc.CustomerId=tk.CustomerId

                //                              --left join Lookup lkStartTime on lkStartTime.DataKey = 'Arrival'
                //                              --and lkStartTime.DataValue = CA.AppointmentStartTime

                //                              --left join Lookup lkEndTime on lkEndTime.DataKey = 'Arrival'
                //                              --and lkEndTime.DataValue = CA.AppointmentEndTime

                //                              --left join Lookup lkstatus on  lkstatus.DataKey ='TicketStatus'  
                //                              --and lkstatus.DataValue = tk.[Status]

                //                              --left join Lookup lkpriority on  lkpriority.DataKey ='TicketPriority'  
                //                              --and lkpriority.DataValue = tk.[Priority]

                //                              left join Employee emp on tk.CreatedBy = emp.UserId
                //                              left join Employee salesperson on salesperson.UserId = iif(cus.Soldby != '' and cus.Soldby is not null, convert(uniqueidentifier, cus.Soldby), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                //left join Employee installperson on installperson.UserId = iif(cus.Installer != '' and cus.Installer is not null, convert(uniqueidentifier, cus.Installer), convert(uniqueidentifier, '00000000-0000-0000-0000-000000000000'))
                //                        where tk.CompanyId = '{0}' and tk.TicketType='Installation'
                //                              and iif(cus.FirstName +' '+cus.LastName is null, cus.BusinessName, cus.DBA) is not null
                //                              and tk.CompletionDate between '{1}' and '{2}'
                //                              {3}
                //                                {5}
                //order by tk.Id desc
                //                 ";
                sqlQuery = @"
                                 select 
								cus.Id as [Customer Id],
                                        CASE 
	                                        WHEN (cus.DBA = '' or cus.DBA IS NULL) AND  (cus.BusinessName = '' or cus.BusinessName IS NULL) THEN cus.FirstName +' '+cus.LastName
	                                        WHEN (cus.DBA = '' or cus.DBA IS NULL)  THEN cus.BusinessName
	                                        ELSE  cus.DBA
                                        END as CustomerName,
										iif((select count(qa1.Id) from QA1Script qa1 where qa1.CustomerId=ticket.CustomerId and qa1.IsCompleted=1) > 0 , 'Yes' , 'No') as QA1,
										iif((select count(qa2.Id) from QA2Script qa2 where qa2.CustomerId=ticket.CustomerId and qa2.IsCompleted=1) > 0 , 'Yes' , 'No') as QA2
					
										 ,isnull(sales.FirstName + ' ' + sales.LastName, '') as [Sales Person]
                                        ,iif(lksource.DataValue='-1',' ',lksource.DisplayText) as [Lead Source]
                                      ,(select CAST(firstname + ' '+LastName + ', ' AS VARCHAR(200))  from Employee  where UserId in (select UserId from TicketUser tulist where tulist.TiketId = ticket.TicketId and IsPrimary = 1) FOR XML PATH ('') ) as Technician
                                 	, iif(lk.DataValue='-1',' ',lk.DisplayText) as Status
                                --    ,ticket.Id
								--	,ticket.CompletedDate
									,CONVERT(date, ticket.CompletionDate) as [Completion Date]
									,CONVERT(date, ticket.TechOnsiteDate) as [OnSite Date]
									,CONVERT(date,iif((select top(1) cs.CreatedDate from CustomerSignature cs where cs.CustomerId=ticket.CustomerId and cs.Type='Agreement File') !=null , (select top(1) cs.CreatedDate from CustomerSignature cs where cs.CustomerId=ticket.CustomerId and cs.Type='Agreement File'), cus.CustomerSignatureDate)) as [Signed Date]
									, iif(lkownership.DataValue='-1',' ',lkownership.DisplayText) as OwnerShip
                                    ,iif((cus.AlarmRefId != ' ' and cus.AlarmRefId is not null) or (cus.BrinksRefId != ' ' and cus.BrinksRefId is not null) or (cus.UCCRefId != ' ' and cus.UCCRefId is not null), 'Yes', 'No') as [Registered]
									 ,CONVERT(date, tpc.AccountOnlineDate) as [Acct. Online],
									 isnull(whoplaced.FirstName + ' ' + whoplaced.LastName, '') as [Placed By]
							    ,(select convert(numeric(10,2), sum(TotalAmount)) from Invoice 
										    where CustomerId = ticket.CustomerId 
										        and (Status ='Paid'))  as [Total Collection]
							--			,iif(cus.ContractTeam='-1',' ',cus.ContractTeam) as [Contract Term]
                                      --,(Select 
  
                                        -- (SELECT 
                                        -- CASE
                                        --   WHEN CHARINDEX('_', ppc.Type , 1) = 0 THEN ppc.Type 

                                        --  ELSE SUBSTRING(ppc.Type , 1, CHARINDEX('_', ppc.Type , 1) - 1)

                                        --   END)
                                        -- from PaymentInfoCustomer pic
                                        -- left join PaymentProfileCustomer ppc on ppc.PaymentInfoId=pic.PaymentInfoId
                                        --  where pic.CustomerId=ticket.CustomerId and pic.Payfor='MMR') as [Payment Method]
                                     --     ,format(cus.FinancedAmount,'N2') as [Finance Amount]
                               
                                  --      ,emp.FirstName + ' '+emp.LastName as CreatedByVal
                                      --  ,(select CAST(firstname + ' '+LastName + ', ' AS VARCHAR(200))  from Employee  where UserId in (select UserId from TicketUser tulist where tulist.TiketId = ticket.TicketId and IsPrimary = 1) FOR XML PATH ('') ) as AssignedTo

                                        
                                       
                                   
                                  
                                       
                               
                               
								
                                        from  ticket
                                        LEFT JOIN Customer cus on cus.CustomerId=ticket.CustomerId
                                        left join TicketUser tuser on tuser.TiketId = ticket.TicketId and tuser.IsPrimary = 1
                       
                                        left join ThirdPartyCustomer tpc on tpc.CustomerId=ticket.CustomerId
                                        left join Employee emp on emp.UserId = ticket.CreatedBy
                                        left join Employee whoplaced on whoplaced.UserId=tpc.CreatedBy
                                        left join LookUp lk on lk.DataValue = ticket.Status  and lk.DataKey='TicketStatus'
                                        left join LookUp lkownership on lkownership.DataValue = cus.Ownership and lkownership.DataKey='OwnerShip'
                                        left join Employee sales on CONVERT(nvarchar(50), sales.UserId) = cus.Soldby
                                        left join Employee installer on CONVERT(nvarchar(50), installer.UserId) = cus.Soldby
                                        left join Lookup lksource on lksource.DataValue = cus.LeadSource and lksource.DataKey = 'LeadSource'
		                                where 
                                       -- ticket.CompanyId = @CompanyId and
                                         iif(cus.FirstName +' '+cus.LastName is null, cus.BusinessName, cus.DBA) is not null
                                        and ticket.TicketType='Installation'
                                          
                                        {3}{5} {6} {7} and ticket.CompletionDate between '{1}' and '{2}'
                                        
                                        
                                        
                                          
                                        order by ticket.Id desc



";
                sdate = Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
                edate = End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
            }
            else
            {
                sqlQuery = @"select 
								cus.Id as [Customer Id],
                                        CASE 
	                                        WHEN (cus.DBA = '' or cus.DBA IS NULL) AND  (cus.BusinessName = '' or cus.BusinessName IS NULL) THEN cus.FirstName +' '+cus.LastName
	                                        WHEN (cus.DBA = '' or cus.DBA IS NULL)  THEN cus.BusinessName
	                                        ELSE  cus.DBA
                                        END as CustomerName,
										 iif((select count(qa1.Id) from QA1Script qa1 where qa1.CustomerId=ticket.CustomerId and qa1.IsCompleted=1) > 0 , 'Yes' , 'No') as QA1, 
										 iif((select count(qa2.Id) from QA2Script qa2 where qa2.CustomerId=ticket.CustomerId and qa2.IsCompleted=1) > 0 , 'Yes' , 'No') as QA2
					
										 ,isnull(sales.FirstName + ' ' + sales.LastName, '') as [Sales Person]
                                        ,iif(lksource.DataValue='-1',' ',lksource.DisplayText) as [Lead Source]
                                      ,(select CAST(firstname + ' '+LastName + ', ' AS VARCHAR(200))  from Employee  where UserId in (select UserId from TicketUser tulist where tulist.TiketId = ticket.TicketId and IsPrimary = 1) FOR XML PATH ('') ) as Technician
                                 	, iif(lk.DataValue='-1',' ',lk.DisplayText) as Status
                              --      ,ticket.Id
							--		,ticket.CompletedDate
									,CONVERT(date, ticket.CompletionDate) as [Completion Date]
									,CONVERT(date, ticket.TechOnsiteDate) as [OnSite Date]
									,CONVERT(date,iif((select top(1) cs.CreatedDate from CustomerSignature cs where cs.CustomerId=ticket.CustomerId and cs.Type='Agreement File') !=null , (select top(1) cs.CreatedDate from CustomerSignature cs where cs.CustomerId=ticket.CustomerId and cs.Type='Agreement File'), cus.CustomerSignatureDate)) as [Signed Date]
									, iif(lkownership.DataValue='-1',' ',lkownership.DisplayText) as OwnerShip
                                    ,iif((cus.AlarmRefId != ' ' and cus.AlarmRefId is not null) or (cus.BrinksRefId != ' ' and cus.BrinksRefId is not null) or (cus.UCCRefId != ' ' and cus.UCCRefId is not null), 'Yes', 'No') as [Registered]
									 ,CONVERT(date, tpc.AccountOnlineDate) as [Acct. Online],
									 isnull(whoplaced.FirstName + ' ' + whoplaced.LastName, '') as [Placed By]
							    ,(select convert(numeric(10,2), sum(TotalAmount)) from Invoice 
										    where CustomerId = ticket.CustomerId 
										        and (Status ='Paid'))  as [Total Collection]
                               --         ,iif(cus.ContractTeam='-1',' ',cus.ContractTeam) as [Contract Term]
                                        --,(Select 
  
                                        -- (SELECT 
                                        -- CASE
                                        --   WHEN CHARINDEX('_', ppc.Type , 1) = 0 THEN ppc.Type 

                                        --  ELSE SUBSTRING(ppc.Type , 1, CHARINDEX('_', ppc.Type , 1) - 1)

                                        --   END)
                                        -- from PaymentInfoCustomer pic
                                        -- left join PaymentProfileCustomer ppc on ppc.PaymentInfoId=pic.PaymentInfoId
                                        --  where pic.CustomerId=ticket.CustomerId and pic.Payfor='MMR') as [Payment Method]
                                    --      ,format(cus.FinancedAmount,'N2') as [Finance Amount]
										
                               
                                  --      ,emp.FirstName + ' '+emp.LastName as CreatedByVal
                                      --  ,(select CAST(firstname + ' '+LastName + ', ' AS VARCHAR(200))  from Employee  where UserId in (select UserId from TicketUser tulist where tulist.TiketId = ticket.TicketId and IsPrimary = 1) FOR XML PATH ('') ) as AssignedTo

                                        
                                       
                                   
                                  
                                       
                               
                               
								
                                        from  ticket
                                        LEFT JOIN Customer cus on cus.CustomerId=ticket.CustomerId
                                        left join TicketUser tuser on tuser.TiketId = ticket.TicketId and tuser.IsPrimary = 1
                       
                                        left join ThirdPartyCustomer tpc on tpc.CustomerId=ticket.CustomerId
                                        left join Employee emp on emp.UserId = ticket.CreatedBy
                                        left join Employee whoplaced on whoplaced.UserId=tpc.CreatedBy
                                        left join LookUp lk on lk.DataValue = ticket.Status  and lk.DataKey='TicketStatus'
                                        left join LookUp lkownership on lkownership.DataValue = cus.Ownership and lkownership.DataKey='OwnerShip'
                                        left join Employee sales on CONVERT(nvarchar(50), sales.UserId) = cus.Soldby
                                        left join Employee installer on CONVERT(nvarchar(50), installer.UserId) = cus.Soldby
                                        left join Lookup lksource on lksource.DataValue = cus.LeadSource and lksource.DataKey = 'LeadSource'
		                                where 
                                       -- ticket.CompanyId = @CompanyId and
                                         iif(cus.FirstName +' '+cus.LastName is null, cus.BusinessName, cus.DBA) is not null
                                        and ticket.TicketType='Installation'
                                          
                                        {3}{5}  {6} {7}
                                        
                                        
                                        
                                          
                                        order by ticket.Id desc
                            ";
            }
            try
            {
                sqlQuery = string.Format(sqlQuery, companyId, sdate, edate, qsearch, NameSql, filterquerysalesperson, filterquerystatus, filterqueryownership);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetTechnicianReportByCompany(Guid companyId, DateTime? Start, DateTime? End, EmployeeFilter Filters, FilterReportModel filter)
        {
            string sqlQuery = @"";
            string qsearch = "";
            string sdate = "";
            string edate = "";
            string qtype = "";
            string qstatus = "";
            string qassigned = "";
            string filterquery = "";
            string searchQuery = "";
            string DateQuery = "";
            string filterquerycity = "";
            string filterquerystate = "";

            if (Filters.State == "null")
            {
                Filters.State = Filters.State.Substring(0, Filters.State.Length - 4);

            }
            var array = Filters.State.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }
            if (Filters.City == "null")
            {
                Filters.City = Filters.City.Substring(0, Filters.City.Length - 4);

            }


            if (!string.IsNullOrWhiteSpace(Filters.City))
            {
                filterquerycity += string.Format("and lk.DataValue in ('{0}')", Filters.City);
            }
            if (!string.IsNullOrWhiteSpace(query))
            {
                filterquerystate += string.Format("and employee.State in ({0})", query);
            }
            //if (!string.IsNullOrWhiteSpace(Filters.TicketType) && Filters.TicketType != "-1" && Filters.TicketType != "null")
            //{
            //    qtype = string.Format("and tk.TicketType in ('{0}')", Filters.TicketType);
            //}
            //if (!string.IsNullOrWhiteSpace(Filters.TicketStatus) && Filters.TicketStatus != "-1" && Filters.TicketStatus != "null")
            //{
            //    qstatus = string.Format("and tk.[Status] in ('{0}')", Filters.TicketStatus);
            //}
            //if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket) && Filters.AssignedUserTicket != "-1" && Filters.AssignedUserTicket != "null")
            //{
            //    qassigned = string.Format("and tuser.UserId in ('{0}')", Filters.AssignedUserTicket);
            //}

            if (!string.IsNullOrWhiteSpace(Filters.SearchText))
            {
                searchQuery = @" and ( FirstName  + ' ' + LastName ) like @Filters.SearchText ";
            }
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            if (!string.IsNullOrWhiteSpace(Filters.SearchText))
            {
                qsearch = string.Format("and  ( employee.FirstName +' '+ employee.LastName) like '%{0}%'", Filters.SearchText, NameSql);
            }
            if ((Start.HasValue && End.HasValue) && (Start != new DateTime() && End != new DateTime()))
            {
                DateQuery = string.Format("and employee.CreatedDate between '{0}' and '{1}'", Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            //#region Filter Query
            //if (!string.IsNullOrWhiteSpace(filter.id))
            //{
            //    filterquery += string.Format("and tk.Id = '{0}'", filter.id);
            //}
            //if (!string.IsNullOrWhiteSpace(filter.cusid))
            //{
            //    filterquery += string.Format("and cus.Id = '{0}'", filter.cusid);
            //}
            //if (!string.IsNullOrWhiteSpace(filter.user) && filter.user != "-1")
            //{
            //    filterquery += string.Format("and cus.Soldby = '{0}'", filter.user);
            //}
            //if (!string.IsNullOrWhiteSpace(filter.convertmindate) && !string.IsNullOrWhiteSpace(filter.convertmaxdate))
            //{
            //    var datemin = Convert.ToDateTime(filter.convertmindate);
            //    var date = Convert.ToDateTime(filter.convertmaxdate);
            //    filterquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //else if (!string.IsNullOrWhiteSpace(filter.convertmindate))
            //{
            //    var date = Convert.ToDateTime(filter.convertmindate);
            //    filterquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //else if (!string.IsNullOrWhiteSpace(filter.convertmaxdate))
            //{
            //    var date = Convert.ToDateTime(filter.convertmaxdate);
            //    filterquery += string.Format("and tk.CompletionDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //if (!string.IsNullOrWhiteSpace(filter.createmindate) && !string.IsNullOrWhiteSpace(filter.createmaxdate))
            //{
            //    var datemin = Convert.ToDateTime(filter.createmindate);
            //    var date = Convert.ToDateTime(filter.createmaxdate);
            //    filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //else if (!string.IsNullOrWhiteSpace(filter.createmindate))
            //{
            //    var date = Convert.ToDateTime(filter.createmindate);
            //    filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //else if (!string.IsNullOrWhiteSpace(filter.createmaxdate))
            //{
            //    var date = Convert.ToDateTime(filter.createmaxdate);
            //    filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //if (!string.IsNullOrWhiteSpace(filter.transfermindate) && !string.IsNullOrWhiteSpace(filter.transfermaxdate))
            //{
            //    var datemin = Convert.ToDateTime(filter.transfermindate);
            //    var date = Convert.ToDateTime(filter.transfermaxdate);
            //    filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //else if (!string.IsNullOrWhiteSpace(filter.transfermindate))
            //{
            //    var date = Convert.ToDateTime(filter.transfermindate);
            //    filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //else if (!string.IsNullOrWhiteSpace(filter.transfermaxdate))
            //{
            //    var date = Convert.ToDateTime(filter.transfermaxdate);
            //    filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            //}
            //#endregion

            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"   select distinct employee.Id,
                               (employee.FirstName+' '+employee.LastName) as [Technician Name],
								--lk.DisplayText as [Technician City],
								--lkstate.DisplayText as [Technician State],
                                employee.City as [Technician City],
								employee.State as [Technician State],
                            (select COUNT(_TICKET.Id) from Ticket _TICKET left join TicketUser _ticketuser on _ticketuser.TiketId = _TICKET.TicketId where _TICKET.TicketType='Installation' and _TICKET.Status ='created' and _ticketuser.UserId = employee.UserId and _ticketuser.NotificationOnly = 0) as InstallationsScheduled,
						   (select COUNT(_TICKET.Id) from Ticket _TICKET left join TicketUser _ticketuser on _ticketuser.TiketId = _TICKET.TicketId where _TICKET.TicketType='Installation' and _TICKET.Status ='Completed' and _ticketuser.UserId = employee.UserId and _ticketuser.NotificationOnly = 0) as Installationscomplete,
						   (select COUNT(_TICKET.Id) from Ticket _TICKET left join TicketUser _ticketuser on _ticketuser.TiketId = _TICKET.TicketId where _TICKET.TicketType ='service' and _TICKET.Status ='created' and _ticketuser.UserId = employee.UserId and _ticketuser.NotificationOnly = 0) as servicesscheduled,
						   (select COUNT(_TICKET.Id) from Ticket _TICKET left join TicketUser _ticketuser on _ticketuser.TiketId = _TICKET.TicketId where _TICKET.TicketType ='service' and _TICKET.Status ='Completed' and _ticketuser.UserId = employee.UserId and _ticketuser.NotificationOnly = 0) as servicescomplete
                           
                               from Employee employee
                                left join UserPermission up 
	                                on up.UserId = employee.UserId
                                left join PermissionGroup pg 
	                                on pg.Id = up.PermissionGroupId
                                --left join TicketUser ticketuser on employee.UserId = ticketuser.UserId
								--left join Ticket ticket on ticketuser.TiketId = ticket.TicketId
                                left join LookUp lk on lk.DataValue = employee.City  and lk.DataKey='USACity' 
                                --left join LookUp lkstate on lkstate.DataValue = employee.State  and lkstate.DataKey='StateList' 
                                where employee.CompanyId = '{0}' and employee.IsCurrentEmployee=1 and pg.Id =5
                               {3}
                                {6}
                               {7}{8}
								order by employee.Id desc 
                            ";
                sdate = Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
                edate = End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
            }
            else
            {
                sqlQuery = @"    
                                select distinct employee.Id,
                               (employee.FirstName+' '+employee.LastName) as [Technician Name],
							    --lk.DisplayText as [Technician City],
								--lkstate.DisplayText as [Technician State],
                                employee.City as [Technician City],
								employee.State as [Technician State],
                                
                        (select COUNT(_TICKET.Id) from Ticket _TICKET left join TicketUser _ticketuser on _ticketuser.TiketId = _TICKET.TicketId where _TICKET.TicketType='Installation' and _TICKET.Status ='created' and _ticketuser.UserId = employee.UserId and _ticketuser.NotificationOnly = 0) as InstallationsScheduled,
						   (select COUNT(_TICKET.Id) from Ticket _TICKET left join TicketUser _ticketuser on _ticketuser.TiketId = _TICKET.TicketId where _TICKET.TicketType='Installation' and _TICKET.Status ='Completed' and _ticketuser.UserId = employee.UserId and _ticketuser.NotificationOnly = 0) as Installationscomplete,
						   (select COUNT(_TICKET.Id) from Ticket _TICKET left join TicketUser _ticketuser on _ticketuser.TiketId = _TICKET.TicketId where _TICKET.TicketType ='service' and _TICKET.Status ='created' and _ticketuser.UserId = employee.UserId and _ticketuser.NotificationOnly = 0) as servicesscheduled,
						   (select COUNT(_TICKET.Id) from Ticket _TICKET left join TicketUser _ticketuser on _ticketuser.TiketId = _TICKET.TicketId where _TICKET.TicketType ='service' and _TICKET.Status ='Completed' and _ticketuser.UserId = employee.UserId and _ticketuser.NotificationOnly = 0) as servicescomplete
                           

                               from Employee employee
                                left join UserPermission up 
	                                on up.UserId = employee.UserId
                                left join PermissionGroup pg 
	                                on pg.Id = up.PermissionGroupId
                                --left join TicketUser ticketuser on employee.UserId = ticketuser.UserId
								--left join Ticket ticket on ticketuser.TiketId = ticket.TicketId
                                left join LookUp lk on lk.DataValue = employee.City  and lk.DataKey='USACity' 
                                --left join LookUp lkstate on lkstate.DataValue = employee.State  and lkstate.DataKey='StateList' 

                                where employee.CompanyId = '{0}' and employee.IsCurrentEmployee=1 and pg.Id =5
                                   {3}
                                    {7}
                                    {8}
								order by employee.Id desc 
                            ";
            }
            try
            {
                sqlQuery = string.Format(sqlQuery, companyId, sdate, edate, qsearch, NameSql, searchQuery, DateQuery, filterquerycity, filterquerystate);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetCSRReportListByFilter(TicketFilter TicketFilters, FilterReportModel filter)
        {
            string sqlQuery = @"";
            string searchQuery = @"";
            string DateQuery = @"";

            if (!string.IsNullOrWhiteSpace(TicketFilters.SearchText))
            {
                searchQuery = string.Format(" and Name like '%{0}%'", TicketFilters.SearchText);
            }


            #region AppointmentDateQuery
            if (TicketFilters.StartDate != new DateTime() && TicketFilters.EndDate != new DateTime())
            {
                var StartDate = TicketFilters.StartDate.ToString("yyyy-MM-dd HH:mm:ss.fff");
                var EndDate = TicketFilters.EndDate.ToString("yyyy-MM-dd HH:mm:ss.fff");
                DateQuery = string.Format(" and CreatedDate between '{0}' and '{1}'", StartDate, EndDate);
            }
            #endregion


            sqlQuery = @"
                                 select * into #CsrData from (
                                select  emp.Id,emp.FirstName+' '+emp.LastName as Name,emp.CreatedDate,
                                (select Count(*) from customercancel where EmployeeId = emp.UserId) as [CancelledAccount],
                                (select Count(*) from customer where CreatedByUid = emp.UserId) as [CreatedAccount],
                                (select Count(*) from CustomerExtended where ContractSentBy = emp.UserId) as [ContractSent],
                                (select Count(*) from ThirdPartyCustomer where CreatedBy = emp.UserId) as [AccountPlaced],
                                (select Count(*) from Ticket where TicketType = 'Installation' and  CreatedBy = emp.UserId) as [InstallScheduled],
                                (select Count(*) from Ticket where TicketType = 'Service' and  CreatedBy = emp.UserId) as [ServicesScheduled]
                                from employee emp 
                                  ) d	

                                select * into #CsrDataFilter
								from #CsrData

								select 
								Name,CancelledAccount as [Cancelled Account],CreatedAccount as [Created Account],AccountPlaced as [Account Placed Online],ContractSent as [Contract Sent],InstallScheduled as [Install Scheduled],ServicesScheduled as [Services Scheduled] from #CsrDataFilter
								where Id>0 {0}{1}
                                 order by id desc

                                
								drop table #CsrData
								drop table #CsrDataFilter";

            try
            {
                sqlQuery = string.Format(sqlQuery,
                                       searchQuery,
                                       DateQuery

                                        );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetServiceTrackerReportListByFilter(TicketFilter TicketFilters, FilterReportModel filter)
        {
            string sqlQuery = @"";
            string searchQuery = @"";
            string DateQuery = @"";
            string filterqueryinstallertechnician = "";


            if (TicketFilters.salesperson == "null")
            {
                TicketFilters.salesperson = TicketFilters.salesperson.Substring(0, TicketFilters.salesperson.Length - 4);

            }

            if (!string.IsNullOrWhiteSpace(TicketFilters.salesperson))
            {
                filterqueryinstallertechnician += string.Format("and [Installer Technician] in ('{0}')", TicketFilters.salesperson);
            }
            if (!string.IsNullOrWhiteSpace(TicketFilters.SearchText))
            {
                searchQuery = string.Format(" and ([Customer Name] like '%{0}%' or TicketId like '%{0}%')", TicketFilters.SearchText);
            }


            #region AppointmentDateQuery
            if (TicketFilters.StartDate != new DateTime() && TicketFilters.EndDate != new DateTime())
            {
                var StartDate = TicketFilters.StartDate.ToString("yyyy-MM-dd HH:mm:ss.fff");
                var EndDate = TicketFilters.EndDate.ToString("yyyy-MM-dd HH:mm:ss.fff");
                DateQuery = string.Format(" and [ScheduledService Date] between '{0}' and '{1}'", StartDate, EndDate);
            }
            #endregion
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
                //NameSql = NameSql.Replace("cus.", "cu.");
            }

            sqlQuery = @"
                                 select * into #ServiceTrackerData from (
                                 select {2} as [Customer Name],tk.Id  as TicketId,(select top(1) emp.FirstName+' '+emp.LastName from customer cu
								left join ticket tk on tk.CustomerId = cu.CustomerId
								left join TicketUser tu on tu.TiketId = tk.TicketId and tk.TicketType = 'Installation' and tu.IsPrimary = 1
								left join Employee emp on emp.UserId = tu.UserId
								 where cu.CustomerId = cus.CustomerId and tu.Id > 0) as [Installer Technician],empService.firstname+''+empService.LastName as [Service Technician],
                                tk.TicketType as [Service Type],tk.Reason,convert(date,tk.CompletionDate) as [ScheduledService Date],convert(date,tk.TechOnsiteDate) as [Tech Onsite Date] from customer cus
                                left join ticket tk on tk.CustomerId = cus.customerId
                              
                                left join ticketuser tuService on tuService.TiketId = tk.TicketId and tk.TicketType != 'Installation' and tuService.IsPrimary = 1
                         
                                left join employee empService on empService.UserId = tuService.UserId
                                where tk.TicketId is not null 
                                  ) d	

                                select * into #ServiceTrackerDataFilter
								from #ServiceTrackerData

								select 
								[Customer Name],TicketId,[Installer Technician],[Service Technician],[Service Type],Reason,[ScheduledService Date],[Tech Onsite Date] from #ServiceTrackerDataFilter
								where TicketId>0 {0}{1} {3}
                                 order by TicketId desc

                                
								drop table #ServiceTrackerData
								drop table #ServiceTrackerDataFilter";

            try
            {
                sqlQuery = string.Format(sqlQuery,
                                       searchQuery,
                                       DateQuery,
                                       NameSql,
                                       filterqueryinstallertechnician

                                        );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetTaskReportListByFilter(TicketFilter TicketFilters, FilterReportModel filter, Guid comId, Guid empId, bool allTask)
        {
            string SearchQuery = "";
            string DateFilterQuery = "";
            string subquery = "";
            string subquery1 = "";
            string userQuery = "";
            if (allTask == false)
            {
                userQuery = string.Format("And emp1.UserId='{0}'", empId);
            }
            if (!string.IsNullOrWhiteSpace(TicketFilters.seletActive) && TicketFilters.seletActive.ToLower() != "null")
            {
                subquery = string.Format(" AND CN.IsShedule in ({0})", TicketFilters.seletActive);
            }
            if (!string.IsNullOrWhiteSpace(TicketFilters.salesperson) && TicketFilters.salesperson.ToLower() != "null" && TicketFilters.salesperson != "" && allTask == true)
            {
                subquery1 = string.Format(" AND emp1.UserId in ('{0}')", TicketFilters.salesperson);
            }
            if (!string.IsNullOrEmpty(TicketFilters.SearchText))
            {
                //SearchQuery = string.Format(" and CN.Notes like '%{0}%'", TicketFilters.SearchText);
                SearchQuery = " and CN.Notes like @SearchText";

            }
            if ((TicketFilters.StartDate != null && TicketFilters.StartDate != new DateTime()) && (TicketFilters.EndDate != null && TicketFilters.EndDate != new DateTime()))
            {
                var StartDateValue = TicketFilters.StartDate;
                var EndDateValue = TicketFilters.EndDate;
                DateFilterQuery = string.Format(" and CN.CreatedDate between '{0}' and '{1}'", StartDateValue, EndDateValue);
            }

            string sqlQuery = @"
                                Select distinct CN.Id as CID,CN.Notes as Task, format(CN.ReminderDate,'M/d/yy') as [Task On], format(CN.ReminderEndDate,'M/d/yy') as [Attn Required By],
                                format(CN.CreatedDate,'M/d/yy') as Created,format(CN.CreatedDate,'M/d/yy') as CreatedDate,
                                iif(CN.IsShedule is not null and CN.IsShedule = 1, 'Yes', 'No') as Status,
                                --lkNType.AlterDisplayText as Color,
                                --lkNType.DisplayText as NoteTypeValue,
                                --emp.FirstName + ' '+emp.LastName as empName,
                                (select CAST(FirstName + ' '+LastName + ', ' AS VARCHAR(200))  from Employee  where UserId in (select na.EmployeeId from NoteAssign na where CN.Id = na.NoteId) FOR XML PATH ('')) as [Assign to]
                                --into #ReminderData
                                from CustomerNote CN
                                left join Customer cus on cus.CustomerId=CN.CustomerId
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                LEFT JOIN Lookup lkNType on lkNType.DataValue=CN.NoteType and lkNType.DataKey='NoteType' and CN.NoteType!='-1'
                                left join Employee emp 
                                on emp.UserId = CN.CreatedByUid
                                left join NoteAssign na on na.NoteId = CN.Id
                                left join Employee emp1 
                                on emp1.UserId = na.EmployeeId
                                Where CN.CompanyId='{1}' and CN.IsFollowUp = 1 and ce.IsTestAccount != 1
                                {2} {3} {0} {4} {5}
                                order by CID desc";

            try
            {
                sqlQuery = string.Format(sqlQuery,
                                       subquery,
                                       comId,
                                       SearchQuery,
                                       DateFilterQuery,
                                       userQuery,
                                       subquery1
                                        );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(TicketFilters.SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(TicketFilters.SearchText.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllTicketReportByCompanyForGoBack(Guid companyId, DateTime? Start, DateTime? End, TicketFilter Filters, FilterReportModel filter)
        {
            string sqlQuery = @"";
            string qsearch = "";
            string sdate = "";
            string edate = "";
            string sdatemin = "";
            string edatemax = "";
            string qtype = "";
            string qstatus = "";
            string qassigned = "";
            string filterquery = "";
            string ReportAgeQuery = "";

            if (!string.IsNullOrWhiteSpace(Filters.SearchText))
            {
                qsearch = string.Format("and [Appointment Date] like '%{0}%' or [Ticket Status] like '%{0}%' or ticket.[TicketType] like '%{0}%' or ticket.Id like '%{0}%' or cus.Id like '%{0}%'", Filters.SearchText);
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketType) && Filters.TicketType != "-1" && Filters.TicketType != "null")
            {
                qtype = string.Format("and ticket.TicketType in ('{0}')", Filters.TicketType);
            }
            if (!string.IsNullOrWhiteSpace(Filters.TicketStatus) && Filters.TicketStatus != "-1" && Filters.TicketStatus != "null")
            {
                qstatus = string.Format("and [Ticket Status] in ('{0}')", Filters.TicketStatus);
            }
            //if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket) && Filters.AssignedUserTicket != "-1" && Filters.AssignedUserTicket != "null")
            //{
            //    qassigned = string.Format("and tuser.UserId in ('{0}')", Filters.AssignedUserTicket);
            //}
            string AppointmentDateQuery = "";
            #region AppointmentDateQuery
            if (Filters.StartDate != new DateTime() && Filters.EndDate != new DateTime())
            {
                var StartDate = Filters.StartDate.ToString("yyyy-MM-dd 00:00:00.000");
                var EndDate = Filters.EndDate.ToString("yyyy-MM-dd 23:59:59.000");
                AppointmentDateQuery = string.Format("and [Appointment Date] between '{0}' and '{1}'", StartDate, EndDate);
            }
            #endregion
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }

            #region Filter Query
            if (!string.IsNullOrWhiteSpace(filter.id))
            {
                filterquery += string.Format("and ticket.Id = '{0}'", filter.id);
            }
            if (!string.IsNullOrWhiteSpace(filter.cusid))
            {
                filterquery += string.Format("and cus.Id = '{0}'", filter.cusid);
            }
            if (!string.IsNullOrWhiteSpace(Filters.AssignedUserTicket) && Filters.AssignedUserTicket != "null")
            {
                filterquery += string.Format("and tuser.UserId in ('{0}')", Filters.AssignedUserTicket);
            }
            if (!string.IsNullOrWhiteSpace(filter.user) && filter.user != "-1")
            {
                filterquery += string.Format("and cus.Soldby = '{0}'", filter.user);
            }
            if (!string.IsNullOrWhiteSpace(filter.convertmindate) && !string.IsNullOrWhiteSpace(filter.convertmaxdate))
            {
                var datemin = Convert.ToDateTime(filter.convertmindate);
                var date = Convert.ToDateTime(filter.convertmaxdate);
                filterquery += string.Format("and [Appointment Date] between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.convertmindate))
            {
                var date = Convert.ToDateTime(filter.convertmindate);
                filterquery += string.Format("and [Appointment Date] between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.convertmaxdate))
            {
                var date = Convert.ToDateTime(filter.convertmaxdate);
                filterquery += string.Format("and [Appointment Date] between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            if (!string.IsNullOrWhiteSpace(filter.createmindate) && !string.IsNullOrWhiteSpace(filter.createmaxdate))
            {
                var datemin = Convert.ToDateTime(filter.createmindate);
                var date = Convert.ToDateTime(filter.createmaxdate);
                filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.createmindate))
            {
                var date = Convert.ToDateTime(filter.createmindate);
                filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.createmaxdate))
            {
                var date = Convert.ToDateTime(filter.createmaxdate);
                filterquery += string.Format("and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            if (!string.IsNullOrWhiteSpace(filter.transfermindate) && !string.IsNullOrWhiteSpace(filter.transfermaxdate))
            {
                var datemin = Convert.ToDateTime(filter.transfermindate);
                var date = Convert.ToDateTime(filter.transfermaxdate);
                filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.transfermindate))
            {
                var date = Convert.ToDateTime(filter.transfermindate);
                filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(filter.transfermaxdate))
            {
                var date = Convert.ToDateTime(filter.transfermaxdate);
                filterquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            #endregion

            if (Start.HasValue && End.HasValue)
            {
                sqlQuery = @"select ticket.Id,
                                ticket.BookingId, 
                                ticket.TicketId, 
                                ticket.CustomerId, 
                                ticket.TicketType, 
                                ticket.Status as [Ticket Status], 
                                ticket.[Priority], 
                                ticket.CreatedBy, 
                                ticket.CompanyId, 
			    LAG(CONVERT(date, ticket.CompletionDate)) OVER (ORDER BY ticket.Id) as PrevAppointmentDate,
				 iif(ticket.ReferenceTicketId is not null and ticket.ReferenceTicketId > 0, ticket.ReferenceTicketId, '') as [Follow up From],
				  iif(ticket.RescheduleTicketId is not null and ticket.RescheduleTicketId > 0, ticket.RescheduleTicketId, '') as [Reschedule From],
							CONVERT(date, ticket.CompletionDate) as [Appointment Date],
								cus.Id as cusid,
						--		LAG(lktype.DisplayText) OVER (ORDER BY ticket.Id) as PrevTicketType,
                                ticket.CreatedDate into #TicketIdData from Ticket ticket
		                        left join TicketUser tuser on tuser.TiketId = ticket.TicketId

                                left join Customer cus on cus.CustomerId = ticket.CustomerId
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                where ticket.CompanyId =  '{0}' and ce.IsTestAccount != 1
	and	 (select count(tik.Id) from ticket tik where convert(date, tik.CreatedDate) between convert(date, dateadd(day, -90 ,getdate() + 1)) and convert(date, getdate() + 1) and tik.CustomerId=cus.CustomerId) > 1
                      and ticket.CompletionDate between '{10}' and '{11}'
	--and	 (select count(tik.Id) from ticket tik where convert(date, tik.CreatedDate) between '{1}' and '{2}' and tik.CustomerId=cus.CustomerId) > 1

                                       and convert(date, ticket.CreatedDate) between convert(date, dateadd(day, -90 ,getdate() + 1)) and convert(date, getdate() + 1)
                                select  ticket.*,
                                        CASE 
	                                        WHEN (cus.DBA = '' or cus.DBA IS NULL) AND  (cus.BusinessName = '' or cus.BusinessName IS NULL) THEN cus.FirstName +' '+cus.LastName
	                                        WHEN (cus.DBA = '' or cus.DBA IS NULL)  THEN cus.BusinessName
	                                        ELSE  cus.DBA
                                        END as CustomerName,
                             CONVERT(date, cus.SalesDate) as [Sale Date]										
                                ,convert(date,cus.InstallDate) as [InstallDate]
                                        ,(select count(id) from TicketFile where TicketId = ticket.TicketId) as AttachmentsCount
                                        ,(select count(id) from TicketFile where TicketId = ticket.TicketId)
		                                        + (select count(id) from TicketReply where TicketId = ticket.TicketId) as RepliesCount
                                        ,lktype.DisplayText as TicketTypeVal
                                        ,lkstatus.DisplayText as StatusVal
                                        ,lkpriority.DisplayText as PriorityVal
                                        ,emp.FirstName + ' '+emp.LastName as CreatedByVal,
							   LAG(emp.FirstName + ' '+emp.LastName) OVER (ORDER BY ticket.Id) as PrevTechnician

                                        ,(select CAST(firstname + ' '+LastName + ' ' AS VARCHAR(200))  from Employee  where UserId in (select UserId from TicketUser tulist where tulist.TiketId = ticket.TicketId and IsPrimary = 1) FOR XML PATH ('') ) as Technician

                                        ,cus.Id as CusIdInt
                                        ,(select sum(TotalAmount) from Invoice 
										    where bookingId = ticket.BookingId and bookingId != '' 
										        and (Status = 'Open' or Status = 'Partial' or Status ='Paid')) as BookingInvoiceAmount
                                        ,isnull(cus.BusinessName, '') as CusBusinessName,
                                        isnull(sales.FirstName + ' ' + sales.LastName, '') as CusSalesPerson,
                                        isnull(installer.FirstName + ' ' + installer.LastName, '') as CusInstaller,
                                        isnull((select SUM(cae.TotalPrice) from CustomerAppointmentEquipment cae
											LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
											LEFT JOIN equipment eqp on eqp.EquipmentId=cae.EquipmentId
											where tk.CustomerId=cus.CustomerId
											and cae.IsService=1 and (cae.IsDefaultService is NULL or cae.IsDefaultService=0) 
											and (cae.IsCopied is NULL or cae.IsCopied=0) and eqp.IsArbEnabled=1),0) as RMRAmount,
                                          lksalesloc.DisplayText as CusSalesLoc
										,lkleadsource.DisplayText as LeadSource 
										into #TicketData
                                        from #TicketIdData ticket
                                        LEFT JOIN Customer cus on cus.CustomerId=ticket.CustomerId
                                        left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                        left join TicketUser tuser on tuser.TiketId = ticket.TicketId and tuser.IsPrimary = 1
                                        left join Lookup lktype on  lktype.DataKey ='TicketType'  
                                        and lktype.DataValue = ticket.TicketType

                                        left join CustomerAppointment CA on  CA.AppointmentId = ticket.TicketId

                                        left join Lookup lkStartTime on lkStartTime.DataKey = 'Arrival'
                                        and lkStartTime.DataValue = CA.AppointmentStartTime

                                        left join Lookup lkEndTime on lkEndTime.DataKey = 'Arrival'
                                        and lkEndTime.DataValue = CA.AppointmentEndTime

                                        left join Lookup lkstatus on  lkstatus.DataKey ='TicketStatus'  
                                        and lkstatus.DataValue = ticket.[Ticket Status]

                                        left join Lookup lkpriority on  lkpriority.DataKey ='TicketPriority'  
                                        and lkpriority.DataValue = ticket.[Priority]

                                        left join Lookup lksalesloc on  lksalesloc.DataKey ='CommissionType'  
                                        and lksalesloc.DataValue = iif(cus.SalesLocation != '-1', cus.SalesLocation, null)

										left join Lookup lkleadsource on  lkleadsource.DataKey ='LeadSource'  
                                        and lkleadsource.DataValue = iif(cus.LeadSource != '-1', cus.LeadSource, null)

                                        left join Employee emp on emp.UserId = ticket.CreatedBy
                                        left join Employee sales on CONVERT(nvarchar(50), sales.UserId) = cus.Soldby
                                        left join Employee installer on CONVERT(nvarchar(50), installer.UserId) = cus.Soldby
                                            where ticket.CompanyId = '{0}' and ce.IsTestAccount != 1
                               and iif(cus.FirstName +' '+cus.LastName is null, cus.BusinessName, cus.DBA) is not null
                                        and convert(date, ticket.CreatedDate) between convert(date, dateadd(day, -90 ,getdate() + 1)) and convert(date, getdate() + 1)
                                        {9}
                                        {3}
                                        {4}
                                        {5}
                                        {6}
                                        {8}
                             --       and [Appointment Date] between '{1}' and '{2}'

                                        order by ticket.Id desc


                       (select Id [Ticket Id],CusIdInt [Customer Id],CustomerName,TicketType, PrevAppointmentDate,[Appointment Date],
--PrevTicketType,
										 PrevTechnician, [Ticket Status],Technician, [Sale Date],
										[InstallDate], [Follow up From], [Reschedule From] from #TicketData
                                        ) order by #TicketData.TicketId desc	  								
										
										drop table #TicketIdData
                              DROP TABLE #TicketData
                            ";
                sdate = Start.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
                edate = End.Value.ToString("yyyy-MM-dd HH:mm:ss.fff");
                sdatemin = Start.Value.ToString("yyyy-MM-dd 00:00:00.000");
                edatemax = End.Value.ToString("yyyy-MM-dd 23:59:59.000");
            }
            else
            {
                sqlQuery = @"
                         select ticket.Id,
                                ticket.BookingId, 
                                ticket.TicketId, 
                                ticket.CustomerId, 
                                ticket.TicketType, 
                                ticket.Status as [Ticket Status], 
                                ticket.[Priority], 
                                ticket.CreatedBy, 
                                ticket.CompanyId, 
			    LAG(CONVERT(date, ticket.CompletionDate)) OVER (ORDER BY ticket.Id) as PrevAppointmentDate,
				 iif(ticket.ReferenceTicketId is not null and ticket.ReferenceTicketId > 0, ticket.ReferenceTicketId, '') as [Follow up From],
				  iif(ticket.RescheduleTicketId is not null and ticket.RescheduleTicketId > 0, ticket.RescheduleTicketId, '') as [Reschedule From],
							CONVERT(date, ticket.CompletionDate) as [Appointment Date],
								cus.Id as cusid,
						--		LAG(lktype.DisplayText) OVER (ORDER BY ticket.Id) as PrevTicketType,
                                ticket.CreatedDate into #TicketIdData from Ticket ticket
		                        left join TicketUser tuser on tuser.TiketId = ticket.TicketId

                                left join Customer cus on cus.CustomerId = ticket.CustomerId
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                where ticket.CompanyId =  '{0}' and ce.IsTestAccount != 1
	and	 (select count(tik.Id) from ticket tik where convert(date, tik.CreatedDate) between convert(date, dateadd(day, -90 ,getdate() + 1)) and convert(date, getdate() + 1) and tik.CustomerId=cus.CustomerId) > 1
                   --    and ticket.CompletionDate between '' and ''
	--and	 (select count(tik.Id) from ticket tik where convert(date, tik.CreatedDate) between '' and '' and tik.CustomerId=cus.CustomerId) > 1

                                       and convert(date, ticket.CreatedDate) between convert(date, dateadd(day, -90 ,getdate() + 1)) and convert(date, getdate() + 1)
                             --           and convert(date, tk.CreatedDate) between convert(date, dateadd(day, -90 ,getdate() + 1)) and convert(date, getdate() + 1)
                                select  ticket.*,
                                        CASE 
	                                        WHEN (cus.DBA = '' or cus.DBA IS NULL) AND  (cus.BusinessName = '' or cus.BusinessName IS NULL) THEN cus.FirstName +' '+cus.LastName
	                                        WHEN (cus.DBA = '' or cus.DBA IS NULL)  THEN cus.BusinessName
	                                        ELSE  cus.DBA
                                        END as CustomerName,
                             CONVERT(date, cus.SalesDate) as [Sale Date]										
                                ,convert(date,cus.InstallDate) as [InstallDate]
                                        ,(select count(id) from TicketFile where TicketId = ticket.TicketId) as AttachmentsCount
                                        ,(select count(id) from TicketFile where TicketId = ticket.TicketId)
		                                        + (select count(id) from TicketReply where TicketId = ticket.TicketId) as RepliesCount
                                        ,lktype.DisplayText as TicketTypeVal
                                        ,lkstatus.DisplayText as StatusVal
                                        ,lkpriority.DisplayText as PriorityVal
                                        ,emp.FirstName + ' '+emp.LastName as CreatedByVal,
							   LAG(emp.FirstName + ' '+emp.LastName) OVER (ORDER BY ticket.Id) as PrevTechnician

                                        ,(select CAST(firstname + ' '+LastName + ' ' AS VARCHAR(200))  from Employee  where UserId in (select UserId from TicketUser tulist where tulist.TiketId = ticket.TicketId and IsPrimary = 1) FOR XML PATH ('') ) as Technician

                                        ,cus.Id as CusIdInt
                                        ,(select sum(TotalAmount) from Invoice 
										    where bookingId = ticket.BookingId and bookingId != '' 
										        and (Status = 'Open' or Status = 'Partial' or Status ='Paid')) as BookingInvoiceAmount
                                        ,isnull(cus.BusinessName, '') as CusBusinessName,
                                        isnull(sales.FirstName + ' ' + sales.LastName, '') as CusSalesPerson,
                                        isnull(installer.FirstName + ' ' + installer.LastName, '') as CusInstaller,
                                        isnull((select SUM(cae.TotalPrice) from CustomerAppointmentEquipment cae
											LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
											LEFT JOIN equipment eqp on eqp.EquipmentId=cae.EquipmentId
											where tk.CustomerId=cus.CustomerId
											and cae.IsService=1 and (cae.IsDefaultService is NULL or cae.IsDefaultService=0) 
											and (cae.IsCopied is NULL or cae.IsCopied=0) and eqp.IsArbEnabled=1),0) as RMRAmount,
                                          lksalesloc.DisplayText as CusSalesLoc
										,lkleadsource.DisplayText as LeadSource 
										into #TicketData
                                        from #TicketIdData ticket
                                        LEFT JOIN Customer cus on cus.CustomerId=ticket.CustomerId
                                        left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                        left join TicketUser tuser on tuser.TiketId = ticket.TicketId and tuser.IsPrimary = 1
                                        left join Lookup lktype on  lktype.DataKey ='TicketType'  
                                        and lktype.DataValue = ticket.TicketType

                                        left join CustomerAppointment CA on  CA.AppointmentId = ticket.TicketId

                                        left join Lookup lkStartTime on lkStartTime.DataKey = 'Arrival'
                                        and lkStartTime.DataValue = CA.AppointmentStartTime

                                        left join Lookup lkEndTime on lkEndTime.DataKey = 'Arrival'
                                        and lkEndTime.DataValue = CA.AppointmentEndTime

                                        left join Lookup lkstatus on  lkstatus.DataKey ='TicketStatus'  
                                        and lkstatus.DataValue = ticket.[Ticket Status]

                                        left join Lookup lkpriority on  lkpriority.DataKey ='TicketPriority'  
                                        and lkpriority.DataValue = ticket.[Priority]

                                        left join Lookup lksalesloc on  lksalesloc.DataKey ='CommissionType'  
                                        and lksalesloc.DataValue = iif(cus.SalesLocation != '-1', cus.SalesLocation, null)

										left join Lookup lkleadsource on  lkleadsource.DataKey ='LeadSource'  
                                        and lkleadsource.DataValue = iif(cus.LeadSource != '-1', cus.LeadSource, null)

                                        left join Employee emp on emp.UserId = ticket.CreatedBy
                                        left join Employee sales on CONVERT(nvarchar(50), sales.UserId) = cus.Soldby
                                        left join Employee installer on CONVERT(nvarchar(50), installer.UserId) = cus.Soldby
                                            where ticket.CompanyId = '{0}' and ce.IsTestAccount != 1
                               and iif(cus.FirstName +' '+cus.LastName is null, cus.BusinessName, cus.DBA) is not null
                                        and convert(date, ticket.CreatedDate) between convert(date, dateadd(day, -90 ,getdate() + 1)) and convert(date, getdate() + 1)
                                        {9}
                                        {3}
                                        {4}
                                        {5}
                                        {6}
                                        {8}
                                        order by ticket.Id desc


                       (select Id [Ticket Id],CusIdInt [CustomerId],CustomerName,TicketType, PrevAppointmentDate,[Appointment Date],
--PrevTicketType,
										 PrevTechnician, [Ticket Status],Technician, [Sale Date],
										[InstallDate], [Follow up From], [Reschedule From] from #TicketData
                                        ) order by #TicketData.TicketId desc	  								
										
										drop table #TicketIdData
                              DROP TABLE #TicketData



                            ";
            }
            try
            {
                sqlQuery = string.Format(sqlQuery, companyId, sdate, edate, qsearch, qtype, qstatus, qassigned, NameSql, filterquery, AppointmentDateQuery, sdatemin, edatemax);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        #endregion

        public bool DeleteCustomerAndCustomerCompanyByIdAndCompanyId(Guid CustomerId, Guid CompanyId)
        {
            string SqlQuery = @"
                            delete from customer where CustomerId ='{0}'

                            delete from CustomerCompany where CustomerId = '{0}' and CompanyId = '{1}' 
                ";
            SqlQuery = string.Format(SqlQuery, CustomerId, CompanyId);
            try
            {
                using (SqlCommand cmd = GetSQLCommand(SqlQuery))
                {

                    ExecuteCommand(cmd);
                }
            }
            catch (Exception ex)
            {
                return false;
            }
            return true;
        }

        public DataTable GetAllCustomersByCompany(Guid companyId)
        {
            string sqlQuery = @"select cu.* from Customer cu
                                left join CustomerCompany cc on 
                                cu.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'
                                where cc.IsLead=0
                                ";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyId);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        public DataTable GetAllCustomerByCompany(Guid companyId, List<string> status)
        {
            string sqlQuery = "";
            string statusQuery = "";

            if (status.Contains("Active"))
            {
                statusQuery = " and cu.IsActive = 1";
            }
            else if (status.Contains("Cancel"))
            {
                statusQuery = " and cu.IsActive = 0";
            }
            else if (status.Count == 2)
            {
                statusQuery = "";
            }

            sqlQuery = @"select cu.* from Customer cu
                            left join CustomerCompany cc on 
                            cu.CustomerId = cc.CustomerId
                            and cc.CompanyId = '{0}'
                            where cc.IsLead=0
                            {1}
                            ";

            try
            {
                sqlQuery = string.Format(sqlQuery, companyId, statusQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        public DataTable GetAllCustomerByIdAndCompanyId(Guid companyId, int id)
        {
            string sqlQuery = @"select cu.Id from Customer cu 
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                and cc.CompanyId = '{0}'
                                and cu.Id = {1}
                                where cu.Id = {1}
                                --and cc.IsLead = 0
                                ";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyId, id);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        public DataTable GetAllCustomerByIdAndCompanyId(Guid companyId, Guid CustomerId)
        {
            string sqlQuery = @"select * from Customer cu 
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                where cc.CompanyId = '{0}'
                                and cu.CustomerId = '{1}'
                                --where cc.IsLead = 0
                                ";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyId, CustomerId);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        public DataTable GetAllCustomerByIdAndCompanyIdSalesPartial(Guid companyId, Guid id)
        {
            string sqlQuery = @"select * from Customer cu 
                                left join CustomerCompany cc
                                on cu.CustomerId = cc.CustomerId
                                where cc.CompanyId = '{0}'
                                AND cu.CustomerId = '{1}'
                                AND cc.IsLead = 0
                                ";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyId, id);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        public DataTable GetCustomerReport(int[] IdList, string[] Colmuns, Guid CompanyId, string NumberPrefix, string acorin, Guid UserId, DateTime Start, DateTime End, List<Partner> Partners, bool isPermit, string EmployeeRole, string ReportFor, CustomerLiteFilter filter)
        {
            DataTable dt = new DataTable();
            bool CallingTime = false;
            string InIdListFilter = "";
            string UserListFilter = "";
            string IfCallingTime = "--and lk.DataKey='TimeToCall'";
            string IfCallingTime2 = @"left join [Lookup] lk on 

                                cu.CallingTime = lk.DataValue";
            if (IdList != null && IdList.Length > 0)
            {
                string Ids = "";
                foreach (int id in IdList)
                {
                    Ids += id + ",";
                }
                Ids += "0";
                InIdListFilter = "And cu.Id in(" + Ids + ")";
            }
            #region Filter work
            string filtertext = "";
            string filterColumntext = "";
            string filterByUserName = "";

            string filterByLeadSource = "";
            string filterByPaymentMethod = "";
            string filterByDate = "";
            string filterForQA = "";
            string filterByIsActive = "";
            string filterbyUser = "";
            string orderbysql = "";
            string orderbysql1 = "";
            string sortingorderbysql = "";
            string TotalRMRFilter = "";
            string filterbydaterange = "";
            string BranchQuery = "";
            string filterPackageQuery = "";
            string FilterSubquery = "";
            if (!string.IsNullOrWhiteSpace(filter.SettingOrderBy) && filter.SettingOrderBy != "undefined")
            {
                if (filter.SettingOrderBy == "Id desc")
                {
                    orderbysql = "order by #cd.Id desc";
                    orderbysql1 = "order by Id desc";
                }
                else if (filter.SettingOrderBy == "Id asc")
                {
                    orderbysql = "order by #cd.Id asc";
                    orderbysql1 = "order by Id asc";
                }
                else if (filter.SettingOrderBy == "DisplayName desc")
                {
                    orderbysql = "order by #cd.DisplayName desc";
                    orderbysql1 = "order by DisplayName desc";
                }
                else if (filter.SettingOrderBy == "DisplayName asc")
                {
                    orderbysql = "order by #cd.DisplayName asc";
                    orderbysql1 = "order by DisplayName asc";
                }
                else if (filter.SettingOrderBy == "JoinDate desc")
                {
                    //orderbysql = "order by #cd.JoinDate desc";
                    sortingorderbysql = "order by JoinDate desc";
                }
                else if (filter.SettingOrderBy == "JoinDate asc")
                {
                    //orderbysql = "order by #cd.JoinDate asc";
                    sortingorderbysql = "order by JoinDate asc";
                }
                else if (filter.SettingOrderBy == "City desc")
                {
                    orderbysql = "order by #cd.City desc";
                    orderbysql1 = "order by City desc";
                }
                else if (filter.SettingOrderBy == "City asc")
                {
                    orderbysql = "order by #cd.City asc";
                    orderbysql1 = "order by City asc";
                }
                else if (filter.SettingOrderBy == "descending/customer" || filter.SettingOrderBy == "descending/name")
                {
                    orderbysql = "order by #cd.DisplayName desc";
                    orderbysql1 = "order by DisplayName desc";
                }
                else if (filter.SettingOrderBy == "ascending/customer" || filter.SettingOrderBy == "ascending/name")
                {
                    orderbysql = "order by #cd.DisplayName asc";
                    orderbysql1 = "order by DisplayName asc";
                }
                else if (filter.SettingOrderBy == "descending/status")
                {
                    sortingorderbysql = "order by MonthlyMonitoringFee desc, InstallDate desc, SubscriptionStatus desc ";
                }
                else if (filter.SettingOrderBy == "ascending/status")
                {
                    sortingorderbysql = "order by MonthlyMonitoringFee asc, InstallDate asc, SubscriptionStatus asc";
                }
                else if (filter.SettingOrderBy == "descending/activity" || filter.SettingOrderBy == "descending/created on")
                {
                    sortingorderbysql = "order by JoinDate desc";
                }
                else if (filter.SettingOrderBy == "ascending/activity" || filter.SettingOrderBy == "ascending/created on")
                {
                    sortingorderbysql = "order by JoinDate asc";
                }
                else if (filter.SettingOrderBy == "descending/location")
                {
                    sortingorderbysql = "order by City desc, State desc, Street desc, PrimaryPhone desc";
                }
                else if (filter.SettingOrderBy == "ascending/location")
                {
                    sortingorderbysql = "order by City asc, State asc, Street asc, PrimaryPhone asc";
                }
                else if (filter.SettingOrderBy == "descending/account")
                {
                    sortingorderbysql = "order by PaymentMethod desc";
                }
                else if (filter.SettingOrderBy == "ascending/account")
                {
                    sortingorderbysql = "order by PaymentMethod asc";
                }
                else if (filter.SettingOrderBy == "descending/contact")
                {
                    sortingorderbysql = "order by PreferredContactMethod desc, ContactedPerviously desc, PrimaryPhone desc, CellNo desc, City desc, State desc, Street desc";
                }
                else if (filter.SettingOrderBy == "ascending/contact")
                {
                    sortingorderbysql = "order by PreferredContactMethod asc, ContactedPerviously asc, PrimaryPhone asc, CellNo asc, City asc, State asc, Street asc";
                }
                else if (filter.SettingOrderBy == "descending/billing")
                {
                    sortingorderbysql = "order by FirstBilling desc, BillAmount desc, BillDay desc, BillCycle desc, BillNotes desc, BillOutStanding desc, BillTax desc";
                }
                else if (filter.SettingOrderBy == "ascending/billing")
                {
                    sortingorderbysql = "order by FirstBilling asc, BillAmount asc, BillDay asc, BillCycle asc, BillNotes asc, BillOutStanding asc, BillTax asc";
                }
                else if (filter.SettingOrderBy == "descending/service date")
                {
                    sortingorderbysql = "order by ServiceDate desc";
                }
                else if (filter.SettingOrderBy == "ascending/service date")
                {
                    sortingorderbysql = "order by ServiceDate asc";
                }
                else if (filter.SettingOrderBy == "descending/active")
                {
                    sortingorderbysql = "order by IsActive desc";
                }
                else if (filter.SettingOrderBy == "ascending/active")
                {
                    sortingorderbysql = "order by IsActive asc";
                }
                else if (filter.SettingOrderBy == "descending/contract term")
                {
                    sortingorderbysql = "order by ContractTeam desc";
                }
                else if (filter.SettingOrderBy == "ascending/contract term")
                {
                    sortingorderbysql = "order by ContractTeam asc";
                }
                else if (filter.SettingOrderBy == "descending/phone no")
                {
                    sortingorderbysql = "order by PrimaryPhone desc, CellNo desc, SecondaryPhone desc";
                }
                else if (filter.SettingOrderBy == "ascending/phone no")
                {
                    sortingorderbysql = "order by PrimaryPhone asc, CellNo asc, SecondaryPhone asc";
                }
                else if (filter.SettingOrderBy == "descending/lead source")
                {
                    sortingorderbysql = "order by LeadSource desc, LeadSourceType desc";
                }
                else if (filter.SettingOrderBy == "ascending/lead source")
                {
                    sortingorderbysql = "order by LeadSource asc, LeadSourceType asc";
                }
                else
                {
                    orderbysql = "order by #cd.Id desc";
                    orderbysql1 = "order by Id desc";
                }
            }

            if (!string.IsNullOrWhiteSpace(filter.SearchText) && filter.SearchText != "undefined")
            {
                string strRegex = "^\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}$";
                //US number//eg (832) 972-5096
                Regex re = new Regex(strRegex);

                if (filter.SearchText.Length == 14 && re.IsMatch(filter.SearchText))
                {
                    filter.SearchText = filter.SearchText.ReplaceSpecialChar("");
                }
                //filterColumntext = string.Format(" AND (CONTAINS(cus.SearchText, '\"*{0}*\"') OR CONTAINS(cus.SearchText, '\"{0}\"'))", Uri.UnescapeDataString(filter.SearchText.Trim()));
                filterColumntext = string.Format(" AND CHARINDEX(@SearchText,cu.SearchText) > 0", Uri.UnescapeDataString(filter.SearchText.Trim()));
                filtertext = " --AND FilterText like @SearchText ";
            }

            if (filter.SalesLocationText == "null")
            {
                filter.SalesLocationText = filter.SalesLocationText.Substring(0, filter.SalesLocationText.Length - 4);

            }
            var array = filter.SalesLocationText.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }
            string Filtersalesloc = "";
            if (!string.IsNullOrWhiteSpace(query))
            {
                Filtersalesloc += string.Format("and cu.saleslocation in ({0})", query);
            }


            if (filter.LeadSourceText == "null")
            {
                filter.LeadSourceText = filter.LeadSourceText.Substring(0, filter.LeadSourceText.Length - 4);
            }
            var arraySource = filter.LeadSourceText.Split(",");
            string querySource = "";
            if (arraySource != null)
            {
                foreach (var item in arraySource)
                {
                    querySource += string.Format("'{0}',", item);
                }
                querySource = querySource.Remove(querySource.Length - 1, 1);
            }

            if (!string.IsNullOrWhiteSpace(querySource))
            {
                filterByLeadSource += string.Format("and cu.LeadSource in ({0})", querySource);
            }

            if (filter.SalesPersonText == "null")
            {
                filter.SalesPersonText = filter.SalesPersonText.Substring(0, filter.SalesPersonText.Length - 4);

            }
            var array1 = filter.SalesPersonText.Split(",");
            string query1 = "";
            if (array1 != null)
            {
                foreach (var item in array1)
                {
                    query1 += string.Format("'{0}',", item);
                }
                query1 = query1.Remove(query1.Length - 1, 1);
            }
            string Filtersalesperson = "";
            if (!string.IsNullOrWhiteSpace(query1))
            {
                Filtersalesperson += string.Format("and cu.soldby in ({0})", query1);
            }

            if (filter.BranchidText == "null")
            {
                filter.BranchidText = filter.BranchidText.Substring(0, filter.BranchidText.Length - 4);

            }
            var array2 = filter.BranchidText.Split(",");
            string query2 = "";
            if (array2 != null)
            {
                foreach (var item in array2)
                {
                    query2 += string.Format("'{0}',", item);
                }
                query2 = query2.Remove(query2.Length - 1, 1);
            }
            string FilterBranch = "";
            if (!string.IsNullOrWhiteSpace(query2))
            {
                FilterBranch += string.Format("and cu.BranchId in ({0})", query2);
            }

            if (filter.LeadStatusText == "null")
            {
                filter.LeadStatusText = filter.LeadStatusText.Substring(0, filter.LeadStatusText.Length - 4);

            }
            var LesdStatus = filter.LeadStatusText.Split(",");
            string query3 = "";
            if (LesdStatus != null)
            {
                foreach (var item in LesdStatus)
                {
                    query3 += string.Format("'{0}',", item);
                }
                query3 = query3.Remove(query3.Length - 1, 1);
            }
            string FilterLeadStatus = "";
            if (!string.IsNullOrWhiteSpace(query3))
            {
                FilterLeadStatus += string.Format("and cu.[Status] in ({0})", query3);
            }


            if (filter.StatusText == "null")
            {
                filter.StatusText = filter.StatusText.Substring(0, filter.StatusText.Length - 4);

            }
            var CustomerStatus = filter.StatusText.Split(",");
            string query4 = "";
            if (CustomerStatus != null)
            {
                foreach (var item in CustomerStatus)
                {
                    query4 += string.Format("'{0}',", item);
                }
                query4 = query4.Remove(query4.Length - 1, 1);
            }
            string FilterCustomerStatus = "";
            if (!string.IsNullOrWhiteSpace(query4))
            {
                FilterCustomerStatus += string.Format("and cu.CustomerStatus in ({0})", query4);
            }

            /*New Filter Query For Customer*/
            #region Filter Query For Customer and Lead
            if (!string.IsNullOrWhiteSpace(filter.DisplayNameText))
            {
                string[] querysplit = filter.DisplayNameText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" AND  CONTAINS(cu.SearchText, '\"*{0}*\"')", Uri.UnescapeDataString(querysplit[1].Trim()));
                }

            }
            if (filter.FirstDate != new DateTime() && filter.LastDate != new DateTime())
            {
                var StartDate = filter.FirstDate.SetZeroHour().ClientToUTCTime();
                var EndDate = filter.LastDate.SetMaxHour().ClientToUTCTime();
                if (filter.isLead == true)
                {
                    filterbydaterange = string.Format(@"AND cu.CreatedDate between '{0}' and '{1}'", StartDate, EndDate);
                }
                else
                {

                    // filterbydaterange = string.Format(@"AND cus.JoinDate between '{0}' and '{1}'", StartDate, EndDate);
                    filterbydaterange = string.Format(@"AND cc.ConvertionDate between '{0}' and '{1}'", StartDate, EndDate);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.IdText))
            {
                string[] querysplit = filter.IdText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cu.{0} = {1}", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.BusinessNameText))
            {
                string[] querysplit = filter.BusinessNameText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cu.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.StreetText))
            {
                string[] querysplit = filter.StreetText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cu.{0} like '%{1}%'", querysplit[0], Uri.UnescapeDataString(querysplit[1]));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.ActiveStatusText))
            {
                string[] querysplit = filter.ActiveStatusText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cu.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.CustomerNoText))
            {
                string[] querysplit = filter.CustomerNoText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cu.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.AccountNoText))
            {
                //Guess duplicate with customer no.
                string[] querysplit = filter.AccountNoText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cu.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            //if (!string.IsNullOrWhiteSpace(filter.BranchidText))
            //{
            //    string[] querysplit = filter.BranchidText.Split('#');
            //    if (querysplit.Length > 1)
            //    {
            //        FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
            //    }
            //}
            if (!string.IsNullOrWhiteSpace(filter.DbaText))
            {
                string[] querysplit = filter.DbaText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cu.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            //if (!string.IsNullOrWhiteSpace(filter.SalesLocationText))
            //{
            //    string[] querysplit = filter.SalesLocationText.Split('#');
            //    if (querysplit.Length > 1)
            //    {
            //        FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
            //    }
            //}

            if (!string.IsNullOrWhiteSpace(filter.EmailText))
            {
                string[] querysplit = filter.EmailText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cu.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.FirstNameText))
            {
                string[] querysplit = filter.FirstNameText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cu.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.LastNameText))
            {
                string[] querysplit = filter.LastNameText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cu.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            //if (!string.IsNullOrWhiteSpace(filter.LeadSourceText))
            //{
            //    string[] querysplit = filter.LeadSourceText.Split('#');
            //    if (querysplit.Length > 1)
            //    {
            //        FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
            //    }
            //}
            if (!string.IsNullOrWhiteSpace(filter.LeadStatusText))
            {
                string[] querysplit = filter.LeadStatusText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cu.{0} = '{1}'", "Status", querysplit[1]);
                }
            }
            //if (!string.IsNullOrWhiteSpace(filter.SalesPersonText))
            //{
            //    string[] querysplit = filter.SalesPersonText.Split('#');
            //    if (querysplit.Length > 1)
            //    {
            //        FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
            //    }
            //}

            if (!string.IsNullOrWhiteSpace(filter.CustomerTypeText))
            {
                string[] querysplit = filter.CustomerTypeText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cu.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.BusinessAccountTypeText))
            {
                string[] querysplit = filter.BusinessAccountTypeText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cu.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }

            if (!string.IsNullOrWhiteSpace(filter.PrimaryPhoneText))
            {
                string[] querysplit = filter.PrimaryPhoneText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cu.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.SecondaryPhoneText))
            {
                string[] querysplit = filter.SecondaryPhoneText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cu.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.CellNoText))
            {
                string[] querysplit = filter.CellNoText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cu.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }

            if (!string.IsNullOrWhiteSpace(filter.ActiveStatusText))
            {
                string[] querysplit = filter.ActiveStatusText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cu.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.JoinDateText))
            {
                string[] querysplit = filter.JoinDateText.Split('#');

                try
                {
                    DateTime starttime = DateTime.Parse(querysplit[1]);
                    if (querysplit.Length > 1)
                    {
                        FilterSubquery += string.Format(" and cu.{0} between '{1}' AND '{2}' ", querysplit[0], starttime.ToString(), starttime.AddHours(24).ToString());
                    }
                }
                catch (Exception ex)
                {

                }

            }
            if (!string.IsNullOrWhiteSpace(filter.FollowupDateText))
            {
                string[] querysplit = filter.FollowupDateText.Split('#');
                try
                {
                    DateTime starttime = DateTime.Parse(querysplit[1]);
                    if (querysplit.Length > 1)
                    {
                        FilterSubquery += string.Format(" and cu.{0} between '{1}' AND '{2}' ", querysplit[0], starttime.ToString(), starttime.AddHours(24).ToString());
                    }
                }
                catch (Exception ex)
                {

                }
            }
            #endregion
            #endregion
            string ColumnList = "";
            if (Colmuns != null && Colmuns.Length > 0)
            {
                foreach (string column in Colmuns)
                {
                    if (column == "Name")
                    {
                        ColumnList += ",cu.[Title] +' '+cu.[FirstName] +' '+cu.[LastName] as Name";
                    }
                    if (column == "Title")
                    {
                        ColumnList += ",cu.[Title]  as Title";
                    }
                    if (column == "ChildOf")
                    {
                        ColumnList += ",cus.[Title] +' '+cus.[FirstName] +' '+cus.[LastName] as [ChildOf]";
                    }
                    if (column == "FirstName")
                    {
                        ColumnList += ",cu.[FirstName]";
                    }
                    if (column == "LastName")
                    {
                        ColumnList += ",cu.[LastName]";
                    }
                    else if (column == "Email")
                    {
                        ColumnList += ",cu.EmailAddress";
                    }
                    else if (column == "BusinessName")
                    {
                        ColumnList += ", cu.BusinessName";
                    }
                    else if (column == "SiteType")
                    {
                        ColumnList += ", cu.SiteType";
                    }
                    else if (column == "Type")
                    {
                        ColumnList += ",cu.Type";
                    }
                    else if (column == "SalesPerson")
                    {
                        ColumnList += ",ISNULL(soldbyemp.FirstName + ' ' + soldbyemp.LastName, '') SalesPerson";
                    }
                    else if (column == "PrimaryPhone")
                    {
                        ColumnList += ",cu.PrimaryPhone";
                    }
                    else if (column == "HomeOwner")
                    {
                        ColumnList += ",cu.HomeOwner";
                    }

                    else if (column == "LeadSource")
                    {
                        ColumnList += ",Case When lksource.DisplayText = 'Select One' then '' else lksource.DisplayText End as LeadSource";
                    }
                    else if (column == "LeadSourceType")
                    {
                        ColumnList += ",CASE WHEN cu.LeadSourceType = '-1' THEN ' ' ELSE cu.LeadSourceType END as LeadSourceType";
                    }

                    else if (column == "Status")
                    {
                        ColumnList += ",cu.Status";
                    }
                    else if (column == "SalesLocation")
                    {
                        ColumnList += ",CASE WHEN lkLocation.DisplayText = '-1' THEN ' ' ELSE lkLocation.DisplayText END as SalesLocation";
                    }
                    else if (column == "SoldBy")
                    {
                        ColumnList += ",cu.SoldBy";
                    }
                    else if (column == "TaxExemption")
                    {
                        ColumnList += ",CASE WHEN cu.TaxExemption = '-1' THEN ' ' ELSE cu.TaxExemption END as TaxExemption";
                    }

                    else if (column == "Ownership")
                    {
                        ColumnList += ",CASE WHEN cu.Ownership = '-1' THEN ' ' ELSE cu.Ownership END as Ownership";
                    }

                    else if (column == "BranchId")
                    {
                        ColumnList += ",cb.Name  as BranchName";
                    }
                    else if (column == "CSProvider")
                    {
                        ColumnList += ",CASE WHEN cu.CSProvider = '-1' THEN ' ' ELSE cu.CSProvider END as CSProvider";
                    }

                    else if (column == "IsAgreement")
                    {
                        ColumnList += ",cu.IsAgreement";
                    }
                    else if (column == "PreferedSms")
                    {
                        ColumnList += ",cu.PreferedSms";
                    }

                    else if (column == "MonthlyMonitoringFee")
                    {
                        ColumnList += ",cu.MonthlyMonitoringFee";
                    }
                    else if (column == "IsActive")
                    {
                        ColumnList += ",cu.IsActive";
                    }

                    else if (column == "FirstBilling")
                    {
                        ColumnList += ", CONVERT(VARCHAR(10), cu.FirstBilling, 101) as FirstBilling";
                    }
                    else if (column == "CreatedDate")
                    {
                        ColumnList += ", CONVERT(VARCHAR(10), cu.CreatedDate, 101) as CreatedDate";

                    }
                    else if (column == "ConvertionDate")
                    {
                        ColumnList += ", CONVERT(VARCHAR(10), cc.ConvertionDate, 101) as ConvertionDate";

                    }
                    else if (column == "AdditionalCustomerNo")
                    {
                        ColumnList += ",cu.AdditionalCustomerNo";
                    }
                    else if (column == "SecondCustomerNo")
                    {
                        ColumnList += ",cu.SecondCustomerNo";
                    }

                    else if (column == "BillAmount")
                    {
                        ColumnList += ",cast(cu.BillAmount as decimal(10, 2)) as BillAmount";

                    }

                    else if (column == "PaymentMethod")
                    {
                        ColumnList += ",CASE WHEN cu.PaymentMethod = '-1' THEN ' ' ELSE cu.PaymentMethod END as PaymentMethod";
                    }

                    //else if (column == "PaymentMethod")
                    //{
                    //    ColumnList += ",cu.PaymentMethod";
                    //}

                    else if (column == "BillCycle")
                    {
                        ColumnList += ",CASE WHEN cu.BillCycle = '-1' THEN ' ' ELSE cu.BillCycle END as BillCycle";
                    }


                    else if (column == "BillDay")
                    {
                        ColumnList += ",CASE WHEN cu.BillDay = '-1' THEN ' ' ELSE cu.BillDay END as BillDay";
                    }

                    else if (column == "BillNotes")
                    {
                        ColumnList += ",cu.BillNotes";
                    }

                    else if (column == "BillOutStanding")
                    {
                        ColumnList += ",cu.BillOutStanding";
                    }
                    else if (column == "Address")
                    {
                        ColumnList += ",cu.Address";
                    }
                    else if (column == "City")
                    {
                        ColumnList += ",cu.City";
                    }
                    else if (column == "State")
                    {
                        ColumnList += ",cu.State";
                    }
                    else if (column == "ZipCode")
                    {
                        ColumnList += ",cu.ZipCode";
                    }
                    else if (column == "ZipState")
                    {
                        ColumnList += ",ISNULL(cu.State, '') State";
                    }
                    else if (column == "Location")
                    {
                        ColumnList += ",cu.Address";
                    }
                    else if (column == "Contract")
                    {
                        ColumnList += ",cu.Address";
                    }

                    else if (column == "EmailAddress")
                    {
                        ColumnList += ",cu.EmailAddress";
                    }
                    else if (column == "ReferringCustomer")
                    {
                        ColumnList += ",cus2.[Title] +' '+cus2.[FirstName] +' '+cus2.[LastName] as ReferringCustomer";
                    }
                    else if (column == "PreferredContactMethod")
                    {
                        ColumnList += ",CASE WHEN cu.PreferredContactMethod = '-1' THEN ' ' ELSE cu.PreferredContactMethod END as PreferredContactMethod";
                    }
                    else if (column == "BestTimeToCall")
                    {
                        ColumnList += ",CASE WHEN cu.BestTimeToCall = '-1' THEN ' ' ELSE cu.BestTimeToCall END as BestTimeToCall";
                    }

                    else if (column == "CellNo")
                    {
                        ColumnList += ",cu.CellNo";
                    }
                    else if (column == "PhoneType")
                    {
                        ColumnList += ",CASE WHEN cu.PhoneType = '-1' THEN ' ' ELSE cu.PhoneType END as PhoneType";
                    }

                    else if (column == "CallingTime")
                    {
                        CallingTime = true;
                        ColumnList += ",CASE WHEN cu.CallingTime = '-1' THEN ' ' ELSE lk.DisplayText END as CallingTime";
                    }
                    else if (column == "MMR")
                    {
                        ColumnList += ",cu.MonthlyMonitoringFee";
                    }
                    else if (column == "CustomerNo")
                    {
                        ColumnList += ",cu.CustomerNo";
                    }
                    else if (column == "CustomerStatus")
                    {
                        ColumnList += ",lkcusstatus.DisplayText as CustomerStatus";
                    }
                    //else if (column == "DisplayName")
                    //{
                    //    ColumnList += ", cu.DisplayName";
                    //}
                    else if (column == "SSN")
                    {
                        ColumnList += ",cu.SSN";
                    }
                    else if (column == "BillAmount")
                    {
                        ColumnList += ",ISNULL(cu.BillAmount, '') BillAmount";
                    }
                    else if (column == "BillCycle")
                    {
                        ColumnList += ",CASE WHEN cu.BillCycle = '-1' THEN ' ' ELSE cu.BillCycle END as BillCycle";
                    }
                    else if (column == "Payment")
                    {
                        ColumnList += ",IIF(cu.PaymentMethod = '-1','',cu.PaymentMethod) PaymentMethod";
                    }
                    else if (column == "Tax")
                    {
                        ColumnList += ",cu.BillTax";
                    }
                    else if (column == "DateofBirth")
                    {
                        ColumnList += ",cu.DateofBirth";
                    }
                    else if (column == "SecondaryPhone")
                    {
                        ColumnList += ",cu.SecondaryPhone";
                    }
                    else if (column == "CreditScore")
                    {
                        ColumnList += ",CASE WHEN cu.CreditScore = '-1' THEN ' ' ELSE csg.Grade END as CreditScore";
                    }
                    else if (column == "FundingCompany")
                    {
                        ColumnList += ",CASE WHEN cu.FundingCompany = '-1' THEN ' ' ELSE cu.FundingCompany END as FundingCompany";
                    }
                    else if (column == "LeadSource")
                    {
                        ColumnList += ",lksource.DisplayText as LeadSource";
                    }
                    //            REPLACE(cu.LeadSource, '-1', '') LeadSource
                    else if (column == "CellularBackup")
                    {
                        ColumnList += ",cu.CellularBackup";
                    }
                    else if (column == "CustomerFunded")
                    {
                        ColumnList += ",cu.CustomerFunded";
                    }
                    else if (column == "Maintenance")
                    {
                        ColumnList += ",cu.Maintenance";
                    }
                    else if (column == "Note")
                    {
                        ColumnList += ",cu.Note";
                    }
                    else if (column == "SalesDate")
                    {
                        ColumnList += ", CONVERT(VARCHAR(10), cu.SalesDate, 101) as SalesDate";
                    }
                    else if (column == "InstallDate")
                    {
                        ColumnList += ",CONVERT(VARCHAR(10), cu.InstallDate, 101) as InstallDate";
                    }
                    else if (column == "CutInDate")
                    {
                        ColumnList += ",CONVERT(VARCHAR(10), cu.CutInDate, 101) as CutInDate";
                    }
                    else if (column == "Installer")
                    {
                        ColumnList += ",cu.Installer";
                    }
                    else if (column == "FundingDate")
                    {
                        ColumnList += ", CONVERT(VARCHAR(10), cu.FundingDate, 101) as FundingDate";
                    }
                    else if (column == "JoinDate")
                    {
                        ColumnList += ",cu.JoinDate";
                    }
                    else if (column == "QA1")
                    {
                        ColumnList += ",cu.QA1";
                    }
                    else if (column == "QA1Date")
                    {
                        ColumnList += ",cu.QA1Date";
                    }
                    else if (column == "QA2")
                    {
                        ColumnList += ",cu.QA2";
                    }
                    else if (column == "QA2Date")
                    {
                        ColumnList += ",cu.QA2Date";
                    }
                    else if (column == "Status")
                    {
                        ColumnList += ",cu.Status";
                    }
                    else if (column == "BillDay")
                    {
                        ColumnList += ",ISNULL(cu.BillDay, '') BillDay";
                    }
                    else if (column == "StreetType")
                    {
                        ColumnList += ",IIF(cu.StreetType = '-1', '', cu.StreetType) StreetType";
                    }
                    else if (column == "Appartment")
                    {
                        ColumnList += ",cu.Appartment";
                    }
                    else if (column == "SecondCustomerNo")
                    {
                        ColumnList += ",cu.SecondCustomerNo";
                    }
                    else if (column == "AdditionalCustomerNo")
                    {
                        ColumnList += ",cu.AdditionalCustomerNo";
                    }
                    else if (column == "Passcode")
                    {
                        ColumnList += ",cu.Passcode";
                    }
                    else if (column == "ActivationFee")
                    {
                        ColumnList += ",cu.ActivationFee";
                    }
                    else if (column == "FirstBilling")
                    {
                        ColumnList += ", CONVERT(VARCHAR(10), cu.FirstBilling, 101) as FirstBilling";
                    }

                    else if (column == "CrossStreet")
                    {
                        ColumnList += ",cu.CrossStreet";
                    }
                    else if (column == "DBA")
                    {
                        ColumnList += ",cu.DBA";
                    }
                    else if (column == "IsAgreement")
                    {
                        ColumnList += ",cu.IsAgreement";
                    }
                    else if (column == "Branch")
                    {
                        ColumnList += ",cu.BranchId";
                    }
                    else if (column == "LastUpdatedDate")
                    {
                        ColumnList += ",cu.LastUpdatedDate";
                    }

                    else if (column == "LastUpdatedDate")
                    {
                        ColumnList += ",cu.LastUpdatedDate";
                    }

                    else if (column == "LastUpdatedDate")
                    {
                        ColumnList += ",cu.LastUpdatedDate";
                    }

                    else if (column == "LastUpdatedDate")
                    {
                        ColumnList += ",cu.LastUpdatedDate";
                    }
                    else if (column == "GrossFundedAmount")
                    {
                        ColumnList += ",cusex.GrossFundedAmount";
                    }
                    else if (column == "NetFundedAmount")
                    {
                        ColumnList += ",cusex.NetFundedAmount";
                    }
                    else if (column == "DiscountFundedAmount")
                    {
                        ColumnList += ",cusex.DiscountFundedAmount";
                    }
                    else if (column == "DiscountFundedPercentage")
                    {
                        ColumnList += ",cusex.DiscountFundedPercentage";
                    }
                    else if (column == "CustomerPaymentAmount")
                    {
                        ColumnList += ",cusex.CustomerPaymentAmount";
                    }
                    else if (column == "FinanceRep")
                    {
                        ColumnList += ",cusex.FinanceRep";
                    }
                    else if (column == "FinanceRepCommissionRate")
                    {
                        ColumnList += ",cusex.FinanceRepCommissionRate";
                    }
                    else if (column == "LoanNumber")
                    {
                        ColumnList += ",cusex.LoanNumber";
                    }

                    else if (column == "CreditAppNumber")
                    {
                        ColumnList += ",cusex.CreditAppNumber";
                    }
                    else if (column == "Term")
                    {
                        ColumnList += ",CASE WHEN cusex.Term = '-1' THEN ' ' ELSE cusex.Term END as Term";
                    }
                    else if (column == "APR")
                    {
                        ColumnList += ",cusex.APR";
                    }
                    else if (column == "MaxCreditLimit")
                    {
                        ColumnList += ",cusex.MaxCreditLimit";
                    }
                    else if (column == "ApprovalDate")
                    {
                        ColumnList += ",cusex.ApprovalDate";
                    }
                    else if (column == "BatchNumber")
                    {
                        ColumnList += ",cusex.Batch";
                    }
                    else if (column == "MonthlyBatch")
                    {
                        ColumnList += ",cusex.MonthlyBatch";
                    }
                    #region Discrete Address
                    else if (column == "Street")
                    {
                        ColumnList += ",cu.[Street]";
                    }
                    else if (column == "City")
                    {
                        ColumnList += ",cu.[City]";
                    }
                    else if (column == "State")
                    {
                        ColumnList += ",cu.[State]";
                    }
                    else if (column == "ZipCode")
                    {
                        ColumnList += ",cu.[ZipCode]";
                    }
                    else if (column == "County")
                    {
                        ColumnList += ",cu.[County]";
                    }

                    else if (column == "FundingDate")
                    {
                        ColumnList += ",cu.[FundingDate]";
                    }
                    else if (column == "InstallDate")
                    {
                        ColumnList += ",cu.[InstallDate]";
                    }

                    else if (column == "Note")
                    {
                        ColumnList += ",cu.[Note]";
                    }
                    else if (column == "CustomerFunded")
                    {
                        ColumnList += ",cu.[CustomerFunded]";
                    }
                    else if (column == "CreditScoreValue")
                    {
                        ColumnList += ",cu.[CreditScoreValue]";
                    }

                    else if (column == "CSProvider")
                    {
                        ColumnList += ",cu.[CSProvider]";
                    }
                    else if (column == "StreetPrevious")
                    {
                        ColumnList += ",cu.[StreetPrevious]";
                    }
                    else if (column == "CityPrevious")
                    {
                        ColumnList += ",cu.[CityPrevious]";
                    }
                    else if (column == "StatePrevious")
                    {
                        ColumnList += ",cu.[StatePrevious]";
                    }

                    else if (column == "Soldby")
                    {
                        ColumnList += ",emp.[Title] +' '+emp.[FirstName] +' '+emp.[LastName] as [Soldby]";
                    }
                    else if (column == "LeadStatus")
                    {
                        ColumnList += ",cu.[Status]";
                    }
                    else if (column == "EstCloseDate")
                    {
                        ColumnList += ",cu.[EstCloseDate]";
                    }
                    else if (column == "DoNotCall")
                    {
                        ColumnList += ",cu.[DoNotCall]";
                    }

                    //else if (column == "ZipCodePrevious")
                    //{
                    //    ColumnList += ",[ZipCodePrevious]";
                    //}
                    //else if (column == "CountryPrevious")
                    //{
                    //    ColumnList += ",[CountryPrevious]";
                    //}
                    //else if (column == "CountryPrevious")
                    //{
                    //    ColumnList += ",[CountryPrevious]";
                    //}
                    #endregion
                }
            }
            string numberprefix = "";
            string Acorin = "";
            if (!string.IsNullOrWhiteSpace(NumberPrefix))
            {
                numberprefix += string.Format("and (cu.CustomerNo like '{0}%' or cu.SecondCustomerNo like '{0}%' or cu.AdditionalCustomerNo like '{0}%')", NumberPrefix);
            }
            if (!string.IsNullOrWhiteSpace(acorin) && acorin != "undefined")
            {
                Acorin += string.Format("and cu.IsActive = {0}", acorin);
            }
            string DownloadReportFor = "";
            if (ReportFor == "Customer")
            {
                DownloadReportFor = string.Format("and cc.IsLead = 0", ReportFor);
            }
            else
            {
                DownloadReportFor = string.Format("and cc.IsLead = 1", ReportFor);
            }
            if (EmployeeRole.ToLower().IndexOf("partner") > -1 && Partners != null && Partners.Count > 0)
            {
                string PartnerId = string.Join("','", Partners.Select(x => x.UserId.ToString()));
                UserListFilter = string.Format("and (cu.Installer in('{0}') or cu.Soldby in('{0}') or cu.QA1 in('{0}') or cu.QA2 in ('{0}'))", PartnerId);
            }
            else if (isPermit)
            {
                UserListFilter = "";
            }
            else
            {
                UserListFilter = string.Format("and (cu.Installer='{0}' or cu.Soldby='{0}' or cu.AccessGivenTo = '{0}')", UserId);
            }
            string DateQuery = "";
            //if (Start != new DateTime() && End != new DateTime())
            //{

            //    var StartDate = Start.SetZeroHour().ClientToUTCTime();
            //    var EndDate = End.SetMaxHour().ClientToUTCTime();

            //    DateQuery = string.Format("and (cu.CreatedDate between '{0}' and '{1}' and cu.JoinDate is not null)", StartDate, EndDate);
            //}
            string sqlQuery = @"
                                SELECT cu.Id
                                {0}
                              FROM Customer cu
                              {4}
                            left join [Lookup] lksource on lksource.DataKey = 'LeadSource' and lksource.DataValue = cu.LeadSource
                            left join Customer cus on cus.CustomerId = cu.ChildOf
                            left join Customer cus2 on cus2.CustomerId = cu.ReferringCustomer
                            left join Employee emp on emp.UserId = cu.Soldby1
                            left join CompanyBranch cb on cb.Id = cu.BranchId
                            left join CustomerExtended cusex on cu.CustomerId = cusex.CustomerId
                            left join Lookup lkcusstatus on lkcusstatus.DataValue = Cu.CustomerStatus and lkcusstatus.DataKey = 'CustomerStatus1'
                            left join Lookup lkLocation on lkLocation.DataValue = Cu.SalesLocation and lkLocation.DataKey = 'SalesLocation'
                            left join Lookup lkstatus on lkstatus.DataValue = cu.Status and lkstatus.DataKey = 'LeadStatus' 
                            left join [Lookup] lkinstalledstatus on lkinstalledstatus.DataValue = iif(cu.InstalledStatus != '-1', cu.InstalledStatus, '') and lkinstalledstatus.DataKey = 'InstalledStatus'
                            left join CustomerCompany cc on cc.CustomerId = cu.CustomerId
                            left join CreditScoreGrade csg on csg.Id = cu.CreditScore
                            where cc.CompanyId = '{1}' 
                            {3}
                            {9} 
                            and cc.IsActive = 1
                            and cu.JoinDate is not null
                            {2}
                            {5}
                            {6}
                            {7}
                            {8}
                            {10}
                            {11}
                            {12}
                            {13}
                            {14}
                            {15}
                            {16}
                            {17}
                            {18}
                            {19}
                            order by cu.Id desc
                            ";
            try
            {
                if (!CallingTime)
                {
                    IfCallingTime = "";
                    IfCallingTime2 = "";
                }
                sqlQuery = string.Format(sqlQuery, ColumnList, CompanyId, InIdListFilter, IfCallingTime, IfCallingTime2, numberprefix, Acorin, UserListFilter, DateQuery, DownloadReportFor,


                    /*12*/ filterByUserName,
                    FilterCustomerStatus,
                    filterbydaterange,
                    filterByLeadSource,
                    FilterSubquery,
                    Filtersalesloc,
                    Filtersalesperson,
                    FilterBranch,
                    FilterLeadStatus,
                    filterColumntext);
                ///*13*/filterByLeadSource,
                ///*14*/filterByDate,
                ///*15*/filterForQA,
                ///*16*/filterByPaymentMethod,
                ///*17*/filterByIsActive,
                ///*18*/filterbyUser,
                ///*19*/orderbysql,
                ///*20*/TotalRMRFilter,
                ///*21*/TotalOpenInvoice,
                ///*22*/TotalDueInvoice,
                ///*23*/filterbydaterange,
                ///*24*/Othersquery,
                ///*25*/BranchQuery,
                ///*26*/SoldByQuery,
                ///*27*/NamingSql,
                ///*28*/filterPackageQuery,
                ///*29*/FilterSubquery,
                ///*30*/orderbysql1,
                ///*31*/CountQuery,
                ///*31*/filter.isLead == true ? 1 : 0,
                ///*24*/PlatformTableJoinTableQuery,
                // /*25*/Filtersalesloc,
                // /*26*/Filtersalesperson,
                // /*27*/FilterBranch,
                ///*28*/ResOrderQuery,
                ///*29*/FilterLeadStatus,
                ///*30*/FilterCustomerStatus,
                ///*31*/sortingorderbysql);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(filter.SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(filter.SearchText.Trim())));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception)
            {
                return null;
            }
            //return dt;
        }

        public DataTable GetCustomerDatabaseReport(int[] IdList, string[] columnList, Guid CompanyId, string NumberPrefix, string acorin, Guid UserId, DateTime Start, DateTime End, string ReportFor)
        {
            DataTable dt = new DataTable();

            string InIdListFilter = "";
            string DateQuery = "";
            if (Start != new DateTime() && End != new DateTime())
            {

                var StartDate = Start.SetZeroHour().ClientToUTCTime();
                var EndDate = End.SetMaxHour().ClientToUTCTime();

                DateQuery = string.Format("and (cus.CreatedDate between '{0}' and '{1}' or cus.JoinDate between '{0}' and '{1}')", StartDate, EndDate);
            }
            string DownloadReportFor = "";
            if (ReportFor == "Customer")
            {
                DownloadReportFor = string.Format("and cc.IsLead = 0", ReportFor);
            }
            else
            {
                DownloadReportFor = string.Format("and cc.IsLead = 1", ReportFor);
            }
            if (IdList != null && IdList.Length > 0)
            {
                string Ids = "";
                foreach (int id in IdList)
                {
                    Ids += id + ",";
                }
                Ids += "0";
                InIdListFilter = " And cus.Id in(" + Ids + ")";
            }
            string sqlQuery = @"
                 --       SELECT cu.*,
select cus.Id,cus.CustomerId,cus.CustomerNo,cus.Title,cus.FirstName,cus.LastName,cus.SSN,CASE WHEN cus.Type= '-1' THEN ' ' ELSE cus.Type End as Type,cus.BusinessName,cus.DateofBirth,cus.PrimaryPhone,cus.SecondaryPhone,
cus.CellNo,cus.Fax,cus.EmailAddress,cus.CallingTime,cus.Address,cus.Address2,cus.Street,cus.city,cus.state,cus.ZipCode,cus.Country,cus.StreetPrevious,cus.CityPrevious,cus.StatePrevious,
cus.ZipCodePrevious,cus.CountryPrevious,cus.AccountNo,cus.IsAlarmCom,CASE WHEN cus.CreditScore = '-1' THEN ' ' ELSE csg.Grade END as CreditScore,cus.CreditScoreValue,CASE WHEN cus.ContractTeam = '-1' THEN ' ' ELSE cus.ContractTeam END as ContractTerm,CASE WHEN cus.FundingCompany = '-1' THEN ' ' ELSE cus.FundingCompany END as FundingCompany,cus.MonthlyMonitoringFee,
cus.CellularBackup,Case When lk.DisplayText = 'Select One' then '' else lk.DisplayText End as LeadSource,cus.CustomerFunded,cus.Maintenance,cus.Note,CONVERT(VARCHAR(10),cus.SalesDate,101) as SalesDate,CONVERT(VARCHAR(10),cus.InstallDate,101) as InstallDate,
CONVERT(VARCHAR(10),cus.CutInDate,101) as CutInDate,cus.Installer,cus.Soldby,CONVERT(VARCHAR(10),cus.FundingDate,101) as FundingDate,cus.MiddleName,CONVERT(VARCHAR(10),cus.JoinDate,101) as JoinDate,CONVERT(VARCHAR(10),cus.ReminderDate,101) as ReminderDate,
cus.QA1,CONVERT(VARCHAR(10),cus.QA1Date,101) as QA1Date,cus.QA2,CONVERT(VARCHAR(10),cus.QA2Date,101) as QA2Date,cus.Status,cast(cus.BillAmount as decimal(10, 2)) as BillAmount,CASE WHEN cus.PaymentMethod = '-1' THEN ' ' ELSE cus.PaymentMethod END as PaymentMethod,CASE WHEN cus.BillCycle = '-1' THEN ' ' ELSE cus.BillCycle END as BillCycle,CASE WHEN cus.BillDay = '-1' THEN ' ' ELSE cus.BillDay END as BillDay,cus.BillNotes,cus.BillTax,cus.BillOutStanding,
CONVERT(VARCHAR(10),cus.ServiceDate,101) as ServiceDate,cus.Area,CASE WHEN cus.StreetType = '-1' THEN ' ' ELSE cus.StreetType END as StreetType,cus.Appartment,cus.Latlng ,cus.SecondCustomerNo,cus.AdditionalCustomerNo,cus.IsTechCallPassed,cus.IsDirect,cus.AuthorizeRefId,cus.AuthorizeCusProfileId,cus.AuthorizeCusPaymentProfileId,
cus.AuthorizeDescription,cus.IsRequiredCsvSync,cus.Passcode,cus.ActivationFee,CONVERT(VARCHAR(10), cus.FirstBilling, 101) as FirstBilling,cus.ActivationFeePaymentMethod,cus.IsActive,cus.LastGeneratedInvoice,cus.Singature,cus.CrossStreet,cus.DBA,cus.AlarmRefId,cus.TransunionRefId,cus.MonitronicsRefId,cus.CentralStationRefId,
cus.CmsRefId,cus.PreferedEmail,cus.PreferedSms,cus.IsAgreement,cus.IsFireAccount,cus.CreatedByUid,CONVERT(VARCHAR(10),cus.CreatedDate,101) as CreatedDate,cus.LastUpdatedBy,cus.LastUpdatedByUid,CONVERT(VARCHAR(10),cus.LastUpdatedDate,101) as LastUpdatedDate,cus.BusinessAccountType,
CASE WHEN cus.PhoneType = '-1' THEN ' ' ELSE cus.PhoneType END as PhoneType,CASE WHEN cus.Carrier = '-1' THEN ' ' ELSE cus.Carrier END as Carrier,cus.ReferringCustomer,cus.EsistingPanel,CASE WHEN cus.Ownership = '-1' THEN ' ' ELSE cus.Ownership END as Ownership,cus.PurchasePrice,cus.ContractValue,cus.ChildOf,cus.EmailVerified,cus.HomeVerified,cus.County,cus.CustomerToken,cus.PaymentToken,cus.ScheduleToken,CONVERT(VARCHAR(10),cus.EstCloseDate,101) as EstCloseDate,
CONVERT(VARCHAR(10),cus.ProjectWalkDate,101) as ProjectWalkDate,cb.Name as BranchName,cus.SubscriptionStatus,cus.AnnualRevenue,cus.Website,cus.Market,cus.Passengers,cus.Budget,cus.SmartSetUpStep,cus.CustomerAccountType,cus.IsPrimaryPhoneVerified,cus.IsSecondaryPhoneVerified,cus.IsCellNoVerified,
cus.HomeOwner,cus.AccessGivenTo,cus.DoNotCall,CASE WHEN cus.PreferredContactMethod = '-1' THEN ' ' ELSE cus.PreferredContactMethod END as PreferredContactMethod,CASE WHEN lkLocation.DisplayText = 'SelectOne' THEN ' ' ELSE lkLocation.DisplayText  END as SalesLocation,cus.IsReceivePaymentMail,CASE WHEN cus.BestTimeToCall = '-1' THEN ' ' ELSE cus.BestTimeToCall END as BestTimeToCall,CASE WHEN cus.CSProvider = '-1' THEN ' ' ELSE cus.CSProvider END as CSProvider,cus.RenewalTerm,cus.PreferedCall,cus.IsAgreementSend,cus.IsACHDiscount,lkcusstatus.DisplayText as CustomerStatus,cus.TransferCustomerId,cus.CancellationSignature,
CONVERT(VARCHAR(10),cus.OriginalContactDate,101) as OriginalContactDate,cus.DuplicateCustomer,cus.InspectionCompany,cus.SoldBy2,cus.SoldBy3,cus.ContactedPerviously,CONVERT(VARCHAR(10),cus.MovingDate,101) as MovingDate,cus.InstalledStatus,cus.AcquiredFrom,CONVERT(VARCHAR(10),cus.FollowUpDate,101) as FollowUpDate,
cus.BuyoutAmountByADS,cus.FinancedTerm,cus.FinancedAmount,cus.Levels,cus.SoldAmount,cus.AgreementEmail,cus.AgreementPhoneNo,CASE WHEN cus.TaxExemption = '-1' THEN ' ' ELSE cus.TaxExemption END as TaxExemption,CASE WHEN cus.AppoinmentSet = '-1' THEN ' ' ELSE cus.AppoinmentSet END as AppointmentSet,cus.BillingEmail,cus.BillingPhone,cus.BillingContact,CONVERT(VARCHAR(10),cus.LastOpenedDate,101) as LastOpenedDate,CONVERT(VARCHAR(10),cus.DisconnectServiceDate,101) as DisconnectServiceDate,
cus.UCCRefId,cus.PlatformId,cus.RecommendedLevel,cus.ProfileImage,cus.BrinksRefId,cus.MapscoNo,CONVERT(VARCHAR(10),cus.CustomerSignatureDate,101) as CustomerSignatureDate,CASE WHEN cus.LeadSourceType = '-1' THEN ' ' ELSE cus.LeadSourceType END as LeadSourceType,cus.MoveCustomerId,cus.EcontractId,cus.EcontractEnvlobeId,cus.Soldby1,cus.SearchText,cus.IsContractSigned,cusex.GrossFundedAmount,cusex.NetFundedAmount,cusex.DiscountFundedAmount,cusex.DiscountFundedPercentage,
cusex.CustomerPaymentAmount,cusex.FinanceRep,cusex.FinanceRepCommissionRate,cusex.LoanNumber,cusex.CreditAppNumber,CASE WHEN cusex.Term = '-1' THEN ' ' ELSE cusex.Term END as Term,cusex.APR,cusex.MaxCreditLimit,cusex.ApprovalDate,cusex.Batch,cusex.MonthlyBatch,CONVERT(VARCHAR(10),cc.ConvertionDate,101) as ConvertionDate
                                
,e.FirstName +' '+e.LastName as [Soldby Name]
                        FROM Customer cus
                          left join CustomerExtended cusex on cus.CustomerId = cusex.CustomerId
                         left join [Lookup] lk on lk.DataKey = 'LeadSource' and lk.DataValue = cus.LeadSource
                         left join Lookup lkcusstatus on lkcusstatus.DataValue = Cus.CustomerStatus and lkcusstatus.DataKey = 'CustomerStatus1'
                        left join Lookup lkLocation on lkLocation.DataValue = Cus.SalesLocation and lkLocation.DataKey = 'SalesLocation'
                        left join CompanyBranch cb on cb.Id = cus.BranchId
                        left join CreditScoreGrade csg on csg.Id = cus.CreditScore
                        left join CustomerCompany cc on
                        cc.CustomerId = cus.CustomerId
                        left join Employee e on
						cus.Soldby1 = e.UserId
                        where cc.CompanyId = '{0}' 
            and cc.IsActive = 1
                            and cus.JoinDate is not null
{1}
                       {2} {3}
                         order by Id desc
                            ";
            try
            {

                sqlQuery = string.Format(sqlQuery, CompanyId, InIdListFilter, DownloadReportFor, DateQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception)
            {
                return null;
            }
            //return dt;
        }
        public DataTable GetCustomerPdf(int[] IdList, Guid CompanyId, string NumberPrefix, string acorin)
        {
            DataTable dt = new DataTable();
            bool CallingTime = false;
            string InIdListFilter = "";
            string IfCallingTime = "--and lk.DataKey='TimeToCall'";
            string IfCallingTime2 = @"left join [Lookup] lk on 

                                cu.CallingTime = lk.DataValue";
            if (IdList != null && IdList.Length > 0)
            {
                string Ids = "";
                foreach (int id in IdList)
                {
                    Ids += id + ",";
                }
                Ids += "0";
                InIdListFilter = "And cu.Id in(" + Ids + ")";
            }
            string numberprefix = "";
            string Acorin = "";
            if (!string.IsNullOrWhiteSpace(NumberPrefix))
            {
                numberprefix += string.Format("and (cu.CustomerNo like '{0}%' or cu.SecondCustomerNo like '{0}%' or cu.AdditionalCustomerNo like '{0}%')", NumberPrefix);
            }
            if (!string.IsNullOrWhiteSpace(acorin) && acorin != "undefined")
            {
                Acorin += string.Format("and cu.IsActive = {0}", acorin);
            }
            string sqlQuery = @"
                                SELECT *
                              FROM Customer cu
                              {3}
                            left join Employee installeremp on
	                            cu.Installer = convert(nvarchar(50), installeremp.UserId)
                            left join Employee soldbyemp on
	                            cu.Soldby = convert(nvarchar(50), soldbyemp.UserId)
                            left join CustomerCompany cc on
	                            cc.CustomerId = cu.CustomerId
                            where cc.CompanyId = '{0}' 
                            {2}
                            --and cc.IsLead=0 
                            {1}
                            {4}
                            {5}
                            ";
            try
            {
                if (!CallingTime)
                {
                    IfCallingTime = "";
                    IfCallingTime2 = "";
                }
                sqlQuery = string.Format(sqlQuery, CompanyId, InIdListFilter, IfCallingTime, IfCallingTime2, numberprefix, Acorin);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception)
            {
                return null;
            }
            //return dt;
        }
        public DataTable GetEquipmentReport(int[] IdList, string[] Colmuns, Guid CompanyId)
        {
            DataTable dt = new DataTable();
            string InIdListFilter = "";
            if (IdList != null && IdList.Length > 0)
            {
                string Ids = "";
                foreach (int id in IdList)
                {
                    Ids += id + ",";
                }
                Ids += "0";
                InIdListFilter = "And eq.Id in(" + Ids + ")";
            }
            string ColumnList = "";
            if (Colmuns != null && Colmuns.Length > 0)
            {
                foreach (string column in Colmuns)
                {
                    if (column == "Name")
                    {
                        ColumnList += "eq.Name";
                    }
                    else if (column == "SKU")
                    {
                        ColumnList += ",eq.SKU";
                    }
                    else if (column == "Wholesale")
                    {
                        ColumnList += ",sup.CompanyName";
                    }
                    else if (column == "Retail Price")
                    {
                        ColumnList += ",eq.Retail";
                    }
                }
            }
            string sqlQuery = @"
                            select {0} from Equipment eq
                            left join Supplier sup
                            on sup.Id = eq.SupplierId
                            where eq.CompanyId = '{1}'
                            {2}
                            ";
            try
            {
                sqlQuery = string.Format(sqlQuery, ColumnList, CompanyId, InIdListFilter);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception)
            {
                return null;
            }
            //return dt;
        }

        public DataTable GetAllLeadByIdAndCompanyId(Guid companyId, int id)
        {
            string sqlQuery = @"select cs.*
                                from Customer cs
                                left join CustomerCompany Ccom
                                on cs.CustomerId = Ccom.CustomerId
                                where Ccom.CompanyId ='{0}' and Ccom.IsLead = 1";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyId);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        public DataTable CheckLeadOrCustomerByCustomerId(Guid companyId, Guid CustomerId)
        {
            string sqlQuery = @"select Ccom.IsLead as IsCustomer
                                from Customer cs
                                left join CustomerCompany Ccom
                                on cs.CustomerId = Ccom.CustomerId
                                where Ccom.CompanyId ='{0}' and cs.CustomerId = '{1}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyId, CustomerId);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        public DataTable GetGlobalSearchByKeyAndCompanyId(string key, Guid companyId, string emptag, string emprole, Guid empid, string Currency, bool IsContactPermitted, bool IsOpportunityPermitted)
        {

            string AddContactSql = "";
            string AddOpportunitySql = "";
            if (IsContactPermitted)
            {
                AddContactSql = @" UNION
		                                    Select top (@topCount) con.FirstName+' '+con.LastName as [Name],
                                                '' as [BusinessName],
			                                    con.Mobile +' '+con.Work as [PhoneNumber],
			                                    con.Email as [EmailAddress],
			                                    'Contact' [Type]
                                                ,con.Id
		                                    from Contact con
		                                    where  con.FirstName+' '+con.LastName like @SearchText 
                                                or con.LastName like @SearchText 
                                                or con.Work like @SearchText 
                                                or con.Mobile like @SearchText 
                                                or con.email like @SearchText
                                                
                                                order by con.Id desc";
            }
            if (IsOpportunityPermitted)
            {
                AddOpportunitySql = @" UNION
		                                    Select top (@topCount) op.OpportunityName as [Name],
                                                '' as [BusinessName],
			                                    REPLACE(op.[Type],'-1','') as [PhoneNumber],
			                                    '' as [EmailAddress],
			                                    'Opportunity' [Type]
                                                ,op.Id
		                                    from Opportunity op
		                                    where  op.OpportunityName like @SearchText 
			                                    or op.[Type] like @SearchText 
			                                    or op.LeadSource like @SearchText 
			                                    or op.Revenue like @SearchText
                                                
                                                order by op.Id desc";
            }

            string sqlQuery = @"
                                DECLARE @topCount INT
                                SET @topCount = 5                      
                                SELECT * INTO #tmpSearchResult 
                                  FROM ( 
                                     select top (@topCount)
                                        {7} [Name],
										cus.BusinessName [BusinessName],
			                            PrimaryPhone [PhoneNumber], 
			                            EmailAddress [EmailAddress],
			                            'Customer' [Type]
                                        ,cus.Id 
			                            from Customer cus
			                            left join CustomerCompany cc on 
				                            cc.CustomerId = cus.CustomerId
                                        left join CustomerMigration CM on
                                            CM.CustomerId = cus.CustomerId
                                            {9}
			                            --where  (cus.FirstName +' ' +cus.LastName like @searchtext 
				                            --or cus.Title like @searchtext
                                            --or cus.BusinessName like @searchtext
                                            --or cus.DBA like @searchtext
				                            --or cus.PrimaryPhone like @searchtext
                                            --OR cus.CellNo like @searchtext
                                            --or cus.AuthorizeRefId like @SearchText
                                            --or cus.CustomerNo like @SearchText
											--or cus.SecondCustomerNo like @SearchText
                                            --OR CONVERT(nvarchar(15), cus.Id) like @SearchText
                                           -- OR CONVERT(nvarchar(15), CM.RefenrenceId) like @SearchText
				                            --or cus.EmailAddress like @searchtext)
                                            and cus.IsActive =1
				                            and cc.IsLead = 0
                                            {2}
				                            Order by cus.Id Desc
		                                union

		                                select top (@topCount) 
                                            {7} as [Name],
										    cus.BusinessName [BusinessName],
			                                cus.PrimaryPhone [PhoneNumber], 
			                                cus.EmailAddress [EmailAddress],
			                                'Lead' [Type]
                                            ,cus.Id 
			                                from Customer cus
			 
			                                left join CustomerCompany CustCom on 
				                                CustCom.CustomerId= cus.CustomerId
                                            left join CustomerMigration CM on
                                                CM.CustomerId = cus.CustomerId
                                            {9}
			                                --where  (cus.FirstName +' '+cus.LastName like @searchtext
                                                --or cus.BusinessName like @searchtext
                                                --or cus.DBA like @searchtext
				                                --or cus.Title like @searchtext
				                                --or cus.PrimaryPhone like @searchtext
                                                --OR cus.CellNo like @searchtext
                                                --or cus.AuthorizeRefId like @SearchText
                                                --Or cus.CustomerNo like @SearchText
                                                --OR CONVERT(nvarchar(15), cus.Id) like @SearchText
                                                --OR CONVERT(nvarchar(15), CM.RefenrenceId) like @SearchText
				                                --or cus.EmailAddress like @searchtext)
                                                and cus.IsActive =1
				                                and CustCom.IsLead = 1
                                                {3}
				                                Order by cus.Id Desc
                                    Union
			                                Select top (@topCount) inv.InvoiceId [Name],
                                            '' as [BusinessName],
			                                '{8}'+LTRIM(Str(inv.TotalAmount, 25, 2)) [PhoneNumber],
			                                CONVERT(VARCHAR(10),inv.[CreatedDate],105) [EmailAddress],
			                                'Invoice' [Type]
                                            ,inv.Id
			                                from Invoice inv
			                                where inv.[Status] != 'init'
			                                and inv.IsEstimate = 0
			                                and inv.InvoiceId like @SearchText
                                            {4}
                                            Order by inv.Id Desc
	                                Union
			                                Select top (@topCount) inv.InvoiceId [Name],
                                            '' as [BusinessName],
			                                '{8}'+LTRIM(Str(inv.TotalAmount, 25, 2)) [PhoneNumber],
			                                CONVERT(VARCHAR(10),inv.[CreatedDate],105) [EmailAddress],
			                                'Estimate' [Type]
                                            ,inv.Id
			                                from Invoice inv
			                                where inv.[Status] != 'init'
			                                and inv.IsEstimate = 1
			                                and inv.InvoiceId like @SearchText
                                            {4}
                                            Order by inv.Id Desc
                                    Union
											select top (@topcount)
                                            {7} as Name
											--cus.FirstName +' '+ cus.LastName as Name
											,'' as [BusinessName]
											,CONVERT(nvarchar(15), tk.Id) as [PhoneNumber]
											,CONVERT(VARCHAR(10),tk.[CreatedDate],105) [EmailAddress]
											,'Ticket' [Type]
											,tk.Id
											from Ticket tk
											left join  Customer cus on cus.CustomerId = tk.CustomerId
											where (cus.FirstName +' ' +cus.LastName like @SearchText
				                            or cus.Title like @SearchText
                                            or cus.BusinessName like @SearchText
                                            or cus.DBA like @SearchText
                                            OR CONVERT(nvarchar(15), tk.Id) like @SearchText)

											and tk.Id is not null
											and tk.[status] != 'Init'
											
											Order by tk.Id Desc
                                    /*Contact*/
                                    {5}
                                    /*Opportunity*/
                                    {6}
                                ) as temp
                                SET @topCount = 20  
                                select top (@topCount) * from #tmpSearchResult  order by Type,Name
                                drop table #tmpSearchResult
                                ";
            string Cussubquery = "";
            string Leadsubquery = "";
            string subquery1 = "";
            string SearchKey = "";
            if (!string.IsNullOrWhiteSpace(emptag) && emptag.ToLower().IndexOf("admin") == -1 && emprole != "Sales Manager")
            {
                Cussubquery = string.Format("and (cus.Soldby = '{0}' or cus.Installer = '{0}' or cus.QA1 = '{0}' or cus.QA2 = '{0}')", empid);
                Leadsubquery = string.Format("and (cus.Soldby = '{0}' or cus.Installer = '{0}' or cus.QA1 = '{0}' or cus.QA2 = '{0}')", empid);
                subquery1 = string.Format("and inv.LastUpdatedByUid = '{0}'", empid);
            }
            if (!string.IsNullOrWhiteSpace(key) && key != "undefined")
            {
                bool isNumeric = Regex.IsMatch(key, @"\d");
                if (isNumeric && key.Length == 10)
                {
                    //long SSN = 0;
                    //if (long.TryParse(key, out SSN))
                    //{
                    //    key = string.Format("{0:0##-###-####}", SSN).TrimStart('-');
                    //}
                }
                //SearchKey = string.Format(" Where (CONTAINS(cus.SearchText, '\"*{0}*\"') OR CONTAINS(cus.SearchText, '\"{0}\"'))", Uri.UnescapeDataString(key.Trim()));
                SearchKey = string.Format(" Where CHARINDEX(@SearchText, cus.SearchText) > 0", Uri.UnescapeDataString(key.Trim()));

            }
            try
            {
                #region Naming Condition
                string NamingSql = "''";
                GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
                GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
                if (gs != null)
                {
                    NamingSql = gs.Value;
                }
                #endregion

                sqlQuery = string.Format(sqlQuery,
                                            key, //0
                                            companyId, //1 
                                            Cussubquery, //2
                                            Leadsubquery, //3
                                            subquery1, //4
                                            AddContactSql, //5
                                            AddOpportunitySql, //6
                                            NamingSql,//7
                                            Currency,//8
                                            SearchKey); //9

                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(key))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(key.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllExistingItemByCustomerId(Guid CustomerId)
        {
            string sqlQuery = @"select * from CustomerExistingItem 
                                where ItemName is not null and ItemName != ''
                                and Quantity is not null and Quantity != ''
                                and CustomerId = '{0}'";


            try
            {
                string rowQuery = string.Format(sqlQuery, CustomerId);
                using (SqlCommand cmd = GetSQLCommand(rowQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        public DataTable GetCustomersByKeyAndCompanyId(Guid companyId, string key, string emptag, string emprole, Guid empid, bool ispermit)
        {
            bool isNumeric = Regex.IsMatch(key, @"\d");
            if (isNumeric && key.Length == 10)
            {
                //long SSN = 0;
                //if (long.TryParse(key, out SSN))
                //{
                //    key = string.Format("{0:0##-###-####}", SSN).TrimStart('-');
                //}
            }
            string sqlQuery = @"
                                Declare @CompanyId uniqueidentifier
                               /*Declare @SearchText nvarchar(500)
                                set @searchtext='%{1}%'*/

                                set @CompanyId = '{0}'
                                
                                select cu.*,cm.RefenrenceId, Ins.FirstName + ' ' + Ins.LastName as TechnicianName,
								sp.FirstName + ' ' + sp.LastName as PersonSales,
                                (select SUM(_invo.BalanceDue) from Invoice _invo
								where cu.CustomerId = _invo.CustomerId and (_invo.Status = 'Open' or _invo.Status = 'Partial')) as UnpaidInvoiceTotal
                                from customer cu
                                left join CustomerCompany cc
                                on cc.CustomerId=cu.CustomerId
                                left join Employee Ins on cu.Installer = CONVERT(nvarchar(50), Ins.UserId)
                                left join customermigration cm on cm.CustomerId = cu.CustomerId
								left join Employee sp on cu.Soldby = CONVERT(nvarchar(50), sp.UserId)
                                where (cu.Title+' '+cu.FirstName+' '+cu.LastName like @searchtext
                                                or cu.FirstName like @searchtext
				                                or cu.LastName like @searchtext
                                                or cu.DBA like @searchtext
				                                or cu.Title like @searchtext
                                                or cu.FirstName + ' '+cu.LastName like @searchtext
                                                or cu.City like @searchtext
                                                or cu.SecondCustomerNo like @SearchText
                                                or cu.BusinessName like @searchtext
				                                or cu.PrimaryPhone like @searchtext
                                                or cu.SecondaryPhone like @searchtext
                                                or cu.CellNo like @searchtext
                                                or cu.Street like @searchtext
				                                or cu.EmailAddress like @searchtext
                                                or cu.Address like @searchtext
                                                or cm.RefenrenceId like @searchtext
                                                OR CONVERT(nvarchar(15), cu.Id) like @searchtext
                                                or cu.CustomerNo like @SearchText)
				                                and (cc.CompanyId = @CompanyId
				                                and cc.IsLead = 0
                                                {2}) 
                                    order by IsActive desc

                                    ";
            string subquery = "";
            if (ispermit)
            {
                subquery = "";
            }
            else
            {
                subquery = string.Format("and (cus.Installer='{0}' or cus.Soldby='{0}' or cus.AccessGivenTo = '{0}')", empid);
            }
            try
            {
                sqlQuery = string.Format(sqlQuery,
                    companyId,
                    key,
                    subquery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(key))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(key.Trim())));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        public DataTable GetLeadssByKeyAndCompanyId(Guid companyId, string key, string emptag, string emprole, Guid empid, bool ispermit)
        {
            bool isNumeric = Regex.IsMatch(key, @"\d");
            if (isNumeric && key.Length == 10)
            {
                //long SSN = 0;
                //if (long.TryParse(key, out SSN))
                //{
                //    key = string.Format("{0:0##-###-####}", SSN).TrimStart('-');
                //}
            }
            string sqlQuery = @"/*Declare @SearchText nvarchar(500)
                                set @searchtext='%{1}%' */


                                select cus.*,lookleadsource.DisplayText as LeadSourceVal,lookleadsource.ParentDataKey as LeadSourceParent,cm.RefenrenceId, emp.FirstName + ' ' + emp.LastName as EMPNUM from customer cus
                                left join CustomerCompany cc
                                on cc.CustomerId=cus.CustomerId
                                left join customermigration cm on cm.CustomerId = cus.CustomerId
                                LEFT JOIN Lookup lookleadsource on lookleadsource.DataValue=cus.LeadSource and cus.LeadSource !='-1'
                                left join Employee emp
								on CONVERT(nvarchar(50), emp.UserId) = cus.Soldby
								or CONVERT(nvarchar(50), emp.UserId) = cus.Installer
								or CONVERT(nvarchar(50), emp.UserId) = cus.QA1
								or CONVERT(nvarchar(50), emp.UserId) = cus.QA2
                                where (cus.Title+' '+cus.FirstName+' '+cus.LastName like @searchtext 
                                            or cus.FirstName like @searchtext
				                            or cus.LastName like @searchtext
                                            or cus.DBA like @searchtext
				                            or cus.Title like @searchtext
                                            or cus.FirstName + ' '+cus.LastName like @searchtext
                                            or cus.BusinessName like @searchtext
				                            or cus.PrimaryPhone like @searchtext
                                            or cus.SecondaryPhone like @searchtext
                                            or cus.CellNo like @searchtext
	                                        or cus.Id like @searchtext
                                            or cus.Street like @searchtext
				                            or cus.EmailAddress like @searchtext
                                            or cm.RefenrenceId like @searchtext
                                            or cus.Address like @searchtext)
				                            and (cc.CompanyId ='{0}'
				                            and cc.IsLead = 1)
                                            {2}                    ";
            string subquery = "";
            if (ispermit)
            {
                subquery = "";
            }
            else
            {
                subquery = string.Format("and (cus.Installer='{0}' or cus.Soldby='{0}' or cus.AccessGivenTo = '{0}')", empid);
            }
            try
            {
                sqlQuery = string.Format(sqlQuery, companyId, key, subquery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(key))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(key.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllCustomerListByCompany(Guid companyId)
        {
            string sqlQuery = @"select cs.*
                                from Customer cs
                                left join CustomerCompany Ccom
                                on cs.CustomerId = Ccom.CustomerId
                                where Ccom.CompanyId ='{0}' and Ccom.IsLead = 0";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyId);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        public DataTable GetAllCustomerListByFiltering(Guid CompanyId, string UserList, string SourceList, string firstdate, string lastdate)
        {
            string sqlQuery = @"select cus.*
                                from Customer cus
                                inner join CustomerCompany CCom
                                on cus.CustomerId = CCom.CustomerId 
                                where CCom.CompanyId ='{0}' and CCom.IsLead = 0";
            string subquery = "";

            if (SourceList != "-1" && SourceList != null)
            {
                subquery = string.Format(" and cus.LeadSource = '{0}'", SourceList);
                sqlQuery += subquery;
            }
            if (UserList != "-1" && UserList != null)
            {
                subquery = string.Format(" and cus.Id= '{0}' ", UserList);
                sqlQuery += subquery;
            }

            if (firstdate != "" && firstdate != null)
            {
                if (lastdate != "" && lastdate != null)
                {
                    subquery = string.Format(" and cus.LastUpdatedDate between '{0}' and '{1}'", firstdate, lastdate);
                    sqlQuery += subquery;
                }
            }

            try
            {
                sqlQuery = string.Format(sqlQuery, CompanyId);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetCustomerQA1StatusByCompanyIdAndCustomerId(Guid Companyid, Guid CustomerId)
        {
            string sqlQuery = @"select Case when COUNT(qa.Answer) = 0 then null
                                else
	                                (cast((select COUNT(qa.Answer) 
		                                from QaQuestion qq
                                left join QaAnswer qa
	                                on qq.CompanyId = qa.CompanyId
	                                and qq.Id = qa.QuestionId
	                                where qq.Qa1 = 'true' and 
	                                qa.Answer = 'true'
                                    and qa.CompanyId = '{0}'
	                                and qa.CustomerId = '{1}') as float
                                    )/(cast(COUNT(qa.Answer) as float)
	                                )) * 100 end as QA1COunt
	                                from QaQuestion qq
                                left join QaAnswer qa
	                                on qq.CompanyId = qa.CompanyId
	                                and qq.Id = qa.QuestionId
	                                where qq.Qa1 = 'true'
	                                and qa.CompanyId = '{0}'
	                                and qa.CustomerId = '{1}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, Companyid, CustomerId);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        public DataTable GetCustomerQA2StatusByCompanyIdAndCustomerId(Guid Companyid, Guid CustomerId)
        {
            string sqlQuery = @"select count(_QAa.Id) as QA2COunt
                                from Customer _Cus
                                left join CustomerCompany _CC
	                                on _CC.CustomerId = _Cus.CustomerId
                                left join QaAnswer _QAa
	                                on _Cus.CustomerId = _QAa.CustomerId
                                left join QaQuestion _Qaq
	                                on _Qaq.Id = _QAa.QuestionId
                                where 
	                                _QAa.QuestionId is not null 
	                                and _Qaq.Qa2 = 1 
	                                and _Qaq.CompanyId = '{0}'
	                                and _CC.CustomerId = '{1}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, Companyid, CustomerId);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception)
            {
                return null;
            }
        }


        public bool UpdateCustomerChange(Guid CustomerId, string ColumnName, string NewValue, DateTime LastUpdatedDate, Guid LastUpdatedByUid, string LastUpdatedBy)
        {
            var mailQuery = "";
            if (ColumnName == "EmailAddress")
            {
                mailQuery = ",EmailVerified='false'";
            }
            string sqlQuery = @"Update Customer
                                Set {1} = '{2}',LastUpdatedDate = '{3}',LastUpdatedByUid ='{4}',LastUpdatedBy='{5}' {6} where CustomerId = '{0}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, CustomerId, ColumnName, NewValue, LastUpdatedDate, LastUpdatedByUid, LastUpdatedBy, mailQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    ExecuteCommand(cmd);
                    return true;
                }
            }
            catch (Exception)
            {
                return false;
            }

        }

        public bool UpdateBatchNumber(Guid CustomerId, string BatchNumber)
        {
            string sqlQuery = @"Update SalesCommission
                                Set Batch = '{1}' where CustomerId = '{0}'
                                 Update TechCommission
                                Set Batch = '{1}' where CustomerId = '{0}'
                                 Update AddMemberCommission
                                Set Batch = '{1}' where CustomerId = '{0}'
                                 Update ServiceCallCommission
                                Set Batch = '{1}' where CustomerId = '{0}'
                                 Update FollowUpCommission
                                Set Batch = '{1}' where CustomerId = '{0}'
                                 Update RescheduleCommission
                                Set Batch = '{1}' where CustomerId = '{0}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, CustomerId, BatchNumber);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    ExecuteCommand(cmd);
                    return true;
                }
            }
            catch (Exception)
            {
                return false;
            }

        }
        public DataSet GetAllMarginReport(DateTime? start, DateTime? end, string searchtext, int pageno, int pagesize, string sort)
        {
            string DateQuery = "";
            string SearchTextQ = "";
            string sqlorderby = " order by Id desc";
            string sqlorderby1 = " order by #ft.Id desc";
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                SearchTextQ = string.Format("where customerName like @SearchText");
            }
            if (start.HasValue && end.HasValue && start.Value != new DateTime() && end.Value != new DateTime())
            {
                DateQuery = string.Format("and cus.CreatedDate between '{0}' and '{1}'", start.Value.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss"), end.Value.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss"));
            }
            if (!string.IsNullOrWhiteSpace(sort))
            {
                if (sort == "ascending/id")
                {
                    sqlorderby = " order by id asc";
                    sqlorderby1 = " order by #ft.id asc";
                }
                else if (sort == "descending/id")
                {
                    sqlorderby = " order by id desc ";
                    sqlorderby1 = " order by #ft.id desc ";
                }
                else if (sort == "ascending/name")
                {
                    sqlorderby = " order by customerName asc";
                    sqlorderby1 = " order by #ft.customerName asc";
                }
                else if (sort == "descending/name")
                {
                    sqlorderby = " order by customerName desc ";
                    sqlorderby1 = " order by #ft.customerName desc ";
                }
                else if (sort == "ascending/businessname")
                {
                    sqlorderby = " order by BusinessName asc";
                    sqlorderby1 = " order by #ft.BusinessName asc";
                }
                else if (sort == "descending/businessname")
                {
                    sqlorderby = " order by BusinessName desc ";
                    sqlorderby1 = " order by #ft.BusinessName desc ";
                }
                else if (sort == "ascending/billAddress")
                {
                    sqlorderby = " order by StreetPrevious asc";
                    sqlorderby1 = " order by #ft.StreetPrevious asc";
                }
                else if (sort == "descending/billAddress")
                {
                    sqlorderby = " order by StreetPrevious desc";
                    sqlorderby1 = " order by #ft.StreetPrevious desc";
                }
                else if (sort == "ascending/billAddress2")
                {
                    //sqlorderby = " order by StreetPrevious asc";
                    //sqlorderby1 = " order by #ft.StreetPrevious asc"; 
                }
                else if (sort == "descending/billAddress2")
                {
                    //sqlorderby = " order by StreetPrevious desc";
                    //sqlorderby1 = " order by #ft.StreetPrevious desc";
                }
                else if (sort == "ascending/billcity")
                {
                    sqlorderby = " order by CityPrevious asc";
                    sqlorderby1 = " order by #ft.CityPrevious asc";
                }
                else if (sort == "descending/billcity")
                {
                    sqlorderby = " order by CityPrevious desc ";
                    sqlorderby1 = " order by #ft.CityPrevious desc ";
                }
                else if (sort == "ascending/billstate")
                {
                    sqlorderby = " order by StatePrevious asc";
                    sqlorderby1 = " order by #ft.StatePrevious asc";
                }
                else if (sort == "descending/billstate")
                {
                    sqlorderby = " order by StatePrevious desc ";
                    sqlorderby1 = " order by #ft.StatePrevious desc ";
                }
                else if (sort == "ascending/billzip")
                {
                    sqlorderby = " order by ZipCodePrevious asc";
                    sqlorderby1 = " order by #ft.ZipCodePrevious asc";
                }
                else if (sort == "descending/billzip")
                {
                    sqlorderby = " order by ZipCodePrevious desc ";
                    sqlorderby1 = " order by #ft.ZipCodePrevious desc ";
                }
                else if (sort == "ascending/siteaddress")
                {
                    sqlorderby = " order by Street asc";
                    sqlorderby1 = " order by #ft.Street asc";
                }
                else if (sort == "descending/siteaddress")
                {
                    sqlorderby = " order by Street desc";
                    sqlorderby1 = " order by #ft.Street desc";
                }
                else if (sort == "ascending/sitecity")
                {
                    sqlorderby = " order by City asc";
                    sqlorderby1 = " order by #ft.City asc";
                }
                else if (sort == "descending/sitecity")
                {
                    sqlorderby = " order by City desc";
                    sqlorderby1 = " order by #ft.City desc";
                }
                else if (sort == "ascending/sitestate")
                {
                    sqlorderby = " order by State asc";
                    sqlorderby1 = " order by #ft.State asc";
                }
                else if (sort == "descending/sitestate")
                {
                    sqlorderby = " order by State desc";
                    sqlorderby1 = " order by #ft.State desc";
                }
                else if (sort == "ascending/sitezip")
                {
                    sqlorderby = " order by ZipCode asc";
                    sqlorderby = " order by #ft.ZipCode asc";
                }
                else if (sort == "descending/sitezip")
                {
                    sqlorderby = " order by ZipCode desc";
                    sqlorderby1 = " order by #ft.ZipCode desc";
                }
                else if (sort == "ascending/customerno")
                {
                    sqlorderby = " order by CustomerNo asc";
                    sqlorderby1 = " order by #ft.CustomerNo asc";
                }
                else if (sort == "descending/customerno")
                {
                    sqlorderby = " order by CustomerNo desc";
                    sqlorderby1 = " order by #ft.CustomerNo desc";
                }
                else if (sort == "ascending/centralstation")
                {
                    sqlorderby = " order by CSProvider asc";
                    sqlorderby1 = " order by #ft.CSProvider asc";
                }
                else if (sort == "descending/centralstation")
                {
                    sqlorderby = " order by CSProvider desc";
                    sqlorderby1 = " order by #ft.CSProvider desc";
                }
                else if (sort == "ascending/paneltype")
                {
                    sqlorderby = " order by PanelType asc";
                    sqlorderby1 = " order by #ft.PanelType asc";
                }
                else if (sort == "descending/paneltype")
                {
                    sqlorderby = " order by PanelType desc";
                    sqlorderby1 = " order by #ft.PanelType desc";
                }
                else if (sort == "ascending/cellbackupco")
                {
                    sqlorderby = " order by CellBackupCompany asc";
                    sqlorderby1 = " order by #ft.CellBackupCompany asc";
                }
                else if (sort == "descending/cellbackupco")
                {
                    sqlorderby = " order by CellBackupCompany desc";
                    sqlorderby1 = " order by #ft.CellBackupCompany desc";
                }
                else if (sort == "ascending/contractdate")
                {
                    sqlorderby = " order by ContractStartDate asc";
                    sqlorderby1 = " order by #ft.ContractStartDate asc";
                }
                else if (sort == "descending/contractdate")
                {
                    sqlorderby = " order by ContractStartDate desc";
                    sqlorderby1 = " order by #ft.ContractStartDate desc";
                }
                else if (sort == "ascending/contracttrem")
                {
                    sqlorderby = " order by ContractTeam asc";
                    sqlorderby1 = " order by #ft.ContractTeam asc";
                }
                else if (sort == "descending/contracttrem")
                {
                    sqlorderby = " order by ContractTeam desc";
                    sqlorderby1 = " order by #ft.ContractTeam desc";
                }
                else if (sort == "ascending/contractrenewal")
                {
                    sqlorderby = " order by RenewalTerm asc";
                    sqlorderby1 = " order by RenewalTerm asc";
                }
                else if (sort == "descending/contractrenewal")
                {
                    sqlorderby = " order by RenewalTerm desc";
                    sqlorderby1 = " order by #ft.RenewalTerm desc";
                }
                else if (sort == "ascending/sitecustomescincedate")
                {
                    sqlorderby = " order by CustomerSinceDate asc";
                    sqlorderby1 = " order by #ft.CustomerSinceDate asc";
                }
                else if (sort == "descending/sitecustomescincedate")
                {
                    sqlorderby = " order by CustomerSinceDate desc";
                    sqlorderby1 = " order by #ft.CustomerSinceDate desc";
                }
                else if (sort == "ascending/sitetype")
                {
                    sqlorderby = " order by Type asc";
                    sqlorderby1 = " order by #ft.Type asc";
                }
                else if (sort == "descending/sitetype")
                {
                    sqlorderby = " order by Type desc";
                    sqlorderby1 = " order by #ft.Type desc";
                }
                else if (sort == "ascending/creditscore")
                {
                    sqlorderby = " order by CreditScore asc";
                    sqlorderby1 = " order by #ft.CreditScore asc";
                }
                else if (sort == "descending/creditscore")
                {
                    sqlorderby = " order by CreditScore desc";
                    sqlorderby1 = " order by #ft.CreditScore desc";
                }
                else if (sort == "ascending/billedRMR")
                {
                    sqlorderby = " order by BillAmount asc";
                    sqlorderby1 = " order by #ft.BillAmount asc";
                }
                else if (sort == "descending/billedRMR")
                {
                    sqlorderby = " order by BillAmount desc";
                    sqlorderby1 = " order by #ft.BillAmount desc";
                }
                else if (sort == "ascending/canceleffectivedate")
                {
                    sqlorderby = " order by CancellationDate asc";
                    sqlorderby1 = " order by #ft.CancellationDate asc";
                }
                else if (sort == "descending/canceleffectivedate")
                {
                    sqlorderby = " order by CancellationDate desc";
                    sqlorderby1 = " order by #ft.CancellationDate desc";
                }
                else if (sort == "ascending/contractval")
                {
                    sqlorderby = " order by ContractValue asc";
                    sqlorderby1 = " order by #ft.ContractValue asc";
                }
                else if (sort == "descending/contractval")
                {
                    sqlorderby = " order by ContractValue desc";
                    sqlorderby1 = " order by #ft.ContractValue desc";
                }
                else if (sort == "ascending/purchaseprice")
                {
                    sqlorderby = " order by PurchasePrice asc";
                    sqlorderby1 = " order by #ft.PurchasePrice asc";
                }
                else if (sort == "descending/purchaseprice")
                {
                    sqlorderby = " order by PurchasePrice desc";
                    sqlorderby1 = " order by #ft.PurchasePrice desc";
                }
                else if (sort == "ascending/weeklybatchno")
                {
                    sqlorderby = " order by WeeklyBatch asc";
                    sqlorderby1 = " order by #ft.WeeklyBatch asc";
                }
                else if (sort == "descending/weeklybatchno")
                {
                    sqlorderby = " order by WeeklyBatch desc";
                    sqlorderby1 = " order by #ft.WeeklyBatch desc";
                }
                else if (sort == "ascending/monthlybatchno")
                {
                    sqlorderby = " order by MonthlyBatch asc";
                    sqlorderby1 = " order by #ft.MonthlyBatch asc";
                }
                else if (sort == "descending/monthlybatchno")
                {
                    sqlorderby = " order by MonthlyBatch desc";
                    sqlorderby1 = " order by #ft.MonthlyBatch desc";
                }
                else if (sort == "ascending/acctownership")
                {
                    sqlorderby = " order by Ownership asc";
                    sqlorderby1 = " order by #ft.Ownership asc";
                }
                else if (sort == "descending/acctownership")
                {
                    sqlorderby = " order by Ownership desc";
                    sqlorderby1 = " order by #ft.Ownership desc";
                }
                else if (sort == "ascending/replacement")
                {
                    sqlorderby = " order by Replacement asc";
                    sqlorderby1 = " order by #ft.Replacement asc";
                }
                else if (sort == "descending/replacement")
                {
                    sqlorderby = " order by Replacement desc";
                    sqlorderby1 = " order by #ft.Replacement desc";
                }
                else if (sort == "ascending/notfortransfer")
                {
                    sqlorderby = " order by Transfer asc";
                    sqlorderby1 = " order by #ft.Transfer asc";
                }
                else if (sort == "descending/notfortransfer")
                {
                    sqlorderby = " order by Transfer desc";
                    sqlorderby1 = " order by #ft.Transfer desc";
                }
                else if (sort == "ascending/fcreplacement")
                {
                    sqlorderby = " order by FCReplacement asc";
                    sqlorderby1 = " order by #ft.FCReplacement asc";
                }
                else if (sort == "descending/fcreplacement")
                {
                    sqlorderby = " order by FCReplacement desc";
                    sqlorderby1 = " order by #ft.FCReplacement desc";
                }
                else if (sort == "ascending/salesperson")
                {
                    sqlorderby = " order by SalesPerson asc";
                    sqlorderby1 = " order by #ft.SalesPerson asc";
                }
                else if (sort == "descending/salesperson")
                {
                    sqlorderby = " order by SalesPerson desc";
                    sqlorderby1 = " order by #ft.SalesPerson desc";
                }
                else if (sort == "ascending/comacct")
                {
                    //sqlorderby = " order by SalesPerson asc";
                    //sqlorderby1 = " order by #ft.SalesPerson asc";
                }
                else if (sort == "descending/comacct")
                {
                    //sqlorderby = " order by SalesPerson desc";
                    //sqlorderby1 = " order by #ft.SalesPerson desc";
                }
                else if (sort == "ascending/cellserialno")
                {
                    sqlorderby = " order by CellSerialNo asc";
                    sqlorderby1 = " order by #ft.CellSerialNo asc";
                }
                else if (sort == "descending/cellserialno")
                {
                    sqlorderby = " order by CellSerialNo desc";
                    sqlorderby1 = " order by #ft.CellSerialNo desc";
                }
                else if (sort == "ascending/nopoo")
                {
                    sqlorderby = " order by NOPOO asc";
                    sqlorderby1 = " order by #ft.NOPOO asc";
                }
                else if (sort == "descending/nopoo")
                {
                    sqlorderby = " order by NOPOO desc";
                    sqlorderby1 = " order by #ft.NOPOO desc";
                }


            }
            string sqlQuery = @"DECLARE @Date nvarchar(50)
	                                DECLARE @pagestart int
	                                DECLARE @pageend int
	                                DECLARE @pageno int
	                                DECLARE @pagesize int

                                    SET @pageno = {0}
									SET @pagesize = {1}
                                    SET @pagestart=(@pageno-1)* @pagesize 
                                    SET @pageend = @pagesize
                                      select distinct cus.Id,
                                           CASE 
	                                        WHEN (cus.DBA = '' or cus.DBA IS NULL) AND  (cus.BusinessName = '' or cus.BusinessName IS NULL) THEN cus.FirstName +' '+cus.LastName
	                                        WHEN (cus.DBA = '' or cus.DBA IS NULL)  THEN cus.BusinessName
	                                        ELSE  cus.DBA
                                        END as customerName,cus.BusinessName,cus.StreetPrevious,cus.CityPrevious,cus.StatePrevious,cus.ZipCodePrevious,cus.Street,cus.State,cus.City,cus.ZipCode,cus.CustomerNo,cus.CSProvider,cus.ContractTeam,cus.RenewalTerm,cus.Type,cus.CreditScore,Format(cus.BillAmount,'N2') [BillAmount],cus.ContractValue,cus.PurchasePrice,cus.Ownership
										 --,cusExtended.CustomerSince
                                        ,cusExtended.ContractStartDate,cusExtended.MonthlyBatch,cusExtended.Batch,cusExtended.CustomerSince 
                                        ,emp.FirstName+' '+emp.LastName as SalesPerson,setupalm.PanelType
                                        ,(select top 1  ccq.CancellationDate    from [CustomerCancellationQueue] ccq where  ccq.CustomerId = cus.CustomerId ORDER BY id desc ) as CancellationDate,
										(select top 1  RBS.IsPOO   from recurringBillingSchedule RBS where  RBS.CustomerId = cus.CustomerId  ORDER BY id desc) as NOPOO,
										(select top 1  RBS.IsReplacement    from recurringBillingSchedule RBS where  RBS.CustomerId = cus.CustomerId ORDER BY id desc ) as Replacement, 
										(select top 1  RBS.IsTransfer    from recurringBillingSchedule RBS where  RBS.CustomerId = cus.CustomerId ORDER BY id desc ) as [Transfer] ,
										(select top 1  RBS.IsFCReplacement    from recurringBillingSchedule RBS where  RBS.CustomerId = cus.CustomerId ORDER BY id desc ) as FCReplacement, 
                                        cusExtended.CellSerialNo ,(select DisplayText  from lookup where  DataKey = 'Front-End' and  DataValue = cusExtended.FrontEnd) as CellBackupCompany
                                         into #tempmain from customer cus 
                                            left join CustomerCompany Ccom on  cus.CustomerId = Ccom.CustomerId
										   left join CustomerExtended cusExtended  on cusExtended.customerid = cus.CustomerId
                                           left join Employee emp on emp.UserId=cus.SoldBy1
                                           left join SetupAlarm setupalm on setupalm.customerid =cus.CustomerId
                                           --left join [CustomerCancellationQueue] ccq on ccq.customerId = cus.CustomerId
                                           where 
                                            Ccom.IsLead = 0
                                           and Ccom.IsActive = 1
                                           and cus.JoinDate is not null  {3}
                                   select  *  into #temp2 from #tempmain  {2}
                               
                                select top(@pageend) * into #tempFinal from #temp2 where Id not in (Select TOP (@pagestart)  #ft.Id from #tempmain #ft {5}) {4}
                                select  *  from #tempFinal  {4}
                                select COUNT(*) Total from #temp2
                                            
                                              
                              
                                drop table #tempmain
                                drop table #tempFinal
                                drop table #temp2";

            try
            {
                sqlQuery = string.Format(sqlQuery,
                                        pageno, // 0
                                        pagesize, // 1
                                        SearchTextQ, //2
                                        DateQuery, // 3
                                        sqlorderby, // 4
                                        sqlorderby1 //5
                                        );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pNVarChar("SearchText", string.Format("%{0}%", HttpUtility.UrlDecode(searchtext))));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataSet GetCustomerByFilterAuditReccuring(CustomerFilter filter)
        {

            string SoldByQuery = "";
            string sqlQuery = @" 
                                declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

                                SELECT Distinct 
                                cus.Id ,
                                {18} as DisplayName,
                                cus.CustomerId,
                                RBS.ScheduleId,RBSI.ProductName,RBSI.Amount as RMRAmount,RBSI.CycleStartDate as RMRCycleStartDate,
                                    CASE 
                                    WHEN CHARINDEX('<br />', RBS.BillingAddress) > 0 
                                    AND CHARINDEX('<br />', RBS.BillingAddress, CHARINDEX('<br />', RBS.BillingAddress) + 1) > 0 
                                    THEN SUBSTRING(
                                    RBS.BillingAddress,
                                    CHARINDEX('<br />', RBS.BillingAddress) + 6,
                                    NULLIF(
                                    CHARINDEX('<br />', RBS.BillingAddress, CHARINDEX('<br />', RBS.BillingAddress) + 1) 
                                    - CHARINDEX('<br />', RBS.BillingAddress) - 6,
                                    0
                                    )
                                    )
                                    ELSE NULL
                                    END AS BillAdd1,

                                    CASE 
                                    WHEN CHARINDEX('<br />', RBS.BillingAddress, CHARINDEX('<br />', RBS.BillingAddress) + 1) > 0
                                    AND CHARINDEX(',', RBS.BillingAddress, CHARINDEX('<br />', RBS.BillingAddress, CHARINDEX('<br />', RBS.BillingAddress) + 1)) > 0
                                    THEN LTRIM(SUBSTRING(
                                    RBS.BillingAddress,
                                    CHARINDEX('<br />', RBS.BillingAddress, CHARINDEX('<br />', RBS.BillingAddress) + 1) + 6,
                                    NULLIF(
                                    CHARINDEX(',', RBS.BillingAddress, CHARINDEX('<br />', RBS.BillingAddress, CHARINDEX('<br />', RBS.BillingAddress) + 1)) 
                                    - CHARINDEX('<br />', RBS.BillingAddress, CHARINDEX('<br />', RBS.BillingAddress) + 1) - 6,
                                    0
                                    )
                                    ))
                                    ELSE NULL
                                    END AS BillCity,

                                    CASE 
                                    WHEN CHARINDEX(',', RBS.BillingAddress) > 0
                                    THEN LTRIM(SUBSTRING(
                                    RBS.BillingAddress,
                                    CHARINDEX(',', RBS.BillingAddress) + 2,
                                    2
                                    ))
                                    ELSE NULL
                                    END AS BillState,

                                    CASE 
                                    WHEN CHARINDEX(',', RBS.BillingAddress) > 0
                                    AND CHARINDEX('<br />', RBS.BillingAddress, CHARINDEX(',', RBS.BillingAddress)) > CHARINDEX(',', RBS.BillingAddress) + 5
                                    THEN LTRIM(SUBSTRING(
                                    RBS.BillingAddress,
                                    CHARINDEX(',', RBS.BillingAddress) + 5,
                                    NULLIF(
                                    CHARINDEX('<br />', RBS.BillingAddress, CHARINDEX(',', RBS.BillingAddress)) 
                                    - (CHARINDEX(',', RBS.BillingAddress) + 5),
                                    0
                                    )
                                    ))
                                    ELSE NULL
                                    END AS BillZip,
                                pinfo.CardExpireDate,
                                pinfo.RoutingNo,
                                CASE 
                                WHEN pinfo.RoutingNo IS NOT NULL AND pinfo.RoutingNo <> '' THEN pinfo.AcountNo
                                ELSE ''
                                END AS AutoBank,
    
                                CASE 
                                WHEN pinfo.CardExpireDate IS NOT NULL AND pinfo.CardExpireDate <> '' THEN pinfo.CardNumber
                                ELSE ''
                                END AS AutoCC,
                                CASE 
                                WHEN pinfo.RoutingNo IS NOT NULL AND pinfo.RoutingNo <> '' THEN pinfo.AccountName
                                ELSE ''
                                END AS BankAccountName,
                                CASE 
                                WHEN pinfo.CardExpireDate IS NOT NULL AND pinfo.CardExpireDate <> '' THEN pinfo.AccountName
                                ELSE ''
                                END AS CardAccountName,
                                CASE 
                                WHEN COALESCE(NULLIF(pinfoPro.Type, ''), '') = '' THEN 'Invoice'
                                WHEN LEFT(pinfoPro.Type, 3) = 'CC_' THEN 'CC'
                                WHEN LEFT(pinfoPro.Type, 4) = 'ACH_' THEN 'ACH'
                                WHEN pinfoPro.Type = 'Invoice' THEN 'Invoice'
                                ELSE pinfoPro.Type
                                END AS BillingMethodType,
                                CASE 
                                WHEN DAY(RBS.PaymentCollectionDate) < 29 AND DAY(RBS.PaymentCollectionDate) > 0 
                                THEN DAY(RBS.PaymentCollectionDate) 
                                ELSE 28 
                                END AS RMRBillDay,
	                            RBS.BillCycle as RMRBillCycle,
                                 RBS.EmailAddress as BillEmailAddress,
                                RBS.StartDate as RMRStartDate,
	                            RBS.CreatedDate as RMRCreatedDate,
                                RBS.PreviousDate as RMRLastBillDate,
                                RBS.NextDate as RMRNextBillDate,
                                RBSI.ProductName as RMRProductName,
	                            RBSI.EffectiveDate as RMREffectiveDate,
                                RBSI.AddedDate as RMRAddedDate,
                                cus.IsActive,
                                CASE 
                                WHEN cus.Ownership = '-1' OR cus.Ownership IS NULL OR cus.Ownership = '' THEN ''
                                ELSE cus.Ownership
                                END AS Ownership,
                                  CASE 
                                        WHEN Busaccounttype.DisplayText = 'Please Select' THEN ''
                                        ELSE Busaccounttype.DisplayText
                                    END AS CSBankAccountType,
                                lkstatus.DisplayText as StatusVal,
								SP.FirstName SoldbyFirstName,
								SP.LastName SoldbyLastName,
								Q1.FirstName Q1FirstName, 
								Q1.LastName Q1LastName,
								Q2.FirstName Q2FirstName,
								Q2.LastName Q2LastName, 
                                cus.CutInDate ,
                                cus.MonthlyMonitoringFee ,
                                cus.State,
								cus.City,
                                cus.PlatformId,
                                Ccom.ConvertionDate,
                                --cf.FileFullName as NameFile,
                                '' as NameFile,
                                Ins.FirstName +' '+ Ins.LastName as TechnicianName,
                                SP.FirstName +' '+ SP.LastName as PersonSales,
                                (select SUM(_invoice.BalanceDue) from Invoice _invoice
								where cus.CustomerId = _invoice.CustomerId
								and (_invoice.Status = 'Open' or _invoice.Status = 'Partial')) as UnpaidInvoiceTotal,
								Created.FirstName +' '+ Created.LastName as CreatedByVal,
                                cus.DoNotCall,
                                cus.PreferredContactMethod
                                ,_AppoinmentSetBy.FirstName +' '+ _AppoinmentSetBy.LastName as AppoinmentSetByVal
                                --,(Select _emp.FirstName +' '+ _emp.LastName from Employee _emp where _emp.UserId=_extend.AppoinmentSetBy) as AppoinmentSetByVal
                                 
                                ,_extend.ContractStartDate
								,_extend.RemainingContractTerm
                                INTO #CustomerData
                                FROM Customer cus
                                LEFT JOIN CustomerCompany Ccom
                                  ON cus.CustomerId = Ccom.CustomerId

                                Left Join Employee Created on Created.UserId= cus.CreatedByUid
								Left JOin Employee Q1 on convert(nvarchar(50), Q1.UserId) = cus.QA1
								Left JOin Employee Q2 on convert(nvarchar(50), Q2.UserId )= cus.QA2
                                Left Join Employee SP on convert(nvarchar(50), SP.UserId )= cus.Soldby
                                Left Join Employee Ins on CONVERT(nvarchar(50), Ins.UserId )= cus.Installer
                                left join Lookup lkstatus on lkstatus.DataValue = cus.Status and lkstatus.DataKey = 'LeadStatus'
                                left join Lookup Busaccounttype on Busaccounttype.DataValue = cus.BusinessAccountType and Busaccounttype.DataKey = 'BussinessAccountType'
                                left join QaAnswer _QAns on cus.CustomerId = _QAns.CustomerId
                                left join [Lookup] lkinstalledstatus on lkinstalledstatus.DataValue = iif(cus.InstalledStatus != '-1', cus.InstalledStatus, '') and lkinstalledstatus.DataKey = 'InstalledStatus'
                                --left join CustomerFile cf on cf.CustomerId = cus.CustomerId
                                --and cf.FileFullName like '%Agreement.Pdf'
                                Left Join Employee emp
                                on cus.LastUpdatedBy = emp.UserName
                                left join Invoice inv on inv.CustomerId = cus.CustomerId
                                left join CustomerExtended _extend on _extend.CustomerId = cus.CustomerId
                                Left Join Employee _AppoinmentSetBy on _AppoinmentSetBy.UserId=_extend.AppoinmentSetBy
                                left JOIN RecurringBillingSchedule RBS ON RBS.CustomerId = cus.CustomerId 
								left JOIN RecurringBillingScheduleItems RBSI ON RBSI.ScheduleId = RBS.ScheduleId 
                                left JOIN PaymentInfo pinfo on RBS.CustomerPaymentProfileId = pinfo.Id
                                left JOIN PaymentProfileCustomer pinfoPro on pinfo.Id = pinfoPro.PaymentInfoId
                                WHERE Ccom.CompanyId = '{0}' 
                                AND Ccom.IsLead = 0
                                and Ccom.IsActive = 1
                                and cus.JoinDate is not null
   	                            and RBSI.ProductName is not null
                             
                                {19}
                                {17}
                                {6}
                                {3}
                                {4}
                                {5}
                                {7}
                                {8}
                                {9}
                                {11}
                                {12}
                                {13}
                                {14}
                                {15}
                                {16}
                                {1}
                                --{10}
            

                                --select * into #CustomerFilterData
								--FROM #CustomerData
                                {2}

                                SELECT TOP (@pagesize)
                                  *  Into #CustomerResultData
                                FROM #CustomerData
                                where Id NOT IN(Select TOP (@pagestart)  Id from #CustomerData #cd order by #cd.RMRCreatedDate  desc)
							    order by RMRCreatedDate  desc      


								select cfd.*,cus.CustomerNo,
                                cus.Title,
                                cus.FirstName ,
                                cus.LastName ,
                                cus.MiddleName ,
                                cus.BusinessName ,
                                cus.SSN,
		                        cus.[Status],
		                        cus.Street,
		                        cus.ZipCode, 
		                        cus.[Address],
		                        cus.EmailAddress,
		                        cus.PrimaryPhone,
                                cus.SecondaryPhone,
								cus.DateofBirth,
								cus.LeadSource,
								cus.LastUpdatedDate,
								cus.LastUpdatedBy,
                                cus.StreetType,
								cus.Appartment,
                                cus.CellNo,
                                cus.Fax,
                                cus.CallingTime,
                                cus.Address2,
                                cus.Country,
                                cus.StreetPrevious,
                                cus.CityPrevious,
                                cus.StatePrevious,
                                cus.ZipCodePrevious,
                                cus.CountryPrevious,
                                cus.AccountNo,
                                cus.IsAlarmCom,
                                cus.CreditScore,
                                cus.CreditScoreValue,
                                cus.ContractTeam,
                                cus.RenewalTerm,
                                cus.FundingCompany,
                                cus.CellularBackup,
                                cus.CustomerFunded,
                                cus.PlatformId,
                                cus.Maintenance,
                                cus.Note,
                                cus.SalesDate,
                                cus.FollowUpDate,
                                cus.InstallDate,
                                cus.Installer,
                                cus.FundingDate,
                                cus.ReminderDate,
                                cus.QA1Date,
                                cus.QA2Date,
                                cus.BillAmount,
                                cus.PaymentMethod,
                                cus.BillCycle,
                                cus.LeadSourceType,
                                cus.BillDay,
                                cus.BillNotes,
                                cus.BillTax,
                                cus.BillOutStanding,
                                cus.ServiceDate,
                                cus.Area,
                                cus.Latlng,
                                cus.SecondCustomerNo,
                                cus.AdditionalCustomerNo,
                                cus.IsTechCallPassed,
                                cus.IsDirect,
                                cus.AuthorizeRefId,
                                cus.AuthorizeCusProfileId,
                                cus.AuthorizeCusPaymentProfileId,
                                cus.AuthorizeDescription,
                                cus.IsRequiredCsvSync,
                                cus.Passcode,
                                cus.ActivationFee,
                                cus.FirstBilling,
                                cus.ActivationFeePaymentMethod,
                                cus.LastGeneratedInvoice,
                                cus.Singature,
                                cus.CrossStreet,
                                cus.DBA,
                                cus.AlarmRefId,
                                cus.TransunionRefId,
                                cus.MonitronicsRefId,
                                cus.CentralStationRefId,
                                cus.CmsRefId,
                                cus.PreferedEmail,
                                cus.PreferedSms,
                                cus.IsAgreement,
                                cus.IsFireAccount,
                                cus.CreatedByUid,
                                cus.CreatedDate,
                                cus.LastUpdatedByUid,
                                cus.BusinessAccountType,
                                cus.PhoneType,
                                cus.Carrier,
                                cus.ReferringCustomer,
                                cus.EsistingPanel,
                                cus.[Ownership],
                                cus.PurchasePrice,
                                cus.ContractValue,
                                cus.ChildOf,
                                cus.EmailVerified,
                                cus.HomeVerified,
                                cus.County,
                                cus.CustomerToken,
                                cus.PaymentToken,
                                cus.ScheduleToken,
                                cus.EstCloseDate,
                                cus.ProjectWalkDate,
                                cus.BranchId,
                                cus.SubscriptionStatus,
                                cus.AnnualRevenue,
                                cus.Website,
                                cus.Market,
                                cus.Passengers,
                                cus.Budget,
                                cus.SmartSetUpStep,
                                cus.CustomerAccountType,
                                cus.IsPrimaryPhoneVerified,
                                cus.IsSecondaryPhoneVerified,
                                cus.IsCellNoVerified,
                                cus.JoinDate,
                                cus.[Type],
                                cus.MovingDate,
                                cus.ContactedPerviously,
                                cus.InstalledStatus,
                                cus.AcquiredFrom,
                                cus.FollowUpDate,
                                cus.BuyoutAmountByADS,
                                cus.BuyoutAmountBySalesRep,
                                cus.FinancedTerm,
                                cus.FinancedAmount,
                                cus.Levels,
                                cus.SoldAmount,
                                cus.AgreementEmail,
                                cus.AgreementPhoneNo,
                                cus.TaxExemption,
                                cus.AppoinmentSet,
								--SP.FirstName SoldbyFirstName,
								--SP.LastName SoldbyLastName,
								--Q1.FirstName Q1FirstName, 
								--Q1.LastName Q1LastName,
								--Q2.FirstName Q2FirstName,
								--Q2.LastName Q2LastName, 
                                ISNULL(cfd.SoldbyFirstName,'')+' '+ ISNULL(cfd.SoldbyLastName,'') Soldby,
                                ISNULL(cfd.Q1FirstName,'')+' '+ ISNULL(cfd.Q1LastName,'') QA1,
                                ISNULL(cfd.Q2FirstName,'')+' '+ ISNULL(cfd.Q2LastName,'') QA2,
                                cus.MapscoNo 
								 from #CustomerResultData cfd  
								Left Join Customer cus on cus.CustomerId = cfd.CustomerId
									order by  cfd.RMRCreatedDate desc  
								
								drop table #CustomerResultData


                                select count(*) [TotalCount]
                                from #CustomerData
                                
                                DROP TABLE #CustomerData
                                --DROP TABLE #CustomerFilterData";

            string filtertext = "";
            string filterColumntext = "";
            string filterByBillDay = "";

            string filterByBillCycle = "";
            string filterByBranch = "";
            string filterByDate = "";
            string filterForQA = "";
            string filterByIsActive = "";
            string filterbyUser = "";
            string orderbysql = "order by #cd.RMRStartDate desc";
            string orderbysql1 = "order by cfd.RMRStartDate desc";
            string TotalRMRFilter = "";
            string filterbydaterange = "";
            string BranchQuery = "";
            string filterPackageQuery = "";
            string FilterSubquery = "";
            if (!string.IsNullOrWhiteSpace(filter.SettingOrderBy) && filter.SettingOrderBy != "undefined")
            {
                if (filter.SettingOrderBy == "Id desc")
                {
                    orderbysql = "order by #cd.Id desc";
                    orderbysql1 = "order by Id desc";
                }
                else if (filter.SettingOrderBy == "Id asc")
                {
                    orderbysql = "order by #cd.Id asc";
                    orderbysql1 = "order by Id asc";
                }
                else if (filter.SettingOrderBy == "DisplayName desc")
                {
                    orderbysql = "order by #cd.DisplayName desc";
                    orderbysql1 = "order by DisplayName desc";
                }
                else if (filter.SettingOrderBy == "DisplayName asc")
                {
                    orderbysql = "order by #cd.DisplayName asc";
                    orderbysql1 = "order by DisplayName asc";
                }
                else if (filter.SettingOrderBy == "JoinDate desc")
                {
                    orderbysql = "order by #cd.JoinDate desc";
                    orderbysql1 = "order by JoinDate desc";
                }
                else if (filter.SettingOrderBy == "JoinDate asc")
                {
                    orderbysql = "order by #cd.JoinDate asc";
                    orderbysql1 = "order by JoinDate asc";
                }
                else if (filter.SettingOrderBy == "City desc")
                {
                    orderbysql = "order by #cd.City desc";
                    orderbysql1 = "order by City desc";
                }
                else if (filter.SettingOrderBy == "City asc")
                {
                    orderbysql = "order by #cd.City asc";
                    orderbysql1 = "order by City asc";
                }
                else
                {
                    orderbysql = "order by #cd.Id desc";
                    orderbysql1 = "order by Id desc";
                }
            }


            if (filter.FirstDate != new DateTime() && filter.LastDate != new DateTime())
            {
                var StartDate = filter.FirstDate.SetZeroHour().ClientToUTCTime();
                var EndDate = filter.LastDate.SetMaxHour().ClientToUTCTime();

                filterbydaterange = string.Format(@"AND (RBSI.EffectiveDate between '{0}' and '{1}' 
                                        OR RBSI.EffectiveDate between '{0}' and '{1}' ) ", StartDate, EndDate);
            }
            if (!string.IsNullOrWhiteSpace(filter.InstallationDate) && filter.InstallationDate != "undefined")
            {
                try
                {
                    DateTime date = Convert.ToDateTime(filter.InstallationDate);
                    filterByDate += string.Format(" AND cus.InstallDate between '{0}' and '{1}'", date.ToString("MM-dd-yyyy"), date.AddDays(1).ToString("MM-dd-yyyy"));
                }
                catch (Exception) { }

            }

            if (filter.IsActive.HasValue)
            {
                if (filter.IsActive.Value)
                {
                    filterByIsActive = "AND cus.IsActive = 1";
                }
                else
                {
                    filterByIsActive = "AND cus.IsActive = 0";
                }
            }

            if (!string.IsNullOrWhiteSpace(filter.SearchText) && filter.SearchText != "undefined")
            {
                filtertext = $@"AND (
        CASE 
            WHEN (cus.DBA = '' OR cus.DBA IS NULL) AND (cus.BusinessName = '' OR cus.BusinessName IS NULL) THEN cus.FirstName + ' ' + cus.LastName
            WHEN (cus.DBA = '' OR cus.DBA IS NULL) THEN cus.BusinessName
            ELSE cus.DBA
        END LIKE '%' + '{filter.SearchText}' + '%'  OR CAST(cus.Id AS NVARCHAR) LIKE '%' + '{filter.SearchText}' + '%'
              )";
            }
            if (!string.IsNullOrWhiteSpace(filter.order))
            {
                if (filter.order == "ascending/Branch")
                {
                    orderbysql = "ORDER BY Ownership asc";
                }
                else if (filter.order == "descending/Branch")
                {
                    orderbysql = "ORDER BY Ownership desc";
                }
                else if (filter.order == "ascending/SecondCustomerNo")
                {
                    orderbysql = "ORDER BY SecondCustomerNo asc";
                }
                else if (filter.order == "descending/SecondCustomerNo")
                {
                    orderbysql = "ORDER BY SecondCustomerNo desc";
                }
                else if (filter.order == "ascending/Id")
                {
                    orderbysql = "ORDER BY Id asc";
                }
                else if (filter.order == "descending/Id")
                {
                    orderbysql = "ORDER BY Id desc";
                }
                else if (filter.order == "ascending/DisplayName")
                {
                    orderbysql = "ORDER BY DisplayName asc";
                }
                else if (filter.order == "descending/DisplayName")
                {
                    orderbysql = "ORDER BY DisplayName desc";
                }
                else if (filter.order == "ascending/BillAdd1")
                {
                    orderbysql = "ORDER BY BillAdd1 asc";
                }
                else if (filter.order == "descending/BillAdd1")
                {
                    orderbysql = "ORDER BY BillAdd1 desc";
                }
                else if (filter.order == "ascending/BillCity")
                {
                    orderbysql = "ORDER BY BillCity asc";
                }
                else if (filter.order == "descending/BillCity")
                {
                    orderbysql = "ORDER BY BillCity desc";
                }
                else if (filter.order == "ascending/BillState")
                {
                    orderbysql = "ORDER BY BillState asc";
                }
                else if (filter.order == "descending/BillState")
                {
                    orderbysql = "ORDER BY BillState desc";
                }
                else if (filter.order == "ascending/BillZip")
                {
                    orderbysql = "ORDER BY BillZip asc";
                }
                else if (filter.order == "descending/BillZip")
                {
                    orderbysql = "ORDER BY BillZip desc";
                }
                else if (filter.order == "ascending/BillEmailAddress")
                {
                    orderbysql = "ORDER BY BillEmailAddress asc";
                }
                else if (filter.order == "descending/BillEmailAddress")
                {
                    orderbysql = "ORDER BY BillEmailAddress desc";
                }
                else if (filter.order == "ascending/PrimaryPhone")
                {
                    orderbysql = "ORDER BY PrimaryPhone asc";
                }
                else if (filter.order == "descending/PrimaryPhone")
                {
                    orderbysql = "ORDER BY PrimaryPhone desc";
                }
                else if (filter.order == "ascending/Street")
                {
                    orderbysql = "ORDER BY Street asc";
                }
                else if (filter.order == "descending/Street")
                {
                    orderbysql = "ORDER BY Street desc";
                }
                else if (filter.order == "ascending/City")
                {
                    orderbysql = "ORDER BY City asc";
                }
                else if (filter.order == "descending/City")
                {
                    orderbysql = "ORDER BY City desc";
                }
                else if (filter.order == "ascending/State")
                {
                    orderbysql = "ORDER BY State asc";
                }
                else if (filter.order == "descending/State")
                {
                    orderbysql = "ORDER BY State desc";
                }
                else if (filter.order == "ascending/ZipCode")
                {
                    orderbysql = "ORDER BY ZipCode asc";
                }
                else if (filter.order == "descending/ZipCode")
                {
                    orderbysql = "ORDER BY ZipCode desc";
                }
                else if (filter.order == "ascending/RMRStartDate")
                {
                    orderbysql = "ORDER BY RMRStartDate asc";
                }
                else if (filter.order == "descending/RMRStartDate")
                {
                    orderbysql = "ORDER BY RMRStartDate desc";
                }
                else if (filter.order == "ascending/BillCycle")
                {
                    orderbysql = "ORDER BY BillCycle asc";
                }
                else if (filter.order == "descending/BillCycle")
                {
                    orderbysql = "ORDER BY BillCycle desc";
                }
                else if (filter.order == "ascending/RMRLastBillDate")
                {
                    orderbysql = "ORDER BY RMRLastBillDate asc";
                }
                else if (filter.order == "descending/RMRLastBillDate")
                {
                    orderbysql = "ORDER BY RMRLastBillDate desc";
                }
                else if (filter.order == "ascending/RMRNextBillDate")
                {
                    orderbysql = "ORDER BY RMRNextBillDate asc";
                }
                else if (filter.order == "descending/RMRNextBillDate")
                {
                    orderbysql = "ORDER BY RMRNextBillDate desc";
                }
                else if (filter.order == "ascending/ContractStartDate")
                {
                    orderbysql = "ORDER BY ContractStartDate asc";
                }
                else if (filter.order == "descending/ContractStartDate")
                {
                    orderbysql = "ORDER BY ContractStartDate desc";
                }
                else if (filter.order == "ascending/ContractTeam")
                {
                    orderbysql = "ORDER BY ContractTeam asc";
                }
                else if (filter.order == "descending/ContractTeam")
                {
                    orderbysql = "ORDER BY ContractTeam desc";
                }
                else if (filter.order == "ascending/RenewalTerm")
                {
                    orderbysql = "ORDER BY RenewalTerm asc";
                }
                else if (filter.order == "descending/RenewalTerm")
                {
                    orderbysql = "ORDER BY RenewalTerm desc";
                }
                else if (filter.order == "ascending/RMRProductName")
                {
                    orderbysql = "ORDER BY RMRProductName asc";
                }
                else if (filter.order == "descending/RMRProductName")
                {
                    orderbysql = "ORDER BY RMRProductName desc";
                }
                else if (filter.order == "ascending/BillDay")
                {
                    orderbysql = "ORDER BY BillDay asc";
                }
                else if (filter.order == "descending/BillDay")
                {
                    orderbysql = "ORDER BY BillDay desc";
                }
                else if (filter.order == "ascending/RoutingNo")
                {
                    orderbysql = "ORDER BY RoutingNo asc";
                }
                else if (filter.order == "descending/RoutingNo")
                {
                    orderbysql = "ORDER BY RoutingNo desc";
                }
                else if (filter.order == "ascending/CardExpireDate")
                {
                    orderbysql = "ORDER BY CardExpireDate asc";
                }
                else if (filter.order == "descending/CardExpireDate")
                {
                    orderbysql = "ORDER BY CardExpireDate desc";
                }
                else if (filter.order == "ascending/AccountName")
                {
                    orderbysql = "ORDER BY AccountName asc";
                }
                else if (filter.order == "descending/AccountName")
                {
                    orderbysql = "ORDER BY AccountName desc";
                }

                else
                {
                    orderbysql = string.Concat("ORDER BY ConvertionDate desc, Id Desc");
                }
            }
            string filewrite = "";

            string TotalDueInvoice = "";

            string Othersquery = "";


            if (filter.billday != "-1" && filter.billday != "undefined" && !string.IsNullOrWhiteSpace(filter.billday))
            {
                filterByBillDay = "AND DAY(RBS.PaymentCollectionDate) =" + filter.billday;
            }
            if (filter.billcycle != "-1" && filter.billcycle != "undefined" && !string.IsNullOrWhiteSpace(filter.billcycle))
            {
                filterByBillCycle = "AND RBS.BillCycle = '" + filter.billcycle + "'";

            }
            if (filter.Branch != "-1" && filter.Branch != "undefined" && !string.IsNullOrWhiteSpace(filter.Branch))
            {
                filterByBranch = "AND cus.Ownership = '" + filter.Branch + "'";

            }
            #region Naming Condition
            string NamingSql = "''";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            if (gs != null)
            {
                NamingSql = gs.Value;
            }
            #endregion
            string TotalOpenInvoice = "";

            try
            {
                sqlQuery = string.Format(sqlQuery,
                    /*0*/ filter.CompanyId,
                    /*1*/filterColumntext,
                    /*2*/filtertext,
                    /*3*/ filterByBillDay,
                    /*4*/filterByBillCycle,
                    /*5*/filterByDate,
                    /*6*/filterForQA,
                    /*7*/filterByBranch,
                    /*8*/filterByIsActive,
                    /*9*/filterbyUser,
                    /*10*/orderbysql,
                    /*11*/TotalRMRFilter,
                    /*12*/TotalOpenInvoice,
                    /*13*/TotalDueInvoice,
                    /*14*/filterbydaterange,
                    /*15*/Othersquery,
                    /*16*/BranchQuery,
                    /*17*/SoldByQuery,
                    /*18*/NamingSql,
                    /*19*/filterPackageQuery,
                    /*20*/FilterSubquery,
                    /*21*/orderbysql1);
                filewrite = sqlQuery;
                //System.IO.File.WriteAllText(@"C:\www\rmrcloud.com\transactionId.txt", filewrite); 
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", filter.PageNo));
                    AddParameter(cmd, pInt32("pagesize", filter.PageSize));
                    if (!string.IsNullOrWhiteSpace(filter.SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(filter.SearchText.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                //filewrite = filewrite + "::: " + ex.Message;
                //System.IO.File.WriteAllText(@"C:\www\rmrcloud.com\transactionId.txt", filewrite);
                return null;
            }
        }
        #region Filter CustomerList
        public DataSet GetCustomerListByFilter(CustomerFilter filter)
        {

            string SoldByQuery = "";
            string sqlQuery = @" 
                                declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

                                SELECT Distinct 
                                cus.Id ,
                                {18} as DisplayName,
                                cus.CustomerId, 
                                cus.IsActive,
                                lkstatus.DisplayText as StatusVal,
								SP.FirstName SoldbyFirstName,
								SP.LastName SoldbyLastName,
								Q1.FirstName Q1FirstName, 
								Q1.LastName Q1LastName,
								Q2.FirstName Q2FirstName,
								Q2.LastName Q2LastName, 
                                cus.CutInDate ,
                                cus.MonthlyMonitoringFee ,
                                cus.State,
								cus.City,
                                cus.PlatformId,
                                Ccom.ConvertionDate,
                                --cf.FileFullName as NameFile,
                                '' as NameFile,
                                Ins.FirstName +' '+ Ins.LastName as TechnicianName,
                                SP.FirstName +' '+ SP.LastName as PersonSales,
                                (select SUM(_invoice.BalanceDue) from Invoice _invoice
								where cus.CustomerId = _invoice.CustomerId
								and (_invoice.Status = 'Open' or _invoice.Status = 'Partial')) as UnpaidInvoiceTotal,
								Created.FirstName +' '+ Created.LastName as CreatedByVal,
                                cus.DoNotCall,
                                cus.PreferredContactMethod
                                ,_AppoinmentSetBy.FirstName +' '+ _AppoinmentSetBy.LastName as AppoinmentSetByVal
                                --,(Select _emp.FirstName +' '+ _emp.LastName from Employee _emp where _emp.UserId=_extend.AppoinmentSetBy) as AppoinmentSetByVal
                                ,_extend.ContractStartDate
								,_extend.RemainingContractTerm
                                INTO #CustomerData
                                FROM Customer cus
                                LEFT JOIN CustomerCompany Ccom
                                  ON cus.CustomerId = Ccom.CustomerId

                                Left Join Employee Created on Created.UserId= cus.CreatedByUid
								Left JOin Employee Q1 on convert(nvarchar(50), Q1.UserId) = cus.QA1
								Left JOin Employee Q2 on convert(nvarchar(50), Q2.UserId )= cus.QA2
                                Left Join Employee SP on convert(nvarchar(50), SP.UserId )= cus.Soldby
                                Left Join Employee Ins on CONVERT(nvarchar(50), Ins.UserId )= cus.Installer
                                left join Lookup lkstatus on lkstatus.DataValue = cus.Status and lkstatus.DataKey = 'LeadStatus'
                                left join QaAnswer _QAns on cus.CustomerId = _QAns.CustomerId
                                left join [Lookup] lkinstalledstatus on lkinstalledstatus.DataValue = iif(cus.InstalledStatus != '-1', cus.InstalledStatus, '') and lkinstalledstatus.DataKey = 'InstalledStatus'
                                --left join CustomerFile cf on cf.CustomerId = cus.CustomerId
                                --and cf.FileFullName like '%Agreement.Pdf'
                                Left Join Employee emp
                                on cus.LastUpdatedBy = emp.UserName
                                left join Invoice inv on inv.CustomerId = cus.CustomerId
                                left join CustomerExtended _extend on _extend.CustomerId = cus.CustomerId
                                Left Join Employee _AppoinmentSetBy on _AppoinmentSetBy.UserId=_extend.AppoinmentSetBy
                                WHERE Ccom.CompanyId = '{0}' 
                                AND Ccom.IsLead = 0
                                and Ccom.IsActive = 1
                                and cus.JoinDate is not null
                                {19}
                                {17}
                                {6}
                                {3}
                                {4}
                                {5}
                                {7}
                                {8}
                                {9}
                                {11}
                                {12}
                                {13}
                                {14}
                                {15}
                                {16}
                                {1}
                                --{10}
                                 {20}

                                --select * into #CustomerFilterData
								--FROM #CustomerData
                                --{2}

                                SELECT TOP (@pagesize)
                                  *  Into #CustomerResultData
                                FROM #CustomerData
                                where Id NOT IN(Select TOP (@pagestart)  Id from #CustomerData #cd {10})
							    {21}     


								select cfd.*,cus.CustomerNo,
                                cus.Title,
                                cus.FirstName ,
                                cus.LastName ,
                                cus.MiddleName ,
                                cus.BusinessName ,
                                cus.SSN,
		                        cus.[Status],
		                        cus.Street,
		                        cus.ZipCode, 
		                        cus.[Address],
		                        cus.EmailAddress,
		                        cus.PrimaryPhone,
                                cus.SecondaryPhone,
								cus.DateofBirth,
								cus.LeadSource,
								cus.LastUpdatedDate,
								cus.LastUpdatedBy,
                                cus.StreetType,
								cus.Appartment,
                                cus.CellNo,
                                cus.Fax,
                                cus.CallingTime,
                                cus.Address2,
                                cus.Country,
                                cus.StreetPrevious,
                                cus.CityPrevious,
                                cus.StatePrevious,
                                cus.ZipCodePrevious,
                                cus.CountryPrevious,
                                cus.AccountNo,
                                cus.IsAlarmCom,
                                cus.CreditScore,
                                cus.CreditScoreValue,
                                cus.ContractTeam,
                                cus.FundingCompany,
                                cus.CellularBackup,
                                cus.CustomerFunded,
                                cus.PlatformId,
                                cus.Maintenance,
                                cus.Note,
                                cus.SalesDate,
                                cus.FollowUpDate,
                                cus.InstallDate,
                                cus.Installer,
                                cus.FundingDate,
                                cus.ReminderDate,
                                cus.QA1Date,
                                cus.QA2Date,
                                cus.BillAmount,
                                cus.PaymentMethod,
                                cus.BillCycle,
                                cus.LeadSourceType,
                                cus.BillDay,
                                cus.BillNotes,
                                cus.BillTax,
                                cus.BillOutStanding,
                                cus.ServiceDate,
                                cus.Area,
                                cus.Latlng,
                                cus.SecondCustomerNo,
                                cus.AdditionalCustomerNo,
                                cus.IsTechCallPassed,
                                cus.IsDirect,
                                cus.AuthorizeRefId,
                                cus.AuthorizeCusProfileId,
                                cus.AuthorizeCusPaymentProfileId,
                                cus.AuthorizeDescription,
                                cus.IsRequiredCsvSync,
                                cus.Passcode,
                                cus.ActivationFee,
                                cus.FirstBilling,
                                cus.ActivationFeePaymentMethod,
                                cus.LastGeneratedInvoice,
                                cus.Singature,
                                cus.CrossStreet,
                                cus.DBA,
                                cus.AlarmRefId,
                                cus.TransunionRefId,
                                cus.MonitronicsRefId,
                                cus.CentralStationRefId,
                                cus.CmsRefId,
                                cus.PreferedEmail,
                                cus.PreferedSms,
                                cus.IsAgreement,
                                cus.IsFireAccount,
                                cus.CreatedByUid,
                                cus.CreatedDate,
                                cus.LastUpdatedByUid,
                                cus.BusinessAccountType,
                                cus.PhoneType,
                                cus.Carrier,
                                cus.ReferringCustomer,
                                cus.EsistingPanel,
                                cus.[Ownership],
                                cus.PurchasePrice,
                                cus.ContractValue,
                                cus.ChildOf,
                                cus.EmailVerified,
                                cus.HomeVerified,
                                cus.County,
                                cus.CustomerToken,
                                cus.PaymentToken,
                                cus.ScheduleToken,
                                cus.EstCloseDate,
                                cus.ProjectWalkDate,
                                cus.BranchId,
                                cus.SubscriptionStatus,
                                cus.AnnualRevenue,
                                cus.Website,
                                cus.Market,
                                cus.Passengers,
                                cus.Budget,
                                cus.SmartSetUpStep,
                                cus.CustomerAccountType,
                                cus.IsPrimaryPhoneVerified,
                                cus.IsSecondaryPhoneVerified,
                                cus.IsCellNoVerified,
                                cus.JoinDate,
                                cus.[Type],
                                cus.MovingDate,
                                cus.ContactedPerviously,
                                cus.InstalledStatus,
                                cus.AcquiredFrom,
                                cus.FollowUpDate,
                                cus.BuyoutAmountByADS,
                                cus.BuyoutAmountBySalesRep,
                                cus.FinancedTerm,
                                cus.FinancedAmount,
                                cus.Levels,
                                cus.SoldAmount,
                                cus.AgreementEmail,
                                cus.AgreementPhoneNo,
                                cus.TaxExemption,
                                cus.AppoinmentSet,
								--SP.FirstName SoldbyFirstName,
								--SP.LastName SoldbyLastName,
								--Q1.FirstName Q1FirstName, 
								--Q1.LastName Q1LastName,
								--Q2.FirstName Q2FirstName,
								--Q2.LastName Q2LastName, 
                                ISNULL(cfd.SoldbyFirstName,'')+' '+ ISNULL(cfd.SoldbyLastName,'') Soldby,
                                ISNULL(cfd.Q1FirstName,'')+' '+ ISNULL(cfd.Q1LastName,'') QA1,
                                ISNULL(cfd.Q2FirstName,'')+' '+ ISNULL(cfd.Q2LastName,'') QA2,
                                cus.MapscoNo 
								 from #CustomerResultData cfd  
								Left Join Customer cus on cus.CustomerId = cfd.CustomerId
								{21}  
								
								drop table #CustomerResultData


                                select count(*) [TotalCount]
                                from #CustomerData
                                
                                -- select COUNT(*) [ActiveCounter]
								-- from #CustomerFilterData
								-- where IsActive = 1

                                -- select COUNT(*) [RMRCounter], sum(CONVERT(float, MonthlyMonitoringFee)) [RMRValue]
								-- from #CustomerFilterData
								-- where IsActive = 1
								-- and MonthlyMonitoringFee != ''
								-- and MonthlyMonitoringFee != '-1'
								-- and MonthlyMonitoringFee is not null

                                --select (select SUM(CONVERT(float, inv.TotalAmount))
								--from #CustomerFilterData cusfilter
								--left join Invoice inv on inv.CustomerId = cusfilter.CustomerId
								--where cusfilter.IsActive = 1
								--and inv.IsEstimate = 0
                               -- and (inv.Status = 'Open' or inv.Status = 'Partial')) [OpenInvoiceAmount],

								--(select SUM(CONVERT(float, inv.TotalAmount))
								--from #CustomerFilterData cusfilter
								--left join Invoice inv on inv.CustomerId = cusfilter.CustomerId
								--where cusfilter.IsActive = 1
								--and inv.Status = 'Open'
                                --and inv.DueDate < GETDATE()) [InvoiceDueAmount]


                                DROP TABLE #CustomerData
                                --DROP TABLE #CustomerFilterData";

            string filtertext = "";
            string filterColumntext = "";
            string filterByUserName = "";

            string filterByLeadSource = "";
            string filterByPaymentMethod = "";
            string filterByDate = "";
            string filterForQA = "";
            string filterByIsActive = "";
            string filterbyUser = "";
            string orderbysql = "order by #cd.Id desc";
            string orderbysql1 = "order by Id desc";
            string TotalRMRFilter = "";
            string filterbydaterange = "";
            string BranchQuery = "";
            string filterPackageQuery = "";
            string FilterSubquery = "";
            if (!string.IsNullOrWhiteSpace(filter.SettingOrderBy) && filter.SettingOrderBy != "undefined")
            {
                if (filter.SettingOrderBy == "Id desc")
                {
                    orderbysql = "order by #cd.Id desc";
                    orderbysql1 = "order by Id desc";
                }
                else if (filter.SettingOrderBy == "Id asc")
                {
                    orderbysql = "order by #cd.Id asc";
                    orderbysql1 = "order by Id asc";
                }
                else if (filter.SettingOrderBy == "DisplayName desc")
                {
                    orderbysql = "order by #cd.DisplayName desc";
                    orderbysql1 = "order by DisplayName desc";
                }
                else if (filter.SettingOrderBy == "DisplayName asc")
                {
                    orderbysql = "order by #cd.DisplayName asc";
                    orderbysql1 = "order by DisplayName asc";
                }
                else if (filter.SettingOrderBy == "JoinDate desc")
                {
                    orderbysql = "order by #cd.JoinDate desc";
                    orderbysql1 = "order by JoinDate desc";
                }
                else if (filter.SettingOrderBy == "JoinDate asc")
                {
                    orderbysql = "order by #cd.JoinDate asc";
                    orderbysql1 = "order by JoinDate asc";
                }
                else if (filter.SettingOrderBy == "City desc")
                {
                    orderbysql = "order by #cd.City desc";
                    orderbysql1 = "order by City desc";
                }
                else if (filter.SettingOrderBy == "City asc")
                {
                    orderbysql = "order by #cd.City asc";
                    orderbysql1 = "order by City asc";
                }
                else
                {
                    orderbysql = "order by #cd.Id desc";
                    orderbysql1 = "order by Id desc";
                }
            }

            if (!string.IsNullOrWhiteSpace(filter.SearchText) && filter.SearchText != "undefined")
            {
                bool isNumeric = Regex.IsMatch(filter.SearchText, @"\d");
                //if(isNumeric && filter.SearchText.Length == 10)
                //{
                //    filter.SearchText = string.Format("{0:0##-###-####}", Convert.ToInt64(filter.SearchText)).TrimStart('-');
                //}
                if (isNumeric && filter.SearchText.Length == 10)
                {
                    //long SSN = 0;
                    //if (long.TryParse(filter.SearchText, out SSN))
                    //{
                    //    filter.SearchText = string.Format("{0:0##-###-####}", SSN).TrimStart('-');
                    //}
                }
                filterColumntext = @" AND isNULL(cus.FirstName, '') +
								isNULL(cus.LastName,'') + 
                                isNULL(cus.FirstName +' '+ cus.LastName, '') + 
                                isNULL( CONVERT(nvarchar(15), cus.Id),'') + 
								isNULL(cus.MiddleName,'') + 
								isNULL(cus.BusinessName,'') + 
								isNULL(cus.CustomerNo,'') + 
                                isNULL(cus.SecondCustomerNo,'') + 
								isNULL(cus.Type,'') + 
								isNULL(cus.Address,'') + 
								isNULL(cus.Address2,'') + 
                                isNULL(cus.City,'') + 
								isNULL(cus.Area,'') +
								isNULL(cus.PrimaryPhone,'') + 
                                isNULL(cus.SecondaryPhone,'') + 
                                isNULL(cus.CellNo,'') + 
								isNULL(cus.EmailAddress,'') + 
								isNULL(cus.Status,'') + 
								isNULL(cus.MonthlyMonitoringFee,'') +
                                isNULL(cus.SubscriptionStatus,'') +
								isNULL(cus.PaymentMethod,'') like @SearchText ";
                filtertext = " --AND FilterText like @SearchText ";
            }

            #region comment
            //if (!string.IsNullOrWhiteSpace(filter.TechnicianId) && filter.TechnicianId != "-1" && !string.IsNullOrWhiteSpace(filter.SalesPersonId) && filter.SalesPersonId != "-1")
            //{
            //    filterByUserName = string.Format("AND (cus.Installer='{0}' or cus.Soldby='{1}')", filter.TechnicianId , filter.SalesPersonId);
            //}
            //else
            //{
            //    if (!string.IsNullOrWhiteSpace(filter.SalesPersonId) && filter.SalesPersonId != "-1")
            //    {
            //        filterByUserName = string.Format("AND cus.Soldby='{0}' ", filter.SalesPersonId);
            //    }
            //    if (!string.IsNullOrWhiteSpace(filter.TechnicianId) && filter.TechnicianId!= "null" && filter.TechnicianId != "-1")
            //    {
            //        filterByUserName = string.Format("AND cus.Installer='{0}' ", filter.TechnicianId);
            //    }
            //}


            if (filter.EmployeeRole.ToLower().IndexOf("partner") > -1 && filter.Partners != null && filter.Partners.Count > 0)
            {
                string PartnerId = string.Join("','", filter.Partners.Select(x => x.UserId.ToString()));
                filterByUserName = string.Format("and (cus.Installer in('{0}') or cus.Soldby in('{0}') or cus.QA1 in('{0}') or cus.QA2 in ('{0}'))", PartnerId);
            }
            else if (filter.isPermit)
            {
                filterByUserName = "";
            }
            else
            {
                filterByUserName = string.Format("and (cus.Installer='{0}' or cus.Soldby='{0}' or cus.AccessGivenTo = '{0}')", filter.EmployeeId);
            }
            //[~Shariful-20-9-19]
            #endregion

            //if (!string.IsNullOrEmpty(filter.Package) && filter.Package != "-1" && filter.Package != "null" && filter.Package != "undefined")
            //{
            //    filterPackageQuery = string.Format("And Cus.Id in (select distinct(cus.Id) from booking bk left join customer cus on cus.CustomerId = bk.CustomerId left join bookingdetails bkdetails on bkdetails.BookingId = bk.BookingId where bkdetails.Package = '" + filter.Package + "')");
            //}

            //if (!string.IsNullOrWhiteSpace(filter.Source) && filter.Source != "-1" && filter.Source != "undefined")
            //{
            //    filterByLeadSource = string.Format("AND cus.LeadSource = '{0}'", filter.Source);
            //}
            //if (!string.IsNullOrWhiteSpace(filter.PaymentMethod) && filter.PaymentMethod != "-1" && filter.PaymentMethod != "undefined")
            //{
            //    filterByPaymentMethod = string.Format("AND cus.PaymentMethod = '{0}'", filter.PaymentMethod);
            //}
            if (filter.FirstDate != new DateTime() && filter.LastDate != new DateTime())
            {
                var StartDate = filter.FirstDate.SetZeroHour().ClientToUTCTime();
                var EndDate = filter.LastDate.SetMaxHour().ClientToUTCTime();

                filterbydaterange = string.Format(@"AND (cus.JoinDate between '{0}' and '{1}' 
                                        OR cus.CreatedDate  between '{0}' and '{1}' ) ", StartDate, EndDate);
            }
            if (!string.IsNullOrWhiteSpace(filter.InstallationDate) && filter.InstallationDate != "undefined")
            {
                try
                {
                    DateTime date = Convert.ToDateTime(filter.InstallationDate);
                    filterByDate += string.Format(" AND cus.InstallDate between '{0}' and '{1}'", date.ToString("MM-dd-yyyy"), date.AddDays(1).ToString("MM-dd-yyyy"));
                }
                catch (Exception) { }

            }
            if (!string.IsNullOrWhiteSpace(filter.SalesDate))
            {
                try
                {
                    DateTime date = Convert.ToDateTime(filter.SalesDate);
                    filterByDate += string.Format(" AND cus.SalesDate between '{0}' and '{1}'", date.ToString("MM-dd-yyyy"), date.AddDays(1).ToString("MM-dd-yyyy"));
                }
                catch (Exception) { }
            }
            if (!string.IsNullOrWhiteSpace(filter.FollowUpDate))
            {
                try
                {
                    DateTime date = Convert.ToDateTime(filter.FollowUpDate);
                    filterByDate += string.Format(" AND cus.FollowUpDate between '{0}' and '{1}'", date.ToString("MM-dd-yyyy"), date.AddDays(1).ToString("MM-dd-yyyy"));
                }
                catch (Exception) { }
            }
            if (filter.MonitoringCompany != "undefined" && !string.IsNullOrWhiteSpace(filter.MonitoringCompany) && filter.MonitoringCompany != "-1")
            {
                filterByDate += string.Format(" AND cus.FundingCompany = '{0}'", filter.MonitoringCompany);
            }
            if (filter.EmployeeRole == "QA" || filter.EmployeeRole == "QA Manager")
            {
                filterForQA = string.Format("AND _QAns.Id is null");
            }
            if (filter.EmployeeRole == "Sales Manager" || filter.EmployeeRole == "Sales Person")
            {
                filterForQA = string.Format("AND _QAns.Id is not null");
            }
            if (filter.IsActive.HasValue)
            {
                if (filter.IsActive.Value)
                {
                    filterByIsActive = "AND cus.IsActive = 1";
                }
                else
                {
                    filterByIsActive = "AND cus.IsActive = 0";
                }
            }

            if (!string.IsNullOrWhiteSpace(filter.SortBy) && filter.SortBy != "-1")
            {
                if (filter.SortBy == "ascending/customer")
                {
                    orderbysql = "ORDER BY DisplayName asc";
                }
                else if (filter.SortBy == "descending/customer")
                {
                    orderbysql = "ORDER BY DisplayName desc";
                }
                else if (filter.SortBy == "ascending/location")
                {
                    orderbysql = "ORDER BY City asc, State asc";
                }
                else if (filter.SortBy == "descending/location")
                {
                    orderbysql = "ORDER BY City desc, State desc";
                }
                else if (filter.SortBy == "ascending/activity")
                {
                    orderbysql = "ORDER BY JoinDate asc";
                }
                else if (filter.SortBy == "descending/activity")
                {
                    orderbysql = "ORDER BY JoinDate desc";
                }
                else
                {
                    orderbysql = string.Concat("ORDER BY ConvertionDate desc, Id Desc");
                }
            }
            string filewrite = "";
            if (filter.TotalRMR == true)
            {
                TotalRMRFilter = string.Format("and cus.MonthlyMonitoringFee != '-1' and cus.MonthlyMonitoringFee is not null and cus.MonthlyMonitoringFee != ''", filter.TotalRMR);
            }
            string TotalOpenInvoice = "";
            if (filter.TotalOpenInvoice == true)
            {
                TotalOpenInvoice = string.Format("and inv.IsEstimate = 0");
            }
            string TotalDueInvoice = "";
            if (filter.TotalDueInvoice == true)
            {
                TotalDueInvoice = string.Format("and inv.Status = 'Open' and inv.DueDate < GETDATE()");
            }
            string Othersquery = "";
            if (!string.IsNullOrWhiteSpace(filter.Others))
            {
                if (filter.Others == "isfire")
                {
                    Othersquery = string.Format("and cus.IsFireAccount = 1");
                }
                else if (filter.Others == "nobilltax")
                {
                    Othersquery = string.Format("and cus.BillTax = 0");
                }
                else if (filter.Others == "residential")
                {
                    Othersquery = string.Format("and cus.Type = 'Residential'");
                }
                else if (filter.Others == "commercial")
                {
                    Othersquery = string.Format("and cus.Type = 'Commercial'");
                }
                else if (filter.Others == "notbilling")
                {
                    Othersquery = string.Format("and cus.MonthlyMonitoringFee = '' and cus.PaymentMethod = ''");
                }
            }
            if (filter.Branch != "-1" && filter.Branch != "undefined" && !string.IsNullOrWhiteSpace(filter.Branch))
            {
                BranchQuery = "and cus.BranchId =" + filter.Branch;
            }
            #region Naming Condition
            string NamingSql = "''";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            if (gs != null)
            {
                NamingSql = gs.Value;
            }
            #endregion
            /*New Filter Query For Customer*/
            #region Filter Query For Customer and Lead
            if (!string.IsNullOrWhiteSpace(filter.displayname))
            {
                FilterSubquery += string.Format(@" and (cus.FirstName like '%{0}%' 
                or cus.LastName like '%{0}%' 
                or cus.FirstName + ' ' + cus.LastName like '%{0}%' 
                or cus.BusinessName like '%{0}%' 
                or cus.DBA like '%{0}%') ", filter.displayname);
            }
            if (!string.IsNullOrWhiteSpace(filter.customerno))
            {
                FilterSubquery += string.Format(" and cus.CustomerNo = '{0}'", filter.customerno);
            }
            if (!string.IsNullOrWhiteSpace(filter.customerintid))
            {
                FilterSubquery += string.Format(" and cus.Id = '{0}'", filter.customerintid);
            }
            if (!string.IsNullOrWhiteSpace(filter.title))
            {
                FilterSubquery += string.Format(" and cus.Title like '%{0}%'", filter.title);
            }
            if (!string.IsNullOrWhiteSpace(filter.firstname))
            {
                FilterSubquery += string.Format(" and cus.FirstName like '%{0}%'", filter.firstname);
            }
            if (!string.IsNullOrWhiteSpace(filter.lastname))
            {
                FilterSubquery += string.Format(" and cus.LastName like '%{0}%'", filter.lastname);
            }
            if (!string.IsNullOrWhiteSpace(filter.childof) && filter.childof != "null" && filter.childof != "00000000-0000-0000-0000-000000000000")
            {
                FilterSubquery += string.Format(" and cus.ChildOf = '{0}'", filter.childof);
            }
            if (!string.IsNullOrWhiteSpace(filter.passcode))
            {
                FilterSubquery += string.Format(" and cus.Passcode = '{0}'", filter.passcode);
            }
            if (!string.IsNullOrWhiteSpace(filter.customertype) && filter.customertype != "-1" && filter.customertype != "null")
            {
                FilterSubquery += string.Format(" and cus.[Type] = '{0}'", filter.customertype);
            }
            if (!string.IsNullOrWhiteSpace(filter.businessname))
            {
                FilterSubquery += string.Format(" and cus.BusinessName like '%{0}%'", filter.businessname);
            }
            if (!string.IsNullOrWhiteSpace(filter.dba))
            {
                FilterSubquery += string.Format(" and cus.DBA like '%{0}%'", filter.dba);
            }
            if (!string.IsNullOrWhiteSpace(filter.street))
            {
                FilterSubquery += string.Format(" and cus.Street like '%{0}%'", filter.street);
            }
            if (!string.IsNullOrWhiteSpace(filter.zipcode))
            {
                FilterSubquery += string.Format(" and cus.ZipCode like '%{0}%'", filter.zipcode);
            }
            if (!string.IsNullOrWhiteSpace(filter.city))
            {
                FilterSubquery += string.Format(" and cus.City like '%{0}%'", filter.city);
            }
            if (!string.IsNullOrWhiteSpace(filter.state))
            {
                FilterSubquery += string.Format(" and cus.State like '%{0}%'", filter.state);
            }
            if (!string.IsNullOrWhiteSpace(filter.county))
            {
                FilterSubquery += string.Format(" and cus.County like '%{0}%'", filter.county);
            }
            if (!string.IsNullOrWhiteSpace(filter.country))
            {
                FilterSubquery += string.Format(" and cus.Country like '%{0}%'", filter.country);
            }
            if (!string.IsNullOrWhiteSpace(filter.homeowner))
            {
                FilterSubquery += string.Format(" and cus.HomeOwner like '%{0}%'", filter.homeowner);
            }
            if (!string.IsNullOrWhiteSpace(filter.leadsource) && filter.leadsource != "-1" && filter.leadsource != "null")
            {
                FilterSubquery += string.Format(" and cus.LeadSource like '%{0}%'", filter.leadsource);
            }
            if (!string.IsNullOrWhiteSpace(filter.referringcustomer) && filter.referringcustomer != "00000000-0000-0000-0000-000000000000" && filter.referringcustomer != "null")
            {
                FilterSubquery += string.Format(" and cus.ReferringCustomer = '{0}'", filter.referringcustomer);
            }
            if (!string.IsNullOrWhiteSpace(filter.emailaddress))
            {
                FilterSubquery += string.Format(" and cus.EmailAddress like '%{0}%'", filter.emailaddress);
            }
            if (!string.IsNullOrWhiteSpace(filter.primaryphone))
            {
                FilterSubquery += string.Format(" and cus.PrimaryPhone like '%{0}%'", filter.primaryphone);
            }
            if (!string.IsNullOrWhiteSpace(filter.cellno))
            {
                FilterSubquery += string.Format(" and cus.CellNo like '%{0}%'", filter.cellno);
            }
            if (!string.IsNullOrWhiteSpace(filter.secondaryphone))
            {
                FilterSubquery += string.Format(" and cus.SecondaryPhone like '%{0}%'", filter.secondaryphone);
            }
            if (!string.IsNullOrWhiteSpace(filter.carrier) && filter.carrier != "-1" && filter.carrier != "null")
            {
                FilterSubquery += string.Format(" and cus.Carrier = '{0}'", filter.carrier);
            }
            if (!string.IsNullOrWhiteSpace(filter.phonetype) && filter.phonetype != "-1" && filter.phonetype != "null")
            {
                FilterSubquery += string.Format(" and cus.PhoneType = '{0}'", filter.phonetype);
            }
            if (!string.IsNullOrWhiteSpace(filter.besttimetocall) && filter.besttimetocall != "-1" && filter.besttimetocall != "null")
            {
                FilterSubquery += string.Format(" and cus.BestTimeToCall = '{0}'", filter.besttimetocall);
            }
            if (!string.IsNullOrWhiteSpace(filter.preferredcontactmethod) && filter.preferredcontactmethod != "-1" && filter.preferredcontactmethod != "null")
            {
                FilterSubquery += string.Format(" and cus.PreferredContactMethod = '{0}'", filter.preferredcontactmethod);
            }
            if (!string.IsNullOrWhiteSpace(filter.dateofbirth))
            {
                var dob = Convert.ToDateTime(filter.dateofbirth);
                if (dob != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.DateofBirth = '{0}'", dob.ToString("yyyy-MM-dd 00:00:00.000"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.ssn))
            {
                FilterSubquery += string.Format(" and cus.SSN like '%{0}%'", filter.ssn);
            }
            if (!string.IsNullOrWhiteSpace(filter.callingtime) && filter.callingtime != "-1" && filter.callingtime != "null")
            {
                FilterSubquery += string.Format(" and cus.CallingTime = '{0}'", filter.callingtime);
            }
            if (!string.IsNullOrWhiteSpace(filter.address))
            {
                FilterSubquery += string.Format(" and cus.Address like '%{0}%'", filter.address);
            }
            if (!string.IsNullOrWhiteSpace(filter.address2))
            {
                FilterSubquery += string.Format(" and cus.Address2 like '%{0}%'", filter.address2);
            }
            if (!string.IsNullOrWhiteSpace(filter.streetprevious))
            {
                FilterSubquery += string.Format(" and cus.StreetPrevious like '%{0}%'", filter.streetprevious);
            }
            if (!string.IsNullOrWhiteSpace(filter.cityprevious))
            {
                FilterSubquery += string.Format(" and cus.CityPrevious like '%{0}%'", filter.cityprevious);
            }
            if (!string.IsNullOrWhiteSpace(filter.stateprevious))
            {
                FilterSubquery += string.Format(" and cus.StatePrevious like '%{0}%'", filter.stateprevious);
            }
            if (!string.IsNullOrWhiteSpace(filter.zipcodeprevious))
            {
                FilterSubquery += string.Format(" and cus.ZipCodePrevious like '%{0}%'", filter.zipcodeprevious);
            }
            if (!string.IsNullOrWhiteSpace(filter.countryprevious))
            {
                FilterSubquery += string.Format(" and cus.CountryPrevious like '%{0}%'", filter.countryprevious);
            }
            if (!string.IsNullOrWhiteSpace(filter.accountno))
            {
                FilterSubquery += string.Format(" and cus.AccountNo like '%{0}%'", filter.accountno);
            }
            if (!string.IsNullOrWhiteSpace(filter.creditscore) && filter.creditscore != "-1" && filter.creditscore != "null")
            {
                FilterSubquery += string.Format(" and cus.CreditScore = '{0}'", filter.creditscore);
            }
            if (!string.IsNullOrWhiteSpace(filter.creditscorevalue))
            {
                FilterSubquery += string.Format(" and cus.CreditScoreValue like '%{0}%'", filter.creditscorevalue);
            }
            if (!string.IsNullOrWhiteSpace(filter.contractteam) && filter.contractteam != "-1" && filter.contractteam != "null")
            {
                FilterSubquery += string.Format(" and cus.ContractTeam = '{0}'", filter.contractteam);
            }
            if (!string.IsNullOrWhiteSpace(filter.fundingcompany) && filter.fundingcompany != "-1" && filter.fundingcompany != "null")
            {
                FilterSubquery += string.Format(" and cus.FundingCompany = '{0}'", filter.fundingcompany);
            }
            if (!string.IsNullOrWhiteSpace(filter.joindate))
            {
                var join = Convert.ToDateTime(filter.joindate);
                if (join != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.JoinDate between '{0}' and '{1}'", join.ToString("yyyy-MM-dd 00:00:00.000"), join.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.note))
            {
                FilterSubquery += string.Format(" and cus.Note like '%{0}%'", filter.note);
            }
            if (!string.IsNullOrWhiteSpace(filter.salesdatecus))
            {
                var date = Convert.ToDateTime(filter.salesdatecus);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.installdate))
            {
                var date = Convert.ToDateTime(filter.installdate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.InstallDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.cutindate))
            {
                var date = Convert.ToDateTime(filter.cutindate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.CutInDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.installer) && filter.installer != "-1" && filter.installer != "null")
            {
                FilterSubquery += string.Format(" and cus.Installer = '{0}'", filter.installer);
            }
            if (!string.IsNullOrWhiteSpace(filter.fundingdate))
            {
                var date = Convert.ToDateTime(filter.fundingdate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.FundingDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.middlename))
            {
                FilterSubquery += string.Format(" and cus.MiddleName like '%{0}%'", filter.middlename);
            }
            if (!string.IsNullOrWhiteSpace(filter.reminderdate))
            {
                var date = Convert.ToDateTime(filter.reminderdate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.ReminderDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.qa1) && filter.qa1 != "-1" && filter.qa1 != "null")
            {
                FilterSubquery += string.Format(" and cus.QA1 = '{0}'", filter.qa1);
            }
            if (!string.IsNullOrWhiteSpace(filter.qa1date))
            {
                var date = Convert.ToDateTime(filter.qa1date);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.QA1Date between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.qa2) && filter.qa2 != "-1" && filter.qa2 != "null")
            {
                FilterSubquery += string.Format(" and cus.QA2 = '{0}'", filter.qa2);
            }
            if (!string.IsNullOrWhiteSpace(filter.qa2date))
            {
                var date = Convert.ToDateTime(filter.qa2date);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.QA2Date between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.billamount))
            {
                FilterSubquery += string.Format(" and cus.BillAmount like '%{0}%'", filter.billamount);
            }
            if (!string.IsNullOrWhiteSpace(filter.paymentmethodcus) && filter.paymentmethodcus != "-1" && filter.paymentmethodcus != "null")
            {
                FilterSubquery += string.Format(" and cus.PaymentMethod = '{0}'", filter.paymentmethodcus);
            }
            if (!string.IsNullOrWhiteSpace(filter.billcycle) && filter.billcycle != "-1" && filter.billcycle != "null")
            {
                FilterSubquery += string.Format(" and cus.BillCycle = '{0}'", filter.billcycle);
            }
            if (!string.IsNullOrWhiteSpace(filter.billday) && filter.billday != "-1" && filter.billday != "null")
            {
                FilterSubquery += string.Format(" and cus.BillDay = '{0}'", filter.billday);
            }
            if (!string.IsNullOrWhiteSpace(filter.billnotes))
            {
                FilterSubquery += string.Format(" and cus.BillNotes like '%{0}%'", filter.billnotes);
            }
            if (!string.IsNullOrWhiteSpace(filter.billtax) && filter.billtax != "-1" && filter.billtax != "null")
            {
                FilterSubquery += string.Format(" and cus.BillTax = '{0}'", filter.billtax);
            }
            if (!string.IsNullOrWhiteSpace(filter.billoutstanding))
            {
                FilterSubquery += string.Format(" and cus.BillOutStanding like '%{0}%'", filter.billoutstanding);
            }
            if (!string.IsNullOrWhiteSpace(filter.servicedate))
            {
                var date = Convert.ToDateTime(filter.servicedate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format("and cus.ServiceDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.area))
            {
                FilterSubquery += string.Format("and cus.Area like '%{0}%'", filter.area);
            }
            if (!string.IsNullOrWhiteSpace(filter.streettype) && filter.streettype != "-1" && filter.streettype != "null")
            {
                FilterSubquery += string.Format(" and cus.StreetType = '{0}'", filter.streettype);
            }
            if (!string.IsNullOrWhiteSpace(filter.apartment))
            {
                FilterSubquery += string.Format(" and cus.Appartment like '%{0}%'", filter.apartment);
            }
            if (!string.IsNullOrWhiteSpace(filter.secondcustomerno))
            {
                FilterSubquery += string.Format(" and cus.SecondCustomerNo like '%{0}%'", filter.secondcustomerno);
            }
            if (!string.IsNullOrWhiteSpace(filter.additionalcustomerno))
            {
                FilterSubquery += string.Format(" and cus.AdditionalCustomerNo like '%{0}%'", filter.additionalcustomerno);
            }
            if (!string.IsNullOrWhiteSpace(filter.activationfee))
            {
                FilterSubquery += string.Format(" and cus.ActivationFee like '%{0}%'", filter.activationfee);
            }
            if (!string.IsNullOrWhiteSpace(filter.firstbilling))
            {
                var date = Convert.ToDateTime(filter.firstbilling);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.FirstBilling between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.isactivestatus) && filter.isactivestatus != "-1" && filter.isactivestatus != "null")
            {
                FilterSubquery += string.Format(" and cus.IsActive = '{0}'", filter.isactivestatus);
            }
            if (!string.IsNullOrWhiteSpace(filter.mmr))
            {
                FilterSubquery += string.Format(" and cus.MonthlyMonitoringFee like '%{0}%'", filter.mmr);
            }
            if (!string.IsNullOrWhiteSpace(filter.crossstreet))
            {
                FilterSubquery += string.Format(" and cus.CrossStreet like '%{0}%'", filter.crossstreet);
            }
            if (!string.IsNullOrWhiteSpace(filter.businessaccounttype) && filter.businessaccounttype != "-1" && filter.businessaccounttype != "null")
            {
                FilterSubquery += string.Format(" and cus.BusinessAccountType = '{0}'", filter.businessaccounttype);
            }
            if (!string.IsNullOrWhiteSpace(filter.esistingpanel) && filter.esistingpanel != "-1" && filter.esistingpanel != "null")
            {
                FilterSubquery += string.Format(" and cus.EsistingPanel = '{0}'", filter.esistingpanel);
            }
            if (!string.IsNullOrWhiteSpace(filter.estclosedate))
            {
                var date = Convert.ToDateTime(filter.estclosedate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.EstCloseDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.projectwalkdate))
            {
                var date = Convert.ToDateTime(filter.projectwalkdate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.ProjectWalkDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.annualrevenue))
            {
                FilterSubquery += string.Format(" and cus.AnnualRevenue like '%{0}%'", filter.annualrevenue);
            }
            if (!string.IsNullOrWhiteSpace(filter.website))
            {
                FilterSubquery += string.Format(" and cus.Website like '%{0}%'", filter.website);
            }
            if (!string.IsNullOrWhiteSpace(filter.market) && filter.market != "-1" && filter.market != "null")
            {
                FilterSubquery += string.Format(" and cus.Market = '{0}'", filter.market);
            }
            if (!string.IsNullOrWhiteSpace(filter.passengers))
            {
                FilterSubquery += string.Format(" and cus.Passengers like '%{0}%'", filter.passengers);
            }
            if (!string.IsNullOrWhiteSpace(filter.budget))
            {
                FilterSubquery += string.Format(" and cus.Budget like '%{0}%'", filter.budget);
            }
            if (!string.IsNullOrWhiteSpace(filter.customeraccounttype) && filter.customeraccounttype != "-1" && filter.customeraccounttype != "null")
            {
                FilterSubquery += string.Format(" and cus.CustomerAccountType = '{0}'", filter.customeraccounttype);
            }
            if (!string.IsNullOrWhiteSpace(filter.csprovider) && filter.csprovider != "-1" && filter.csprovider != "null")
            {
                FilterSubquery += string.Format(" and cus.CSProvider = '{0}'", filter.csprovider);
            }
            if (!string.IsNullOrWhiteSpace(filter.ownership) && filter.ownership != "-1" && filter.ownership != "null")
            {
                FilterSubquery += string.Format(" and cus.Ownership = '{0}'", filter.ownership);
            }
            if (!string.IsNullOrWhiteSpace(filter.purchaseprice))
            {
                FilterSubquery += string.Format(" and cus.PurchasePrice like '%{0}%'", filter.purchaseprice);
            }
            if (!string.IsNullOrWhiteSpace(filter.contractvalue))
            {
                FilterSubquery += string.Format(" and cus.ContractValue like '%{0}%'", filter.contractvalue);
            }
            if (!string.IsNullOrWhiteSpace(filter.accessgivento) && filter.accessgivento != "-1" && filter.accessgivento != "null")
            {
                FilterSubquery += string.Format(" and cus.AccessGivenTo = '{0}'", filter.accessgivento);
            }
            if (!string.IsNullOrWhiteSpace(filter.soldby) && filter.soldby != "-1" && filter.soldby != "null")
            {
                FilterSubquery += string.Format(" and (cus.Soldby = '{0}' or cus.SoldBy2 = '{0}' or cus.SoldBy3 = '{0}')", filter.soldby);
            }
            if (!string.IsNullOrWhiteSpace(filter.saleslocation) && filter.saleslocation != "-1" && filter.saleslocation != "null")
            {
                FilterSubquery += string.Format(" and cus.SalesLocation = '{0}'", filter.saleslocation);
            }
            if (!string.IsNullOrWhiteSpace(filter.leadstatus) && filter.leadstatus != "-1" && filter.leadstatus != "null")
            {
                FilterSubquery += string.Format(" and cus.[Status] = '{0}'", filter.leadstatus);
            }
            if (!string.IsNullOrWhiteSpace(filter.donotcall))
            {
                FilterSubquery += string.Format(" and cus.DoNotCall like '%{0}%'", filter.donotcall);
            }
            if (!string.IsNullOrWhiteSpace(filter.customerstatus) && filter.customerstatus != "-1" && filter.customerstatus != "null")
            {
                FilterSubquery += string.Format(" and cus.CustomerStatus = '{0}'", filter.customerstatus);
            }
            if (!string.IsNullOrWhiteSpace(filter.duplicatecustomer) && filter.duplicatecustomer != "null" && filter.duplicatecustomer != "00000000-0000-0000-0000-000000000000")
            {
                FilterSubquery += string.Format(" and cus.DuplicateCustomer = '{0}'", filter.duplicatecustomer);
            }
            if (!string.IsNullOrWhiteSpace(filter.movingdate))
            {
                var date = Convert.ToDateTime(filter.movingdate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.MovingDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.contractedpreviously) && filter.contractedpreviously != "-1" && filter.contractedpreviously != "null")
            {
                FilterSubquery += string.Format(" and cus.ContractedPreviously = '{0}'", filter.contractedpreviously);
            }
            if (!string.IsNullOrWhiteSpace(filter.installedstatus) && filter.installedstatus != "-1" && filter.installedstatus != "null")
            {
                FilterSubquery += string.Format(" and cus.InstalledStatus = '{0}'", filter.installedstatus);
            }
            if (!string.IsNullOrWhiteSpace(filter.acquiredform))
            {
                FilterSubquery += string.Format(" and cus.AcquiredFrom like '%{0}%'", filter.acquiredform);
            }
            if (!string.IsNullOrWhiteSpace(filter.followupdatecus))
            {
                var date = Convert.ToDateTime(filter.followupdatecus);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.FollowUpDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.buyoutamountbyads))
            {
                FilterSubquery += string.Format(" and cus.BuyoutAmountByADS like '%{0}%'", filter.buyoutamountbyads);
            }
            if (!string.IsNullOrWhiteSpace(filter.buyoutamountbysalesrep))
            {
                FilterSubquery += string.Format(" and cus.BuyoutAmountBySalesRep like '%{0}%'", filter.buyoutamountbysalesrep);
            }
            if (!string.IsNullOrWhiteSpace(filter.financedterm))
            {
                FilterSubquery += string.Format(" and cus.FinancedTerm like '%{0}%'", filter.financedterm);
            }
            if (!string.IsNullOrWhiteSpace(filter.financedamount))
            {
                FilterSubquery += string.Format(" and cus.FinancedAmount like '%{0}%'", filter.financedamount);
            }
            if (!string.IsNullOrWhiteSpace(filter.levels))
            {
                FilterSubquery += string.Format(" and cus.Levels like '%{0}%'", filter.levels);
            }
            if (!string.IsNullOrWhiteSpace(filter.soldamount))
            {
                FilterSubquery += string.Format(" and cus.SoldAmount like '%{0}%'", filter.soldamount);
            }
            if (!string.IsNullOrWhiteSpace(filter.taxexemption) && filter.taxexemption != "-1" && filter.taxexemption != "null")
            {
                FilterSubquery += string.Format(" and cus.TaxExemption = '{0}'", filter.taxexemption);
            }
            if (!string.IsNullOrWhiteSpace(filter.appointmentset) && filter.appointmentset != "-1" && filter.appointmentset != "null")
            {
                FilterSubquery += string.Format(" and cus.AppointmentSet = '{0}'", filter.appointmentset);
            }
            if (!string.IsNullOrWhiteSpace(filter.PlatformId))
            {
                FilterSubquery += string.Format(" and cus.PlatformId = '{0}'", filter.PlatformId);
            }
            if (!string.IsNullOrWhiteSpace(filter.customerfunded) && filter.customerfunded != "-1" && filter.customerfunded != "null")
            {
                FilterSubquery += string.Format(" and cus.CustomerFunded = '{0}'", filter.customerfunded);
            }
            if (!string.IsNullOrWhiteSpace(filter.maintenance) && filter.maintenance != "-1" && filter.maintenance != "null")
            {
                FilterSubquery += string.Format(" and cus.Maintenance = '{0}'", filter.maintenance);
            }
            if (!string.IsNullOrWhiteSpace(filter.isalarmcom) && filter.isalarmcom != "-1" && filter.isalarmcom != "null")
            {
                FilterSubquery += string.Format(" and cus.IsAlarmCom = '{0}'", filter.isalarmcom);
            }
            if (!string.IsNullOrWhiteSpace(filter.isagreement) && filter.isagreement != "-1" && filter.isagreement != "null")
            {
                FilterSubquery += string.Format(" and cus.IsAgreement = '{0}'", filter.isagreement);
            }
            if (!string.IsNullOrWhiteSpace(filter.isfireaccount) && filter.isfireaccount != "-1" && filter.isfireaccount != "null")
            {
                FilterSubquery += string.Format(" and cus.IsFireAccount = '{0}'", filter.isfireaccount);
            }
            if (!string.IsNullOrWhiteSpace(filter.branchid) && filter.branchid != "-1" && filter.branchid != "null")
            {
                FilterSubquery += string.Format(" and cus.BranchId = '{0}'", filter.branchid);
            }
            if (!string.IsNullOrWhiteSpace(filter.MapscoNo))
            {
                FilterSubquery += string.Format(" and cus.MapscoNo like '%{0}%'", filter.MapscoNo);
            }
            #endregion

            try
            {
                sqlQuery = string.Format(sqlQuery,
                    /*0*/ filter.CompanyId,
                    /*1*/filterColumntext,
                    /*2*/filtertext,
                    /*3*/ filterByUserName,
                    /*4*/filterByLeadSource,
                    /*5*/filterByDate,
                    /*6*/filterForQA,
                    /*7*/filterByPaymentMethod,
                    /*8*/filterByIsActive,
                    /*9*/filterbyUser,
                    /*10*/orderbysql,
                    /*11*/TotalRMRFilter,
                    /*12*/TotalOpenInvoice,
                    /*13*/TotalDueInvoice,
                    /*14*/filterbydaterange,
                    /*15*/Othersquery,
                    /*16*/BranchQuery,
                    /*17*/SoldByQuery,
                    /*18*/NamingSql,
                    /*19*/filterPackageQuery,
                    /*20*/FilterSubquery,
                    /*21*/orderbysql1);
                filewrite = sqlQuery;
                //System.IO.File.WriteAllText(@"C:\www\rmrcloud.com\transactionId.txt", filewrite); 
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", filter.PageNo));
                    AddParameter(cmd, pInt32("pagesize", filter.PageSize));
                    if (!string.IsNullOrWhiteSpace(filter.SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(filter.SearchText.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                //filewrite = filewrite + "::: " + ex.Message;
                //System.IO.File.WriteAllText(@"C:\www\rmrcloud.com\transactionId.txt", filewrite);
                return null;
            }
        }
        public DataSet GetCustomerListByLiteFilterNew(CustomerLiteFilter filter)
        {

            string SoldByQuery = "";
            string ResOrderQuery = "";
            if (filter.OrderPermission)
            {
                ResOrderQuery = string.Format("(select COUNT(ro.Id) from ResturantOrder ro where ro.CustomerId = cfd.CustomerId and ro.CompanyId = '{0}') as OrderCount, (select cast(isnull(SUM(ro.Amount), 0) as numeric(36,2)) from ResturantOrder ro where ro.CustomerId = cfd.CustomerId and ro.CompanyId = '{0}') as OrderValue, (select isnull([Value], 0) from GlobalSetting where CompanyId = '{0}' and SearchKey = 'FrequentCustomerLimit') as FrequentCusLimit,", filter.CompanyId);
            }
            string sqlQuery = @" 
                                declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

                                SELECT 
                                distinct
                                cus.Id ,
                                {18} as DisplayName,
                                cus.CustomerId, 
                                cus.IsActive,
                                lkstatus.DisplayText as LeadStatus,
                                lkcstatus.DisplayText as CustomerStatus, 
								CASE when lkleadsource.ParentDataKey <> ''
								THEN
								lkleadsource.ParentDataKey+ ' -> ' +lkleadsource.DisplayText
								ELSE
								lkleadsource.DisplayText
								END As LeadSource,
                                cus.CutInDate ,
                                ROUND(cus.MonthlyMonitoringFee, 2) AS MonthlyMonitoringFee ,
                                cus.State,
								cus.City,
                                cus.PlatformId,
                                Ccom.ConvertionDate, 
                                cus.DoNotCall,
                                cus.PreferredContactMethod 
                                INTO #CustomerData
                                FROM Customer cus
                                LEFT JOIN CustomerCompany Ccom
                                  ON cus.CustomerId = Ccom.CustomerId

                                left join Lookup lkcstatus on lkcstatus.DataValue = cus.CustomerStatus and lkcstatus.DataKey = 'CustomerStatus1' and lkcstatus.DataValue!='-1'
                                 left join [Lookup] lkleadsource on lkleadsource.DataKey = 'LeadSource' and lkleadsource.DataValue = cus.LeadSource and cus.LeadSource!='-1'
                                left join Lookup lkstatus on lkstatus.DataValue = cus.Status and lkstatus.DataKey = 'LeadStatus' 
                                left join [Lookup] lkinstalledstatus on lkinstalledstatus.DataValue = iif(cus.InstalledStatus != '-1', cus.InstalledStatus, '') and lkinstalledstatus.DataKey = 'InstalledStatus'
                                {24}
                                
                                WHERE Ccom.CompanyId = '{0}' 
                                AND Ccom.IsLead = {23}
                                and Ccom.IsActive = 1
                                and cus.JoinDate is not null
                                {19}
                                {17}
                                {6}
                                {3}
                                {4}
                                {5}
                                {7}
                                {8}
                                {9}
                                {11}
                                {12}
                                {13}
                                {14}
                                {15}
                                {16}
                                {1}
                                --{10}
                                 {20}
                                {25}
                                {26}
                                {27}
                                {29}
                                {30}
                                --select * into #CustomerFilterData
								--FROM #CustomerData
                                --{2}

                                SELECT TOP (@pagesize)
                                  *  Into #CustomerResultData
                                FROM #CustomerData
                                where Id NOT IN(Select TOP (@pagestart)  Id from #CustomerData #cd {10})
							    {21}     


								select cfd.*,cus.CustomerNo,
                                cus.Title,
                                cus.FirstName ,
                                cus.LastName ,
                                cus.MiddleName ,
                                cus.BusinessName ,
                                cus.SSN,
		                        cus.[Status],
		                        cus.Street,
		                        cus.ZipCode, 
		                        cus.[Address],
		                        cus.EmailAddress,
		                        dbo.PhoneNumFormat(cus.PrimaryPhone) as PrimaryPhone,
                                dbo.PhoneNumFormat(cus.SecondaryPhone) as SecondaryPhone,
								cus.DateofBirth,
								cus.LastUpdatedDate,
								cus.LastUpdatedBy,
                                cus.StreetType,
								cus.Appartment,
                                dbo.PhoneNumFormat(cus.CellNo) as CellNo,
                                cus.Fax,
                                cus.CallingTime,
                                cus.Address2,
                                cus.Country,
                                cus.StreetPrevious,
                                cus.CityPrevious,
                                cus.StatePrevious,
                                cus.ZipCodePrevious,
                                cus.CountryPrevious,
                                cus.AccountNo,
                                cus.IsAlarmCom,
                                cus.CreditScore,
                                cus.CreditScoreValue,
                                cus.ContractTeam,
                                cus.FundingCompany,
                                cus.CellularBackup,
                                cus.CustomerFunded,
                                cus.PlatformId,
                                cus.Maintenance,
                                cus.Note,
                                cus.SalesDate,
                                cus.FollowUpDate,
                                cus.InstallDate,
                                cus.Installer,
                                cus.FundingDate,
                                cus.ReminderDate,
                                cus.QA1Date,
                                cus.QA2Date,
                                cus.BillAmount,
                                cus.PaymentMethod,
                                cus.BillCycle,
                                cus.LeadSourceType,
                                cus.BillDay,
                                cus.BillNotes,
                                cus.BillTax,
                                cus.BillOutStanding,
                                cus.ServiceDate,
                                cus.Area,
                                cus.Latlng,
                                cus.SecondCustomerNo,
                                cus.AdditionalCustomerNo,
                                cus.IsTechCallPassed,
                                cus.IsDirect,
                                cus.AuthorizeRefId,
                                cus.AuthorizeCusProfileId,
                                cus.AuthorizeCusPaymentProfileId,
                                cus.AuthorizeDescription,
                                cus.IsRequiredCsvSync,
                                cus.Passcode,
                                cus.ActivationFee,
                                cus.FirstBilling,
                                cus.ActivationFeePaymentMethod,
                                cus.LastGeneratedInvoice,
                                cus.Singature,
                                cus.CrossStreet,
                                cus.DBA,
                                cus.AlarmRefId,
                                cus.TransunionRefId,
                                cus.MonitronicsRefId,
                                cus.CentralStationRefId,
                                cus.CmsRefId,
                                cus.PreferedEmail,
                                cus.PreferedSms,
                                cus.IsAgreement,
                                cus.IsFireAccount,
                                cus.CreatedByUid,
                                cus.CreatedDate,
                                cus.LastUpdatedByUid,
                                cus.BusinessAccountType,
                                cus.PhoneType,
                                cus.Carrier,
                                cus.ReferringCustomer,
                                cus.EsistingPanel,
                                cus.[Ownership],
                                cus.PurchasePrice,
                                cus.ContractValue,
                                --cus.ChildOf,
                                CASE 
								WHEN (C.DBA = '' or C.DBA IS NULL) AND  (C.BusinessName = '' or C.BusinessName IS NULL) THEN C.FirstName +' '+C.LastName
								WHEN (C.DBA = '' or C.DBA IS NULL)  THEN C.BusinessName
								ELSE  C.DBA
								END as ChildOf,
                                cus.EmailVerified,
                                cus.HomeVerified,
                                cus.County,
                                cus.CustomerToken,
                                cus.PaymentToken,
                                cus.ScheduleToken,
                                cus.EstCloseDate,
                                cus.ProjectWalkDate,
                                cus.BranchId,
                                cus.SubscriptionStatus,
                                cus.AnnualRevenue,
                                cus.Website,
                                cus.Market,
                                cus.Passengers,
                                cus.Budget,
                                cus.SmartSetUpStep,
                                cus.CustomerAccountType,
                                cus.IsPrimaryPhoneVerified,
                                cus.IsSecondaryPhoneVerified,
                                cus.IsCellNoVerified,
                                cus.JoinDate,
                                cus.[Type],
                                cus.MovingDate,
                                cus.ContactedPerviously,
                                cus.InstalledStatus,
                                cus.AcquiredFrom,
                                cus.FollowUpDate,
                                cus.BuyoutAmountByADS,
                                cus.BuyoutAmountBySalesRep,
                                cus.FinancedTerm,
                                cus.FinancedAmount,
                                cus.Levels,
                                cus.SoldAmount,
                                cus.AgreementEmail,
                                dbo.PhoneNumFormat(cus.AgreementPhoneNo) as AgreementPhoneNo,
                                cus.TaxExemption,
                                emp.firstname +' '+ emp.lastname as Soldby,
                                cus.AppoinmentSet, 
                                {28}
                                cus.MapscoNo,
                                CR.Name as RouteName,
								ExCus.GeeseCount
                                ,(select count(*) from CustomerFile Cf where GeeseFileType ='Media' and Cf.CustomerId = cfd.CustomerId and Filename != '') as MediaCount
								,(select count(*) from CustomerFile Cf where GeeseFileType ='Note' and Cf.CustomerId = cfd.CustomerId and FileDescription != '') as NoteCount
								 from #CustomerResultData cfd  
								Left Join Customer cus on cus.CustomerId = cfd.CustomerId
                                Left Join Customer C on C.CustomerId = cus.ChildOf
                                Left join Employee emp on emp.UserId = cus.soldby1
                                Left join CustomerRoute CR on CR.CustomerId = cus.CustomerId
                                Left Join CustomerExtended ExCus on ExCus.CustomerId = cus.CustomerId
								{21}  
                                {31} 
								
								drop table #CustomerResultData


                                select count(*) [TotalCount]
                                from #CustomerData
                                 
                                {22}

                                DROP TABLE #CustomerData
                                --DROP TABLE #CustomerFilterData";

            string filtertext = "";
            string filterColumntext = "";
            string filterByUserName = "";

            string filterByLeadSource = "";
            string filterByPaymentMethod = "";
            string filterByDate = "";
            string filterForQA = "";
            string filterByIsActive = "";
            string filterbyUser = "";
            string orderbysql = "";
            string orderbysql1 = "";
            string sortingorderbysql = "";
            string TotalRMRFilter = "";
            string filterbydaterange = "";
            string BranchQuery = "";
            string filterPackageQuery = "";
            string FilterSubquery = "";
            if (!string.IsNullOrWhiteSpace(filter.SettingOrderBy) && filter.SettingOrderBy != "undefined")
            {
                if (filter.SettingOrderBy == "Id desc")
                {
                    orderbysql = "order by #cd.Id desc";
                    orderbysql1 = "order by Id desc";
                }
                else if (filter.SettingOrderBy == "Id asc")
                {
                    orderbysql = "order by #cd.Id asc";
                    orderbysql1 = "order by Id asc";
                }
                else if (filter.SettingOrderBy == "DisplayName desc")
                {
                    orderbysql = "order by #cd.DisplayName desc";
                    orderbysql1 = "order by DisplayName desc";
                }
                else if (filter.SettingOrderBy == "DisplayName asc")
                {
                    orderbysql = "order by #cd.DisplayName asc";
                    orderbysql1 = "order by DisplayName asc";
                }
                else if (filter.SettingOrderBy == "JoinDate desc")
                {
                    //orderbysql = "order by #cd.JoinDate desc";
                    sortingorderbysql = "order by JoinDate desc";
                }
                else if (filter.SettingOrderBy == "JoinDate asc")
                {
                    //orderbysql = "order by #cd.JoinDate asc";
                    sortingorderbysql = "order by JoinDate asc";
                }
                else if (filter.SettingOrderBy == "City desc")
                {
                    orderbysql = "order by #cd.City desc";
                    orderbysql1 = "order by City desc";
                }
                else if (filter.SettingOrderBy == "City asc")
                {
                    orderbysql = "order by #cd.City asc";
                    orderbysql1 = "order by City asc";
                }
                else if (filter.SettingOrderBy == "descending/customer" || filter.SettingOrderBy == "descending/name")
                {
                    orderbysql = "order by #cd.DisplayName desc";
                    orderbysql1 = "order by DisplayName desc";
                }
                else if (filter.SettingOrderBy == "ascending/customer" || filter.SettingOrderBy == "ascending/name")
                {
                    orderbysql = "order by #cd.DisplayName asc";
                    orderbysql1 = "order by DisplayName asc";
                }
                else if (filter.SettingOrderBy == "descending/status")
                {
                    sortingorderbysql = "order by MonthlyMonitoringFee desc, InstallDate desc, SubscriptionStatus desc ";
                }
                else if (filter.SettingOrderBy == "ascending/status")
                {
                    sortingorderbysql = "order by MonthlyMonitoringFee asc, InstallDate asc, SubscriptionStatus asc";
                }
                else if (filter.SettingOrderBy == "descending/activity" || filter.SettingOrderBy == "descending/created on")
                {
                    sortingorderbysql = "order by JoinDate desc";
                }
                else if (filter.SettingOrderBy == "ascending/activity" || filter.SettingOrderBy == "ascending/created on")
                {
                    sortingorderbysql = "order by JoinDate asc";
                }
                else if (filter.SettingOrderBy == "descending/location")
                {
                    sortingorderbysql = "order by City desc, State desc, Street desc, PrimaryPhone desc";
                }
                else if (filter.SettingOrderBy == "ascending/location")
                {
                    sortingorderbysql = "order by City asc, State asc, Street asc, PrimaryPhone asc";
                }
                else if (filter.SettingOrderBy == "descending/account")
                {
                    sortingorderbysql = "order by PaymentMethod desc";
                }
                else if (filter.SettingOrderBy == "ascending/account")
                {
                    sortingorderbysql = "order by PaymentMethod asc";
                }
                else if (filter.SettingOrderBy == "descending/contact")
                {
                    sortingorderbysql = "order by PreferredContactMethod desc, ContactedPerviously desc, PrimaryPhone desc, CellNo desc, City desc, State desc, Street desc";
                }
                else if (filter.SettingOrderBy == "ascending/contact")
                {
                    sortingorderbysql = "order by PreferredContactMethod asc, ContactedPerviously asc, PrimaryPhone asc, CellNo asc, City asc, State asc, Street asc";
                }
                else if (filter.SettingOrderBy == "descending/billing")
                {
                    sortingorderbysql = "order by FirstBilling desc, BillAmount desc, BillDay desc, BillCycle desc, BillNotes desc, BillOutStanding desc, BillTax desc";
                }
                else if (filter.SettingOrderBy == "ascending/billing")
                {
                    sortingorderbysql = "order by FirstBilling asc, BillAmount asc, BillDay asc, BillCycle asc, BillNotes asc, BillOutStanding asc, BillTax asc";
                }
                else if (filter.SettingOrderBy == "descending/service date")
                {
                    sortingorderbysql = "order by ServiceDate desc";
                }
                else if (filter.SettingOrderBy == "ascending/service date")
                {
                    sortingorderbysql = "order by ServiceDate asc";
                }
                else if (filter.SettingOrderBy == "descending/active")
                {
                    sortingorderbysql = "order by IsActive desc";
                }
                else if (filter.SettingOrderBy == "ascending/active")
                {
                    sortingorderbysql = "order by IsActive asc";
                }
                else if (filter.SettingOrderBy == "descending/contract term")
                {
                    sortingorderbysql = "order by ContractTeam desc";
                }
                else if (filter.SettingOrderBy == "ascending/contract term")
                {
                    sortingorderbysql = "order by ContractTeam asc";
                }
                else if (filter.SettingOrderBy == "descending/phone no")
                {
                    sortingorderbysql = "order by PrimaryPhone desc, CellNo desc, SecondaryPhone desc";
                }
                else if (filter.SettingOrderBy == "ascending/phone no")
                {
                    sortingorderbysql = "order by PrimaryPhone asc, CellNo asc, SecondaryPhone asc";
                }
                else if (filter.SettingOrderBy == "descending/lead source")
                {
                    sortingorderbysql = "order by LeadSource desc, LeadSourceType desc";
                }
                else if (filter.SettingOrderBy == "ascending/lead source")
                {
                    sortingorderbysql = "order by LeadSource asc, LeadSourceType asc";
                }
                else
                {
                    orderbysql = "order by #cd.Id desc";
                    orderbysql1 = "order by Id desc";
                }
            }

            if (!string.IsNullOrWhiteSpace(filter.SearchText) && filter.SearchText != "undefined")
            {
                //bool isNumeric = Regex.IsMatch(filter.SearchText, @"\d");
                //if(isNumeric && filter.SearchText.Length == 10)
                //{
                //    filter.SearchText = string.Format("{0:0##-###-####}", Convert.ToInt64(filter.SearchText)).TrimStart('-');
                //}

                string strRegex = "^\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}$";
                //US number//eg (832) 972-5096
                Regex re = new Regex(strRegex);

                if (filter.SearchText.Length == 14 && re.IsMatch(filter.SearchText))
                {
                    //long SSN = 0;
                    //if (long.TryParse(filter.SearchText, out SSN))
                    //{
                    //    filter.SearchText = string.Format("{0:0##-###-####}", SSN).TrimStart('-');
                    //}
                    filter.SearchText = filter.SearchText.ReplaceSpecialChar("");
                }
                //filterColumntext = string.Format(" AND (CONTAINS(cus.SearchText, '\"*{0}*\"') OR CONTAINS(cus.SearchText, '\"{0}\"'))", Uri.UnescapeDataString(filter.SearchText.Trim()));
                filterColumntext = string.Format(" AND CHARINDEX(@SearchText,cus.SearchText) > 0", Uri.UnescapeDataString(filter.SearchText.Trim()));
                filtertext = " --AND FilterText like @SearchText ";
            }
            if (filter.SalesLocationText == "null")
            {
                filter.SalesLocationText = filter.SalesLocationText.Substring(0, filter.SalesLocationText.Length - 4);

            }
            var array = filter.SalesLocationText.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }
            string Filtersalesloc = "";
            if (!string.IsNullOrWhiteSpace(query))
            {
                Filtersalesloc += string.Format("and cus.saleslocation in ({0})", query);
            }


            if (filter.LeadSourceText == "null")
            {
                filter.LeadSourceText = filter.LeadSourceText.Substring(0, filter.LeadSourceText.Length - 4);
            }
            var arraySource = filter.LeadSourceText.Split(",");
            string querySource = "";
            if (arraySource != null)
            {
                foreach (var item in arraySource)
                {
                    querySource += string.Format("'{0}',", item);
                }
                querySource = querySource.Remove(querySource.Length - 1, 1);
            }

            if (!string.IsNullOrWhiteSpace(querySource))
            {
                filterByLeadSource += string.Format("and cus.LeadSource in ({0})", querySource);
            }

            if (filter.SalesPersonText == "null")
            {
                filter.SalesPersonText = filter.SalesPersonText.Substring(0, filter.SalesPersonText.Length - 4);

            }
            var array1 = filter.SalesPersonText.Split(",");
            string query1 = "";
            if (array1 != null)
            {
                foreach (var item in array1)
                {
                    query1 += string.Format("'{0}',", item);
                }
                query1 = query1.Remove(query1.Length - 1, 1);
            }
            string Filtersalesperson = "";
            if (!string.IsNullOrWhiteSpace(query1))
            {
                Filtersalesperson += string.Format("and cus.soldby in ({0})", query1);
            }

            if (filter.BranchidText == "null")
            {
                filter.BranchidText = filter.BranchidText.Substring(0, filter.BranchidText.Length - 4);

            }
            var array2 = filter.BranchidText.Split(",");
            string query2 = "";
            if (array2 != null)
            {
                foreach (var item in array2)
                {
                    query2 += string.Format("'{0}',", item);
                }
                query2 = query2.Remove(query2.Length - 1, 1);
            }
            string FilterBranch = "";
            if (!string.IsNullOrWhiteSpace(query2))
            {
                FilterBranch += string.Format("and cus.BranchId in ({0})", query2);
            }

            if (filter.LeadStatusText == "null")
            {
                filter.LeadStatusText = filter.LeadStatusText.Substring(0, filter.LeadStatusText.Length - 4);

            }
            var LesdStatus = filter.LeadStatusText.Split(",");
            string query3 = "";
            if (LesdStatus != null)
            {
                foreach (var item in LesdStatus)
                {
                    query3 += string.Format("'{0}',", item);
                }
                query3 = query3.Remove(query3.Length - 1, 1);
            }
            string FilterLeadStatus = "";
            if (!string.IsNullOrWhiteSpace(query3))
            {
                FilterLeadStatus += string.Format("and cus.[Status] in ({0})", query3);
            }


            if (filter.StatusText == "null")
            {
                filter.StatusText = filter.StatusText.Substring(0, filter.StatusText.Length - 4);

            }
            var CustomerStatus = filter.StatusText.Split(",");
            string query4 = "";
            if (CustomerStatus != null)
            {
                foreach (var item in CustomerStatus)
                {
                    query4 += string.Format("'{0}',", item);
                }
                query4 = query4.Remove(query4.Length - 1, 1);
            }
            string FilterCustomerStatus = "";
            if (!string.IsNullOrWhiteSpace(query4))
            {
                FilterCustomerStatus += string.Format("and cus.CustomerStatus in ({0})", query4);
            }
            string CountQuery = @"
								select
                                (select sum(CONVERT(float, MonthlyMonitoringFee)) from #CustomerData 
                                where MonthlyMonitoringFee != '-1'
                                and MonthlyMonitoringFee is not null
                                and IsActive = 1) TotalRMR,

                                (select COUNT(Id) from #CustomerData
                                where MonthlyMonitoringFee != '-1'
                                and MonthlyMonitoringFee is not null
								and MonthlyMonitoringFee != ''
                                and IsActive = 1) TotalRMRCount,

                                (SELECT SUM([TotalAmount]) FROM Invoice
								WHERE [Status] = 'Open' AND CustomerId in(Select CustomerId from #CustomerData)) as EstimateAmount, 

                                (SELECT SUM([BalanceDue]) FROM Invoice 
								WHERE [Status] = 'Open' or  [Status] = 'Partial' AND CustomerId in(Select CustomerId from #CustomerData)) as DueAmount,  

                                ISNULL((SELECT SUM([TotalAmount]) FROM Invoice 
								WHERE [Status]='Paid' AND CustomerId in(Select CustomerId from #CustomerData)),0) as PaidAmount,
								
                                0 as OrderCount, 0 as OrderValue,

                                (select COUNT(Id) count from #CustomerData) as CustomerCount";

            #region comment
            //if (!string.IsNullOrWhiteSpace(filter.TechnicianId) && filter.TechnicianId != "-1" && !string.IsNullOrWhiteSpace(filter.SalesPersonId) && filter.SalesPersonId != "-1")
            //{
            //    filterByUserName = string.Format("AND (cus.Installer='{0}' or cus.Soldby='{1}')", filter.TechnicianId , filter.SalesPersonId);
            //}
            //else
            //{
            //    if (!string.IsNullOrWhiteSpace(filter.SalesPersonId) && filter.SalesPersonId != "-1")
            //    {
            //        filterByUserName = string.Format("AND cus.Soldby='{0}' ", filter.SalesPersonId);
            //    }
            //    if (!string.IsNullOrWhiteSpace(filter.TechnicianId) && filter.TechnicianId!= "null" && filter.TechnicianId != "-1")
            //    {
            //        filterByUserName = string.Format("AND cus.Installer='{0}' ", filter.TechnicianId);
            //    }
            //}


            if (filter.EmployeeRole.ToLower().IndexOf("partner") > -1 && filter.Partners != null && filter.Partners.Count > 0)
            {
                string PartnerId = string.Join("','", filter.Partners.Select(x => x.UserId.ToString()));
                filterByUserName = string.Format("and (cus.Installer in('{0}') or cus.Soldby in('{0}') or cus.QA1 in('{0}') or cus.QA2 in ('{0}'))", PartnerId);
            }
            else if (filter.isPermit)
            {
                filterByUserName = "";
            }
            else
            {
                filterByUserName = string.Format("and (cus.Installer='{0}' or cus.Soldby='{0}' or cus.AccessGivenTo = '{0}')", filter.EmployeeId);
            }
            //[~Shariful-20-9-19]
            #endregion

            //if (!string.IsNullOrEmpty(filter.Package) && filter.Package != "-1" && filter.Package != "null" && filter.Package != "undefined")
            //{
            //    filterPackageQuery = string.Format("And Cus.Id in (select distinct(cus.Id) from booking bk left join customer cus on cus.CustomerId = bk.CustomerId left join bookingdetails bkdetails on bkdetails.BookingId = bk.BookingId where bkdetails.Package = '" + filter.Package + "')");
            //}

            //if (!string.IsNullOrWhiteSpace(filter.Source) && filter.Source != "-1" && filter.Source != "undefined")
            //{
            //    filterByLeadSource = string.Format("AND cus.LeadSource = '{0}'", filter.Source);
            //}
            //if (!string.IsNullOrWhiteSpace(filter.PaymentMethod) && filter.PaymentMethod != "-1" && filter.PaymentMethod != "undefined")
            //{
            //    filterByPaymentMethod = string.Format("AND cus.PaymentMethod = '{0}'", filter.PaymentMethod);
            //}
            //if (filter.FirstDate != new DateTime() && filter.LastDate != new DateTime())
            //{
            //    var StartDate = filter.FirstDate.SetZeroHour().ClientToUTCTime();
            //    var EndDate = filter.LastDate.SetMaxHour().ClientToUTCTime();

            //    filterbydaterange = string.Format(@"AND (cus.JoinDate between '{0}' and '{1}' 
            //                            OR cus.CreatedDate  between '{0}' and '{1}' ) ", StartDate, EndDate);
            //}
            //if (!string.IsNullOrWhiteSpace(filter.InstallationDate) && filter.InstallationDate != "undefined")
            //{
            //    try
            //    {
            //        DateTime date = Convert.ToDateTime(filter.InstallationDate);
            //        filterByDate += string.Format(" AND cus.InstallDate between '{0}' and '{1}'", date.ToString("MM-dd-yyyy"), date.AddDays(1).ToString("MM-dd-yyyy"));
            //    }
            //    catch (Exception) { }

            //}
            //if (!string.IsNullOrWhiteSpace(filter.SalesDate))
            //{
            //    try
            //    {
            //        DateTime date = Convert.ToDateTime(filter.SalesDate);
            //        filterByDate += string.Format(" AND cus.SalesDate between '{0}' and '{1}'", date.ToString("MM-dd-yyyy"), date.AddDays(1).ToString("MM-dd-yyyy"));
            //    }
            //    catch (Exception) { }
            //}
            //if (!string.IsNullOrWhiteSpace(filter.FollowUpDate))
            //{
            //    try
            //    {
            //        DateTime date = Convert.ToDateTime(filter.FollowUpDate);
            //        filterByDate += string.Format(" AND cus.FollowUpDate between '{0}' and '{1}'", date.ToString("MM-dd-yyyy"), date.AddDays(1).ToString("MM-dd-yyyy"));
            //    }
            //    catch (Exception) { }
            //}
            //if (filter.MonitoringCompany != "undefined" && !string.IsNullOrWhiteSpace(filter.MonitoringCompany) && filter.MonitoringCompany != "-1")
            //{
            //    filterByDate += string.Format(" AND cus.FundingCompany = '{0}'", filter.MonitoringCompany);
            //}

            //if (filter.EmployeeRole == "QA" || filter.EmployeeRole == "QA Manager")
            //{
            //    filterForQA = string.Format("AND _QAns.Id is null");
            //}
            //if (filter.EmployeeRole == "Sales Manager" || filter.EmployeeRole == "Sales Person")
            //{
            //    filterForQA = string.Format("AND _QAns.Id is not null");
            //}
            //if (filter.IsActive.HasValue)
            //{
            //    if (filter.IsActive.Value)
            //    {
            //        filterByIsActive = "AND cus.IsActive = 1";
            //    }
            //    else
            //    {
            //        filterByIsActive = "AND cus.IsActive = 0";
            //    }
            //}

            //if (!string.IsNullOrWhiteSpace(filter.SortBy) && filter.SortBy != "-1")
            //{
            //    if (filter.SortBy == "ascending/customer")
            //    {
            //        orderbysql = "ORDER BY DisplayName asc";
            //    }
            //    else if (filter.SortBy == "descending/customer")
            //    {
            //        orderbysql = "ORDER BY DisplayName desc";
            //    }
            //    else if (filter.SortBy == "ascending/location")
            //    {
            //        orderbysql = "ORDER BY City asc, State asc";
            //    }
            //    else if (filter.SortBy == "descending/location")
            //    {
            //        orderbysql = "ORDER BY City desc, State desc";
            //    }
            //    else if (filter.SortBy == "ascending/activity")
            //    {
            //        orderbysql = "ORDER BY JoinDate asc";
            //    }
            //    else if (filter.SortBy == "descending/activity")
            //    {
            //        orderbysql = "ORDER BY JoinDate desc";
            //    }
            //    else
            //    {
            //        orderbysql = string.Concat("ORDER BY ConvertionDate desc, Id Desc");
            //    }
            //}
            string filewrite = "";
            //if (filter.TotalRMR == true)
            //{
            //    TotalRMRFilter = string.Format("and cus.MonthlyMonitoringFee != '-1' and cus.MonthlyMonitoringFee is not null and cus.MonthlyMonitoringFee != ''", filter.TotalRMR);
            //}
            string TotalOpenInvoice = "";
            //if (filter.TotalOpenInvoice == true)
            //{
            //    TotalOpenInvoice = string.Format("and inv.IsEstimate = 0");
            //}
            string TotalDueInvoice = "";
            //if (filter.TotalDueInvoice == true)
            //{
            //    TotalDueInvoice = string.Format("and inv.Status = 'Open' and inv.DueDate < GETDATE()");
            //}
            string Othersquery = "";


            //if (!string.IsNullOrWhiteSpace(filter.Others))
            //{
            //    if (filter.Others == "isfire")
            //    {
            //        Othersquery = string.Format("and cus.IsFireAccount = 1");
            //    }
            //    else if (filter.Others == "nobilltax")
            //    {
            //        Othersquery = string.Format("and cus.BillTax = 0");
            //    }
            //    else if (filter.Others == "residential")
            //    {
            //        Othersquery = string.Format("and cus.Type = 'Residential'");
            //    }
            //    else if (filter.Others == "commercial")
            //    {
            //        Othersquery = string.Format("and cus.Type = 'Commercial'");
            //    }
            //    else if (filter.Others == "notbilling")
            //    {
            //        Othersquery = string.Format("and cus.MonthlyMonitoringFee = '' and cus.PaymentMethod = ''");
            //    }
            //}
            //if (filter.Branch != "-1" && filter.Branch != "undefined" && !string.IsNullOrWhiteSpace(filter.Branch))
            //{
            //    BranchQuery = "and cus.BranchId =" + filter.Branch;
            //}
            #region Naming Condition 
            //Extra Database call before customer search
            string NamingSql = "''";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            if (gs != null)
            {
                NamingSql = gs.Value;
            }
            #endregion
            /*New Filter Query For Customer*/
            #region Filter Query For Customer and Lead
            if (!string.IsNullOrWhiteSpace(filter.DisplayNameText))
            {
                string[] querysplit = filter.DisplayNameText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" AND  CONTAINS(cus.SearchText, '\"*{0}*\"')", Uri.UnescapeDataString(querysplit[1].Trim()));
                }

            }
            if (filter.FirstDate != new DateTime() && filter.LastDate != new DateTime())
            {
                var StartDate = filter.FirstDate.SetZeroHour().ClientToUTCTime();
                var EndDate = filter.LastDate.SetMaxHour().ClientToUTCTime();
                if (filter.isLead == true)
                {
                    filterbydaterange = string.Format(@"AND cus.CreatedDate between '{0}' and '{1}'", StartDate, EndDate);
                }
                else
                {

                    // filterbydaterange = string.Format(@"AND cus.JoinDate between '{0}' and '{1}'", StartDate, EndDate);
                    filterbydaterange = string.Format(@"AND Ccom.ConvertionDate between '{0}' and '{1}'", StartDate, EndDate);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.IdText))
            {
                string[] querysplit = filter.IdText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = {1}", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.BusinessNameText))
            {
                string[] querysplit = filter.BusinessNameText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.StreetText))
            {
                string[] querysplit = filter.StreetText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} like '%{1}%'", querysplit[0], Uri.UnescapeDataString(querysplit[1]));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.ActiveStatusText))
            {
                string[] querysplit = filter.ActiveStatusText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.CustomerNoText))
            {
                string[] querysplit = filter.CustomerNoText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.AccountNoText))
            {
                //Guess duplicate with customer no.
                string[] querysplit = filter.AccountNoText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            //if (!string.IsNullOrWhiteSpace(filter.BranchidText))
            //{
            //    string[] querysplit = filter.BranchidText.Split('#');
            //    if (querysplit.Length > 1)
            //    {
            //        FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
            //    }
            //}
            if (!string.IsNullOrWhiteSpace(filter.DbaText))
            {
                string[] querysplit = filter.DbaText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            //if (!string.IsNullOrWhiteSpace(filter.SalesLocationText))
            //{
            //    string[] querysplit = filter.SalesLocationText.Split('#');
            //    if (querysplit.Length > 1)
            //    {
            //        FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
            //    }
            //}

            if (!string.IsNullOrWhiteSpace(filter.EmailText))
            {
                string[] querysplit = filter.EmailText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.FirstNameText))
            {
                string[] querysplit = filter.FirstNameText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.LastNameText))
            {
                string[] querysplit = filter.LastNameText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            //if (!string.IsNullOrWhiteSpace(filter.LeadSourceText))
            //{
            //    string[] querysplit = filter.LeadSourceText.Split('#');
            //    if (querysplit.Length > 1)
            //    {
            //        FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
            //    }
            //}
            if (!string.IsNullOrWhiteSpace(filter.LeadStatusText))
            {
                string[] querysplit = filter.LeadStatusText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", "Status", querysplit[1]);
                }
            }
            //if (!string.IsNullOrWhiteSpace(filter.SalesPersonText))
            //{
            //    string[] querysplit = filter.SalesPersonText.Split('#');
            //    if (querysplit.Length > 1)
            //    {
            //        FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
            //    }
            //}

            if (!string.IsNullOrWhiteSpace(filter.CustomerTypeText))
            {
                string[] querysplit = filter.CustomerTypeText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.BusinessAccountTypeText))
            {
                string[] querysplit = filter.BusinessAccountTypeText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }

            if (!string.IsNullOrWhiteSpace(filter.PrimaryPhoneText))
            {
                string[] querysplit = filter.PrimaryPhoneText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.SecondaryPhoneText))
            {
                string[] querysplit = filter.SecondaryPhoneText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.CellNoText))
            {
                string[] querysplit = filter.CellNoText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }

            if (!string.IsNullOrWhiteSpace(filter.ActiveStatusText))
            {
                string[] querysplit = filter.ActiveStatusText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.JoinDateText))
            {
                string[] querysplit = filter.JoinDateText.Split('#');

                try
                {
                    DateTime starttime = DateTime.Parse(querysplit[1]);
                    if (querysplit.Length > 1)
                    {
                        FilterSubquery += string.Format(" and cus.{0} between '{1}' AND '{2}' ", querysplit[0], starttime.ToString(), starttime.AddHours(24).ToString());
                    }
                }
                catch (Exception ex)
                {

                }

            }
            if (!string.IsNullOrWhiteSpace(filter.FollowupDateText))
            {
                string[] querysplit = filter.FollowupDateText.Split('#');
                try
                {
                    DateTime starttime = DateTime.Parse(querysplit[1]);
                    if (querysplit.Length > 1)
                    {
                        FilterSubquery += string.Format(" and cus.{0} between '{1}' AND '{2}' ", querysplit[0], starttime.ToString(), starttime.AddHours(24).ToString());
                    }
                }
                catch (Exception ex)
                {

                }
            }
            #endregion

            #region Platform Table join 
            string PlatformTableJoinTableQuery = "";

            if (!string.IsNullOrWhiteSpace(filter.PlatformIdText))
            {
                string[] querysplit = filter.PlatformIdText.Split('#');
                if (querysplit.Length > 1)
                {
                    PlatformTableJoinTableQuery = " left join CustomerMigration cm on cm.CustomerId = cus.CustomerId ";
                    FilterSubquery += string.Format("and cm.RefenrenceId =  '{0}'", querysplit[1]);
                }
            }

            #endregion

            CountQuery = filter.isLead == true ? "" : CountQuery;
            try
            {
                sqlQuery = string.Format(sqlQuery,
                    /*0*/ filter.CompanyId,
                    /*1*/filterColumntext,
                    /*2*/filtertext,
                    /*3*/ filterByUserName,
                    /*4*/filterByLeadSource,
                    /*5*/filterByDate,
                    /*6*/filterForQA,
                    /*7*/filterByPaymentMethod,
                    /*8*/filterByIsActive,
                    /*9*/filterbyUser,
                    /*10*/orderbysql,
                    /*11*/TotalRMRFilter,
                    /*12*/TotalOpenInvoice,
                    /*13*/TotalDueInvoice,
                    /*14*/filterbydaterange,
                    /*15*/Othersquery,
                    /*16*/BranchQuery,
                    /*17*/SoldByQuery,
                    /*18*/NamingSql,
                    /*19*/filterPackageQuery,
                    /*20*/FilterSubquery,
                    /*21*/orderbysql1,
                    /*22*/CountQuery,
                    /*23*/filter.isLead == true ? 1 : 0,
                    /*24*/PlatformTableJoinTableQuery,
                     /*25*/Filtersalesloc,
                     /*26*/Filtersalesperson,
                     /*27*/FilterBranch,
                    /*28*/ResOrderQuery,
                    /*29*/FilterLeadStatus,
                    /*30*/FilterCustomerStatus,
                    /*31*/sortingorderbysql);
                filewrite = sqlQuery;
                //System.IO.File.WriteAllText(@"C:\www\rmrcloud.com\transactionId.txt", filewrite); 
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", filter.PageNo));
                    AddParameter(cmd, pInt32("pagesize", filter.PageSize));
                    if (!string.IsNullOrWhiteSpace(filter.SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(filter.SearchText.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                //filewrite = filewrite + "::: " + ex.Message;
                //System.IO.File.WriteAllText(@"C:\www\rmrcloud.com\transactionId.txt", filewrite);
                return null;
            }
        }

        public DataSet GetCustomerListByLiteFilter(CustomerLiteFilter filter)
        {

            string SoldByQuery = "";
            string ResOrderQuery = "";
            if (filter.OrderPermission)
            {
                ResOrderQuery = string.Format("(select COUNT(ro.Id) from ResturantOrder ro where ro.CustomerId = cfd.CustomerId and ro.CompanyId = '{0}') as OrderCount, (select cast(isnull(SUM(ro.Amount), 0) as numeric(36,2)) from ResturantOrder ro where ro.CustomerId = cfd.CustomerId and ro.CompanyId = '{0}') as OrderValue, (select isnull([Value], 0) from GlobalSetting where CompanyId = '{0}' and SearchKey = 'FrequentCustomerLimit') as FrequentCusLimit,", filter.CompanyId);
            }
            string sqlQuery = @" 
                                declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

                                SELECT 
                                distinct
                                cus.Id ,
                                {18} as DisplayName,
                                cus.CustomerId, 
                                cus.IsActive,
                                lkstatus.DisplayText as LeadStatus,
                                lkcstatus.DisplayText as CustomerStatus, 
								CASE when lkleadsource.ParentDataKey <> ''
								THEN
								lkleadsource.ParentDataKey+ ' -> ' +lkleadsource.DisplayText
								ELSE
								lkleadsource.DisplayText
								END As LeadSource,
                                cus.CutInDate ,
                                ROUND(cus.MonthlyMonitoringFee, 2) AS MonthlyMonitoringFee ,
                                cus.State,
								cus.City,
                                cus.PlatformId,
                                Ccom.ConvertionDate, 
                                cus.DoNotCall,
                                cus.PreferredContactMethod 
                                INTO #CustomerData
                                FROM Customer cus
                                LEFT JOIN CustomerCompany Ccom
                                  ON cus.CustomerId = Ccom.CustomerId

                                 left join Lookup lkcstatus on lkcstatus.DataValue = cus.CustomerStatus and lkcstatus.DataKey = 'CustomerStatus1' and lkcstatus.DataValue!='-1'    
                                 left join [Lookup] lkleadsource on lkleadsource.DataKey = 'LeadSource' and lkleadsource.DataValue = cus.LeadSource and cus.LeadSource!='-1'
                                left join Lookup lkstatus on lkstatus.DataValue = cus.Status and lkstatus.DataKey = 'LeadStatus' 
                                left join [Lookup] lkinstalledstatus on lkinstalledstatus.DataValue = iif(cus.InstalledStatus != '-1', cus.InstalledStatus, '') and lkinstalledstatus.DataKey = 'InstalledStatus'
                                {24}
                                
                                WHERE Ccom.CompanyId = '{0}' 
                                AND Ccom.IsLead = {23}
                                and Ccom.IsActive = 1
                                and cus.JoinDate is not null
                                {19}
                                {17}
                                {6}
                                {3}
                                {4}
                                {5}
                                {7}
                                {8}
                                {9}
                                {11}
                                {12}
                                {13}
                                {14}
                                {15}
                                {16}
                                {1}
                                --{10}
                                 {20}
                                {25}
                                {26}
                                {27}
                                {29}
                                {30}
                                --select * into #CustomerFilterData
								--FROM #CustomerData
                                --{2}

                                SELECT TOP (@pagesize)
                                  *  Into #CustomerResultData
                                FROM #CustomerData
                                where Id NOT IN(Select TOP (@pagestart)  Id from #CustomerData #cd {10})
							    {21}     


								select cfd.*,cus.CustomerNo,
                                cus.Title,
                                cus.FirstName ,
                                cus.LastName ,
                                cus.MiddleName ,
                                cus.BusinessName ,
                                cus.SSN,
		                        cus.[Status],
		                        cus.Street,
		                        cus.ZipCode, 
		                        cus.[Address],
		                        cus.EmailAddress,
		                        dbo.PhoneNumFormat(cus.PrimaryPhone) as PrimaryPhone,
                                dbo.PhoneNumFormat(cus.SecondaryPhone) as SecondaryPhone,
								cus.DateofBirth,
								cus.LastUpdatedDate,
								cus.LastUpdatedBy,
                                cus.StreetType,
								cus.Appartment,
                                dbo.PhoneNumFormat(cus.CellNo) as CellNo,
                                cus.Fax,
                                cus.CallingTime,
                                cus.Address2,
                                cus.Country,
                                cus.StreetPrevious,
                                cus.CityPrevious,
                                cus.StatePrevious,
                                cus.ZipCodePrevious,
                                cus.CountryPrevious,
                                cus.AccountNo,
                                cus.IsAlarmCom,
                                cus.CreditScore,
                                cus.CreditScoreValue,
                                cus.ContractTeam,
                                cus.FundingCompany,
                                cus.CellularBackup,
                                cus.CustomerFunded,
                                cus.PlatformId,
                                cus.Maintenance,
                                cus.Note,
                                cus.SalesDate,
                                cus.FollowUpDate,
                                cus.InstallDate,
                                cus.Installer,
                                cus.FundingDate,
                                cus.ReminderDate,
                                cus.QA1Date,
                                cus.QA2Date,
                                cus.BillAmount,
                                cus.PaymentMethod,
                                cus.BillCycle,
                                cus.LeadSourceType,
                                cus.BillDay,
                                cus.BillNotes,
                                cus.BillTax,
                                cus.BillOutStanding,
                                cus.ServiceDate,
                                cus.Area,
                                cus.Latlng,
                                cus.SecondCustomerNo,
                                cus.AdditionalCustomerNo,
                                cus.IsTechCallPassed,
                                cus.IsDirect,
                                cus.AuthorizeRefId,
                                cus.AuthorizeCusProfileId,
                                cus.AuthorizeCusPaymentProfileId,
                                cus.AuthorizeDescription,
                                cus.IsRequiredCsvSync,
                                cus.Passcode,
                                cus.ActivationFee,
                                cus.FirstBilling,
                                cus.ActivationFeePaymentMethod,
                                cus.LastGeneratedInvoice,
                                cus.Singature,
                                cus.CrossStreet,
                                cus.DBA,
                                cus.AlarmRefId,
                                cus.TransunionRefId,
                                cus.MonitronicsRefId,
                                cus.CentralStationRefId,
                                cus.CmsRefId,
                                cus.PreferedEmail,
                                cus.PreferedSms,
                                cus.IsAgreement,
                                cus.IsFireAccount,
                                cus.CreatedByUid,
                                cus.CreatedDate,
                                cus.LastUpdatedByUid,
                                cus.BusinessAccountType,
                                cus.PhoneType,
                                cus.Carrier,
                                cus.ReferringCustomer,
                                cus.EsistingPanel,
                                cus.[Ownership],
                                cus.PurchasePrice,
                                cus.ContractValue,
                                --cus.ChildOf,
                                CASE 
								WHEN (C.DBA = '' or C.DBA IS NULL) AND  (C.BusinessName = '' or C.BusinessName IS NULL) THEN C.FirstName +' '+C.LastName
								WHEN (C.DBA = '' or C.DBA IS NULL)  THEN C.BusinessName
								ELSE  C.DBA
								END as ChildOf,
                                cus.EmailVerified,
                                cus.HomeVerified,
                                cus.County,
                                cus.CustomerToken,
                                cus.PaymentToken,
                                cus.ScheduleToken,
                                cus.EstCloseDate,
                                cus.ProjectWalkDate,
                                cus.BranchId,
                                cus.SubscriptionStatus,
                                cus.AnnualRevenue,
                                cus.Website,
                                cus.Market,
                                cus.Passengers,
                                cus.Budget,
                                cus.SmartSetUpStep,
                                cus.CustomerAccountType,
                                cus.IsPrimaryPhoneVerified,
                                cus.IsSecondaryPhoneVerified,
                                cus.IsCellNoVerified,
                                cus.JoinDate,
                                cus.[Type],
                                cus.MovingDate,
                                cus.ContactedPerviously,
                                cus.InstalledStatus,
                                cus.AcquiredFrom,
                                cus.FollowUpDate,
                                cus.BuyoutAmountByADS,
                                cus.BuyoutAmountBySalesRep,
                                cus.FinancedTerm,
                                cus.FinancedAmount,
                                cus.Levels,
                                cus.SoldAmount,
                                cus.AgreementEmail,
                                dbo.PhoneNumFormat(cus.AgreementPhoneNo) as AgreementPhoneNo,
                                cus.TaxExemption,
                                emp.firstname +' '+ emp.lastname as Soldby,
                                cus.AppoinmentSet, 
                                {28}
                                cus.MapscoNo,
                                CR.Name as RouteName,
								ExCus.GeeseCount
                                ,(select count(*) from CustomerFile Cf where GeeseFileType ='Media' and Cf.CustomerId = cfd.CustomerId and Filename != '') as MediaCount
								,(select count(*) from CustomerFile Cf where GeeseFileType ='Note' and Cf.CustomerId = cfd.CustomerId and FileDescription != '') as NoteCount
								 from #CustomerResultData cfd  
								Left Join Customer cus on cus.CustomerId = cfd.CustomerId
                                Left Join Customer C on C.CustomerId = cus.ChildOf
                                Left join Employee emp on emp.UserId = cus.soldby1
                                Left join CustomerRoute CR on CR.CustomerId = cus.CustomerId
                                Left Join CustomerExtended ExCus on ExCus.CustomerId = cus.CustomerId
								{21}  
                                {31} 
								
								drop table #CustomerResultData


                                select count(*) [TotalCount]
                                from #CustomerData
                                 
                                {22}

                                DROP TABLE #CustomerData
                                --DROP TABLE #CustomerFilterData";

            string filtertext = "";
            string filterColumntext = "";
            string filterByUserName = "";

            string filterByLeadSource = "";
            string filterByPaymentMethod = "";
            string filterByDate = "";
            string filterForQA = "";
            string filterByIsActive = "";
            string filterbyUser = "";
            string orderbysql = "";
            string orderbysql1 = "";
            string sortingorderbysql = "";
            string TotalRMRFilter = "";
            string filterbydaterange = "";
            string BranchQuery = "";
            string filterPackageQuery = "";
            string FilterSubquery = "";
            if (!string.IsNullOrWhiteSpace(filter.SettingOrderBy) && filter.SettingOrderBy != "undefined")
            {
                if (filter.SettingOrderBy == "Id desc")
                {
                    orderbysql = "order by #cd.Id desc";
                    orderbysql1 = "order by Id desc";
                }
                else if (filter.SettingOrderBy == "Id asc")
                {
                    orderbysql = "order by #cd.Id asc";
                    orderbysql1 = "order by Id asc";
                }
                else if (filter.SettingOrderBy == "DisplayName desc")
                {
                    orderbysql = "order by #cd.DisplayName desc";
                    orderbysql1 = "order by DisplayName desc";
                }
                else if (filter.SettingOrderBy == "DisplayName asc")
                {
                    orderbysql = "order by #cd.DisplayName asc";
                    orderbysql1 = "order by DisplayName asc";
                }
                else if (filter.SettingOrderBy == "JoinDate desc")
                {
                    //orderbysql = "order by #cd.JoinDate desc";
                    sortingorderbysql = "order by JoinDate desc";
                }
                else if (filter.SettingOrderBy == "JoinDate asc")
                {
                    //orderbysql = "order by #cd.JoinDate asc";
                    sortingorderbysql = "order by JoinDate asc";
                }
                else if (filter.SettingOrderBy == "City desc")
                {
                    orderbysql = "order by #cd.City desc";
                    orderbysql1 = "order by City desc";
                }
                else if (filter.SettingOrderBy == "City asc")
                {
                    orderbysql = "order by #cd.City asc";
                    orderbysql1 = "order by City asc";
                }
                else if (filter.SettingOrderBy == "descending/customer" || filter.SettingOrderBy == "descending/name")
                {
                    orderbysql = "order by #cd.DisplayName desc";
                    orderbysql1 = "order by DisplayName desc";
                }
                else if (filter.SettingOrderBy == "ascending/customer" || filter.SettingOrderBy == "ascending/name")
                {
                    orderbysql = "order by #cd.DisplayName asc";
                    orderbysql1 = "order by DisplayName asc";
                }
                else if (filter.SettingOrderBy == "descending/status")
                {
                    sortingorderbysql = "order by MonthlyMonitoringFee desc, InstallDate desc, SubscriptionStatus desc ";
                }
                else if (filter.SettingOrderBy == "ascending/status")
                {
                    sortingorderbysql = "order by MonthlyMonitoringFee asc, InstallDate asc, SubscriptionStatus asc";
                }
                else if (filter.SettingOrderBy == "descending/activity" || filter.SettingOrderBy == "descending/created on")
                {
                    sortingorderbysql = "order by JoinDate desc";
                }
                else if (filter.SettingOrderBy == "ascending/activity" || filter.SettingOrderBy == "ascending/created on")
                {
                    sortingorderbysql = "order by JoinDate asc";
                }
                else if (filter.SettingOrderBy == "descending/location")
                {
                    sortingorderbysql = "order by City desc, State desc, Street desc, PrimaryPhone desc";
                }
                else if (filter.SettingOrderBy == "ascending/location")
                {
                    sortingorderbysql = "order by City asc, State asc, Street asc, PrimaryPhone asc";
                }
                else if (filter.SettingOrderBy == "descending/account")
                {
                    sortingorderbysql = "order by PaymentMethod desc";
                }
                else if (filter.SettingOrderBy == "ascending/account")
                {
                    sortingorderbysql = "order by PaymentMethod asc";
                }
                else if (filter.SettingOrderBy == "descending/contact")
                {
                    sortingorderbysql = "order by PreferredContactMethod desc, ContactedPerviously desc, PrimaryPhone desc, CellNo desc, City desc, State desc, Street desc";
                }
                else if (filter.SettingOrderBy == "ascending/contact")
                {
                    sortingorderbysql = "order by PreferredContactMethod asc, ContactedPerviously asc, PrimaryPhone asc, CellNo asc, City asc, State asc, Street asc";
                }
                else if (filter.SettingOrderBy == "descending/billing")
                {
                    sortingorderbysql = "order by FirstBilling desc, BillAmount desc, BillDay desc, BillCycle desc, BillNotes desc, BillOutStanding desc, BillTax desc";
                }
                else if (filter.SettingOrderBy == "ascending/billing")
                {
                    sortingorderbysql = "order by FirstBilling asc, BillAmount asc, BillDay asc, BillCycle asc, BillNotes asc, BillOutStanding asc, BillTax asc";
                }
                else if (filter.SettingOrderBy == "descending/service date")
                {
                    sortingorderbysql = "order by ServiceDate desc";
                }
                else if (filter.SettingOrderBy == "ascending/service date")
                {
                    sortingorderbysql = "order by ServiceDate asc";
                }
                else if (filter.SettingOrderBy == "descending/active")
                {
                    sortingorderbysql = "order by IsActive desc";
                }
                else if (filter.SettingOrderBy == "ascending/active")
                {
                    sortingorderbysql = "order by IsActive asc";
                }
                else if (filter.SettingOrderBy == "descending/contract term")
                {
                    sortingorderbysql = "order by ContractTeam desc";
                }
                else if (filter.SettingOrderBy == "ascending/contract term")
                {
                    sortingorderbysql = "order by ContractTeam asc";
                }
                else if (filter.SettingOrderBy == "descending/phone no")
                {
                    sortingorderbysql = "order by PrimaryPhone desc, CellNo desc, SecondaryPhone desc";
                }
                else if (filter.SettingOrderBy == "ascending/phone no")
                {
                    sortingorderbysql = "order by PrimaryPhone asc, CellNo asc, SecondaryPhone asc";
                }
                else if (filter.SettingOrderBy == "descending/lead source")
                {
                    sortingorderbysql = "order by LeadSource desc, LeadSourceType desc";
                }
                else if (filter.SettingOrderBy == "ascending/lead source")
                {
                    sortingorderbysql = "order by LeadSource asc, LeadSourceType asc";
                }
                else
                {
                    orderbysql = "order by #cd.Id desc";
                    orderbysql1 = "order by Id desc";
                }
            }

            if (!string.IsNullOrWhiteSpace(filter.SearchText) && filter.SearchText != "undefined")
            {
                //bool isNumeric = Regex.IsMatch(filter.SearchText, @"\d");
                //if(isNumeric && filter.SearchText.Length == 10)
                //{
                //    filter.SearchText = string.Format("{0:0##-###-####}", Convert.ToInt64(filter.SearchText)).TrimStart('-');
                //}

                string strRegex = "^\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}$";
                //US number//eg (832) 972-5096
                Regex re = new Regex(strRegex);

                if (filter.SearchText.Length == 14 && re.IsMatch(filter.SearchText))
                {
                    //long SSN = 0;
                    //if (long.TryParse(filter.SearchText, out SSN))
                    //{
                    //    filter.SearchText = string.Format("{0:0##-###-####}", SSN).TrimStart('-');
                    //}
                    filter.SearchText = filter.SearchText.ReplaceSpecialChar("");
                }
                //filterColumntext = string.Format(" AND (CONTAINS(cus.SearchText, '\"*{0}*\"') OR CONTAINS(cus.SearchText, '\"{0}\"'))", Uri.UnescapeDataString(filter.SearchText.Trim()));
                filterColumntext = string.Format(" AND CHARINDEX(@SearchText,cus.SearchText) > 0", Uri.UnescapeDataString(filter.SearchText.Trim()));
                filtertext = " --AND FilterText like @SearchText ";
            }
            if (filter.SalesLocationText == "null")
            {
                filter.SalesLocationText = filter.SalesLocationText.Substring(0, filter.SalesLocationText.Length - 4);

            }
            var array = filter.SalesLocationText.Split(",");
            string query = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    query += string.Format("'{0}',", item);
                }
                query = query.Remove(query.Length - 1, 1);
            }
            string Filtersalesloc = "";
            if (!string.IsNullOrWhiteSpace(query))
            {
                Filtersalesloc += string.Format("and cus.saleslocation in ({0})", query);
            }


            if (filter.LeadSourceText == "null")
            {
                filter.LeadSourceText = filter.LeadSourceText.Substring(0, filter.LeadSourceText.Length - 4);
            }
            var arraySource = filter.LeadSourceText.Split(",");
            string querySource = "";
            if (arraySource != null)
            {
                foreach (var item in arraySource)
                {
                    querySource += string.Format("'{0}',", item);
                }
                querySource = querySource.Remove(querySource.Length - 1, 1);
            }

            if (!string.IsNullOrWhiteSpace(querySource))
            {
                filterByLeadSource += string.Format("and cus.LeadSource in ({0})", querySource);
            }

            if (filter.SalesPersonText == "null")
            {
                filter.SalesPersonText = filter.SalesPersonText.Substring(0, filter.SalesPersonText.Length - 4);

            }
            var array1 = filter.SalesPersonText.Split(",");
            string query1 = "";
            if (array1 != null)
            {
                foreach (var item in array1)
                {
                    query1 += string.Format("'{0}',", item);
                }
                query1 = query1.Remove(query1.Length - 1, 1);
            }
            string Filtersalesperson = "";
            if (!string.IsNullOrWhiteSpace(query1))
            {
                Filtersalesperson += string.Format("and cus.soldby in ({0})", query1);
            }

            if (filter.BranchidText == "null")
            {
                filter.BranchidText = filter.BranchidText.Substring(0, filter.BranchidText.Length - 4);

            }
            var array2 = filter.BranchidText.Split(",");
            string query2 = "";
            if (array2 != null)
            {
                foreach (var item in array2)
                {
                    query2 += string.Format("'{0}',", item);
                }
                query2 = query2.Remove(query2.Length - 1, 1);
            }
            string FilterBranch = "";
            if (!string.IsNullOrWhiteSpace(query2))
            {
                FilterBranch += string.Format("and cus.BranchId in ({0})", query2);
            }

            if (filter.LeadStatusText == "null")
            {
                filter.LeadStatusText = filter.LeadStatusText.Substring(0, filter.LeadStatusText.Length - 4);

            }
            var LesdStatus = filter.LeadStatusText.Split(",");
            string query3 = "";
            if (LesdStatus != null)
            {
                foreach (var item in LesdStatus)
                {
                    query3 += string.Format("'{0}',", item);
                }
                query3 = query3.Remove(query3.Length - 1, 1);
            }
            string FilterLeadStatus = "";
            if (!string.IsNullOrWhiteSpace(query3))
            {
                FilterLeadStatus += string.Format("and cus.[Status] in ({0})", query3);
            }


            if (filter.StatusText == "null")
            {
                filter.StatusText = filter.StatusText.Substring(0, filter.StatusText.Length - 4);

            }
            var CustomerStatus = filter.StatusText.Split(",");
            string query4 = "";
            if (CustomerStatus != null)
            {
                foreach (var item in CustomerStatus)
                {
                    query4 += string.Format("'{0}',", item);
                }
                query4 = query4.Remove(query4.Length - 1, 1);
            }
            string FilterCustomerStatus = "";
            if (!string.IsNullOrWhiteSpace(query4))
            {
                FilterCustomerStatus += string.Format("and cus.CustomerStatus in ({0})", query4);
            }
            string CountQuery = @"
								select
                                (select sum(CONVERT(float, MonthlyMonitoringFee)) from #CustomerData 
                                where MonthlyMonitoringFee != '-1'
                                and MonthlyMonitoringFee is not null
                                and IsActive = 1) TotalRMR,

                                (select COUNT(Id) from #CustomerData
                                where MonthlyMonitoringFee != '-1'
                                and MonthlyMonitoringFee is not null
								and MonthlyMonitoringFee != ''
                                and IsActive = 1) TotalRMRCount,

                                (SELECT SUM([TotalAmount]) FROM Invoice
								WHERE [Status] = 'Open' AND CustomerId in(Select CustomerId from #CustomerData)) as EstimateAmount, 

                                (SELECT SUM([BalanceDue]) FROM Invoice 
								WHERE [Status] = 'Open' or  [Status] = 'Partial' AND CustomerId in(Select CustomerId from #CustomerData)) as DueAmount,  

                                ISNULL((SELECT SUM([TotalAmount]) FROM Invoice 
								WHERE [Status]='Paid' AND CustomerId in(Select CustomerId from #CustomerData)),0) as PaidAmount,
								
                                0 as OrderCount, 0 as OrderValue,

                                (select COUNT(Id) count from #CustomerData) as CustomerCount";

            #region comment
            //if (!string.IsNullOrWhiteSpace(filter.TechnicianId) && filter.TechnicianId != "-1" && !string.IsNullOrWhiteSpace(filter.SalesPersonId) && filter.SalesPersonId != "-1")
            //{
            //    filterByUserName = string.Format("AND (cus.Installer='{0}' or cus.Soldby='{1}')", filter.TechnicianId , filter.SalesPersonId);
            //}
            //else
            //{
            //    if (!string.IsNullOrWhiteSpace(filter.SalesPersonId) && filter.SalesPersonId != "-1")
            //    {
            //        filterByUserName = string.Format("AND cus.Soldby='{0}' ", filter.SalesPersonId);
            //    }
            //    if (!string.IsNullOrWhiteSpace(filter.TechnicianId) && filter.TechnicianId!= "null" && filter.TechnicianId != "-1")
            //    {
            //        filterByUserName = string.Format("AND cus.Installer='{0}' ", filter.TechnicianId);
            //    }
            //}


            if (filter.EmployeeRole.ToLower().IndexOf("partner") > -1 && filter.Partners != null && filter.Partners.Count > 0)
            {
                string PartnerId = string.Join("','", filter.Partners.Select(x => x.UserId.ToString()));
                filterByUserName = string.Format("and (cus.Installer in('{0}') or cus.Soldby in('{0}') or cus.QA1 in('{0}') or cus.QA2 in ('{0}'))", PartnerId);
            }
            else if (filter.isPermit)
            {
                filterByUserName = "";
            }
            else
            {
                filterByUserName = string.Format("and (cus.Installer='{0}' or cus.Soldby='{0}' or cus.AccessGivenTo = '{0}')", filter.EmployeeId);
            }
            //[~Shariful-20-9-19]
            #endregion

            //if (!string.IsNullOrEmpty(filter.Package) && filter.Package != "-1" && filter.Package != "null" && filter.Package != "undefined")
            //{
            //    filterPackageQuery = string.Format("And Cus.Id in (select distinct(cus.Id) from booking bk left join customer cus on cus.CustomerId = bk.CustomerId left join bookingdetails bkdetails on bkdetails.BookingId = bk.BookingId where bkdetails.Package = '" + filter.Package + "')");
            //}

            //if (!string.IsNullOrWhiteSpace(filter.Source) && filter.Source != "-1" && filter.Source != "undefined")
            //{
            //    filterByLeadSource = string.Format("AND cus.LeadSource = '{0}'", filter.Source);
            //}
            //if (!string.IsNullOrWhiteSpace(filter.PaymentMethod) && filter.PaymentMethod != "-1" && filter.PaymentMethod != "undefined")
            //{
            //    filterByPaymentMethod = string.Format("AND cus.PaymentMethod = '{0}'", filter.PaymentMethod);
            //}
            //if (filter.FirstDate != new DateTime() && filter.LastDate != new DateTime())
            //{
            //    var StartDate = filter.FirstDate.SetZeroHour().ClientToUTCTime();
            //    var EndDate = filter.LastDate.SetMaxHour().ClientToUTCTime();

            //    filterbydaterange = string.Format(@"AND (cus.JoinDate between '{0}' and '{1}' 
            //                            OR cus.CreatedDate  between '{0}' and '{1}' ) ", StartDate, EndDate);
            //}
            //if (!string.IsNullOrWhiteSpace(filter.InstallationDate) && filter.InstallationDate != "undefined")
            //{
            //    try
            //    {
            //        DateTime date = Convert.ToDateTime(filter.InstallationDate);
            //        filterByDate += string.Format(" AND cus.InstallDate between '{0}' and '{1}'", date.ToString("MM-dd-yyyy"), date.AddDays(1).ToString("MM-dd-yyyy"));
            //    }
            //    catch (Exception) { }

            //}
            //if (!string.IsNullOrWhiteSpace(filter.SalesDate))
            //{
            //    try
            //    {
            //        DateTime date = Convert.ToDateTime(filter.SalesDate);
            //        filterByDate += string.Format(" AND cus.SalesDate between '{0}' and '{1}'", date.ToString("MM-dd-yyyy"), date.AddDays(1).ToString("MM-dd-yyyy"));
            //    }
            //    catch (Exception) { }
            //}
            //if (!string.IsNullOrWhiteSpace(filter.FollowUpDate))
            //{
            //    try
            //    {
            //        DateTime date = Convert.ToDateTime(filter.FollowUpDate);
            //        filterByDate += string.Format(" AND cus.FollowUpDate between '{0}' and '{1}'", date.ToString("MM-dd-yyyy"), date.AddDays(1).ToString("MM-dd-yyyy"));
            //    }
            //    catch (Exception) { }
            //}
            //if (filter.MonitoringCompany != "undefined" && !string.IsNullOrWhiteSpace(filter.MonitoringCompany) && filter.MonitoringCompany != "-1")
            //{
            //    filterByDate += string.Format(" AND cus.FundingCompany = '{0}'", filter.MonitoringCompany);
            //}

            //if (filter.EmployeeRole == "QA" || filter.EmployeeRole == "QA Manager")
            //{
            //    filterForQA = string.Format("AND _QAns.Id is null");
            //}
            //if (filter.EmployeeRole == "Sales Manager" || filter.EmployeeRole == "Sales Person")
            //{
            //    filterForQA = string.Format("AND _QAns.Id is not null");
            //}
            //if (filter.IsActive.HasValue)
            //{
            //    if (filter.IsActive.Value)
            //    {
            //        filterByIsActive = "AND cus.IsActive = 1";
            //    }
            //    else
            //    {
            //        filterByIsActive = "AND cus.IsActive = 0";
            //    }
            //}

            //if (!string.IsNullOrWhiteSpace(filter.SortBy) && filter.SortBy != "-1")
            //{
            //    if (filter.SortBy == "ascending/customer")
            //    {
            //        orderbysql = "ORDER BY DisplayName asc";
            //    }
            //    else if (filter.SortBy == "descending/customer")
            //    {
            //        orderbysql = "ORDER BY DisplayName desc";
            //    }
            //    else if (filter.SortBy == "ascending/location")
            //    {
            //        orderbysql = "ORDER BY City asc, State asc";
            //    }
            //    else if (filter.SortBy == "descending/location")
            //    {
            //        orderbysql = "ORDER BY City desc, State desc";
            //    }
            //    else if (filter.SortBy == "ascending/activity")
            //    {
            //        orderbysql = "ORDER BY JoinDate asc";
            //    }
            //    else if (filter.SortBy == "descending/activity")
            //    {
            //        orderbysql = "ORDER BY JoinDate desc";
            //    }
            //    else
            //    {
            //        orderbysql = string.Concat("ORDER BY ConvertionDate desc, Id Desc");
            //    }
            //}
            string filewrite = "";
            //if (filter.TotalRMR == true)
            //{
            //    TotalRMRFilter = string.Format("and cus.MonthlyMonitoringFee != '-1' and cus.MonthlyMonitoringFee is not null and cus.MonthlyMonitoringFee != ''", filter.TotalRMR);
            //}
            string TotalOpenInvoice = "";
            //if (filter.TotalOpenInvoice == true)
            //{
            //    TotalOpenInvoice = string.Format("and inv.IsEstimate = 0");
            //}
            string TotalDueInvoice = "";
            //if (filter.TotalDueInvoice == true)
            //{
            //    TotalDueInvoice = string.Format("and inv.Status = 'Open' and inv.DueDate < GETDATE()");
            //}
            string Othersquery = "";


            //if (!string.IsNullOrWhiteSpace(filter.Others))
            //{
            //    if (filter.Others == "isfire")
            //    {
            //        Othersquery = string.Format("and cus.IsFireAccount = 1");
            //    }
            //    else if (filter.Others == "nobilltax")
            //    {
            //        Othersquery = string.Format("and cus.BillTax = 0");
            //    }
            //    else if (filter.Others == "residential")
            //    {
            //        Othersquery = string.Format("and cus.Type = 'Residential'");
            //    }
            //    else if (filter.Others == "commercial")
            //    {
            //        Othersquery = string.Format("and cus.Type = 'Commercial'");
            //    }
            //    else if (filter.Others == "notbilling")
            //    {
            //        Othersquery = string.Format("and cus.MonthlyMonitoringFee = '' and cus.PaymentMethod = ''");
            //    }
            //}
            //if (filter.Branch != "-1" && filter.Branch != "undefined" && !string.IsNullOrWhiteSpace(filter.Branch))
            //{
            //    BranchQuery = "and cus.BranchId =" + filter.Branch;
            //}
            #region Naming Condition 
            //Extra Database call before customer search
            string NamingSql = "''";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            if (gs != null)
            {
                NamingSql = gs.Value;
            }
            #endregion
            /*New Filter Query For Customer*/
            #region Filter Query For Customer and Lead
            if (!string.IsNullOrWhiteSpace(filter.DisplayNameText))
            {
                string[] querysplit = filter.DisplayNameText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" AND  CONTAINS(cus.SearchText, '\"*{0}*\"')", Uri.UnescapeDataString(querysplit[1].Trim()));
                }

            }
            if (filter.FirstDate != new DateTime() && filter.LastDate != new DateTime())
            {
                var StartDate = filter.FirstDate.SetZeroHour().ClientToUTCTime();
                var EndDate = filter.LastDate.SetMaxHour().ClientToUTCTime();
                if (filter.isLead == true)
                {
                    filterbydaterange = string.Format(@"AND cus.CreatedDate between '{0}' and '{1}'", StartDate, EndDate);
                }
                else
                {

                    // filterbydaterange = string.Format(@"AND cus.JoinDate between '{0}' and '{1}'", StartDate, EndDate);
                    filterbydaterange = string.Format(@"AND Ccom.ConvertionDate between '{0}' and '{1}'", StartDate, EndDate);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.IdText))
            {
                string[] querysplit = filter.IdText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = {1}", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.BusinessNameText))
            {
                string[] querysplit = filter.BusinessNameText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.StreetText))
            {
                string[] querysplit = filter.StreetText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} like '%{1}%'", querysplit[0], Uri.UnescapeDataString(querysplit[1]));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.ActiveStatusText))
            {
                string[] querysplit = filter.ActiveStatusText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.CustomerNoText))
            {
                string[] querysplit = filter.CustomerNoText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.AccountNoText))
            {
                //Guess duplicate with customer no.
                string[] querysplit = filter.AccountNoText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            //if (!string.IsNullOrWhiteSpace(filter.BranchidText))
            //{
            //    string[] querysplit = filter.BranchidText.Split('#');
            //    if (querysplit.Length > 1)
            //    {
            //        FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
            //    }
            //}
            if (!string.IsNullOrWhiteSpace(filter.DbaText))
            {
                string[] querysplit = filter.DbaText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            //if (!string.IsNullOrWhiteSpace(filter.SalesLocationText))
            //{
            //    string[] querysplit = filter.SalesLocationText.Split('#');
            //    if (querysplit.Length > 1)
            //    {
            //        FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
            //    }
            //}

            if (!string.IsNullOrWhiteSpace(filter.EmailText))
            {
                string[] querysplit = filter.EmailText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.FirstNameText))
            {
                string[] querysplit = filter.FirstNameText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.LastNameText))
            {
                string[] querysplit = filter.LastNameText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            //if (!string.IsNullOrWhiteSpace(filter.LeadSourceText))
            //{
            //    string[] querysplit = filter.LeadSourceText.Split('#');
            //    if (querysplit.Length > 1)
            //    {
            //        FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
            //    }
            //}
            if (!string.IsNullOrWhiteSpace(filter.LeadStatusText))
            {
                string[] querysplit = filter.LeadStatusText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", "Status", querysplit[1]);
                }
            }
            //if (!string.IsNullOrWhiteSpace(filter.SalesPersonText))
            //{
            //    string[] querysplit = filter.SalesPersonText.Split('#');
            //    if (querysplit.Length > 1)
            //    {
            //        FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
            //    }
            //}

            if (!string.IsNullOrWhiteSpace(filter.CustomerTypeText))
            {
                string[] querysplit = filter.CustomerTypeText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.BusinessAccountTypeText))
            {
                string[] querysplit = filter.BusinessAccountTypeText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }

            if (!string.IsNullOrWhiteSpace(filter.PrimaryPhoneText))
            {
                string[] querysplit = filter.PrimaryPhoneText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.SecondaryPhoneText))
            {
                string[] querysplit = filter.SecondaryPhoneText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.CellNoText))
            {
                string[] querysplit = filter.CellNoText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }

            if (!string.IsNullOrWhiteSpace(filter.ActiveStatusText))
            {
                string[] querysplit = filter.ActiveStatusText.Split('#');
                if (querysplit.Length > 1)
                {
                    FilterSubquery += string.Format(" and cus.{0} = '{1}'", querysplit[0], querysplit[1]);
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.JoinDateText))
            {
                string[] querysplit = filter.JoinDateText.Split('#');

                try
                {
                    DateTime starttime = DateTime.Parse(querysplit[1]);
                    if (querysplit.Length > 1)
                    {
                        FilterSubquery += string.Format(" and cus.{0} between '{1}' AND '{2}' ", querysplit[0], starttime.ToString(), starttime.AddHours(24).ToString());
                    }
                }
                catch (Exception ex)
                {

                }

            }
            if (!string.IsNullOrWhiteSpace(filter.FollowupDateText))
            {
                string[] querysplit = filter.FollowupDateText.Split('#');
                try
                {
                    DateTime starttime = DateTime.Parse(querysplit[1]);
                    if (querysplit.Length > 1)
                    {
                        FilterSubquery += string.Format(" and cus.{0} between '{1}' AND '{2}' ", querysplit[0], starttime.ToString(), starttime.AddHours(24).ToString());
                    }
                }
                catch (Exception ex)
                {

                }
            }
            #endregion

            #region Platform Table join 
            string PlatformTableJoinTableQuery = "";

            if (!string.IsNullOrWhiteSpace(filter.PlatformIdText))
            {
                string[] querysplit = filter.PlatformIdText.Split('#');
                if (querysplit.Length > 1)
                {
                    PlatformTableJoinTableQuery = " left join CustomerMigration cm on cm.CustomerId = cus.CustomerId ";
                    FilterSubquery += string.Format("and cm.RefenrenceId =  '{0}'", querysplit[1]);
                }
            }

            #endregion

            CountQuery = filter.isLead == true ? "" : CountQuery;
            try
            {
                sqlQuery = string.Format(sqlQuery,
                    /*0*/ filter.CompanyId,
                    /*1*/filterColumntext,
                    /*2*/filtertext,
                    /*3*/ filterByUserName,
                    /*4*/filterByLeadSource,
                    /*5*/filterByDate,
                    /*6*/filterForQA,
                    /*7*/filterByPaymentMethod,
                    /*8*/filterByIsActive,
                    /*9*/filterbyUser,
                    /*10*/orderbysql,
                    /*11*/TotalRMRFilter,
                    /*12*/TotalOpenInvoice,
                    /*13*/TotalDueInvoice,
                    /*14*/filterbydaterange,
                    /*15*/Othersquery,
                    /*16*/BranchQuery,
                    /*17*/SoldByQuery,
                    /*18*/NamingSql,
                    /*19*/filterPackageQuery,
                    /*20*/FilterSubquery,
                    /*21*/orderbysql1,
                    /*22*/CountQuery,
                    /*23*/filter.isLead == true ? 1 : 0,
                    /*24*/PlatformTableJoinTableQuery,
                     /*25*/Filtersalesloc,
                     /*26*/Filtersalesperson,
                     /*27*/FilterBranch,
                    /*28*/ResOrderQuery,
                    /*29*/FilterLeadStatus,
                    /*30*/FilterCustomerStatus,
                    /*31*/sortingorderbysql);
                filewrite = sqlQuery;
                //System.IO.File.WriteAllText(@"C:\www\rmrcloud.com\transactionId.txt", filewrite); 
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", filter.PageNo));
                    AddParameter(cmd, pInt32("pagesize", filter.PageSize));
                    if (!string.IsNullOrWhiteSpace(filter.SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(filter.SearchText.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                //filewrite = filewrite + "::: " + ex.Message;
                //System.IO.File.WriteAllText(@"C:\www\rmrcloud.com\transactionId.txt", filewrite);
                return null;
            }
        }
        public DataSet GetCustomerListByFilterAPI(CustomerFilter filter)
        {
            string SoldByQuery = "";
            string sqlQuery = @" 
                                declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize

                                SELECT Distinct 
                                cus.Id ,
                                {18} as DisplayName,
                                cus.CustomerId, 
                                cus.IsActive,
                                lkstatus.DisplayText as StatusVal,
								SP.FirstName SoldbyFirstName,
								SP.LastName SoldbyLastName,
								Q1.FirstName Q1FirstName, 
								Q1.LastName Q1LastName,
								Q2.FirstName Q2FirstName,
								Q2.LastName Q2LastName, 
                                cus.CutInDate ,
                                cus.MonthlyMonitoringFee ,
                                cus.State,
								cus.City,
                                Ccom.ConvertionDate,
                                Com.CompanyId,
								Com.CompanyName,
								Com.CompanyLogo,
                                --cf.FileFullName as NameFile,
                                '' as NameFile,
                                Ins.FirstName +' '+ Ins.LastName as TechnicianName,
                                SP.FirstName +' '+ SP.LastName as PersonSales,
                                (select SUM(_invoice.BalanceDue) from Invoice _invoice
								where cus.CustomerId = _invoice.CustomerId
								and (_invoice.Status = 'Open' or _invoice.Status = 'Partial')) as UnpaidInvoiceTotal,
								Created.FirstName +' '+ Created.LastName as CreatedByVal,
                                cus.DoNotCall,
                                cus.PreferredContactMethod
                                
                                INTO #CustomerData
                                FROM Customer cus
                                LEFT JOIN CustomerCompany Ccom
                                  ON cus.CustomerId = Ccom.CustomerId
                                LEFT JOIN Company Com
                                  ON Com.CompanyId = Ccom.CompanyId
                                Left Join Employee Created on Created.UserId= cus.CreatedByUid
								Left JOin Employee Q1 on convert(nvarchar(50), Q1.UserId) = cus.QA1
								Left JOin Employee Q2 on convert(nvarchar(50), Q2.UserId )= cus.QA2
                                Left Join Employee SP on convert(nvarchar(50), SP.UserId )= cus.Soldby
                                Left Join Employee Ins on CONVERT(nvarchar(50), Ins.UserId )= cus.Installer
                                left join Lookup lkstatus on lkstatus.DataValue = cus.Status and lkstatus.DataKey = 'LeadStatus'
                                left join QaAnswer _QAns on cus.CustomerId = _QAns.CustomerId
                                Left Join Employee emp
                                on cus.LastUpdatedBy = emp.UserName
                                left join Invoice inv on inv.CustomerId = cus.CustomerId
                                WHERE 
                                {21}
                                {19}
                                {17}
                                {6}
                                {3}
                                {4}
                                {5}
                                {7}
                                {8}
                                {9}
                                {11}
                                {12}
                                {13}
                                {14}
                                {15}
                                {16}
                                {1}
                                and Com.CompanyId is not null

                                SELECT TOP (@pagesize)
                                  *  Into #CustomerResultData
                                FROM #CustomerData
                                where Id NOT IN(Select TOP (@pagestart)  Id from #CustomerData #cd {10})
							    {20}     


								select cfd.*,cus.CustomerNo,
                                cus.Title,
                                cus.FirstName ,
                                cus.LastName ,
                                cus.MiddleName ,
                                cus.BusinessName ,
                                cus.SSN,
		                        cus.[Status],
		                        cus.Street,
		                        cus.ZipCode, 
		                        cus.[Address],
		                        cus.EmailAddress,
		                        cus.PrimaryPhone,
                                cus.SecondaryPhone,
								cus.DateofBirth,
								cus.LeadSource,
								cus.LastUpdatedDate,
								cus.LastUpdatedBy,
                                cus.StreetType,
								cus.Appartment,
                                cus.CellNo,
                                cus.Fax,
                                cus.CallingTime,
                                cus.Address2,
                                cus.Country,
                                cus.StreetPrevious,
                                cus.CityPrevious,
                                cus.StatePrevious,
                                cus.ZipCodePrevious,
                                cus.CountryPrevious,
                                cus.AccountNo,
                                cus.IsAlarmCom,
                                cus.CreditScore,
                                cus.CreditScoreValue,
                                cus.ContractTeam,
                                cus.FundingCompany,
                                cus.CellularBackup,
                                cus.CustomerFunded,
                                cus.Maintenance,
                                cus.Note,
                                cus.SalesDate,
                                cus.FollowUpDate,
                                cus.InstallDate,
                                cus.Installer,
                                cus.FundingDate,
                                cus.ReminderDate,
                                cus.QA1Date,
                                cus.QA2Date,
                                cus.BillAmount,
                                cus.PaymentMethod,
                                cus.BillCycle,
                                cus.BillDay,
                                cus.BillNotes,
                                cus.BillTax,
                                cus.BillOutStanding,
                                cus.ServiceDate,
                                cus.Area,
                                cus.Latlng,
                                cus.SecondCustomerNo,
                                cus.AdditionalCustomerNo,
                                cus.IsTechCallPassed,
                                cus.IsDirect,
                                cus.AuthorizeRefId,
                                cus.AuthorizeCusProfileId,
                                cus.AuthorizeCusPaymentProfileId,
                                cus.AuthorizeDescription,
                                cus.IsRequiredCsvSync,
                                cus.Passcode,
                                cus.ActivationFee,
                                cus.FirstBilling,
                                cus.ActivationFeePaymentMethod,
                                cus.LastGeneratedInvoice,
                                cus.Singature,
                                cus.CrossStreet,
                                cus.DBA,
                                cus.AlarmRefId,
                                cus.TransunionRefId,
                                cus.MonitronicsRefId,
                                cus.CentralStationRefId,
                                cus.CmsRefId,
                                cus.PreferedEmail,
                                cus.PreferedSms,
                                cus.IsAgreement,
                                cus.IsFireAccount,
                                cus.CreatedByUid,
                                cus.CreatedDate,
                                cus.LastUpdatedByUid,
                                cus.BusinessAccountType,
                                cus.PhoneType,
                                cus.Carrier,
                                cus.ReferringCustomer,
                                cus.EsistingPanel,
                                cus.[Ownership],
                                cus.PurchasePrice,
                                cus.ContractValue,
                                cus.ChildOf,
                                cus.EmailVerified,
                                cus.HomeVerified,
                                cus.County,
                                cus.CustomerToken,
                                cus.PaymentToken,
                                cus.ScheduleToken,
                                cus.EstCloseDate,
                                cus.ProjectWalkDate,
                                cus.BranchId,
                                cus.SubscriptionStatus,
                                cus.AnnualRevenue,
                                cus.Website,
                                cus.Market,
                                cus.Passengers,
                                cus.Budget,
                                cus.SmartSetUpStep,
                                cus.CustomerAccountType,
                                cus.IsPrimaryPhoneVerified,
                                cus.IsSecondaryPhoneVerified,
                                cus.IsCellNoVerified,
                                cus.JoinDate,
                                cus.[Type],
                                cus.MovingDate,
                                cus.ContactedPerviously,
                                ISNULL(cfd.SoldbyFirstName,'')+' '+ ISNULL(cfd.SoldbyLastName,'') Soldby,
                                ISNULL(cfd.Q1FirstName,'')+' '+ ISNULL(cfd.Q1LastName,'') QA1,
                                ISNULL(cfd.Q2FirstName,'')+' '+ ISNULL(cfd.Q2LastName,'') QA2  
                                							 
                                from #CustomerResultData cfd  
								Left Join Customer cus on cus.CustomerId = cfd.CustomerId
								{20}  
								
								drop table #CustomerResultData


                                select count(*) [TotalCount]
                                from #CustomerData

                                DROP TABLE #CustomerData
                                --DROP TABLE #CustomerFilterData";

            string filtertext = "";
            string IsLeadFilter = @"Ccom.IsLead = 0
                                and cus.JoinDate is not null";
            string filterColumntext = "";
            string filterByUserName = "";

            string filterByLeadSource = "";
            string filterByPaymentMethod = "";
            string filterByDate = "";
            string filterForQA = "";
            string filterByIsActive = "";
            string filterbyUser = "";
            string orderbysql = "order by #cd.Id desc";
            string orderbysql1 = "order by Id desc";
            string TotalRMRFilter = "";
            string filterbydaterange = "";
            string BranchQuery = "";
            string filterPackageQuery = "";
            if (filter.isLead)
            {
                IsLeadFilter = @"Ccom.IsLead = 1
                                --and cus.JoinDate is not null";
            }

            if (filter.EmployeeRole.ToLower().IndexOf("partner") > -1 && filter.Partners != null && filter.Partners.Count > 0)
            {
                string PartnerId = string.Join("','", filter.Partners.Select(x => x.UserId.ToString()));
                filterByUserName = string.Format(@" and (cus.Installer in('{0}') 
                                                        or cus.CreatedByUid in('{0}')
                                                        or cus.Soldby in('{0}') 
                                                        or cus.QA1 in('{0}') 
                                                        or cus.QA2 in('{0}'))", PartnerId);
            }
            if (!string.IsNullOrWhiteSpace(filter.SearchText) && filter.SearchText != "undefined")
            {
                bool isNumeric = Regex.IsMatch(filter.SearchText, @"\d");

                if (isNumeric && filter.SearchText.Length == 10)
                {
                    //long SSN = 0;
                    //if (long.TryParse(filter.SearchText, out SSN))
                    //{
                    //    filter.SearchText = string.Format("{0:0##-###-####}", SSN).TrimStart('-');
                    //}
                }
                filterColumntext = @" AND isNULL(cus.FirstName, '') +
								isNULL(cus.LastName,'') + 
                                isNULL(cus.FirstName +' '+ cus.LastName, '') + 
                                isNULL( CONVERT(nvarchar(15), cus.Id),'') + 
								isNULL(cus.MiddleName,'') + 
								isNULL(cus.BusinessName,'') + 
								isNULL(cus.CustomerNo,'') + 
                                isNULL(cus.SecondCustomerNo,'') + 
								isNULL(cus.Type,'') + 
								isNULL(cus.Address,'') + 
								isNULL(cus.Address2,'') + 
                                isNULL(cus.City,'') + 
								isNULL(cus.Area,'') +
								isNULL(cus.PrimaryPhone,'') + 
                                isNULL(cus.SecondaryPhone,'') + 
                                isNULL(cus.CellNo,'') + 
								isNULL(cus.EmailAddress,'') + 
								isNULL(cus.Status,'') + 
								isNULL(cus.MonthlyMonitoringFee,'') +
                                isNULL(cus.SubscriptionStatus,'') +
								isNULL(cus.PaymentMethod,'') like @SearchText ";
                filtertext = " --AND FilterText like @SearchText ";
            }

            if (!string.IsNullOrEmpty(filter.Package) && filter.Package != "-1" && filter.Package != "null" && filter.Package != "undefined")
            {
                filterPackageQuery = string.Format("And Cus.Id in (select distinct(cus.Id) from booking bk left join customer cus on cus.CustomerId = bk.CustomerId left join bookingdetails bkdetails on bkdetails.BookingId = bk.BookingId where bkdetails.Package = '" + filter.Package + "')");
            }

            if (!string.IsNullOrWhiteSpace(filter.Source) && filter.Source != "-1" && filter.Source != "undefined")
            {
                filterByLeadSource = string.Format("AND cus.LeadSource = '{0}'", filter.Source);
            }
            if (!string.IsNullOrWhiteSpace(filter.PaymentMethod) && filter.PaymentMethod != "-1" && filter.PaymentMethod != "undefined")
            {
                filterByPaymentMethod = string.Format("AND cus.PaymentMethod = '{0}'", filter.PaymentMethod);
            }
            if (filter.FirstDate != new DateTime() && filter.LastDate != new DateTime())
            {
                var StartDate = filter.FirstDate.SetZeroHour().ClientToUTCTime();
                var EndDate = filter.LastDate.SetMaxHour().ClientToUTCTime();

                filterbydaterange = string.Format(@"AND (cus.JoinDate between '{0}' and '{1}' 
                                        OR cus.CreatedDate  between '{0}' and '{1}' ) ", StartDate, EndDate);
            }
            if (!string.IsNullOrWhiteSpace(filter.InstallationDate))
            {
                try
                {
                    DateTime date = Convert.ToDateTime(filter.InstallationDate);
                    filterByDate += string.Format(" AND cus.InstallDate between '{0}' and '{1}'", date.ToString("MM-dd-yyyy"), date.AddDays(1).ToString("MM-dd-yyyy"));
                }
                catch (Exception) { }

            }
            if (!string.IsNullOrWhiteSpace(filter.SalesDate))
            {
                try
                {
                    DateTime date = Convert.ToDateTime(filter.SalesDate);
                    filterByDate += string.Format(" AND cus.SalesDate between '{0}' and '{1}'", date.ToString("MM-dd-yyyy"), date.AddDays(1).ToString("MM-dd-yyyy"));
                }
                catch (Exception) { }
            }
            if (!string.IsNullOrWhiteSpace(filter.FollowUpDate))
            {
                try
                {
                    DateTime date = Convert.ToDateTime(filter.FollowUpDate);
                    filterByDate += string.Format(" AND cus.FollowUpDate between '{0}' and '{1}'", date.ToString("MM-dd-yyyy"), date.AddDays(1).ToString("MM-dd-yyyy"));
                }
                catch (Exception) { }
            }
            if (!string.IsNullOrWhiteSpace(filter.MonitoringCompany) && filter.MonitoringCompany != "-1")
            {
                filterByDate += string.Format(" AND cus.FundingCompany = '{0}'", filter.MonitoringCompany);
            }
            if (filter.EmployeeRole == "QA" || filter.EmployeeRole == "QA Manager")
            {
                filterForQA = string.Format("AND _QAns.Id is null");
            }
            if (filter.EmployeeRole == "Sales Manager" || filter.EmployeeRole == "Sales Person")
            {
                filterForQA = string.Format("AND _QAns.Id is not null");
            }
            if (filter.IsActive.HasValue)
            {
                if (filter.IsActive.Value)
                {
                    filterByIsActive = "AND cus.IsActive = 1";
                }
                else
                {
                    filterByIsActive = "AND cus.IsActive = 0";
                }
            }

            string filewrite = "";
            if (filter.TotalRMR == true)
            {
                TotalRMRFilter = string.Format("and cus.MonthlyMonitoringFee != '-1' and cus.MonthlyMonitoringFee is not null and cus.MonthlyMonitoringFee != ''", filter.TotalRMR);
            }
            string TotalOpenInvoice = "";
            if (filter.TotalOpenInvoice == true)
            {
                TotalOpenInvoice = string.Format("and inv.IsEstimate = 0");
            }
            string TotalDueInvoice = "";
            if (filter.TotalDueInvoice == true)
            {
                TotalDueInvoice = string.Format("and inv.Status = 'Open' and inv.DueDate < GETDATE()");
            }
            string Othersquery = "";
            if (!string.IsNullOrWhiteSpace(filter.Others))
            {
                if (filter.Others == "isfire")
                {
                    Othersquery = string.Format("and cus.IsFireAccount = 1");
                }
                else if (filter.Others == "nobilltax")
                {
                    Othersquery = string.Format("and cus.BillTax = 0");
                }
                else if (filter.Others == "residential")
                {
                    Othersquery = string.Format("and cus.Type = 'Residential'");
                }
                else if (filter.Others == "commercial")
                {
                    Othersquery = string.Format("and cus.Type = 'Commercial'");
                }
                else if (filter.Others == "notbilling")
                {
                    Othersquery = string.Format("and cus.MonthlyMonitoringFee = '' and cus.PaymentMethod = ''");
                }
            }
            if (filter.Branch != "-1" && filter.Branch != "undefined" && !string.IsNullOrWhiteSpace(filter.Branch))
            {
                BranchQuery = "and cus.BranchId =" + filter.Branch;
            }
            #region Naming Condition
            string NamingSql = "''";
            //GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            //GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            //if (gs != null)
            //{
            //    NamingSql = gs.Value;
            //}
            #endregion
            try
            {
                sqlQuery = string.Format(sqlQuery,
                    /*0*/ filter.CompanyId,
                    /*1*/filterColumntext,
                    /*2*/filtertext,
                    /*3*/ filterByUserName,
                    /*4*/filterByLeadSource,
                    /*5*/filterByDate,
                    /*6*/filterForQA,
                    /*7*/filterByPaymentMethod,
                    /*8*/filterByIsActive,
                    /*9*/filterbyUser,
                    /*10*/orderbysql,
                    /*11*/TotalRMRFilter,
                    /*12*/TotalOpenInvoice,
                    /*13*/TotalDueInvoice,
                    /*14*/filterbydaterange,
                    /*15*/Othersquery,
                    /*16*/BranchQuery,
                    /*17*/SoldByQuery,
                    /*18*/NamingSql,
                    /*19*/filterPackageQuery,
                    /*20*/orderbysql1,
                    /*21*/IsLeadFilter);
                filewrite = sqlQuery;
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", filter.PageNo));
                    AddParameter(cmd, pInt32("pagesize", filter.PageSize));
                    if (!string.IsNullOrWhiteSpace(filter.SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(filter.SearchText.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        #endregion
        public DataSet GetCustomerReportByFilter(CustomerLiteFilter filter)
        {
            string SoldByQuery = "";
            //if (filter.SoldById != null && filter.SoldById != new Guid())
            //{
            //    SoldByQuery = string.Format("and (SoldBy = '{0}')", filter.SoldById);
            //}
            string sqlQuery = @" 
                       

                                SELECT Distinct cs.Id 
                                {1}
                                INTO #CustomerData
                                FROM Customer cs
                                LEFT JOIN CustomerCompany Ccom
                                  ON cs.CustomerId = Ccom.CustomerId
								Left JOin Employee Q1 on convert(nvarchar(50), Q1.UserId) = cs.QA1
								Left JOin Employee Q2 on convert(nvarchar(50), Q2.UserId )= cs.QA2
                                Left Join Employee SP on convert(nvarchar(50), SP.UserId )= cs.Soldby
                                Left Join Employee Ins on CONVERT(nvarchar(50), Ins.UserId )= cs.Installer
                                left join QaAnswer _QAns on cs.CustomerId = _QAns.CustomerId
                             
                                Left Join Employee emp
                                on cs.LastUpdatedBy = emp.UserName
                                left join Invoice inv on inv.CustomerId = cs.CustomerId
                                WHERE Ccom.CompanyId = '{0}' 
                                AND Ccom.IsLead = 0
                                and cs.JoinDate is not null
                                {17}
                                {6}
                                {3}
                                {4}
                                {5}
                                {7}
                                {8}
                                {9}
                                {11}
                                {12}
                                {13}
                                {14}
                                {15}
                                {16}
                                {18}
                                {19}
                                {20}
                                select * into #CustomerFilterData
								FROM #CustomerData
                                {2}
                                select * from #CustomerFilterData

                                DROP TABLE #CustomerData
                                DROP TABLE #CustomerFilterData";

            string filtertext = "";
            string filterColumntext = "";
            string filterByUserName = "";
            string filterByLeadSource = "";
            string filterByPaymentMethod = "";
            string filterByDate = "";
            string filterForQA = "";
            string filterByIsActive = "";
            string filterbyUser = "";
            string orderbysql = "";
            string TotalRMRFilter = "";
            string filterbydaterange = "";
            string BranchQuery = "";
            string filterbyCustomerType = "";
            string filterbyLeadStatus = "";
            string filterbySalesPerson = "";
            if (!string.IsNullOrWhiteSpace(filter.SearchText) && filter.SearchText != "undefined" && filter.SearchText != null)
            {
                string SearchText = HttpUtility.UrlDecode(filter.SearchText);
                SearchText = SearchText.Replace(" ", "");

                filterColumntext = @", isNULL(cs.FirstName, '') +
								isNULL(cs.LastName,'') + 
                                isNULL( CONVERT(nvarchar(15), cs.Id),'') + 
								isNULL(cs.MiddleName,'') + 
								isNULL(REPLACE(cs.BusinessName, ' ', ''),'') + 
								isNULL(cs.CustomerNo,'') + 
                                isNULL(cs.SecondCustomerNo,'') + 
								isNULL(cs.Type,'') + 
								isNULL(cs.Address,'') + 
								isNULL(cs.Address2,'') + 
                                isNULL(cs.City,'') + 
								isNULL(cs.Area,'') +
								isNULL(cs.PrimaryPhone,'') + 
								isNULL(cs.EmailAddress,'') + 
								isNULL(cs.Status,'') + 
								isNULL(cs.MonthlyMonitoringFee,'') +
								isNULL(cs.PaymentMethod,'') FilterText ";
                //filtertext = " Where FilterText like @SearchText";
                filtertext = string.Format(" Where FilterText like '%{0}%'", SearchText);
            }

            //if (!string.IsNullOrWhiteSpace(filter.Source) && filter.Source != "-1" && filter.Source != "undefined")
            //{
            //    filterByLeadSource = string.Format("AND cs.LeadSource = '{0}'", filter.Source);
            //}
            #region leadsource
            if (filter.LeadSourceText == "null")
            {
                filter.LeadSourceText = filter.LeadSourceText.Substring(0, filter.LeadSourceText.Length - 4);

            }
            var array = filter.LeadSourceText.Split(",");
            string leadsourcequery = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    leadsourcequery += string.Format("'{0}',", item);
                }
                leadsourcequery = leadsourcequery.Remove(leadsourcequery.Length - 1, 1);
            }
            if (!string.IsNullOrWhiteSpace(filter.LeadSourceText) && filter.LeadSourceText != "-1" && filter.LeadSourceText != "undefined")
            {
                filterByLeadSource = string.Format("AND cs.LeadSource in ({0})", leadsourcequery);
            }
            #endregion
            #region customer type
            if (!string.IsNullOrEmpty(filter.CustomerTypeText) && filter.CustomerTypeText != "-1" && filter.CustomerTypeText != "undefined")
            {
                filter.CustomerTypeText = string.Join(string.Empty, filter.CustomerTypeText.Skip(5));
                filterbyCustomerType = string.Format("AND cs.Type = '{0}'", filter.CustomerTypeText);
            }
            #endregion
            #region leadstatus
            if (!string.IsNullOrEmpty(filter.LeadStatusText) && filter.LeadStatusText != "-1" && filter.LeadStatusText != "undefined")
            {
                var array1 = filter.LeadStatusText.Split(",");
                string leadstatusequery = "";
                if (array1 != null)
                {
                    foreach (var item in array1)
                    {
                        leadstatusequery += string.Format("'{0}',", item);
                    }
                    leadstatusequery = leadstatusequery.Remove(leadstatusequery.Length - 1, 1);
                }
                filterbyLeadStatus = string.Format("AND cs.Status in ({0})", leadstatusequery);
            }
            #endregion
            #region salesperson
            if (!string.IsNullOrEmpty(filter.SalesPersonText) && filter.SalesPersonText != "-1" && filter.SalesPersonText != "undefined")
            {
                var array2 = filter.SalesPersonText.Split(",");
                string salespersonquery = "";
                if (array2 != null)
                {
                    foreach (var item in array2)
                    {
                        salespersonquery += string.Format("'{0}',", item);
                    }
                    salespersonquery = salespersonquery.Remove(salespersonquery.Length - 1, 1);
                }
                filterbySalesPerson = string.Format("AND cs.SoldBy in ({0})", salespersonquery);
            }
            #endregion
            if (!string.IsNullOrWhiteSpace(filter.PaymentMethod) && filter.PaymentMethod != "-1" && filter.PaymentMethod != "undefined")
            {
                filterByPaymentMethod = string.Format("AND cs.PaymentMethod = '{0}'", filter.PaymentMethod);
            }
            if (filter.FirstDate != new DateTime() && filter.LastDate != new DateTime())
            {
                var StartTime = filter.FirstDate.SetZeroHour().ClientToUTCTime();
                var EndTime = filter.LastDate.SetMaxHour().ClientToUTCTime();
                filterbydaterange = string.Format("AND cs.JoinDate between '{0}' and '{1}'", StartTime, EndTime);
            }
            if (!string.IsNullOrWhiteSpace(filter.InstallationDate))
            {
                try
                {
                    DateTime date = Convert.ToDateTime(filter.InstallationDate);
                    filterByDate += string.Format(" AND cs.InstallDate between '{0}' and '{1}'", date.ToString("MM-dd-yyyy"), date.AddDays(1).ToString("MM-dd-yyyy"));
                }
                catch (Exception) { }

            }
            if (!string.IsNullOrWhiteSpace(filter.SalesDate))
            {
                try
                {
                    DateTime date = Convert.ToDateTime(filter.SalesDate);
                    filterByDate += string.Format(" AND cs.SalesDate between '{0}' and '{1}'", date.ToString("MM-dd-yyyy"), date.AddDays(1).ToString("MM-dd-yyyy"));
                }
                catch (Exception) { }
            }
            if (!string.IsNullOrWhiteSpace(filter.MonitoringCompany) && filter.MonitoringCompany != "-1" && filter.MonitoringCompany != "undefined")
            {
                filterByDate += string.Format(" AND cs.FundingCompany = '{0}'", filter.MonitoringCompany);
            }
            if (filter.EmployeeRole == "QA" || filter.EmployeeRole == "QA Manager")
            {
                filterForQA = string.Format("AND _QAns.Id is null");
            }
            if (filter.EmployeeRole == "Sales Manager" || filter.EmployeeRole == "Sales Person")
            {
                filterForQA = string.Format("AND _QAns.Id is not null");
            }
            if (filter.IsActive.HasValue)
            {
                if (filter.IsActive.Value)
                {
                    filterByIsActive = "AND cs.IsActive = 1";
                }
                else
                {
                    filterByIsActive = "AND cs.IsActive = 0";
                }
            }
            #region Order
            if (!string.IsNullOrWhiteSpace(filter.SortBy) && filter.SortBy != "-1" && !string.IsNullOrEmpty(filter.SortOrder))
            {
                if (filter.SortOrder.ToLower() != "asc")
                {
                    filter.SortOrder = " desc";
                }

                //if (filter.SortBy.ToLower() == "id")
                //{
                //    orderbysql = string.Concat(",Id ", filter.SortBy);
                //}
                if (filter.SortBy.ToLower() == "customer")
                {
                    orderbysql = string.Concat(", firstname+' ' +LastName ", filter.SortOrder); ;
                }
                else if (filter.SortBy.ToLower() == "location")
                {
                    orderbysql = string.Concat(", street ", filter.SortOrder);
                }
                else if (filter.SortBy.ToLower() == "contact")
                {
                    orderbysql = string.Concat(", emailAddress ", filter.SortOrder);
                }
                //else if (filter.SortBy.ToLower() == "Status")
                //{

                //}
                //else if (filter.SortBy.ToLower() == "Billing")
                //{

                //}
                else if (filter.SortBy.ToLower() == "servicedate")
                {
                    orderbysql = string.Concat(" ,ServiceDate ", filter.SortOrder);
                }
                else if (filter.SortBy.ToLower() == "account")
                {

                    orderbysql = string.Concat(", PersonSales ", filter.SortOrder, " , TechnicianName ", filter.SortOrder);
                }
                else
                {
                    orderbysql = string.Concat(",Id ", filter.SortOrder);
                }
            }
            #endregion
            string filewrite = "";
            if (filter.TotalRMR == true)
            {
                TotalRMRFilter = string.Format("and cs.MonthlyMonitoringFee != '-1' and cs.MonthlyMonitoringFee is not null and cs.MonthlyMonitoringFee != ''", filter.TotalRMR);
            }
            string TotalOpenInvoice = "";
            if (filter.TotalOpenInvoice == true)
            {
                TotalOpenInvoice = string.Format("and inv.IsEstimate = 0");
            }
            string TotalDueInvoice = "";
            if (filter.TotalDueInvoice == true)
            {
                TotalDueInvoice = string.Format("and inv.Status = 'Open' and inv.DueDate < GETDATE()");
            }
            string Othersquery = "";
            if (!string.IsNullOrWhiteSpace(filter.Others))
            {
                if (filter.Others == "isfire")
                {
                    Othersquery = string.Format("and cs.IsFireAccount = 1");
                }
                else if (filter.Others == "nobilltax")
                {
                    Othersquery = string.Format("and cs.BillTax = 0");
                }
                else if (filter.Others == "residential")
                {
                    Othersquery = string.Format("and cs.Type = 'Residential'");
                }
                else if (filter.Others == "commercial")
                {
                    Othersquery = string.Format("and cs.Type = 'Commercial'");
                }
                else if (filter.Others == "notbilling")
                {
                    Othersquery = string.Format("and cs.MonthlyMonitoringFee = '' and cs.PaymentMethod = ''");
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.Branch) && filter.Branch != "-1" && filter.Branch != "undefined")
            {
                BranchQuery = "and cs.BranchId =" + filter.Branch;
            }
            try
            {
                sqlQuery = string.Format(sqlQuery,
                    /*0*/ filter.CompanyId,
                    /*1*/filterColumntext,
                    /*2*/filtertext,
                    /*3*/ filterByUserName,
                    /*4*/filterByLeadSource,
                    /*5*/filterByDate,
                    /*6*/filterForQA,
                    /*7*/filterByPaymentMethod,
                    /*8*/filterByIsActive,
                    /*9*/filterbyUser,
                    /*10*/orderbysql,
                    TotalRMRFilter,
                    TotalOpenInvoice,
                    TotalDueInvoice,
                    filterbydaterange,
                    Othersquery,
                    BranchQuery,
                    SoldByQuery,
                    /*18*/filterbyCustomerType,
                    /*19*/filterbyLeadStatus,
                    /*20*/filterbySalesPerson);
                filewrite = sqlQuery;
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", filter.PageNo));
                    AddParameter(cmd, pInt32("pagesize", filter.PageSize));
                    if (!string.IsNullOrWhiteSpace(filter.SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(filter.SearchText.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #region Lead Filterlist 

        public DataSet GetLeadReportByFilter(CustomerLiteFilter filter)
        {
            string sqlQuery = @"
                                SELECT
                                cu.Id 
                                {1}
                                INTO #CustomerData
                                FROM Customer cu 
                                Left JOin Employee emp on convert(nvarchar(50), emp.UserId) = cu.QA1
								or convert(nvarchar(50), emp.UserId) = cu.QA2
								or convert(nvarchar(50), emp.UserId) = cu.Soldby
								or convert(nvarchar(50), emp.UserId) = cu.Installer
                                left join CustomerCompany cc
                                  on cu.CustomerId = cc.CustomerId
                                left join [Lookup] lkstatus
                                  on cu.Status = lkstatus.DataValue 
								  and lkstatus.DataKey ='LeadStatus'
                                WHERE cc.CompanyId = '{0}'
                                AND cc.IsLead = 1 
                                AND cu.IsActive =1 
                                and cu.JoinDate is not null
                                {3}
                                {4}
                                {5}
                                {6}
                                {8}
                                {9}
                                {10}
                                {11}
                                {12}
                                order by cu.Id DESC
                                select * into #CustomerFilterData
                                FROM #CustomerData
                                {2}
                                SELECT 
                                  *
                                FROM #CustomerFilterData
                               
                                ORDER BY Id  desc
                               
								
                                DROP TABLE #CustomerData
                                DROP TABLE #CustomerFilterData";

            string filtertext = "";
            string filterColumntext = "";
            string filterByUserName = "";
            string filterByLeadSource = "";
            string filterByDate = "";
            string filterbyUser = "";
            string OrderBySql = "";
            string StatusQuery = "";
            string filterByLeadSourceText = "";
            string filterbyCustomerType = "";
            string filterbyLeadStatus = "";
            string filterbySalesPerson = "";
            if (!string.IsNullOrWhiteSpace(filter.SearchText) && filter.SearchText != "undefined" && filter.SearchText != null)
            {
                filterColumntext = @" , isNULL(cu.FirstName, '') +
                                    isNULL(cu.LastName,'') + 
                                    isNULL(cu.MiddleName,'') + 
                                    isNULL(cu.BusinessName,'') + 
                                    isNULL(cu.Address,'') +  
                                    isNULL(cu.PrimaryPhone,'') + 
                                    isNULL(cu.LeadSource,'') +
                                    isNULL(cu.LastUpdatedBy,'') FilterText  ";
                filtertext = " Where FilterText like @SearchText ";
            }
            //if (filter.EmployeeRole.ToLower().IndexOf("admin") == -1 && filter.UserRole != "Sales Manager")
            //{
            //    filterbyUser = string.Format("AND (cu.Installer='{0}' OR cu.Soldby='{0}' OR cu.QA1='{0}' OR cu.QA2='{0}')", filter.EmployeeId);
            //}
            #region leadsource
            if (filter.LeadSourceText == "null")
            {
                filter.LeadSourceText = filter.LeadSourceText.Substring(0, filter.LeadSourceText.Length - 4);

            }
            var array = filter.LeadSourceText.Split(",");
            string leadsourcequery = "";
            if (array != null)
            {
                foreach (var item in array)
                {
                    leadsourcequery += string.Format("'{0}',", item);
                }
                leadsourcequery = leadsourcequery.Remove(leadsourcequery.Length - 1, 1);
            }
            if (!string.IsNullOrWhiteSpace(filter.LeadSourceText) && filter.LeadSourceText != "-1" && filter.LeadSourceText != "undefined")
            {
                filterByLeadSourceText = string.Format("AND cu.LeadSource in ({0})", leadsourcequery);
            }
            #endregion
            #region customer type
            if (!string.IsNullOrEmpty(filter.CustomerTypeText) && filter.CustomerTypeText != "-1" && filter.CustomerTypeText != "undefined")
            {
                filter.CustomerTypeText = string.Join(string.Empty, filter.CustomerTypeText.Skip(5));
                filterbyCustomerType = string.Format("AND cu.Type = '{0}'", filter.CustomerTypeText);
            }
            #endregion
            #region leadstatus
            if (!string.IsNullOrEmpty(filter.LeadStatusText) && filter.LeadStatusText != "-1" && filter.LeadStatusText != "undefined" && filter.LeadStatusText != null)
            {
                var array1 = filter.LeadStatusText.Split(",");
                string leadstatusequery = "";
                if (array1 != null)
                {
                    foreach (var item in array1)
                    {
                        leadstatusequery += string.Format("'{0}',", item);
                    }
                    leadstatusequery = leadstatusequery.Remove(leadstatusequery.Length - 1, 1);
                }
                filterbyLeadStatus = string.Format("AND cu.Status in ({0})", leadstatusequery);
            }
            #endregion
            #region salesperson
            if (!string.IsNullOrEmpty(filter.SalesPersonText) && filter.SalesPersonText != "-1" && filter.SalesPersonText != "undefined")
            {
                var array2 = filter.SalesPersonText.Split(",");
                string salespersonquery = "";
                if (array2 != null)
                {
                    foreach (var item in array2)
                    {
                        salespersonquery += string.Format("'{0}',", item);
                    }
                    salespersonquery = salespersonquery.Remove(salespersonquery.Length - 1, 1);
                }
                filterbySalesPerson = string.Format("AND cu.SoldBy in ({0})", salespersonquery);
            }
            #endregion
            if (!string.IsNullOrWhiteSpace(filter.User) && filter.User != "-1")
            {
                filterByUserName = string.Format("AND (cu.Installer='{0}' OR cu.Soldby='{0}' OR cu.QA1='{0}' OR cu.QA2='{0}')", filter.User);
            }
            if (!string.IsNullOrWhiteSpace(filter.Source) && filter.Source != "-1")
            {
                if (filter.Source != "undefined")
                {
                    filterByLeadSource = string.Format("AND emp.UserId = '{0}' or cu.Installer='{0}' OR cu.Soldby='{0}' OR cu.QA1='{0}' OR cu.QA2='{0}'", filter.Source);
                }
            }
            if (filter.FirstDate != new DateTime() && filter.LastDate != new DateTime())
            {
                var StartDate = filter.FirstDate.SetZeroHour().ClientToUTCTime();
                var EndDate = filter.LastDate.SetMaxHour().ClientToUTCTime();
                filterByDate = string.Format("AND cu.JoinDate between '{0}' and '{1}'", StartDate, EndDate);
            }
            if (filter.Status != "-1" && filter.Status != null)
            {
                StatusQuery = string.Format("and cu.Status = '{0}'", filter.Status);
            }
            #region Lead sorting
            if (!string.IsNullOrWhiteSpace(filter.SortBy) && filter.SortBy != "-1" && !string.IsNullOrEmpty(filter.SortOrder))
            {
                if (filter.SortOrder.ToLower() != "asc")
                {
                    filter.SortOrder = " desc";
                }

                if (filter.SortBy.ToLower() == "name")
                {
                    OrderBySql = string.Concat("ORDER BY FirstName+ ' '+LastName ", filter.SortOrder);
                }
                else if (filter.SortBy.ToLower() == "phone")
                {
                    OrderBySql = string.Concat("ORDER BY PrimaryPhone ", filter.SortOrder);
                }
                else if (filter.SortBy.ToLower() == "location")
                {
                    OrderBySql = string.Concat("ORDER BY [Address] ", filter.SortOrder);
                }
                else if (filter.SortBy.ToLower() == "timestamp")
                {
                    OrderBySql = string.Concat("ORDER BY LastUpdatedDate ", filter.SortOrder);
                }
                else if (filter.SortBy.ToLower() == "leadsource")
                {
                    OrderBySql = string.Concat("ORDER BY LeadSource ", filter.SortOrder);
                }
                else if (filter.SortBy.ToLower() == "user")
                {
                    OrderBySql = string.Concat("ORDER BY EMPNUM ", filter.SortOrder);
                }
                else if (filter.SortBy.ToLower() == "status")
                {
                    OrderBySql = string.Concat("ORDER BY [Status] ", filter.SortOrder);
                }
                else
                {
                    OrderBySql = string.Concat("ORDER BY [Id] ", filter.SortOrder);
                }

            }
            #endregion
            try
            {
                sqlQuery = string.Format(sqlQuery,
                    filter.CompanyId, //0
                    filterColumntext, //1
                    filtertext, //2
                    filterByUserName,//3 
                    filterByLeadSource, //4
                    filterByDate, //5
                    filterbyUser,//6
                    OrderBySql //7
                    , StatusQuery
                    , filterByLeadSourceText
                    , filterbySalesPerson
                    , filterbyCustomerType
                    , filterbyLeadStatus);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", filter.PageNo));
                    AddParameter(cmd, pInt32("pagesize", filter.PageSize));
                    if (!string.IsNullOrWhiteSpace(filter.SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(filter.SearchText.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataSet GetLeadListByFilter(CustomerFilter filter)
        {
            string sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize
                                
                                select cus.Id,cus.CustomerId, cus.JoinDate INTO #CustomerIdData from Customer cus
								 left join CustomerCompany cc
                                  on cus.CustomerId = cc.CustomerId
								WHERE cc.CompanyId = '{0}'
                                AND cc.IsLead = 1 
                                AND cus.IsActive =1 
                                {9}
                                and cus.JoinDate is not null
                                {2}
                                {3}
                                {4}
                                {5}
                                {6}
                                {8}
                                {10}
                                {12}
                                {15}
                                {16}
                                order by cus.Id DESC

                                SELECT top (@pageno*@pagesize)
                                cus.Id ,
                                cus.PrimaryPhone ,
								cus.[State] ,
								cus.City ,
								cus.LeadSource ,
                                {13} as DisplayName,
                                 cus.CustomerId, 
                                cus.IsActive,
                                ISNULL( lkstatus.DisplayText, '') as Status ,
								cus.JoinDate, 
                                emp.FirstName + ' ' + emp.LastName as EMPNUM,
                                cussinfo.InstallType,
                                
                                 
                                
                                ISNULL(lkleadsource.DisplayText,'') as LeadSourceVal 
                                {1}
                                INTO #CustomerData
                                FROM Customer cus 
                                Left JOin Employee emp on convert(nvarchar(50), emp.UserId) = cus.QA1
								or convert(nvarchar(50), emp.UserId) = cus.QA2
								or convert(nvarchar(50), emp.UserId) = cus.Soldby
								or convert(nvarchar(50), emp.UserId) = cus.Installer
                                left join CustomerCompany cc
                                  on cus.CustomerId = cc.CustomerId
                                left join [Lookup] lkstatus
                                  on cus.Status = lkstatus.DataValue 
								  and lkstatus.DataKey ='LeadStatus'
                                left join CustomerSystemInfo cussinfo on cussinfo.CustomerId=cus.CustomerId
                                
                                 left join [Lookup] lkleadsource on lkleadsource.DataKey = 'LeadSource' and lkleadsource.DataValue = cus.LeadSource
                                {11}
                                {14} 
                                left join [Lookup] lkinstalledstatus on lkinstalledstatus.DataValue = iif(cus.InstalledStatus != '-1', cus.InstalledStatus, '') and lkinstalledstatus.DataKey = 'InstalledStatus'                     
                                WHERE cc.CompanyId = '{0}'
                                AND cc.IsLead = 1 
                                AND cus.IsActive =1 
                                {9}
                                and cus.JoinDate is not null
                                {2}
                                {3}
                                {4}
                                {5}
                                {6}
                                {8}
                                {10}
                                {12}
                                {15}
                                {16}
                                order by cus.Id DESC
                                select * into #CustomerFilterData
                                FROM #CustomerData
                                
                                SELECT TOP (@pagesize)
                                  * Into #CustomerFilterResult
                                FROM #CustomerFilterData
                                where Id NOT IN(Select TOP (@pagestart)  Id from #CustomerData 
                                {7}) {7}
                               

								select cfr.*, cus.CustomerNo,
                                cus.Title,
                                cus.FirstName ,
                                cus.LastName ,
                                cus.MiddleName ,
                                cus.BusinessName ,
                                cus.SSN,
		                        cus.Street,
                                --cus.City ,
		                        --cus.[State] ,
		                        cus.ZipCode, 
		                        cus.[Address],
		                        cus.EmailAddress,
		                        --cus.PrimaryPhone,
                                cus.SecondaryPhone,
								cus.DateofBirth,
								--cus.LeadSource,
								cus.LastUpdatedDate,
								cus.LastUpdatedBy,
                                cus.StreetType,
								cus.Appartment,
                                cus.CellNo,
                                cus.Fax,
                                cus.CallingTime,
                                cus.Address2,
                                cus.Country,
                                cus.StreetPrevious,
                                cus.CityPrevious,
                                cus.StatePrevious,
                                cus.ZipCodePrevious,
                                cus.CountryPrevious,
                                cus.AccountNo,
                                cus.IsAlarmCom,
                                cus.CreditScore,
                                cus.CreditScoreValue,
                                cus.ContractTeam,
                                cus.FundingCompany,
                                cus.MonthlyMonitoringFee,
                                cus.CellularBackup,
                                cus.CustomerFunded,
                                cus.Maintenance,
                                cus.Note,
                                cus.SalesDate,
                                cus.FollowUpDate,
                                cus.InstallDate,
                                cus.CutInDate,
                                cus.Installer,
                                cus.Soldby,
                                cus.FundingDate,
                                cus.ReminderDate,
                                cus.QA1,
                                cus.QA1Date,
                                cus.QA2,
                                cus.QA2Date,
                                cus.BillAmount,
                                cus.PaymentMethod,
                                cus.BillCycle,
                                cus.BillDay,
                                cus.BillNotes,
                                cus.BillTax,
                                cus.BillOutStanding,
                                cus.ServiceDate,
                                cus.Area,
                                cus.Latlng,
                                cus.SecondCustomerNo,
                                cus.AdditionalCustomerNo,
                                cus.IsTechCallPassed,
                                cus.IsDirect,
                                cus.AuthorizeRefId,
                                cus.AuthorizeCusProfileId,
                                cus.AuthorizeCusPaymentProfileId,
                                cus.AuthorizeDescription,
                                cus.IsRequiredCsvSync,
                                cus.Passcode,
                                cus.ActivationFee,
                                cus.FirstBilling,
                                cus.ActivationFeePaymentMethod,
                                cus.LastGeneratedInvoice,
                                cus.Singature,
                                cus.CrossStreet,
                                cus.DBA,
                                cus.AlarmRefId,
                                cus.TransunionRefId,
                                cus.MonitronicsRefId,
                                cus.CentralStationRefId,
                                cus.CmsRefId,
                                cus.PreferedEmail,
                                cus.PreferedSms,
                                cus.IsAgreement,
                                cus.IsFireAccount,
                                cus.CreatedByUid,
                                cus.CreatedDate,
                                cus.LastUpdatedByUid,
                                cus.BusinessAccountType,
                                cus.PhoneType,
                                cus.Carrier,
                                cus.ReferringCustomer,
                                cus.EsistingPanel,
                                cus.[Ownership],
                                cus.PurchasePrice,
                                cus.ContractValue,
                                cus.ChildOf,
                                cus.EmailVerified,
                                cus.HomeVerified,
                                cus.County,
                                cus.CustomerToken,
                                cus.PaymentToken,
                                cus.ScheduleToken,
                                cus.EstCloseDate,
                                cus.ProjectWalkDate,
                                cus.BranchId,
                                cus.SubscriptionStatus,
                                cus.AnnualRevenue,
                                cus.Website,
                                cus.Market,
                                cus.Passengers,
                                cus.Budget,
                                cus.SmartSetUpStep,
                                cus.CustomerAccountType,
                                cus.IsPrimaryPhoneVerified,
                                cus.IsSecondaryPhoneVerified,
                                cus.IsCellNoVerified,
								cus.[Type], 
                                cus.DoNotCall,
                                cus.PreferredContactMethod,
                                cus.MovingDate,
                                cus.ContactedPerviously,
                                cus.InstalledStatus,
                                cus.AcquiredFrom,
                                cus.FollowUpDate,
                                cus.BuyoutAmountByADS,
                                cus.BuyoutAmountBySalesRep,
                                cus.FinancedTerm,
                                cus.FinancedAmount,
                                cus.Levels,
                                cus.SoldAmount,
                                cus.AgreementEmail,
                                cus.AgreementPhoneNo,
                                cus.TaxExemption,
                                cus.AppoinmentSet,
                                cus.PlatformId,
                                cb.Name +'>'+cb.Region+'>'+cb.Division as BranchName,
	                            cfr.LeadSourceVal
								from #CustomerFilterResult cfr
								Left Join Customer cus on cus.CustomerId=cfr.CustomerId 
                                left join CompanyBranch cb on cb.Id=cus.BranchId  
                                {7}

								drop table #CustomerFilterResult

                                (select count(*) [TotalCount]
                                from #CustomerIdData)
                                (select COUNT(*) LeadCount from #CustomerIdData cus 
                                left join CustomerCompany cc
                                on cus.CustomerId = cc.CustomerId
                                )
								(select COUNT(inv.Id) EstimateCount from #CustomerIdData cus
								left join Invoice inv on cus.CustomerId = inv.CustomerId
								left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
								where inv.IsEstimate = 1
								and inv.Status != 'Init')
								(select COUNT(*) LeadThisMonthCount from #CustomerIdData cus 
                                left join CustomerCompany cc
                                on cus.CustomerId = cc.CustomerId
								where MONTH(cus.JoinDate) = MONTH(GETDATE())
								AND YEAR(cus.JoinDate) = YEAR(GETDATE()))
								(select COUNT(*) LeadLastMonthCount from CustomerCompany cc 
                                left join Customer cus
                                on cus.CustomerId = cc.CustomerId
								where cc.ConvertionDate is not null
								and DATEPART(m, cc.ConvertionDate) = DATEPART(m, DATEADD(m, -1, getdate()))
								AND DATEPART(yyyy, cc.ConvertionDate) = DATEPART(yyyy, DATEADD(m, -1, getdate()))
								)
								(select SUM(inv.TotalAmount) LeadEstimateAmount from #CustomerIdData cus
								left join Invoice inv on cus.CustomerId = inv.CustomerId
								left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
								where inv.IsEstimate = 1
								and inv.Status != 'Init')
                                (select COUNT(Bking.Id) BookingCount from #CustomerIdData cus
								left join Booking Bking on cus.CustomerId = Bking.CustomerId
								left join CustomerCompany cc on cc.CustomerId = cus.CustomerId)
                                (select SUM(Bking.TotalAmount) LeadBookingAmount from #CustomerIdData cus
								left join Booking Bking on cus.CustomerId = Bking.CustomerId
								left join CustomerCompany cc on cc.CustomerId = cus.CustomerId)
                                DROP TABLE #CustomerData
                                DROP TABLE #CustomerFilterData
                                Drop Table #CustomerIdData";

            string filtertext = "";
            string filterColumntext = "";
            string filterByUserName = "";
            string filterByLeadSource = "";
            string filterByDate = "";
            string filterbyUser = "";
            string OrderBySql = "";
            string StatusQuery = "";
            string BranchQuery = "";
            string leadestimatequery = "";
            string leadBookingquery = "";
            string joinquery = "";
            string joinquery2 = "";
            string thismonthquery = "";
            string FilterSubquery = "";
            if (!string.IsNullOrWhiteSpace(filter.SearchText) && filter.SearchText != "undefined")
            {
                bool isNumeric = Regex.IsMatch(filter.SearchText, @"\d");
                //if (isNumeric && filter.SearchText.Length == 10)
                //{
                //    filter.SearchText = string.Format("{0:0##-###-####}", Convert.ToInt64(filter.SearchText)).TrimStart('-');
                //}
                if (isNumeric && filter.SearchText.Length == 10)
                {
                    //long SSN = 0;
                    //if (long.TryParse(filter.SearchText, out SSN))
                    //{
                    //    filter.SearchText = string.Format("{0:0##-###-####}", SSN).TrimStart('-');
                    //}
                }

                filterColumntext = @" , isNULL(cus.FirstName, '') +
                                    isNULL(cus.LastName,'') + 
                                    isNULL(cus.MiddleName,'') + 
                                    isNULL(cus.BusinessName,'') + 
                                    isNULL(cus.Address,'') +  
                                    isNULL(cus.PrimaryPhone,'') + 
                                    isNULL(cus.SecondaryPhone,'') + 
                                    isNULL(cus.LeadSource,'') +
                                    isNULL(cus.LastUpdatedBy,'') FilterText  ";
                filtertext = string.Format("and (cus.FirstName like '{0}%' or cus.LastName like '{0}%' or cus.BusinessName like '{0}%' or cus.Address like '{0}%' or cus.PrimaryPhone like '{0}%' or cus.SecondaryPhone like '{0}%' or cus.LeadSource like '{0}%' or cus.LastUpdatedBy like '{0}%' or cus.DBA like '{0}%' or cus.Street like '{0}%' or cus.FirstName + ' ' + cus.LastName like '{0}%')", filter.SearchText);
            }
            //if (filter.EmployeeRole.ToLower().IndexOf("admin") == -1 && filter.UserRole != "Sales Manager")
            //{
            //    filterbyUser = string.Format("AND (cus.Installer='{0}' OR cus.Soldby='{0}' OR cus.QA1='{0}' OR cus.QA2='{0}')", filter.EmployeeId);
            //}
            //if (!string.IsNullOrWhiteSpace(filter.User) && filter.User != "-1")
            //{
            //    filterByUserName = string.Format("AND (cus.Installer='{0}' OR cus.Soldby='{0}' OR cus.QA1='{0}' OR cus.QA2='{0}')", filter.User);
            //}
            //if (!string.IsNullOrWhiteSpace(filter.Source) && filter.Source != "-1")
            //{
            //    if (filter.Source != "undefined")
            //    {
            //        filterByLeadSource = string.Format("AND emp.UserId = '{0}' or cus.Installer='{0}' OR cus.Soldby='{0}' OR cus.QA1='{0}' OR cus.QA2='{0}'", filter.Source);
            //    }
            //}
            if (filter.FirstDate != new DateTime() && filter.LastDate != new DateTime())
            {
                var StartDate = filter.FirstDate.SetZeroHour().ClientToUTCTime();
                var EndDate = filter.LastDate.SetMaxHour().ClientToUTCTime();
                filterByDate = string.Format("AND cus.JoinDate between '{0}' and '{1}'", StartDate, EndDate);
            }
            if (!string.IsNullOrWhiteSpace(filter.FollowUpDate) && filter.FollowUpDate != "undefined")
            {
                try
                {
                    DateTime date = Convert.ToDateTime(filter.FollowUpDate);
                    filterByDate += string.Format(" AND cus.FollowUpDate between '{0}' and '{1}'", date.ToString("MM-dd-yyyy"), date.AddDays(1).ToString("MM-dd-yyyy"));
                }
                catch (Exception) { }
            }
            //if (filter.Status != "-1" && filter.Status != "undefined")
            //{
            //    StatusQuery = string.Format("and cus.Status = '{0}'", filter.Status);
            //}
            //if (filter.Branch != "-1" && filter.Branch != "undefined")
            //{
            //    BranchQuery = string.Format("and cus.BranchId = '{0}'", filter.Branch);
            //}
            #region Lead sorting
            if (!string.IsNullOrWhiteSpace(filter.SortBy) && filter.SortBy != "-1")
            {
                if (filter.SortBy == "ascending/name")
                {
                    OrderBySql = "ORDER BY DisplayName asc";
                }
                else if (filter.SortBy == "descending/name")
                {
                    OrderBySql = "ORDER BY DisplayName desc";
                }
                else if (filter.SortBy == "ascending/phoneno")
                {
                    OrderBySql = "ORDER BY PrimaryPhone asc";
                }
                else if (filter.SortBy == "descending/phoneno")
                {
                    OrderBySql = "ORDER BY PrimaryPhone desc";
                }
                else if (filter.SortBy == "ascending/location")
                {
                    OrderBySql = "ORDER BY State asc,City asc";
                }
                else if (filter.SortBy == "descending/location")
                {
                    OrderBySql = "ORDER BY State desc,City Desc";
                }
                else if (filter.SortBy == "ascending/createdon")
                {
                    OrderBySql = "ORDER BY JoinDate asc";
                }
                else if (filter.SortBy == "descending/createdon")
                {
                    OrderBySql = "ORDER BY JoinDate desc";
                }
                else if (filter.SortBy == "ascending/leadsource")
                {
                    OrderBySql = "ORDER BY LeadSource asc";
                }
                else if (filter.SortBy == "descending/leadsource")
                {
                    OrderBySql = "ORDER BY LeadSource desc";
                }
                else if (filter.SortBy == "ascending/status")
                {
                    OrderBySql = "ORDER BY Status asc";
                }
                else if (filter.SortBy == "descending/status")
                {
                    OrderBySql = "ORDER BY Status desc";
                }
                else
                {
                    OrderBySql = string.Concat("ORDER BY Id desc");
                }

            }
            else
            {
                OrderBySql = string.Concat("ORDER BY Id desc");
            }
            #endregion
            if (filter.LeadEstimate == true)
            {
                joinquery = string.Format("left join Invoice inv on cus.CustomerId = inv.CustomerId");
                leadestimatequery = string.Format("and inv.IsEstimate = 1 and inv.Status != 'Init'");
            }
            if (filter.leadthismonth == true)
            {
                thismonthquery = string.Format("and MONTH(cus.JoinDate) = MONTH(GETDATE()) AND YEAR(cus.JoinDate) = YEAR(GETDATE())");
            }
            if (filter.leadlastmonth == true)
            {
                thismonthquery = string.Format("and DATEPART(m, cus.JoinDate) = DATEPART(m, DATEADD(m, -1, getdate())) AND DATEPART(yyyy, cus.JoinDate) = DATEPART(yyyy, DATEADD(m, -1, getdate()))");
            }
            if (filter.LeadBooking == true)
            {
                joinquery2 = string.Format("left join Booking Bking on cus.CustomerId = Bking.CustomerId");
                leadBookingquery = string.Format("and Bking.BillingAddress is not null");
            }
            #region Naming Condition
            string NamingSql = "''";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            if (gs != null)
            {
                NamingSql = gs.Value;
            }
            #endregion
            #region Filter Query For Customer and Lead
            if (!string.IsNullOrWhiteSpace(filter.displayname))
            {
                FilterSubquery += string.Format(@" and (cus.FirstName like '%{0}%' 
                or cus.LastName like '%{0}%' 
                or cus.FirstName + ' ' + cus.LastName like '%{0}%' 
                or cus.BusinessName like '%{0}%' 
                or cus.DBA like '%{0}%') ", filter.displayname);
            }
            if (!string.IsNullOrWhiteSpace(filter.customerno))
            {
                FilterSubquery += string.Format(" and cus.CustomerNo = '{0}'", filter.customerno);
            }
            if (!string.IsNullOrWhiteSpace(filter.customerintid))
            {
                FilterSubquery += string.Format(" and cus.Id = '{0}'", filter.customerintid);
            }
            if (!string.IsNullOrWhiteSpace(filter.title))
            {
                FilterSubquery += string.Format(" and cus.Title like '%{0}%'", filter.title);
            }
            if (!string.IsNullOrWhiteSpace(filter.firstname))
            {
                FilterSubquery += string.Format(" and cus.FirstName like '%{0}%'", filter.firstname);
            }
            if (!string.IsNullOrWhiteSpace(filter.lastname))
            {
                FilterSubquery += string.Format(" and cus.LastName like '%{0}%'", filter.lastname);
            }
            if (!string.IsNullOrWhiteSpace(filter.childof) && filter.childof != "null" && filter.childof != "00000000-0000-0000-0000-000000000000")
            {
                FilterSubquery += string.Format(" and cus.ChildOf = '{0}'", filter.childof);
            }
            if (!string.IsNullOrWhiteSpace(filter.passcode))
            {
                FilterSubquery += string.Format(" and cus.Passcode = '{0}'", filter.passcode);
            }
            if (!string.IsNullOrWhiteSpace(filter.customertype) && filter.customertype != "-1" && filter.customertype != "null")
            {
                FilterSubquery += string.Format(" and cus.[Type] = '{0}'", filter.customertype);
            }
            if (!string.IsNullOrWhiteSpace(filter.businessname))
            {
                FilterSubquery += string.Format(" and cus.BusinessName like '%{0}%'", filter.businessname);
            }
            if (!string.IsNullOrWhiteSpace(filter.dba))
            {
                FilterSubquery += string.Format(" and cus.DBA like '%{0}%'", filter.dba);
            }
            if (!string.IsNullOrWhiteSpace(filter.street))
            {
                FilterSubquery += string.Format(" and cus.Street like '%{0}%'", filter.street);
            }
            if (!string.IsNullOrWhiteSpace(filter.zipcode))
            {
                FilterSubquery += string.Format(" and cus.ZipCode like '%{0}%'", filter.zipcode);
            }
            if (!string.IsNullOrWhiteSpace(filter.city))
            {
                FilterSubquery += string.Format(" and cus.City like '%{0}%'", filter.city);
            }
            if (!string.IsNullOrWhiteSpace(filter.state))
            {
                FilterSubquery += string.Format(" and cus.State like '%{0}%'", filter.state);
            }
            if (!string.IsNullOrWhiteSpace(filter.county))
            {
                FilterSubquery += string.Format(" and cus.County like '%{0}%'", filter.county);
            }
            if (!string.IsNullOrWhiteSpace(filter.country))
            {
                FilterSubquery += string.Format(" and cus.Country like '%{0}%'", filter.country);
            }
            if (!string.IsNullOrWhiteSpace(filter.homeowner))
            {
                FilterSubquery += string.Format(" and cus.HomeOwner like '%{0}%'", filter.homeowner);
            }
            if (!string.IsNullOrWhiteSpace(filter.leadsource) && filter.leadsource != "-1" && filter.leadsource != "null")
            {
                FilterSubquery += string.Format(" and cus.LeadSource like '%{0}%'", filter.leadsource);
            }
            if (!string.IsNullOrWhiteSpace(filter.referringcustomer) && filter.referringcustomer != "00000000-0000-0000-0000-000000000000" && filter.referringcustomer != "null")
            {
                FilterSubquery += string.Format(" and cus.ReferringCustomer = '{0}'", filter.referringcustomer);
            }
            if (!string.IsNullOrWhiteSpace(filter.emailaddress))
            {
                FilterSubquery += string.Format(" and cus.EmailAddress like '%{0}%'", filter.emailaddress);
            }
            if (!string.IsNullOrWhiteSpace(filter.primaryphone))
            {
                FilterSubquery += string.Format(" and cus.PrimaryPhone like '%{0}%'", filter.primaryphone);
            }
            if (!string.IsNullOrWhiteSpace(filter.cellno))
            {
                FilterSubquery += string.Format(" and cus.CellNo like '%{0}%'", filter.cellno);
            }
            if (!string.IsNullOrWhiteSpace(filter.secondaryphone))
            {
                FilterSubquery += string.Format(" and cus.SecondaryPhone like '%{0}%'", filter.secondaryphone);
            }
            if (!string.IsNullOrWhiteSpace(filter.carrier) && filter.carrier != "-1" && filter.carrier != "null")
            {
                FilterSubquery += string.Format(" and cus.Carrier = '{0}'", filter.carrier);
            }
            if (!string.IsNullOrWhiteSpace(filter.phonetype) && filter.phonetype != "-1" && filter.phonetype != "null")
            {
                FilterSubquery += string.Format(" and cus.PhoneType = '{0}'", filter.phonetype);
            }
            if (!string.IsNullOrWhiteSpace(filter.besttimetocall) && filter.besttimetocall != "-1" && filter.besttimetocall != "null")
            {
                FilterSubquery += string.Format(" and cus.BestTimeToCall = '{0}'", filter.besttimetocall);
            }
            if (!string.IsNullOrWhiteSpace(filter.preferredcontactmethod) && filter.preferredcontactmethod != "-1" && filter.preferredcontactmethod != "null")
            {
                FilterSubquery += string.Format(" and cus.PreferredContactMethod = '{0}'", filter.preferredcontactmethod);
            }
            if (!string.IsNullOrWhiteSpace(filter.dateofbirth))
            {
                var dob = Convert.ToDateTime(filter.dateofbirth);
                if (dob != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.DateofBirth = '{0}'", dob.ToString("yyyy-MM-dd 00:00:00.000"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.ssn))
            {
                FilterSubquery += string.Format(" and cus.SSN like '%{0}%'", filter.ssn);
            }
            if (!string.IsNullOrWhiteSpace(filter.callingtime) && filter.callingtime != "-1" && filter.callingtime != "null")
            {
                FilterSubquery += string.Format(" and cus.CallingTime = '{0}'", filter.callingtime);
            }
            if (!string.IsNullOrWhiteSpace(filter.address))
            {
                FilterSubquery += string.Format(" and cus.Address like '%{0}%'", filter.address);
            }
            if (!string.IsNullOrWhiteSpace(filter.address2))
            {
                FilterSubquery += string.Format(" and cus.Address2 like '%{0}%'", filter.address2);
            }
            if (!string.IsNullOrWhiteSpace(filter.streetprevious))
            {
                FilterSubquery += string.Format(" and cus.StreetPrevious like '%{0}%'", filter.streetprevious);
            }
            if (!string.IsNullOrWhiteSpace(filter.cityprevious))
            {
                FilterSubquery += string.Format(" and cus.CityPrevious like '%{0}%'", filter.cityprevious);
            }
            if (!string.IsNullOrWhiteSpace(filter.stateprevious))
            {
                FilterSubquery += string.Format(" and cus.StatePrevious like '%{0}%'", filter.stateprevious);
            }
            if (!string.IsNullOrWhiteSpace(filter.zipcodeprevious))
            {
                FilterSubquery += string.Format(" and cus.ZipCodePrevious like '%{0}%'", filter.zipcodeprevious);
            }
            if (!string.IsNullOrWhiteSpace(filter.countryprevious))
            {
                FilterSubquery += string.Format(" and cus.CountryPrevious like '%{0}%'", filter.countryprevious);
            }
            if (!string.IsNullOrWhiteSpace(filter.accountno))
            {
                FilterSubquery += string.Format(" and cus.AccountNo like '%{0}%'", filter.accountno);
            }
            if (!string.IsNullOrWhiteSpace(filter.creditscore) && filter.creditscore != "-1" && filter.creditscore != "null")
            {
                FilterSubquery += string.Format(" and cus.CreditScore = '{0}'", filter.creditscore);
            }
            if (!string.IsNullOrWhiteSpace(filter.creditscorevalue))
            {
                FilterSubquery += string.Format(" and cus.CreditScoreValue like '%{0}%'", filter.creditscorevalue);
            }
            if (!string.IsNullOrWhiteSpace(filter.contractteam) && filter.contractteam != "-1" && filter.contractteam != "null")
            {
                FilterSubquery += string.Format(" and cus.ContractTeam = '{0}'", filter.contractteam);
            }
            if (!string.IsNullOrWhiteSpace(filter.fundingcompany) && filter.fundingcompany != "-1" && filter.fundingcompany != "null")
            {
                FilterSubquery += string.Format(" and cus.FundingCompany = '{0}'", filter.fundingcompany);
            }
            if (!string.IsNullOrWhiteSpace(filter.joindate))
            {
                var join = Convert.ToDateTime(filter.joindate);
                if (join != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.JoinDate between '{0}' and '{1}'", join.ToString("yyyy-MM-dd 00:00:00.000"), join.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.note))
            {
                FilterSubquery += string.Format(" and cus.Note like '%{0}%'", filter.note);
            }
            if (!string.IsNullOrWhiteSpace(filter.salesdatecus))
            {
                var date = Convert.ToDateTime(filter.salesdatecus);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.installdate))
            {
                var date = Convert.ToDateTime(filter.installdate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.InstallDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.cutindate))
            {
                var date = Convert.ToDateTime(filter.cutindate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.CutInDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.installer) && filter.installer != "-1" && filter.installer != "null")
            {
                FilterSubquery += string.Format(" and cus.Installer = '{0}'", filter.installer);
            }
            if (!string.IsNullOrWhiteSpace(filter.fundingdate))
            {
                var date = Convert.ToDateTime(filter.fundingdate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.FundingDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.middlename))
            {
                FilterSubquery += string.Format(" and cus.MiddleName like '%{0}%'", filter.middlename);
            }
            if (!string.IsNullOrWhiteSpace(filter.reminderdate))
            {
                var date = Convert.ToDateTime(filter.reminderdate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.ReminderDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.qa1) && filter.qa1 != "-1" && filter.qa1 != "null")
            {
                FilterSubquery += string.Format(" and cus.QA1 = '{0}'", filter.qa1);
            }
            if (!string.IsNullOrWhiteSpace(filter.qa1date))
            {
                var date = Convert.ToDateTime(filter.qa1date);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.QA1Date between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.qa2) && filter.qa2 != "-1" && filter.qa2 != "null")
            {
                FilterSubquery += string.Format(" and cus.QA2 = '{0}'", filter.qa2);
            }
            if (!string.IsNullOrWhiteSpace(filter.qa2date))
            {
                var date = Convert.ToDateTime(filter.qa2date);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.QA2Date between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.billamount))
            {
                FilterSubquery += string.Format(" and cus.BillAmount like '%{0}%'", filter.billamount);
            }
            if (!string.IsNullOrWhiteSpace(filter.paymentmethodcus) && filter.paymentmethodcus != "-1" && filter.paymentmethodcus != "null")
            {
                FilterSubquery += string.Format(" and cus.PaymentMethod = '{0}'", filter.paymentmethodcus);
            }
            if (!string.IsNullOrWhiteSpace(filter.billcycle) && filter.billcycle != "-1" && filter.billcycle != "null")
            {
                FilterSubquery += string.Format(" and cus.BillCycle = '{0}'", filter.billcycle);
            }
            if (!string.IsNullOrWhiteSpace(filter.billday) && filter.billday != "-1" && filter.billday != "null")
            {
                FilterSubquery += string.Format(" and cus.BillDay = '{0}'", filter.billday);
            }
            if (!string.IsNullOrWhiteSpace(filter.billnotes))
            {
                FilterSubquery += string.Format(" and cus.BillNotes like '%{0}%'", filter.billnotes);
            }
            if (!string.IsNullOrWhiteSpace(filter.billtax) && filter.billtax != "-1" && filter.billtax != "null")
            {
                FilterSubquery += string.Format(" and cus.BillTax = '{0}'", filter.billtax);
            }
            if (!string.IsNullOrWhiteSpace(filter.billoutstanding))
            {
                FilterSubquery += string.Format(" and cus.BillOutStanding like '%{0}%'", filter.billoutstanding);
            }
            if (!string.IsNullOrWhiteSpace(filter.servicedate))
            {
                var date = Convert.ToDateTime(filter.servicedate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format("and cus.ServiceDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.area))
            {
                FilterSubquery += string.Format("and cus.Area like '%{0}%'", filter.area);
            }
            if (!string.IsNullOrWhiteSpace(filter.streettype) && filter.streettype != "-1" && filter.streettype != "null")
            {
                FilterSubquery += string.Format(" and cus.StreetType = '{0}'", filter.streettype);
            }
            if (!string.IsNullOrWhiteSpace(filter.apartment))
            {
                FilterSubquery += string.Format(" and cus.Appartment like '%{0}%'", filter.apartment);
            }
            if (!string.IsNullOrWhiteSpace(filter.secondcustomerno))
            {
                FilterSubquery += string.Format(" and cus.SecondCustomerNo like '%{0}%'", filter.secondcustomerno);
            }
            if (!string.IsNullOrWhiteSpace(filter.additionalcustomerno))
            {
                FilterSubquery += string.Format(" and cus.AdditionalCustomerNo like '%{0}%'", filter.additionalcustomerno);
            }
            if (!string.IsNullOrWhiteSpace(filter.activationfee))
            {
                FilterSubquery += string.Format(" and cus.ActivationFee like '%{0}%'", filter.activationfee);
            }
            if (!string.IsNullOrWhiteSpace(filter.firstbilling))
            {
                var date = Convert.ToDateTime(filter.firstbilling);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.FirstBilling between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.isactivestatus) && filter.isactivestatus != "-1" && filter.isactivestatus != "null")
            {
                FilterSubquery += string.Format(" and cus.IsActive = '{0}'", filter.isactivestatus);
            }
            if (!string.IsNullOrWhiteSpace(filter.mmr))
            {
                FilterSubquery += string.Format(" and cus.MonthlyMonitoringFee like '%{0}%'", filter.mmr);
            }
            if (!string.IsNullOrWhiteSpace(filter.crossstreet))
            {
                FilterSubquery += string.Format(" and cus.CrossStreet like '%{0}%'", filter.crossstreet);
            }
            if (!string.IsNullOrWhiteSpace(filter.businessaccounttype) && filter.businessaccounttype != "-1" && filter.businessaccounttype != "null")
            {
                FilterSubquery += string.Format(" and cus.BusinessAccountType = '{0}'", filter.businessaccounttype);
            }
            if (!string.IsNullOrWhiteSpace(filter.esistingpanel) && filter.esistingpanel != "-1" && filter.esistingpanel != "null")
            {
                FilterSubquery += string.Format(" and cus.EsistingPanel = '{0}'", filter.esistingpanel);
            }
            if (!string.IsNullOrWhiteSpace(filter.estclosedate))
            {
                var date = Convert.ToDateTime(filter.estclosedate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.EstCloseDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.projectwalkdate))
            {
                var date = Convert.ToDateTime(filter.projectwalkdate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.ProjectWalkDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.annualrevenue))
            {
                FilterSubquery += string.Format(" and cus.AnnualRevenue like '%{0}%'", filter.annualrevenue);
            }
            if (!string.IsNullOrWhiteSpace(filter.website))
            {
                FilterSubquery += string.Format(" and cus.Website like '%{0}%'", filter.website);
            }
            if (!string.IsNullOrWhiteSpace(filter.market) && filter.market != "-1" && filter.market != "null")
            {
                FilterSubquery += string.Format(" and cus.Market = '{0}'", filter.market);
            }
            if (!string.IsNullOrWhiteSpace(filter.passengers))
            {
                FilterSubquery += string.Format(" and cus.Passengers like '%{0}%'", filter.passengers);
            }
            if (!string.IsNullOrWhiteSpace(filter.budget))
            {
                FilterSubquery += string.Format(" and cus.Budget like '%{0}%'", filter.budget);
            }
            if (!string.IsNullOrWhiteSpace(filter.customeraccounttype) && filter.customeraccounttype != "-1" && filter.customeraccounttype != "null")
            {
                FilterSubquery += string.Format(" and cus.CustomerAccountType = '{0}'", filter.customeraccounttype);
            }
            if (!string.IsNullOrWhiteSpace(filter.csprovider) && filter.csprovider != "-1" && filter.csprovider != "null")
            {
                FilterSubquery += string.Format(" and cus.CSProvider = '{0}'", filter.csprovider);
            }
            if (!string.IsNullOrWhiteSpace(filter.ownership) && filter.ownership != "-1" && filter.ownership != "null")
            {
                FilterSubquery += string.Format(" and cus.Ownership = '{0}'", filter.ownership);
            }
            if (!string.IsNullOrWhiteSpace(filter.purchaseprice))
            {
                FilterSubquery += string.Format(" and cus.PurchasePrice like '%{0}%'", filter.purchaseprice);
            }
            if (!string.IsNullOrWhiteSpace(filter.contractvalue))
            {
                FilterSubquery += string.Format(" and cus.ContractValue like '%{0}%'", filter.contractvalue);
            }
            if (!string.IsNullOrWhiteSpace(filter.accessgivento) && filter.accessgivento != "-1" && filter.accessgivento != "null")
            {
                FilterSubquery += string.Format(" and cus.AccessGivenTo = '{0}'", filter.accessgivento);
            }
            if (!string.IsNullOrWhiteSpace(filter.soldby) && filter.soldby != "-1" && filter.soldby != "null")
            {
                FilterSubquery += string.Format(" and (cus.Soldby = '{0}' or cus.SoldBy2 = '{0}' or cus.SoldBy3 = '{0}')", filter.soldby);
            }
            if (!string.IsNullOrWhiteSpace(filter.saleslocation) && filter.saleslocation != "-1" && filter.saleslocation != "null")
            {
                FilterSubquery += string.Format(" and cus.SalesLocation = '{0}'", filter.saleslocation);
            }
            if (!string.IsNullOrWhiteSpace(filter.leadstatus) && filter.leadstatus != "-1" && filter.leadstatus != "null")
            {
                FilterSubquery += string.Format(" and cus.[Status] = '{0}'", filter.leadstatus);
            }
            if (!string.IsNullOrWhiteSpace(filter.donotcall))
            {
                FilterSubquery += string.Format(" and cus.DoNotCall like '%{0}%'", filter.donotcall);
            }
            if (!string.IsNullOrWhiteSpace(filter.customerstatus) && filter.customerstatus != "-1" && filter.customerstatus != "null")
            {
                FilterSubquery += string.Format(" and cus.CustomerStatus = '{0}'", filter.customerstatus);
            }
            if (!string.IsNullOrWhiteSpace(filter.duplicatecustomer) && filter.duplicatecustomer != "null" && filter.duplicatecustomer != "00000000-0000-0000-0000-000000000000")
            {
                FilterSubquery += string.Format(" and cus.DuplicateCustomer = '{0}'", filter.duplicatecustomer);
            }
            if (!string.IsNullOrWhiteSpace(filter.movingdate))
            {
                var date = Convert.ToDateTime(filter.movingdate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.MovingDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.contractedpreviously) && filter.contractedpreviously != "-1" && filter.contractedpreviously != "null")
            {
                FilterSubquery += string.Format(" and cus.ContractedPreviously = '{0}'", filter.contractedpreviously);
            }
            if (!string.IsNullOrWhiteSpace(filter.installedstatus) && filter.installedstatus != "-1" && filter.installedstatus != "null")
            {
                FilterSubquery += string.Format(" and cus.InstalledStatus = '{0}'", filter.installedstatus);
            }
            if (!string.IsNullOrWhiteSpace(filter.acquiredform))
            {
                FilterSubquery += string.Format(" and cus.AcquiredFrom like '%{0}%'", filter.acquiredform);
            }
            if (!string.IsNullOrWhiteSpace(filter.followupdatecus))
            {
                var date = Convert.ToDateTime(filter.followupdatecus);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.FollowUpDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.buyoutamountbyads))
            {
                FilterSubquery += string.Format(" and cus.BuyoutAmountByADS like '%{0}%'", filter.buyoutamountbyads);
            }
            if (!string.IsNullOrWhiteSpace(filter.buyoutamountbysalesrep))
            {
                FilterSubquery += string.Format(" and cus.BuyoutAmountBySalesRep like '%{0}%'", filter.buyoutamountbysalesrep);
            }
            if (!string.IsNullOrWhiteSpace(filter.financedterm))
            {
                FilterSubquery += string.Format(" and cus.FinancedTerm like '%{0}%'", filter.financedterm);
            }
            if (!string.IsNullOrWhiteSpace(filter.financedamount))
            {
                FilterSubquery += string.Format(" and cus.FinancedAmount like '%{0}%'", filter.financedamount);
            }
            if (!string.IsNullOrWhiteSpace(filter.levels))
            {
                FilterSubquery += string.Format(" and cus.Levels like '%{0}%'", filter.levels);
            }
            if (!string.IsNullOrWhiteSpace(filter.soldamount))
            {
                FilterSubquery += string.Format(" and cus.SoldAmount like '%{0}%'", filter.soldamount);
            }
            if (!string.IsNullOrWhiteSpace(filter.taxexemption) && filter.taxexemption != "-1" && filter.taxexemption != "null")
            {
                FilterSubquery += string.Format(" and cus.TaxExemption = '{0}'", filter.taxexemption);
            }
            if (!string.IsNullOrWhiteSpace(filter.appointmentset) && filter.appointmentset != "-1" && filter.appointmentset != "null")
            {
                FilterSubquery += string.Format(" and cus.AppointmentSet = '{0}'", filter.appointmentset);
            }
            if (!string.IsNullOrWhiteSpace(filter.PlatformId))
            {
                FilterSubquery += string.Format(" and cus.PlatformId = '{0}'", filter.PlatformId);
            }
            if (!string.IsNullOrWhiteSpace(filter.customerfunded) && filter.customerfunded != "-1" && filter.customerfunded != "null")
            {
                FilterSubquery += string.Format(" and cus.CustomerFunded = '{0}'", filter.customerfunded);
            }
            if (!string.IsNullOrWhiteSpace(filter.maintenance) && filter.maintenance != "-1" && filter.maintenance != "null")
            {
                FilterSubquery += string.Format(" and cus.Maintenance = '{0}'", filter.maintenance);
            }
            if (!string.IsNullOrWhiteSpace(filter.isalarmcom) && filter.isalarmcom != "-1" && filter.isalarmcom != "null")
            {
                FilterSubquery += string.Format(" and cus.IsAlarmCom = '{0}'", filter.isalarmcom);
            }
            if (!string.IsNullOrWhiteSpace(filter.isagreement) && filter.isagreement != "-1" && filter.isagreement != "null")
            {
                FilterSubquery += string.Format(" and cus.IsAgreement = '{0}'", filter.isagreement);
            }
            if (!string.IsNullOrWhiteSpace(filter.isfireaccount) && filter.isfireaccount != "-1" && filter.isfireaccount != "null")
            {
                FilterSubquery += string.Format(" and cus.IsFireAccount = '{0}'", filter.isfireaccount);
            }
            if (!string.IsNullOrWhiteSpace(filter.branchid) && filter.branchid != "-1" && filter.branchid != "null")
            {
                FilterSubquery += string.Format(" and cus.BranchId = '{0}'", filter.branchid);
            }
            if (!string.IsNullOrWhiteSpace(filter.MapscoNo))
            {
                FilterSubquery += string.Format(" and cus.MapscoNo like '%{0}%'", filter.MapscoNo);
            }
            #endregion
            try
            {
                sqlQuery = string.Format(sqlQuery,
                    filter.CompanyId, //0
                    filterColumntext, //1
                    filtertext, //2
                    filterByUserName,//3 
                    filterByLeadSource, //4
                    filterByDate, //5
                    filterbyUser,//6
                    OrderBySql, //7
                    StatusQuery,//8
                    BranchQuery,//9
                    leadestimatequery,//10 
                    joinquery, //11
                    thismonthquery, //12
                    NamingSql,//13
                    joinquery2,//14
                    leadBookingquery,//15
                    FilterSubquery//16
                    );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", filter.PageNo));
                    AddParameter(cmd, pInt32("pagesize", filter.PageSize));
                    if (!string.IsNullOrWhiteSpace(filter.SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(filter.SearchText.Trim())));
                    //@SearchText
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        public DataSet GetLeadListByFilterNew(CustomerFilter filter)
        {
            #region Base SQL
            string sqlQuery = @"declare @pagestart int
                                declare @pageend int

                                declare @pageno int
                                declare @pagesize int

								set @pageno = {19}
								set @pagesize = {18}

                                set @pagestart=(@pageno-1)* @pagesize 
                                set @pageend = @pagesize
                                
                                select cus.Id,cus.CustomerId,cus.JoinDate, cc.ConvertionDate {17} INTO #CustomerIdData from Customer cus
								 left join CustomerCompany cc
                                  on cus.CustomerId = cc.CustomerId
								WHERE cc.CompanyId = '{0}'
                                AND cc.IsLead = 1 
                                AND cus.IsActive =1
                                and cus.JoinDate is not null

                                -- Dynamic Where Conditions
                                {2} {3} {4} {5} {6} {8} {9} {10} {12} {15} {16}
                                --Where Condition Ends
                                --Order By SQL
                                {7}
                                --Order By SQL Ends
                                 
                               

								SELECT TOP (@pagesize)
                                cus.Id ,
                                ISNULL(lkleadsource.DisplayText,'') as LeadSourceVal,
                                cus.PrimaryPhone ,
								cus.[State] ,
								cus.City ,
								cus.LeadSource ,
                                {13} as DisplayName,
                                 cus.CustomerId, 
                                cus.IsActive,
                                ISNULL( lkstatus.DisplayText, '') as Status ,
								cus.JoinDate, 
                                emp.FirstName + ' ' + emp.LastName as EMPNUM,
                                '' as InstallType, --cussinfo.InstallType,
                                cus.CustomerNo,
                                cus.Title,
                                cus.FirstName ,
                                cus.LastName ,
                                cus.MiddleName ,
                                cus.BusinessName ,
                                cus.SSN,
		                        cus.Street,
                                cus.City ,
		                        cus.[State] ,
		                        cus.ZipCode, 
		                        cus.[Address],
		                        cus.EmailAddress,
		                        cus.PrimaryPhone,
                                cus.SecondaryPhone,
								cus.DateofBirth,
								cus.LeadSource,
								cus.LastUpdatedDate,
								cus.LastUpdatedBy,
                                cus.StreetType,
								cus.Appartment,
                                cus.CellNo,
                                cus.Fax,
                                cus.CallingTime,
                                cus.Address2,
                                cus.Country,
                                cus.StreetPrevious,
                                cus.CityPrevious,
                                cus.StatePrevious,
                                cus.ZipCodePrevious,
                                cus.CountryPrevious,
                                cus.AccountNo,
                                cus.IsAlarmCom,
                                cus.CreditScore,
                                cus.CreditScoreValue,
                                cus.ContractTeam,
                                cus.FundingCompany,
                                cus.MonthlyMonitoringFee,
                                cus.CellularBackup,
                                cus.CustomerFunded,
                                cus.Maintenance,
                                cus.Note,
                                cus.SalesDate,
                                cus.FollowUpDate,
                                cus.InstallDate,
                                cus.CutInDate,
                                cus.Installer,
                                cus.Soldby,
                                cus.FundingDate,
                                cus.ReminderDate,
                                cus.QA1,
                                cus.QA1Date,
                                cus.QA2,
                                cus.QA2Date,
                                cus.BillAmount,
                                cus.PaymentMethod,
                                cus.BillCycle,
                                cus.BillDay,
                                cus.BillNotes,
                                cus.BillTax,
                                cus.BillOutStanding,
                                cus.ServiceDate,
                                cus.Area,
                                cus.Latlng,
                                cus.SecondCustomerNo,
                                cus.AdditionalCustomerNo,
                                cus.IsTechCallPassed,
                                cus.IsDirect,
                                cus.AuthorizeRefId,
                                cus.AuthorizeCusProfileId,
                                cus.AuthorizeCusPaymentProfileId,
                                cus.AuthorizeDescription,
                                cus.IsRequiredCsvSync,
                                cus.Passcode,
                                cus.ActivationFee,
                                cus.FirstBilling,
                                cus.ActivationFeePaymentMethod,
                                cus.LastGeneratedInvoice,
                                cus.Singature,
                                cus.CrossStreet,
                                cus.DBA,
                                cus.AlarmRefId,
                                cus.TransunionRefId,
                                cus.MonitronicsRefId,
                                cus.CentralStationRefId,
                                cus.CmsRefId,
                                cus.PreferedEmail,
                                cus.PreferedSms,
                                cus.IsAgreement,
                                cus.IsFireAccount,
                                cus.CreatedByUid,
                                cus.CreatedDate,
                                cus.LastUpdatedByUid,
                                cus.BusinessAccountType,
                                cus.PhoneType,
                                cus.Carrier,
                                cus.ReferringCustomer,
                                cus.EsistingPanel,
                                cus.[Ownership],
                                cus.PurchasePrice,
                                cus.ContractValue,
                                cus.ChildOf,
                                cus.EmailVerified,
                                cus.HomeVerified,
                                cus.County,
                                cus.CustomerToken,
                                cus.PaymentToken,
                                cus.ScheduleToken,
                                cus.EstCloseDate,
                                cus.ProjectWalkDate,
                                cus.BranchId,
                                cus.SubscriptionStatus,
                                cus.AnnualRevenue,
                                cus.Website,
                                cus.Market,
                                cus.Passengers,
                                cus.Budget,
                                cus.SmartSetUpStep,
                                cus.CustomerAccountType,
                                cus.IsPrimaryPhoneVerified,
                                cus.IsSecondaryPhoneVerified,
                                cus.IsCellNoVerified,
								cus.[Type], 
                                cus.DoNotCall,
                                cus.LeadSourceType,
                                cus.PreferredContactMethod,
                                cus.MovingDate,
                                cus.ContactedPerviously,
                                cus.InstalledStatus,
                                cus.AcquiredFrom,
                                cus.FollowUpDate,
                                cus.BuyoutAmountByADS,
                                cus.BuyoutAmountBySalesRep,
                                cus.FinancedTerm,
                                cus.FinancedAmount,
                                cus.Levels,
                                cus.SoldAmount,
                                cus.AgreementEmail,
                                cus.AgreementPhoneNo,
                                cus.TaxExemption,
                                cus.AppoinmentSet,
                                cus.PlatformId,
                                cus.MapscoNo,
                                cb.Name +'>'+cb.Region+'>'+cb.Division as BranchName
	                            
                                ,_AppoinmentSetBy.FirstName +' '+ _AppoinmentSetBy.LastName as AppoinmentSetByVal

								from Customer cus
                                left join CompanyBranch cb on cb.Id=cus.BranchId  
                                Left JOin Employee emp 
                                on  convert(nvarchar(50), emp.UserId) = cus.Soldby
								--or convert(nvarchar(50), emp.UserId) = cus.QA1
								--or convert(nvarchar(50), emp.UserId) = cus.QA2
								--or convert(nvarchar(50), emp.UserId) = cus.Installer
                                 
                                left join [Lookup] lkstatus
                                  on cus.Status = lkstatus.DataValue 
								  and lkstatus.DataKey ='LeadStatus'
                                --left join CustomerSystemInfo cussinfo on cussinfo.CustomerId=cus.CustomerId
                                
                                 left join [Lookup] lkleadsource on lkleadsource.DataKey = 'LeadSource' and lkleadsource.DataValue = cus.LeadSource
                                {11}
                                {14} 
                                left join [Lookup] lkinstalledstatus on lkinstalledstatus.DataValue = iif(cus.InstalledStatus != '-1', cus.InstalledStatus, '') and lkinstalledstatus.DataKey = 'InstalledStatus'
                                left join CustomerExtended _extend on _extend.CustomerId = cus.CustomerId
                                Left Join Employee _AppoinmentSetBy on _AppoinmentSetBy.UserId=_extend.AppoinmentSetBy
                                where cus.Id in (select Id from #CustomerIdData)
                                AND cus.Id NOT IN( Select TOP (@pagestart)  Id from #CustomerIdData  {7}) 
                                {7}
 
                                (select count(Id) [TotalCount]
                                from #CustomerIdData)

                                ----LeadCount
                                --(select COUNT(cus.Id) LeadCount from #CustomerIdData cus 
                                --left join CustomerCompany cc
                                --on cus.CustomerId = cc.CustomerId
                                --)
                                --LeadCount

                                ----EstimateCount
								--(select Count(id) as EstimateCount from Invoice 
								--	where Customerid in(select Customerid from #CustomerIdData)
								--	and  IsEstimate = 1
								--	and [Status] != 'Init'
								--)

								--(select COUNT(inv.Id) as EstimateCount
								----	,SUM(inv.TotalAmount) as LeadEstimateAmount 
							    ---	from #CustomerIdData cus
								---left join Invoice inv on cus.CustomerId = inv.CustomerId
								--left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
								--where inv.IsEstimate = 1
								--and inv.Status != 'Init')
								----EstimateCount

                                --LeadThisMonthCount
								--(select COUNT(cus.Id) LeadThisMonthCount from #CustomerIdData cus  
								--where MONTH(cus.JoinDate) = MONTH(GETDATE())
								--AND YEAR(cus.JoinDate) = YEAR(GETDATE()))
								--LeadThisMonthCount

                                --LeadLastMonthCount
								--(select COUNT(Id) LeadLastMonthCount from #CustomerIdData 
								--where ConvertionDate is not null
								--and DATEPART(m, ConvertionDate) = DATEPART(m, DATEADD(m, -1, getdate()))
								--AND DATEPART(yyyy, ConvertionDate) = DATEPART(yyyy, DATEADD(m, -1, getdate()))
								--)
								--LeadLastMonthCount
                                 
                                --LeadBooking Part
                                --(select COUNT(Bking.Id) as BookingCount,
                                --SUM(Bking.TotalAmount) LeadBookingAmount 
                                --from #CustomerIdData cus
								--left join Booking Bking on cus.CustomerId = Bking.CustomerId)

                                --(select  from #CustomerIdData cus
								--left join Booking Bking on cus.CustomerId = Bking.CustomerId
								--left join CustomerCompany cc on cc.CustomerId = cus.CustomerId)
                                --LeadBooking Part

                                Drop Table #CustomerIdData";
            #endregion

            string filtertext = "";
            string filterColumntext = "";
            string filterByUserName = "";
            string filterByLeadSource = "";
            string filterByDate = "";
            string filterbyUser = "";
            string OrderBySql = "";
            string OrderByCols = "";
            string StatusQuery = "";
            string BranchQuery = "";
            string leadestimatequery = "";
            string leadBookingquery = "";
            string joinquery = "";
            string joinquery2 = "";
            string thismonthquery = "";
            string FilterSubquery = "";

            #region Filters
            #region Search Text
            if (!string.IsNullOrWhiteSpace(filter.SearchText) && filter.SearchText != "undefined")
            {
                bool isNumeric = Regex.IsMatch(filter.SearchText, @"\d");
                //if (isNumeric && filter.SearchText.Length == 10)
                //{
                //    filter.SearchText = string.Format("{0:0##-###-####}", Convert.ToInt64(filter.SearchText)).TrimStart('-');
                //}
                if (isNumeric && filter.SearchText.Length == 10)
                {
                    //long SSN = 0;
                    //if (long.TryParse(filter.SearchText, out SSN))
                    //{
                    //    filter.SearchText = string.Format("{0:0##-###-####}", SSN).TrimStart('-');
                    //}
                }

                filterColumntext = @" , isNULL(cus.FirstName, '') +
                                    isNULL(cus.LastName,'') + 
                                    isNULL(cus.MiddleName,'') + 
                                    isNULL(cus.BusinessName,'') + 
                                    isNULL(cus.Address,'') +  
                                    isNULL(cus.PrimaryPhone,'') + 
                                    isNULL(cus.SecondaryPhone,'') + 
                                    isNULL(cus.LeadSource,'') +
                                    isNULL(cus.LastUpdatedBy,'') FilterText  ";
                filtertext = string.Format("and ( cus.Id like'{0}%' or cus.FirstName like '{0}%' or cus.LastName like '{0}%' or cus.BusinessName like '{0}%' or cus.Address like '{0}%' or cus.PrimaryPhone like '{0}%' or cus.SecondaryPhone like '{0}%' or cus.LeadSource like '{0}%' or cus.LastUpdatedBy like '{0}%' or cus.DBA like '{0}%' or cus.FirstName + ' ' + cus.LastName like '{0}%')", filter.SearchText);
            }
            #endregion

            #region Not in use
            //if (filter.EmployeeRole.ToLower().IndexOf("admin") == -1 && filter.UserRole != "Sales Manager")
            //{
            //    filterbyUser = string.Format("AND (cus.Installer='{0}' OR cus.Soldby='{0}' OR cus.QA1='{0}' OR cus.QA2='{0}')", filter.EmployeeId);
            //}
            //if (!string.IsNullOrWhiteSpace(filter.User) && filter.User != "-1")
            //{
            //    filterByUserName = string.Format("AND (cus.Installer='{0}' OR cus.Soldby='{0}' OR cus.QA1='{0}' OR cus.QA2='{0}')", filter.User);
            //}
            //if (!string.IsNullOrWhiteSpace(filter.Source) && filter.Source != "-1")
            //{
            //    if (filter.Source != "undefined")
            //    {
            //        filterByLeadSource = string.Format("AND emp.UserId = '{0}' or cus.Installer='{0}' OR cus.Soldby='{0}' OR cus.QA1='{0}' OR cus.QA2='{0}'", filter.Source);
            //    }
            //}
            //if (filter.Status != "-1" && filter.Status != "undefined")
            //{
            //    StatusQuery = string.Format("and cus.Status = '{0}'", filter.Status);
            //}
            if (filter.isPermit)
            {
                filterByUserName = "";
            }
            else
            {
                filterByUserName = string.Format("and (cus.Installer='{0}' or cus.Soldby='{0}' or cus.AccessGivenTo = '{0}')", filter.EmployeeId);
            }
            if (!string.IsNullOrWhiteSpace(filter.Branch)
                && filter.Branch != "-1"
                && filter.Branch != "undefined")
            {
                BranchQuery = string.Format(" and cus.BranchId = '{0}'", filter.Branch);
            }
            #endregion

            #region Join Date Filter
            if (filter.FirstDate != new DateTime() && filter.LastDate != new DateTime())
            {
                var StartDate = filter.FirstDate.SetZeroHour().ClientToUTCTime();
                var EndDate = filter.LastDate.SetMaxHour().ClientToUTCTime();
                filterByDate = string.Format("AND cus.JoinDate between '{0}' and '{1}'", StartDate, EndDate);
            }
            #endregion

            #region FollowUpDate
            if (!string.IsNullOrWhiteSpace(filter.FollowUpDate) && filter.FollowUpDate != "undefined")
            {
                try
                {
                    DateTime date = Convert.ToDateTime(filter.FollowUpDate);
                    filterByDate += string.Format(" AND cus.FollowUpDate between '{0}' and '{1}'", date.ToString("MM-dd-yyyy"), date.AddDays(1).ToString("MM-dd-yyyy"));
                }
                catch (Exception) { }
            }
            #endregion

            #region Naming Condition
            string NamingSql = "''";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            if (gs != null)
            {
                NamingSql = gs.Value;
            }
            #endregion

            #region Lead sorting / Ordering
            if (!string.IsNullOrWhiteSpace(filter.SortBy) && filter.SortBy != "-1")
            {
                if (filter.SortBy == "ascending/name")
                {
                    OrderByCols = " ," + NamingSql + " as DisplayName";
                    OrderBySql = "ORDER BY DisplayName asc";
                }
                else if (filter.SortBy == "descending/name")
                {
                    OrderByCols = " ," + NamingSql + " as DisplayName";
                    OrderBySql = "ORDER BY DisplayName desc";
                }
                else if (filter.SortBy == "ascending/phoneno")
                {
                    OrderByCols = " ,cus.PrimaryPhone";
                    OrderBySql = "ORDER BY PrimaryPhone asc";
                }
                else if (filter.SortBy == "descending/phoneno")
                {
                    OrderByCols = " ,cus.PrimaryPhone";
                    OrderBySql = "ORDER BY PrimaryPhone desc";
                }
                else if (filter.SortBy == "ascending/location")
                {
                    OrderByCols = " ,cus.State ,cus.City";
                    OrderBySql = "ORDER BY State asc,City asc";
                }
                else if (filter.SortBy == "descending/location")
                {
                    OrderByCols = " ,cus.State ,cus.City";
                    OrderBySql = "ORDER BY State desc,City Desc";
                }
                else if (filter.SortBy == "ascending/createdon")
                {
                    OrderByCols = " ,cus.JoinDate";
                    OrderBySql = "ORDER BY JoinDate asc";
                }
                else if (filter.SortBy == "descending/createdon")
                {
                    OrderByCols = " ,cus.JoinDate";
                    OrderBySql = "ORDER BY JoinDate desc";
                }
                else if (filter.SortBy == "ascending/leadsource")
                {
                    OrderByCols = " ,cus.LeadSource";
                    OrderBySql = "ORDER BY LeadSource asc";
                }
                else if (filter.SortBy == "descending/leadsource")
                {
                    OrderByCols = " ,cus.LeadSource";
                    OrderBySql = "ORDER BY LeadSource desc";
                }
                else if (filter.SortBy == "ascending/status")
                {
                    OrderByCols = " ,cus.CustomerStatus";
                    OrderBySql = "ORDER BY CustomerStatus asc";
                }
                else if (filter.SortBy == "descending/status")
                {
                    OrderByCols = " ,cus.CustomerStatus";
                    OrderBySql = "ORDER BY CustomerStatus desc";
                }
                else
                {
                    OrderBySql = string.Concat("ORDER BY Id desc");
                }

            }
            else
            {
                OrderBySql = string.Concat("ORDER BY Id desc");
            }
            #endregion

            #region Others Filter
            if (filter.LeadEstimate == true)
            {
                joinquery = string.Format("left join Invoice inv on cus.CustomerId = inv.CustomerId");
                leadestimatequery = string.Format("and inv.IsEstimate = 1 and inv.Status != 'Init'");
            }
            if (filter.leadthismonth == true)
            {
                thismonthquery = string.Format("and MONTH(cus.JoinDate) = MONTH(GETDATE()) AND YEAR(cus.JoinDate) = YEAR(GETDATE())");
            }
            if (filter.leadlastmonth == true)
            {
                thismonthquery = string.Format("and DATEPART(m, cus.JoinDate) = DATEPART(m, DATEADD(m, -1, getdate())) AND DATEPART(yyyy, cus.JoinDate) = DATEPART(yyyy, DATEADD(m, -1, getdate()))");
            }
            if (filter.LeadBooking == true)
            {
                joinquery2 = string.Format("left join Booking Bking on cus.CustomerId = Bking.CustomerId");
                leadBookingquery = string.Format("and Bking.BillingAddress is not null");
            }
            #endregion


            #region Filter Query For Customer and Lead
            if (!string.IsNullOrWhiteSpace(filter.displayname))
            {
                FilterSubquery += string.Format(@" and (cus.FirstName like '%{0}%' 
                or cus.LastName like '%{0}%' 
                or cus.FirstName + ' ' + cus.LastName like '%{0}%' 
                or cus.BusinessName like '%{0}%' 
                or cus.DBA like '%{0}%') ", filter.displayname);
            }
            if (!string.IsNullOrWhiteSpace(filter.customerno))
            {
                FilterSubquery += string.Format(" and cus.CustomerNo = '{0}'", filter.customerno);
            }
            if (!string.IsNullOrWhiteSpace(filter.customerintid))
            {
                FilterSubquery += string.Format(" and cus.Id = '{0}'", filter.customerintid);
            }
            if (!string.IsNullOrWhiteSpace(filter.title))
            {
                FilterSubquery += string.Format(" and cus.Title like '%{0}%'", filter.title);
            }
            if (!string.IsNullOrWhiteSpace(filter.firstname))
            {
                FilterSubquery += string.Format(" and cus.FirstName like '%{0}%'", filter.firstname);
            }
            if (!string.IsNullOrWhiteSpace(filter.lastname))
            {
                FilterSubquery += string.Format(" and cus.LastName like '%{0}%'", filter.lastname);
            }
            if (!string.IsNullOrWhiteSpace(filter.childof) && filter.childof != "null" && filter.childof != "00000000-0000-0000-0000-000000000000")
            {
                FilterSubquery += string.Format(" and cus.ChildOf = '{0}'", filter.childof);
            }
            if (!string.IsNullOrWhiteSpace(filter.passcode))
            {
                FilterSubquery += string.Format(" and cus.Passcode = '{0}'", filter.passcode);
            }
            if (!string.IsNullOrWhiteSpace(filter.customertype) && filter.customertype != "-1" && filter.customertype != "null")
            {
                FilterSubquery += string.Format(" and cus.[Type] = '{0}'", filter.customertype);
            }
            if (!string.IsNullOrWhiteSpace(filter.businessname))
            {
                FilterSubquery += string.Format(" and cus.BusinessName like '%{0}%'", filter.businessname);
            }
            if (!string.IsNullOrWhiteSpace(filter.dba))
            {
                FilterSubquery += string.Format(" and cus.DBA like '%{0}%'", filter.dba);
            }
            if (!string.IsNullOrWhiteSpace(filter.street))
            {
                FilterSubquery += string.Format(" and cus.Street like '%{0}%'", filter.street);
            }
            if (!string.IsNullOrWhiteSpace(filter.zipcode))
            {
                FilterSubquery += string.Format(" and cus.ZipCode like '%{0}%'", filter.zipcode);
            }
            if (!string.IsNullOrWhiteSpace(filter.city))
            {
                FilterSubquery += string.Format(" and cus.City like '%{0}%'", filter.city);
            }
            if (!string.IsNullOrWhiteSpace(filter.state))
            {
                FilterSubquery += string.Format(" and cus.State like '%{0}%'", filter.state);
            }
            if (!string.IsNullOrWhiteSpace(filter.county))
            {
                FilterSubquery += string.Format(" and cus.County like '%{0}%'", filter.county);
            }
            if (!string.IsNullOrWhiteSpace(filter.country))
            {
                FilterSubquery += string.Format(" and cus.Country like '%{0}%'", filter.country);
            }
            if (!string.IsNullOrWhiteSpace(filter.homeowner))
            {
                FilterSubquery += string.Format(" and cus.HomeOwner like '%{0}%'", filter.homeowner);
            }
            if (!string.IsNullOrWhiteSpace(filter.leadsource) && filter.leadsource != "-1" && filter.leadsource != "null")
            {
                FilterSubquery += string.Format(" and cus.LeadSource like '%{0}%'", filter.leadsource);
            }
            if (!string.IsNullOrWhiteSpace(filter.leadsourcetype) && filter.leadsourcetype != "-1" && filter.leadsourcetype != "null")
            {
                FilterSubquery += string.Format(" and cus.LeadSourceType like '%{0}%'", filter.leadsourcetype);
            }
            if (!string.IsNullOrWhiteSpace(filter.referringcustomer) && filter.referringcustomer != "00000000-0000-0000-0000-000000000000" && filter.referringcustomer != "null")
            {
                FilterSubquery += string.Format(" and cus.ReferringCustomer = '{0}'", filter.referringcustomer);
            }
            if (!string.IsNullOrWhiteSpace(filter.emailaddress))
            {
                FilterSubquery += string.Format(" and cus.EmailAddress like '%{0}%'", filter.emailaddress);
            }
            if (!string.IsNullOrWhiteSpace(filter.primaryphone))
            {
                FilterSubquery += string.Format(" and cus.PrimaryPhone like '%{0}%'", filter.primaryphone);
            }
            if (!string.IsNullOrWhiteSpace(filter.cellno))
            {
                FilterSubquery += string.Format(" and cus.CellNo like '%{0}%'", filter.cellno);
            }
            if (!string.IsNullOrWhiteSpace(filter.secondaryphone))
            {
                FilterSubquery += string.Format(" and cus.SecondaryPhone like '%{0}%'", filter.secondaryphone);
            }
            if (!string.IsNullOrWhiteSpace(filter.carrier) && filter.carrier != "-1" && filter.carrier != "null")
            {
                FilterSubquery += string.Format(" and cus.Carrier = '{0}'", filter.carrier);
            }
            if (!string.IsNullOrWhiteSpace(filter.phonetype) && filter.phonetype != "-1" && filter.phonetype != "null")
            {
                FilterSubquery += string.Format(" and cus.PhoneType = '{0}'", filter.phonetype);
            }
            if (!string.IsNullOrWhiteSpace(filter.besttimetocall) && filter.besttimetocall != "-1" && filter.besttimetocall != "null")
            {
                FilterSubquery += string.Format(" and cus.BestTimeToCall = '{0}'", filter.besttimetocall);
            }
            if (!string.IsNullOrWhiteSpace(filter.preferredcontactmethod) && filter.preferredcontactmethod != "-1" && filter.preferredcontactmethod != "null")
            {
                FilterSubquery += string.Format(" and cus.PreferredContactMethod = '{0}'", filter.preferredcontactmethod);
            }
            if (!string.IsNullOrWhiteSpace(filter.dateofbirth))
            {
                var dob = Convert.ToDateTime(filter.dateofbirth);
                if (dob != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.DateofBirth = '{0}'", dob.ToString("yyyy-MM-dd 00:00:00.000"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.ssn))
            {
                FilterSubquery += string.Format(" and cus.SSN like '%{0}%'", filter.ssn);
            }
            if (!string.IsNullOrWhiteSpace(filter.callingtime) && filter.callingtime != "-1" && filter.callingtime != "null")
            {
                FilterSubquery += string.Format(" and cus.CallingTime = '{0}'", filter.callingtime);
            }
            if (!string.IsNullOrWhiteSpace(filter.address))
            {
                FilterSubquery += string.Format(" and cus.Address like '%{0}%'", filter.address);
            }
            if (!string.IsNullOrWhiteSpace(filter.address2))
            {
                FilterSubquery += string.Format(" and cus.Address2 like '%{0}%'", filter.address2);
            }
            if (!string.IsNullOrWhiteSpace(filter.streetprevious))
            {
                FilterSubquery += string.Format(" and cus.StreetPrevious like '%{0}%'", filter.streetprevious);
            }
            if (!string.IsNullOrWhiteSpace(filter.cityprevious))
            {
                FilterSubquery += string.Format(" and cus.CityPrevious like '%{0}%'", filter.cityprevious);
            }
            if (!string.IsNullOrWhiteSpace(filter.stateprevious))
            {
                FilterSubquery += string.Format(" and cus.StatePrevious like '%{0}%'", filter.stateprevious);
            }
            if (!string.IsNullOrWhiteSpace(filter.zipcodeprevious))
            {
                FilterSubquery += string.Format(" and cus.ZipCodePrevious like '%{0}%'", filter.zipcodeprevious);
            }
            if (!string.IsNullOrWhiteSpace(filter.countryprevious))
            {
                FilterSubquery += string.Format(" and cus.CountryPrevious like '%{0}%'", filter.countryprevious);
            }
            if (!string.IsNullOrWhiteSpace(filter.accountno))
            {
                FilterSubquery += string.Format(" and cus.AccountNo like '%{0}%'", filter.accountno);
            }
            if (!string.IsNullOrWhiteSpace(filter.creditscore) && filter.creditscore != "-1" && filter.creditscore != "null")
            {
                FilterSubquery += string.Format(" and cus.CreditScore = '{0}'", filter.creditscore);
            }
            if (!string.IsNullOrWhiteSpace(filter.creditscorevalue))
            {
                FilterSubquery += string.Format(" and cus.CreditScoreValue like '%{0}%'", filter.creditscorevalue);
            }
            if (!string.IsNullOrWhiteSpace(filter.contractteam) && filter.contractteam != "-1" && filter.contractteam != "null")
            {
                FilterSubquery += string.Format(" and cus.ContractTeam = '{0}'", filter.contractteam);
            }
            if (!string.IsNullOrWhiteSpace(filter.fundingcompany) && filter.fundingcompany != "-1" && filter.fundingcompany != "null")
            {
                FilterSubquery += string.Format(" and cus.FundingCompany = '{0}'", filter.fundingcompany);
            }
            if (!string.IsNullOrWhiteSpace(filter.joindate))
            {
                var join = Convert.ToDateTime(filter.joindate);
                if (join != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.JoinDate between '{0}' and '{1}'", join.ToString("yyyy-MM-dd 00:00:00.000"), join.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.note))
            {
                FilterSubquery += string.Format(" and cus.Note like '%{0}%'", filter.note);
            }
            if (!string.IsNullOrWhiteSpace(filter.salesdatecus))
            {
                var date = Convert.ToDateTime(filter.salesdatecus);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.SalesDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.installdate))
            {
                var date = Convert.ToDateTime(filter.installdate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.InstallDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.cutindate))
            {
                var date = Convert.ToDateTime(filter.cutindate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.CutInDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.installer) && filter.installer != "-1" && filter.installer != "null")
            {
                FilterSubquery += string.Format(" and cus.Installer = '{0}'", filter.installer);
            }
            if (!string.IsNullOrWhiteSpace(filter.fundingdate))
            {
                var date = Convert.ToDateTime(filter.fundingdate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.FundingDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.middlename))
            {
                FilterSubquery += string.Format(" and cus.MiddleName like '%{0}%'", filter.middlename);
            }
            if (!string.IsNullOrWhiteSpace(filter.reminderdate))
            {
                var date = Convert.ToDateTime(filter.reminderdate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.ReminderDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.qa1) && filter.qa1 != "-1" && filter.qa1 != "null")
            {
                FilterSubquery += string.Format(" and cus.QA1 = '{0}'", filter.qa1);
            }
            if (!string.IsNullOrWhiteSpace(filter.qa1date))
            {
                var date = Convert.ToDateTime(filter.qa1date);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.QA1Date between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.qa2) && filter.qa2 != "-1" && filter.qa2 != "null")
            {
                FilterSubquery += string.Format(" and cus.QA2 = '{0}'", filter.qa2);
            }
            if (!string.IsNullOrWhiteSpace(filter.qa2date))
            {
                var date = Convert.ToDateTime(filter.qa2date);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.QA2Date between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.billamount))
            {
                FilterSubquery += string.Format(" and cus.BillAmount like '%{0}%'", filter.billamount);
            }
            if (!string.IsNullOrWhiteSpace(filter.paymentmethodcus) && filter.paymentmethodcus != "-1" && filter.paymentmethodcus != "null")
            {
                FilterSubquery += string.Format(" and cus.PaymentMethod = '{0}'", filter.paymentmethodcus);
            }
            if (!string.IsNullOrWhiteSpace(filter.billcycle) && filter.billcycle != "-1" && filter.billcycle != "null")
            {
                FilterSubquery += string.Format(" and cus.BillCycle = '{0}'", filter.billcycle);
            }
            if (!string.IsNullOrWhiteSpace(filter.billday) && filter.billday != "-1" && filter.billday != "null")
            {
                FilterSubquery += string.Format(" and cus.BillDay = '{0}'", filter.billday);
            }
            if (!string.IsNullOrWhiteSpace(filter.billnotes))
            {
                FilterSubquery += string.Format(" and cus.BillNotes like '%{0}%'", filter.billnotes);
            }
            if (!string.IsNullOrWhiteSpace(filter.billtax) && filter.billtax != "-1" && filter.billtax != "null")
            {
                FilterSubquery += string.Format(" and cus.BillTax = '{0}'", filter.billtax);
            }
            if (!string.IsNullOrWhiteSpace(filter.billoutstanding))
            {
                FilterSubquery += string.Format(" and cus.BillOutStanding like '%{0}%'", filter.billoutstanding);
            }
            if (!string.IsNullOrWhiteSpace(filter.servicedate))
            {
                var date = Convert.ToDateTime(filter.servicedate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format("and cus.ServiceDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.area))
            {
                FilterSubquery += string.Format("and cus.Area like '%{0}%'", filter.area);
            }
            if (!string.IsNullOrWhiteSpace(filter.streettype) && filter.streettype != "-1" && filter.streettype != "null")
            {
                FilterSubquery += string.Format(" and cus.StreetType = '{0}'", filter.streettype);
            }
            if (!string.IsNullOrWhiteSpace(filter.apartment))
            {
                FilterSubquery += string.Format(" and cus.Appartment like '%{0}%'", filter.apartment);
            }
            if (!string.IsNullOrWhiteSpace(filter.secondcustomerno))
            {
                FilterSubquery += string.Format(" and cus.SecondCustomerNo like '%{0}%'", filter.secondcustomerno);
            }
            if (!string.IsNullOrWhiteSpace(filter.additionalcustomerno))
            {
                FilterSubquery += string.Format(" and cus.AdditionalCustomerNo like '%{0}%'", filter.additionalcustomerno);
            }
            if (!string.IsNullOrWhiteSpace(filter.activationfee))
            {
                FilterSubquery += string.Format(" and cus.ActivationFee like '%{0}%'", filter.activationfee);
            }
            if (!string.IsNullOrWhiteSpace(filter.firstbilling))
            {
                var date = Convert.ToDateTime(filter.firstbilling);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.FirstBilling between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.isactivestatus) && filter.isactivestatus != "-1" && filter.isactivestatus != "null")
            {
                FilterSubquery += string.Format(" and cus.IsActive = '{0}'", filter.isactivestatus);
            }
            if (!string.IsNullOrWhiteSpace(filter.Status) && filter.Status != "-1" && filter.Status != "null" && filter.Status != "undefined")
            {
                FilterSubquery += string.Format(" and cus.Status = '{0}'", filter.Status);
            }
            if (!string.IsNullOrWhiteSpace(filter.mmr))
            {
                FilterSubquery += string.Format(" and cus.MonthlyMonitoringFee like '%{0}%'", filter.mmr);
            }
            if (!string.IsNullOrWhiteSpace(filter.crossstreet))
            {
                FilterSubquery += string.Format(" and cus.CrossStreet like '%{0}%'", filter.crossstreet);
            }
            if (!string.IsNullOrWhiteSpace(filter.businessaccounttype) && filter.businessaccounttype != "-1" && filter.businessaccounttype != "null")
            {
                FilterSubquery += string.Format(" and cus.BusinessAccountType = '{0}'", filter.businessaccounttype);
            }
            if (!string.IsNullOrWhiteSpace(filter.esistingpanel) && filter.esistingpanel != "-1" && filter.esistingpanel != "null")
            {
                FilterSubquery += string.Format(" and cus.EsistingPanel = '{0}'", filter.esistingpanel);
            }
            if (!string.IsNullOrWhiteSpace(filter.estclosedate))
            {
                var date = Convert.ToDateTime(filter.estclosedate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.EstCloseDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.projectwalkdate))
            {
                var date = Convert.ToDateTime(filter.projectwalkdate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.ProjectWalkDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.annualrevenue))
            {
                FilterSubquery += string.Format(" and cus.AnnualRevenue like '%{0}%'", filter.annualrevenue);
            }
            if (!string.IsNullOrWhiteSpace(filter.website))
            {
                FilterSubquery += string.Format(" and cus.Website like '%{0}%'", filter.website);
            }
            if (!string.IsNullOrWhiteSpace(filter.market) && filter.market != "-1" && filter.market != "null")
            {
                FilterSubquery += string.Format(" and cus.Market = '{0}'", filter.market);
            }
            if (!string.IsNullOrWhiteSpace(filter.passengers))
            {
                FilterSubquery += string.Format(" and cus.Passengers like '%{0}%'", filter.passengers);
            }
            if (!string.IsNullOrWhiteSpace(filter.budget))
            {
                FilterSubquery += string.Format(" and cus.Budget like '%{0}%'", filter.budget);
            }
            if (!string.IsNullOrWhiteSpace(filter.customeraccounttype) && filter.customeraccounttype != "-1" && filter.customeraccounttype != "null")
            {
                FilterSubquery += string.Format(" and cus.CustomerAccountType = '{0}'", filter.customeraccounttype);
            }
            if (!string.IsNullOrWhiteSpace(filter.csprovider) && filter.csprovider != "-1" && filter.csprovider != "null")
            {
                FilterSubquery += string.Format(" and cus.CSProvider = '{0}'", filter.csprovider);
            }
            if (!string.IsNullOrWhiteSpace(filter.ownership) && filter.ownership != "-1" && filter.ownership != "null")
            {
                FilterSubquery += string.Format(" and cus.Ownership = '{0}'", filter.ownership);
            }
            if (!string.IsNullOrWhiteSpace(filter.purchaseprice))
            {
                FilterSubquery += string.Format(" and cus.PurchasePrice like '%{0}%'", filter.purchaseprice);
            }
            if (!string.IsNullOrWhiteSpace(filter.contractvalue))
            {
                FilterSubquery += string.Format(" and cus.ContractValue like '%{0}%'", filter.contractvalue);
            }
            if (!string.IsNullOrWhiteSpace(filter.accessgivento) && filter.accessgivento != "-1" && filter.accessgivento != "null")
            {
                FilterSubquery += string.Format(" and cus.AccessGivenTo = '{0}'", filter.accessgivento);
            }
            if (!string.IsNullOrWhiteSpace(filter.soldby) && filter.soldby != "-1" && filter.soldby != "null")
            {
                FilterSubquery += string.Format(" and (cus.Soldby = '{0}' or cus.SoldBy2 = '{0}' or cus.SoldBy3 = '{0}')", filter.soldby);
            }
            if (!string.IsNullOrWhiteSpace(filter.saleslocation) && filter.saleslocation != "-1" && filter.saleslocation != "null")
            {
                FilterSubquery += string.Format(" and cus.SalesLocation = '{0}'", filter.saleslocation);
            }
            if (!string.IsNullOrWhiteSpace(filter.leadstatus) && filter.leadstatus != "-1" && filter.leadstatus != "null")
            {
                FilterSubquery += string.Format(" and cus.[Status] = '{0}'", filter.leadstatus);
            }
            if (!string.IsNullOrWhiteSpace(filter.donotcall))
            {
                FilterSubquery += string.Format(" and cus.DoNotCall like '%{0}%'", filter.donotcall);
            }
            if (!string.IsNullOrWhiteSpace(filter.customerstatus) && filter.customerstatus != "-1" && filter.customerstatus != "null")
            {
                FilterSubquery += string.Format(" and cus.CustomerStatus = '{0}'", filter.customerstatus);
            }
            if (!string.IsNullOrWhiteSpace(filter.duplicatecustomer) && filter.duplicatecustomer != "null" && filter.duplicatecustomer != "00000000-0000-0000-0000-000000000000")
            {
                FilterSubquery += string.Format(" and cus.DuplicateCustomer = '{0}'", filter.duplicatecustomer);
            }
            if (!string.IsNullOrWhiteSpace(filter.movingdate))
            {
                var date = Convert.ToDateTime(filter.movingdate);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.MovingDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.contractedpreviously) && filter.contractedpreviously != "-1" && filter.contractedpreviously != "null")
            {
                FilterSubquery += string.Format(" and cus.ContractedPreviously = '{0}'", filter.contractedpreviously);
            }
            if (!string.IsNullOrWhiteSpace(filter.installedstatus) && filter.installedstatus != "-1" && filter.installedstatus != "null")
            {
                FilterSubquery += string.Format(" and cus.InstalledStatus = '{0}'", filter.installedstatus);
            }
            if (!string.IsNullOrWhiteSpace(filter.acquiredform))
            {
                FilterSubquery += string.Format(" and cus.AcquiredFrom like '%{0}%'", filter.acquiredform);
            }
            if (!string.IsNullOrWhiteSpace(filter.followupdatecus))
            {
                var date = Convert.ToDateTime(filter.followupdatecus);
                if (date != new DateTime())
                {
                    FilterSubquery += string.Format(" and cus.FollowUpDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.999"));
                }
            }
            if (!string.IsNullOrWhiteSpace(filter.buyoutamountbyads))
            {
                FilterSubquery += string.Format(" and cus.BuyoutAmountByADS like '%{0}%'", filter.buyoutamountbyads);
            }
            if (!string.IsNullOrWhiteSpace(filter.buyoutamountbysalesrep))
            {
                FilterSubquery += string.Format(" and cus.BuyoutAmountBySalesRep like '%{0}%'", filter.buyoutamountbysalesrep);
            }
            if (!string.IsNullOrWhiteSpace(filter.financedterm))
            {
                FilterSubquery += string.Format(" and cus.FinancedTerm like '%{0}%'", filter.financedterm);
            }
            if (!string.IsNullOrWhiteSpace(filter.financedamount))
            {
                FilterSubquery += string.Format(" and cus.FinancedAmount like '%{0}%'", filter.financedamount);
            }
            if (!string.IsNullOrWhiteSpace(filter.levels))
            {
                FilterSubquery += string.Format(" and cus.Levels like '%{0}%'", filter.levels);
            }
            if (!string.IsNullOrWhiteSpace(filter.soldamount))
            {
                FilterSubquery += string.Format(" and cus.SoldAmount like '%{0}%'", filter.soldamount);
            }
            if (!string.IsNullOrWhiteSpace(filter.taxexemption) && filter.taxexemption != "-1" && filter.taxexemption != "null")
            {
                FilterSubquery += string.Format(" and cus.TaxExemption = '{0}'", filter.taxexemption);
            }
            if (!string.IsNullOrWhiteSpace(filter.appointmentset) && filter.appointmentset != "-1" && filter.appointmentset != "null")
            {
                FilterSubquery += string.Format(" and cus.AppointmentSet = '{0}'", filter.appointmentset);
            }
            if (!string.IsNullOrWhiteSpace(filter.PlatformId))
            {
                FilterSubquery += string.Format(" and cus.PlatformId = '{0}'", filter.PlatformId);
            }
            if (!string.IsNullOrWhiteSpace(filter.customerfunded) && filter.customerfunded != "-1" && filter.customerfunded != "null")
            {
                FilterSubquery += string.Format(" and cus.CustomerFunded = '{0}'", filter.customerfunded);
            }
            if (!string.IsNullOrWhiteSpace(filter.maintenance) && filter.maintenance != "-1" && filter.maintenance != "null")
            {
                FilterSubquery += string.Format(" and cus.Maintenance = '{0}'", filter.maintenance);
            }
            if (!string.IsNullOrWhiteSpace(filter.isalarmcom) && filter.isalarmcom != "-1" && filter.isalarmcom != "null")
            {
                FilterSubquery += string.Format(" and cus.IsAlarmCom = '{0}'", filter.isalarmcom);
            }
            if (!string.IsNullOrWhiteSpace(filter.isagreement) && filter.isagreement != "-1" && filter.isagreement != "null")
            {
                FilterSubquery += string.Format(" and cus.IsAgreement = '{0}'", filter.isagreement);
            }
            if (!string.IsNullOrWhiteSpace(filter.isfireaccount) && filter.isfireaccount != "-1" && filter.isfireaccount != "null")
            {
                FilterSubquery += string.Format(" and cus.IsFireAccount = '{0}'", filter.isfireaccount);
            }
            if (!string.IsNullOrWhiteSpace(filter.branchid) && filter.branchid != "-1" && filter.branchid != "null")
            {
                FilterSubquery += string.Format(" and cus.BranchId = '{0}'", filter.branchid);
            }
            if (!string.IsNullOrWhiteSpace(filter.MapscoNo))
            {
                FilterSubquery += string.Format(" and cus.MapscoNo like '%{0}%'", filter.MapscoNo);
            }
            #endregion
            #endregion

            try
            {
                sqlQuery = string.Format(sqlQuery,
                    filter.CompanyId, //0
                    filterColumntext, //1 //Search Text Data Ready
                    filtertext, //2 //Search Text
                    filterByUserName,//3  //not in use 
                    filterByLeadSource, //4 // not in use
                    filterByDate, //5 // Join Date Filter
                    filterbyUser,//6 // not in use
                    OrderBySql, //7 //Order By SQL
                    StatusQuery,//8//Not In Use
                    BranchQuery,//9 //Not In Use// Filter By Branch Id
                    leadestimatequery,//10 //Estimate Where Condtion 
                    joinquery, //11 //Estimate Join 
                    thismonthquery, //12 //Lead Join This Month/Last Month
                    NamingSql,//13 //Naming condtion Sql
                    joinquery2,//14 // Booking Join
                    leadBookingquery,//15 // Booking Where Condition
                    FilterSubquery,//16 //GridFilter
                    OrderByCols, //17//Column select
                    filter.PageSize,//18
                    filter.PageNo//19
                    );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    //AddParameter(cmd, pInt32("pageno", filter.PageNo));
                    //AddParameter(cmd, pInt32("pagesize", filter.PageSize));
                    //AddParameter(cmd, pNVarChar("SearchText", string.Format("%{0}%", filter.SearchText)));
                    //@SearchText
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        #endregion



        public DataTable GetQA1PercentageValueByCompanyId(Guid companyid)
        {
            string sqlQuery = @"select gs.Value as GlobalSettingPercentage from GlobalSetting gs where gs.CompanyId = '{0}'
and gs.SearchKey='QA1AnswerPercentage'";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyid);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetEmployeeIdByCompanyIdandCustomerId(Guid companyid, int customerid)
        {
            string sqlQuery = @"select isNULL(emp.UserId,'') as InstallerId
                                from customer cus
                                join CustomerCompany cc
                                on cc.CustomerId = cus.CustomerId
                                join Employee emp
                                on CONVERT(nvarchar(50), emp.UserId) = cus.Installer
                                where cus.Id ='{1}'
                                and cc.IsLead = 0
                                and cc.CompanyId = '{0}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyid, customerid);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataSet GetAllFinalCustomerSetupDataByCompanyIdAndCustomerId(Guid companyid, Guid customerid)
        {
            string sqlQuery = @"(select pcus.Id as PackageCustomerId
                                from customer cus
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                left join PackageCustomer pcus on pcus.CustomerId = cus.CustomerId
                                where pcus.Id is not null
                                {2})
                                (select cae.Id as AppointmentEquipmentId
                                from customer cus
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                left join CustomerAppointment ca on ca.CustomerId = cus.CustomerId
                                left join CustomerAppointmentEquipment cae on cae.AppointmentId = ca.AppointmentId
                                where cae.Id is not null
                                {2})
                                (select pic.Id as PaymentCustomerId
                                from customer cus
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                left join PaymentInfoCustomer pic on pic.CustomerId = cus.CustomerId
                                where pic.Id is not null
                                {2})
                                (select ec.Id as EmergencyId
                                from customer cus
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                left join EmergencyContact ec on ec.CustomerId = cus.CustomerId
                                where ec.Id is not null
                                {2})";
            string subquery = "";
            subquery = string.Format("and cc.CompanyId = '{0}' and cus.IsActive = 1 and cus.CustomerId = '{1}'", companyid, customerid);
            try
            {
                sqlQuery = string.Format(sqlQuery, companyid, customerid, subquery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataSet GetAllFinalSmartCustomerSetupDataByCompanyIdAndCustomerId(Guid companyid, Guid customerid)
        {
            string sqlQuery = @"(select pcus.Id as PackageCustomerId
                                from customer cus
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                left join PackageCustomer pcus on pcus.CustomerId = cus.CustomerId
                                where pcus.Id is not null
                                {2})
                                (select 
                                cpe.Id as AppointmentEquipmentId
                                from CustomerPackageEqp cpe
                                where cpe.CompanyId = '{0}' and cpe.CustomerId = '{1}')
                                (select pic.Id as PaymentCustomerId, pic.Payfor as PaymentFor
                                from customer cus
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                left join PaymentInfoCustomer pic on pic.CustomerId = cus.CustomerId
                                where pic.Id is not null
                                {2})
                                (select ec.Id as EmergencyId
                                from customer cus
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                left join EmergencyContact ec on ec.CustomerId = cus.CustomerId
                                where ec.Id is not null
                                {2})";
            string subquery = "";
            subquery = string.Format("and cc.CompanyId = '{0}' and cus.IsActive = 1 and cus.CustomerId = '{1}'", companyid, customerid);
            try
            {
                sqlQuery = string.Format(sqlQuery, companyid, customerid, subquery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<string> MonthlyMonitoringFeeList()
        {
            string sqlQuery = @"select distinct MonthlyMonitoringFee as mf from Customer order by MonthlyMonitoringFee asc";
            try
            {
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return (from DataRow dr in dsResult.Tables[0].Rows select dr["mf"].ToString()).ToList();

                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public List<ChildCustomer> GetChildCustomerListByCustomerId(Guid customerId)
        {
            string sqlQuery = @"select Id
                                ,[Type] as AccountType
                                ,FirstName + ' '+LastName as CustomerName
                                ,BusinessName as BusinessName
                                from Customer where childof ='{0}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, customerId);

                List<ChildCustomer> list = new List<ChildCustomer>();
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet ds = GetDataSet(cmd);
                    list = (from DataRow dr in ds.Tables[0].Rows
                            select new ChildCustomer()
                            {
                                Id = dr["Id"] != DBNull.Value ? Convert.ToInt32(dr["Id"]) : 0,
                                BusinessName = dr["BusinessName"].ToString(),
                                AccountType = dr["AccountType"].ToString(),
                                CustomerName = dr["CustomerName"].ToString(),
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<ReferingCustomer> GetReferringCustomerListByCustomerId(Guid customerId)
        {
            string sqlQuery = @"select Id
                                ,[Type] as AccountType
                                ,FirstName + ' '+LastName as CustomerName
                                ,BusinessName as BusinessName
                                from Customer where ReferringCustomer ='{0}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, customerId);

                List<ReferingCustomer> list = new List<ReferingCustomer>();
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet ds = GetDataSet(cmd);
                    list = (from DataRow dr in ds.Tables[0].Rows
                            select new ReferingCustomer()
                            {
                                Id = dr["Id"] != DBNull.Value ? Convert.ToInt32(dr["Id"]) : 0,
                                BusinessName = dr["BusinessName"].ToString(),
                                AccountType = dr["AccountType"].ToString(),
                                CustomerName = dr["CustomerName"].ToString(),
                            }).ToList();
                }
                return list;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataSet GetLeadDetailTabCount(Guid companyid, Guid customerid)
        {
            string sqlQuery = @"(select count(inv.Id) as LeadEstimateCount from Invoice inv
                                left join Customer cus on inv.CustomerId = cus.CustomerId
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                where cc.IsLead = 1
                                and inv.[Status] != 'Init'
                                and inv.IsEstimate = 1
                                and inv.CustomerId = '{1}'
                                and cc.CompanyId = '{0}')
                                (select count(cn.Id) as LeadNoteCount from CustomerNote cn
                                left join Customer cus on cus.CustomerId = cn.CustomerId
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                where cc.IsLead = 1
                                and cn.CustomerId = '{1}'
                                and cc.CompanyId = '{0}')
                                (select count(lc.Id) as LeadCorresCount from LeadCorrespondence lc
                                left join Customer cus on cus.CustomerId = lc.CustomerId
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                where cc.IsLead = 1
                                and lc.CustomerId = '{1}'
                                and cc.CompanyId = '{0}')
                                (select count(cf.Id) as LeadFileCount from CustomerFile cf
                                left join Customer cus on cus.CustomerId = cf.CustomerId
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                where cc.IsLead = 1
                                and cf.CustomerId = '{1}'
                                and cc.CompanyId = '{0}')
                                (select count(_Booking.Id) as BookingCount from Booking _Booking 
                                where _Booking.CompanyId = '{0}'
                                and _Booking.CustomerId = '{1}'
                                and _Booking.Status != 'Init' )
                                (select count(_Ticket.Id) as TicketCount from Ticket _Ticket 
                                where _Ticket.CompanyId = '{0}'
                                and _Ticket.CustomerId = '{1}'
                                and _Ticket.Status != 'Init' )
                                (select count(_Estimator.Id) as EstimatorCount from Estimator _Estimator
                                where _Estimator.CompanyId = '{0}'
                                and _Estimator.CustomerId = '{1}'
                                and _Estimator.Status != 'Init' )
                                (select count(UserAC.Id)  as LogCount from UserActivityCustomer UserAC
                                left join UserActivity UserA on UserA.ActivityId = UserAC.ActivityId 
                                left join CustomerCompany cc on cc.CustomerId = UserAC.CustomerId
                                where 
                                UserAC.CustomerId = '{1}' and cc.CompanyId = '{0}' and UserA.Id is  not null)
";

            try
            {
                sqlQuery = string.Format(sqlQuery, companyid, customerid);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataSet GetCustomerRecurringBillingByCompanyId(Guid companyid, DateTime? start, DateTime? end, string mindate, string maxdate)
        {
            string subquery = "";
            string searchquery = "";
            if (start.HasValue && start.Value != new DateTime() && end.HasValue && end.Value != new DateTime())
            {
                subquery = string.Format("and inv.CreatedDate between '{0}' and '{1}'", start.Value.ToString("yyyy-MM-dd 00:00:00.000"), end.Value.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            if (!string.IsNullOrWhiteSpace(mindate) && !string.IsNullOrWhiteSpace(maxdate))
            {
                var datemin = Convert.ToDateTime(mindate);
                var date = Convert.ToDateTime(maxdate);
                searchquery += string.Format("and inv.CreatedDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(mindate))
            {
                var date = Convert.ToDateTime(mindate);
                searchquery += string.Format("and inv.CreatedDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(maxdate))
            {
                var date = Convert.ToDateTime(maxdate);
                searchquery += string.Format("and inv.CreatedDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            string sqlQuery = @"select inv.CreatedDate as FirstBilling, COUNT(cus.Id) as AutomaticCustomerCount
                                ,inv.InvoiceFor as InvoiceBillingType, SUM(ISNULL(CONVERT(decimal(18,2),round(cus.MonthlyMonitoringFee,2)), 0)) as CustomerRMR,
                                SUM(ISNULL(cus.BillAmount, 0)) as CustomerBillAmount 
                                into #CustomerSUbs from Invoice inv
                                left join Customer cus on cus.CustomerId = inv.CustomerId
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                where inv.CreatedBy = 'system'
                                and ce.IsTestAccount != 1
                                and (inv.InvoiceFor = 'ACH' or inv.InvoiceFor = 'Credit Card' or inv.InvoiceFor = 'SystemGenerated')
                                and inv.CreatedByUid = '22222222-2222-2222-2222-222222222222'
                                and inv.CompanyId = '{0}'
                                {3}
                                {4}
                                group by inv.CreatedDate, inv.InvoiceFor

                                select convert(date, inv.createddate) as FirstBilling
								,(select isnull(SUM(ISNULL(_cs.BillAmount, 0)), 0) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'ach' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as ACHAmount
								,(select count(*) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'ach' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as ACHSubs
								,(select isnull(SUM(ISNULL(CONVERT(decimal(18,2),round(_cs.MonthlyMonitoringFee,2)), 0)), 0) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'ach' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as ACHRMR
								,(select isnull(SUM(ISNULL(_cs.BillAmount, 0)), 0) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'Credit Card' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as CCAmount
								,(select count(*) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'Credit Card' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as CCSubs
								,(select isnull(SUM(ISNULL(CONVERT(decimal(18,2),round(_cs.MonthlyMonitoringFee,2)), 0)), 0) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'Credit Card' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as CCRMR
								,(select isnull(SUM(ISNULL(_cs.BillAmount, 0)), 0) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'SystemGenerated' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as InvoiceAmount
								,(select count(*) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'SystemGenerated' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as InvoiceSubs
								,(select isnull(SUM(ISNULL(CONVERT(decimal(18,2),round(_cs.MonthlyMonitoringFee,2)), 0)), 0) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'SystemGenerated' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as InvoiceRMR
								from invoice inv
                                left join Customer cus on cus.CustomerId = inv.CustomerId
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
								where (inv.invoicefor = 'ach' or inv.invoicefor = 'Credit Card' or inv.invoicefor = 'SystemGenerated') and inv.createdby = 'system' and inv.createdbyuid = '22222222-2222-2222-2222-222222222222'
                                and ce.IsTestAccount != 1
								{3}
                                {4}
                                group by convert(date, inv.createddate)
                                order by convert(date, inv.createddate) desc
                                select SUM(AutomaticCustomerCount) as TotalAutomaticCustomerCountACH from #CustomerSUbs where InvoiceBillingType = 'ACH'
                                select SUM(AutomaticCustomerCount) as TotalAutomaticCustomerCountCC from #CustomerSUbs where InvoiceBillingType = 'Credit Card'
                                select SUM(AutomaticCustomerCount) as TotalAutomaticCustomerCountInvoice from #CustomerSUbs where InvoiceBillingType = 'SystemGenerated'

                                select SUM(CustomerRMR) as TotalCustomerRMRACH from #CustomerSUbs where InvoiceBillingType = 'ACH'
                                select SUM(CustomerRMR) as TotalCustomerRMRCC from #CustomerSUbs where InvoiceBillingType = 'Credit Card'
                                select SUM(CustomerRMR) as TotalCustomerRMRInvoice from #CustomerSUbs where InvoiceBillingType = 'SystemGenerated'

                                select SUM(CustomerBillAmount) as TotalCustomerBillAmountACH from #CustomerSUbs where InvoiceBillingType = 'ACH'
                                select SUM(CustomerBillAmount) as TotalCustomerBillAmountCC from #CustomerSUbs where InvoiceBillingType = 'Credit Card'
                                select SUM(CustomerBillAmount) as TotalCustomerBillAmountInvoice from #CustomerSUbs where InvoiceBillingType = 'SystemGenerated'

                                select SUM(AutomaticCustomerCount) as TotalCustomerCount from #CustomerSUbs where (InvoiceBillingType = 'ACH' or InvoiceBillingType = 'Credit Card' or InvoiceBillingType = 'SystemGenerated')
                                select SUM(CustomerRMR) as TotalRMRCount from #CustomerSUbs where (InvoiceBillingType = 'ACH' or InvoiceBillingType = 'Credit Card' or InvoiceBillingType = 'SystemGenerated')
                                select SUM(CustomerBillAmount) as TotalBillAmountCount from #CustomerSUbs where (InvoiceBillingType = 'ACH' or InvoiceBillingType = 'Credit Card' or InvoiceBillingType = 'SystemGenerated')

                                drop table #CustomerSUbs";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyid, start, end, subquery, searchquery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetCustomerRecurringBillingReportByCompanyId(Guid companyid, DateTime? start, DateTime? end, string mindate, string maxdate)
        {
            string subquery = "";
            string searchquery = "";
            if (start.HasValue && start.Value != new DateTime() && end.HasValue && end.Value != new DateTime())
            {
                subquery = string.Format("and inv.CreatedDate between '{0}' and '{1}'", start.Value.ToString("yyyy-MM-dd 00:00:00.000"), end.Value.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            if (!string.IsNullOrWhiteSpace(mindate) && !string.IsNullOrWhiteSpace(maxdate))
            {
                var datemin = Convert.ToDateTime(mindate);
                var date = Convert.ToDateTime(maxdate);
                searchquery += string.Format("and inv.CreatedDate between '{0}' and '{1}'", datemin.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(mindate))
            {
                var date = Convert.ToDateTime(mindate);
                searchquery += string.Format("and inv.CreatedDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            else if (!string.IsNullOrWhiteSpace(maxdate))
            {
                var date = Convert.ToDateTime(maxdate);
                searchquery += string.Format("and inv.CreatedDate between '{0}' and '{1}'", date.ToString("yyyy-MM-dd 00:00:00.000"), date.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            string sqlQuery = @"
                                select format(inv.createddate,'M/d/yy') as [Billing Day]
                                ,(select count(*) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'ach' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as ACHSubs
								,(select isnull(SUM(ISNULL(CONVERT(decimal(18,2),round(_cs.MonthlyMonitoringFee,2)), 0)), 0) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'ach' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as ACHRMR
								,(select isnull(SUM(ISNULL(_cs.BillAmount, 0)), 0) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'ach' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as ACHAmount	
								,(select count(*) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'Credit Card' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as CCSubs
								,(select isnull(SUM(ISNULL(CONVERT(decimal(18,2),round(_cs.MonthlyMonitoringFee,2)), 0)), 0) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'Credit Card' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as CCRMR
								,(select isnull(SUM(ISNULL(_cs.BillAmount, 0)), 0) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'Credit Card' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as CCAmount
								,(select count(*) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'SystemGenerated' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as InvoiceSubs
								,(select isnull(SUM(ISNULL(CONVERT(decimal(18,2),round(_cs.MonthlyMonitoringFee,2)), 0)), 0) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'SystemGenerated' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as InvoiceRMR
								,(select isnull(SUM(ISNULL(_cs.BillAmount, 0)), 0) from invoice _inv left join customer _cs on _cs.CustomerId = _inv.CustomerId left join CustomerExtended _ce on _ce.CustomerId=_cs.CustomerId where _inv.invoicefor = 'SystemGenerated' and _ce.IsTestAccount != 1 and _inv.createdby = 'system' and _inv.createdbyuid = '22222222-2222-2222-2222-222222222222' and convert(date, _inv.createddate) = convert(date, inv.createddate)) as InvoiceAmount
								from invoice inv
                                left join Customer cus on cus.CustomerId=inv.CustomerId
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
								where (inv.invoicefor = 'ach' or inv.invoicefor = 'Credit Card' or inv.invoicefor = 'SystemGenerated') and inv.createdby = 'system' and inv.createdbyuid = '22222222-2222-2222-2222-222222222222'
								and inv.CompanyId = '{0}'
                                and ce.IsTestAccount != 1
                                {3}
                                {4}
                                group by convert(date, inv.createddate),format(inv.createddate,'M/d/yy')
                                order by convert(date, inv.createddate) desc";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyid, start, end, subquery, searchquery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetSalesSummaryReportByCompanyId(Guid companyid, DateTime? start, DateTime? end, string searchtext)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string subquery = "";
            if (start.HasValue && start.Value != new DateTime() && end.HasValue && end.Value != new DateTime())
            {
                subquery = string.Format("and cus.JoinDate between '{0}' and '{1}'", start.Value.ToString("yyyy-MM-dd 00:00:00.000"), end.Value.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            string searchquery = "";
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                searchquery += string.Format("and (cus.FirstName like '%{0}%' or cus.LastName like '%{0}%' or cus.FirstName + ' ' + cus.LastName like '%{0}%' or cus.BusinessName like '%{0}%' or cus.DBA like '%{0}%')", searchtext);
            }
            string sqlQuery = @"select cus.Id, {4} as CustomerNum

                                ,SUM(ISNULL(pc.ActivationFee, 0) + ISNULL(pc.NonConformingFee, 0)) as AdditionFee
								
								,CASE when ppc.Type like 'ACH%'
								Then
								((select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0)) from CustomerPackageService where PackageId = pc.PackageId and CustomerId = cus.CustomerId) 
								- (select isnull(value, 0) from GlobalSetting where SearchKey = 'ACHDiscount'))
								Else
								(select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0)) from CustomerPackageService where PackageId = pc.PackageId and CustomerId = cus.CustomerId) 
								END As FirstMonths
                                
								,(select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0)) from CustomerPackageEqp where PackageId = pc.PackageId and CustomerId = cus.CustomerId) as EquipmentAmount
								
								,ISNULL((select SUM(CONVERT(decimal(18,2),round(cae.TotalPrice,2))) from CustomerAppointmentEquipment cae left join Equipment eq on cae.EquipmentId = eq.EquipmentId left join Ticket tik on tik.TicketId = cae.AppointmentId where eq.IsARBEnabled = 0 and eq.IsARBEnabled is not null and tik.CustomerId = pc.CustomerId and cae.IsService = 1), 0) as ServiceFee

								,CASE when pics.ForMonths>1
								Then
								(select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0))*(pics.ForMonths-1) from CustomerPackageService where PackageId = pc.PackageId and CustomerId = cus.CustomerId)
								- IIF(ppc.Type like 'ACH%', (select isnull(value, 0) from GlobalSetting where SearchKey = 'ACHDiscount'), 0)
								Else '0'
								END As AdvancedMonitoring

								,(((SUM(ISNULL(pc.ActivationFee, 0) + ISNULL(pc.NonConformingFee, 0))
                                + ((select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0)) from CustomerPackageService where PackageId = pc.PackageId and CustomerId = cus.CustomerId) - IIF(ppc.Type like 'ACH%', (select isnull(value, 0) from GlobalSetting where SearchKey = 'ACHDiscount'), 0))
								+ (select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0)) from CustomerPackageEqp where PackageId = pc.PackageId and CustomerId = cus.CustomerId)
								+ ISNULL((select SUM(CONVERT(decimal(18,2),round(cae.TotalPrice,2))) from CustomerAppointmentEquipment cae left join Equipment eq on cae.EquipmentId = eq.EquipmentId left join Ticket tik on tik.TicketId = cae.AppointmentId where eq.IsARBEnabled = 0 and eq.IsARBEnabled is not null and tik.CustomerId = pc.CustomerId and cae.IsService = 1), 0)
								+ iif((select ISNULL(Id, 0) from PaymentInfoCustomer pic where pic.ForMonths > 1 and pic.CustomerId = pc.CustomerId) > 0, (((select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0)) from CustomerPackageService where PackageId = pc.PackageId and CustomerId = cus.CustomerId) - IIF(ppc.Type like 'ACH%', (select isnull(value, 0) from GlobalSetting where SearchKey = 'ACHDiscount'), 0)) * (select ISNULL(pic.ForMonths, 0) from PaymentInfoCustomer pic where pic.ForMonths > 1 and pic.CustomerId = pc.CustomerId) - 1), ((select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0)) from CustomerPackageService where PackageId = pc.PackageId and CustomerId = cus.CustomerId) - IIF(ppc.Type like 'ACH%', (select isnull(value, 0) from GlobalSetting where SearchKey = 'ACHDiscount'), 0))))
                                * (select Value from GlobalSetting where SearchKey = 'Sales Tax')) / 100) as Tax
                                
								,(SUM(ISNULL(pc.ActivationFee, 0) + ISNULL(pc.NonConformingFee, 0))
								 + ((select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0)) from CustomerPackageService where PackageId = pc.PackageId and CustomerId = cus.CustomerId) - IIF(ppc.Type like 'ACH%', (select isnull(value, 0) from GlobalSetting where SearchKey = 'ACHDiscount'), 0))
								  + (select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0)) from CustomerPackageEqp where PackageId = pc.PackageId and CustomerId = cus.CustomerId)
                                + (((SUM(ISNULL(pc.ActivationFee, 0) + ISNULL(pc.NonConformingFee, 0))
                                + ((select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0)) from CustomerPackageService where PackageId = pc.PackageId and CustomerId = cus.CustomerId) - IIF(ppc.Type like 'ACH%', (select isnull(value, 0) from GlobalSetting where SearchKey = 'ACHDiscount'), 0))
								+ (select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0)) from CustomerPackageEqp where PackageId = pc.PackageId and CustomerId = cus.CustomerId)
								+ ISNULL((select SUM(CONVERT(decimal(18,2),round(cae.TotalPrice,2))) from CustomerAppointmentEquipment cae left join Equipment eq on cae.EquipmentId = eq.EquipmentId left join Ticket tik on tik.TicketId = cae.AppointmentId where eq.IsARBEnabled = 0 and eq.IsARBEnabled is not null and tik.CustomerId = pc.CustomerId and cae.IsService = 1), 0)
								+ iif((select ISNULL(Id, 0) from PaymentInfoCustomer pic where pic.ForMonths > 1 and pic.CustomerId = pc.CustomerId) > 0, (((select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0)) from CustomerPackageService where PackageId = pc.PackageId and CustomerId = cus.CustomerId) - IIF(ppc.Type like 'ACH%', (select isnull(value, 0) from GlobalSetting where SearchKey = 'ACHDiscount'), 0)) * (select ISNULL(pic.ForMonths, 0) from PaymentInfoCustomer pic where pic.ForMonths > 1 and pic.CustomerId = pc.CustomerId) - 1), ((select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0)) from CustomerPackageService where PackageId = pc.PackageId and CustomerId = cus.CustomerId) - IIF(ppc.Type like 'ACH%', (select isnull(value, 0) from GlobalSetting where SearchKey = 'ACHDiscount'), 0))))
                                * (select Value from GlobalSetting where SearchKey = 'Sales Tax')) / 100)) as SalesTax
								
								,(select IIF(IsLead = 1, 'Lead', 'Customer') from CustomerCompany where CustomerId = cus.CustomerId) as [SummaryStatus]
                                ,ppc.Type
								from PackageCustomer pc
                                left join Customer cus on cus.CustomerId = pc.CustomerId
                                LEFT JOIN PaymentInfoCustomer pics on pics.CustomerId=cus.CustomerId and pics.Payfor='Service'
								LEFT JOIN PaymentProfileCustomer ppc on ppc.PaymentInfoId=pics.PaymentInfoId                                
                                where cus.CustomerId is not null
								and cus.IsActive = 1
                                and pc.CompanyId = '{0}'
                                {3}
                                {5}
                                group by cus.Id, cus.CustomerId, pc.CustomerId, pc.PackageId,pics.ForMonths,ppc.Type, {4}";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyid, start, end, subquery, NameSql, searchquery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataSet GetSalesSummaryReportALLByCompanyId(Guid companyid, DateTime? start, DateTime? end, string searchtext, int pageno, int pagesize, string order)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            string orderquery = "";
            string orderquery1 = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string subquery = "";
            if (start.HasValue && start.Value != new DateTime() && end.HasValue && end.Value != new DateTime())
            {
                subquery = string.Format("and cus.JoinDate between '{0}' and '{1}'", start.Value.ToString("yyyy-MM-dd 00:00:00.000"), end.Value.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            string searchquery = "";
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                searchquery += "and CHARINDEX(@SearchText, cus.SearchText) > 0";
                //searchquery += string.Format("and (cus.FirstName like '%{0}%' or cus.LastName like '%{0}%' or cus.FirstName + ' ' + cus.LastName like '%{0}%' or cus.BusinessName like '%{0}%' or cus.DBA like '%{0}%')", searchtext);
            }
            #region Order
            if (!string.IsNullOrWhiteSpace(order))
            {
                if (order == "ascending/customername")
                {
                    orderquery = "order by #packagedataFilter.[CustomerNum] asc";
                    orderquery1 = "order by [CustomerNum] asc";
                }
                else if (order == "descending/customername")
                {
                    orderquery = "order by #packagedataFilter.[CustomerNum] desc";
                    orderquery1 = "order by [CustomerNum] desc";
                }
                else if (order == "ascending/activationfee")
                {
                    orderquery = "order by #packagedataFilter.AdditionFee asc";
                    orderquery1 = "order by AdditionFee asc";
                }
                else if (order == "descending/activationfee")
                {
                    orderquery = "order by #packagedataFilter.AdditionFee desc";
                    orderquery1 = "order by AdditionFee desc";
                }
                else if (order == "ascending/RMR")
                {
                    orderquery = "order by #packagedataFilter.[FirstMonths] asc";
                    orderquery1 = "order by [FirstMonths] asc";
                }
                else if (order == "descending/RMR")
                {
                    orderquery = "order by #packagedataFilter.[FirstMonths] desc";
                    orderquery1 = "order by [FirstMonths] desc";
                }
                else if (order == "ascending/equipment")
                {
                    orderquery = "order by #packagedataFilter.[EquipmentAmount] asc";
                    orderquery1 = "order by [EquipmentAmount] asc";
                }
                else if (order == "descending/equipment")
                {
                    orderquery = "order by #packagedataFilter.[EquipmentAmount] desc";
                    orderquery1 = "order by [EquipmentAmount] desc";
                }
                else if (order == "ascending/servicefee")
                {
                    orderquery = "order by #packagedataFilter.[ServiceFee] asc";
                    orderquery1 = "order by [ServiceFee] asc";
                }
                else if (order == "descending/servicefee")
                {
                    orderquery = "order by #packagedataFilter.[ServiceFee] desc";
                    orderquery1 = "order by [ServiceFee] desc";
                }
                else if (order == "ascending/advancedmonitoring")
                {
                    orderquery = "order by #packagedataFilter.[AdvancedMonitoring]  asc";
                    orderquery1 = "order by AdvancedMonitoring asc";
                }
                else if (order == "descending/advancedmonitoring")
                {
                    orderquery = "order by #packagedataFilter.[AdvancedMonitoring]  desc";
                    orderquery1 = "order by AdvancedMonitoring desc";
                }
                else if (order == "ascending/tax")
                {
                    orderquery = "order by #packagedataFilter.[Tax]  asc";
                    orderquery1 = "order by Tax asc";
                }
                else if (order == "descending/tax")
                {
                    orderquery = "order by #packagedataFilter.[Tax]  desc";
                    orderquery1 = "order by Tax desc";
                }
                else if (order == "ascending/salesaftertax")
                {
                    orderquery = "order by #packagedataFilter.[SalesTax]  asc";
                    orderquery1 = "order by SalesTax asc";
                }
                else if (order == "descending/salesaftertax")
                {
                    orderquery = "order by #packagedataFilter.[SalesTax]  desc";
                    orderquery1 = "order by SalesTax desc";
                }
                else
                {
                    orderquery = "order by #packagedataFilter.[Id]  desc";
                    orderquery1 = "order by Id desc";
                }

            }
            else
            {
                orderquery = "order by #packagedataFilter.[Id] desc";
                orderquery1 = "order by Id desc";
            }
            #endregion
            string sqlQuery = @"
                               
	                                DECLARE @pagestart int
	                                DECLARE @pageend int
	                                DECLARE @pageno int
	                                DECLARE @pagesize int

                                    SET @pageno = {6} --default 1
									SET @pagesize = {7} --default 10
                                    SET @pagestart=(@pageno-1)* @pagesize 
                                    SET @pageend = @pagesize
                                select distinct(cus.Id),cusCom.ConvertionDate, {4} as CustomerNum

                                ,(select SUM(ISNULL(CONVERT(decimal(18,2),round(Amount,2)), 0)) from Invoice where InvoiceFor='ActivationNonConforming' and Status!='Cancelled' and Status!='Init' and CustomerId=cus.CustomerId)  as AdditionFee
								
								,(ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(_invDetl.UnitPrice,2)), 0)) from Invoice _inv left join InvoiceDetail _invDetl on _invDetl.InvoiceId=_inv.InvoiceId where _inv.InvoiceFor='Service' and _inv.Status!='Cancelled' and _inv.Status!='Init' and _inv.CustomerId=cus.CustomerId),0)
                                 +ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(_invDetl.TotalPrice,2)), 0)) from Invoice _inv left join InvoiceDetail _invDetl on _invDetl.InvoiceId=_inv.InvoiceId left join Equipment _eqp on _eqp.EquipmentId=_invDetl.EquipmentId where _inv.InvoiceFor='Invoice' and _inv.Status!='Cancelled' and _inv.Status!='Init' and _inv.CustomerId=cus.CustomerId and _eqp.EquipmentClassId=2 and _eqp.IsARBEnabled=1),0))
                                 -IIF(ppc.Type like 'ACH%', (select isnull(value, 0) from GlobalSetting where SearchKey = 'ACHDiscount'), 0)
                                  As FirstMonths
                                
								,(ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(Amount,2)), 0)) from Invoice where InvoiceFor='Equipment' and Status!='Cancelled' and Status!='Init' and CustomerId=cus.CustomerId),0)
                                 +ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(_invDetl.TotalPrice,2)), 0)) from Invoice _inv left join InvoiceDetail _invDetl on _invDetl.InvoiceId=_inv.InvoiceId left join Equipment _eqp on _eqp.EquipmentId=_invDetl.EquipmentId where _inv.InvoiceFor='Invoice' and _inv.Status!='Cancelled' and _inv.Status!='Init' and _inv.CustomerId=cus.CustomerId and _eqp.EquipmentClassId=1),0)) as EquipmentAmount
                                 --,(select SUM(ISNULL(CONVERT(decimal(18,2),round(_invDetl.TotalPrice,2)), 0)) from Invoice _inv left join InvoiceDetail _invDetl on _invDetl.InvoiceId=_inv.InvoiceId left join Equipment _eqp on _eqp.EquipmentId=_invDetl.EquipmentId where _inv.CustomerId=cus.CustomerId and ((_inv.InvoiceFor='Invoice' and _eqp.EquipmentClassId=1) or _inv.InvoiceFor='Equipment')) as EquipmentAmount
								
								--,ISNULL((select SUM(CONVERT(decimal(18,2),round(cae.TotalPrice,2))) from CustomerAppointmentEquipment cae left join Equipment eq on cae.EquipmentId = eq.EquipmentId left join Ticket tik on tik.TicketId = cae.AppointmentId where eq.IsARBEnabled = 0 and eq.IsARBEnabled is not null and tik.CustomerId = inv.CustomerId and cae.IsService = 1), 0) as ServiceFee
                                  ,ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(_invDetl.TotalPrice,2)), 0)) from Invoice _inv left join InvoiceDetail _invDetl on _invDetl.InvoiceId=_inv.InvoiceId left join Equipment _eqp on _eqp.EquipmentId=_invDetl.EquipmentId where _inv.InvoiceFor='Invoice' and _inv.Status!='Cancelled' and _inv.Status!='Init' and _inv.CustomerId=cus.CustomerId and _eqp.EquipmentClassId=2 and _eqp.IsARBEnabled=0 and _eqp.IsARBEnabled is not null),0) As ServiceFee                                

                                --,CASE when pics.ForMonths>1
								--Then
								--(select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0))*(pics.ForMonths-1) from CustomerPackageService where CustomerId = cus.CustomerId)
								--- IIF(ppc.Type like 'ACH%', (select isnull(value, 0) from GlobalSetting where SearchKey = 'ACHDiscount'), 0)
								--Else '0'
								--END As AdvancedMonitoring

								,(ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(_invDetl.TotalPrice,2)), 0)) from Invoice _inv left join InvoiceDetail _invDetl on _invDetl.InvoiceId=_inv.InvoiceId where _inv.InvoiceFor='Service' and _inv.Status!='Cancelled' and _inv.Status!='Init'  and _inv.CustomerId=cus.CustomerId),0)
                                  -ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(_invDetl.UnitPrice,2)), 0)) from Invoice _inv left join InvoiceDetail _invDetl on _invDetl.InvoiceId=_inv.InvoiceId where _inv.InvoiceFor='Service' and _inv.Status!='Cancelled' and _inv.Status!='Init' and _inv.CustomerId=cus.CustomerId),0))
                                 As AdvancedMonitoring

								,(select SUM(ISNULL(CONVERT(decimal(18,2),round(Tax,2)), 0)) from Invoice where (InvoiceFor='ActivationNonConforming' or InvoiceFor='Service' or InvoiceFor='Equipment' or InvoiceFor='Invoice') and Status!='Cancelled' and Status!='Init' and CustomerId=cus.CustomerId)
								 as Tax
                                
								,(select SUM(ISNULL(CONVERT(decimal(18,2),round(TotalAmount,2)), 0)) from Invoice where (InvoiceFor='ActivationNonConforming' or InvoiceFor='Service' or InvoiceFor='Equipment' or InvoiceFor='Invoice') and Status!='Cancelled' and Status!='Init' and CustomerId=cus.CustomerId) as SalesTax
								
								--,(select IIF(IsLead = 1, 'Lead', 'Customer') from CustomerCompany where CustomerId = cus.CustomerId) as [SummaryStatus]
                                --,ppc.Type 
                                into #packagedata
								from Invoice inv
                                left join Customer cus on cus.CustomerId = inv.CustomerId  
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                 left join CustomerCompany cusCom on cusCom.CustomerId=cus.CustomerId
                                --left join PackageCustomer pc on pc.CustomerId=pc.CustomerId
                                left join PaymentInfoCustomer pics on pics.CustomerId=cus.CustomerId and pics.Payfor='Service'
                                LEFT JOIN PaymentProfileCustomer ppc on ppc.PaymentInfoId=pics.PaymentInfoId 
                                where cus.CustomerId is not null
								and cus.IsActive = 1
                                and ce.IsTestAccount != 1
                                and inv.CompanyId = '{0}'
                                {3}
                                {5}
                                group by cus.Id,ppc.Type, cus.CustomerId, inv.CustomerId,cusCom.ConvertionDate, {4}


                                select * into #packagedataFilter from #packagedata

                                 SELECT TOP (@pagesize) * into #TestTable
                                FROM #packagedataFilter 
                                where Id NOT IN(Select TOP (@pagestart) #packagedataFilter.Id from #packagedataFilter {8})
                                {9}
                                --order by ConvertionDate desc
                                select  count(Id) as [TotalCount] from #packagedata

                                select * from #TestTable
								select sum(AdditionFee) as TotalAdditionFee
								,sum(FirstMonths) as TotalFirstMonth
								,sum(EquipmentAmount) as TotalEquipmentAmount
								,sum(ServiceFee) as TotalServiceFee
								,sum(AdvancedMonitoring) as TotalAdvancedMonitoring

								,sum(Tax) as TotalTax
								,sum(SalesTax) as TotalSalesTax
								from #TestTable

	                            select sum(AdditionFee) as TotalAdditionFee
								,sum(FirstMonths) as TotalFirstMonth
								,sum(EquipmentAmount) as TotalEquipmentAmount
								,sum(ServiceFee) as TotalServiceFee
								,sum(AdvancedMonitoring) as TotalAdvancedMonitoring
								,(sum(SalesTax) - sum(Tax)) as TotalWoTax

								,sum(Tax) as TotalTax
								,sum(SalesTax) as TotalSalesTax
								from #packagedata

                                DROP TABLE #packagedata
								DROP TABLE #packagedataFilter
								DROP TABLE #TestTable
";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyid, start, end, subquery, NameSql, searchquery, pageno, pagesize, orderquery, orderquery1);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(searchtext.Trim())));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataSet GetNewSalesReportALLByCompanyId(Guid companyid, DateTime? start, DateTime? end, string searchtext, int pageno, int pagesize, string order, List<string> SalesList)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string SalesPersonQuery = "";
            if (SalesList != null && SalesList.Count > 0 && SalesList[0] != "null")
            {
                string Ids = "";
                foreach (string id in SalesList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                SalesPersonQuery = "and emp.UserId in (" + Ids.TrimEnd(',') + ")";
            }
            string subquery = "";
            if (start.HasValue && start.Value != new DateTime() && end.HasValue && end.Value != new DateTime())
            {
                subquery = string.Format("and cus.SalesDate between '{0}' and '{1}'", start.Value.ToString("yyyy-MM-dd 00:00:00.000"), end.Value.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            string searchquery = "";
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                searchquery += "and CHARINDEX(@SearchText, cus.SearchText) > 0";
            }

            string sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                SET @pagestart=(@pageno-1)* @pagesize 
                                SET @pageend = @pagesize

                                select * into #SaleCom from (Select
								Distinct(cus.Id),
								{0} as DisplayName,
                                lkleadstatus.DisplayText as LeadStatus,
								cus.CustomerNo,
                                cus.SalesDate,
                                tkLookUp.DisplayText as TicketType,
								emp.FirstName+' '+emp.LastName as SalesPerson,
								lksource.DisplayText as LeadSource,
								lklocation.DisplayText as SalesLocation,
								cus.Type,
								ISNULL(pc.ActivationFee+pc.NonConformingFee,0) as ActNonFee,
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float) as RMR,
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0) as EquipmentFee,
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0) as ServiceFee,
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0) as AdvancedMonitoring,
								
								((
								ISNULL(pc.ActivationFee+pc.NonConformingFee,0)
								+
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0)
								) * (select Value from globalsetting where SearchKey = 'Sales Tax'))/100 as TotalTax,

								ISNULL(cus.FinancedAmount,0) as FinancedAmount,

								((ISNULL(pc.ActivationFee+pc.NonConformingFee,0)
								+
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0)
								)
								+
								((
								ISNULL(pc.ActivationFee+pc.NonConformingFee,0)
								+
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0)
								) * (select Value from globalsetting where SearchKey = 'Sales Tax'))/100
								--+
								--ISNULL(cus.FinancedAmount,0)
								) as TotalSales
								from Customer cus
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
								LEFT JOIN CustomerCompany cc on cc.CustomerId=cus.CustomerId
								LEFT JOIN Employee emp on emp.UserId=cus.SoldBy1
                                left join Lookup lkleadstatus on lkleadstatus.DataKey ='LeadStatus' and lkleadstatus.DataValue = cus.Status and lkleadstatus.DataValue!='-1'
								left join Lookup lksource on lksource.DataKey ='LeadSource' and lksource.DataValue = cus.LeadSource and lksource.DataValue!='-1'
								left join Lookup lklocation on lklocation.DataKey = 'CommissionType' and lklocation.DataValue = cus.SalesLocation and lklocation.DataValue!='-1'
								LEFT join PackageCustomer pc on pc.CustomerId=cus.CustomerId
								LEFT JOIN PaymentInfoCustomer pic on pic.CustomerId=cus.CustomerId and pic.Payfor='Service'
                                LEFT JOIN Ticket tk on tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1
								LEFT JOIN Lookup tkLookUp on tkLookUp.DataValue=tk.TicketType and tkLookUp.DataKey='TicketType'								
                                Where cc.IsLead=0 and cus.IsActive=1 and ce.IsTestAccount != 1 and cus.TransferCustomerId IS NULL and (cus.MoveCustomerId='00000000-0000-0000-0000-000000000000' or cus.MoveCustomerId IS NULL) {1} {2} {3}
								) d

								Select *into #tempSaleCom from #SaleCom

								select top(@pagesize)
								* into #10SaleCom from #tempSaleCom
								where Id not in(select top(@pagestart) Id from #tempSaleCom #cd order by SalesDate desc)
                                order by SalesDate desc

								select * from #10SaleCom

								select count(*) CountTotal,count(Id) as CustomerCount,sum(ActNonFee) as SumActNonFeeTotal,sum(RMR) as SumRMRTotal,sum(EquipmentFee) as SumEquipmentFeeTotal,sum(ServiceFee) as SumServiceFeeTotal,sum(AdvancedMonitoring) as SumAdvancedMonitoringTotal,(sum(TotalSales)-sum(TotalTax)) as TotalWoTax,sum(TotalTax) as SumTaxTotal,Sum(TotalSales) as SumTotalSales,sum(FinancedAmount) as SumFinancedAmount from #SaleCom



								select 
								 sum(ActNonFee) as TotalActNonFee
								,sum(RMR) as TotalRMR
								,sum(EquipmentFee) as TotalEquipmentFee
								,sum(ServiceFee) as TotalServiceFee
								,sum(AdvancedMonitoring) as TotalAdvancedMonitoring
								,sum(TotalTax) as TotalTotalTax
								,sum(FinancedAmount) as FinancedAmount
								,sum(TotalSales) as TotalSales
								from #10SaleCom

								drop table #SaleCom
								drop table #tempSaleCom
                                drop table #10SaleCom";
            try
            {
                sqlQuery = string.Format(sqlQuery, NameSql, subquery, searchquery, SalesPersonQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    if (!string.IsNullOrWhiteSpace(searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(searchtext.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataSet GetNewSalesReportALLByInvoices(Guid companyid, DateTime? start, DateTime? end, string searchtext, int pageno, int pagesize, string order,
            List<string> SalesList, string SalesLocationList, string InvoiceTypeList, string LeadSourceList, string LeadSourceTypeList, DateTime? InstallFrom, DateTime? InstallTo)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string SalesPersonQuery = "";
            if (SalesList != null && SalesList.Count > 0 && SalesList[0] != "null")
            {
                string Ids = "";
                foreach (string id in SalesList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                SalesPersonQuery = "and emp.UserId in (" + Ids.TrimEnd(',') + ")";
            }

            //New Sales Report - Start

            if (!string.IsNullOrEmpty(SalesLocationList) && SalesLocationList != "null")
            {
                SalesPersonQuery += " and cus.SalesLocation ='" + SalesLocationList + "'";
            }

            if (!string.IsNullOrEmpty(InvoiceTypeList) && InvoiceTypeList != "null")
            {
                SalesPersonQuery += " and inv.InvoiceFor ='" + InvoiceTypeList + "'";
            }


            if (!string.IsNullOrEmpty(LeadSourceList) && LeadSourceList != "null")
            {
                SalesPersonQuery += " and cus.LeadSource ='" + LeadSourceList + "'";
            }


            if (!string.IsNullOrEmpty(LeadSourceTypeList) && LeadSourceTypeList != "null")
            {
                SalesPersonQuery += " and cus.LeadSourceType ='" + LeadSourceTypeList + "'";
            }


            //New Sales Report - End


            string subquery = "";
            if (start.HasValue && start.Value != new DateTime() && end.HasValue && end.Value != new DateTime())
            {
                subquery = string.Format("and cus.SalesDate between '{0}' and '{1}'", start.Value.ToString("yyyy-MM-dd 00:00:00.000"), end.Value.ToString("yyyy-MM-dd 23:59:59.000"));
            }

            if (InstallFrom.HasValue && InstallFrom.Value != new DateTime() && InstallTo.HasValue && InstallTo.Value != new DateTime())
            {
                subquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", start.Value.ToString("yyyy-MM-dd 00:00:00.000"), end.Value.ToString("yyyy-MM-dd 23:59:59.000"));
            }

            string searchquery = "";
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                searchquery += "and CHARINDEX(@SearchText, cus.SearchText) > 0";
            }

            string sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                SET @pagestart=(@pageno-1)* @pagesize 
                                SET @pageend = @pagesize

                                select * into #SaleCom from (Select
								Distinct(cus.Id),
								{0} as DisplayName,
                                lkleadstatus.DisplayText as LeadStatus,
								cus.CustomerNo,
                                cus.SalesDate,
                                tkLookUp.DisplayText as TicketType,
								emp.FirstName+' '+emp.LastName as SalesPerson,
								lksource.DisplayText as LeadSource,
								lklocation.DisplayText as SalesLocation,
								cus.Type,
								ISNULL(pc.ActivationFee+pc.NonConformingFee,0) as Actv,
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float) as RMR,
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Invoice tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0) as Equp,
                                inv.DiscountAmount as TotalDisc,
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Invoice tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0) as Serv,
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Invoice tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0) as AdvM,
								
								((
								ISNULL(pc.ActivationFee+pc.NonConformingFee,0)
								+
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Invoice tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Invoice tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Invoice tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0)
								) * (select Value from globalsetting where SearchKey = 'Sales Tax'))/100 as Tax,

								ISNULL(cus.FinancedAmount,0) as FinancedAmount,

								((ISNULL(pc.ActivationFee+pc.NonConformingFee,0)
								+
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Invoice tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Invoice tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Invoice tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0)
								)
								+
								((
								ISNULL(pc.ActivationFee+pc.NonConformingFee,0)
								+
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Invoice tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Invoice tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Invoice tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0)
								) * (select Value from globalsetting where SearchKey = 'Sales Tax'))/100
								--+
								--ISNULL(cus.FinancedAmount,0)
								) as Total
								from Customer cus
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
								LEFT JOIN CustomerCompany cc on cc.CustomerId=cus.CustomerId
								LEFT JOIN Employee emp on emp.UserId=cus.SoldBy1
                                left join Lookup lkleadstatus on lkleadstatus.DataKey ='LeadStatus' and lkleadstatus.DataValue = cus.Status and lkleadstatus.DataValue!='-1'
								left join Lookup lksource on lksource.DataKey ='LeadSource' and lksource.DataValue = cus.LeadSource and lksource.DataValue!='-1'
								left join Lookup lklocation on lklocation.DataKey = 'CommissionType' and lklocation.DataValue = cus.SalesLocation and lklocation.DataValue!='-1'
								LEFT join PackageCustomer pc on pc.CustomerId=cus.CustomerId
								LEFT JOIN PaymentInfoCustomer pic on pic.CustomerId=cus.CustomerId and pic.Payfor='Service'
			                    LEFT JOIN invoice inv on inv.CustomerId=cus.CustomerId
                                left join Lookup lkinvoicefor on lkinvoicefor.DataKey = 'InvoiceForList' and lkinvoicefor.DataValue = inv.InvoiceFor and lkinvoicefor.DataValue!='-1'
                                LEFT JOIN Ticket tk on tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1
								LEFT JOIN Lookup tkLookUp on tkLookUp.DataValue=tk.TicketType and tkLookUp.DataKey='TicketType'								
                                Where cc.IsLead=0 and cus.IsActive=1 and ce.IsTestAccount != 1 and cus.TransferCustomerId IS NULL and inv.DiscountAmount is not null and (cus.MoveCustomerId='00000000-0000-0000-0000-000000000000' or cus.MoveCustomerId IS NULL) {1} {2} {3}
								) d

								Select *, (Total-Tax) as TotalWoTax into #tempSaleCom from #SaleCom

								select top(@pagesize)
								* into #10SaleCom from #tempSaleCom
								where Id not in(select top(@pagestart) Id from #tempSaleCom #cd order by SalesDate desc)
                                order by SalesDate desc

								select * from #10SaleCom

								select count(*) CountTotal,count(Id) as CustomerCount,sum(Actv) as SumActNonFeeTotal,sum(RMR) as SumRMRTotal,sum(Equp) as SumEquipmentFeeTotal,sum(Serv) as SumServiceFeeTotal,sum(AdvM) as SumAdvancedMonitoringTotal,(sum(Total)-sum(Tax)) as SumTotalWoTax,sum(Tax) as SumTaxTotal,Sum(Total) as SumTotalSales,sum(FinancedAmount) as SumFinancedAmount from #SaleCom

								select 
								 sum(Actv) as TotalActNonFee
								,sum(RMR) as TotalRMR
								,sum(Equp) as TotalEquipmentFee
                                ,sum(TotalDisc) as TotalDiscEquipFee
								,sum(Serv) as TotalServiceFee
								,sum(AdvM) as TotalAdvancedMonitoring
								,sum(Tax) as TotalTotalTax
                                ,(sum(Total)-sum(Tax)) as TotalWoTax
								,sum(FinancedAmount) as FinancedAmount
								,sum(Total) as TotalSales
								from #10SaleCom

								drop table #SaleCom
								drop table #tempSaleCom
                                drop table #10SaleCom";
            try
            {
                sqlQuery = string.Format(sqlQuery, NameSql, subquery, searchquery, SalesPersonQuery);
                //logger.WithProperty("tags", "report,new sales").WithProperty("params", sqlQuery).Trace("Report >> New Sales 2 {0} | {1} | {2} | {3} | {4} | {5} ", SalesLocationList, LeadSourceList, LeadSourceTypeList, InvoiceTypeList, pageno, pagesize);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    if (!string.IsNullOrWhiteSpace(searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(searchtext.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex, sqlQuery);
                return null;
            }
        }

        public DataSet GetNewSalesReportALLByInvoices2(Guid companyid, DateTime? start, DateTime? end, string searchtext, int pageno, int pagesize, string order,
            List<string> SalesList, string SalesLocationList, string InvoiceTypeList, string LeadSourceList, string LeadSourceTypeList, DateTime? InstallFrom, DateTime? InstallTo)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string SalesPersonQuery = "";
            if (SalesList != null && SalesList.Count > 0 && SalesList[0] != "null")
            {
                string Ids = "";
                foreach (string id in SalesList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                SalesPersonQuery = "and emp.UserId in (" + Ids.TrimEnd(',') + ")";
            }

            //New Sales Report - Start

            if (!string.IsNullOrEmpty(SalesLocationList) && SalesLocationList != "null")
            {
                SalesPersonQuery += " and cus.SalesLocation ='" + SalesLocationList + "'";
            }

            if (!string.IsNullOrEmpty(InvoiceTypeList) && InvoiceTypeList != "null")
            {
                SalesPersonQuery += " and inv.InvoiceFor ='" + InvoiceTypeList + "'";
            }


            if (!string.IsNullOrEmpty(LeadSourceList) && LeadSourceList != "null")
            {
                SalesPersonQuery += " and cus.LeadSource ='" + LeadSourceList + "'";
            }


            if (!string.IsNullOrEmpty(LeadSourceTypeList) && LeadSourceTypeList != "null")
            {
                SalesPersonQuery += " and cus.LeadSourceType ='" + LeadSourceTypeList + "'";
            }


            //New Sales Report - End


            string subquery = "";
            if (start.HasValue && start.Value != new DateTime() && end.HasValue && end.Value != new DateTime())
            {
                subquery = string.Format("and cus.SalesDate between '{0}' and '{1}'", start.Value.ToString("yyyy-MM-dd 00:00:00.000"), end.Value.ToString("yyyy-MM-dd 23:59:59.000"));
            }

            if (InstallFrom.HasValue && InstallFrom.Value != new DateTime() && InstallTo.HasValue && InstallTo.Value != new DateTime())
            {
                subquery += string.Format("and cus.InstallDate between '{0}' and '{1}'", start.Value.ToString("yyyy-MM-dd 00:00:00.000"), end.Value.ToString("yyyy-MM-dd 23:59:59.000"));
            }

            string searchquery = "";
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                searchquery += "and CHARINDEX(@SearchText, cus.SearchText) > 0";
            }

            string sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                SET @pagestart=(@pageno-1)* @pagesize 
                                SET @pageend = @pagesize

                                select 
                                    cus.Id as Id,
                                    CASE 
                                    WHEN (cus.DBA = '' or cus.DBA IS NULL) AND  (cus.BusinessName = '' or cus.BusinessName IS NULL) THEN cus.FirstName +' '+cus.LastName
                                    WHEN (cus.DBA = '' or cus.DBA IS NULL)  THEN cus.BusinessName
                                    ELSE  cus.DBA
                                    END as DisplayName,
			                        cus.CustomerNo,
                                    cus.Type,                                                                                                
                                    emp.FirstName+' '+emp.LastName as SalesPerson,
                                    cus.SalesDate,
			                        lklocation.DisplayText as SalesLocation,

			                        tkLookUp.DisplayText as TicketType,            
                                    lksourcetype.DisplayText as LeadSourceType,
                                    lksource.DisplayText as LeadSource,
			                        
			                        lkleadstatus.DisplayText as LeadStatus,
                                    CONVERT(float, cus.MonthlyMonitoringFee) as RMR,
                                    ISNULL((select SUM(Amount) from Invoice inv where inv.CustomerId=cus.CustomerId and inv.InvoiceFor='ActivationNonConforming' and (inv.Status<>'Cancel' and inv.Status<>'Cancelled' ) group by inv.CustomerId) ,0 ) as Actv,
                                    ISNULL((select SUM(TotalPrice) from Invoice inv left join InvoiceDetail invdt on inv.InvoiceId=invdt.InvoiceId 
	                                    where invdt.EquipName = 'Monthly Monitoring Rate' and inv.CustomerId=cus.CustomerId and (inv.Status<>'Cancel' and inv.Status<>'Cancelled' ) group by inv.CustomerId ),0) as CollectedRMR,
                                    ISNULL((select SUM(Amount) from Invoice inv where inv.CustomerId=cus.CustomerId and inv.InvoiceFor='Equipment'  and (inv.Status<>'Cancel' and inv.Status<>'Cancelled' ) group by inv.CustomerId) ,0 ) as Equp,
                                    ISNULL((select SUM(invdt.DiscountAmount) from Invoice inv left join InvoiceDetail invdt on inv.InvoiceId=invdt.InvoiceId 
	                                    where inv.CustomerId=cus.CustomerId and (inv.Status<>'Cancel' and inv.Status<>'Cancelled' ) group by inv.CustomerId ),0) +
                                    ISNULL((select SUM(DiscountAmount) from Invoice inv where inv.CustomerId=cus.CustomerId and (inv.Status<>'Cancel' and inv.Status<>'Cancelled' ) group by inv.CustomerId) ,0 )as TotalDisc,
                                    ISNULL((select SUM(TotalPrice) from Invoice inv left join InvoiceDetail invdt on inv.InvoiceId=invdt.InvoiceId 
	                                    where inv.InvoiceFor<>'ActivationNonConforming' and inv.InvoiceFor<>'Equipment' and inv.CustomerId=cus.CustomerId 
	                                    and invdt.EquipName <> 'Advance Monitoring' and invdt.EquipName <> 'Monthly Monitoring Rate' and (inv.Status<>'Cancel' and inv.Status<>'Cancelled' ) group by inv.CustomerId ),0) as Serv,
                                    ISNULL((select SUM(TotalPrice) from Invoice inv left join InvoiceDetail invdt on inv.InvoiceId=invdt.InvoiceId 
	                                    where invdt.EquipName = 'Advance Monitoring' and inv.CustomerId=cus.CustomerId and (inv.Status<>'Cancel' and inv.Status<>'Cancelled' ) group by inv.CustomerId ),0) as AdvM,
                                    ISNULL((select SUM(TotalPrice) from Invoice inv left join InvoiceDetail invdt on inv.InvoiceId=invdt.InvoiceId 
	                                    where inv.CustomerId=cus.CustomerId and (inv.Status<>'Cancel' and inv.Status<>'Cancelled' ) group by inv.CustomerId ),0) as SubTotal,
                                    
                                    ISNULL((select SUM(Tax) from Invoice inv where inv.CustomerId=cus.CustomerId and (inv.Status<>'Cancel' and inv.Status<>'Cancelled' ) group by inv.CustomerId) ,0 ) as Tax,
                                    ISNULL((select SUM(TotalAmount) from Invoice inv where inv.CustomerId=cus.CustomerId and (inv.Status<>'Cancel' and inv.Status<>'Cancelled' ) group by inv.CustomerId) ,0 ) as Total,
                                    ISNULL(cus.FinancedAmount,0) as FinancedAmount1,
                                    ISNULL((select SUM(Amount) from Invoice inv 
                                    where inv.CustomerId=cus.CustomerId and inv.PaymentType='Financed' 
                                    group by inv.CustomerId) ,0 ) as FinancedAmount
                                    into #SaleCom from Customer cus
                                    left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                    left join Lookup lkleadstatus on lkleadstatus.DataKey ='LeadStatus' and lkleadstatus.DataValue = cus.Status 
                                        and lkleadstatus.DataValue!='-1'
                                    
                                    LEFT JOIN Ticket ak on ak.CustomerId=cus.CustomerId and ak.IsAgreementTicket=1
                                    LEFT JOIN Lookup tkLookUp on tkLookUp.DataValue=ak.TicketType and tkLookUp.DataKey='TicketType'	
                                    
                                    LEFT JOIN Lookup lksource on lksource.DataKey ='LeadSource' and lksource.DataValue = cus.LeadSource and lksource.DataValue!='-1'
                                    LEFT JOIN Lookup lksourcetype on lksourcetype.DataKey ='LeadSourceType' and lksourcetype.DataValue = cus.LeadSourceType and lksourcetype.DataValue!='-1'
                                    LEFT JOIN Lookup lklocation on lklocation.DataKey = 'CommissionType' and lklocation.DataValue = cus.SalesLocation and lklocation.DataValue!='-1'
                                    LEFT JOIN Employee emp on emp.UserId=cus.SoldBy1

                                Where ce.IsTestAccount=0 and cus.IsActive=1 and cus.TransferCustomerId IS NULL and (cus.MoveCustomerId='00000000-0000-0000-0000-000000000000' or cus.MoveCustomerId IS NULL) 
                                {1} {2} {3}

								--select *, (Total-Tax) as TotalWoTax, (Actv+RMR+Equp+Serv+AdvM) as ST, SubTotal as ST2, ((Actv+RMR+Equp+Serv+AdvM)-SubTotal) as DiffST, 
                                --    ((Actv+RMR+Equp+Serv+AdvM+Tax)-Disc) as NT, ROUND((((Actv+RMR+Equp+Serv+AdvM+Tax)-Disc)-Total),2) as DiffNT 
                                --    into #tempSaleCom from #SaleCom

                                select * into #tempSaleCom from #SaleCom

								select top(@pagesize)
								* into #10SaleCom from #tempSaleCom
								where Id not in(select top(@pagestart) Id from #tempSaleCom #cd order by SalesDate desc)
                                order by SalesDate desc

								select * from #10SaleCom

								select count(*) CountTotal,count(Id) as CustomerCount,sum(Actv) as SumActNonFeeTotal,sum(RMR) as SumRMRTotal,sum(Equp) as SumEquipmentFeeTotal,sum(Serv) as SumServiceFeeTotal,sum(AdvM) as SumAdvancedMonitoringTotal,(sum(Total)-sum(Tax)) as SumTotalWoTax,sum(Tax) as SumTaxTotal,Sum(Total) as SumTotalSales,sum(FinancedAmount) as SumFinancedAmount from #SaleCom

								select 
								 sum(Actv) as TotalActNonFee
								,sum(RMR) as TotalRMR
                                ,sum(CollectedRMR) as TotalCollectedRMR
								,sum(Equp) as TotalEquipmentFee
                                ,sum(TotalDisc) as TotalDiscEquipFee
								,sum(Serv) as TotalServiceFee
								,sum(AdvM) as TotalAdvancedMonitoring
								,sum(Tax) as TotalTotalTax
                                ,(sum(Total)-sum(Tax)) as TotalWoTax
								,sum(FinancedAmount) as FinancedAmount
								,sum(Total) as TotalSales
								from #10SaleCom

								drop table #SaleCom
								drop table #tempSaleCom
                                drop table #10SaleCom";
            try
            {
                sqlQuery = string.Format(sqlQuery, NameSql, subquery, searchquery, SalesPersonQuery);
                logger.WithProperty("tags", "report,new sales").WithProperty("params", sqlQuery).Trace("Report >> New Sales 2 {0} | {1} | {2} | {3} | {4} | {5} ", SalesLocationList, LeadSourceList, LeadSourceTypeList, InvoiceTypeList, pageno, pagesize);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    if (!string.IsNullOrWhiteSpace(searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(searchtext.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex, sqlQuery);
                return null;
            }
        }


        public DataTable GetSalesSummaryReportExportByCompanyId(Guid companyid, DateTime? start, DateTime? end, string searchtext)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string subquery = "";
            if (start.HasValue && start.Value != new DateTime() && end.HasValue && end.Value != new DateTime())
            {
                subquery = string.Format("and cus.JoinDate between '{0}' and '{1}'", start.Value.ToString("yyyy-MM-dd 00:00:00.000"), end.Value.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            string searchquery = "";
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                searchquery += "and CHARINDEX(@SearchText, cus.SearchText) > 0";
                //searchquery += string.Format("and (cus.FirstName like '%{0}%' or cus.LastName like '%{0}%' or cus.FirstName + ' ' + cus.LastName like '%{0}%' or cus.BusinessName like '%{0}%' or cus.DBA like '%{0}%')", searchtext);
            }
            string sqlQuery = @"select distinct(cus.Id) as Id,cusCom.ConvertionDate,{4} as [Customer Name]
                                ,ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(Amount,2)), 0)) from Invoice where InvoiceFor='ActivationNonConforming' and Status!='Cancelled' and Status!='Init' and CustomerId=cus.CustomerId), 0) as ActivationFeeNonConformingFee								
								--,CASE when ppc.Type like 'ACH%'
								--Then
								--format(((select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0)) from CustomerPackageService where PackageId = pc.PackageId and CustomerId = cus.CustomerId) 
								--- (select isnull(value, 0) from GlobalSetting where SearchKey = 'ACHDiscount')),'N2')
								--Else
								--format((select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0)) from CustomerPackageService where PackageId = pc.PackageId and CustomerId = cus.CustomerId),'N2') 
								--END As RMR

                                 ,ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(_invDetl.UnitPrice,2)), 0)) from Invoice _inv left join InvoiceDetail _invDetl on _invDetl.InvoiceId=_inv.InvoiceId where _inv.InvoiceFor='Service' and _inv.Status!='Cancelled' and _inv.Status!='Init' and _inv.CustomerId=cus.CustomerId), 0) 
                                  +ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(_invDetl.TotalPrice,2)), 0)) from Invoice _inv left join InvoiceDetail _invDetl on _invDetl.InvoiceId=_inv.InvoiceId left join Equipment _eqp on _eqp.EquipmentId=_invDetl.EquipmentId where _inv.InvoiceFor='Invoice' and _inv.Status!='Cancelled' and _inv.Status!='Init' and _inv.CustomerId=cus.CustomerId and _eqp.EquipmentClassId=2 and _eqp.IsARBEnabled=1),0) 
                                 As RMR
                                
								--,format(ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(Amount,2)), 0)) from Invoice where InvoiceFor='Equipment' and CustomerId=cus.CustomerId), 0),'N2') as EquipmentAmount
								,(ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(Amount,2)), 0)) from Invoice where InvoiceFor='Equipment' and Status!='Cancelled' and Status!='Init' and CustomerId=cus.CustomerId),0)
                                 +ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(_invDetl.TotalPrice,2)), 0)) from Invoice _inv left join InvoiceDetail _invDetl on _invDetl.InvoiceId=_inv.InvoiceId left join Equipment _eqp on _eqp.EquipmentId=_invDetl.EquipmentId where _inv.InvoiceFor='Invoice' and _inv.Status!='Cancelled' and _inv.Status!='Init' and _inv.CustomerId=cus.CustomerId and _eqp.EquipmentClassId=1),0)) as EquipmentAmount
                                
                                ,ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(_invDetl.TotalPrice,2)), 0)) from Invoice _inv left join InvoiceDetail _invDetl on _invDetl.InvoiceId=_inv.InvoiceId left join Equipment _eqp on _eqp.EquipmentId=_invDetl.EquipmentId where _inv.InvoiceFor='Invoice' and _inv.Status!='Cancelled' and _inv.Status!='Init' and _inv.CustomerId=cus.CustomerId and _eqp.EquipmentClassId=2 and _eqp.IsARBEnabled=0 and _eqp.IsARBEnabled is not null),0) As ServiceFee

								--,CASE when pics.ForMonths>1
								--Then
								--format((select SUM(ISNULL(CONVERT(decimal(18,2),round(Total,2)), 0))*(pics.ForMonths-1) from CustomerPackageService where CustomerId = cus.CustomerId)
								--- IIF(ppc.Type like 'ACH%', (select isnull(value, 0) from GlobalSetting where SearchKey = 'ACHDiscount'), 0),'N2')
								--Else '0.00'
								--END As AdvancedMonitoring
                                
                              ,(ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(_invDetl.TotalPrice,2)), 0)) from Invoice _inv left join InvoiceDetail _invDetl on _invDetl.InvoiceId=_inv.InvoiceId where _inv.InvoiceFor='Service' and _inv.Status!='Cancelled' and _inv.Status!='Init' and _inv.CustomerId=cus.CustomerId), 0))
                                -(ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(_invDetl.UnitPrice,2)), 0)) from Invoice _inv left join InvoiceDetail _invDetl on _invDetl.InvoiceId=_inv.InvoiceId where _inv.InvoiceFor='Service' and _inv.Status!='Cancelled' and _inv.Status!='Init' and _inv.CustomerId=cus.CustomerId), 0))
                               As AdvancedMonitoring

								,ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(Tax,2)), 0)) from Invoice where (InvoiceFor='ActivationNonConforming' or InvoiceFor='Service' or InvoiceFor='Equipment' or InvoiceFor='Invoice') and Status!='Cancelled' and Status!='Init' and CustomerId=cus.CustomerId), 0) as Tax
                                
								,ISNULL((select SUM(ISNULL(CONVERT(decimal(18,2),round(TotalAmount,2)), 0)) from Invoice where (InvoiceFor='ActivationNonConforming' or InvoiceFor='Service' or InvoiceFor='Equipment' or InvoiceFor='Invoice') and Status!='Cancelled' and Status!='Init' and CustomerId=cus.CustomerId), 0) as Total
								
								--,(select IIF(IsLead = 1, 'Lead', 'Customer') from CustomerCompany where CustomerId = cus.CustomerId) as [Status]
                                from Invoice inv
                                left join Customer cus on cus.CustomerId = inv.CustomerId
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
                                left join CustomerCompany cusCom on cusCom.CustomerId=cus.CustomerId
                                --left join PackageCustomer pc on pc.CustomerId=pc.CustomerId
                                --left join PaymentInfoCustomer pics on pics.CustomerId=cus.CustomerId and pics.Payfor='Service'
                                --LEFT JOIN PaymentProfileCustomer ppc on ppc.PaymentInfoId=pics.PaymentInfoId 
                                --LEFT JOIN PaymentInfoCustomer pics on pics.CustomerId=cus.CustomerId and pics.Payfor='Service'
								--LEFT JOIN PaymentProfileCustomer ppc on ppc.PaymentInfoId=pics.PaymentInfoId       
                                where cus.CustomerId is not null
								and cus.IsActive = 1
                                and ce.IsTestAccount != 1
                                and inv.CompanyId = '{0}'
                                {3}
                                {5}
                                group by cus.Id,cus.CustomerId, inv.CustomerId,cusCom.ConvertionDate,  {4}
                                order by Id desc";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyid, start, end, subquery, NameSql, searchquery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(searchtext.Trim())));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetNewSalesReportExportByCompanyId(Guid companyid, DateTime? start, DateTime? end, string searchtext, List<string> SalesList)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string SalesPersonQuery = "";
            if (SalesList != null && SalesList.Count > 0 && SalesList[0] != "null")
            {
                string Ids = "";
                foreach (string id in SalesList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                SalesPersonQuery = "and emp.UserId in (" + Ids.TrimEnd(',') + ")";
            }
            string subquery = "";
            if (start.HasValue && start.Value != new DateTime() && end.HasValue && end.Value != new DateTime())
            {
                subquery = string.Format("and cus.SalesDate between '{0}' and '{1}'", start.Value.ToString("yyyy-MM-dd 00:00:00.000"), end.Value.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            string searchquery = "";
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                searchquery += "and CHARINDEX(@SearchText, cus.SearchText) > 0";

                //searchquery += string.Format("and (cus.FirstName like '%{0}%' or cus.LastName like '%{0}%' or cus.FirstName + ' ' + cus.LastName like '%{0}%' or cus.BusinessName like '%{0}%' or cus.DBA like '%{0}%')", searchtext);
            }
            string sqlQuery = @"Select *into #tempNewSale from(Select
								Distinct(cus.Id),
								{0} as DisplayName,
                                lkleadstatus.DisplayText as LeadStatus,
                                cus.CustomerNo,
                                format(cus.SalesDate,'M/d/yy') as SalesDate,
								emp.FirstName+' '+emp.LastName as SalesPerson,
                                tkLookUp.DisplayText as TicketType,
								lksource.DisplayText as LeadSource, 
                                lksourcetype.DisplayText as LeadSourceType,
								lklocation.DisplayText as SalesLocation,
								case when cus.Type ='-1' then '' else cus.Type end as [Type],
								ISNULL(pc.ActivationFee+pc.NonConformingFee,0) as ActNonFee,
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float) as RMR,
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0) as EquipmentFee,
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0) as ServiceFee,
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0) as AdvancedMonitoring,
								
								((
								ISNULL(pc.ActivationFee+pc.NonConformingFee,0)
								+
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0)
							    ) * (select Value from globalsetting where SearchKey = 'Sales Tax'))/100 as TotalTax,

								ISNULL(cus.FinancedAmount,0) as FinancedAmount,

								((ISNULL(pc.ActivationFee+pc.NonConformingFee,0)
								+
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0)
								)
								+
								((
								ISNULL(pc.ActivationFee+pc.NonConformingFee,0)
								+
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0)
								) * (select Value from globalsetting where SearchKey = 'Sales Tax'))/100
								--+
								--ISNULL(cus.FinancedAmount,0)
								) as TotalSales
                                from Customer cus
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
								LEFT JOIN CustomerCompany cc on cc.CustomerId=cus.CustomerId
								LEFT JOIN Employee emp on emp.UserId=cus.SoldBy1
                                left join Lookup lkleadstatus on lkleadstatus.DataKey ='LeadStatus' and lkleadstatus.DataValue = cus.Status and lkleadstatus.DataValue!='-1'
								left join Lookup lksource on lksource.DataKey ='LeadSource' and lksource.DataValue = cus.LeadSource and lksource.DataValue!='-1'
                                left join Lookup lksourcetype on lksourcetype.DataKey ='LeadSourceType' and lksourcetype.DataValue = cus.LeadSourceType and lksourcetype.DataValue!='-1'								
                                left join Lookup lklocation on lklocation.DataKey = 'CommissionType' and lklocation.DataValue = cus.SalesLocation and lklocation.DataValue!='-1'
								LEFT join PackageCustomer pc on pc.CustomerId=cus.CustomerId
								LEFT JOIN PaymentInfoCustomer pic on pic.CustomerId=cus.CustomerId and pic.Payfor='Service'
                                LEFT JOIN Ticket tk on tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1
								LEFT JOIN Lookup tkLookUp on tkLookUp.DataValue=tk.TicketType and tkLookUp.DataKey='TicketType'																
                                Where cc.IsLead=0 and cus.IsActive=1 and ce.IsTestAccount != 1 and cus.TransferCustomerId IS NULL and (cus.MoveCustomerId='00000000-0000-0000-0000-000000000000' or cus.MoveCustomerId IS NULL) {1} {2} {3}) d

								Select *from #tempNewSale order by SalesDate desc

								drop table #tempNewSale";
            try
            {
                sqlQuery = string.Format(sqlQuery, NameSql, subquery, searchquery, SalesPersonQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(searchtext.Trim())));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetVariableCostReportExportByCompanyId(SalesReportFilter salesReportFilter)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }

            string SalesPersonQuery = "";
            if (salesReportFilter.SalesPersonList != null && salesReportFilter.SalesPersonList.Count > 0 && salesReportFilter.SalesPersonList[0] != "null")
            {
                string Ids = "";
                foreach (string id in salesReportFilter.SalesPersonList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                SalesPersonQuery = "and emp.UserId in (" + Ids.TrimEnd(',') + ")";
            }
            string TicketTypeQuery = "";
            if (salesReportFilter.TicketTypeList != null && salesReportFilter.TicketTypeList.Count > 0 && salesReportFilter.TicketTypeList[0] != "null")
            {
                string Ids = "";
                foreach (string id in salesReportFilter.TicketTypeList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                TicketTypeQuery = "and tk.TicketType in (" + Ids.TrimEnd(',') + ")";
            }
            string LeadSourceQuery = "";
            if (salesReportFilter.LeadSourceList != null && salesReportFilter.LeadSourceList.Count > 0 && salesReportFilter.LeadSourceList[0] != "null")
            {
                string Ids = "";
                foreach (string id in salesReportFilter.LeadSourceList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                LeadSourceQuery = "and cus.LeadSource in (" + Ids.TrimEnd(',') + ")";
            }
            string CustomerStatusQuery = "";
            if (salesReportFilter.CustomerStatusList != null && salesReportFilter.CustomerStatusList.Count > 0 && salesReportFilter.CustomerStatusList[0] != "null")
            {
                string Ids = "";
                foreach (string id in salesReportFilter.CustomerStatusList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                CustomerStatusQuery = "and cus.CustomerStatus in (" + Ids.TrimEnd(',') + ")";
            }
            string ScheduledOnquery = "";
            if (salesReportFilter.ScheduledOnMin.HasValue && salesReportFilter.ScheduledOnMin.Value != new DateTime() && salesReportFilter.ScheduledOnMax.HasValue && salesReportFilter.ScheduledOnMax.Value != new DateTime())
            {
                ScheduledOnquery = string.Format("and tk.CompletionDate between '{0}' and '{1}'", salesReportFilter.ScheduledOnMin.Value.ToString("yyyy-MM-dd 00:00:00.000"), salesReportFilter.ScheduledOnMax.Value.ToString("yyyy-MM-dd 00:00:00.000"));
            }
            string Installquery = "";
            if (salesReportFilter.InstallMin.HasValue && salesReportFilter.InstallMin.Value != new DateTime() && salesReportFilter.InstallMax.HasValue && salesReportFilter.InstallMax.Value != new DateTime())
            {
                Installquery = string.Format("and cus.InstallDate between '{0}' and '{1}'", salesReportFilter.InstallMin.Value.ToString("yyyy-MM-dd 00:00:00.000"), salesReportFilter.InstallMax.Value.ToString("yyyy-MM-dd 00:00:00.000"));
            }
            string Batchquery = "";
            if (salesReportFilter.BatchMin > 0 && salesReportFilter.BatchMax > 0)
            {
                Batchquery = string.Format("and Try_Convert(int,ce.Batch) between {0} and {1}", salesReportFilter.BatchMin, salesReportFilter.BatchMax);
            }
            else if (salesReportFilter.BatchMax > 0)
            {
                Batchquery = string.Format("and Try_Convert(int,ce.Batch) <= {0} and ce.Batch IS NOT NULL and ce.Batch <> ''", salesReportFilter.BatchMin, salesReportFilter.BatchMax);
            }
            else if (salesReportFilter.BatchMin > 0)
            {
                Batchquery = string.Format("and Try_Convert(int,ce.Batch) >= {0} and ce.Batch IS NOT NULL and ce.Batch <> ''", salesReportFilter.BatchMin, salesReportFilter.BatchMax);
            }
            string subquery = "";
            if (salesReportFilter.StartDate.HasValue && salesReportFilter.StartDate.Value != new DateTime() && salesReportFilter.EndDate.HasValue && salesReportFilter.EndDate.Value != new DateTime())
            {
                subquery = string.Format("and cus.SalesDate between '{0}' and '{1}'", salesReportFilter.StartDate.Value.ToString("yyyy-MM-dd 00:00:00.000"), salesReportFilter.EndDate.Value.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            string searchquery = "";
            if (!string.IsNullOrWhiteSpace(salesReportFilter.searchtext))
            {
                searchquery += "and CHARINDEX(@SearchText, cus.SearchText) > 0";
            }

            string sqlQuery = @"Select *into #tempNewSale from(Select
								Distinct(cus.Id),
								{0} as DisplayName,
								CONVERT(date,cus.SalesDate) as SalesDate,
								CONVERT(date,cus.InstallDate) InstallDate,
								emp.FirstName+' '+emp.LastName as Rep,
								lklocation.DisplayText as [Location],
                                lkleadstatus.DisplayText as LeadStatus,
                                cus.CustomerNo,
                                tkLookUp.DisplayText as TicketType,
								lksource.DisplayText as LeadSource,
								case when cus.Type ='-1' then '' else cus.Type end as [Type],
                                ce.Batch,

								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService=1 and eqp.IsARBEnabled=1),0) as RMR,

								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete'),0) as FirstMonths,

								ISNULL(pc.ActivationFee+pc.NonConformingFee,0) as Activation,

								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0) as OneTimeFee,

                                ISNULL(tk.MiscValue,0) as MISC,

								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService!=1),0) as EquipmentFee,

								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0) as AdvancedMonitoring,

								ISNULL(cus.FinancedAmount,0) as FinancedAmount,

								ISNULL((Select SUM(cae.Quantity*eqp.SupplierCost) from CustomerAppointmentEquipment cae
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService!=1 and cus.Soldby1=cae.CreatedByUid),0) as RepSold,

								ISNULL((Select SUM(cae.Quantity*eqp.SupplierCost) from CustomerAppointmentEquipment cae
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN TicketUser tu on tu.TiketId=tk.TicketId and tu.IsPrimary=1
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService!=1 and tu.UserId=cae.CreatedByUid),0) as TechSold,

                                ISNULL((Select SUM(cae.Quantity*eqp.SupplierCost) from CustomerAppointmentEquipment cae
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								LEFT JOIN TicketUser tu on tu.TiketId=tk.TicketId and tu.IsPrimary=1
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService!=1 and cus.Soldby1!=cae.CreatedByUid and tu.UserId!=cae.CreatedByUid),0) as OtherSold,

								ISNULL((Select SUM(tc.BaseRMRCommission) From TechCommission tc
								where tc.TicketId=tk.TicketId and tc.UserId=tu.UserId
								),0) as BaseRMRCommission,
								ISNULL((Select SUM(tc.Adjustment) From TechCommission tc
								where tc.TicketId=tk.TicketId and tc.UserId=tu.UserId
								),0) as Adjustment,

								ISNULL((Select SUM(tsc.TotalCommission) From SalesCommission tsc
								where tsc.TicketId=tk.TicketId and tsc.UserId=tu.UserId
								),0) as TechSalesCommission,
								ISNULL((Select SUM(rsc.TotalCommission) From SalesCommission rsc
								where rsc.TicketId=tk.TicketId and rsc.UserId=cus.Soldby1
								),0) as RepSalesCommission,
								
                                ISNULL((Select SUM(frc.Commission) From FinRepCommission frc
								where frc.TicketId=tk.TicketId and frc.UserId=ce.FinanceRep
								),0) as FinRepSalesCommission,

								ISNULL((Select SUM(amc.Commission) From AddMemberCommission amc
								where amc.TicketId=tk.TicketId
								),0) as AddMemberCommission

                                from Customer cus
                                LEFT JOIN CustomerExtended ce on ce.CustomerId=cus.CustomerId
								LEFT JOIN CustomerCompany cc on cc.CustomerId=cus.CustomerId
								LEFT JOIN Employee emp on emp.UserId=cus.SoldBy1
                                left join Lookup lkleadstatus on lkleadstatus.DataKey ='LeadStatus' and lkleadstatus.DataValue = cus.Status and lkleadstatus.DataValue!='-1'
								left join Lookup lksource on lksource.DataKey ='LeadSource' and lksource.DataValue = cus.LeadSource and lksource.DataValue!='-1'
								left join Lookup lklocation on lklocation.DataKey = 'CommissionType' and lklocation.DataValue = cus.SalesLocation and lklocation.DataValue!='-1'
								LEFT join PackageCustomer pc on pc.CustomerId=cus.CustomerId
								LEFT JOIN PaymentInfoCustomer pic on pic.CustomerId=cus.CustomerId and pic.Payfor='Service'
                                LEFT JOIN Ticket tk on tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and (tk.TicketType='Installation' or tk.TicketType='Install NFT')
								LEFT JOIN TicketUser tu on tu.TiketId = tk.TicketId and tu.IsPrimary=1
								LEFT JOIN Lookup tkLookUp on tkLookUp.DataValue=tk.TicketType and tkLookUp.DataKey='TicketType'																
                                Where cc.IsLead=0 and cus.IsActive=1 and ce.IsTestAccount != 1 and cus.TransferCustomerId IS NULL and (cus.MoveCustomerId='00000000-0000-0000-0000-000000000000' or cus.MoveCustomerId IS NULL) {1} {2} {3} {4} {5} {6} {7} {8} {9}) d

								Select 
								Id as [Cust ID],
								DisplayName as [Name],
								format(SalesDate,'M/d/yy') as [Sales Date],
								InstallDate as [Install Complete],
								Rep,
								Location,
								TicketType as [Ticket Type],
								LeadSource as [Lead Source],
								Type,
                                Batch,
								ROUND(RMR,2) as RMR,

								ROUND(FirstMonths,2) as [First Months],
								ROUND(Activation,2) as Activation,
								ROUND(OneTimeFee,2) as [One Time Fee],
								ROUND(EquipmentFee,2) as Equip,
								ROUND(AdvancedMonitoring,2) as [Adv Mon],
								ROUND(FinancedAmount,2) as Finance,

                                ROUND(MISC,2) as [Miscellaneous Expense],
								ROUND(RepSold,2) as [Rep Sold],
								ROUND(TechSold,2) as [Tech Sold],
                                ROUND(OtherSold,2) as [Other Sold],
								ROUND(MISC+RepSold+TechSold+OtherSold,2) as [Total Sold],

								ROUND(BaseRMRCommission,2) as [Base RMR Commission],
								ROUND(Adjustment,2) as [Points],
								ROUND(AddMemberCommission,2) as [Additional Member Commission],
								ROUND(BaseRMRCommission+Adjustment+AddMemberCommission,2) as [Total Labor Commission],

								ROUND(TechSalesCommission,2) as [Tech Sales Commission],
								ROUND(RepSalesCommission,2) as [Rep Sales Commission],
								ROUND(FinRepSalesCommission,2) as [Fin Rep Sales Commission],
								ROUND(TechSalesCommission+RepSalesCommission+FinRepSalesCommission,2) as [Total Sales Commission],

								ROUND(ISNULL(FirstMonths+Activation+OneTimeFee+EquipmentFee+AdvancedMonitoring,0),2) as Revenue,
								ROUND(ISNULL(MISC+RepSold+TechSold+OtherSold+BaseRMRCommission+Adjustment+AddMemberCommission+TechSalesCommission+RepSalesCommission+FinRepSalesCommission,0),2) as Cost,
								ROUND(ISNULL((FirstMonths+Activation+OneTimeFee+EquipmentFee+AdvancedMonitoring)
								-(MISC+RepSold+TechSold+OtherSold+BaseRMRCommission+Adjustment+AddMemberCommission+TechSalesCommission+RepSalesCommission+FinRepSalesCommission),0),2) as Net,
								CASE when RMR=0
								THEN 0
								ELSE
								ROUND(ISNULL(((FirstMonths+Activation+OneTimeFee+EquipmentFee+AdvancedMonitoring)
								-(MISC+RepSold+TechSold+OtherSold+BaseRMRCommission+Adjustment+AddMemberCommission+TechSalesCommission+RepSalesCommission+FinRepSalesCommission))/RMR,0),2)
								END as [Cr Mult]
								from #tempNewSale order by [Cust ID] desc

								drop table #tempNewSale";
            try
            {
                sqlQuery = string.Format(sqlQuery, NameSql, subquery, searchquery, SalesPersonQuery, TicketTypeQuery, LeadSourceQuery, CustomerStatusQuery, ScheduledOnquery, Installquery, Batchquery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(salesReportFilter.searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(salesReportFilter.searchtext.Trim())));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataSet GetRMRAuditList(RMRAuditFilter filter)
        {
            DateTime asOfDate = DateTime.Now.SetMaxHour();
            DateTime asOfDateUTC = DateTime.UtcNow.SetMaxHour();
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string subquery = "";
            if (filter.AsOfDate.HasValue && filter.AsOfDate.Value != new DateTime())
            {
                asOfDateUTC = filter.AsOfDate.Value.SetClientMaxHourToUTC();
                asOfDate = filter.AsOfDate.Value.SetMaxHour();
                subquery = string.Format("and cus.SalesDate <= '{0}'", filter.AsOfDate.Value.ToString("yyyy-MM-dd 00:00:00.000"));
            }
            string searchquery = "";
            if (!string.IsNullOrWhiteSpace(filter.SearchText))
            {
                searchquery += "and CHARINDEX(@SearchText, cus.SearchText) > 0";
            }

            string sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                SET @pagestart=(@pageno-1)* @pagesize 
                                SET @pageend = @pagesize

                                select * into #SaleCom from (
								select
								cus.Id,
                                {0} as DisplayName,
                                dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.City,cus.[State],cus.ZipCode) as [Address],
								cus.Street,
								cus.City,
								cus.State,
								cus.ZipCode,
								cus.EmailAddress,
								cus.PrimaryPhone,
								cus.StreetPrevious,
								cus.CityPrevious,
								cus.StatePrevious,
								cus.ZipCodePrevious,
                                dbo.MakeAddress(cus.StreetPrevious,'','',cus.CityPrevious,cus.[StatePrevious],cus.ZipCodePrevious) as [AddressPrevious],
								(Select SUM(BalanceDue) from Invoice inv where inv.CustomerId=cus.CustomerId) as BalanceDue,
                                cus.InstallDate,
								cae.EquipName,
								cae.TotalPrice as RMR
								from CustomerAppointmentEquipment cae
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Customer cus on cus.CustomerId = tk.CustomerId
								LEFT JOIN CustomerExtended ce on ce.CustomerId=cus.CustomerId
								LEFT JOIN CustomerCompany cc on cc.CustomerId=cus.CustomerId
								where cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsBilling=1
                                and cc.IsLead=0 and cus.IsActive=1 and ce.IsTestAccount != 1 
								and cus.TransferCustomerId IS NULL 
								and (cus.MoveCustomerId='00000000-0000-0000-0000-000000000000' or cus.MoveCustomerId IS NULL)
                                and cae.CreatedDate <= '{4}'
                                {1} {2}
								) d
								select top(@pagesize)
								* into #10SaleCom from #SaleCom
								where Id not in(select top(@pagestart) Id from #SaleCom #cd order by Id desc)
                                order by Id desc

								select *from #10SaleCom

								select 
                                SUM(RMR) as TotalRMR
								from #10SaleCom

								select
                                count(*) as Totalcount,
								COUNT(Distinct Id) as CustomerTotalCount,
								SUM(RMR) as CustomerTotalRMR
								from #SaleCom

								drop table #SaleCom
                                drop table #10SaleCom";
            try
            {
                sqlQuery = string.Format(sqlQuery, NameSql, subquery, searchquery, asOfDate, asOfDateUTC);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", filter.PageNo));
                    AddParameter(cmd, pInt32("pagesize", filter.PageSize));
                    if (!string.IsNullOrWhiteSpace(filter.SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(filter.SearchText.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataSet GetVariableCostReportALLByCompanyId(SalesReportFilter salesReportFilter)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string SalesPersonQuery = "";
            if (salesReportFilter.SalesPersonList != null && salesReportFilter.SalesPersonList.Count > 0 && salesReportFilter.SalesPersonList[0] != "null")
            {
                string Ids = "";
                foreach (string id in salesReportFilter.SalesPersonList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                SalesPersonQuery = "and emp.UserId in (" + Ids.TrimEnd(',') + ")";
            }
            string TicketTypeQuery = "";
            if (salesReportFilter.TicketTypeList != null && salesReportFilter.TicketTypeList.Count > 0 && salesReportFilter.TicketTypeList[0] != "null")
            {
                string Ids = "";
                foreach (string id in salesReportFilter.TicketTypeList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                TicketTypeQuery = "and tk.TicketType in (" + Ids.TrimEnd(',') + ")";
            }
            string LeadSourceQuery = "";
            if (salesReportFilter.LeadSourceList != null && salesReportFilter.LeadSourceList.Count > 0 && salesReportFilter.LeadSourceList[0] != "null")
            {
                string Ids = "";
                foreach (string id in salesReportFilter.LeadSourceList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                LeadSourceQuery = "and cus.LeadSource in (" + Ids.TrimEnd(',') + ")";
            }
            string CustomerStatusQuery = "";
            if (salesReportFilter.CustomerStatusList != null && salesReportFilter.CustomerStatusList.Count > 0 && salesReportFilter.CustomerStatusList[0] != "null")
            {
                string Ids = "";
                foreach (string id in salesReportFilter.CustomerStatusList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                CustomerStatusQuery = "and cus.CustomerStatus in (" + Ids.TrimEnd(',') + ")";
            }
            string ScheduledOnquery = "";
            if (salesReportFilter.ScheduledOnMin.HasValue && salesReportFilter.ScheduledOnMin.Value != new DateTime() && salesReportFilter.ScheduledOnMax.HasValue && salesReportFilter.ScheduledOnMax.Value != new DateTime())
            {
                ScheduledOnquery = string.Format("and tk.CompletionDate between '{0}' and '{1}'", salesReportFilter.ScheduledOnMin.Value.ToString("yyyy-MM-dd 00:00:00.000"), salesReportFilter.ScheduledOnMax.Value.ToString("yyyy-MM-dd 00:00:00.000"));
            }
            string Installquery = "";
            if (salesReportFilter.InstallMin.HasValue && salesReportFilter.InstallMin.Value != new DateTime() && salesReportFilter.InstallMax.HasValue && salesReportFilter.InstallMax.Value != new DateTime())
            {
                Installquery = string.Format("and cus.InstallDate between '{0}' and '{1}'", salesReportFilter.InstallMin.Value.ToString("yyyy-MM-dd 00:00:00.000"), salesReportFilter.InstallMax.Value.ToString("yyyy-MM-dd 00:00:00.000"));
            }
            string Batchquery = "";
            if (salesReportFilter.BatchMin > 0 && salesReportFilter.BatchMax > 0)
            {
                Batchquery = string.Format("and Try_Convert(int,ce.Batch) between {0} and {1}", salesReportFilter.BatchMin, salesReportFilter.BatchMax);
            }
            else if (salesReportFilter.BatchMax > 0)
            {
                Batchquery = string.Format("and Try_Convert(int,ce.Batch) <= {0} and ce.Batch IS NOT NULL and ce.Batch <> ''", salesReportFilter.BatchMin, salesReportFilter.BatchMax);
            }
            else if (salesReportFilter.BatchMin > 0)
            {
                Batchquery = string.Format("and Try_Convert(int,ce.Batch) >= {0} and ce.Batch IS NOT NULL and ce.Batch <> ''", salesReportFilter.BatchMin, salesReportFilter.BatchMax);
            }
            string subquery = "";
            if (salesReportFilter.StartDate.HasValue && salesReportFilter.StartDate.Value != new DateTime() && salesReportFilter.EndDate.HasValue && salesReportFilter.EndDate.Value != new DateTime())
            {
                subquery = string.Format("and cus.SalesDate between '{0}' and '{1}'", salesReportFilter.StartDate.Value.ToString("yyyy-MM-dd 00:00:00.000"), salesReportFilter.EndDate.Value.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            string searchquery = "";
            if (!string.IsNullOrWhiteSpace(salesReportFilter.searchtext))
            {
                searchquery += "and CHARINDEX(@SearchText, cus.SearchText) > 0";
            }

            string sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                SET @pagestart=(@pageno-1)* @pagesize 
                                SET @pageend = @pagesize

                                select * into #SaleCom from (Select
								Distinct(cus.Id),
								{0} as DisplayName,
                                lkleadstatus.DisplayText as LeadStatus,
								cus.CustomerNo,
                                cus.SalesDate,
                                tkLookUp.DisplayText as TicketType,
								emp.FirstName+' '+emp.LastName as SalesPerson,
								lksource.DisplayText as LeadSource,
								lklocation.DisplayText as SalesLocation,
								cus.Type,

                                ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService=1 and eqp.IsARBEnabled=1),0) as RMR,

								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete'),0) as FirstMonths,

								ISNULL(pc.ActivationFee+pc.NonConformingFee,0) as Activation,

								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0) as OneTimeFee,

								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService!=1),0) as EquipmentFee,

                                ISNULL(tk.MiscValue,0) as MISC,

								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0) as AdvancedMonitoring,

								ISNULL(cus.FinancedAmount,0) as FinancedAmount,

								ISNULL((Select SUM(cae.Quantity*eqp.SupplierCost) from CustomerAppointmentEquipment cae
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService!=1 and cus.Soldby1=cae.CreatedByUid),0) as RepSold,

								ISNULL((Select SUM(cae.Quantity*eqp.SupplierCost) from CustomerAppointmentEquipment cae
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN TicketUser tu on tu.TiketId=tk.TicketId and tu.IsPrimary=1
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService!=1 and tu.UserId=cae.CreatedByUid),0) as TechSold,

								ISNULL((Select SUM(cae.Quantity*eqp.SupplierCost) from CustomerAppointmentEquipment cae
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								LEFT JOIN TicketUser tu on tu.TiketId=tk.TicketId and tu.IsPrimary=1
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService!=1 and cus.Soldby1!=cae.CreatedByUid and tu.UserId!=cae.CreatedByUid),0) as OtherSold,

								ISNULL((Select SUM(tc.BaseRMRCommission) From TechCommission tc
								where tc.TicketId=tk.TicketId and tc.UserId=tu.UserId
								),0) as BaseRMRCommission,
								ISNULL((Select SUM(tc.Adjustment) From TechCommission tc
								where tc.TicketId=tk.TicketId and tc.UserId=tu.UserId
								),0) as Adjustment,

								ISNULL((Select SUM(tsc.TotalCommission) From SalesCommission tsc
								where tsc.TicketId=tk.TicketId and tsc.UserId=tu.UserId
								),0) as TechSalesCommission,
								ISNULL((Select SUM(rsc.TotalCommission) From SalesCommission rsc
								where rsc.TicketId=tk.TicketId and rsc.UserId=cus.Soldby1
								),0) as RepSalesCommission,

								ISNULL((Select SUM(frc.Commission) From FinRepCommission frc
								where frc.TicketId=tk.TicketId and frc.UserId=ce.FinanceRep
								),0) as FinRepSalesCommission,

								ISNULL((Select SUM(amc.Commission) From AddMemberCommission amc
								where amc.TicketId=tk.TicketId
								),0) as AddMemberCommission

								from Customer cus
                                LEFT JOIN CustomerExtended ce on ce.CustomerId=cus.CustomerId
								LEFT JOIN CustomerCompany cc on cc.CustomerId=cus.CustomerId
								LEFT JOIN Employee emp on emp.UserId=cus.SoldBy1
                                left join Lookup lkleadstatus on lkleadstatus.DataKey ='LeadStatus' and lkleadstatus.DataValue = cus.Status and lkleadstatus.DataValue!='-1'
								left join Lookup lksource on lksource.DataKey ='LeadSource' and lksource.DataValue = cus.LeadSource and lksource.DataValue!='-1'
								left join Lookup lklocation on lklocation.DataKey = 'CommissionType' and lklocation.DataValue = cus.SalesLocation and lklocation.DataValue!='-1'
								LEFT join PackageCustomer pc on pc.CustomerId=cus.CustomerId
								LEFT JOIN PaymentInfoCustomer pic on pic.CustomerId=cus.CustomerId and pic.Payfor='Service'
                                LEFT JOIN Ticket tk on tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1  and (tk.TicketType='Installation' or tk.TicketType='Install NFT')
                                LEFT JOIN TicketUser tu on tu.TiketId = tk.TicketId and tu.IsPrimary=1
								LEFT JOIN Lookup tkLookUp on tkLookUp.DataValue=tk.TicketType and tkLookUp.DataKey='TicketType'								
                                Where cc.IsLead=0 and cus.IsActive=1 and ce.IsTestAccount != 1 and cus.TransferCustomerId IS NULL and (cus.MoveCustomerId='00000000-0000-0000-0000-000000000000' or cus.MoveCustomerId IS NULL) {1} {2} {3} {4} {5} {6} {7} {8} {9}
								) d

								Select 
								Id,
								DisplayName,
								LeadStatus,
								CustomerNo,
                                SalesDate,
                                TicketType,
								SalesPerson,
								LeadSource,
								SalesLocation,
								Type,
								ROUND(RMR,2) as RMR,
								ROUND(ISNULL(FirstMonths+Activation+OneTimeFee+EquipmentFee+AdvancedMonitoring,0),2) as Revenue,
								ROUND(MISC+RepSold+TechSold+OtherSold,2) as [EquipVendorCost],
								ROUND(BaseRMRCommission+Adjustment+AddMemberCommission,2) as [Labor],
								ROUND(TechSalesCommission+RepSalesCommission+FinRepSalesCommission,2) as [Comm],
                                ROUND(MISC,2) as [MISC],
								ROUND(ISNULL(MISC+RepSold+TechSold+OtherSold+BaseRMRCommission+Adjustment+AddMemberCommission+TechSalesCommission+RepSalesCommission+FinRepSalesCommission,0),2) as TtlCost,
								ROUND(ISNULL((FirstMonths+Activation+OneTimeFee+EquipmentFee+AdvancedMonitoring)
								-(MISC+RepSold+TechSold+OtherSold+BaseRMRCommission+Adjustment+AddMemberCommission+TechSalesCommission+RepSalesCommission+FinRepSalesCommission),0),2) as Net,
								CASE when RMR=0
								THEN 0
								ELSE
								ROUND(ISNULL(((FirstMonths+Activation+OneTimeFee+EquipmentFee+AdvancedMonitoring)
								-(MISC+RepSold+TechSold+OtherSold+BaseRMRCommission+Adjustment+TechSalesCommission+RepSalesCommission+FinRepSalesCommission+AddMemberCommission))/RMR,0),2)
								END as CrMult
								into #tempSaleCom from #SaleCom

								select top(@pagesize)
								* into #10SaleCom from #tempSaleCom
								where Id not in(select top(@pagestart) Id from #tempSaleCom #cd order by SalesDate desc)
                                order by SalesDate desc

								select * from #10SaleCom

								select 
                                count(*) as Totalcount,
								count(*) as SumCustomer,
								SUM(RMR) as SumRMR,
								SUM(Revenue) as SumRevenue,
								SUM(EquipVendorCost) as SumEquipCost,
								SUM(Labor) as SumLabor,
								SUM(Comm) as SumCommission,
                                SUM(MISC) as SumMiscExp,
								SUM(TtlCost) as SumTotalCost,
								SUM(TtlCost)/count(*) as SumAvgCost,
								SUM(Revenue)-SUM(TtlCost) as SumNet,
                                CASE when SUM(RMR)=0
								THEN 0
								ELSE
								(SUM(Revenue)-SUM(TtlCost))/SUM(RMR)
								END as SumCrMul
                                from #tempSaleCom

								select 
								 sum(Revenue) as TotalRevenue
								,sum(RMR) as TotalRMR
								,sum(EquipVendorCost) as TotalEquipVendorCost
								,sum(Labor) as TotalLabor
								,sum(Comm) as TotalComm
								,sum(MISC) as TotalMiscExp
								,sum(TtlCost) as TotalTtlCost
								,sum(Net) as TotalNet
								,CASE when SUM(RMR)=0
								THEN 0
								ELSE
								(SUM(Revenue)-SUM(TtlCost))/SUM(RMR)
								END as TotalCrMult
								from #10SaleCom

								drop table #SaleCom
								drop table #tempSaleCom
                                drop table #10SaleCom";
            try
            {
                sqlQuery = string.Format(sqlQuery, NameSql, subquery, searchquery, SalesPersonQuery, TicketTypeQuery, LeadSourceQuery, CustomerStatusQuery, ScheduledOnquery, Installquery, Batchquery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", salesReportFilter.pageno));
                    AddParameter(cmd, pInt32("pagesize", salesReportFilter.pagesize));
                    if (!string.IsNullOrWhiteSpace(salesReportFilter.searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(salesReportFilter.searchtext.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetInsideCommissionReportExportByCompanyId(Guid companyid, DateTime? start, DateTime? end, string searchtext, List<string> SalesRepList, List<string> FinRepList, DateTime? PayrollStartDate, DateTime? PayrollEndDate)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string SalesRepQuery = "";
            if (SalesRepList != null && SalesRepList.Count > 0 && SalesRepList[0] != "null")
            {
                string Ids = "";
                foreach (string id in SalesRepList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                SalesRepQuery = "and emp.UserId in (" + Ids.TrimEnd(',') + ")";
            }
            string FinRepQuery = "";
            if (FinRepList != null && FinRepList.Count > 0 && FinRepList[0] != "null")
            {
                string Ids = "";
                foreach (string id in FinRepList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                FinRepQuery = "and empFinRep.UserId in (" + Ids.TrimEnd(',') + ")";
            }
            string subquery = "";
            if (start.HasValue && start.Value != new DateTime() && end.HasValue && end.Value != new DateTime())
            {
                string daystart = start.Value.SetClientZeroHourToUTC().ToString();
                string dayend = end.Value.SetClientMaxHourToUTC().ToString();
                subquery = string.Format("and sc.PaidDate between '{0}' and '{1}'", daystart, dayend);
            }
            string subqueryPayrollDate = "";
            if (PayrollStartDate.HasValue && PayrollStartDate.Value != new DateTime() && PayrollEndDate.HasValue && PayrollEndDate.Value != new DateTime())
            {
                string daystart = PayrollStartDate.Value.SetZeroHour().ToString();
                string dayend = PayrollEndDate.Value.SetMaxHour().ToString();
                subqueryPayrollDate = string.Format(" where PayrollDate between '{0}' and '{1}'", daystart, dayend);
            }
            string searchquery = "";
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                searchquery += "and (CHARINDEX(@SearchText, cus.SearchText) > 0 or sc.Batch=@SearchText)";
            }
            string sqlQuery = @"DECLARE @NextDayID INT;
                                SET @NextDayID = 2; -- Next Monday
                                Select *into #CustomerList 
								from (Select CustomerId,Batch,PaidDate from SalesCommission where IsPaid=1 and Batch<>'' group by CustomerId,Batch,PaidDate) e
                                
                                select * into #SaleCom from(
                                Select
								CONVERT(date,sc.PaidDate) as PaidDate,
								CONVERT(date,DATEADD(DAY, (DATEDIFF(DAY, ((@NextDayID + 5) % 7), sc.PaidDate) / 7) * 7 + 7, ((@NextDayID + 5) % 7))) as PayrollDate,
								CASE WHEN isnumeric(sc.Batch + '.0e0') = 1 
									then cast(sc.Batch as int) 
									else 0 
							    end as Batch,
								emp.FirstName+' '+emp.LastName as SalesPerson,
								cus.Id,
								{0} as DisplayName,
                                
                                ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService=1 and eqp.IsARBEnabled=1),0) as RMR,

								ISNULL(pc.ActivationFee+pc.NonConformingFee,0) as Activation,

								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService!=1),0) as EquipmentFee,

                                ISNULL((Select SUM(sc.TotalCommission) From SalesCommission sc
								where sc.TicketId=tk.TicketId
								),0) as TotalSalesCommission,

								ISNULL((Select SUM(tc.TotalCommission) From TechCommission tc
								where tc.TicketId=tk.TicketId
								),0) as TotalTechCommission,

								ISNULL((Select SUM(amc.Commission) From AddMemberCommission amc
								where amc.TicketId=tk.TicketId
								),0) as TotalAddMemberCommission,

								empFinRep.FirstName+' '+empFinRep.LastName as FinanceRep,
                                frc.Commission as FinRepCommission
								from #CustomerList sc 
								LEFT JOIN Customer cus on cus.CustomerId=sc.CustomerId
                                LEFT JOIN Lookup lksl on lksl.datavalue=cus.SalesLocation and lksl.Datakey='CommissionType'
								LEFT JOIN CustomerExtended ce on ce.CustomerId=cus.CustomerId
								LEFT JOIN Employee empFinRep on empFinRep.UserId=ce.FinanceRep
								LEFT JOIN Employee emp on emp.UserId=cus.SoldBy1
								LEFT join PackageCustomer pc on pc.CustomerId=cus.CustomerId
                                LEFT JOIN Ticket tk on tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1
								LEFT JOIN FinRepCommission frc on frc.TicketId=tk.TicketId
                                Where cus.Id>0  and ce.IsTestAccount != 1 and lksl.DisplayText='Inside Sales' {1} {2} {3} {4}
                                ) d

                                Select 
								PaidDate,
                                PayrollDate,
								Batch,
								SalesPerson,
								Id,
								DisplayName as Customer,
								ROUND(RMR,2) as RMR,
								ROUND(Activation,2) as Activation,
								ROUND(EquipmentFee,2) as EquipmentFee,
								ROUND(ISNULL(Activation+EquipmentFee,0),2) as Total,
								ROUND(ISNULL(TotalSalesCommission+TotalTechCommission+TotalAddMemberCommission,0),2) as Comm,
								FinanceRep,
								FinRepCommission
								from #SaleCom {5}
                                order by Batch desc    
                                
								drop table #CustomerList
								drop table #SaleCom";
            try
            {
                sqlQuery = string.Format(sqlQuery, NameSql, subquery, searchquery, SalesRepQuery, FinRepQuery, subqueryPayrollDate);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(searchtext.Trim())));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataSet GetInsideCommissionReportALLByCompanyId(Guid companyid, DateTime? start, DateTime? end, string searchtext, int pageno, int pagesize, List<string> SalesRepList, List<string> FinRepList, DateTime? PayrollStartDate, DateTime? PayrollEndDate)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string SalesRepQuery = "";
            if (SalesRepList != null && SalesRepList.Count > 0 && SalesRepList[0] != "null")
            {
                string Ids = "";
                foreach (string id in SalesRepList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                SalesRepQuery = "and emp.UserId in (" + Ids.TrimEnd(',') + ")";
            }
            string FinRepQuery = "";
            if (FinRepList != null && FinRepList.Count > 0 && FinRepList[0] != "null")
            {
                string Ids = "";
                foreach (string id in FinRepList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                FinRepQuery = "and empFinRep.UserId in (" + Ids.TrimEnd(',') + ")";
            }
            string subquery = "";
            if (start.HasValue && start.Value != new DateTime() && end.HasValue && end.Value != new DateTime())
            {
                string daystart = start.Value.SetClientZeroHourToUTC().ToString();
                string dayend = end.Value.SetClientMaxHourToUTC().ToString();
                subquery = string.Format("and sc.PaidDate between '{0}' and '{1}'", daystart, dayend);
            }
            string subqueryPayrollDate = "";
            if (PayrollStartDate.HasValue && PayrollStartDate.Value != new DateTime() && PayrollEndDate.HasValue && PayrollEndDate.Value != new DateTime())
            {
                string daystart = PayrollStartDate.Value.SetZeroHour().ToString();
                string dayend = PayrollEndDate.Value.SetMaxHour().ToString();
                subqueryPayrollDate = string.Format(" where PayrollDate between '{0}' and '{1}'", daystart, dayend);
            }
            string searchquery = "";
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                searchquery += "and (CHARINDEX(@SearchText, cus.SearchText) > 0 or sc.Batch=@SearchText)";
            }

            string sqlQuery = @"
                                DECLARE @NextDayID INT;
                                SET @NextDayID = 2; -- Next Monday
                                declare @pagestart int
                                declare @pageend int
                                SET @pagestart=(@pageno-1)* @pagesize 
                                SET @pageend = @pagesize

                                Select *into #CustomerList 
								from (Select CustomerId,Batch,PaidDate from SalesCommission where IsPaid=1 and Batch<>'' group by CustomerId,Batch,PaidDate) e

                                select * into #SaleCom from (Select
								sc.PaidDate,
								DATEADD(DAY, (DATEDIFF(DAY, ((@NextDayID + 5) % 7), sc.PaidDate) / 7) * 7 + 7, ((@NextDayID + 5) % 7)) as PayrollDate,
								CASE WHEN isnumeric(sc.Batch + '.0e0') = 1 
									then cast(sc.Batch as int) 
									else 0 
							    end as Batch,
								emp.FirstName+' '+emp.LastName as SalesPerson,
								cus.Id,
								{0} as DisplayName,
                                
                                ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService=1 and eqp.IsARBEnabled=1),0) as RMR,

								ISNULL(pc.ActivationFee+pc.NonConformingFee,0) as Activation,

								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1 and cae.IsService!=1),0) as EquipmentFee,

                                ISNULL((Select SUM(sc.TotalCommission) From SalesCommission sc
								where sc.TicketId=tk.TicketId
								),0) as TotalSalesCommission,

								ISNULL((Select SUM(tc.TotalCommission) From TechCommission tc
								where tc.TicketId=tk.TicketId
								),0) as TotalTechCommission,

								ISNULL((Select SUM(amc.Commission) From AddMemberCommission amc
								where amc.TicketId=tk.TicketId
								),0) as TotalAddMemberCommission,

								empFinRep.FirstName+' '+empFinRep.LastName as FinanceRep,
								frc.Commission as FinRepCommission

								from #CustomerList sc 
								LEFT JOIN Customer cus on cus.CustomerId=sc.CustomerId
                                LEFT JOIN Lookup lksl on lksl.datavalue=cus.SalesLocation and lksl.Datakey='CommissionType'
								LEFT JOIN CustomerExtended ce on ce.CustomerId=cus.CustomerId
								LEFT JOIN Employee empFinRep on empFinRep.UserId=ce.FinanceRep
								LEFT JOIN Employee emp on emp.UserId=cus.SoldBy1
								LEFT join PackageCustomer pc on pc.CustomerId=cus.CustomerId
                                LEFT JOIN Ticket tk on tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1
								LEFT JOIN FinRepCommission frc on frc.TicketId=tk.TicketId
                                Where cus.Id>0 and ce.IsTestAccount != 1 and lksl.DisplayText='Inside Sales' {1} {2} {3} {4}
								) d

								Select 
								PaidDate,
                                PayrollDate,
								Batch,
								SalesPerson,
								Id,
								DisplayName,
								ROUND(RMR,2) as RMR,
								ROUND(Activation,2) as Activation,
								ROUND(EquipmentFee,2) as EquipmentFee,
								ROUND(ISNULL(Activation+EquipmentFee,0),2) as Total,
								ROUND(ISNULL(TotalSalesCommission+TotalTechCommission+TotalAddMemberCommission,0),2) as Comm,
								FinanceRep,
								FinRepCommission
								into #tempSaleCom from #SaleCom {5}

								select top(@pagesize)
								* into #10SaleCom from #tempSaleCom
								where Id not in(select top(@pagestart) Id from #tempSaleCom #cd order by Batch desc)
                                order by Batch desc

								select * from #10SaleCom

								select 
                                count(*) as Totalcount,
								count(*) as SumCustomer,
								SUM(RMR) as SumRMR,
								SUM(Activation) as SumActivation,
								SUM(EquipmentFee) as SumEquipmentFee,
								SUM(Total) as SumTotal,
								SUM(Comm) as SumComm,
								SUM(FinRepCommission) as SumFinRepCommission
                                from #tempSaleCom

								select 
								sum(RMR) as TotalRMR
								,sum(Activation) as TotalActivation
								,sum(EquipmentFee) as TotalEquipmentFee
								,sum(Total) as TotalTotal
								,sum(Comm) as TotalComm
								,sum(FinRepCommission) as TotalFinRepCommission
								from #10SaleCom

                                drop table #CustomerList
								drop table #SaleCom
								drop table #tempSaleCom
                                drop table #10SaleCom";
            try
            {
                sqlQuery = string.Format(sqlQuery, NameSql, subquery, searchquery, SalesRepQuery, FinRepQuery, subqueryPayrollDate);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    if (!string.IsNullOrWhiteSpace(searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(searchtext.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetRecurringBillingDetailsByCompanyId(Guid companyid, string maxdate, string mindate, string searchtext, string methodtype)
        {
            string subquery = "";
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                subquery = string.Format("and (cus.FirstName like '%{0}%' or cus.LastName like '%{0}%' or cus.FirstName + ' ' + cus.LastName like '%{0}%' or cus.AuthorizeRefId like '%{0}%')", searchtext);
            }
            if (!string.IsNullOrWhiteSpace(methodtype))
            {
                subquery += string.Format("and inv.InvoiceFor = '{0}'", methodtype);
            }
            string sqlQuery = @"select distinct cus.Id, cus.CustomerId, cus.FirstName, cus.LastName, cus.AuthorizeRefId, iif(inv.InvoiceFor = 'SystemGenerated', 'Invoice', inv.InvoiceFor) as MethodPayment,
                                ISNULL((select SUM(pc.NonConformingFee) from PackageCustomer pc where pc.CustomerId = cus.CustomerId) + (select SUM(pc.ActivationFee) from PackageCustomer pc where pc.CustomerId = cus.CustomerId)
                                + (select SUM(cps.Total) from CustomerPackageService cps where cps.CustomerId = cus.CustomerId)
                                + (select SUM(cpe.Total) from CustomerPackageEqp cpe where cpe.CustomerId = cus.CustomerId), 0)
								+ ISNULL((select SUM(inv.Amount) from Invoice inv where inv.CustomerId = cus.CustomerId and inv.[Status] = 'Paid'), 0)
								+ ISNULL((select SUM(inv.Amount) from Invoice inv where inv.CustomerId = cus.CustomerId and (inv.[Status] = 'Open' or inv.[Status] = 'Partial')), 0)
                                as TotalSales,

                                ISNULL((select SUM(cps.Total) from CustomerPackageService cps where cps.CustomerId = cus.CustomerId), 0) as TotalRMR,

                                (((ISNULL((select SUM(pc.NonConformingFee) from PackageCustomer pc where pc.CustomerId = cus.CustomerId) + (select SUM(pc.ActivationFee) from PackageCustomer pc where pc.CustomerId = cus.CustomerId)
                                + (select SUM(cps.Total) from CustomerPackageService cps where cps.CustomerId = cus.CustomerId)
                                + (select SUM(cpe.Total) from CustomerPackageEqp cpe where cpe.CustomerId = cus.CustomerId), 0) 
								+ ISNULL((select SUM(inv.Amount) from Invoice inv where inv.CustomerId = cus.CustomerId and inv.[Status] = 'Paid'), 0)
								+ ISNULL((select SUM(inv.Amount) from Invoice inv where inv.CustomerId = cus.CustomerId and (inv.[Status] = 'Open' or inv.[Status] = 'Partial')), 0))
								* (select Value from globalsetting where SearchKey = 'Sales Tax')) / 100) as TotalTax,

                                ISNULL(((select SUM(pc.NonConformingFee) from PackageCustomer pc where pc.CustomerId = cus.CustomerId) + (select SUM(pc.ActivationFee) from PackageCustomer pc where pc.CustomerId = cus.CustomerId)) 
                                + ((((select SUM(pc.NonConformingFee) from PackageCustomer pc where pc.CustomerId = cus.CustomerId) + (select SUM(pc.ActivationFee) from PackageCustomer pc where pc.CustomerId = cus.CustomerId)) * (select Value from globalsetting where SearchKey = 'Sales Tax')) / 100)
                                + ((select SUM(cps.Total) from CustomerPackageService cps where cps.CustomerId = cus.CustomerId) + ((((select SUM(cps.Total) from CustomerPackageService cps where cps.CustomerId = cus.CustomerId)) * (select Value from globalsetting where SearchKey = 'Sales Tax')) / 100))
                                + ((select SUM(cpe.Total) from CustomerPackageEqp cpe where cpe.CustomerId = cus.CustomerId) + ((((select SUM(cpe.Total) from CustomerPackageEqp cpe where cpe.CustomerId = cus.CustomerId)) * (select Value from globalsetting where SearchKey = 'Sales Tax')) / 100)), 0)
								+ ISNULL((select SUM(inv.Amount) from Invoice inv where inv.CustomerId = cus.CustomerId and inv.[Status] = 'Paid'), 0) + ((ISNULL((select SUM(inv.Amount) from Invoice inv where inv.CustomerId = cus.CustomerId and inv.[Status] = 'Paid'), 0) * (select Value from globalsetting where SearchKey = 'Sales Tax')) / 100)
								+ ISNULL((select SUM(inv.Amount) from Invoice inv where inv.CustomerId = cus.CustomerId and (inv.[Status] = 'Open' or inv.[Status] = 'Partial')), 0) + ((ISNULL((select SUM(inv.Amount) from Invoice inv where inv.CustomerId = cus.CustomerId and (inv.[Status] = 'Open' or inv.[Status] = 'Partial')), 0) * (select Value from globalsetting where SearchKey = 'Sales Tax')) / 100)
								as SalesAfterTax,

                                ISNULL((select SUM(inv.TotalAmount) from Invoice inv where inv.CustomerId = cus.CustomerId and inv.[Status] = 'Paid'), 0) as TotalPaid,

                                ISNULL((select SUM(inv.TotalAmount) from Invoice inv where inv.CustomerId = cus.CustomerId and (inv.[Status] = 'Open' or inv.[Status] = 'Partial')), 0) as TotalUnpaid

                                from Customer cus
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                left join Invoice inv on inv.CustomerId = cus.CustomerId
                                where cc.CompanyId = '{0}'
                                and cc.IsLead = 0
                                and inv.CreatedDate between '{1}' and '{2}'
                                and inv.CreatedByUid = '22222222-2222-2222-2222-222222222222'
								and inv.CreatedBy = 'system'
								and (inv.InvoiceFor = 'ACH' or inv.InvoiceFor = 'Credit Card' or inv.InvoiceFor = 'SystemGenerated')
                                {3}";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyid, mindate, maxdate, subquery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        #region GetConversionReport

        public DataSet GetAllConversionReport(DateTime FilterStartDate, DateTime FilterEndDate, string order, int pageno, int pagesize, bool IsPaid)
        {


            string DateFilter1 = "";


            if (FilterStartDate != new DateTime() && FilterEndDate != new DateTime())
            {

                FilterStartDate = FilterStartDate.SetZeroHour();
                FilterEndDate = FilterEndDate.SetMaxHour();
                DateFilter1 = string.Format("and cp.ConvertionDate between '{0}' and '{1}'"
                    , FilterStartDate.ToString("yyyy-MM-dd HH:mm:ss")
                    , FilterEndDate.ToString("yyyy-MM-dd HH:mm:ss"));
            }
            //if (IsPaid)
            //{
            //    IsPaidQuery = "where mc.IsPaid = 1";
            //}
            //else
            //{
            //    IsPaidQuery = "where mc.IsPaid = 0 or mc.IsPaid is null    ";
            //}
            string sqlQuery = @"
                                declare @pagestart int
                                declare @pageend int
                                set @pagestart=(@pageno-1)*@pagesize
                                set @pageend = @pagesize

                                 select * into #JobsReport  from (select cus.Id,cus.CustomerId,cus.FirstName+' '+cus.LastName as CustomerName,cus.SSN,cus.Type,cus.BusinessName,cus.DateofBirth,cus.PrimaryPhone,
                                 cus.SecondaryPhone,cus.CellNo,cus.Fax,cus.EmailAddress,cus.Address,cus.Street,cus.City,cus.State,
                                 cus.ZipCode,cus.Note,cus.Status,cus.ActivationFee,cus.CreatedDate,cp.ConvertionDate from Customer cus
                                 left join CustomerCompany cp on cp.CustomerId = cus.CustomerId where cp.ConvertionDate is not null and cus.IsActive = 1
                                 {3}                        
                                ) d	

                                 select * into #JobsReportFilter
								from #JobsReport


								select top(@pagesize)
								* from #JobsReportFilter
								where Id not in(select top(@pagestart) Id from #JobsReport #e {1})
                                {2}
								select count(*) CountTotal
                                from #JobsReportFilter
                                
								drop table #JobsReport
								drop table #JobsReportFilter";

            string subquery = "";
            string subquery1 = "";
            if (!string.IsNullOrWhiteSpace(order))
            {
                if (order == "ascending/CustomerName")
                {
                    subquery = "order by #e.CustomerName asc";
                    subquery1 = "order by CustomerName asc";
                }
                else if (order == "descending/CustomerName")
                {
                    subquery = "order by #e.CustomerName desc";
                    subquery1 = "order by CustomerName desc";
                }
                else if (order == "ascending/PrimaryPhone")
                {
                    subquery = "order by #e.PrimaryPhone asc";
                    subquery1 = "order by PrimaryPhone asc";
                }
                else if (order == "descending/PrimaryPhone")
                {
                    subquery = "order by #e.PrimaryPhone desc";
                    subquery1 = "order by PrimaryPhone desc";
                }
                else if (order == "ascending/EmailAddress")
                {
                    subquery = "order by #e.EmailAddress asc";
                    subquery1 = "order by EmailAddress asc";
                }
                else if (order == "descending/EmailAddress")
                {
                    subquery = "order by #e.EmailAddress desc";
                    subquery1 = "order by EmailAddress desc";
                }
                else if (order == "ascending/Address")
                {
                    subquery = "order by #e.Address asc";
                    subquery1 = "order by Address asc";
                }
                else if (order == "descending/Address")
                {
                    subquery = "order by #e.Address desc";
                    subquery1 = "order by Address desc";
                }
                else if (order == "ascending/CreatedDate")
                {
                    subquery = "order by #e.CreatedDate asc";
                    subquery1 = "order by CreatedDate asc";
                }
                else if (order == "descending/CreatedDate")
                {
                    subquery = "order by #e.CreatedDate desc";
                    subquery1 = "order by CreatedDate desc";
                }
                else if (order == "ascending/ConvertionDate")
                {
                    subquery = "order by #e.ConvertionDate asc";
                    subquery1 = "order by ConvertionDate asc";
                }
                else if (order == "descending/ConvertionDate")
                {
                    subquery = "order by #e.ConvertionDate desc";
                    subquery1 = "order by ConvertionDate desc";
                }

            }
            else
            {
                subquery = "order by #e.CreatedDate desc";
                subquery1 = "order by CreatedDate desc";
            }
            try
            {
                sqlQuery = string.Format(sqlQuery, order, subquery, subquery1, DateFilter1);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }

            }
            catch (Exception ee)
            {
                return null;
            }

        }



        #endregion

        public DataTable GetGlobalSearchCustomerAndLeadByKey(string key, Guid comid)
        {
            string sqlQuery = @"select cus.*, iif(cc.IsLead = 1, 'Lead', 'Customer') as CustomerType from Customer cus
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                where (Title like '%{0}%' or [Type] like '%{0}%' or FirstName like '%{0}%' or LastName like '%{0}%' or FirstName + ' ' + LastName like '%{0}%' or Street like '%{0}%' or City like '%{0}%' or [State] like '%{0}%' or ZipCode like '%{0}%' or BusinessName like '%{0}%' or REPLACE(PrimaryPhone,'-','') like '%{0}%' or PrimaryPhone like '%{0}%' or REPLACE(SecondaryPhone,'-','') like '%{0}%' or SecondaryPhone like '%{0}%' or EmailAddress like '%{0}%' or iif(cc.IsLead = 1, 'Lead', 'Customer') like '%{0}%')
                                and cc.CompanyId = '{1}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, key, comid);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetCustomerByMovedCustomerIdAndType(Guid customerid)
        {
            string sqlQuery = @"select cus.Id, cus.FirstName, cus.LastName, cus.BusinessName, cus.DBA, cc.IsLead from customer cus
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                where cus.MoveCustomerId = '{0}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, customerid);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        #region RWST Report
        public DataSet GetRWSTList(DateTime? Start, DateTime? End, int pageno, int pagesize, string searchtext, string Status, string SalesPerson, string order)
        {
            string DateQuery = "";
            string SearchText = "";
            string CusStatus = "";
            string SalesPersonQ = "";
            string orderquery = "";
            string orderquery1 = "";
            #region Order
            if (!string.IsNullOrWhiteSpace(order))
            {
                if (order == "ascending/customer")
                {
                    orderquery = "order by #ed.[CustomerName] asc";
                    orderquery1 = "order by [CustomerName] asc";
                }
                else if (order == "descending/customer")
                {
                    orderquery = "order by #ed.[CustomerName] desc";
                    orderquery1 = "order by [CustomerName] desc";
                }
                else if (order == "ascending/address")
                {
                    orderquery = "order by #ed.Address asc";
                    orderquery1 = "order by Address asc";
                }
                else if (order == "descending/address")
                {
                    orderquery = "order by #ed.Address desc";
                    orderquery1 = "order by Address desc";
                }
                else if (order == "ascending/phone")
                {
                    orderquery = "order by #ed.[PrimaryPhone] asc";
                    orderquery1 = "order by [PrimaryPhone] asc";
                }
                else if (order == "descending/phone")
                {
                    orderquery = "order by #ed.[PrimaryPhone] desc";
                    orderquery1 = "order by [PrimaryPhone] desc";
                }
                else if (order == "ascending/email")
                {
                    orderquery = "order by #ed.[EmailAddress] asc";
                    orderquery1 = "order by [EmailAddress] asc";
                }
                else if (order == "descending/email")
                {
                    orderquery = "order by #ed.[EmailAddress] desc";
                    orderquery1 = "order by [EmailAddress] desc";
                }
                else if (order == "ascending/leadsource")
                {
                    orderquery = "order by #ed.[LeadSource] asc";
                    orderquery1 = "order by [LeadSource] asc";
                }
                else if (order == "descending/leadsource")
                {
                    orderquery = "order by #ed.[LeadSource] desc";
                    orderquery1 = "order by [LeadSource] desc";
                }
                else if (order == "ascending/status")
                {
                    orderquery = "order by #ed.[Status] asc";
                    orderquery1 = "order by [Status] asc";
                }
                else if (order == "descending/status")
                {
                    orderquery = "order by #ed.[Status] desc";
                    orderquery1 = "order by [Status] desc";
                }
                else if (order == "ascending/onetofive")
                {
                    orderquery = "order by #ed.[NinetyPlusValue] asc";
                    orderquery1 = "order by [NinetyPlusValue] asc";
                }
                else if (order == "descending/onetofive")
                {
                    orderquery = "order by #ed.[NinetyPlusValue] desc";
                    orderquery1 = "order by [NinetyPlusValue] desc";
                }
                else if (order == "ascending/sixtoten")
                {
                    orderquery = "order by #ed.[CustomerIntId] asc";
                    orderquery1 = "order by [TotalValue] asc";
                }
                else if (order == "descending/sixtoten")
                {
                    orderquery = "order by #ed.[CustomerIntId] desc";
                    orderquery1 = "order by [TotalValue] desc";
                }
                else if (order == "ascending/eleventofifteen")
                {
                    orderquery = "order by #ed.[CustomerIntId] asc";
                    orderquery1 = "order by [TotalValue] asc";
                }
                else if (order == "descending/eleventofifteen")
                {
                    orderquery = "order by #ed.[CustomerIntId] desc";
                    orderquery1 = "order by [TotalValue] desc";
                }
                else
                {
                    orderquery = "order by #ed.[Id]  desc";
                    orderquery1 = "order by Id desc";
                }

            }
            else
            {
                orderquery = "order by #ed.[Id] desc";
                orderquery1 = "order by Id desc";
            }
            #endregion
            if (Start != new DateTime() && End != new DateTime())
            {
                DateQuery = string.Format("and cus.CreatedDate between '{0}' and '{1}'", Start, End);
            }

            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                SearchText = string.Format("and (cus.Title +' '+ cus.FirstName +' '+ cus.LastName like '%{0}%' or  cus.EmailAddress = '{0}')", searchtext);
            }

            if (!string.IsNullOrWhiteSpace(Status) && Status != "'null'")
            {
                CusStatus = string.Format("and cus.[Status] in ({0})", Status);
            }

            if (!string.IsNullOrWhiteSpace(SalesPerson) && SalesPerson != "'null'")
            {
                SalesPersonQ = string.Format("and cus.FirstName +' '+ cus.LastName in ({0})", SalesPerson);
            }
            string sqlQuery = @"    DECLARE @Date nvarchar(50)
	                                DECLARE @pagestart int
	                                DECLARE @pageend int
	                                DECLARE @pageno int
	                                DECLARE @pagesize int

                                    SET @pageno = {0} --default 1
									SET @pagesize = {1} --default 10
                                    SET @pagestart=(@pageno-1)* @pagesize 
                                    SET @pageend = @pagesize

                                    select
											cus.Id
											,cus.Title +' '+ cus.FirstName +' '+ cus.LastName as CustomerName
											,dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.City,cus.[State],cus.ZipCode) as [Address]
											,cus.PrimaryPhone
											,cus.EmailAddress
											,cus.LeadSource
											,cus.[Status]
											,cusEx.RWST1
											,cusEx.RWST2
											,cusEx.RWST3
											,cusEx.RWST4
											,cusEx.RWST5
											,cusEx.RWST6
											,cusEx.RWST7
											,cusEx.RWST8
											,cusEx.RWST9
											,cusEx.RWST10
											,cusEx.RWST11
											,cusEx.RWST12
											,cusEx.RWST13
											,cusEx.RWST14
											,cusEx.RWST15

									into #TempData

									from Customer cus
									left join CustomerExtended cusEx on cusEx.CustomerId = cus.CustomerId
                                    where (cus.Title +' '+ cus.FirstName +' '+ cus.LastName is not null and cus.Title +' '+ cus.FirstName +' '+ cus.LastName != '') and
                                          (cusEx.RWST1 is not null and cusEx.RWST1 != '-1'
										  or cusEx.RWST2 is not null and cusEx.RWST2 != '-1'
										  or cusEx.RWST3 is not null and cusEx.RWST3 != '-1'
										  or cusEx.RWST4 is not null and cusEx.RWST4 != '-1'
										  or cusEx.RWST5 is not null and cusEx.RWST5 != '-1'
										  or cusEx.RWST6 is not null and cusEx.RWST6 != '-1'
										  or cusEx.RWST7 is not null and cusEx.RWST7 != '-1'
										  or cusEx.RWST8 is not null and cusEx.RWST8 != '-1'
										  or cusEx.RWST9 is not null and cusEx.RWST9 != '-1'
										  or cusEx.RWST10 is not null and cusEx.RWST10 != '-1'
										  or cusEx.RWST11 is not null and cusEx.RWST11 != '-1'
										  or cusEx.RWST12 is not null and cusEx.RWST12 != '-1'
										  or cusEx.RWST13 is not null and cusEx.RWST13 != '-1'
										  or cusEx.RWST14 is not null and cusEx.RWST14 != '-1'
										  or cusEx.RWST15 is not null and cusEx.RWST15 != '-1')
									{2}
									{3}
                                    {4}
                                    
									SELECT TOP (@pagesize) #ed.*
                                                                FROM #TempData #ed
                                                                where Id NOT IN(Select TOP (@pagestart) Id from #TempData #ed {5})
                                                                {6}
                                                                select count(Id) as [TotalCustomer] from #TempData
                                                                DROP TABLE #TempData";

            try
            {
                sqlQuery = string.Format(sqlQuery,
                                        pageno,
                                        pagesize,
                                        DateQuery,
                                        SearchText,
                                        CusStatus,
                                        orderquery,
                                        orderquery1

                                        );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable DownloadPurchaseOrderReport(DateTime? Start, DateTime? End, string searchtext, string Status, string SalesPerson)
        {
            string DateQuery = "";
            string SearchText = "";
            string CusStatus = "";
            string SalesPersonQ = "";
            if (Start != new DateTime() && End != new DateTime())
            {
                DateQuery = string.Format("and cus.CreatedDate between '{0}' and '{1}'", Start, End);
            }

            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                SearchText = string.Format("and (cus.Title +' '+ cus.FirstName +' '+ cus.LastName like '%{0}%' or  cus.EmailAddress = '{0}')", searchtext);
            }

            if (!string.IsNullOrWhiteSpace(Status) && Status != "'null'")
            {
                CusStatus = string.Format("and cus.[Status] in ({0})", Status);
            }

            //if (!string.IsNullOrWhiteSpace(SalesPerson) && SalesPerson != "'null'")
            //{
            //    SalesPersonQ = string.Format("and (cus.Soldby in ({0}) or cus.SoldBy2 in ({0}) or cus.SoldBy3 in ({0}) or cusEx.SalesPerson4 = in ({0}))", SalesPerson);
            //}
            //if (!string.IsNullOrWhiteSpace(SalesPerson) && SalesPerson != "'null'")
            //{
            //    SalesPersonQ = string.Format("and cus.FirstName +' '+ cus.LastName in ({0})", SalesPerson);
            //}
            string sqlQuery = @"select
									cus.Title +' '+ cus.FirstName +' '+ cus.LastName as CustomerName,
                                    Cus.Id as CustomerId
									,dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.City,cus.[State],cus.ZipCode) as [Address]
									,dbo.PhoneNumFormat(cus.PrimaryPhone) as PrimaryPhone
									,cus.EmailAddress
									,CASE WHEN cus.LeadSource = '-1' THEN  ' ' WHEN cus.LeadSource != '-1' THEN  cus.LeadSource end LeadSource
									,cus.[Status]
									,CASE WHEN cusEx.RWST1 = '-1' THEN  ' ' WHEN cusEx.RWST1 != '-1' THEN  cusEx.RWST1 end RWST1
									,CASE WHEN cusEx.RWST2 = '-1' THEN  ' ' WHEN cusEx.RWST2 != '-1' THEN  cusEx.RWST2 end RWST2
									,CASE WHEN cusEx.RWST3 = '-1' THEN  ' ' WHEN cusEx.RWST3 != '-1' THEN  cusEx.RWST3 end RWST3
									,CASE WHEN cusEx.RWST4 = '-1' THEN  ' ' WHEN cusEx.RWST4 != '-1' THEN  cusEx.RWST4 end RWST4
									,CASE WHEN cusEx.RWST5 = '-1' THEN  ' ' WHEN cusEx.RWST5 != '-1' THEN  cusEx.RWST5 end RWST5
									,CASE WHEN cusEx.RWST6 = '-1' THEN  ' ' WHEN cusEx.RWST6 != '-1' THEN  cusEx.RWST6 end RWST6
									,CASE WHEN cusEx.RWST7 = '-1' THEN  ' ' WHEN cusEx.RWST7 != '-1' THEN  cusEx.RWST7 end RWST7
									,CASE WHEN cusEx.RWST8 = '-1' THEN  ' ' WHEN cusEx.RWST8 != '-1' THEN  cusEx.RWST8 end RWST8
									,CASE WHEN cusEx.RWST9 = '-1' THEN  ' ' WHEN cusEx.RWST9 != '-1' THEN  cusEx.RWST9 end RWST9
									,CASE WHEN cusEx.RWST10 = '-1' THEN  ' ' WHEN cusEx.RWST10 != '-1' THEN  cusEx.RWST10 end RWST10
									,CASE WHEN cusEx.RWST11 = '-1' THEN  ' ' WHEN cusEx.RWST11 != '-1' THEN  cusEx.RWST11 end RWST11
									,CASE WHEN cusEx.RWST12 = '-1' THEN  ' ' WHEN cusEx.RWST12 != '-1' THEN  cusEx.RWST12 end RWST12
									,CASE WHEN cusEx.RWST13 = '-1' THEN  ' ' WHEN cusEx.RWST13 != '-1' THEN  cusEx.RWST13 end RWST13
									,CASE WHEN cusEx.RWST14 = '-1' THEN  ' ' WHEN cusEx.RWST14 != '-1' THEN  cusEx.RWST14 end RWST14
									,CASE WHEN cusEx.RWST15 = '-1' THEN  ' ' WHEN cusEx.RWST15 != '-1' THEN  cusEx.RWST15 end RWST15

									from Customer cus
									left join CustomerExtended cusEx on cusEx.CustomerId = cus.CustomerId
                                    where (cus.Title +' '+ cus.FirstName +' '+ cus.LastName is not null and cus.Title +' '+ cus.FirstName +' '+ cus.LastName != '') and
                                            (cusEx.RWST1 is not null and cusEx.RWST1 != '-1'
										  or cusEx.RWST2 is not null and cusEx.RWST2 != '-1'
										  or cusEx.RWST3 is not null and cusEx.RWST3 != '-1'
										  or cusEx.RWST4 is not null and cusEx.RWST4 != '-1'
										  or cusEx.RWST5 is not null and cusEx.RWST5 != '-1'
										  or cusEx.RWST6 is not null and cusEx.RWST6 != '-1'
										  or cusEx.RWST7 is not null and cusEx.RWST7 != '-1'
										  or cusEx.RWST8 is not null and cusEx.RWST8 != '-1'
										  or cusEx.RWST9 is not null and cusEx.RWST9 != '-1'
										  or cusEx.RWST10 is not null and cusEx.RWST10 != '-1'
										  or cusEx.RWST11 is not null and cusEx.RWST11 != '-1'
										  or cusEx.RWST12 is not null and cusEx.RWST12 != '-1'
										  or cusEx.RWST13 is not null and cusEx.RWST13 != '-1'
										  or cusEx.RWST14 is not null and cusEx.RWST14 != '-1'
										  or cusEx.RWST15 is not null and cusEx.RWST15 != '-1')
									    {0}
									    {1}
                                        {2}
                                        

									Order  by CustomerName";

            try
            {
                sqlQuery = string.Format(sqlQuery,
                                        DateQuery,
                                        SearchText,
                                        CusStatus

                                        );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #endregion
        public DataSet GetCustomerListAgingWithCount(DateTime? EndDate, string SearchText, int pageno, int pagesize, string reportFor, string order)
        {
            string sqlQuery = @"";
            #region Naming Condition
            string NamingSql = "''";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            if (gs != null)
            {
                NamingSql = gs.Value;
            }
            #endregion
            string createddateSubQuery = "";
            string orderquery = "";
            string orderquery1 = "";
            string searchQuery = "";
            string recurringQuery = "";
            DateTime End = DateTime.UtcNow;
            if (!string.IsNullOrEmpty(SearchText))
            {
                //searchQuery = string.Format(" and (cus.FirstName+' '+cus.LastName like '%{0}%' or cus.BusinessName like '%{0}%' or cus.DBA like '%{0}%' or emp.FirstName +' '+emp.LastName like '%{0}%')", SearchText);
                searchQuery = "and CHARINDEX(@SearchText, cus.SearchText) > 0";

            }
            if (reportFor == "RecurringBill")
            {
                recurringQuery = string.Format(" and inv.IsARBInvoice = 1 ");
            }
            #region Order
            if (!string.IsNullOrWhiteSpace(order))
            {
                if (order == "ascending/name")
                {
                    orderquery = "order by #cd.[CustomerName] asc";
                    orderquery1 = "order by [CustomerName] asc";
                }
                else if (order == "descending/name")
                {
                    orderquery = "order by #cd.[CustomerName] desc";
                    orderquery1 = "order by [CustomerName] desc";
                }
                else if (order == "ascending/salesperson")
                {
                    orderquery = "order by #cd.SalesPerson asc";
                    orderquery1 = "order by SalesPerson asc";
                }
                else if (order == "descending/salesperson")
                {
                    orderquery = "order by #cd.SalesPerson desc";
                    orderquery1 = "order by SalesPerson desc";
                }
                else if (order == "ascending/current")
                {
                    orderquery = "order by #cd.[CurrentValue] asc";
                    orderquery1 = "order by [CurrentValue] asc";
                }
                else if (order == "descending/current")
                {
                    orderquery = "order by #cd.[CurrentValue] desc";
                    orderquery1 = "order by [CurrentValue] desc";
                }
                else if (order == "ascending/onethirty")
                {
                    orderquery = "order by #cd.[OneThirtyValue] asc";
                    orderquery1 = "order by [OneThirtyValue] asc";
                }
                else if (order == "descending/onethirty")
                {
                    orderquery = "order by #cd.[OneThirtyValue] desc";
                    orderquery1 = "order by [OneThirtyValue] desc";
                }
                else if (order == "ascending/thirtyonesixty")
                {
                    orderquery = "order by #cd.[ThirtyOneSixtyValue] asc";
                    orderquery1 = "order by [ThirtyOneSixtyValue] asc";
                }
                else if (order == "descending/thirtyonesixty")
                {
                    orderquery = "order by #cd.[ThirtyOneSixtyValue] desc";
                    orderquery1 = "order by [ThirtyOneSixtyValue] desc";
                }
                else if (order == "ascending/sixtyoneninety")
                {
                    orderquery = "order by #cd.[SixtyOneNinetyValue] asc";
                    orderquery1 = "order by [SixtyOneNinetyValue] asc";
                }
                else if (order == "descending/sixtyoneninety")
                {
                    orderquery = "order by #cd.[SixtyOneNinetyValue] desc";
                    orderquery1 = "order by [SixtyOneNinetyValue] desc";
                }
                else if (order == "ascending/greaterninety")
                {
                    orderquery = "order by #cd.[NinetyPlusValue] asc";
                    orderquery1 = "order by [NinetyPlusValue] asc";
                }
                else if (order == "descending/greaterninety")
                {
                    orderquery = "order by #cd.[NinetyPlusValue] desc";
                    orderquery1 = "order by [NinetyPlusValue] desc";
                }
                else if (order == "ascending/total")
                {
                    orderquery = "order by #cd.[CustomerIntId] asc";
                    orderquery1 = "order by [TotalValue] asc";
                }
                else if (order == "descending/total")
                {
                    orderquery = "order by #cd.[CustomerIntId] desc";
                    orderquery1 = "order by [TotalValue] desc";
                }
                else
                {
                    orderquery = "order by #cd.[CustomerIntId]  desc";
                    orderquery1 = "order by CustomerIntId desc";
                }

            }
            else
            {
                orderquery = "order by #cd.[CustomerIntId] desc";
                orderquery1 = "order by CustomerIntId desc";
            }
            #endregion
            if (EndDate.HasValue && EndDate != new DateTime())
            {
                createddateSubQuery = string.Format(" and inv.CreatedDate <= '{0}'", EndDate);
                End = EndDate.Value;
            }
            sqlQuery = @"declare @pagestart int
                        declare @pageend int
                        set @pagestart=(@pageno-1)* @pagesize 
                        set @pageend = @pagesize

						select 
						cus.Id as CustomerIntId
						,cus.CustomerId
						,{1} as CustomerName
                        ,emp.FirstName +' '+ emp.LastName as SalesPerson
                        ,emp.Id as SalesPersonId
						,(Select SUM(inv.BalanceDue) from Invoice inv where inv.CustomerId=cus.CustomerId {5} And (inv.Status='Open' or inv.Status='Partial') {0} and DATEDIFF(DAY, inv.DueDate, '{6}')<1) as CurrentValue
						,(Select SUM(inv.BalanceDue) from Invoice inv where inv.CustomerId=cus.CustomerId {5} And (inv.Status='Open' or inv.Status='Partial') {0} and DATEDIFF(DAY, inv.DueDate, '{6}')>0 and DATEDIFF(DAY, inv.DueDate, '{6}')<31) as OneThirtyValue
						,(Select SUM(inv.BalanceDue) from Invoice inv where inv.CustomerId=cus.CustomerId {5} And (inv.Status='Open' or inv.Status='Partial') {0} and DATEDIFF(DAY, inv.DueDate, '{6}')>30 and DATEDIFF(DAY, inv.DueDate, '{6}')<61) as ThirtyOneSixtyValue
						,(Select SUM(inv.BalanceDue) from Invoice inv where inv.CustomerId=cus.CustomerId {5} And (inv.Status='Open' or inv.Status='Partial') {0} and DATEDIFF(DAY, inv.DueDate, '{6}')>60 and DATEDIFF(DAY, inv.DueDate, '{6}')<91) as SixtyOneNinetyValue
						,(Select SUM(inv.BalanceDue) from Invoice inv where inv.CustomerId=cus.CustomerId {5} And (inv.Status='Open' or inv.Status='Partial') {0} and DATEDIFF(DAY, inv.DueDate, '{6}')>90) as NinetyPlusValue
						into #customerData From Customer cus
                        LEFT JOIN CustomerExtended ce on ce.CustomerId=cus.CustomerId
						LEFT JOIN CustomerCompany cc on cc.CustomerId=cus.CustomerId
                        LEFT JOIN Employee emp on convert(nvarchar(50), emp.UserId) = cus.Soldby
						where cus.IsActive=1 and cc.IsLead=0 {4}
                        
                        select top(@pagesize) *,ISNULL(CurrentValue,0)+ISNULL(OneThirtyValue,0)+ISNULL(ThirtyOneSixtyValue,0)+ISNULL(SixtyOneNinetyValue,0)+ISNULL(NinetyPlusValue,0) as TotalValue into #Testtable from #customerData
                        where CustomerIntId not in (Select TOP (@pagestart)  CustomerIntId from #customerData #cd {2})
						and ISNULL(CurrentValue,0)+ISNULL(OneThirtyValue,0)+ISNULL(ThirtyOneSixtyValue,0)+ISNULL(SixtyOneNinetyValue,0)+ISNULL(NinetyPlusValue,0)>0
                       -- order by CustomerIntId desc
                       {3}         

						select * from #Testtable
						select sum(CurrentValue) as TotalCurrentValue,sum(OneThirtyValue) as TotalOneThirtyValue, sum(ThirtyOneSixtyValue) as TotalThirtyOneSixtyValue,sum(SixtyOneNinetyValue) as TotalSixtyOneNinetyValue,sum(NinetyPlusValue) as TotalNinetyPlusValue,sum(TotalValue) as TotalTotalValue  from #Testtable

                        select COUNT(*) TotalEmployee from #customerData where ISNULL(CurrentValue,0)+ISNULL(OneThirtyValue,0)+ISNULL(ThirtyOneSixtyValue,0)+ISNULL(SixtyOneNinetyValue,0)+ISNULL(NinetyPlusValue,0)>0

                        drop table #customerData
                        drop table #Testtable ";
            try
            {
                sqlQuery = string.Format(sqlQuery, createddateSubQuery, NamingSql, orderquery, orderquery1, searchQuery, recurringQuery, End);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(SearchText.Trim())));

                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetCustomerListAgingExport(DateTime? EndDate, string SearchText, int pageno, int pagesize, string reportFor)
        {
            string sqlQuery = @"";
            string searchQuery = "";
            string recurringQuery = "";
            DateTime End = DateTime.UtcNow;
            if (!string.IsNullOrEmpty(SearchText))
            {
                //searchQuery = string.Format(" and (cus.FirstName+' '+cus.LastName like '%{0}%' or cus.BusinessName like '%{0}%' or cus.DBA like '%{0}%' or emp.FirstName +' '+emp.LastName like '%{0}%')", SearchText);
                searchQuery = "and CHARINDEX(@SearchText, cus.SearchText) > 0";

            }
            if (reportFor == "Recurring" || reportFor == "Recurring Bill" || reportFor == "RecurringBill")
            {
                recurringQuery = string.Format(" and inv.IsARBInvoice = 1 ");
            }
            #region Naming Condition
            string NamingSql = "''";
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            if (gs != null)
            {
                NamingSql = gs.Value;
            }
            #endregion
            string createddateSubQuery = "";
            if (EndDate.HasValue && EndDate != new DateTime())
            {
                createddateSubQuery = string.Format(" and inv.CreatedDate <= '{0}'", EndDate);
                End = EndDate.Value;
            }
            sqlQuery = @"select 
						cus.Id
						,{1} as CustomerName
                        ,emp.FirstName +' '+ emp.LastName as SalesPerson
                        ,emp.Id as SalesPersonId
						,(Select SUM(inv.BalanceDue) from Invoice inv where inv.CustomerId=cus.CustomerId {3} And (inv.Status='Open' or inv.Status='Partial') {0} and DATEDIFF(DAY, inv.DueDate, '{4}')<1) as CurrentValue
						,(Select SUM(inv.BalanceDue) from Invoice inv where inv.CustomerId=cus.CustomerId {3} And (inv.Status='Open' or inv.Status='Partial') {0} and DATEDIFF(DAY, inv.DueDate, '{4}')>0 and DATEDIFF(DAY, inv.DueDate, '{4}')<31) as OneThirtyValue
						,(Select SUM(inv.BalanceDue) from Invoice inv where inv.CustomerId=cus.CustomerId {3} And (inv.Status='Open' or inv.Status='Partial') {0} and DATEDIFF(DAY, inv.DueDate, '{4}')>30 and DATEDIFF(DAY, inv.DueDate, '{4}')<61) as ThirtyOneSixtyValue
						,(Select SUM(inv.BalanceDue) from Invoice inv where inv.CustomerId=cus.CustomerId {3} And (inv.Status='Open' or inv.Status='Partial') {0} and DATEDIFF(DAY, inv.DueDate, '{4}')>60 and DATEDIFF(DAY, inv.DueDate, '{4}')<91) as SixtyOneNinetyValue
						,(Select SUM(inv.BalanceDue) from Invoice inv where inv.CustomerId=cus.CustomerId {3} And (inv.Status='Open' or inv.Status='Partial') {0} and DATEDIFF(DAY, inv.DueDate, '{4}')>90) as NinetyPlusValue
						into #customerData From Customer cus
						 LEFT JOIN CustomerCompany cc on cc.CustomerId=cus.CustomerId
                         LEFT JOIN Employee emp on convert(nvarchar(50), emp.UserId) = cus.Soldby
						where cus.IsActive=1 and cc.IsLead=0 {2}
                        
                       select CustomerName,SalesPerson,
						   
						format(ISNULL(CurrentValue,0),'N2') as [Current],
						format(ISNULL(OneThirtyValue,0),'N2') as [1-30],
						format(ISNULL(ThirtyOneSixtyValue,0),'N2') as [31-60],
						format(ISNULL(SixtyOneNinetyValue,0),'N2') as [61-90],
						format(ISNULL(NinetyPlusValue,0),'N2') as [>90],
						format(ISNULL(CurrentValue,0)+ISNULL(OneThirtyValue,0)+ISNULL(ThirtyOneSixtyValue,0)+ISNULL(SixtyOneNinetyValue,0)+ISNULL(NinetyPlusValue,0),'N2') as Total
						from #customerData
                        where ISNULL(CurrentValue,0)+ISNULL(OneThirtyValue,0)+ISNULL(ThirtyOneSixtyValue,0)+ISNULL(SixtyOneNinetyValue,0)+ISNULL(NinetyPlusValue,0)>0
						order by Id desc

                        drop table #customerData";
            try
            {
                sqlQuery = string.Format(sqlQuery, createddateSubQuery, NamingSql, searchQuery, recurringQuery, End);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(SearchText.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAgingInvoiceListByCustomerId(Guid CustomerId, string Type, DateTime? EndDate)
        {
            string sqlQuery = @"";
            string createddateSubQuery = "";
            string typeSubQuery = "";
            if (Type == "CurrentValue")
            {
                typeSubQuery = " And DATEDIFF(DAY, inv.DueDate, GETDATE()) < 1";
            }
            else if (Type == "OneThirtyValue")
            {
                typeSubQuery = " And DATEDIFF(DAY, inv.DueDate, GETDATE())>0 and DATEDIFF(DAY, inv.DueDate, GETDATE())<31";
            }
            else if (Type == "ThirtyOneSixtyValue")
            {
                typeSubQuery = " And DATEDIFF(DAY, inv.DueDate, GETDATE())>30 and DATEDIFF(DAY, inv.DueDate, GETDATE())<61";
            }
            else if (Type == "SixtyOneNinetyValue")
            {
                typeSubQuery = " And DATEDIFF(DAY, inv.DueDate, GETDATE())>60 and DATEDIFF(DAY, inv.DueDate, GETDATE())<91";
            }
            else if (Type == "NinetyPlusValue")
            {
                typeSubQuery = " And DATEDIFF(DAY, inv.DueDate, GETDATE())>90";
            }
            if (EndDate.HasValue && EndDate != new DateTime())
            {
                createddateSubQuery = string.Format(" And inv.CreatedDate < '{0}'", EndDate);
            }
            sqlQuery = @"select 
                        cus.Id as CustomerIntId,
                        inv.CustomerId,
                        inv.InvoiceId,
                        inv.CreatedDate,
                        inv.DueDate,
                        inv.TotalAmount,
                        DATEDIFF(DAY, inv.DueDate, GETDATE()) as Day
                        from Invoice inv
                        LEFT JOIN Customer cus on cus.CustomerId=inv.CustomerId
                        where inv.CustomerId='{0}' And (inv.Status='Open' or inv.Status='Partial')
                        {1}
                        {2}
                        ";
            try
            {
                sqlQuery = string.Format(sqlQuery, CustomerId, createddateSubQuery, typeSubQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #region Vendor Account Report
        public DataSet VendorAccountReportList(DateTime? Start, DateTime? End, int pageno, int pagesize, string searchtext)
        {
            string DateQuery = "";
            string SearchText = "";
            if (Start != new DateTime() && End != new DateTime())
            {
                string StartDateQuery = Start.Value.ToString("yyyy-MM-dd 00:00:00.000");
                string EndDateQuery = End.Value.ToString("yyyy-MM-dd 23:59:59.999");

                DateQuery = string.Format("and cus.CreatedDate between '{0}' and '{1}'", StartDateQuery, EndDateQuery);
            }
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                SearchText = string.Format("and (CONVERT(nvarchar(MAX), cus.Id) = '{0}' or cus.DBA like '{0}%' or  cus.FirstName like '{0}%')", searchtext);
            }
            string sqlQuery = @"DECLARE @Date nvarchar(50)
	                                DECLARE @pagestart int
	                                DECLARE @pageend int
	                                DECLARE @pageno int
	                                DECLARE @pagesize int

                                    SET @pageno = {0} --default 1
									SET @pagesize = {1} --default 10
                                    SET @pagestart=(@pageno-1)* @pagesize 
                                    SET @pageend = @pagesize

                                select 
                                                cus.Id
												,cus.DBA
												,cus.Street
												,cus.City
												,cus.[State]
												,cus.ZipCode
												,cus.FirstName
												,cus.LastName
												,cus.PrimaryPhone
												,CASE WHEN cus.Market = '-1' THEN ' ' ELSE cus.Market end as Market
												,cus.CustomerAccountType
												,cus.[Type]
												,cus.Note
                                into #VendorTable

                                from Customer cus
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                where cus.CustomerAccountType = 'Vendor'
                                and cc.IsLead = 0
                                {2}
                                {3}
								SELECT TOP (@pagesize) #VD.*
	                                                FROM #VendorTable #VD
	                                                where Id NOT IN(Select TOP (@pagestart) Id from #VendorTable #_PD Order by Id desc)
	                                                Order by Id desc
	                                                select count(Id) as [TotalCount] from #VendorTable
	                                                DROP TABLE #VendorTable";

            try
            {
                sqlQuery = string.Format(sqlQuery,
                                        pageno,
                                        pagesize,
                                        DateQuery,
                                        SearchText
                                        );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetVendorAccountReportListForDownload(DateTime? Start, DateTime? End, string searchtext)
        {
            string DateQuery = "";
            string SearchText = "";
            if (Start != new DateTime() && End != new DateTime())
            {
                string StartDateQuery = Start.Value.ToString("yyyy-MM-dd 00:00:00.000");
                string EndDateQuery = End.Value.ToString("yyyy-MM-dd 23:59:59.999");

                DateQuery = string.Format("and cus.CreatedDate between '{0}' and '{1}'", StartDateQuery, EndDateQuery);
            }
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                SearchText = string.Format("and (CONVERT(nvarchar(MAX), cus.Id) = '{0}' or cus.DBA like '{0}%' or  cus.FirstName like '{0}%')", searchtext);
            }
            string sqlQuery = @"select 
                                                 cus.Id as [Account Id]
                                                ,cus.DBA as [Doing Business As (DBA)]
												,cus.Street
												,cus.City
												,cus.[State]
												,cus.ZipCode as [Zip]
												,cus.FirstName as [First Name]
												,cus.LastName as [Last Name]
												,dbo.PhoneNumFormat(cus.PrimaryPhone) as [Work Phone]
												,CASE WHEN cus.Market = '-1' THEN ' ' ELSE cus.Market end as Market
												,cus.CustomerAccountType as [Account Type]
												,cus.[Type] as [Service Type]
												,cus.Note

                                from Customer cus
                                left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                                where cus.CustomerAccountType = 'Vendor'
                                and cc.IsLead = 0
                                {0}
                                {1}
								Order by cus.Id desc";

            try
            {
                sqlQuery = string.Format(sqlQuery,
                                        DateQuery,
                                        SearchText
                                        );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #endregion

        public DataTable GetAllResturantOrderDetailByOrderId(Guid orderid)
        {
            string sqlQuery = @"select distinct rod.*, roit.Toppings, roit.SpecialInstruction, item.Description as ItemDescription, item.[Price] as NetPrice, ro.OrderDate, ro.AcceptDate
                                , ro.DiscountValue, ro.DiscountCode
                                from ResturantOrderInstructionTopping roit
                                left join ResturantOrderDetail rod on roit.OrderId = rod.OrderId and rod.Id = roit.ItemId
                                left join RestMenuItem item on item.Id = rod.ItemId
                                left join ResturantOrder ro on ro.OrderId = rod.OrderId
                                where rod.OrderId = '{0}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, orderid);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllReportData(Guid CompanyId)
        {
            string sqlQuery = @"
                        select rs.ItemName,(select count(*)  from ResturantOrder where orderid in (select orderid from ResturantOrderDetail where ItemId = rs.ItemId) and (Status != 'Pending' and status != 'Rejected') and CompanyId = '{0}') as AcceptCount,
                        (select count(*)  from ResturantOrder where orderid in (select orderid from ResturantOrderDetail where ItemId = rs.ItemId and Status = 'Pending' and CompanyId = '{0}')) as PendingCount,
                        (select count(*)  from ResturantOrder where orderid in (select orderid from ResturantOrderDetail where ItemId = rs.ItemId and Status = 'Rejected' and CompanyId = '{0}')) as RejectCount
                        from ResturantOrderDetail rs
                        where rs.CompanyId = '{0}'
                        group by rs.ItemName,rs.ItemId
                        order by AcceptCount desc";
            try
            {
                sqlQuery = string.Format(sqlQuery, CompanyId);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllLineChartReportData(Guid CompanyId, DateTime StartDate, DateTime EndDate)
        {
            string sqlQuery = @"
                                DECLARE @StartDate AS DATETIME
                                DECLARE @EndDate AS DATETIME
                                DECLARE @CurrentDate AS DATETIME
                                DECLARE @Accepted AS int
                                DECLARE @Rejected AS int
                                DECLARE @Pending AS int
                                SET @StartDate = '{1}'
                                SET @EndDate = '{2}'
                                SET @CurrentDate = @StartDate

                                DECLARE @LineChartReport Table(OrderDate DateTime, AcceptCount int, RejectCount int,PendingCount int)

                                WHILE (@CurrentDate < @EndDate)
                                BEGIN

	                                Set @Accepted = (select count(*) as AcceptCount from ResturantOrder where  (Status != 'Pending' and status != 'Rejected') and CAST(orderdate AS DATE) = @CurrentDate  and CompanyId = '{0}')
	                                Set @Rejected = (select count(*) as RejectCount from ResturantOrder where  status = 'Rejected' and CAST(orderdate AS DATE) = @CurrentDate and CompanyId = '{0}')
	                                Set @Pending = (select count(*) as PendingCount from ResturantOrder where  Status = 'Pending'  and CAST(orderdate AS DATE) = @CurrentDate and CompanyId = '{0}')
                                    BEGIN
	                                   insert into @LineChartReport values(@CurrentDate,@Accepted,@Rejected,@Pending)
    
                                    END

                                    SET @CurrentDate = DATEADD(DAY, 1, @CurrentDate); /*increment current date*/

                                END
	                                select * from @LineChartReport


                                ";
            try
            {
                sqlQuery = string.Format(sqlQuery, CompanyId, StartDate.ToString("MM/dd/yyyy"), EndDate.ToString("MM/dd/yyyy"));
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllPieReportData(Guid CompanyId)
        {
            string sqlQuery = @"
                        select top(5) rs.ItemName,(select count(*)  from ResturantOrder where orderid in (select orderid from ResturantOrderDetail where ItemId = rs.ItemId) and (Status != 'Pending' and status != 'Rejected') and CompanyId = '{0}') as Sale
                        
                        from ResturantOrderDetail rs
                        where rs.CompanyId = '{0}'
                        group by rs.ItemName,rs.ItemId
                        order by Sale desc";
            try
            {
                sqlQuery = string.Format(sqlQuery, CompanyId);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetCustomerAuditLog(int customerId, DateTime? Audittime)
        {


            string sqlQuery = @"WITH cte  AS 
(
  SELECT *,

         rn=ROW_NUMBER()OVER(PARTITION BY Id ORDER BY AuditDate desc)
  FROM   AuditCustomer 
) 
SELECT top(1)
c1.AuditDate,
                      newEmail=CASE WHEN c1.EmailAddress=c2.EmailAddress THEN '' ELSE C1.EmailAddress END,
       oldEmail=CASE WHEN c1.EmailAddress=c2.EmailAddress THEN '' ELSE C2.EmailAddress END,
       newSSN=CASE WHEN c1.SSN=c2.SSN THEN NULL ELSE C1.SSN END,
       oldSSN=CASE WHEN c1.SSN=c2.SSN THEN NULL ELSE C2.SSN END,
       newTitle=CASE WHEN c1.Title=c2.Title THEN NULL ELSE C1.Title END,
       oldTitle=CASE WHEN c1.Title=c2.Title THEN NULL ELSE C2.Title END,
	   newCustomerNo=CASE WHEN c1.CustomerNo=c2.CustomerNo THEN NULL ELSE C1.CustomerNo END,
       oldCustomerNo=CASE WHEN c1.CustomerNo=c2.CustomerNo THEN NULL ELSE C2.CustomerNo END,
	   newFirstname=CASE WHEN c1.FirstName=c2.FirstName THEN NULL ELSE C1.FirstName END,
       oldFirstname=CASE WHEN c1.FirstName=c2.FirstName THEN NULL ELSE C2.FirstName END,
	   newLastname=CASE WHEN c1.LastName=c2.LastName THEN NULL ELSE C1.LastName END,
       oldLastname=CASE WHEN c1.LastName=c2.LastName THEN NULL ELSE C2.LastName END,
	   newType=CASE WHEN c1.Type=c2.Type THEN NULL ELSE C1.Type END,
       oldType=CASE WHEN c1.Type=c2.Type THEN NULL ELSE C2.Type END,
	   newBusinessname=CASE WHEN c1.BusinessName=c2.BusinessName THEN NULL ELSE C1.BusinessName END,
       oldBusinessname=CASE WHEN c1.BusinessName=c2.BusinessName THEN NULL ELSE C2.BusinessName END,
	   newDateofBirth=convert(date,CASE WHEN c1.DateofBirth=c2.DateofBirth THEN NULL ELSE C1.DateofBirth END),
       oldDateofBirth=convert(date,CASE WHEN c1.DateofBirth=c2.DateofBirth THEN NULL ELSE C2.DateofBirth END),
	   newPrimaryphone=CASE WHEN c1.PrimaryPhone=c2.PrimaryPhone THEN NULL ELSE C1.PrimaryPhone END,
       oldPrimaryphone=CASE WHEN c1.PrimaryPhone=c2.PrimaryPhone THEN NULL ELSE C2.PrimaryPhone END,
	   newSecondaryPhone=CASE WHEN c1.SecondaryPhone=c2.SecondaryPhone THEN NULL ELSE C1.SecondaryPhone END,
       oldSecondaryPhone=CASE WHEN c1.SecondaryPhone=c2.SecondaryPhone THEN NULL ELSE C2.SecondaryPhone END,
	   newCellNo=CASE WHEN c1.CellNo=c2.CellNo THEN NULL ELSE C1.CellNo END,
       oldCellNo=CASE WHEN c1.CellNo=c2.CellNo THEN NULL ELSE C2.CellNo END,
	   newFax=CASE WHEN c1.Fax=c2.Fax THEN NULL ELSE C1.Fax END,
       oldFax=CASE WHEN c1.Fax=c2.Fax THEN NULL ELSE C2.Fax END,
	   newCallingTime=CASE WHEN c1.CallingTime=c2.CallingTime THEN NULL ELSE C1.CallingTime END,
       oldCallingTime=CASE WHEN c1.CallingTime=c2.CallingTime THEN NULL ELSE C2.CallingTime END,
	   newAddress=CASE WHEN c1.Address=c2.Address THEN NULL ELSE C1.Address END,
       oldAddress=CASE WHEN c1.Address=c2.Address THEN NULL ELSE C2.Address END,
	   newStreet=CASE WHEN c1.Street=c2.Street THEN NULL ELSE C1.Street END,
       oldStreet=CASE WHEN c1.Street=c2.Street THEN NULL ELSE C2.Street END,
	   newCity=CASE WHEN c1.City=c2.City THEN NULL ELSE C1.City END,
       oldCity=CASE WHEN c1.City=c2.City THEN NULL ELSE C2.City END,
	   newState=CASE WHEN c1.State=c2.State THEN NULL ELSE C1.State END,
       oldState=CASE WHEN c1.State=c2.State THEN NULL ELSE C2.State END,
	   newZipcode=CASE WHEN c1.ZipCode=c2.ZipCode THEN NULL ELSE C1.ZipCode END,
       oldZipcode=CASE WHEN c1.ZipCode=c2.ZipCode THEN NULL ELSE C2.ZipCode END,
	   newCreditscore=CASE WHEN c1.CreditScore=c2.CreditScore THEN NULL ELSE C1.CreditScore END,
       oldCreditscore=CASE WHEN c1.CreditScore=c2.CreditScore THEN NULL ELSE C2.CreditScore END,
	   newContactterm=CASE WHEN c1.ContractTeam=c2.ContractTeam THEN NULL ELSE C1.ContractTeam END,
       oldContactterm=CASE WHEN c1.ContractTeam=c2.ContractTeam THEN NULL ELSE C2.ContractTeam END,
	   newFundingcompany=CASE WHEN c1.FundingCompany=c2.FundingCompany THEN NULL ELSE C1.FundingCompany END,
       oldFundingcompany=CASE WHEN c1.FundingCompany=c2.FundingCompany THEN NULL ELSE C2.FundingCompany END,
	   newMonthlymonitoringfee=CASE WHEN c1.MonthlyMonitoringFee=c2.MonthlyMonitoringFee THEN NULL ELSE C1.MonthlyMonitoringFee END,
       oldMonthlymonitoringfee=CASE WHEN c1.MonthlyMonitoringFee=c2.MonthlyMonitoringFee THEN NULL ELSE C2.MonthlyMonitoringFee END,
	   newCellularbackup=CASE WHEN c1.CellularBackup=c2.CellularBackup THEN NULL ELSE C1.CellularBackup END,
       oldCellularbackup=CASE WHEN c1.CellularBackup=c2.CellularBackup THEN NULL ELSE C2.CellularBackup END,
	   newLeadSource=CASE WHEN c1.LeadSource=c2.LeadSource THEN NULL ELSE C1.LeadSource END,
       oldLeadSource=CASE WHEN c1.LeadSource=c2.LeadSource THEN NULL ELSE C2.LeadSource END,
	   newCustomerfunded=CASE WHEN c1.CustomerFunded=c2.CustomerFunded THEN NULL ELSE C1.CustomerFunded END,
       oldCustomerfunded=CASE WHEN c1.CustomerFunded=c2.CustomerFunded THEN NULL ELSE C2.CustomerFunded END,
	   newMaintanence=CASE WHEN c1.Maintenance=c2.Maintenance THEN NULL ELSE C1.Maintenance END,
       oldMaintanence=CASE WHEN c1.Maintenance=c2.Maintenance THEN NULL ELSE C2.Maintenance END,
	   newNote=CASE WHEN c1.Note=c2.Note THEN NULL ELSE C1.Note END,
       oldNote=CASE WHEN c1.Note=c2.Note THEN NULL ELSE C2.Note END,
	   newSalesDate=convert(date,CASE WHEN c1.SalesDate=c2.SalesDate THEN NULL ELSE C1.SalesDate END),
       oldSalesDate=convert(date,CASE WHEN c1.SalesDate=c2.SalesDate THEN NULL ELSE C2.SalesDate END),
	   newInstallDate=convert(date,CASE WHEN c1.InstallDate=c2.InstallDate THEN NULL ELSE C1.InstallDate END),
       oldInstallDate=convert(date,CASE WHEN c1.InstallDate=c2.InstallDate THEN NULL ELSE C2.InstallDate END),
	   newInstaller=CASE WHEN c1.Installer=c2.Installer THEN NULL ELSE C1.Installer END,
       oldInstaller=CASE WHEN c1.Installer=c2.Installer THEN NULL ELSE C2.Installer END,
	   newSoldby=CASE WHEN c1.Soldby=c2.Soldby THEN NULL ELSE C1.Soldby END,
       oldSoldby=CASE WHEN c1.Soldby=c2.Soldby THEN NULL ELSE C2.Soldby END,
	   newFundingDate=convert(date,CASE WHEN c1.FundingDate=c2.FundingDate THEN NULL ELSE C1.FundingDate END),
       oldFundingDate=convert(date,CASE WHEN c1.FundingDate=c2.FundingDate THEN NULL ELSE C2.FundingDate END),
	   newJoinDate=convert(date,CASE WHEN c1.JoinDate=c2.JoinDate THEN NULL ELSE C1.JoinDate END),
       oldJoinDate=convert(date,CASE WHEN c1.JoinDate=c2.JoinDate THEN NULL ELSE C2.JoinDate END),
	   newQA1=CASE WHEN c1.QA1=c2.QA1 THEN NULL ELSE C1.QA1 END,
       oldQA1=CASE WHEN c1.QA1=c2.QA1 THEN NULL ELSE C2.QA1 END,
	   newQA1Date=convert(date,CASE WHEN c1.QA1Date=c2.QA1Date THEN NULL ELSE C1.QA1Date END),
       oldQA1Date=convert(date,CASE WHEN c1.QA1Date=c2.QA1Date THEN NULL ELSE C2.QA1Date END),
	   newQA2Date=convert(date,CASE WHEN c1.QA2Date=c2.QA2Date THEN NULL ELSE C1.QA2Date END),
       oldQA2Date=convert(date,CASE WHEN c1.QA2Date=c2.QA2Date THEN NULL ELSE C2.QA2Date END),
	   newQA2=CASE WHEN c1.QA2=c2.QA2 THEN NULL ELSE C1.QA2 END,
       oldQA2=CASE WHEN c1.QA2=c2.QA2 THEN NULL ELSE C2.QA2 END,
	   newStatus=CASE WHEN c1.Status=c2.Status THEN NULL ELSE C1.Status END,
       oldStatus=CASE WHEN c1.Status=c2.Status THEN NULL ELSE C2.Status END,
	   newBillamount=FORMAT(CASE WHEN c1.BillAmount=c2.BillAmount THEN NULL ELSE C1.BillAmount END,'N2'),
       oldBillamount=FORMAT(CASE WHEN c1.BillAmount=c2.BillAmount THEN NULL ELSE C2.BillAmount END,'N2'),
	   newPaymentmethod=CASE WHEN c1.PaymentMethod=c2.PaymentMethod THEN NULL ELSE C1.PaymentMethod END,
       oldPaymentmethod=CASE WHEN c1.PaymentMethod=c2.PaymentMethod THEN NULL ELSE C2.PaymentMethod END,
	   newBillCycle=CASE WHEN c1.BillCycle=c2.BillCycle  THEN NULL ELSE C1.BillCycle END,
       oldBillCycle=CASE WHEN c1.BillCycle=c2.BillCycle THEN NULL ELSE C2.BillCycle END,
	   newBillTax=CASE WHEN c1.BillTax=c2.BillTax THEN NULL ELSE C1.BillTax END,
       oldBillTax=CASE WHEN c1.BillTax=c2.BillTax THEN NULL ELSE C2.BillTax END,
	   newBillOutstanding=CASE WHEN c1.BillOutStanding=c2.BillOutStanding THEN NULL ELSE C1.BillOutStanding END,
       oldBillOutstanding=CASE WHEN c1.BillOutStanding=c2.BillOutStanding THEN NULL ELSE C2.BillOutStanding END,
	   newServiceDate=convert(date,CASE WHEN c1.ServiceDate=c2.ServiceDate THEN NULL ELSE C1.ServiceDate END),
       oldServiceDate=convert(date,CASE WHEN c1.ServiceDate=c2.ServiceDate THEN NULL ELSE C2.ServiceDate END),
	    newAdditionalCustomerno=CASE WHEN c1.AdditionalCustomerNo=c2.AdditionalCustomerNo THEN NULL ELSE C1.AdditionalCustomerNo END,
       oldAdditionalCustomerno=CASE WHEN c1.AdditionalCustomerNo=c2.AdditionalCustomerNo THEN NULL ELSE C2.AdditionalCustomerNo END,
	   newActivationfee=CASE WHEN c1.ActivationFee=c2.ActivationFee THEN NULL ELSE C1.Activationfee END,
       oldActivationfee=CASE WHEN c1.ActivationFee=c2.Activationfee THEN NULL ELSE C2.Activationfee END,
	   newFirstBilling=CASE WHEN c1.FirstBilling=c2.FirstBilling THEN NULL ELSE C1.FirstBilling END,
       oldFirstBilling=CASE WHEN c1.FirstBilling=c2.FirstBilling THEN NULL ELSE C2.FirstBilling END,
	   	   newIsactive=CASE WHEN c1.IsActive=c2.IsActive THEN NULL ELSE C1.IsActive END,
       oldIsactive=CASE WHEN c1.IsActive=c2.IsActive THEN NULL ELSE C2.IsActive END,
	     	   newDBA=CASE WHEN c1.DBA=c2.DBA THEN NULL ELSE C1.DBA END,
       oldDBA=CASE WHEN c1.DBA=c2.DBA THEN NULL ELSE C2.DBA END,
	    newCentralstationrefid=CASE WHEN c1.CentralStationRefId=c2.CentralStationRefId THEN NULL ELSE C1.CentralStationRefId END,
       oldCentralstationrefid=CASE WHEN c1.CentralStationRefId=c2.CentralStationRefId THEN NULL ELSE C2.CentralStationRefId END,
	    newMonitronicsrefid=CASE WHEN c1.MonitronicsRefId=c2.MonitronicsRefId THEN NULL ELSE C1.MonitronicsRefId END,
       oldMonitronicsrefid=CASE WHEN c1.MonitronicsRefId=c2.MonitronicsRefId THEN NULL ELSE C2.MonitronicsRefId END,
	   newBusinessaccounttype=CASE WHEN c1.BusinessAccountType=c2.BusinessAccountType THEN NULL ELSE C1.BusinessAccountType END,
       oldBusinessaccounttype=CASE WHEN c1.BusinessAccountType=c2.BusinessAccountType THEN NULL ELSE C2.BusinessAccountType END,
	   newrefferingcustomer=CASE WHEN c1.ReferringCustomer=c2.ReferringCustomer THEN NULL ELSE C1.ReferringCustomer END,
       oldrefferingcustomer=CASE WHEN c1.ReferringCustomer=c2.ReferringCustomer THEN NULL ELSE C2.ReferringCustomer END,
	   newownership=CASE WHEN c1.Ownership=c2.Ownership THEN NULL ELSE C1.Ownership END,
       oldownership=CASE WHEN c1.Ownership=c2.Ownership THEN NULL ELSE C2.Ownership END,
	   newpurchaseprice=CASE WHEN c1.PurchasePrice=c2.PurchasePrice THEN NULL ELSE C1.PurchasePrice END,
       oldpurchaseprice=CASE WHEN c1.PurchasePrice=c2.PurchasePrice THEN NULL ELSE C2.PurchasePrice END,
	   newchildof=CASE WHEN c1.ChildOf=c2.ChildOf THEN NULL ELSE C1.ChildOf END,
       oldchildof=CASE WHEN c1.ChildOf=c2.ChildOf THEN NULL ELSE C2.ChildOf END,
	   newestclosedate=convert(date,CASE WHEN c1.EstCloseDate=c2.EstCloseDate THEN NULL ELSE C1.EstCloseDate END),
       oldestclosedate= convert(date,CASE WHEN c1.EstCloseDate=c2.EstCloseDate THEN NULL ELSE C2.EstCloseDate END),
	   	newprojectwalkdate=convert(date,CASE WHEN c1.ProjectWalkDate=c2.ProjectWalkDate THEN NULL ELSE C1.ProjectWalkDate END),
       oldprojectwalkdate=convert(date,CASE WHEN c1.ProjectWalkDate=c2.ProjectWalkDate THEN NULL ELSE C2.ProjectWalkDate END),
	   newdonotcall=CASE WHEN c1.DoNotCall=c2.DoNotCall THEN NULL ELSE C1.DoNotCall END,
       olddonotcall=CASE WHEN c1.DoNotCall=c2.DoNotCall THEN NULL ELSE C2.DoNotCall END,
	    newpreferredcontactmethod=CASE WHEN c1.PreferredContactMethod=c2.PreferredContactMethod THEN NULL ELSE C1.PreferredContactMethod END,
       oldpreferredcontactmethod=CASE WHEN c1.PreferredContactMethod=c2.PreferredContactMethod THEN NULL ELSE C2.PreferredContactMethod END,
	    newbesttimetocall=CASE WHEN c1.BestTimeToCall=c2.BestTimeToCall THEN NULL ELSE C1.BestTimeToCall END,
       oldbesttimetocall=CASE WHEN c1.BestTimeToCall=c2.BestTimeToCall THEN NULL ELSE C2.BestTimeToCall END,
       	    newcsprovider=CASE WHEN c1.CSProvider=c2.CSProvider THEN NULL ELSE C1.CSProvider END,
       oldcsprovider=CASE WHEN c1.CSProvider=c2.CSProvider THEN NULL ELSE C2.CSProvider END,
	   	   newSoldby2=CASE WHEN c1.SoldBy2=c2.SoldBy2 THEN NULL ELSE C1.SoldBy2 END,
       oldSoldby2=CASE WHEN c1.SoldBy2=c2.SoldBy2 THEN NULL ELSE C2.SoldBy2 END,
	   	 newSoldby3=CASE WHEN c1.SoldBy3=c2.SoldBy3 THEN NULL ELSE C1.SoldBy3 END,
       oldSoldby3=CASE WHEN c1.SoldBy3=c2.SoldBy3 THEN NULL ELSE C2.SoldBy3 END,
		   newmovingdate=convert(date,CASE WHEN c1.MovingDate=c2.MovingDate THEN NULL ELSE C1.MovingDate END),
       oldmovingdate=convert(date,CASE WHEN c1.MovingDate=c2.MovingDate THEN NULL ELSE C2.MovingDate END),
	   newfollowupdate=convert(date,CASE WHEN c1.FollowUpDate=c2.FollowUpDate THEN NULL ELSE C1.FollowUpDate END),
       oldfollowupdate=convert(date,CASE WHEN c1.FollowUpDate=c2.FollowUpDate THEN NULL ELSE C2.FollowUpDate END),
	        	newbuyoutamountbyads=CASE WHEN c1.BuyoutAmountByADS=c2.BuyoutAmountByADS THEN NULL ELSE C1.BuyoutAmountByADS END,
       oldbuyoutamountbyads=CASE WHEN c1.BuyoutAmountByADS=c2.BuyoutAmountByADS THEN NULL ELSE C2.BuyoutAmountByADS END,
	      	newbuyoutanountbysalesrep=CASE WHEN c1.BuyoutAmountBySalesRep=c2.BuyoutAmountBySalesRep THEN NULL ELSE C1.BuyoutAmountBySalesRep END,
       oldbuyoutanountbysalesrep=CASE WHEN c1.BuyoutAmountBySalesRep=c2.BuyoutAmountBySalesRep THEN NULL ELSE C2.BuyoutAmountBySalesRep END,
	     	newfinancedterm=CASE WHEN c1.FinancedTerm=c2.FinancedTerm THEN NULL ELSE C1.FinancedTerm END,
       oldfinancedterm=CASE WHEN c1.FinancedTerm=c2.FinancedTerm THEN NULL ELSE C2.FinancedTerm END,
	   	newfinancedamount=CASE WHEN c1.FinancedAmount=c2.FinancedAmount THEN NULL ELSE C1.FinancedAmount END,
       oldfinancedamount=CASE WHEN c1.FinancedAmount=c2.FinancedAmount THEN NULL ELSE C2.FinancedAmount END,
	   	 newsoldamount=CASE WHEN c1.SoldAmount=c2.SoldAmount THEN NULL ELSE C1.SoldAmount END,
       oldsoldamount=CASE WHEN c1.SoldAmount=c2.SoldAmount THEN NULL ELSE C2.SoldAmount END,
	   	 newleadsourcetype=CASE WHEN c1.SoldAmount=c2.SoldAmount THEN NULL ELSE C1.SoldAmount END,
       oldleadsourcetype=CASE WHEN c1.SoldAmount=c2.SoldAmount THEN NULL ELSE C2.SoldAmount END,
       Newsoldbyval = emp.FirstName +' ' + emp.LastName,
	   Oldsoldbyval = emp1.FirstName +' ' + emp1.LastName,
       Newleadsourceval = lksource.DisplayText,
	   Oldleadsourceval = lksource1.DisplayText,
	   Newinstallerval = empinstaller.FirstName +' ' + empinstaller.LastName,
	   Oldinstallerval = emp1installer.FirstName +' ' + emp1installer.LastName
	   --into #tempcte
FROM cte c1 INNER JOIN cte c2 
ON 
--c1.AuditId=c2.AuditId 
--AND 
c1.Id=c2.Id and
c2.RN=c1.RN+1
LEFT JOIN Employee emp on convert(nvarchar(50), emp.UserId) = c1.Soldby
LEFT JOIN Employee emp1 on convert(nvarchar(50), emp1.UserId) = c2.Soldby
Left join Lookup lksource on lksource.DataValue = c1.LeadSource
Left join Lookup lksource1 on lksource1.DataValue = c2.LeadSource
LEFT JOIN Employee empinstaller on convert(nvarchar(50), empinstaller.UserId) = c1.Installer
LEFT JOIN Employee emp1installer on convert(nvarchar(50), emp1installer.UserId) = c2.Installer
where c1.Id = {0}
 --and FORMAT(DATEADD(HH,5,c1.AuditDate), 'dd-MM.yyyy HH:mm') = FORMAT('{1}', 'dd-MM.yyyy HH:mm')
and  FORMAT(c1.AuditDate, 'dd-MM.yyyy HH:mm') = FORMAT(DATEADD(HH,+6,'{1}'), 'dd-MM.yyyy HH:mm')
order by c1.AuditDate desc";

            try
            {
                sqlQuery = string.Format(sqlQuery, customerId, Audittime);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataSet GetRecurringBillingForReport(string SearchText, string Cycle, string Method, DateTime? Start, DateTime? End, int PageNo, int PageSize, string Order)
        {
            string DateQuery = "";
            string SearchTextQ = "";
            string BillingCycle = "";
            string MethodQ = "";
            string orderquery = "";
            string orderquery1 = "";
            #region Order
            if (!string.IsNullOrWhiteSpace(Order) && Order != "null")
            {
                if (Order == "ascending/customer")
                {
                    orderquery = "order by #ed.[CustomerName] asc";
                    orderquery1 = "order by [CustomerName] asc";
                }
                else if (Order == "descending/customer")
                {
                    orderquery = "order by #ed.[CustomerName] desc";
                    orderquery1 = "order by [CustomerName] desc";
                }
                else if (Order == "ascending/RMRAmount")
                {
                    orderquery = "order by #ed.RMRAmount asc";
                    orderquery1 = "order by RMRAmount asc";
                }
                else if (Order == "descending/RMRAmount")
                {
                    orderquery = "order by #ed.RMRAmount desc";
                    orderquery1 = "order by RMRAmount desc";
                }
                else if (Order == "ascending/PaymentMethod")
                {
                    orderquery = "order by #ed.PaymentMethod asc";
                    orderquery1 = "order by PaymentMethod asc";
                }
                else if (Order == "descending/PaymentMethod")
                {
                    orderquery = "order by #ed.PaymentMethod desc";
                    orderquery1 = "order by PaymentMethod desc";
                }
                else if (Order == "ascending/BillingCycle")
                {
                    orderquery = "order by #ed.BillCycle asc";
                    orderquery1 = "order by BillCycle asc";
                }
                else if (Order == "descending/BillingCycle")
                {
                    orderquery = "order by #ed.BillCycle desc";
                    orderquery1 = "order by BillCycle desc";
                }
                else if (Order == "ascending/BillingStartDate")
                {
                    orderquery = "order by #ed.BillingStartDate asc";
                    orderquery1 = "order by BillingStartDate asc";
                }
                else if (Order == "descending/BillingStartDate")
                {
                    orderquery = "order by #ed.BillingStartDate desc";
                    orderquery1 = "order by BillingStartDate desc";
                }
                else if (Order == "ascending/TaxAmount")
                {
                    orderquery = "order by #ed.TaxAmount asc";
                    orderquery1 = "order by TaxAmount asc";
                }
                else if (Order == "descending/TaxAmount")
                {
                    orderquery = "order by #ed.TaxAmount desc";
                    orderquery1 = "order by TaxAmount desc";
                }
                else if (Order == "ascending/TotalBillAmount")
                {
                    orderquery = "order by #ed.TotalBillAmount asc";
                    orderquery1 = "order by TotalBillAmount asc";
                }
                else if (Order == "descending/TotalBillAmount")
                {
                    orderquery = "order by #ed.TotalBillAmount desc";
                    orderquery1 = "order by TotalBillAmount desc";
                }
                else
                {
                    orderquery = "order by #ed.[RBSID]  desc";
                    orderquery1 = "order by RBSID desc";
                }
            }
            else
            {
                orderquery = "order by #ed.[RBSID] desc";
                orderquery1 = "order by RBSID desc";
            }
            #endregion
            if (Start != new DateTime() && End != new DateTime()
                && Start != null && End != null)
            {
                string daystart = Start.Value.ToString("dd");
                string dayend = End.Value.ToString("dd");
                DateQuery = string.Format("and DAY(RBS.StartDate) between '{0}' and '{1}'", daystart, dayend);
            }

            if (!string.IsNullOrWhiteSpace(SearchText))
            {
                SearchTextQ = string.Format("and (Cus.FirstName +' '+ Cus.LastName like '%{0}%' OR Cus.BusinessName like '%{0}%')", SearchText);
            }

            if (!string.IsNullOrWhiteSpace(Cycle) && Cycle != "-1")
            {
                BillingCycle = string.Format("and RBS.BillCycle = '{0}'", Cycle);
            }
            if (Method != "'null'" && Method != "-1")
            {
                string[] MethodList = Method.Split(',');
                string Ids = "";
                foreach (string id in MethodList)
                {
                    Ids += string.Format("{0},", id);
                }

                MethodQ = "and PPC.PaymentInfoId in (" + Ids.TrimEnd(',') + ")";
            }
            string sqlQuery = @"    DECLARE @Date nvarchar(50)
	                                DECLARE @pagestart int
	                                DECLARE @pageend int
	                                DECLARE @pageno int
	                                DECLARE @pagesize int

                                    SET @pageno = {0} --default 1
									SET @pagesize = {1} --default 10
                                    SET @pagestart=(@pageno-1)* @pagesize 
                                    SET @pageend = @pagesize

                                    select 
                                    RBS.Id as RBSID
                                    ,CASE WHEN Cus.BusinessName IS NULL OR Cus.BusinessName = '' THEN  Cus.FirstName +' '+Cus.LastName 
									ELSE Cus.BusinessName END CustomerName
                                    ,Cus.Id as CusId
                                    ,dbo.MakeAddress(Cus.Street,Cus.StreetType,Cus.Appartment,Cus.City,Cus.[State],Cus.ZipCode) as [Address]
                                    ,RBS.BillAmount as RMRAmount
                                    ,PPC.[Type] as PaymentMethod
                                    ,RBS.BillCycle
                                    ,FORMAT(RBS.StartDate,'MM/dd/yyyy') AS BillingStartDate
                                    ,RBS.TaxAmount
                                    ,RBS.TotalBillAmount

                                        into #TempData

                                     from RecurringBillingSchedule RBS
                                     left join Customer Cus on Cus.CustomerId = RBS.CustomerId
                                     left join PaymentProfileCustomer PPC on PPC.PaymentInfoId = RBS.CustomerPaymentProfileId
                                     where RBS.[Status]='Active' 
                                     {2}
                                     {3}
                                     {4}
                                     {7}
                                    SELECT TOP (@pagesize) #ed.* into #TestTable
                                                                FROM #TempData #ed
                                                                where RBSID NOT IN(Select TOP (@pagestart) RBSID from #TempData #ed {5})
                                                                {6}
                                                                select count(RBSID) as [TotalCount] from #TempData
                                                                
                                                                select * from #TestTable

																select sum(RMRAmount) as TotalRMR
																,sum(TaxAmount) as TotalTax
																,sum(TotalBillAmount) as TotalBill
																from #TestTable
																DROP TABLE #TestTable
                                                                DROP TABLE #TempData";

            try
            {
                sqlQuery = string.Format(sqlQuery,
                                        PageNo,
                                        PageSize,
                                        DateQuery,
                                        SearchTextQ,
                                        BillingCycle,
                                        orderquery,
                                        orderquery1,
                                        MethodQ

                                        );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable DownloadRecurringBillingReport(string SearchText, string Cycle, string Method, DateTime? Start, DateTime? End, int PageNo, int PageSize, string Order)
        {
            string DateQuery = "";
            string SearchTextQ = "";
            string BillingCycle = "";
            string MethodQ = "";
            string orderquery = "";
            string orderquery1 = "";
            #region Order
            if (!string.IsNullOrWhiteSpace(Order) && Order != "null")
            {
                if (Order == "ascending/customer")
                {
                    orderquery = "order by #ed.[CustomerName] asc";
                    orderquery1 = "order by [CustomerName] asc";
                }
                else if (Order == "descending/customer")
                {
                    orderquery = "order by #ed.[CustomerName] desc";
                    orderquery1 = "order by [CustomerName] desc";
                }
                else if (Order == "ascending/RMRAmount")
                {
                    orderquery = "order by #ed.RMRAmount asc";
                    orderquery1 = "order by RMRAmount asc";
                }
                else if (Order == "descending/RMRAmount")
                {
                    orderquery = "order by #ed.RMRAmount desc";
                    orderquery1 = "order by RMRAmount desc";
                }
                else if (Order == "ascending/PaymentMethod")
                {
                    orderquery = "order by #ed.PaymentMethod asc";
                    orderquery1 = "order by PaymentMethod asc";
                }
                else if (Order == "descending/PaymentMethod")
                {
                    orderquery = "order by #ed.PaymentMethod desc";
                    orderquery1 = "order by PaymentMethod desc";
                }
                else if (Order == "ascending/BillingCycle")
                {
                    orderquery = "order by #ed.BillCycle asc";
                    orderquery1 = "order by BillCycle asc";
                }
                else if (Order == "descending/BillingCycle")
                {
                    orderquery = "order by #ed.BillCycle desc";
                    orderquery1 = "order by BillCycle desc";
                }
                else if (Order == "ascending/BillingStartDate")
                {
                    orderquery = "order by #ed.BillingStartDate asc";
                    orderquery1 = "order by BillingStartDate asc";
                }
                else if (Order == "descending/BillingStartDate")
                {
                    orderquery = "order by #ed.BillingStartDate desc";
                    orderquery1 = "order by BillingStartDate desc";
                }
                else if (Order == "ascending/TaxAmount")
                {
                    orderquery = "order by #ed.TaxAmount asc";
                    orderquery1 = "order by TaxAmount asc";
                }
                else if (Order == "descending/TaxAmount")
                {
                    orderquery = "order by #ed.TaxAmount desc";
                    orderquery1 = "order by TaxAmount desc";
                }
                else if (Order == "ascending/TotalBillAmount")
                {
                    orderquery = "order by #ed.TotalBillAmount asc";
                    orderquery1 = "order by TotalBillAmount asc";
                }
                else if (Order == "descending/TotalBillAmount")
                {
                    orderquery = "order by #ed.TotalBillAmount desc";
                    orderquery1 = "order by TotalBillAmount desc";
                }
                else
                {
                    orderquery = "order by #ed.[Billing Id]  desc";
                    orderquery1 = "order by [Billing Id] desc";
                }
            }
            else
            {
                orderquery = "order by #ed.[Billing Id] desc";
                orderquery1 = "order by [Billing Id] desc";
            }
            #endregion
            if (Start != new DateTime() && End != new DateTime()
                && Start != null && End != null)
            {
                string daystart = Start.Value.ToString("dd");
                string dayend = End.Value.ToString("dd");
                DateQuery = string.Format("and DAY(RBS.StartDate) between '{0}' and '{1}'", daystart, dayend);
            }

            if (!string.IsNullOrWhiteSpace(SearchText))
            {
                SearchTextQ = string.Format("and (Cus.FirstName +' '+ Cus.LastName like '%{0}%' OR Cus.BusinessName like '%{0}%')", SearchText);
            }

            if (!string.IsNullOrWhiteSpace(Cycle) && Cycle != "-1")
            {
                BillingCycle = string.Format("and RBS.BillCycle = '{0}'", Cycle);
            }
            if (Method != "'null'" && Method != "-1")
            {
                string[] MethodList = Method.Split(',');
                string Ids = "";
                foreach (string id in MethodList)
                {
                    Ids += string.Format("{0},", id);
                }

                MethodQ = "and PPC.PaymentInfoId in (" + Ids.TrimEnd(',') + ")";
            }
            string sqlQuery = @"    DECLARE @Date nvarchar(50)
	                                DECLARE @pagestart int
	                                DECLARE @pageend int
	                                DECLARE @pageno int
	                                DECLARE @pagesize int

                                    SET @pageno = {0} --default 1
									SET @pagesize = {1} --default 10
                                    SET @pagestart=(@pageno-1)* @pagesize 
                                    SET @pageend = @pagesize

                                    select 
                                    RBS.Id as [Billing Id]
                                    ,CASE WHEN Cus.BusinessName IS NULL OR Cus.BusinessName = '' THEN  Cus.FirstName +' '+Cus.LastName 
									ELSE Cus.BusinessName END [Customer Name] 
                                    ,dbo.MakeAddress(Cus.Street,Cus.StreetType,Cus.Appartment,Cus.City,Cus.[State],Cus.ZipCode) as [Address]
                                    ,RBS.BillAmount as [RMR Amount]
                                    ,PPC.[Type] as [Payment Method]
                                    ,RBS.BillCycle as [Bill Cycle]
                                    ,FORMAT(RBS.StartDate,'MM/dd/yyyy') AS [Billing Start Date]
                                    ,cast(RBS.TaxAmount as decimal(12,2)) as [Tax]
                                    ,cast(RBS.TotalBillAmount as decimal(12,2)) as [Total]

                                        into #TempData

                                     from RecurringBillingSchedule RBS
                                     left join Customer Cus on Cus.CustomerId = RBS.CustomerId
                                     left join PaymentProfileCustomer PPC on PPC.PaymentInfoId = RBS.CustomerPaymentProfileId
                                     where RBS.[Status]='Active' 
                                     {2}
                                     {3}
                                     {4}
                                     {7}
                                     SELECT #ed.* FROM #TempData #ed
                                     {6}
                                     DROP TABLE #TempData";

            try
            {
                sqlQuery = string.Format(sqlQuery,
                                        PageNo,
                                        PageSize,
                                        DateQuery,
                                        SearchTextQ,
                                        BillingCycle,
                                        orderquery,
                                        orderquery1,
                                        MethodQ

                                        );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetParentKeyByDataKey(string DataKey)

        {

            string sqlQuery = @"select distinct ParentDatakey from lookup where  Datakey = '{0}'";

            sqlQuery = string.Format(sqlQuery, DataKey);
            try
            {
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataSet GetAllRecordForReport(AllRecords filter)
        {
            string DateQuery = "";
            string SearchTextQ = "";
            string IsLeadQ = "";
            string LeadSourceQ = "";
            string LeadStatusQ = "";
            string SalesPersonQ = "";
            string CustomerStatusQ = "";
            string SalesLocationQ = "";
            string ParentSourceQ = "";
            string LeadSourceTypeQ = "";
            string orderquery = "";
            string orderquery1 = "";
            #region Order
            if (!string.IsNullOrWhiteSpace(filter.Order) && filter.Order != "null")
            {
                if (filter.Order == "ascending/customer")
                {
                    orderquery = "order by #ed.[Name] asc";
                    orderquery1 = "order by [Name] asc";
                }
                else if (filter.Order == "descending/customer")
                {
                    orderquery = "order by #ed.[Name] desc";
                    orderquery1 = "order by [Name] desc";
                }
                else if (filter.Order == "ascending/LeadSource")
                {
                    orderquery = "order by #ed.LeadSource asc";
                    orderquery1 = "order by LeadSource asc";
                }
                else if (filter.Order == "descending/LeadSource")
                {
                    orderquery = "order by #ed.LeadSource desc";
                    orderquery1 = "order by LeadSource desc";
                }
                else if (filter.Order == "ascending/ParentSource")
                {
                    orderquery = "order by #ed.LeadSourceType asc";
                    orderquery1 = "order by LeadSourceType asc";
                }
                else if (filter.Order == "descending/ParentSource")
                {
                    orderquery = "order by #ed.LeadSourceType desc";
                    orderquery1 = "order by LeadSourceType desc";
                }
                else if (filter.Order == "ascending/LeadStatus")
                {
                    orderquery = "order by #ed.LeadStatus asc";
                    orderquery1 = "order by LeadStatus asc";
                }
                else if (filter.Order == "descending/LeadStatus")
                {
                    orderquery = "order by #ed.LeadStatus desc";
                    orderquery1 = "order by LeadStatus desc";
                }
                else if (filter.Order == "ascending/CustomerStatus")
                {
                    orderquery = "order by #ed.CustomerStatus asc";
                    orderquery1 = "order by CustomerStatus asc";
                }
                else if (filter.Order == "descending/CustomerStatus")
                {
                    orderquery = "order by #ed.CustomerStatus desc";
                    orderquery1 = "order by CustomerStatus desc";
                }
                else if (filter.Order == "ascending/SalesPerson")
                {
                    orderquery = "order by #ed.SalesPerson asc";
                    orderquery1 = "order by SalesPerson asc";
                }
                else if (filter.Order == "descending/SalesPerson")
                {
                    orderquery = "order by #ed.SalesPerson desc";
                    orderquery1 = "order by SalesPerson desc";
                }
                else if (filter.Order == "ascending/SalesLocation")
                {
                    orderquery = "order by #ed.SalesLocation asc";
                    orderquery1 = "order by SalesLocation asc";
                }
                else if (filter.Order == "descending/SalesLocation")
                {
                    orderquery = "order by #ed.SalesLocation desc";
                    orderquery1 = "order by SalesLocation desc";
                }
                else if (filter.Order == "ascending/AppoinmentSetBy")
                {
                    orderquery = "order by #ed.AppoinmentSet asc";
                    orderquery1 = "order by AppoinmentSet asc";
                }
                else if (filter.Order == "descending/AppoinmentSetBy")
                {
                    orderquery = "order by #ed.AppoinmentSet desc";
                    orderquery1 = "order by AppoinmentSet desc";
                }
                else
                {
                    orderquery = "order by #ed.[RMRId]  desc";
                    orderquery1 = "order by RMRId desc";
                }
            }
            else
            {
                orderquery = "order by #ed.[RMRId] desc";
                orderquery1 = "order by RMRId desc";
            }
            #endregion
            if (filter.Start != new DateTime() && filter.End != new DateTime()
                && filter.Start != null && filter.End != null)
            {
                string daystart = filter.Start.SetClientZeroHourToUTC().ToString();
                string dayend = filter.End.SetClientMaxHourToUTC().ToString();
                DateQuery = string.Format("and Cus.CreatedDate between '{0}' and '{1}'", daystart, dayend);
            }

            if (!string.IsNullOrWhiteSpace(filter.SearchText))
            {
                SearchTextQ = string.Format("and (Cus.FirstName +' '+ Cus.LastName like @SearchText OR Cus.BusinessName like @SearchText OR convert(nvarchar(50), Cus.Id) = @SearchText)");
            }

            if (!string.IsNullOrWhiteSpace(filter.IsLead) && filter.IsLead != "-1")
            {
                if (filter.IsLead == "Lead")
                {
                    IsLeadQ = "and CC.IsLead = 1";
                }
                if (filter.IsLead == "Customer")
                {
                    IsLeadQ = "and CC.IsLead = 0";
                }

            }
            if (filter.LeadSource != "'null'" && filter.LeadSource != "-1" && !string.IsNullOrWhiteSpace(filter.LeadSource))
            {
                string[] LeadSourceList = filter.LeadSource.Split(',');
                string Ids = "";
                foreach (string id in LeadSourceList)
                {
                    Ids += string.Format("{0},", id);
                }
                LeadSourceQ = "and Cus.LeadSource in (" + Ids.TrimEnd(',') + ")";
            }
            if (filter.LeadSourceType != "'null'" && filter.LeadSourceType != "-1" && !string.IsNullOrWhiteSpace(filter.LeadSourceType))
            {
                string[] LeadSourceTypeList = filter.LeadSourceType.Split(',');
                string Ids = "";
                foreach (string id in LeadSourceTypeList)
                {
                    Ids += string.Format("{0},", id);
                }
                LeadSourceTypeQ = "and Cus.LeadSourceType in (" + Ids.TrimEnd(',') + ")";
            }
            if (filter.ParentSource != "'null'" && filter.ParentSource != "-1" && !string.IsNullOrWhiteSpace(filter.ParentSource))
            {
                string[] ParentSourceList = filter.ParentSource.Split(',');
                string Ids = "";
                foreach (string id in ParentSourceList)
                {
                    Ids += string.Format("{0},", id);
                }
                ParentSourceQ = "and lk.ParentDataKey in (" + Ids.TrimEnd(',') + ")";
            }
            if (filter.LeadStatus != "'null'" && filter.LeadStatus != "-1" && !string.IsNullOrWhiteSpace(filter.LeadStatus))
            {
                string[] LeadStatusList = filter.LeadStatus.Split(',');
                string Ids = "";
                foreach (string id in LeadStatusList)
                {
                    Ids += string.Format("{0},", id);
                }
                LeadStatusQ = "and lkleadstatus.DisplayText in (" + Ids.TrimEnd(',') + ")";
            }
            if (filter.SalesPerson != "'null'" && filter.SalesPerson != "-1" && !string.IsNullOrWhiteSpace(filter.SalesPerson))
            {
                string[] SalesPersonList = filter.SalesPerson.Split(',');
                string Ids = "";
                foreach (string id in SalesPersonList)
                {
                    Ids += string.Format("{0},", id);
                }
                SalesPersonQ = "and Cus.Soldby in (" + Ids.TrimEnd(',') + ")";
            }
            if (filter.CustomerStatus != "'null'" && filter.CustomerStatus != "-1" && !string.IsNullOrWhiteSpace(filter.CustomerStatus))
            {
                string[] CustomerStatusList = filter.CustomerStatus.Split(',');
                string Ids = "";
                foreach (string id in CustomerStatusList)
                {
                    Ids += string.Format("{0},", id);
                }
                CustomerStatusQ = "and Cus.CustomerStatus in (" + Ids.TrimEnd(',') + ")";
            }
            if (filter.SalesLocation != "'null'" && filter.SalesLocation != "-1" && !string.IsNullOrWhiteSpace(filter.SalesLocation))
            {
                string[] SalesLocationList = filter.SalesLocation.Split(',');
                string Ids = "";
                foreach (string id in SalesLocationList)
                {
                    Ids += string.Format("{0},", id);
                }
                SalesLocationQ = "and Cus.SalesLocation in (" + Ids.TrimEnd(',') + ")";
            }
            string sqlQuery = @"DECLARE @Date nvarchar(50)
	                                DECLARE @pagestart int
	                                DECLARE @pageend int
	                                DECLARE @pageno int
	                                DECLARE @pagesize int

                                    SET @pageno = {0} --default 1
									SET @pagesize = {1} --default 10
                                    SET @pagestart=(@pageno-1)* @pagesize 
                                    SET @pageend = @pagesize

                                    select
									CASE WHEN Cus.BusinessName IS NULL OR Cus.BusinessName = '' THEN  Cus.FirstName +' '+Cus.LastName 
									ELSE Cus.BusinessName END Name
									,dbo.MakeAddress(Cus.Street,Cus.StreetType,Cus.Appartment,Cus.City,Cus.[State],Cus.ZipCode) as [Address]
									,Cus.Id as RMRId
									,Cus.CustomerNo as CSId
                                    ,lk.ParentDataKey as LeadSourceParent
									,ISNULL(lk.DisplayText,'') as LeadSource
                                    ,ISNULL(lkLeadSourceType.DisplayText,'') as LeadSourceType
									,lkleadstatus.DisplayText as LeadStatus
									,Emp.FirstName +' '+ Emp.LastName as SalesPerson
									,ISNULL(lkCustomerStatus.DisplayText,'') as CustomerStatus
									,ISNULL(selerloc.DisplayText,'') as SalesLocation
									,AppSet.FirstName +' '+ AppSet.LastName as AppoinmentSetBy
                                    ,CC.IsLead

                            		,Cus.CreatedDate
                                        into #TempData

                                     from Customer Cus
									 left join CustomerCompany CC on CC.CustomerId = Cus.CustomerId
									 left join CustomerExtended CusEx on CusEx.CustomerId = Cus.CustomerId
									 left join Employee Emp on convert(nvarchar(50), Emp.UserId) = Cus.Soldby
									 left join Employee AppSet on AppSet.UserId = CusEx.AppoinmentSetBy
                                     left join [Lookup] lk on lk.DataKey = 'LeadSource' and lk.DataValue = iif(Cus.LeadSource  != '-1', Cus.LeadSource, '')
                                     left join [Lookup] lkLeadSourceType on lkLeadSourceType.DataKey = 'LeadSourceType' and lkLeadSourceType.DataValue = iif(Cus.LeadSourceType  != '-1', Cus.LeadSourceType, '')
                                     left join [Lookup] lkleadstatus on lkleadstatus.DataKey = 'LeadStatus' and lkleadstatus.DataValue = iif(Cus.[Status] != '-1', Cus.[Status], '')
									 left join [Lookup] lkCustomerStatus on lkCustomerStatus.DataKey = 'CustomerStatus1' and lkCustomerStatus.DataValue = iif(Cus.CustomerStatus != '-1', Cus.CustomerStatus, '')
                                     left join [Lookup] selerloc on selerloc.DataKey = 'CommissionType' and selerloc.DataValue = iif(Cus.[SalesLocation] != '-1', Cus.[SalesLocation], '')
                                     where Cus.Id != 0 and CC.IsLead is not null 
                                     and CusEx.IsTestAccount != 1
                                     {2}
                                     {3}
                                     {4}
                                     {5}
                                     {6}
                                     {7}
                                     {8}
                                     {9}
                                     {12}
                                     {13}
                                     SELECT TOP (@pagesize) #ed.*
                                                                FROM #TempData #ed
                                                                where RMRId NOT IN(Select TOP (@pagestart) RMRId from #TempData #ed {10})
                                                                {11}
                                                                select count(RMRId) as [TotalRecord] from #TempData
                                                                
															
                                                                DROP TABLE #TempData";

            try
            {
                sqlQuery = string.Format(sqlQuery,
                                        filter.PageNo, // 0
                                        filter.PageSize, // 1
                                        DateQuery, // 2
                                        SearchTextQ, //3
                                        LeadSourceQ, //4
                                        LeadStatusQ, // 5
                                        CustomerStatusQ, //6
                                        SalesLocationQ, //7
                                        SalesPersonQ, //8
                                        IsLeadQ, //9
                                        orderquery, //10
                                        orderquery1, //11
                                        ParentSourceQ, //12
                                        LeadSourceTypeQ //13
                                        );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(filter.SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(filter.SearchText.Trim())));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable DownloadAllRecordsReport(AllRecords filter)
        {
            string DateQuery = "";
            string SearchTextQ = "";
            string IsLeadQ = "";
            string LeadSourceQ = "";
            string LeadStatusQ = "";
            string SalesPersonQ = "";
            string CustomerStatusQ = "";
            string SalesLocationQ = "";
            string ParentSourceQ = "";
            string LeadSourceTypeQ = "";
            string orderquery = "";
            string orderquery1 = "";
            #region Order
            if (!string.IsNullOrWhiteSpace(filter.Order) && filter.Order != "null")
            {
                if (filter.Order == "ascending/customer")
                {
                    orderquery = "order by #ed.[Name] asc";
                    orderquery1 = "order by [Name] asc";
                }
                else if (filter.Order == "descending/customer")
                {
                    orderquery = "order by #ed.[Name] desc";
                    orderquery1 = "order by [Name] desc";
                }
                else if (filter.Order == "ascending/LeadSource")
                {
                    orderquery = "order by #ed.LeadSource asc";
                    orderquery1 = "order by LeadSource asc";
                }
                else if (filter.Order == "descending/LeadSource")
                {
                    orderquery = "order by #ed.LeadSource desc";
                    orderquery1 = "order by LeadSource desc";
                }
                else if (filter.Order == "ascending/LeadStatus")
                {
                    orderquery = "order by #ed.LeadStatus asc";
                    orderquery1 = "order by LeadStatus asc";
                }
                else if (filter.Order == "descending/LeadStatus")
                {
                    orderquery = "order by #ed.LeadStatus desc";
                    orderquery1 = "order by LeadStatus desc";
                }
                else if (filter.Order == "ascending/CustomerStatus")
                {
                    orderquery = "order by #ed.CustomerStatus asc";
                    orderquery1 = "order by CustomerStatus asc";
                }
                else if (filter.Order == "descending/CustomerStatus")
                {
                    orderquery = "order by #ed.CustomerStatus desc";
                    orderquery1 = "order by CustomerStatus desc";
                }
                else if (filter.Order == "ascending/SalesPerson")
                {
                    orderquery = "order by #ed.SalesPerson asc";
                    orderquery1 = "order by SalesPerson asc";
                }
                else if (filter.Order == "descending/SalesPerson")
                {
                    orderquery = "order by #ed.SalesPerson desc";
                    orderquery1 = "order by SalesPerson desc";
                }
                else if (filter.Order == "ascending/SalesLocation")
                {
                    orderquery = "order by #ed.SalesLocation asc";
                    orderquery1 = "order by SalesLocation asc";
                }
                else if (filter.Order == "descending/SalesLocation")
                {
                    orderquery = "order by #ed.SalesLocation desc";
                    orderquery1 = "order by SalesLocation desc";
                }
                else if (filter.Order == "ascending/AppoinmentSetBy")
                {
                    orderquery = "order by #ed.AppoinmentSet asc";
                    orderquery1 = "order by AppoinmentSet asc";
                }
                else if (filter.Order == "descending/AppoinmentSetBy")
                {
                    orderquery = "order by #ed.AppoinmentSet desc";
                    orderquery1 = "order by AppoinmentSet desc";
                }
                else
                {
                    orderquery = "order by #ed.[RMR ID]  desc";
                    orderquery1 = "order by [RMR ID] desc";
                }
            }
            else
            {
                orderquery = "order by #ed.[RMR ID] desc";
                orderquery1 = "order by [RMR ID] desc";
            }
            #endregion
            if (filter.Start != new DateTime() && filter.End != new DateTime()
                && filter.Start != null && filter.End != null)
            {
                string daystart = filter.Start.SetClientZeroHourToUTC().ToString();
                string dayend = filter.End.SetClientMaxHourToUTC().ToString();
                DateQuery = string.Format("and Cus.CreatedDate between '{0}' and '{1}'", daystart, dayend);
            }

            if (!string.IsNullOrWhiteSpace(filter.SearchText))
            {
                SearchTextQ = string.Format("and (Cus.FirstName +' '+ Cus.LastName like @SearchText OR Cus.BusinessName like @SearchText OR convert(nvarchar(50), Cus.Id) = @SearchText)");
            }

            if (!string.IsNullOrWhiteSpace(filter.IsLead) && filter.IsLead != "-1")
            {
                if (filter.IsLead == "Lead")
                {
                    IsLeadQ = "and CC.IsLead = 1";
                }
                if (filter.IsLead == "Customer")
                {
                    IsLeadQ = "and CC.IsLead = 0";
                }

            }
            if (filter.LeadSource != "'null'" && filter.LeadSource != "-1")
            {
                string[] LeadSourceList = filter.LeadSource.Split(',');
                string Ids = "";
                foreach (string id in LeadSourceList)
                {
                    Ids += string.Format("{0},", id);
                }
                LeadSourceQ = "and Cus.LeadSource in (" + Ids.TrimEnd(',') + ")";
            }
            if (filter.LeadSourceType != "'null'" && filter.LeadSourceType != "-1")
            {
                string[] LeadSourceTypeList = filter.LeadSourceType.Split(',');
                string Ids = "";
                foreach (string id in LeadSourceTypeList)
                {
                    Ids += string.Format("{0},", id);
                }
                LeadSourceTypeQ = "and Cus.LeadSourceType in (" + Ids.TrimEnd(',') + ")";
            }
            if (filter.ParentSource != "'null'" && filter.ParentSource != "-1" && filter.ParentSource != null)
            {
                string[] ParentSourceList = filter.ParentSource.Split(',');
                string Ids = "";
                foreach (string id in ParentSourceList)
                {
                    Ids += string.Format("{0},", id);
                }
                LeadSourceQ = "and lk.ParentDataKey in (" + Ids.TrimEnd(',') + ")";
            }
            if (filter.LeadStatus != "'null'" && filter.LeadStatus != "-1")
            {
                string[] LeadStatusList = filter.LeadStatus.Split(',');
                string Ids = "";
                foreach (string id in LeadStatusList)
                {
                    Ids += string.Format("{0},", id);
                }
                LeadStatusQ = "and lkleadstatus.DisplayText in (" + Ids.TrimEnd(',') + ")";
            }
            if (filter.SalesPerson != "'null'" && filter.SalesPerson != "-1")
            {
                string[] SalesPersonList = filter.SalesPerson.Split(',');
                string Ids = "";
                foreach (string id in SalesPersonList)
                {
                    Ids += string.Format("{0},", id);
                }
                SalesPersonQ = "and Cus.Soldby in (" + Ids.TrimEnd(',') + ")";
            }
            if (filter.CustomerStatus != "'null'" && filter.CustomerStatus != "-1")
            {
                string[] CustomerStatusList = filter.CustomerStatus.Split(',');
                string Ids = "";
                foreach (string id in CustomerStatusList)
                {
                    Ids += string.Format("{0},", id);
                }
                CustomerStatusQ = "and Cus.CustomerStatus in (" + Ids.TrimEnd(',') + ")";
            }
            if (filter.SalesLocation != "'null'" && filter.SalesLocation != "-1")
            {
                string[] SalesLocationList = filter.SalesLocation.Split(',');
                string Ids = "";
                foreach (string id in SalesLocationList)
                {
                    Ids += string.Format("{0},", id);
                }
                SalesLocationQ = "and Cus.SalesLocation in (" + Ids.TrimEnd(',') + ")";
            }
            string sqlQuery = @"DECLARE @Date nvarchar(50)
	                                DECLARE @pagestart int
	                                DECLARE @pageend int
	                                DECLARE @pageno int
	                                DECLARE @pagesize int

                                    SET @pageno = {0} --default 1
									SET @pagesize = {1} --default 10
                                    SET @pagestart=(@pageno-1)* @pagesize 
                                    SET @pageend = @pagesize

                                    select
									CASE WHEN Cus.BusinessName IS NULL OR Cus.BusinessName = '' THEN  Cus.FirstName +' '+Cus.LastName 
									ELSE Cus.BusinessName END Name
                                    ,Cus.Id as [RMR ID]
                                    ,Cus.CustomerNo as [CS ID]
									,dbo.MakeAddress(Cus.Street,Cus.StreetType,Cus.Appartment,Cus.City,Cus.[State],Cus.ZipCode) as [Address]
                                    ,lk.ParentDataKey as [Parent Source]
                                    ,ISNULL(lk.DisplayText,'') as [Lead Source]
                                    ,ISNULL(lkLeadSourceType.DisplayText,'') as [Lead Source Type]
									,lkleadstatus.DisplayText as [Lead Status]
                                    ,ISNULL(lkCustomerStatus.DisplayText,'') as [Customer Status]
									,Emp.FirstName +' '+ Emp.LastName as [Sales Person]
									,ISNULL(selerloc.DisplayText,'') as [Sales Location]
									,AppSet.FirstName +' '+ AppSet.LastName as [Appoinment Set By]
                                    ,CAST(Cus.CreatedDate AS DATE) CreatedDate
                                        into #TempData

                                     from Customer Cus
									 left join CustomerCompany CC on CC.CustomerId = Cus.CustomerId
									 left join CustomerExtended CusEx on CusEx.CustomerId = Cus.CustomerId
									 left join Employee Emp on convert(nvarchar(50), Emp.UserId) = Cus.Soldby
									 left join Employee AppSet on AppSet.UserId = CusEx.AppoinmentSetBy
                                     left join [Lookup] lk on lk.DataKey = 'LeadSource' and lk.DataValue = iif(Cus.LeadSource  != '-1', Cus.LeadSource, '')
                                     left join [Lookup] lkLeadSourceType on lkLeadSourceType.DataKey = 'LeadSourceType' and lkLeadSourceType.DataValue = iif(Cus.LeadSourceType  != '-1', Cus.LeadSourceType, '')
                                     left join [Lookup] lkleadstatus on lkleadstatus.DataKey = 'LeadStatus' and lkleadstatus.DataValue = iif(Cus.[Status] != '-1', Cus.[Status], '')
									 left join [Lookup] lkCustomerStatus on lkCustomerStatus.DataKey = 'CustomerStatus1' and lkCustomerStatus.DataValue = iif(Cus.CustomerStatus != '-1', Cus.CustomerStatus, '')
                                     left join [Lookup] selerloc on selerloc.DataKey = 'CommissionType' and selerloc.DataValue = iif(Cus.[SalesLocation] != '-1', Cus.[SalesLocation], '')
                                     where Cus.Id != 0 and CC.IsLead is not null
                                     and CusEx.IsTestAccount != 1
                                     {2}
                                     {3}
                                     {4}
                                     {5}
                                     {6}
                                     {7}
                                     {8}
                                     {9}
                                     {12}
                                     {13}
                                     SELECT #ed.* FROM #TempData #ed
                                     {11}
                                     DROP TABLE #TempData";
            try
            {
                sqlQuery = string.Format(sqlQuery,
                                        filter.PageNo, // 0
                                        filter.PageSize, // 1
                                        DateQuery, // 2
                                        SearchTextQ, //3
                                        LeadSourceQ, //4
                                        LeadStatusQ, // 5
                                        CustomerStatusQ, //6
                                        SalesLocationQ, //7
                                        SalesPersonQ, //8
                                        IsLeadQ, //9
                                        orderquery, //10
                                        orderquery1, //11
                                        ParentSourceQ, //12
                                        LeadSourceTypeQ //13
                                        );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(filter.SearchText))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(filter.SearchText.Trim())));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataSet GetAllMoveCustomerRecordForReport(MoveCustomer filter)
        {
            string DateQuery = "";
            string SearchTextQ = "";
            string MoveDateQ = "";
            string IdQ = "";
            string orderquery = "";
            string orderquery1 = "";
            string subquery2 = "";
            string subquery3 = "";
            #region Order
            if (!string.IsNullOrWhiteSpace(filter.Order))
            {
                if (filter.Order == "ascending/customer")
                {
                    orderquery = "order by #customerFilterdata.[CustomerName] asc";
                    orderquery1 = "order by [CustomerName] asc";
                }
                else if (filter.Order == "descending/customer")
                {
                    orderquery = "order by #customerFilterdata.[CustomerName] desc";
                    orderquery1 = "order by [CustomerName] desc";
                }
                else if (filter.Order == "ascending/phoneno")
                {
                    orderquery = "order by #customerFilterdata.PhoneNo asc";
                    orderquery1 = "order by PhoneNo asc";
                }
                else if (filter.Order == "descending/phoneno")
                {
                    orderquery = "order by #customerFilterdata.PhoneNo desc";
                    orderquery1 = "order by PhoneNo desc";
                }
                else if (filter.Order == "ascending/email")
                {
                    orderquery = "order by #customerFilterdata.[Email] asc";
                    orderquery1 = "order by [Email] asc";
                }
                else if (filter.Order == "descending/email")
                {
                    orderquery = "order by #customerFilterdata.[Email] desc";
                    orderquery1 = "order by [Email] desc";
                }

                else if (filter.Order == "ascending/address")
                {
                    orderquery = "order by #customerFilterdata.[Address] asc";
                    orderquery1 = "order by [Address] asc";
                }
                else if (filter.Order == "descending/address")
                {
                    orderquery = "order by #customerFilterdata.[Address] desc";
                    orderquery1 = "order by [Address] desc";
                }
                else if (filter.Order == "ascending/date")
                {
                    orderquery = "order by #customerFilterdata.[CreatedDate] asc";
                    orderquery1 = "order by [CreatedDate] asc";
                }
                else if (filter.Order == "descending/date")
                {
                    orderquery = "order by #customerFilterdata.[CreatedDate] desc";
                    orderquery1 = "order by [CreatedDate] desc";
                }
                else if (filter.Order == "ascending/oldcustomer")
                {
                    orderquery = "order by #customerFilterdata.[oldcustomername] asc";
                    orderquery1 = "order by [oldcustomername] asc";
                }
                else if (filter.Order == "descending/oldcustomer")
                {
                    orderquery = "order by #customerFilterdata.[oldcustomername] desc";
                    orderquery1 = "order by [oldcustomername] desc";
                }
                else
                {
                    orderquery = "order by #customerFilterdata.[Id]  desc";
                    orderquery1 = "order by Id desc";
                }
            }
            else
            {
                orderquery = "order by #customerFilterdata.[Id] desc";
                orderquery1 = "order by Id desc";
            }
            #endregion
            if (filter.Start != new DateTime() && filter.End != new DateTime()
                && filter.Start != null && filter.End != null)
            {
                string daystart = filter.Start.SetClientZeroHourToUTC().ToString();//ToString("yyyy-MM-dd 00:00:00.000");
                string dayend = filter.End.SetClientMaxHourToUTC().ToString();//ToString("yyyy-MM-dd 23:59:59.999");
                DateQuery = string.Format("and cus.CreatedDate between '{0}' and '{1}'", daystart, dayend);
            }
            if (filter.Id != 0)
            {
                IdQ = string.Format("and convert(nvarchar(50), cus.Id) = '{0}'", filter.Id);
            }
            if (!string.IsNullOrWhiteSpace(filter.SearchText))
            {
                SearchTextQ = string.Format("and (cus.FirstName +' '+ cus.LastName like '%{0}%' OR cus.BusinessName like '%{0}%' OR convert(nvarchar(50), cus.Id) = '{0}')", filter.SearchText);
            }
            if (filter.MoveMinDate != null && filter.MoveMaxDate != null
                && filter.MoveMinDate != "" && filter.MoveMaxDate != "")
            {
                //string daystart = Convert.ToDateTime(filter.MoveMinDate).ToString("yyyy-MM-dd 00:00:00.000");
                //string dayend = Convert.ToDateTime(filter.MoveMaxDate).ToString("yyyy-MM-dd 23:59:59.999");

                string daystart = Convert.ToDateTime(filter.MoveMinDate).SetClientZeroHourToUTC().ToString();
                string dayend = Convert.ToDateTime(filter.MoveMaxDate).SetClientMaxHourToUTC().ToString();
                MoveDateQ = string.Format("and cus.CreatedDate between '{0}' and '{1}'", daystart, dayend);
            }
            else if (filter.MoveMinDate != null && filter.MoveMinDate != "")
            {
                var date = Convert.ToDateTime(filter.MoveMinDate).SetClientZeroHourToUTC();
                var datemax = Convert.ToDateTime(filter.MoveMinDate).SetClientMaxHourToUTC();
                subquery2 = string.Format("and cus.CreatedDate between '{0}' and '{1}'", date, datemax);
            }
            else if (filter.MoveMaxDate != null && filter.MoveMaxDate != "")
            {
                var date = Convert.ToDateTime(filter.MoveMaxDate).SetClientZeroHourToUTC();
                var datemax = Convert.ToDateTime(filter.MoveMaxDate).SetClientMaxHourToUTC();
                subquery3 = string.Format("and cus.CreatedDate between '{0}' and '{1}'", date, datemax);
            }
            string sqlQuery = @"DECLARE @Date nvarchar(50)
	                                DECLARE @pagestart int
	                                DECLARE @pageend int
	                                DECLARE @pageno int
	                                DECLARE @pagesize int

                                    SET @pageno = {0} --default 1
									SET @pagesize = {1} --default 10
                                    SET @pagestart=(@pageno-1)* @pagesize 
                                    SET @pageend = @pagesize

                                    select cus.Id, cus.CustomerId, CASE 
	                                WHEN (cus.BusinessName = '' or cus.BusinessName IS NULL) THEN cus.FirstName +' '+cus.LastName
	                                ELSE  cus.BusinessName
                                    END as CustomerName, cus.PrimaryPhone as PhoneNo, cus.EmailAddress as Email, cc.IsLead, ce.UnlinkCustomer
                                    ,cus.[Address] as [Address], cus.CreatedDate,cus.Street,cus.StreetType,cus.Appartment,cus.ZipCode,cus.City,cus.[State],
		                          (select CASE 
	                              WHEN (cu.DBA = '' or cu.DBA IS NULL) AND  (cu.BusinessName = '' or cu.BusinessName IS NULL) THEN cu.FirstName +' '+cu.LastName
	                              WHEN (cu.DBA = '' or cu.DBA IS NULL)  THEN cu.BusinessName
	                              ELSE  cu.DBA
                                  END from Customer cu where cu.CustomerId = cus.MoveCustomerId) as oldcustomername,
		                         (select cu.Id from Customer cu where cu.CustomerId = cus.MoveCustomerId) as oldcustomerid
                            into #customerData from Customer cus
                            left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                            left join CustomerExtended ce on ce.CustomerId = cus.CustomerId
                            where cc.IsLead is not null
                            and cus.MoveCustomerId is not null 
							and cus.MoveCustomerId != '00000000-0000-0000-0000-000000000000' 
                            {2}
                            {3}
                            {4}
                            {5}
                            {8}
                            {9}
                                select * into #customerFilterdata from #customerData
								select top(@pagesize) * from #customerFilterdata
								where Id not in (Select TOP (@pagestart)  Id from #customerFilterdata {6})
                                {7}
                                

                                select count(*) as TotalRecord from #customerFilterdata

								drop table #customerData
								drop table #customerFilterdata";

            try
            {
                sqlQuery = string.Format(sqlQuery,
                                        filter.PageNo, // 0
                                        filter.PageSize, // 1
                                        DateQuery, // 2
                                        SearchTextQ, //3
                                        IdQ, //4
                                        MoveDateQ, //5
                                        orderquery, //6
                                        orderquery1 //7
                                        , subquery2 //8
                                        , subquery3 //9
                                        );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable DownloadAllMoveCustomerRecord(MoveCustomer filter)
        {
            string DateQuery = "";
            string SearchTextQ = "";
            string MoveDateQ = "";
            string IdQ = "";
            string orderquery = "";
            string orderquery1 = "";
            string subquery2 = "";
            string subquery3 = "";
            #region Order
            if (!string.IsNullOrWhiteSpace(filter.Order))
            {
                if (filter.Order == "ascending/customer")
                {
                    orderquery = "order by #customerFilterdata.[CustomerName] asc";
                    orderquery1 = "order by [CustomerName] asc";
                }
                else if (filter.Order == "descending/customer")
                {
                    orderquery = "order by #customerFilterdata.[CustomerName] desc";
                    orderquery1 = "order by [CustomerName] desc";
                }
                else if (filter.Order == "ascending/phoneno")
                {
                    orderquery = "order by #customerFilterdata.PhoneNo asc";
                    orderquery1 = "order by PhoneNo asc";
                }
                else if (filter.Order == "descending/phoneno")
                {
                    orderquery = "order by #customerFilterdata.PhoneNo desc";
                    orderquery1 = "order by PhoneNo desc";
                }
                else if (filter.Order == "ascending/email")
                {
                    orderquery = "order by #customerFilterdata.[Email] asc";
                    orderquery1 = "order by [Email] asc";
                }
                else if (filter.Order == "descending/email")
                {
                    orderquery = "order by #customerFilterdata.[Email] desc";
                    orderquery1 = "order by [Email] desc";
                }

                else if (filter.Order == "ascending/address")
                {
                    orderquery = "order by #customerFilterdata.[Address] asc";
                    orderquery1 = "order by [Address] asc";
                }
                else if (filter.Order == "descending/address")
                {
                    orderquery = "order by #customerFilterdata.[Address] desc";
                    orderquery1 = "order by [Address] desc";
                }
                else if (filter.Order == "ascending/date")
                {
                    orderquery = "order by #customerFilterdata.[CreatedDate] asc";
                    orderquery1 = "order by [CreatedDate] asc";
                }
                else if (filter.Order == "descending/date")
                {
                    orderquery = "order by #customerFilterdata.[CreatedDate] desc";
                    orderquery1 = "order by [CreatedDate] desc";
                }
                else
                {
                    orderquery = "order by #customerFilterdata.[Id]  desc";
                    orderquery1 = "order by [Customer Id] desc";
                }
            }
            else
            {
                orderquery = "order by #customerFilterdata.[Id] desc";
                orderquery1 = "order by [Customer Id] desc";
            }
            #endregion
            if (filter.Start != new DateTime() && filter.End != new DateTime()
                && filter.Start != null && filter.End != null)
            {
                string daystart = filter.Start.SetClientZeroHourToUTC().ToString();//ToString("yyyy-MM-dd 00:00:00.000");
                string dayend = filter.End.SetClientMaxHourToUTC().ToString();//ToString("yyyy-MM-dd 23:59:59.999");
                DateQuery = string.Format("and cus.CreatedDate between '{0}' and '{1}'", daystart, dayend);
            }
            if (filter.Id != 0)
            {
                IdQ = string.Format("and convert(nvarchar(50), cus.Id) = '{0}'", filter.Id);
            }
            if (!string.IsNullOrWhiteSpace(filter.SearchText))
            {
                SearchTextQ = string.Format("and (cus.FirstName +' '+ cus.LastName like '%{0}%' OR cus.BusinessName like '%{0}%' OR convert(nvarchar(50), cus.Id) = '{0}')", filter.SearchText);
            }
            if (filter.MoveMinDate != null && filter.MoveMaxDate != null
                && filter.MoveMinDate != "" && filter.MoveMaxDate != "")
            {
                string daystart = Convert.ToDateTime(filter.MoveMinDate).SetClientZeroHourToUTC().ToString();
                string dayend = Convert.ToDateTime(filter.MoveMaxDate).SetClientMaxHourToUTC().ToString();
                MoveDateQ = string.Format("and cus.CreatedDate between '{0}' and '{1}'", daystart, dayend);
            }
            else if (filter.MoveMinDate != null && filter.MoveMinDate != "")
            {
                var date = Convert.ToDateTime(filter.MoveMinDate).SetClientZeroHourToUTC();
                var datemax = Convert.ToDateTime(filter.MoveMinDate).SetClientMaxHourToUTC();
                subquery2 = string.Format("and cus.CreatedDate between '{0}' and '{1}'", date, datemax);
            }
            else if (filter.MoveMaxDate != null && filter.MoveMaxDate != "")
            {
                var date = Convert.ToDateTime(filter.MoveMaxDate).SetClientZeroHourToUTC();
                var datemax = Convert.ToDateTime(filter.MoveMaxDate).SetClientMaxHourToUTC();
                subquery3 = string.Format("and cus.CreatedDate between '{0}' and '{1}'", date, datemax);
            }
            string sqlQuery = @"DECLARE @Date nvarchar(50)
	                                DECLARE @pagestart int
	                                DECLARE @pageend int
	                                DECLARE @pageno int
	                                DECLARE @pagesize int

                                    SET @pageno = {0} --default 1
									SET @pagesize = {1} --default 10
                                    SET @pagestart=(@pageno-1)* @pagesize 
                                    SET @pageend = @pagesize

                                    select cus.Id as [Customer Id], 
									CASE 
	                                WHEN (cus.BusinessName = '' or cus.BusinessName IS NULL) THEN cus.FirstName +' '+cus.LastName
	                                ELSE  cus.BusinessName
                                    END as [Customer Name],
	                              (select CASE 
	                               WHEN (cu.DBA = '' or cu.DBA IS NULL) AND  (cu.BusinessName = '' or cu.BusinessName IS NULL) THEN cu.FirstName +' '+cu.LastName
	                               WHEN (cu.DBA = '' or cu.DBA IS NULL)  THEN cu.BusinessName
	                               ELSE  cu.DBA
                                   END from Customer cu where cu.CustomerId = cus.MoveCustomerId) as [Old Customer]
									,dbo.PhoneNumFormat(cus.PrimaryPhone) as [Phone No]
									,cus.EmailAddress as Email
									,Case
									when cus.[Address] is null then dbo.MakeAddress(cus.Street,cus.StreetType,cus.Appartment,cus.City,cus.[State],cus.ZipCode)
									Else cus.[Address]
									End as [Address]
                                    ,FORMAT(cus.CreatedDate,'MM/dd/yyyy') as [Move Date]
                            into #customerData from Customer cus
                            left join CustomerCompany cc on cc.CustomerId = cus.CustomerId
                            where cc.IsLead is not null
                            and cus.MoveCustomerId is not null 
							and cus.MoveCustomerId != '00000000-0000-0000-0000-000000000000' 
                            {2}
                            {3}
                            {4}
                            {5}
                            {8}
                            {9}
                                select * into #customerFilterdata from #customerData
								select * from #customerFilterdata
                                {7}
								drop table #customerData
								drop table #customerFilterdata";

            try
            {
                sqlQuery = string.Format(sqlQuery,
                                        filter.PageNo, // 0
                                        filter.PageSize, // 1
                                        DateQuery, // 2
                                        SearchTextQ, //3
                                        IdQ, //4
                                        MoveDateQ, //5
                                        orderquery, //6
                                        orderquery1 //7
                                        , subquery2 //8
                                        , subquery3 //9
                                        );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllCustomersByCompanyId(Guid companyid)
        {
            string sqlQuery = @"select cus.FirstName, cus.LastName, cus.CustomerId
                                from customer cus
                                join CustomerCompany cc
                                on cc.CustomerId=cus.CustomerId
                                where cc.CompanyId='{0}'";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyid);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataSet GetInstallerDealsReportALLByCompanyId(Guid companyid, DateTime? start, DateTime? end, string searchtext, int pageno, int pagesize, string order, List<string> SalesList, List<string> InstallerList)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string SalesPersonQuery = "";
            if (SalesList != null && SalesList.Count > 0 && SalesList[0] != "null")
            {
                string Ids = "";
                foreach (string id in SalesList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                SalesPersonQuery = "and emp.UserId in (" + Ids.TrimEnd(',') + ")";
            }
            string InstallerQuery = "";
            if (InstallerList != null && InstallerList.Count > 0 && InstallerList[0] != "null")
            {
                string Ids = "";
                foreach (string id in InstallerList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                InstallerQuery = "and emp2.UserId in (" + Ids.TrimEnd(',') + ")";
            }
            string subquery = "";
            if (start.HasValue && start.Value != new DateTime() && end.HasValue && end.Value != new DateTime())
            {
                subquery = string.Format("and cus.InstallDate between '{0}' and '{1}'", start.Value.ToString("yyyy-MM-dd 00:00:00.000"), end.Value.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            string searchquery = "";
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                searchquery += "and CHARINDEX(@SearchText, cus.SearchText) > 0";
                //searchquery += string.Format("and (cus.FirstName like '%{0}%' or cus.LastName like '%{0}%' or cus.FirstName + ' ' + cus.LastName like '%{0}%' or cus.BusinessName like '%{0}%' or cus.DBA like '%{0}%')", searchtext);
            }

            string sqlQuery = @"declare @pagestart int
                                declare @pageend int
                                SET @pagestart=(@pageno-1)* @pagesize 
                                SET @pageend = @pagesize

                                select distinct * into #SaleCom from (Select
								cus.Id,
								{0} as DisplayName,
								cus.CustomerNo,
                                cus.InstallDate as InstalledDate,
                                tkLookUp.DisplayText as TicketType,
								emp.FirstName+' '+emp.LastName as SalesPerson,
                                emp2.FirstName+' '+emp2.LastName as Installer,
								lksource.DisplayText as LeadSource,
								lklocation.DisplayText as SalesLocation,
								cus.Type,
								ISNULL(pc.ActivationFee+pc.NonConformingFee,0) as ActNonFee,
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float) as RMR,
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0) as EquipmentFee,
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0) as ServiceFee,
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0) as AdvancedMonitoring,
								
								((
								ISNULL(pc.ActivationFee+pc.NonConformingFee,0)
								+
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0)
								) * (select Value from globalsetting where SearchKey = 'Sales Tax'))/100 as TotalTax,

								ISNULL(cus.FinancedAmount,0) as FinancedAmount,

								((ISNULL(pc.ActivationFee+pc.NonConformingFee,0)
								+
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0)
								)
								+
								((
								ISNULL(pc.ActivationFee+pc.NonConformingFee,0)
								+
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0)
								) * (select Value from globalsetting where SearchKey = 'Sales Tax'))/100
								--+
								--ISNULL(cus.FinancedAmount,0)
								) as TotalSales
								from Customer cus
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
								LEFT JOIN CustomerCompany cc on cc.CustomerId=cus.CustomerId
								LEFT JOIN Employee emp on emp.UserId=cus.SoldBy1
								left join Lookup lksource on lksource.DataKey ='LeadSource' and lksource.DataValue = cus.LeadSource and lksource.DataValue!='-1'
								left join Lookup lklocation on lklocation.DataKey = 'CommissionType' and lklocation.DataValue = cus.SalesLocation and lklocation.DataValue!='-1'
								LEFT join PackageCustomer pc on pc.CustomerId=cus.CustomerId
								LEFT JOIN PaymentInfoCustomer pic on pic.CustomerId=cus.CustomerId and pic.Payfor='Service'
								LEFT JOIN Ticket tk on tk.CustomerId=cus.CustomerId and tk.IsAgreementTicket=1
                                LEFT JOIN TicketUser tu on tu.TiketId=tk.TicketId and tu.IsPrimary=1
								LEFT JOIN Employee emp2 on emp2.UserId = tu.UserId
								LEFT JOIN Lookup tkLookUp on tkLookUp.DataValue=tk.TicketType and tkLookUp.DataKey='TicketType'								
                                Where cc.IsLead=0 and cus.IsActive=1 and ce.IsTestAccount != 1 and cus.InstallDate is not null and cus.TransferCustomerId IS NULL and (cus.MoveCustomerId='00000000-0000-0000-0000-000000000000' or cus.MoveCustomerId IS NULL) {1} {2} {3} {4}
								) d

								Select distinct *into #tempSaleCom from #SaleCom

								select top(@pagesize)
								* into #10SaleCom from #tempSaleCom
								where Id not in(select top(@pagestart) Id from #tempSaleCom #cd order by InstalledDate desc)
                                order by InstalledDate desc

								select * from #10SaleCom				

		                        select count(*) CountTotal,		 
								sum(ActNonFee) as SumTotalActNonFee
								,sum(RMR) as SumTotalRMR
								,sum(EquipmentFee) as SumTotalEquipmentFee
								,sum(ServiceFee) as SumTotalServiceFee
								,sum(AdvancedMonitoring) as SumTotalAdvancedMonitoring
								,(sum(TotalSales)-sum(TotalTax)) as SumTotalwoTax
								,sum(TotalTax) as SumTotalTax
								,sum(FinancedAmount) as SumFinancedAmount
								,sum(TotalSales) as SumTotalSales
                                from #tempSaleCom

								select 
								 sum(ActNonFee) as TotalActNonFee
								,sum(RMR) as TotalRMR
								,sum(EquipmentFee) as TotalEquipmentFee
								,sum(ServiceFee) as TotalServiceFee
								,sum(AdvancedMonitoring) as TotalAdvancedMonitoring
								,sum(TotalTax) as TotalTotalTax
								,sum(FinancedAmount) as FinancedAmount
								,sum(TotalSales) as TotalSales
								from #10SaleCom

								drop table #SaleCom
								drop table #tempSaleCom
                                drop table #10SaleCom";
            try
            {
                sqlQuery = string.Format(sqlQuery, NameSql, subquery, searchquery, SalesPersonQuery, InstallerQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {

                    AddParameter(cmd, pInt32("pageno", pageno));
                    AddParameter(cmd, pInt32("pagesize", pagesize));
                    if (!string.IsNullOrWhiteSpace(searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(searchtext.Trim())));

                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetInstalledDealsReportExport(Guid companyid, DateTime? start, DateTime? end, string searchtext, List<string> SalesList, List<string> InstallerList)
        {
            GlobalSettingDataAccess gsd = new GlobalSettingDataAccess();
            GlobalSetting gs = gsd.GetByQuery("SearchKey = 'CustomerNamingCondition'").FirstOrDefault();
            string NameSql = "";
            if (gs != null)
            {
                NameSql = gs.Value;
            }
            string SalesPersonQuery = "";
            if (SalesList != null && SalesList.Count > 0 && SalesList[0] != "null")
            {
                string Ids = "";
                foreach (string id in SalesList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                SalesPersonQuery = "and emp.UserId in (" + Ids.TrimEnd(',') + ")";
            }
            string InstallerQuery = "";
            if (InstallerList != null && InstallerList.Count > 0 && InstallerList[0] != "null")
            {
                string Ids = "";
                foreach (string id in InstallerList)
                {
                    Ids += string.Format("'{0}',", id);
                }

                InstallerQuery = "and emp2.UserId in (" + Ids.TrimEnd(',') + ")";
            }
            string subquery = "";
            if (start.HasValue && start.Value != new DateTime() && end.HasValue && end.Value != new DateTime())
            {
                subquery = string.Format("and cus.InstallDate between '{0}' and '{1}'", start.Value.ToString("yyyy-MM-dd 00:00:00.000"), end.Value.ToString("yyyy-MM-dd 23:59:59.000"));
            }
            string searchquery = "";
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                searchquery += "and CHARINDEX(@SearchText, cus.SearchText) > 0";
                //searchquery += string.Format("and (cus.FirstName like '%{0}%' or cus.LastName like '%{0}%' or cus.FirstName + ' ' + cus.LastName like '%{0}%' or cus.BusinessName like '%{0}%' or cus.DBA like '%{0}%')", searchtext);
            }
            string sqlQuery = @"select distinct * into #SaleCom from (Select
								cus.Id,
								{0} as [Customer Name],
								cus.CustomerNo as [CS Id],
                                FORMAT(cus.InstallDate,'M/dd/yy') as [Installed Date],
                                tkLookUp.DisplayText as [Ticket Type],
								emp.FirstName+' '+emp.LastName as [Sales Person],
                                emp2.FirstName+' '+emp2.LastName as Installer,
								lksource.DisplayText as [Lead Source],
								lklocation.DisplayText as [Sales Location],
								cus.Type,
								ISNULL(pc.ActivationFee+pc.NonConformingFee,0) as [Act Non Fee],
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float) as RMR,
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0) as [Equipment Fee],
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0) as [Service Fee],
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0) as [Advanced Monitoring],
								((
								ISNULL(pc.ActivationFee+pc.NonConformingFee,0)
								+
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0)
								) * (select Value from globalsetting where SearchKey = 'Sales Tax'))/100 as [Total Tax],
								ISNULL(cus.FinancedAmount,0) as [Financed Amount],

								((ISNULL(pc.ActivationFee+pc.NonConformingFee,0)
								+
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0)
								)
								+
								((
								ISNULL(pc.ActivationFee+pc.NonConformingFee,0)
								+
								CAST(ISNULL(cus.MonthlyMonitoringFee,0) as float)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService!=1),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=0 and cae.IsCopied=0 and tk.Status !='Incomplete'),0)
								+
								ISNULL((Select SUM(TotalPrice) from CustomerAppointmentEquipment cae 
								LEFT JOIN Ticket tk on tk.TicketId=cae.AppointmentId
								LEFT JOIN Equipment eqp on eqp.EquipmentId=cae.EquipmentId
								Where tk.CustomerId=cus.CustomerId and cae.IsService=1 and eqp.IsARBEnabled=1 and cae.IsCopied=0 and tk.Status !='Incomplete') *(pic.ForMonths-1),0)
								) * (select Value from globalsetting where SearchKey = 'Sales Tax'))/100
								--+
								--ISNULL(cus.FinancedAmount,0)
								) as TotalSales

								from Customer cus
                                left join CustomerExtended ce on ce.CustomerId=cus.CustomerId
								LEFT JOIN CustomerCompany cc on cc.CustomerId=cus.CustomerId
								LEFT JOIN Employee emp on emp.UserId=cus.SoldBy1
								left join Lookup lksource on lksource.DataKey ='LeadSource' and lksource.DataValue = cus.LeadSource and lksource.DataValue!='-1'
								left join Lookup lklocation on lklocation.DataKey = 'CommissionType' and lklocation.DataValue = cus.SalesLocation and lklocation.DataValue!='-1'
								LEFT join PackageCustomer pc on pc.CustomerId=cus.CustomerId
								LEFT JOIN PaymentInfoCustomer pic on pic.CustomerId=cus.CustomerId and pic.Payfor='Service'
                                LEFT JOIN Ticket tk on tk.CustomerId=cus.CustomerId and tk.TicketType ='Installation'
                                LEFT JOIN TicketUser tu on tu.TiketId=tk.TicketId and tu.IsPrimary=1
								LEFT JOIN Employee emp2 on emp2.UserId = tu.UserId
								LEFT JOIN Lookup tkLookUp on tkLookUp.DataValue=tk.TicketType and tkLookUp.DataKey='TicketType'																
                                Where cc.IsLead=0 and cus.IsActive=1 and ce.IsTestAccount != 1 and cus.InstallDate is not null and tk.IsAgreementTicket=1 and cus.TransferCustomerId IS NULL and (cus.MoveCustomerId='00000000-0000-0000-0000-000000000000' or cus.MoveCustomerId IS NULL) {1} {2} {3} {4}) d

								Select distinct *into #tempSaleCom from #SaleCom

								select * into #10SaleCom from #tempSaleCom
                                order by [Installed Date] desc

								select *,ISNULL(TotalSales,0) as [Total Sales] from #10SaleCom
                                order by [Installed Date] desc

								drop table #SaleCom
								drop table #tempSaleCom
                                drop table #10SaleCom";
            try
            {
                sqlQuery = string.Format(sqlQuery, NameSql, subquery, searchquery, SalesPersonQuery, InstallerQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    if (!string.IsNullOrWhiteSpace(searchtext))
                        AddParameter(cmd, pNVarChar("SearchText", Uri.UnescapeDataString(searchtext.Trim())));
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataSet GetAllTaxCollectionReport(TaxCollectionFilter taxCollectionFilter)
        {
            string sqlQuery = @"";
            string searchQuery = "";
            string subqueryforpaging1 = "";

            string DateQuery = "";

            string filterquery = "";

            string searchQueryupdated = "";
            string orderquery = "";
            string orderquery1 = "";
            string excelquery = "";
            int? pagestart = (taxCollectionFilter.PageNo - 1) * taxCollectionFilter.PageSize;
            int? pageend = taxCollectionFilter.PageSize;
            if (!string.IsNullOrWhiteSpace(taxCollectionFilter.SearchText))
            {
                searchQueryupdated = string.Format("and inv.InvoiceId like '%{0}%' or cus.Id like '%{0}%'", taxCollectionFilter.SearchText);
            }


            #region GoBackQuery
            if (taxCollectionFilter.StartDate != new DateTime() && taxCollectionFilter.EndDate != new DateTime())
            {
                var StartDate = taxCollectionFilter.StartDate.SetZeroHour().ClientToUTCTime().ToString("yyyy-MM-dd HH:mm:ss.fff");
                var EndDate = taxCollectionFilter.EndDate.SetMaxHour().ClientToUTCTime().ToString("yyyy-MM-dd HH:mm:ss.fff");
                DateQuery = string.Format("and TransacationDate between '{0}' and '{1}'", StartDate, EndDate);
            }
            #endregion

            #region Order
            if (!string.IsNullOrWhiteSpace(taxCollectionFilter.order))
            {
                if (taxCollectionFilter.order == "ascending/customerid")
                {
                    orderquery = "order by #ewq.[CusId] asc";
                    orderquery1 = "order by [CusId] asc";
                }
                else if (taxCollectionFilter.order == "descending/customerid")
                {
                    orderquery = "order by #ewq.[CusId] desc";
                    orderquery1 = "order by [CusId] desc";
                }
                else if (taxCollectionFilter.order == "ascending/invoiceid")
                {
                    orderquery = "order by #ewq.InvoiceId asc";
                    orderquery1 = "order by InvoiceId asc";
                }
                else if (taxCollectionFilter.order == "descending/invoiceid")
                {
                    orderquery = "order by #ewq.InvoiceId desc";
                    orderquery1 = "order by InvoiceId desc";
                }
                else if (taxCollectionFilter.order == "ascending/tax")
                {
                    orderquery = "order by #ewq.[Tax] asc";
                    orderquery1 = "order by [Tax] asc";
                }
                else if (taxCollectionFilter.order == "descending/tax")
                {
                    orderquery = "order by #ewq.[Tax] desc";
                    orderquery1 = "order by [Tax] desc";
                }
                else if (taxCollectionFilter.order == "ascending/receiveddate")
                {
                    orderquery = "order by #ewq.[TransacationDate] asc";
                    orderquery1 = "order by [TransacationDate] asc";
                }
                else if (taxCollectionFilter.order == "descending/receiveddate")
                {
                    orderquery = "order by #ewq.[TransacationDate] desc";
                    orderquery1 = "order by [TransacationDate] desc";
                }


                else
                {
                    orderquery = "order by #ewq.[TransacationDate] desc";
                    orderquery1 = "order by TransacationDate desc";
                }

            }
            else
            {
                orderquery = "order by #ewq.[TransacationDate] desc";
                orderquery1 = "order by TransacationDate desc";
            }
            #endregion


            #region excel
            if (!string.IsNullOrWhiteSpace(taxCollectionFilter.viewtype)
             && taxCollectionFilter.viewtype == "excel")
            {
                excelquery = string.Format("select Id ,CusId [CustomerId],CustomerName,InvoiceId,Format(Tax,'N2') [Tax Amount], convert(date,TransacationDate) [Received Date] from #Invoicetabs   order by Id desc ");






            }
            #endregion
            #region paging
            if (!string.IsNullOrWhiteSpace(taxCollectionFilter.viewtype)
              && taxCollectionFilter.viewtype == "webview")
            {
                subqueryforpaging1 = string.Format(" select *,IDENTITY(INT, 1, 1) AS paginationid into #Invoicedata from #Invoicetabs " +
                    "SELECT TOP ({1}) #ivd.* into #TestTable FROM #Invoicedata #ivd where paginationid NOT IN(Select TOP ({2}) paginationid from #Invoicedata #ewq {3})" +
                    " {4} " +
                    "select  count(Id) as [TotalCount] from #Invoicetabs where Id>0 and Id is not null " +
                    "  select * from #TestTable " +
                    "select sum(Tax) as TotalTax from #TestTable" +
                    " DROP TABLE #Invoicedata  " +
                    "drop table #TestTable ", searchQuery, taxCollectionFilter.PageSize, pagestart, orderquery, orderquery1);
            }
            #endregion
            sqlQuery = @"   

 
                               
		                                select inv.Id,inv.InvoiceId,cus.Id as CusId,inv.Tax ,
										CASE 
	                                        WHEN (cus.DBA = '' or cus.DBA IS NULL) AND  (cus.BusinessName = '' or cus.BusinessName IS NULL) THEN cus.FirstName +' '+cus.LastName
	                                        WHEN (cus.DBA = '' or cus.DBA IS NULL)  THEN cus.BusinessName
	                                        ELSE  cus.DBA
                                        END as CustomerName,
                                      --(select max(trans.TransacationDate) from [Transaction] trans where trans.ReferenceNo like Concat('%',inv.InvoiceId,'%')) as TransacationDate,
						              --(select max(trans.TransacationDate) from [Transaction] trans where trans.ReferenceNo = inv.InvoiceId) as TransacationDate
				                 (select trans.TransacationDate from [Transaction] trans where trans.Id = max(th.TransactionId)  ) as  TransacationDate

                                            into #Invoicetab from Invoice inv
											LEFT JOIN Customer cus on cus.CustomerId = inv.CustomerId
											left join TransactionHistory th on th.InvoiceId = inv.Id

											where inv.Status = 'Paid'
											and inv.Tax > 0

											and inv.CompanyId = '{3}'

                                            {6}
                                        group by inv.Id ,   inv.InvoiceId,cus.Id,inv.Tax ,cus.DBA,cus.BusinessName,cus.FirstName,cus.LastName

                                          select * into #Invoicetabs from #Invoicetab where Id>0 {11}

                                            {9}
                                            {5}
                              			    Drop table #Invoicetab
                              			    Drop table #Invoicetabs

					
                                    ";

            try
            {
                sqlQuery = string.Format(sqlQuery,
                                        taxCollectionFilter.SearchText,//0
                                        taxCollectionFilter.PageNo,  //1
                                         taxCollectionFilter.PageSize,//2
                                       taxCollectionFilter.CompanyId, //3
                                        taxCollectionFilter.CustomerId, //4
                                        subqueryforpaging1,//5
                                        searchQueryupdated,//6
                                        orderquery,//7
                                        orderquery1,//8
                                        excelquery,//9
                                        filterquery,//10
                                        DateQuery //11




                                        );
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllTrackingNumberRecorded(Guid companyid, string mindate, string maxdate)
        {
            string datequery = "";
            if (!string.IsNullOrWhiteSpace(mindate) && !string.IsNullOrWhiteSpace(maxdate) && mindate != "01/01/0001" && maxdate != "01/01/0001")
            {
                mindate = mindate + " 00:00:00.000";
                maxdate = maxdate + " 23:59:59.999";
                datequery = string.Format("and tnr.RecordDate between '{0}' and '{1}'", mindate, maxdate);
            }
            string sqlQuery = @"select tnr.*, cus.FirstName + ' ' + cus.LastName as CallerName, wl.[Name] as LocationName
                                from TrackingNumberRecorded tnr
                                left join WebsiteLocation wl on wl.CompanyId = tnr.CompanyId
                                left join Customer cus on cus.CustomerId = tnr.CustomerId
                                where (wl.CompanyId = '{0}' or wl.ReferCompanyId = '{0}')
                                and tnr.RecordFile is not null and tnr.RecordFile != ''
                                {1}
                                order by tnr.RecordDate desc";
            try
            {
                sqlQuery = string.Format(sqlQuery, companyid, datequery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetTotalCustomerCountByCompanyId(Guid CompanyId)
        {
            string sqlQuery = @"DECLARE @CompanyId uniqueidentifier
                                Set @CompanyId = '{0}'

                                select count(*) as TotalCustomer from  Customer c
                                Left Join CustomerCompany cc on cc.CustomerId = c.CustomerId
                                where cc.CompanyId = @CompanyId AND c.IsActive = 1 and cc.IsLead = 0";
            try
            {
                sqlQuery = string.Format(sqlQuery, CompanyId);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataSet GetRMROverviewData(Guid CustomerId, Guid CompanyId)
        {
            string sqlQuery = @"select top(1) 
                                RBS.BillAmount as RMR
                                ,RBS.TotalBillAmount as AmountDue
                                ,RBS.PaymentMethod
                                ,(select sum(TotalAmount) from Invoice Inv Where Inv.CustomerId = '{0}' and Inv.IsARBInvoice = 1
	                                 and Inv.BalanceDue > 0 and Inv.IsEstimate = 0 and Inv.[Status] not in('Cancelled', 'Rolled Over', 'Init', 'Paid')) as OpenInvoice

                                ,(select ISNULL(SUM(amount),0.00) from CustomerCredit CC where CC.CustomerId = '{0}' AND CC.IsRMRCredit = 1 and (CC.IsDeleted != 1 or CC.IsDeleted is null)) as OpenCredit
                                ,Day(RBS.PaymentCollectionDate) as BillOnDate
                                ,RBS.PreviousDate as LastPayment
                                from RecurringBillingSchedule RBS

                                where RBS.CustomerId ='{0}'
                                and RBS.CompanyId ='{1}'
                                order by RBS.Id desc";
            try
            {
                sqlQuery = string.Format(sqlQuery, CustomerId, CompanyId);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #region rmr log
        public DataSet GetAllUserActivityForRMRCustomerListByCustomerId(int pageno, int pagesize, DateTime? startdate, DateTime? enddate, string searchtext, Guid CustomerGId, string order, string logstartdate, string logenddate)
        {
            string sqlQuery = @"";
            string subquery = "";
            string subquery1 = "";
            string setext = "";
            string statusquery = "";
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                setext = string.Format("and (_Customer.FirstName+' '+_Customer.LastName like '%{0}%' or _UserActivity.StatsDate like '%{0}%' or _UserActivity.UserName like '%{0}%'  or _UserActivity.ActionDisplyText like '%{0}%' or _UserActivity.Action like '%{0}%' )", searchtext);
            }


            sqlQuery = @"DECLARE @pagestart int
                                DECLARE @pageend int
                                DECLARE @pageno int
                                DECLARE @pagesize int
                                Declare @CustomerId uniqueidentifier
                                set @CustomerId ='{7}' 
                                SET @pageno = {0}
                                SET @pagesize = {1}
                                SET @pagestart=(@pageno-1)* @pagesize 
                                SET @pageend = @pagesize

                                select distinct _Customer.FirstName+' '+_Customer.MiddleName +' '+_Customer.LastName CustomerName 
                                ,_UserActivity.*,_UserActivityCustomer.CustomerId as UACCustomerId
                                
                                into #CustomerData from UserActivityCustomer _UserActivityCustomer
                                left join Customer _Customer 
                                on _UserActivityCustomer.CustomerId = _Customer.CustomerId
                                left join UserActivity _UserActivity
                                on _UserActivity.ActivityId = _UserActivityCustomer.ActivityId
                                where _UserActivityCustomer.CustomerId = @CustomerId
                                and _UserActivity.Id is  not null
                                and _UserActivity.IsARB = 1
                                {6}
                                {5}
                                {3}
                                --{8}

                                select * into #CustomerDataFilter from #CustomerData

                                SELECT TOP(@pagesize) * FROM #CustomerDataFilter where Id NOT IN(Select TOP (@pagestart) #cus.Id from #CustomerData #cus {2})
                                {4}

                                select COUNT(Id) as TotalCount from #CustomerDataFilter
                                drop table #CustomerData
                                drop table #CustomerDataFilter";

            if (!string.IsNullOrWhiteSpace(order) && order != "undefined" && order != "null")
            {


                if (order == "ascending/date")
                {
                    subquery = "order by #cus.StatsDate asc";
                    subquery1 = "order by StatsDate asc";
                }
                else if (order == "descending/date")
                {
                    subquery = "order by #cus.StatsDate desc";
                    subquery1 = "order by StatsDate desc";
                }

                else if (order == "ascending/user")
                {
                    subquery = "order by #cus.UserName asc";
                    subquery1 = "order by UserName asc";
                }
                else if (order == "descending/user")
                {
                    subquery = "order by #cus.UserName desc";
                    subquery1 = "order by UserName desc";
                }

                else if (order == "ascending/change")
                {
                    subquery = "order by #cus.ActionDisplyText asc";
                    subquery1 = "order by ActionDisplyText asc";
                }
                else if (order == "descending/change")
                {
                    subquery = "order by #cus.ActionDisplyText desc";
                    subquery1 = "order by ActionDisplyText desc";
                }

                else if (order == "ascending/comment")
                {
                    subquery = "order by #cus.StatsDate asc";
                    subquery1 = "order by StatsDate asc";
                }
                else if (order == "descending/comment")
                {
                    subquery = "order by #cus.StatsDate desc";
                    subquery1 = "order by StatsDate desc";
                }
            }
            else
            {
                subquery = "order by #cus.Id desc";
                subquery1 = "order by Id desc";
            }

            string dateFilter = "";
            if (startdate.HasValue && enddate.HasValue && startdate.Value != new DateTime() && enddate.Value != new DateTime())
            {
                dateFilter = string.Format(@"and _UserActivity.StatsDate between '{0}' and '{1}'", startdate.Value.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss.fff"), enddate.Value.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            else if (startdate.HasValue && startdate.Value != new DateTime())
            {
                dateFilter += string.Format("and _UserActivity.StatsDate between '{0}' and '{1}'", startdate.Value.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss.fff"), startdate.Value.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            else if (enddate.HasValue && enddate.Value != new DateTime())
            {
                dateFilter += string.Format("and _UserActivity.StatsDate between '{0}' and '{1}'", enddate.Value.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss.fff"), enddate.Value.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            string filterquery = "";
            if (!string.IsNullOrWhiteSpace(logstartdate) && !string.IsNullOrWhiteSpace(logenddate))
            {
                var datemin = Convert.ToDateTime(logstartdate);
                var date = Convert.ToDateTime(logenddate);
                filterquery += string.Format("and _UserActivity.StatsDate between '{0}' and '{1}'", datemin.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss.fff"), date.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            else if (!string.IsNullOrWhiteSpace(logstartdate))
            {
                var date = Convert.ToDateTime(logstartdate);
                filterquery += string.Format("and _UserActivity.StatsDate between '{0}' and '{1}'", date.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss.fff"), date.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            else if (!string.IsNullOrWhiteSpace(logenddate))
            {
                var date = Convert.ToDateTime(logenddate);
                filterquery += string.Format("and _UserActivity.StatsDate between '{0}' and '{1}'", date.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss.fff"), date.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            sqlQuery = string.Format(sqlQuery, pageno, pagesize, subquery, statusquery, subquery1, setext, dateFilter, CustomerGId, filterquery);
            try
            {
                sqlQuery = string.Format(sqlQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataSet GetAllUserActivityForRMRCustomerList(int pageno, int pagesize, DateTime? startdate, DateTime? enddate, string searchtext, string order, string logstartdate, string logenddate)
        {
            string sqlQuery = @"";
            string subquery = "";
            string subquery1 = "";
            string setext = "";
            string statusquery = "";
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                setext = string.Format("and (_Customer.FirstName +' '+_Customer.LastName like '%{0}%' or _UserActivity.StatsDate like '%{0}%' or _UserActivity.UserName like '%{0}%'  or _UserActivity.ActionDisplyText like '%{0}%' or _UserActivity.Action like '%{0}%' )", searchtext);
            }


            sqlQuery = @"DECLARE @pagestart int
                                DECLARE @pageend int
                                DECLARE @pageno int
                                DECLARE @pagesize int
                                Declare @CustomerId uniqueidentifier
                                SET @pageno = {0}
                                SET @pagesize = {1}
                                SET @pagestart=(@pageno-1)* @pagesize 
                                SET @pageend = @pagesize

                                select distinct _Customer.FirstName+' '+_Customer.MiddleName +' '+_Customer.LastName CustomerName , _Customer.Id as CusIdInt , _CC.IsLead
                                ,_UserActivity.*,_UserActivityCustomer.CustomerId as UACCustomerId
                                
                                into #CustomerData from UserActivityCustomer _UserActivityCustomer
                                left join Customer _Customer 
                                on _UserActivityCustomer.CustomerId = _Customer.CustomerId
								left join CustomerCompany _CC on _CC.CustomerId = _UserActivityCustomer.CustomerId

                                left join UserActivity _UserActivity
                                on _UserActivity.ActivityId = _UserActivityCustomer.ActivityId
                                where _UserActivity.Id is  not null
                                and _UserActivity.IsARB = 1

                                {6}
                                {5}
                                {3}
                                {7}

                                select * into #CustomerDataFilter from #CustomerData

                                SELECT TOP(@pagesize) * FROM #CustomerDataFilter where Id NOT IN(Select TOP (@pagestart) #cus.Id from #CustomerData #cus {2})
                                {4}

                                select COUNT(Id) as TotalCount from #CustomerDataFilter
                                drop table #CustomerData
                                drop table #CustomerDataFilter";

            if (!string.IsNullOrWhiteSpace(order) && order != "undefined" && order != "null")
            {
                if (order == "ascending/customer")
                {
                    subquery = "order by #cus.CustomerName asc";
                    subquery1 = "order by CustomerName asc";
                }
                else if (order == "descending/customer")
                {
                    subquery = "order by #cus.CustomerName desc";
                    subquery1 = "order by CustomerName desc";
                }

                else if (order == "ascending/date")
                {
                    subquery = "order by #cus.StatsDate asc";
                    subquery1 = "order by StatsDate asc";
                }
                else if (order == "descending/date")
                {
                    subquery = "order by #cus.StatsDate desc";
                    subquery1 = "order by StatsDate desc";
                }

                else if (order == "ascending/user")
                {
                    subquery = "order by #cus.UserName asc";
                    subquery1 = "order by UserName asc";
                }
                else if (order == "descending/user")
                {
                    subquery = "order by #cus.UserName desc";
                    subquery1 = "order by UserName desc";
                }

                else if (order == "ascending/change")
                {
                    subquery = "order by #cus.ActionDisplyText asc";
                    subquery1 = "order by ActionDisplyText asc";
                }
                else if (order == "descending/change")
                {
                    subquery = "order by #cus.ActionDisplyText desc";
                    subquery1 = "order by ActionDisplyText desc";
                }

                else if (order == "ascending/comment")
                {
                    subquery = "order by #cus.StatsDate asc";
                    subquery1 = "order by StatsDate asc";
                }
                else if (order == "descending/comment")
                {
                    subquery = "order by #cus.StatsDate desc";
                    subquery1 = "order by StatsDate desc";
                }
            }
            else
            {
                subquery = "order by #cus.Id desc";
                subquery1 = "order by Id desc";
            }

            string dateFilter = "";
            //if (startdate.HasValue && enddate.HasValue && startdate.Value != new DateTime() && enddate.Value != new DateTime())
            //{
            //    dateFilter = string.Format(@"and _UserActivity.StatsDate >= '{0}' and _UserActivity.StatsDate <= '{1}'", startdate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"), enddate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"));
            //}
            string filterquery = "";
            if (!string.IsNullOrWhiteSpace(logstartdate) && !string.IsNullOrWhiteSpace(logenddate))
            {
                var datemin = Convert.ToDateTime(logstartdate);
                var date = Convert.ToDateTime(logenddate);
                filterquery += string.Format("and _UserActivity.StatsDate between '{0}' and '{1}'", datemin.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss.fff"), date.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            else if (!string.IsNullOrWhiteSpace(logstartdate))
            {
                var date = Convert.ToDateTime(logstartdate);
                filterquery += string.Format("and _UserActivity.StatsDate between '{0}' and '{1}'", date.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss.fff"), date.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            else if (!string.IsNullOrWhiteSpace(logenddate))
            {
                var date = Convert.ToDateTime(logenddate);
                filterquery += string.Format("and _UserActivity.StatsDate between '{0}' and '{1}'", date.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss.fff"), date.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            sqlQuery = string.Format(sqlQuery, pageno, pagesize, subquery, statusquery, subquery1, setext, dateFilter, filterquery);
            try
            {
                sqlQuery = string.Format(sqlQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataSet GetAllRMRCreditList(int pageno, int pagesize, DateTime? startdate, DateTime? enddate, string searchtext, string order, string logstartdate, string logenddate)
        {
            string sqlQuery = @"";
            string subquery = "";
            string subquery1 = "";
            string setext = "";
            string statusquery = "";
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                setext = string.Format("and (_Customer.FirstName +' '+_Customer.LastName like '%{0}%')", searchtext);
            }

            string dateFilter = "";
            if (!string.IsNullOrWhiteSpace(logstartdate) && !string.IsNullOrWhiteSpace(logenddate))
            {
                var datemin = Convert.ToDateTime(logstartdate);
                var date = Convert.ToDateTime(logenddate);
                dateFilter += string.Format("and _creditData.CreatedDate between '{0}' and '{1}'", datemin.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss.fff"), date.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            else if (!string.IsNullOrWhiteSpace(logstartdate))
            {
                var date = Convert.ToDateTime(logstartdate);
                dateFilter += string.Format("and _creditData.CreatedDate between '{0}' and '{1}'", date.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss.fff"), date.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            else if (!string.IsNullOrWhiteSpace(logenddate))
            {
                var date = Convert.ToDateTime(logenddate);
                dateFilter += string.Format("and _creditData.CreatedDate between '{0}' and '{1}'", date.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss.fff"), date.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            sqlQuery = @"
                        DECLARE @pagestart int
                        DECLARE @pageend int
                        DECLARE @pageno int
                        DECLARE @pagesize int
                        Declare @CustomerId uniqueidentifier
                        SET @pageno = {0}
                        SET @pagesize = {1}
                        SET @pagestart=(@pageno-1)* @pagesize 
                        SET @pageend = @pagesize

                        select _creditData.Id,_Customer.Id CusId, _Customer.CustomerNo CustomerNo,_Customer.FirstName+' '+_Customer.LastName as CustomerName,lk.DisplayText CustomerStatus,
                        _emp.FirstName+' '+_emp.LastName CreditUser,_creditData.CreatedDate CreditIssueDate,_creditData.CreditReason,_creditData.Amount CreditAmount,(select amount from customercredit where Id = _creditData.DebitRefId) AmountUsed

                        into #CreditData from customercredit _creditData
                        left join Customer _Customer 
                        on _creditData.CustomerId = _Customer.CustomerId
                        left join Employee _emp on _emp.UserId = _creditData.CreatedBy 
                        left join lookup lk on lk.DataValue = _Customer.CustomerStatus and lk.DataKey = 'CustomerStatus1'
                        where _creditData.IsRMRCredit = 1 and _creditData.Type = 'Credit' {2} {3}

                        select * into #CreditDataFilter from #CreditData

                        SELECT TOP(@pagesize) * FROM #CreditDataFilter where Id NOT IN(Select TOP (@pagestart) #cus.Id from #CreditDataFilter #cus )
                         
                          order by Id desc


                        select COUNT(Id) as TotalCount from #CreditDataFilter
                        drop table #CreditData
                        drop table #CreditDataFilter";


            sqlQuery = string.Format(sqlQuery, pageno, pagesize, dateFilter, setext);
            try
            {
                sqlQuery = string.Format(sqlQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllRMRCreditListExport(Guid CompanyId, string SearchText, string Order, DateTime? Start, DateTime? End)
        {
            string sqlQuery = @"";
            string setext = "";
            if (!string.IsNullOrWhiteSpace(SearchText))
            {
                setext = string.Format("and _Customer.FirstName+' '+_Customer.LastName like '%{0}%'", SearchText);
            }

            sqlQuery = @"   select _creditData.Id, _Customer.CustomerNo CustomerNo,_Customer.FirstName+' '+_Customer.LastName as CustomerName,lk.DisplayText CustomerStatus,
                        _emp.FirstName+' '+_emp.LastName CreditUser,format(_creditData.CreatedDate,'M/d/yy') as CreditIssueDate,round(_creditData.Amount,2 ) CreditAmount,_creditData.CreditReason,(select abs(round(amount,2 )) from customercredit where Id = _creditData.DebitRefId) AmountUsed

                        into #CreditData from customercredit _creditData
                        left join Customer _Customer 
                        on _creditData.CustomerId = _Customer.CustomerId
                        left join Employee _emp on _emp.UserId = _creditData.CreatedBy 
	                    left join lookup lk on lk.DataValue = _Customer.CustomerStatus and lk.DataKey = 'CustomerStatus1'
                        where _creditData.IsRMRCredit = 1 and _creditData.Type = 'Credit' {0} {1}

                        select *,(CreditAmount - abs(AmountUsed)) as CreditAvailableAmount  from #CreditData order by Id desc   
                        drop table #CreditData
                      ";



            string pageno = "";


            string dateFilter = "";
            if (Start.HasValue && End.HasValue && Start.Value != new DateTime() && End.Value != new DateTime())
            {

                dateFilter += string.Format("and _creditData.CreatedDate between '{0}' and '{1}'", Start.Value.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }

            sqlQuery = string.Format(sqlQuery, dateFilter, setext);
            try
            {
                sqlQuery = string.Format(sqlQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllUserActivityForRMRCustomerListByCustomerIdExport(Guid CustomerId, Guid CompanyId, string SearchText, string Order, DateTime? Start, DateTime? End)
        {
            string sqlQuery = @"";
            string setext = "";
            if (!string.IsNullOrWhiteSpace(SearchText))
            {
                setext = string.Format("and (_Customer.FirstName+' '+_Customer.LastName like '%{0}%' or _UserActivity.StatsDate like '%{0}%' or _UserActivity.UserName like '%{0}%'  or _UserActivity.ActionDisplyText like '%{0}%' or _UserActivity.Action like '%{0}%')", SearchText);
            }

            sqlQuery = @"    select FORMAT(DATEADD(HH,+6,_UserActivity.StatsDate), 'dd-MM-yyyy HH:mm') as Date, _UserActivity.UserName as [User],
                                _UserActivity.ActionDisplyText as [What Change],'' as [User Comment]
                                
                                from UserActivityCustomer _UserActivityCustomer
                                left join Customer _Customer 
                                on _UserActivityCustomer.CustomerId = _Customer.CustomerId
                                left join UserActivity _UserActivity
                                on _UserActivity.ActivityId = _UserActivityCustomer.ActivityId
                                where _UserActivityCustomer.CustomerId = '{0}'
                                AND _UserActivity.IsARB = 1
                                {2}
                                {1}
                                order by _UserActivity.StatsDate desc
                                ";



            string pageno = "";


            string dateFilter = "";
            if (Start.HasValue && End.HasValue && Start.Value != new DateTime() && End.Value != new DateTime())
            {
                dateFilter = string.Format(@"and _UserActivity.StatsDate between '{0}' and '{1}'", Start.Value.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            else if (Start.HasValue && Start.Value != new DateTime())
            {
                dateFilter += string.Format("and _UserActivity.StatsDate between '{0}' and '{1}'", Start.Value.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss.fff"), Start.Value.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            else if (End.HasValue && End.Value != new DateTime())
            {
                dateFilter += string.Format("and _UserActivity.StatsDate between '{0}' and '{1}'", End.Value.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }

            sqlQuery = string.Format(sqlQuery, CustomerId, setext, dateFilter);
            try
            {
                sqlQuery = string.Format(sqlQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable GetAllUserActivityForRMRCustomerListExport(Guid CompanyId, string SearchText, string Order, DateTime? Start, DateTime? End)
        {
            string sqlQuery = @"";
            string setext = "";
            if (!string.IsNullOrWhiteSpace(SearchText))
            {
                setext = string.Format("and _Customer.FirstName+' '+_Customer.LastName like '%{0}%' or _UserActivity.StatsDate like '%{0}%' or _UserActivity.UserName like '%{0}%'  or _UserActivity.ActionDisplyText like '%{0}%' or _UserActivity.Action like '%{0}%'", SearchText);
            }

            sqlQuery = @"    select  _Customer.FirstName+' '+_Customer.MiddleName +' '+_Customer.LastName CustomerName, _Customer.Id as CustomerId
                                 ,FORMAT(DATEADD(HH,+6,_UserActivity.StatsDate), 'M/d/yy HH:mm') as Date, _UserActivity.UserName as [User],
                                _UserActivity.ActionDisplyText as [What Change],'' as [User Comment]
                                
                                from UserActivityCustomer _UserActivityCustomer
                                left join Customer _Customer 
                                on _UserActivityCustomer.CustomerId = _Customer.CustomerId
                                left join UserActivity _UserActivity
                                on _UserActivity.ActivityId = _UserActivityCustomer.ActivityId
                                where _UserActivity.Id IS NOT NULL
                                and _UserActivity.IsARB = 1

                                {0}
                                {1}
                                order by _UserActivity.StatsDate desc
                                ";



            string pageno = "";


            string dateFilter = "";
            if (Start.HasValue && End.HasValue && Start.Value != new DateTime() && End.Value != new DateTime())
            {

                dateFilter += string.Format("and _UserActivity.StatsDate between '{0}' and '{1}'", Start.Value.SetZeroHour().ToString("yyyy-MM-dd HH:mm:ss.fff"), End.Value.SetMaxHour().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }

            sqlQuery = string.Format(sqlQuery, setext, dateFilter);
            try
            {
                sqlQuery = string.Format(sqlQuery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #endregion

        #region Sales Person
        public DataSet GetSalesPersonListByCompanyId(SalesPersonFilter Filter)
        {
            string subquery = "";
            string orderquery = "";
            string orderquery1 = "";
            if (Filter.StartDate.HasValue && Filter.StartDate.Value != new DateTime() && Filter.EndDate.HasValue && Filter.EndDate.Value != new DateTime())
            {
                Filter.StartDate = Filter.StartDate.Value.SetClientZeroHourToUTC();
                Filter.EndDate = Filter.EndDate.Value.SetClientMaxHourToUTC();
                subquery = string.Format("and CC.ConvertionDate between '{0}' and '{1}'", Filter.StartDate, Filter.EndDate);
            }
            string searchquery = "";
            if (!string.IsNullOrWhiteSpace(Filter.SearchText))
            {
                searchquery += string.Format("and (emp.FirstName +' '+ emp.LastName like '%{0}%')", Filter.SearchText);
            }
            #region Order
            if (!string.IsNullOrWhiteSpace(Filter.Order))
            {
                if (Filter.Order == "ascending/salesperson")
                {
                    orderquery = "order by #TempCre.SalesPerson asc";
                    orderquery1 = "order by SalesPerson asc";
                }
                else if (Filter.Order == "descending/salesperson")
                {
                    orderquery = "order by #TempCre.SalesPerson desc";
                    orderquery1 = "order by SalesPerson desc";
                }
                else if (Filter.Order == "ascending/sales")
                {
                    orderquery = "order by #TempCre.Sales asc";
                    orderquery1 = "order by Sales asc";
                }
                else if (Filter.Order == "descending/sales")
                {
                    orderquery = "order by #TempCre.Sales desc";
                    orderquery1 = "order by Sales desc";
                }
                else if (Filter.Order == "ascending/pending")
                {
                    orderquery = "order by #TempCre.Pending asc";
                    orderquery1 = "order by Pending asc";
                }
                else if (Filter.Order == "descending/pending")
                {
                    orderquery = "order by #TempCre.Pending desc";
                    orderquery1 = "order by Pending desc";
                }
                else if (Filter.Order == "ascending/completed")
                {
                    orderquery = "order by #TempCre.Completed asc";
                    orderquery1 = "order by Completed asc";
                }
                else if (Filter.Order == "descending/completed")
                {
                    orderquery = "order by #TempCre.Id desc";
                    orderquery1 = "order by Id desc";
                }
                else
                {
                    orderquery = "order by #TempCre.Id desc";
                    orderquery1 = "order by Id desc";
                }
            }
            else
            {
                orderquery = "order by #TempCre.Id desc";
                orderquery1 = "order by Id desc";
            }
            #endregion
            string sqlQuery = @"DECLARE @pagestart int
	                            DECLARE @pageend int
	                            DECLARE @pageno int
	                            DECLARE @pagesize int

                                SET @pageno = {0}
								SET @pagesize = {1}
                                SET @pagestart=(@pageno-1)* @pagesize 
                                SET @pageend = @pagesize

                                
                                select
								emp.Id
                                ,emp.FirstName +' '+ emp.LastName as SalesPerson
								,(select count(*) from Customer c 
								  left join CustomerCompany CC on CC.CustomerId = c.CustomerId
								  Where c.Soldby1 = emp.UserId {4}) as Sales
								,0 as Pending
								,0 as Completed
		                         into #TempEmp

								 from Employee emp
								 left join Customer cus on cus.Soldby1 = emp.UserId
								 where emp.CompanyId = '{2}'
                                 {3}

														SELECT TOP (@pagesize) #TempCre.* into #TestTable
														FROM #TempEmp #TempCre
														where Id NOT IN(Select TOP (@pagestart) Id from #TempEmp #TempCre {5})
														{6}
														select  count(Id) as [TotalCount] from #TempEmp

														select * from #TestTable

                                                        select 
														sum(Sales) as TotalSales
														,sum(Pending) as TotalPending
														,sum(Completed) as TotalCompleted
														from #TestTable

														DROP TABLE #TempEmp
														DROP TABLE #TestTable";
            try
            {
                sqlQuery = string.Format(sqlQuery, Filter.PageNo, Filter.PageSize, Filter.CompanyId, searchquery, subquery, orderquery, orderquery1);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public DataTable DownloadSalesPersonListByCompanyId(SalesPersonFilter Filter)
        {
            string subquery = "";
            if (Filter.StartDate.HasValue && Filter.StartDate.Value != new DateTime() && Filter.EndDate.HasValue && Filter.EndDate.Value != new DateTime())
            {
                Filter.StartDate = Filter.StartDate.Value.SetClientZeroHourToUTC();
                Filter.EndDate = Filter.EndDate.Value.SetClientMaxHourToUTC();
                subquery = string.Format("and CC.ConvertionDate between '{0}' and '{1}'", Filter.StartDate, Filter.EndDate);
            }
            string searchquery = "";
            if (!string.IsNullOrWhiteSpace(Filter.SearchText))
            {
                searchquery += string.Format("and (emp.FirstName +' '+ emp.LastName like '%{0}%')", Filter.SearchText);
            }

            string sqlQuery = @"select
                                emp.FirstName +' '+ emp.LastName as [Name of Sales Person]
                                ,(select count(*) from Customer c 
								  left join CustomerCompany CC on CC.CustomerId = c.CustomerId
								  Where c.Soldby1 = emp.UserId {2}) as [Sales]
                                ,0 as Pending
                                ,0 as Completed

                                from Employee emp
                                left join Customer cus on cus.Soldby1 = emp.UserId
                                where emp.CompanyId = '{0}'
                                {1}
                                order by emp.Id desc";
            try
            {
                sqlQuery = string.Format(sqlQuery, Filter.CompanyId, searchquery, subquery);
                using (SqlCommand cmd = GetSQLCommand(sqlQuery))
                {
                    DataSet dsResult = GetDataSet(cmd);
                    return dsResult.Tables[0];
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #endregion
    }
}
